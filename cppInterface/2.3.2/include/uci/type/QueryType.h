/** @file QueryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_QUERYTYPE_H
#define UCI_TYPE_QUERYTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "QueryComparisonType.h"
#include "QueryContainsType.h"
#include "QueryCountType.h"
#include "QueryEqualsType.h"
#include "QueryExistsType.h"
#include "QueryInstanceOfType.h"
#include "QueryMatchType.h"
#include "QueryPET.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Defines the generic UCI Query Language (UQL) operations. Each operation has a single input, a node that is the
  * current context of the query, and will output either true or false. When determining whether a Message should be sent
  * in a corresponding status, it should be sent if the output of the query is true. The data model of a UCI Message
  * should be considered as a tree structure containing branch and leaf nodes. The default context of a query is the
  * Message, i.e. the top-level global element declaration. Each UQL query is evaluated separately for each Message. For
  * more information on how the tree is evaluated, see the annotations in QueryStepType.
  */
class QueryType : public virtual QueryPET {
public:

  /** This method constructs a new QueryType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed QueryType.
    */
  static UCI_EXPORT QueryType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new QueryType initializing the data accessed by the new QueryType using the data accessed by
    * the specified QueryType (cloning).
    *
    * @param accessor The QueryType that provides access to the data that is to be used to initialize the data accessed by
    *      the new created QueryType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed QueryType.
    */
  static UCI_EXPORT QueryType& create(const QueryType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified QueryType. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The QueryType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(QueryType& accessor);

  /** Returns this accessor's type constant, i.e. queryType.
    *
    * @return This accessor's type constant, i.e. queryType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::queryType;
  }

  /** Returns the version that was initialized from the uci:version attribute of QueryType.
    *
    * @return The version that was initialized from the uci:version attribute of QueryType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const QueryType& accessor) = 0;

  /** Evaluates the query to true if all of the sub-queries are evaluated to true. [Occurrences: Minimum: 2; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::QueryPET, uci::type::accessorType::queryPET> And;

  /** Evaluates the query to true if any of the sub-queries are evaluated to true. [Occurrences: Minimum: 2; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::QueryPET, uci::type::accessorType::queryPET> Or;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum QueryTypeChoice {
    QUERYTYPE_CHOICE_NONE,
    QUERYTYPE_CHOICE_EQUALS,
    QUERYTYPE_CHOICE_LESSTHAN,
    QUERYTYPE_CHOICE_LESSTHANOREQUALTO,
    QUERYTYPE_CHOICE_GREATERTHAN,
    QUERYTYPE_CHOICE_GREATERTHANOREQUALTO,
    QUERYTYPE_CHOICE_CONTAINSCASESENSITIVE,
    QUERYTYPE_CHOICE_CONTAINSCASEINSENSITIVE,
    QUERYTYPE_CHOICE_INSTANCEOF,
    QUERYTYPE_CHOICE_COUNT,
    QUERYTYPE_CHOICE_EXISTS,
    QUERYTYPE_CHOICE_ANYMATCH,
    QUERYTYPE_CHOICE_ALLMATCH,
    QUERYTYPE_CHOICE_AND,
    QUERYTYPE_CHOICE_OR,
    QUERYTYPE_CHOICE_NOT
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual QueryTypeChoice getQueryTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getQueryTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setQueryTypeChoiceOrdinal(QueryTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Equals.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Equals.
    */
  virtual const uci::type::QueryEqualsType& getEquals() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Equals.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Equals.
    */
  virtual uci::type::QueryEqualsType& getEquals() = 0;

  /** Sets the complex content identified by Equals to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Equals.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setEquals(const uci::type::QueryEqualsType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Equals.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Equals, false otherwise.
    */
  virtual bool isEquals() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Equals.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Equals.
    */
  virtual uci::type::QueryEqualsType& chooseEquals(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LessThan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LessThan.
    */
  virtual const uci::type::QueryComparisonType& getLessThan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LessThan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LessThan.
    */
  virtual uci::type::QueryComparisonType& getLessThan() = 0;

  /** Sets the complex content identified by LessThan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LessThan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setLessThan(const uci::type::QueryComparisonType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LessThan.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LessThan, false otherwise.
    */
  virtual bool isLessThan() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by LessThan.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LessThan.
    */
  virtual uci::type::QueryComparisonType& chooseLessThan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LessThanOrEqualTo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LessThanOrEqualTo.
    */
  virtual const uci::type::QueryComparisonType& getLessThanOrEqualTo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LessThanOrEqualTo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LessThanOrEqualTo.
    */
  virtual uci::type::QueryComparisonType& getLessThanOrEqualTo() = 0;

  /** Sets the complex content identified by LessThanOrEqualTo to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LessThanOrEqualTo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setLessThanOrEqualTo(const uci::type::QueryComparisonType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LessThanOrEqualTo.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LessThanOrEqualTo, false
    *      otherwise.
    */
  virtual bool isLessThanOrEqualTo() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by LessThanOrEqualTo.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LessThanOrEqualTo.
    */
  virtual uci::type::QueryComparisonType& chooseLessThanOrEqualTo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GreaterThan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GreaterThan.
    */
  virtual const uci::type::QueryComparisonType& getGreaterThan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GreaterThan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GreaterThan.
    */
  virtual uci::type::QueryComparisonType& getGreaterThan() = 0;

  /** Sets the complex content identified by GreaterThan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GreaterThan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setGreaterThan(const uci::type::QueryComparisonType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GreaterThan.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GreaterThan, false otherwise.
    */
  virtual bool isGreaterThan() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThan.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GreaterThan.
    */
  virtual uci::type::QueryComparisonType& chooseGreaterThan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GreaterThanOrEqualTo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GreaterThanOrEqualTo.
    */
  virtual const uci::type::QueryComparisonType& getGreaterThanOrEqualTo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GreaterThanOrEqualTo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GreaterThanOrEqualTo.
    */
  virtual uci::type::QueryComparisonType& getGreaterThanOrEqualTo() = 0;

  /** Sets the complex content identified by GreaterThanOrEqualTo to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GreaterThanOrEqualTo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setGreaterThanOrEqualTo(const uci::type::QueryComparisonType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GreaterThanOrEqualTo.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GreaterThanOrEqualTo, false
    *      otherwise.
    */
  virtual bool isGreaterThanOrEqualTo() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThanOrEqualTo.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GreaterThanOrEqualTo.
    */
  virtual uci::type::QueryComparisonType& chooseGreaterThanOrEqualTo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ContainsCaseSensitive.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ContainsCaseSensitive.
    */
  virtual const uci::type::QueryContainsType& getContainsCaseSensitive() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ContainsCaseSensitive.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ContainsCaseSensitive.
    */
  virtual uci::type::QueryContainsType& getContainsCaseSensitive() = 0;

  /** Sets the complex content identified by ContainsCaseSensitive to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ContainsCaseSensitive.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setContainsCaseSensitive(const uci::type::QueryContainsType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ContainsCaseSensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ContainsCaseSensitive, false
    *      otherwise.
    */
  virtual bool isContainsCaseSensitive() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ContainsCaseSensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ContainsCaseSensitive.
    */
  virtual uci::type::QueryContainsType& chooseContainsCaseSensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ContainsCaseInsensitive.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ContainsCaseInsensitive.
    */
  virtual const uci::type::QueryContainsType& getContainsCaseInsensitive() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ContainsCaseInsensitive.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ContainsCaseInsensitive.
    */
  virtual uci::type::QueryContainsType& getContainsCaseInsensitive() = 0;

  /** Sets the complex content identified by ContainsCaseInsensitive to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ContainsCaseInsensitive.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setContainsCaseInsensitive(const uci::type::QueryContainsType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ContainsCaseInsensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ContainsCaseInsensitive, false
    *      otherwise.
    */
  virtual bool isContainsCaseInsensitive() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ContainsCaseInsensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ContainsCaseInsensitive.
    */
  virtual uci::type::QueryContainsType& chooseContainsCaseInsensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by InstanceOf.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by InstanceOf.
    */
  virtual const uci::type::QueryInstanceOfType& getInstanceOf() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by InstanceOf.
    *
    * @return A reference to the accessor that provides access to the complex content identified by InstanceOf.
    */
  virtual uci::type::QueryInstanceOfType& getInstanceOf() = 0;

  /** Sets the complex content identified by InstanceOf to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InstanceOf.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setInstanceOf(const uci::type::QueryInstanceOfType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by InstanceOf.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by InstanceOf, false otherwise.
    */
  virtual bool isInstanceOf() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by InstanceOf.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by InstanceOf.
    */
  virtual uci::type::QueryInstanceOfType& chooseInstanceOf(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Count.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Count.
    */
  virtual const uci::type::QueryCountType& getCount() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Count.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Count.
    */
  virtual uci::type::QueryCountType& getCount() = 0;

  /** Sets the complex content identified by Count to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Count.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setCount(const uci::type::QueryCountType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Count.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Count, false otherwise.
    */
  virtual bool isCount() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Count.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Count.
    */
  virtual uci::type::QueryCountType& chooseCount(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Exists.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Exists.
    */
  virtual const uci::type::QueryExistsType& getExists() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Exists.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Exists.
    */
  virtual uci::type::QueryExistsType& getExists() = 0;

  /** Sets the complex content identified by Exists to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Exists.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setExists(const uci::type::QueryExistsType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Exists.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Exists, false otherwise.
    */
  virtual bool isExists() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Exists.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Exists.
    */
  virtual uci::type::QueryExistsType& chooseExists(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AnyMatch.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AnyMatch.
    */
  virtual const uci::type::QueryMatchType& getAnyMatch() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AnyMatch.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AnyMatch.
    */
  virtual uci::type::QueryMatchType& getAnyMatch() = 0;

  /** Sets the complex content identified by AnyMatch to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AnyMatch.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setAnyMatch(const uci::type::QueryMatchType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AnyMatch.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AnyMatch, false otherwise.
    */
  virtual bool isAnyMatch() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AnyMatch.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AnyMatch.
    */
  virtual uci::type::QueryMatchType& chooseAnyMatch(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AllMatch.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AllMatch.
    */
  virtual const uci::type::QueryMatchType& getAllMatch() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AllMatch.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AllMatch.
    */
  virtual uci::type::QueryMatchType& getAllMatch() = 0;

  /** Sets the complex content identified by AllMatch to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AllMatch.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setAllMatch(const uci::type::QueryMatchType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AllMatch.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AllMatch, false otherwise.
    */
  virtual bool isAllMatch() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AllMatch.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AllMatch.
    */
  virtual uci::type::QueryMatchType& chooseAllMatch(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by And.
    *
    * @return A const reference to the bounded list identified by And.
    */
  virtual const uci::type::QueryType::And& getAnd() const = 0;

  /** Returns a reference to the bounded list identified by And.
    *
    * @return A reference to the bounded list identified by And.
    */
  virtual uci::type::QueryType::And& getAnd() = 0;

  /** Sets the bounded list identified by And.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setAnd(const uci::type::QueryType::And& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by And.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by And, false otherwise.
    */
  virtual bool isAnd() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by And.
    *
    * @return A reference to the accessor that provides access to the choice identified by And.
    */
  virtual uci::type::QueryType::And& chooseAnd() = 0;

  /** Returns a const reference to the bounded list identified by Or.
    *
    * @return A const reference to the bounded list identified by Or.
    */
  virtual const uci::type::QueryType::Or& getOr() const = 0;

  /** Returns a reference to the bounded list identified by Or.
    *
    * @return A reference to the bounded list identified by Or.
    */
  virtual uci::type::QueryType::Or& getOr() = 0;

  /** Sets the bounded list identified by Or.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setOr(const uci::type::QueryType::Or& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Or.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Or, false otherwise.
    */
  virtual bool isOr() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Or.
    *
    * @return A reference to the accessor that provides access to the choice identified by Or.
    */
  virtual uci::type::QueryType::Or& chooseOr() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Not.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Not.
    */
  virtual const uci::type::QueryPET& getNot() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Not.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Not.
    */
  virtual uci::type::QueryPET& getNot() = 0;

  /** Sets the complex content identified by Not to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Not.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QueryType& setNot(const uci::type::QueryPET& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Not.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Not, false otherwise.
    */
  virtual bool isNot() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Not.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Not.
    */
  virtual uci::type::QueryPET& chooseNot(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  QueryType() {
  }

  /** The destructor [only available to derived classes]. */
  ~QueryType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The QueryType to copy from.
    */
  QueryType(const QueryType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this QueryType to the contents of the QueryType on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The QueryType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this QueryType.
    * @return A reference to this QueryType.
    */
  QueryType& operator=(const QueryType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_QUERYTYPE_H

