/** @file PulseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PULSETYPE_H
#define UCI_TYPE_PULSETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DateTimeSigmaType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/DurationType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "uci/type/ModulationOnPulseDataType.h"
#include "uci/type/SignalRelativeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PulseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PulseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PulseType.
    */
  static UCI_EXPORT PulseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PulseType initializing the data accessed by the new PulseType using the data accessed by
    * the specified PulseType (cloning).
    *
    * @param accessor The PulseType that provides access to the data that is to be used to initialize the data accessed by
    *      the new created PulseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PulseType.
    */
  static UCI_EXPORT PulseType& create(const PulseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PulseType. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The PulseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PulseType& accessor);

  /** Returns this accessor's type constant, i.e. pulseType.
    *
    * @return This accessor's type constant, i.e. pulseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pulseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PulseType.
    *
    * @return The version that was initialized from the uci:version attribute of PulseType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PulseType& accessor) = 0;

  /** Indicates the Relative line of sight (LOS) to the emitter of the Pulse, otherwise known as the angle of arrival
    * (AOA). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SignalRelativeType, uci::type::accessorType::signalRelativeType> RelativeLOS;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual const uci::type::ComponentID_Type& getComponentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual uci::type::ComponentID_Type& getComponentID() = 0;

  /** Sets the complex content identified by ComponentID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setComponentID(const uci::type::ComponentID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Timestamp.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Timestamp.
    */
  virtual const uci::type::DateTimeSigmaType& getTimestamp() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Timestamp.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Timestamp.
    */
  virtual uci::type::DateTimeSigmaType& getTimestamp() = 0;

  /** Sets the complex content identified by Timestamp to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Timestamp.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setTimestamp(const uci::type::DateTimeSigmaType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Frequency.
    *
    * @return The value of the simple primitive data type identified by Frequency.
    */
  virtual uci::type::FrequencyTypeValue getFrequency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Frequency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setFrequency(uci::type::FrequencyTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by FrequencyDeviation.
    *
    * @return The value of the simple primitive data type identified by FrequencyDeviation.
    */
  virtual uci::type::FrequencyTypeValue getFrequencyDeviation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FrequencyDeviation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setFrequencyDeviation(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by FrequencyDeviation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyDeviation is enabled or not.
    */
  virtual bool hasFrequencyDeviation() const = 0;

  /** Clears (disabled) the Element identified by FrequencyDeviation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearFrequencyDeviation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Amplitude.
    *
    * @return The value of the simple primitive data type identified by Amplitude.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getAmplitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Amplitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setAmplitude(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by Amplitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Amplitude is enabled or not.
    */
  virtual bool hasAmplitude() const = 0;

  /** Clears (disabled) the Element identified by Amplitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearAmplitude() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RelativeAmplitude.
    *
    * @return The value of the simple primitive data type identified by RelativeAmplitude.
    */
  virtual uci::type::DecibelTypeValue getRelativeAmplitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RelativeAmplitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setRelativeAmplitude(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by RelativeAmplitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeAmplitude is enabled or not.
    */
  virtual bool hasRelativeAmplitude() const = 0;

  /** Clears (disabled) the Element identified by RelativeAmplitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearRelativeAmplitude() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidth.
    *
    * @return The value of the simple primitive data type identified by PulseWidth.
    */
  virtual uci::type::DurationTypeValue getPulseWidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setPulseWidth(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidth is enabled or not.
    */
  virtual bool hasPulseWidth() const = 0;

  /** Clears (disabled) the Element identified by PulseWidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearPulseWidth() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthDeviation.
    *
    * @return The value of the simple primitive data type identified by PulseWidthDeviation.
    */
  virtual uci::type::DurationTypeValue getPulseWidthDeviation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthDeviation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setPulseWidthDeviation(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidthDeviation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthDeviation is enabled or not.
    */
  virtual bool hasPulseWidthDeviation() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthDeviation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearPulseWidthDeviation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthChopped.
    *
    * @return The value of the simple primitive data type identified by PulseWidthChopped.
    */
  virtual xs::Boolean getPulseWidthChopped() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthChopped.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setPulseWidthChopped(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PulseWidthChopped exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthChopped is enabled or not.
    */
  virtual bool hasPulseWidthChopped() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthChopped.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearPulseWidthChopped() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseOnPulse.
    *
    * @return The value of the simple primitive data type identified by PulseOnPulse.
    */
  virtual xs::Boolean getPulseOnPulse() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseOnPulse.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setPulseOnPulse(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PulseOnPulse exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseOnPulse is enabled or not.
    */
  virtual bool hasPulseOnPulse() const = 0;

  /** Clears (disabled) the Element identified by PulseOnPulse.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearPulseOnPulse() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SNR.
    *
    * @return The value of the simple primitive data type identified by SNR.
    */
  virtual uci::type::DecibelTypeValue getSNR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SNR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setSNR(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by SNR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SNR is enabled or not.
    */
  virtual bool hasSNR() const = 0;

  /** Clears (disabled) the Element identified by SNR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearSNR() = 0;

  /** Returns a const reference to the bounded list identified by RelativeLOS.
    *
    * @return A const reference to the bounded list identified by RelativeLOS.
    */
  virtual const uci::type::PulseType::RelativeLOS& getRelativeLOS() const = 0;

  /** Returns a reference to the bounded list identified by RelativeLOS.
    *
    * @return A reference to the bounded list identified by RelativeLOS.
    */
  virtual uci::type::PulseType::RelativeLOS& getRelativeLOS() = 0;

  /** Sets the bounded list identified by RelativeLOS.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setRelativeLOS(const uci::type::PulseType::RelativeLOS& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ModulationOnPulse.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ModulationOnPulse.
    */
  virtual const uci::type::ModulationOnPulseDataType& getModulationOnPulse() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    */
  virtual uci::type::ModulationOnPulseDataType& getModulationOnPulse() = 0;

  /** Sets the complex content identified by ModulationOnPulse to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModulationOnPulse.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setModulationOnPulse(const uci::type::ModulationOnPulseDataType& value) = 0;

  /** Returns whether the Element identified by ModulationOnPulse exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModulationOnPulse is enabled or not.
    */
  virtual bool hasModulationOnPulse() const = 0;

  /** Enables the Element identified by ModulationOnPulse.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    */
  virtual uci::type::ModulationOnPulseDataType& enableModulationOnPulse(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModulationOnPulse.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearModulationOnPulse() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DynamicRangeExceeded.
    *
    * @return The value of the simple primitive data type identified by DynamicRangeExceeded.
    */
  virtual xs::Boolean getDynamicRangeExceeded() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DynamicRangeExceeded.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setDynamicRangeExceeded(xs::Boolean value) = 0;

  /** Returns whether the Element identified by DynamicRangeExceeded exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DynamicRangeExceeded is enabled or not.
    */
  virtual bool hasDynamicRangeExceeded() const = 0;

  /** Clears (disabled) the Element identified by DynamicRangeExceeded.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearDynamicRangeExceeded() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ThresholdDetection.
    *
    * @return The value of the simple primitive data type identified by ThresholdDetection.
    */
  virtual xs::Boolean getThresholdDetection() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ThresholdDetection.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setThresholdDetection(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ThresholdDetection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ThresholdDetection is enabled or not.
    */
  virtual bool hasThresholdDetection() const = 0;

  /** Clears (disabled) the Element identified by ThresholdDetection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearThresholdDetection() = 0;

  /** Returns the value of the SimplePrimitive data type identified by HighPowerCorruption.
    *
    * @return The value of the simple primitive data type identified by HighPowerCorruption.
    */
  virtual xs::Boolean getHighPowerCorruption() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by HighPowerCorruption.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setHighPowerCorruption(xs::Boolean value) = 0;

  /** Returns whether the Element identified by HighPowerCorruption exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HighPowerCorruption is enabled or not.
    */
  virtual bool hasHighPowerCorruption() const = 0;

  /** Clears (disabled) the Element identified by HighPowerCorruption.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearHighPowerCorruption() = 0;

  /** Returns the value of the SimplePrimitive data type identified by OnboardInterference.
    *
    * @return The value of the simple primitive data type identified by OnboardInterference.
    */
  virtual xs::Boolean getOnboardInterference() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by OnboardInterference.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& setOnboardInterference(xs::Boolean value) = 0;

  /** Returns whether the Element identified by OnboardInterference exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OnboardInterference is enabled or not.
    */
  virtual bool hasOnboardInterference() const = 0;

  /** Clears (disabled) the Element identified by OnboardInterference.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PulseType& clearOnboardInterference() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PulseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PulseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PulseType to copy from.
    */
  PulseType(const PulseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PulseType to the contents of the PulseType on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PulseType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this PulseType.
    * @return A reference to this PulseType.
    */
  PulseType& operator=(const PulseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PULSETYPE_H

