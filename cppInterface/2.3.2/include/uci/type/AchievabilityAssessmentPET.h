/** @file AchievabilityAssessmentPET.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACHIEVABILITYASSESSMENTPET_H
#define UCI_TYPE_ACHIEVABILITYASSESSMENTPET_H

#include "AchievabilityEnum.h"
#include "AssessmentStatusType.h"
#include "CannotComplyType.h"
#include "RoutePlanReferencesType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The polymorphic extension point for all Achievability Assessment types. */
class AchievabilityAssessmentPET : public virtual AssessmentStatusType {
public:

  /** Returns this accessor's type constant, i.e. achievabilityAssessmentPET.
    *
    * @return This accessor's type constant, i.e. achievabilityAssessmentPET.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::achievabilityAssessmentPET;
  }

  /** Returns the version that was initialized from the uci:version attribute of AchievabilityAssessmentPET.
    *
    * @return The version that was initialized from the uci:version attribute of AchievabilityAssessmentPET.
    */
  static std::string getUCITypeVersion() {
    return "003.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AchievabilityAssessmentPET& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RoutePlanReference.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RoutePlanReference.
    */
  virtual const uci::type::RoutePlanReferencesType& getRoutePlanReference() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RoutePlanReference.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlanReference.
    */
  virtual uci::type::RoutePlanReferencesType& getRoutePlanReference() = 0;

  /** Sets the complex content identified by RoutePlanReference to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlanReference.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentPET& setRoutePlanReference(const uci::type::RoutePlanReferencesType& value) = 0;

  /** Returns whether the Element identified by RoutePlanReference exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RoutePlanReference is enabled or not.
    */
  virtual bool hasRoutePlanReference() const = 0;

  /** Enables the Element identified by RoutePlanReference.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlanReference.
    */
  virtual uci::type::RoutePlanReferencesType& enableRoutePlanReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RoutePlanReference.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentPET& clearRoutePlanReference() = 0;

  /** Returns a const reference to the value of the enumeration identified by Achievability.
    *
    * @return A const reference to the value of the enumeration identified by Achievability.
    */
  virtual const uci::type::AchievabilityEnum& getAchievability() const = 0;

  /** Returns a reference to the value of the enumeration identified by Achievability.
    *
    * @return A reference to the value of the enumeration identified by Achievability.
    */
  virtual uci::type::AchievabilityEnum& getAchievability() = 0;

  /** Sets the value of the enumeration identified by Achievability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentPET& setAchievability(const uci::type::AchievabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Achievability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentPET& setAchievability(uci::type::AchievabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * NotAchievableReason.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      NotAchievableReason.
    */
  virtual const uci::type::CannotComplyType& getNotAchievableReason() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NotAchievableReason.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NotAchievableReason.
    */
  virtual uci::type::CannotComplyType& getNotAchievableReason() = 0;

  /** Sets the complex content identified by NotAchievableReason to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NotAchievableReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentPET& setNotAchievableReason(const uci::type::CannotComplyType& value) = 0;

  /** Returns whether the Element identified by NotAchievableReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NotAchievableReason is enabled or not.
    */
  virtual bool hasNotAchievableReason() const = 0;

  /** Enables the Element identified by NotAchievableReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NotAchievableReason.
    */
  virtual uci::type::CannotComplyType& enableNotAchievableReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NotAchievableReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentPET& clearNotAchievableReason() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AchievabilityAssessmentPET() {
  }

  /** The destructor [only available to derived classes]. */
  ~AchievabilityAssessmentPET() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AchievabilityAssessmentPET to copy from.
    */
  AchievabilityAssessmentPET(const AchievabilityAssessmentPET& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AchievabilityAssessmentPET to the contents of the
    * AchievabilityAssessmentPET on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The AchievabilityAssessmentPET on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this AchievabilityAssessmentPET.
    * @return A reference to this AchievabilityAssessmentPET.
    */
  AchievabilityAssessmentPET& operator=(const AchievabilityAssessmentPET& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACHIEVABILITYASSESSMENTPET_H

