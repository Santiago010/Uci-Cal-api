/** @file SAR_ActivityStatusDetailType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SAR_ACTIVITYSTATUSDETAILTYPE_H
#define UCI_TYPE_SAR_ACTIVITYSTATUSDETAILTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/FloatAccessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/ConcurrentCollectionDetailsType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RelativeDirectionEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SAR_ActivityStatusDetailType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SAR_ActivityStatusDetailType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_ActivityStatusDetailType.
    */
  static UCI_EXPORT SAR_ActivityStatusDetailType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SAR_ActivityStatusDetailType initializing the data accessed by the new
    * SAR_ActivityStatusDetailType using the data accessed by the specified SAR_ActivityStatusDetailType (cloning).
    *
    * @param accessor The SAR_ActivityStatusDetailType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created SAR_ActivityStatusDetailType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_ActivityStatusDetailType.
    */
  static UCI_EXPORT SAR_ActivityStatusDetailType& create(const SAR_ActivityStatusDetailType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SAR_ActivityStatusDetailType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SAR_ActivityStatusDetailType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SAR_ActivityStatusDetailType& accessor);

  /** Returns this accessor's type constant, i.e. sAR_ActivityStatusDetailType.
    *
    * @return This accessor's type constant, i.e. sAR_ActivityStatusDetailType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sAR_ActivityStatusDetailType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SAR_ActivityStatusDetailType.
    *
    * @return The version that was initialized from the uci:version attribute of SAR_ActivityStatusDetailType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SAR_ActivityStatusDetailType& accessor) = 0;

  /** This is the list of other activities that were executed concurrently with this activity. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ConcurrentCollectionDetailsType, uci::type::accessorType::concurrentCollectionDetailsType> ConcurrentActivity;

  /** Returns the value of the SimplePrimitive data type identified by PercentageInFOR.
    *
    * @return The value of the simple primitive data type identified by PercentageInFOR.
    */
  virtual uci::type::PercentTypeValue getPercentageInFOR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentageInFOR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setPercentageInFOR(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentageInFOR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentageInFOR is enabled or not.
    */
  virtual bool hasPercentageInFOR() const = 0;

  /** Clears (disabled) the Element identified by PercentageInFOR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearPercentageInFOR() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @return The value of the simple primitive data type identified by ActualStartTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setActualStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStartTime is enabled or not.
    */
  virtual bool hasActualStartTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearActualStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualStopTime.
    *
    * @return The value of the simple primitive data type identified by ActualStopTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStopTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStopTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setActualStopTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStopTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStopTime is enabled or not.
    */
  virtual bool hasActualStopTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStopTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearActualStopTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentCoverage.
    *
    * @return The value of the simple primitive data type identified by PercentCoverage.
    */
  virtual uci::type::PercentTypeValue getPercentCoverage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentCoverage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setPercentCoverage(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentCoverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentCoverage is enabled or not.
    */
  virtual bool hasPercentCoverage() const = 0;

  /** Clears (disabled) the Element identified by PercentCoverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearPercentCoverage() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EntitiesReported.
    *
    * @return The value of the simple primitive data type identified by EntitiesReported.
    */
  virtual xs::UnsignedInt getEntitiesReported() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EntitiesReported.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setEntitiesReported(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by EntitiesReported exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EntitiesReported is enabled or not.
    */
  virtual bool hasEntitiesReported() const = 0;

  /** Clears (disabled) the Element identified by EntitiesReported.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearEntitiesReported() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProductsProduced.
    *
    * @return The value of the simple primitive data type identified by ProductsProduced.
    */
  virtual xs::UnsignedInt getProductsProduced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProductsProduced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setProductsProduced(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ProductsProduced exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductsProduced is enabled or not.
    */
  virtual bool hasProductsProduced() const = 0;

  /** Clears (disabled) the Element identified by ProductsProduced.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearProductsProduced() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @return The value of the simple primitive data type identified by EstimatedERP.
    */
  virtual uci::type::DecibelTypeValue getEstimatedERP() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setEstimatedERP(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedERP exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedERP is enabled or not.
    */
  virtual bool hasEstimatedERP() const = 0;

  /** Clears (disabled) the Element identified by EstimatedERP.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearEstimatedERP() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumCNR.
    *
    * @return The value of the simple primitive data type identified by MinimumCNR.
    */
  virtual uci::type::DecibelTypeValue getMinimumCNR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumCNR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setMinimumCNR(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by MinimumCNR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinimumCNR is enabled or not.
    */
  virtual bool hasMinimumCNR() const = 0;

  /** Clears (disabled) the Element identified by MinimumCNR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearMinimumCNR() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AchievableEllipticity.
    *
    * @return The value of the simple primitive data type identified by AchievableEllipticity.
    */
  virtual xs::Float getAchievableEllipticity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AchievableEllipticity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setAchievableEllipticity(xs::Float value) = 0;

  /** Returns whether the Element identified by AchievableEllipticity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AchievableEllipticity is enabled or not.
    */
  virtual bool hasAchievableEllipticity() const = 0;

  /** Clears (disabled) the Element identified by AchievableEllipticity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearAchievableEllipticity() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AchievableResolution.
    *
    * @return The value of the simple primitive data type identified by AchievableResolution.
    */
  virtual xs::Double getAchievableResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AchievableResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setAchievableResolution(xs::Double value) = 0;

  /** Returns whether the Element identified by AchievableResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AchievableResolution is enabled or not.
    */
  virtual bool hasAchievableResolution() const = 0;

  /** Clears (disabled) the Element identified by AchievableResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearAchievableResolution() = 0;

  /** Returns a const reference to the bounded list identified by ConcurrentActivity.
    *
    * @return A const reference to the bounded list identified by ConcurrentActivity.
    */
  virtual const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& getConcurrentActivity() const = 0;

  /** Returns a reference to the bounded list identified by ConcurrentActivity.
    *
    * @return A reference to the bounded list identified by ConcurrentActivity.
    */
  virtual uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& getConcurrentActivity() = 0;

  /** Sets the bounded list identified by ConcurrentActivity.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setConcurrentActivity(const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentOccluded.
    *
    * @return The value of the simple primitive data type identified by PercentOccluded.
    */
  virtual uci::type::PercentTypeValue getPercentOccluded() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentOccluded.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setPercentOccluded(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentOccluded exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentOccluded is enabled or not.
    */
  virtual bool hasPercentOccluded() const = 0;

  /** Clears (disabled) the Element identified by PercentOccluded.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearPercentOccluded() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeToService.
    *
    * @return The value of the simple primitive data type identified by TimeToService.
    */
  virtual uci::type::DurationTypeValue getTimeToService() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeToService.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setTimeToService(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by TimeToService exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeToService is enabled or not.
    */
  virtual bool hasTimeToService() const = 0;

  /** Clears (disabled) the Element identified by TimeToService.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearTimeToService() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentRadarTimeline.
    *
    * @return The value of the simple primitive data type identified by PercentRadarTimeline.
    */
  virtual uci::type::PercentTypeValue getPercentRadarTimeline() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentRadarTimeline.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setPercentRadarTimeline(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentRadarTimeline exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentRadarTimeline is enabled or not.
    */
  virtual bool hasPercentRadarTimeline() const = 0;

  /** Clears (disabled) the Element identified by PercentRadarTimeline.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearPercentRadarTimeline() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentageInFOV.
    *
    * @return The value of the simple primitive data type identified by PercentageInFOV.
    */
  virtual uci::type::PercentTypeValue getPercentageInFOV() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentageInFOV.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setPercentageInFOV(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentageInFOV exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentageInFOV is enabled or not.
    */
  virtual bool hasPercentageInFOV() const = 0;

  /** Clears (disabled) the Element identified by PercentageInFOV.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearPercentageInFOV() = 0;

  /** Returns a const reference to the value of the enumeration identified by RelativeDirectionOfTarget.
    *
    * @return A const reference to the value of the enumeration identified by RelativeDirectionOfTarget.
    */
  virtual const uci::type::RelativeDirectionEnum& getRelativeDirectionOfTarget() const = 0;

  /** Returns a reference to the value of the enumeration identified by RelativeDirectionOfTarget.
    *
    * @return A reference to the value of the enumeration identified by RelativeDirectionOfTarget.
    */
  virtual uci::type::RelativeDirectionEnum& getRelativeDirectionOfTarget() = 0;

  /** Sets the value of the enumeration identified by RelativeDirectionOfTarget.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setRelativeDirectionOfTarget(const uci::type::RelativeDirectionEnum& value) = 0;

  /** Sets the value of the enumeration identified by RelativeDirectionOfTarget.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& setRelativeDirectionOfTarget(uci::type::RelativeDirectionEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by RelativeDirectionOfTarget exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeDirectionOfTarget is enabled or not.
    */
  virtual bool hasRelativeDirectionOfTarget() const = 0;

  /** Enables the Element identified by RelativeDirectionOfTarget.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by RelativeDirectionOfTarget.
    */
  virtual uci::type::RelativeDirectionEnum& enableRelativeDirectionOfTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RelativeDirectionOfTarget.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityStatusDetailType& clearRelativeDirectionOfTarget() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SAR_ActivityStatusDetailType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SAR_ActivityStatusDetailType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SAR_ActivityStatusDetailType to copy from.
    */
  SAR_ActivityStatusDetailType(const SAR_ActivityStatusDetailType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SAR_ActivityStatusDetailType to the contents of the
    * SAR_ActivityStatusDetailType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SAR_ActivityStatusDetailType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this SAR_ActivityStatusDetailType.
    * @return A reference to this SAR_ActivityStatusDetailType.
    */
  SAR_ActivityStatusDetailType& operator=(const SAR_ActivityStatusDetailType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SAR_ACTIVITYSTATUSDETAILTYPE_H

