/** @file ReadinessRecordType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_READINESSRECORDTYPE_H
#define UCI_TYPE_READINESSRECORDTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "OpVolumeType.h"
#include "ReadinessItemStatusType.h"
#include "ReadinessTimeSpanType.h"
#include "ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the expected status of Items optionally limited by any combination of a time period and kinematic zone. For
  * example, a ReadinessRecord is created for each TimeSpan and/or *Zone where the OperationalStatus of one or more Items
  * changes. If OperationalStatus doesn't change for a given System for the duration of the associated Mission being
  * planned, there would be only one ReadinessRecord and TimeSpan / *Zones would be omitted.
  */
class ReadinessRecordType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ReadinessRecordType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ReadinessRecordType.
    */
  static UCI_EXPORT ReadinessRecordType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ReadinessRecordType initializing the data accessed by the new ReadinessRecordType using
    * the data accessed by the specified ReadinessRecordType (cloning).
    *
    * @param accessor The ReadinessRecordType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ReadinessRecordType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ReadinessRecordType.
    */
  static UCI_EXPORT ReadinessRecordType& create(const ReadinessRecordType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ReadinessRecordType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The ReadinessRecordType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ReadinessRecordType& accessor);

  /** Returns this accessor's type constant, i.e. readinessRecordType.
    *
    * @return This accessor's type constant, i.e. readinessRecordType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::readinessRecordType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ReadinessRecordType.
    *
    * @return The version that was initialized from the uci:version attribute of ReadinessRecordType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ReadinessRecordType& accessor) = 0;

  /** Indicates the readiness of an "item" for the associated Mission. Item is an intentionally vague term to include any
    * UCI concept that is first-person or first-person surrogate reported that describes availability for use in a Mission.
    * Readiness is intended to be grouped/indexed by the child OperationalStatus element. In other words, all readiness
    * items with the same operational status should be grouped into one instance of this element. A given real world
    * Subsystem, Capability, etc. should not be reported in multiple instances of this element as they would be in conflict
    * per the group/index guidelines above. [Occurrences: Minimum: 1; Maximum: 7]
    */
  typedef uci::base::BoundedList<uci::type::ReadinessItemStatusType, uci::type::accessorType::readinessItemStatusType> Item;

  /** Returns a const reference to the bounded list identified by Item.
    *
    * @return A const reference to the bounded list identified by Item.
    */
  virtual const uci::type::ReadinessRecordType::Item& getItem() const = 0;

  /** Returns a reference to the bounded list identified by Item.
    *
    * @return A reference to the bounded list identified by Item.
    */
  virtual uci::type::ReadinessRecordType::Item& getItem() = 0;

  /** Sets the bounded list identified by Item.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessRecordType& setItem(const uci::type::ReadinessRecordType::Item& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TimeSpan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TimeSpan.
    */
  virtual const uci::type::ReadinessTimeSpanType& getTimeSpan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TimeSpan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TimeSpan.
    */
  virtual uci::type::ReadinessTimeSpanType& getTimeSpan() = 0;

  /** Sets the complex content identified by TimeSpan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TimeSpan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessRecordType& setTimeSpan(const uci::type::ReadinessTimeSpanType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GeoZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GeoZone.
    */
  virtual const uci::type::ZoneType& getGeoZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GeoZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GeoZone.
    */
  virtual uci::type::ZoneType& getGeoZone() = 0;

  /** Sets the complex content identified by GeoZone to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GeoZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessRecordType& setGeoZone(const uci::type::ZoneType& value) = 0;

  /** Returns whether the Element identified by GeoZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GeoZone is enabled or not.
    */
  virtual bool hasGeoZone() const = 0;

  /** Enables the Element identified by GeoZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by GeoZone.
    */
  virtual uci::type::ZoneType& enableGeoZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GeoZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessRecordType& clearGeoZone() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitalZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitalZone.
    */
  virtual const uci::type::OpVolumeType& getOrbitalZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitalZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalZone.
    */
  virtual uci::type::OpVolumeType& getOrbitalZone() = 0;

  /** Sets the complex content identified by OrbitalZone to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitalZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessRecordType& setOrbitalZone(const uci::type::OpVolumeType& value) = 0;

  /** Returns whether the Element identified by OrbitalZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitalZone is enabled or not.
    */
  virtual bool hasOrbitalZone() const = 0;

  /** Enables the Element identified by OrbitalZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalZone.
    */
  virtual uci::type::OpVolumeType& enableOrbitalZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitalZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessRecordType& clearOrbitalZone() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ReadinessRecordType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ReadinessRecordType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ReadinessRecordType to copy from.
    */
  ReadinessRecordType(const ReadinessRecordType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ReadinessRecordType to the contents of the ReadinessRecordType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ReadinessRecordType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ReadinessRecordType.
    * @return A reference to this ReadinessRecordType.
    */
  ReadinessRecordType& operator=(const ReadinessRecordType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_READINESSRECORDTYPE_H

