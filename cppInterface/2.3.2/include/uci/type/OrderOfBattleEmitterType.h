/** @file OrderOfBattleEmitterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORDEROFBATTLEEMITTERTYPE_H
#define UCI_TYPE_ORDEROFBATTLEEMITTERTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "EOB_EmitterID_Type.h"
#include "EOB_EmitterIdentityType.h"
#include "EOB_EmitterModeType.h"
#include "OperationalScheduleType.h"
#include "OrderOfBattleLastCollectorType.h"
#include "OrderOfBattleRecordOwnerType.h"
#include "OrderOfBattleTimestampsType.h"
#include "VisibleString512Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** An emitter's data regarding collection information, modes/parametrics, operational schedule and other related
  * information. Modes/Parametrics are provided, in part, by the Global Command and Control System Integrated Imagery and
  * Intelligence (GCCS-I3). More detail found in the Application Program Interface Reference Manual (APIRM) for MIDB Data
  * Access Layer (MDAL). Additional mode/parametric information is developed through EOB correlation.
  */
class OrderOfBattleEmitterType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrderOfBattleEmitterType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrderOfBattleEmitterType.
    */
  static UCI_EXPORT OrderOfBattleEmitterType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrderOfBattleEmitterType initializing the data accessed by the new
    * OrderOfBattleEmitterType using the data accessed by the specified OrderOfBattleEmitterType (cloning).
    *
    * @param accessor The OrderOfBattleEmitterType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created OrderOfBattleEmitterType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrderOfBattleEmitterType.
    */
  static UCI_EXPORT OrderOfBattleEmitterType& create(const OrderOfBattleEmitterType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrderOfBattleEmitterType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The OrderOfBattleEmitterType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrderOfBattleEmitterType& accessor);

  /** Returns this accessor's type constant, i.e. orderOfBattleEmitterType.
    *
    * @return This accessor's type constant, i.e. orderOfBattleEmitterType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orderOfBattleEmitterType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrderOfBattleEmitterType.
    *
    * @return The version that was initialized from the uci:version attribute of OrderOfBattleEmitterType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrderOfBattleEmitterType& accessor) = 0;

  /** Indicates the Modes/Parametrics that this emitter have been observed operating. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EOB_EmitterModeType, uci::type::accessorType::eOB_EmitterModeType> Mode;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EmitterID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EmitterID.
    */
  virtual const uci::type::EOB_EmitterID_Type& getEmitterID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EmitterID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EmitterID.
    */
  virtual uci::type::EOB_EmitterID_Type& getEmitterID() = 0;

  /** Sets the complex content identified by EmitterID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EmitterID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setEmitterID(const uci::type::EOB_EmitterID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::EOB_EmitterIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::EOB_EmitterIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setIdentity(const uci::type::EOB_EmitterIdentityType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::EOB_EmitterIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& clearIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual const uci::type::OrderOfBattleTimestampsType& getTimestamps() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& getTimestamps() = 0;

  /** Sets the complex content identified by Timestamps to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Timestamps.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& value) = 0;

  /** Returns whether the Element identified by Timestamps exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Timestamps is enabled or not.
    */
  virtual bool hasTimestamps() const = 0;

  /** Enables the Element identified by Timestamps.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& enableTimestamps(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Timestamps.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& clearTimestamps() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by LastCollector.
    *
    * @return A const reference to the accessor that provides access to the string identified by LastCollector.
    */
  virtual const uci::type::OrderOfBattleLastCollectorType& getLastCollector() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by LastCollector.
    *
    * @return A reference to the accessor that provides access to the string identified by LastCollector.
    */
  virtual uci::type::OrderOfBattleLastCollectorType& getLastCollector() = 0;

  /** Sets the string identified by LastCollector to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by LastCollector.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setLastCollector(const uci::type::OrderOfBattleLastCollectorType& value) = 0;

  /** Sets the string identified by LastCollector to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setLastCollector(const std::string& value) = 0;

  /** Sets the string identified by LastCollector to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setLastCollector(const char* value) = 0;

  /** Returns whether the Element identified by LastCollector exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LastCollector is enabled or not.
    */
  virtual bool hasLastCollector() const = 0;

  /** Enables the Element identified by LastCollector.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by LastCollector.
    */
  virtual uci::type::OrderOfBattleLastCollectorType& enableLastCollector(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LastCollector.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& clearLastCollector() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by RecordOwner.
    *
    * @return A const reference to the accessor that provides access to the string identified by RecordOwner.
    */
  virtual const uci::type::OrderOfBattleRecordOwnerType& getRecordOwner() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by RecordOwner.
    *
    * @return A reference to the accessor that provides access to the string identified by RecordOwner.
    */
  virtual uci::type::OrderOfBattleRecordOwnerType& getRecordOwner() = 0;

  /** Sets the string identified by RecordOwner to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by RecordOwner.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setRecordOwner(const uci::type::OrderOfBattleRecordOwnerType& value) = 0;

  /** Sets the string identified by RecordOwner to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setRecordOwner(const std::string& value) = 0;

  /** Sets the string identified by RecordOwner to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setRecordOwner(const char* value) = 0;

  /** Returns whether the Element identified by RecordOwner exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RecordOwner is enabled or not.
    */
  virtual bool hasRecordOwner() const = 0;

  /** Enables the Element identified by RecordOwner.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by RecordOwner.
    */
  virtual uci::type::OrderOfBattleRecordOwnerType& enableRecordOwner(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RecordOwner.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& clearRecordOwner() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by RemarksText.
    *
    * @return A const reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual const uci::type::VisibleString512Type& getRemarksText() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by RemarksText.
    *
    * @return A reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual uci::type::VisibleString512Type& getRemarksText() = 0;

  /** Sets the string identified by RemarksText to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by RemarksText.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setRemarksText(const uci::type::VisibleString512Type& value) = 0;

  /** Sets the string identified by RemarksText to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setRemarksText(const std::string& value) = 0;

  /** Sets the string identified by RemarksText to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setRemarksText(const char* value) = 0;

  /** Returns whether the Element identified by RemarksText exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemarksText is enabled or not.
    */
  virtual bool hasRemarksText() const = 0;

  /** Enables the Element identified by RemarksText.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual uci::type::VisibleString512Type& enableRemarksText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemarksText.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& clearRemarksText() = 0;

  /** Returns a const reference to the bounded list identified by Mode.
    *
    * @return A const reference to the bounded list identified by Mode.
    */
  virtual const uci::type::OrderOfBattleEmitterType::Mode& getMode() const = 0;

  /** Returns a reference to the bounded list identified by Mode.
    *
    * @return A reference to the bounded list identified by Mode.
    */
  virtual uci::type::OrderOfBattleEmitterType::Mode& getMode() = 0;

  /** Sets the bounded list identified by Mode.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setMode(const uci::type::OrderOfBattleEmitterType::Mode& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OperationalSchedule.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OperationalSchedule.
    */
  virtual const uci::type::OperationalScheduleType& getOperationalSchedule() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OperationalSchedule.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OperationalSchedule.
    */
  virtual uci::type::OperationalScheduleType& getOperationalSchedule() = 0;

  /** Sets the complex content identified by OperationalSchedule to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperationalSchedule.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& setOperationalSchedule(const uci::type::OperationalScheduleType& value) = 0;

  /** Returns whether the Element identified by OperationalSchedule exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperationalSchedule is enabled or not.
    */
  virtual bool hasOperationalSchedule() const = 0;

  /** Enables the Element identified by OperationalSchedule.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OperationalSchedule.
    */
  virtual uci::type::OperationalScheduleType& enableOperationalSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperationalSchedule.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleEmitterType& clearOperationalSchedule() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrderOfBattleEmitterType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrderOfBattleEmitterType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrderOfBattleEmitterType to copy from.
    */
  OrderOfBattleEmitterType(const OrderOfBattleEmitterType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrderOfBattleEmitterType to the contents of the
    * OrderOfBattleEmitterType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OrderOfBattleEmitterType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this OrderOfBattleEmitterType.
    * @return A reference to this OrderOfBattleEmitterType.
    */
  OrderOfBattleEmitterType& operator=(const OrderOfBattleEmitterType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORDEROFBATTLEEMITTERTYPE_H

