/** @file SAR_CapabilityOptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SAR_CAPABILITYOPTIONSTYPE_H
#define UCI_TYPE_SAR_CAPABILITYOPTIONSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/COARPS_SAR_CollectionOptionsEnum.h"
#include "uci/type/ElectronicProtectionOptionsSupportedType.h"
#include "uci/type/MultistaticOptionsSupportedType.h"
#include "uci/type/SupportedResolutionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SAR_CapabilityOptionsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SAR_CapabilityOptionsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_CapabilityOptionsType.
    */
  static UCI_EXPORT SAR_CapabilityOptionsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SAR_CapabilityOptionsType initializing the data accessed by the new
    * SAR_CapabilityOptionsType using the data accessed by the specified SAR_CapabilityOptionsType (cloning).
    *
    * @param accessor The SAR_CapabilityOptionsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SAR_CapabilityOptionsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_CapabilityOptionsType.
    */
  static UCI_EXPORT SAR_CapabilityOptionsType& create(const SAR_CapabilityOptionsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SAR_CapabilityOptionsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SAR_CapabilityOptionsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SAR_CapabilityOptionsType& accessor);

  /** Returns this accessor's type constant, i.e. sAR_CapabilityOptionsType.
    *
    * @return This accessor's type constant, i.e. sAR_CapabilityOptionsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sAR_CapabilityOptionsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SAR_CapabilityOptionsType.
    *
    * @return The version that was initialized from the uci:version attribute of SAR_CapabilityOptionsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.001.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SAR_CapabilityOptionsType& accessor) = 0;

  /** Indicates the list of EP capabilities that the current HW / SW allows an external actor to control for this
    * capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ElectronicProtectionOptionsSupportedType, uci::type::accessorType::electronicProtectionOptionsSupportedType> ElectronicProtectionOptionsSupported;

  /** Indicates the list of Supported Sensor Resolution Capabilities that the current HW/SW allows an external actor to
    * control for this capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SupportedResolutionType, uci::type::accessorType::supportedResolutionType> SupportedResolution;

  /** Returns the value of the SimplePrimitive data type identified by InterruptOtherActivities.
    *
    * @return The value of the simple primitive data type identified by InterruptOtherActivities.
    */
  virtual xs::Boolean getInterruptOtherActivities() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InterruptOtherActivities.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setInterruptOtherActivities(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by CollectionPolicy.
    *
    * @return The value of the simple primitive data type identified by CollectionPolicy.
    */
  virtual xs::Boolean getCollectionPolicy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CollectionPolicy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setCollectionPolicy(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ATR.
    *
    * @return The value of the simple primitive data type identified by ATR.
    */
  virtual xs::Boolean getATR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ATR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setATR(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by FTI_Supported.
    *
    * @return The value of the simple primitive data type identified by FTI_Supported.
    */
  virtual xs::Boolean getFTI_Supported() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FTI_Supported.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setFTI_Supported(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ForceTxRxTaper.
    *
    * @return The value of the simple primitive data type identified by ForceTxRxTaper.
    */
  virtual xs::Boolean getForceTxRxTaper() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ForceTxRxTaper.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setForceTxRxTaper(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConcurrentOperationSupported.
    *
    * @return The value of the simple primitive data type identified by ConcurrentOperationSupported.
    */
  virtual xs::Boolean getConcurrentOperationSupported() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConcurrentOperationSupported.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setConcurrentOperationSupported(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MultistaticOptionsSupported.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MultistaticOptionsSupported.
    */
  virtual const uci::type::MultistaticOptionsSupportedType& getMultistaticOptionsSupported() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * MultistaticOptionsSupported.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MultistaticOptionsSupported.
    */
  virtual uci::type::MultistaticOptionsSupportedType& getMultistaticOptionsSupported() = 0;

  /** Sets the complex content identified by MultistaticOptionsSupported to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MultistaticOptionsSupported.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setMultistaticOptionsSupported(const uci::type::MultistaticOptionsSupportedType& value) = 0;

  /** Returns whether the Element identified by MultistaticOptionsSupported exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MultistaticOptionsSupported is enabled or not.
    */
  virtual bool hasMultistaticOptionsSupported() const = 0;

  /** Enables the Element identified by MultistaticOptionsSupported.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MultistaticOptionsSupported.
    */
  virtual uci::type::MultistaticOptionsSupportedType& enableMultistaticOptionsSupported(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MultistaticOptionsSupported.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& clearMultistaticOptionsSupported() = 0;

  /** Returns a const reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    *
    * @return A const reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    */
  virtual const uci::type::SAR_CapabilityOptionsType::ElectronicProtectionOptionsSupported& getElectronicProtectionOptionsSupported() const = 0;

  /** Returns a reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    *
    * @return A reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    */
  virtual uci::type::SAR_CapabilityOptionsType::ElectronicProtectionOptionsSupported& getElectronicProtectionOptionsSupported() = 0;

  /** Sets the bounded list identified by ElectronicProtectionOptionsSupported.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setElectronicProtectionOptionsSupported(const uci::type::SAR_CapabilityOptionsType::ElectronicProtectionOptionsSupported& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportedResolution.
    *
    * @return A const reference to the bounded list identified by SupportedResolution.
    */
  virtual const uci::type::SAR_CapabilityOptionsType::SupportedResolution& getSupportedResolution() const = 0;

  /** Returns a reference to the bounded list identified by SupportedResolution.
    *
    * @return A reference to the bounded list identified by SupportedResolution.
    */
  virtual uci::type::SAR_CapabilityOptionsType::SupportedResolution& getSupportedResolution() = 0;

  /** Sets the bounded list identified by SupportedResolution.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setSupportedResolution(const uci::type::SAR_CapabilityOptionsType::SupportedResolution& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by COARPS_SAR_CollectionOption.
    *
    * @return A const reference to the value of the enumeration identified by COARPS_SAR_CollectionOption.
    */
  virtual const uci::type::COARPS_SAR_CollectionOptionsEnum& getCOARPS_SAR_CollectionOption() const = 0;

  /** Returns a reference to the value of the enumeration identified by COARPS_SAR_CollectionOption.
    *
    * @return A reference to the value of the enumeration identified by COARPS_SAR_CollectionOption.
    */
  virtual uci::type::COARPS_SAR_CollectionOptionsEnum& getCOARPS_SAR_CollectionOption() = 0;

  /** Sets the value of the enumeration identified by COARPS_SAR_CollectionOption.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setCOARPS_SAR_CollectionOption(const uci::type::COARPS_SAR_CollectionOptionsEnum& value) = 0;

  /** Sets the value of the enumeration identified by COARPS_SAR_CollectionOption.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& setCOARPS_SAR_CollectionOption(uci::type::COARPS_SAR_CollectionOptionsEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by COARPS_SAR_CollectionOption exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by COARPS_SAR_CollectionOption is enabled or not.
    */
  virtual bool hasCOARPS_SAR_CollectionOption() const = 0;

  /** Enables the Element identified by COARPS_SAR_CollectionOption.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by COARPS_SAR_CollectionOption.
    */
  virtual uci::type::COARPS_SAR_CollectionOptionsEnum& enableCOARPS_SAR_CollectionOption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by COARPS_SAR_CollectionOption.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_CapabilityOptionsType& clearCOARPS_SAR_CollectionOption() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SAR_CapabilityOptionsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SAR_CapabilityOptionsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SAR_CapabilityOptionsType to copy from.
    */
  SAR_CapabilityOptionsType(const SAR_CapabilityOptionsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SAR_CapabilityOptionsType to the contents of the
    * SAR_CapabilityOptionsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SAR_CapabilityOptionsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SAR_CapabilityOptionsType.
    * @return A reference to this SAR_CapabilityOptionsType.
    */
  SAR_CapabilityOptionsType& operator=(const SAR_CapabilityOptionsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SAR_CAPABILITYOPTIONSTYPE_H

