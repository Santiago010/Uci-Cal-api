/** @file PO_GimbalOrientationConstraintControlsStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_GIMBALORIENTATIONCONSTRAINTCONTROLSSTATUSTYPE_H
#define UCI_TYPE_PO_GIMBALORIENTATIONCONSTRAINTCONTROLSSTATUSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ComponentID_Type.h"
#include "GimbalAxisControlStatusType.h"
#include "PO_AngleConstraintControlsStatusType.h"
#include "PO_GimbalOrientationReferenceFrameEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in chile elements and messages/elements that use this type for details. */
class PO_GimbalOrientationConstraintControlsStatusType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_GimbalOrientationConstraintControlsStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_GimbalOrientationConstraintControlsStatusType.
    */
  static UCI_EXPORT PO_GimbalOrientationConstraintControlsStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_GimbalOrientationConstraintControlsStatusType initializing the data accessed by the
    * new PO_GimbalOrientationConstraintControlsStatusType using the data accessed by the specified
    * PO_GimbalOrientationConstraintControlsStatusType (cloning).
    *
    * @param accessor The PO_GimbalOrientationConstraintControlsStatusType that provides access to the data that is to be
    *      used to initialize the data accessed by the new created PO_GimbalOrientationConstraintControlsStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_GimbalOrientationConstraintControlsStatusType.
    */
  static UCI_EXPORT PO_GimbalOrientationConstraintControlsStatusType& create(const PO_GimbalOrientationConstraintControlsStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_GimbalOrientationConstraintControlsStatusType. Use of the specified accessor
    * after it has been destroyed will result in undefined behavior.
    *
    * @param accessor The PO_GimbalOrientationConstraintControlsStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_GimbalOrientationConstraintControlsStatusType& accessor);

  /** Returns this accessor's type constant, i.e. pO_GimbalOrientationConstraintControlsStatusType.
    *
    * @return This accessor's type constant, i.e. pO_GimbalOrientationConstraintControlsStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_GimbalOrientationConstraintControlsStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of
    * PO_GimbalOrientationConstraintControlsStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of
    *      PO_GimbalOrientationConstraintControlsStatusType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_GimbalOrientationConstraintControlsStatusType& accessor) = 0;

  /** The constraint controls on individual axis for gimbals with more than three degrees of freedom. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::GimbalAxisControlStatusType, uci::type::accessorType::gimbalAxisControlStatusType> Axis;

  /** Returns a const reference to the value of the enumeration identified by ReferenceFrame.
    *
    * @return A const reference to the value of the enumeration identified by ReferenceFrame.
    */
  virtual const uci::type::PO_GimbalOrientationReferenceFrameEnum& getReferenceFrame() const = 0;

  /** Returns a reference to the value of the enumeration identified by ReferenceFrame.
    *
    * @return A reference to the value of the enumeration identified by ReferenceFrame.
    */
  virtual uci::type::PO_GimbalOrientationReferenceFrameEnum& getReferenceFrame() = 0;

  /** Sets the value of the enumeration identified by ReferenceFrame.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& setReferenceFrame(const uci::type::PO_GimbalOrientationReferenceFrameEnum& value) = 0;

  /** Sets the value of the enumeration identified by ReferenceFrame.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& setReferenceFrame(uci::type::PO_GimbalOrientationReferenceFrameEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual const uci::type::ComponentID_Type& getComponentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual uci::type::ComponentID_Type& getComponentID() = 0;

  /** Sets the complex content identified by ComponentID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& setComponentID(const uci::type::ComponentID_Type& value) = 0;

  /** Returns whether the Element identified by ComponentID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ComponentID is enabled or not.
    */
  virtual bool hasComponentID() const = 0;

  /** Enables the Element identified by ComponentID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual uci::type::ComponentID_Type& enableComponentID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ComponentID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearComponentID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PitchAngle.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PitchAngle.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getPitchAngle() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PitchAngle.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PitchAngle.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getPitchAngle() = 0;

  /** Sets the complex content identified by PitchAngle to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PitchAngle.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& setPitchAngle(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by PitchAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PitchAngle is enabled or not.
    */
  virtual bool hasPitchAngle() const = 0;

  /** Enables the Element identified by PitchAngle.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PitchAngle.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enablePitchAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PitchAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearPitchAngle() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RollAngle.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RollAngle.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getRollAngle() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RollAngle.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RollAngle.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getRollAngle() = 0;

  /** Sets the complex content identified by RollAngle to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RollAngle.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& setRollAngle(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by RollAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RollAngle is enabled or not.
    */
  virtual bool hasRollAngle() const = 0;

  /** Enables the Element identified by RollAngle.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RollAngle.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableRollAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RollAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearRollAngle() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by YawAngle.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by YawAngle.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getYawAngle() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by YawAngle.
    *
    * @return A reference to the accessor that provides access to the complex content identified by YawAngle.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getYawAngle() = 0;

  /** Sets the complex content identified by YawAngle to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by YawAngle.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& setYawAngle(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by YawAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by YawAngle is enabled or not.
    */
  virtual bool hasYawAngle() const = 0;

  /** Enables the Element identified by YawAngle.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by YawAngle.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableYawAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by YawAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearYawAngle() = 0;

  /** Returns a const reference to the bounded list identified by Axis.
    *
    * @return A const reference to the bounded list identified by Axis.
    */
  virtual const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& getAxis() const = 0;

  /** Returns a reference to the bounded list identified by Axis.
    *
    * @return A reference to the bounded list identified by Axis.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& getAxis() = 0;

  /** Sets the bounded list identified by Axis.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& setAxis(const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_GimbalOrientationConstraintControlsStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_GimbalOrientationConstraintControlsStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_GimbalOrientationConstraintControlsStatusType to copy from.
    */
  PO_GimbalOrientationConstraintControlsStatusType(const PO_GimbalOrientationConstraintControlsStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_GimbalOrientationConstraintControlsStatusType to the contents
    * of the PO_GimbalOrientationConstraintControlsStatusType on the right hand side (rhs) of the assignment operator [only
    * available to derived classes].
    *
    * @param rhs The PO_GimbalOrientationConstraintControlsStatusType on the right hand side (rhs) of the assignment
    *      operator whose contents are used to set the contents of this PO_GimbalOrientationConstraintControlsStatusType.
    * @return A reference to this PO_GimbalOrientationConstraintControlsStatusType.
    */
  PO_GimbalOrientationConstraintControlsStatusType& operator=(const PO_GimbalOrientationConstraintControlsStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_GIMBALORIENTATIONCONSTRAINTCONTROLSSTATUSTYPE_H

