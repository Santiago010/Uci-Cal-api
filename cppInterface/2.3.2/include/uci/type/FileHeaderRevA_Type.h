/** @file FileHeaderRevA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_FILEHEADERREVA_TYPE_H
#define UCI_TYPE_FILEHEADERREVA_TYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "CharOrSpacePairsType.h"
#include "NITF_ClassificationAuthorityType.h"
#include "NITF_ClassificationReasonType.h"
#include "NITF_CodewordsType.h"
#include "NITF_ControlAndHandlingType.h"
#include "NITF_DateType.h"
#include "NITF_DeclassificationExemptionType.h"
#include "NITF_DeclassificationType.h"
#include "NITF_DowngradeType.h"
#include "NITF_FileSecurityClassificationType.h"
#include "NITF_ReleasingInstructionsType.h"
#include "VisibleLatin1String15Type.h"
#include "VisibleLatin1String18Type.h"
#include "VisibleLatin1String24Type.h"
#include "VisibleLatin1String40Type.h"
#include "VisibleLatin1String43Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class FileHeaderRevA_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new FileHeaderRevA_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FileHeaderRevA_Type.
    */
  static UCI_EXPORT FileHeaderRevA_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new FileHeaderRevA_Type initializing the data accessed by the new FileHeaderRevA_Type using
    * the data accessed by the specified FileHeaderRevA_Type (cloning).
    *
    * @param accessor The FileHeaderRevA_Type that provides access to the data that is to be used to initialize the data
    *      accessed by the new created FileHeaderRevA_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FileHeaderRevA_Type.
    */
  static UCI_EXPORT FileHeaderRevA_Type& create(const FileHeaderRevA_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified FileHeaderRevA_Type. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The FileHeaderRevA_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(FileHeaderRevA_Type& accessor);

  /** Returns this accessor's type constant, i.e. fileHeaderRevA_Type.
    *
    * @return This accessor's type constant, i.e. fileHeaderRevA_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::fileHeaderRevA_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of FileHeaderRevA_Type.
    *
    * @return The version that was initialized from the uci:version attribute of FileHeaderRevA_Type.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const FileHeaderRevA_Type& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * FileSecurityClassification.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      FileSecurityClassification.
    */
  virtual const uci::type::NITF_FileSecurityClassificationType& getFileSecurityClassification() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileSecurityClassification.
    *
    * @return A reference to the accessor that provides access to the string identified by FileSecurityClassification.
    */
  virtual uci::type::NITF_FileSecurityClassificationType& getFileSecurityClassification() = 0;

  /** Sets the string identified by FileSecurityClassification to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileSecurityClassification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecurityClassification(const uci::type::NITF_FileSecurityClassificationType& value) = 0;

  /** Sets the string identified by FileSecurityClassification to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecurityClassification(const std::string& value) = 0;

  /** Sets the string identified by FileSecurityClassification to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecurityClassification(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileClassificationSystem.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileClassificationSystem.
    */
  virtual const uci::type::CharOrSpacePairsType& getFileClassificationSystem() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileClassificationSystem.
    *
    * @return A reference to the accessor that provides access to the string identified by FileClassificationSystem.
    */
  virtual uci::type::CharOrSpacePairsType& getFileClassificationSystem() = 0;

  /** Sets the string identified by FileClassificationSystem to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileClassificationSystem.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationSystem(const uci::type::CharOrSpacePairsType& value) = 0;

  /** Sets the string identified by FileClassificationSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationSystem(const std::string& value) = 0;

  /** Sets the string identified by FileClassificationSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationSystem(const char* value) = 0;

  /** Returns whether the Element identified by FileClassificationSystem exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileClassificationSystem is enabled or not.
    */
  virtual bool hasFileClassificationSystem() const = 0;

  /** Enables the Element identified by FileClassificationSystem.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileClassificationSystem.
    */
  virtual uci::type::CharOrSpacePairsType& enableFileClassificationSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileClassificationSystem.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileClassificationSystem() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileCodewords.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileCodewords.
    */
  virtual const uci::type::NITF_CodewordsType& getFileCodewords() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileCodewords.
    *
    * @return A reference to the accessor that provides access to the string identified by FileCodewords.
    */
  virtual uci::type::NITF_CodewordsType& getFileCodewords() = 0;

  /** Sets the string identified by FileCodewords to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileCodewords.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileCodewords(const uci::type::NITF_CodewordsType& value) = 0;

  /** Sets the string identified by FileCodewords to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileCodewords(const std::string& value) = 0;

  /** Sets the string identified by FileCodewords to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileCodewords(const char* value) = 0;

  /** Returns whether the Element identified by FileCodewords exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileCodewords is enabled or not.
    */
  virtual bool hasFileCodewords() const = 0;

  /** Enables the Element identified by FileCodewords.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileCodewords.
    */
  virtual uci::type::NITF_CodewordsType& enableFileCodewords(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileCodewords.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileCodewords() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileControlAndHandling.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileControlAndHandling.
    */
  virtual const uci::type::NITF_ControlAndHandlingType& getFileControlAndHandling() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileControlAndHandling.
    *
    * @return A reference to the accessor that provides access to the string identified by FileControlAndHandling.
    */
  virtual uci::type::NITF_ControlAndHandlingType& getFileControlAndHandling() = 0;

  /** Sets the string identified by FileControlAndHandling to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileControlAndHandling.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileControlAndHandling(const uci::type::NITF_ControlAndHandlingType& value) = 0;

  /** Sets the string identified by FileControlAndHandling to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileControlAndHandling(const std::string& value) = 0;

  /** Sets the string identified by FileControlAndHandling to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileControlAndHandling(const char* value) = 0;

  /** Returns whether the Element identified by FileControlAndHandling exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileControlAndHandling is enabled or not.
    */
  virtual bool hasFileControlAndHandling() const = 0;

  /** Enables the Element identified by FileControlAndHandling.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileControlAndHandling.
    */
  virtual uci::type::NITF_ControlAndHandlingType& enableFileControlAndHandling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileControlAndHandling.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileControlAndHandling() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileReleasingInstructions.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileReleasingInstructions.
    */
  virtual const uci::type::NITF_ReleasingInstructionsType& getFileReleasingInstructions() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileReleasingInstructions.
    *
    * @return A reference to the accessor that provides access to the string identified by FileReleasingInstructions.
    */
  virtual uci::type::NITF_ReleasingInstructionsType& getFileReleasingInstructions() = 0;

  /** Sets the string identified by FileReleasingInstructions to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileReleasingInstructions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileReleasingInstructions(const uci::type::NITF_ReleasingInstructionsType& value) = 0;

  /** Sets the string identified by FileReleasingInstructions to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileReleasingInstructions(const std::string& value) = 0;

  /** Sets the string identified by FileReleasingInstructions to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileReleasingInstructions(const char* value) = 0;

  /** Returns whether the Element identified by FileReleasingInstructions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileReleasingInstructions is enabled or not.
    */
  virtual bool hasFileReleasingInstructions() const = 0;

  /** Enables the Element identified by FileReleasingInstructions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileReleasingInstructions.
    */
  virtual uci::type::NITF_ReleasingInstructionsType& enableFileReleasingInstructions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileReleasingInstructions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileReleasingInstructions() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileDeclassificationType.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileDeclassificationType.
    */
  virtual const uci::type::NITF_DeclassificationType& getFileDeclassificationType() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileDeclassificationType.
    *
    * @return A reference to the accessor that provides access to the string identified by FileDeclassificationType.
    */
  virtual uci::type::NITF_DeclassificationType& getFileDeclassificationType() = 0;

  /** Sets the string identified by FileDeclassificationType to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileDeclassificationType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationType(const uci::type::NITF_DeclassificationType& value) = 0;

  /** Sets the string identified by FileDeclassificationType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationType(const std::string& value) = 0;

  /** Sets the string identified by FileDeclassificationType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationType(const char* value) = 0;

  /** Returns whether the Element identified by FileDeclassificationType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileDeclassificationType is enabled or not.
    */
  virtual bool hasFileDeclassificationType() const = 0;

  /** Enables the Element identified by FileDeclassificationType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileDeclassificationType.
    */
  virtual uci::type::NITF_DeclassificationType& enableFileDeclassificationType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileDeclassificationType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileDeclassificationType() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileDeclassificationDate.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileDeclassificationDate.
    */
  virtual const uci::type::NITF_DateType& getFileDeclassificationDate() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileDeclassificationDate.
    *
    * @return A reference to the accessor that provides access to the string identified by FileDeclassificationDate.
    */
  virtual uci::type::NITF_DateType& getFileDeclassificationDate() = 0;

  /** Sets the string identified by FileDeclassificationDate to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileDeclassificationDate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationDate(const uci::type::NITF_DateType& value) = 0;

  /** Sets the string identified by FileDeclassificationDate to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationDate(const std::string& value) = 0;

  /** Sets the string identified by FileDeclassificationDate to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationDate(const char* value) = 0;

  /** Returns whether the Element identified by FileDeclassificationDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileDeclassificationDate is enabled or not.
    */
  virtual bool hasFileDeclassificationDate() const = 0;

  /** Enables the Element identified by FileDeclassificationDate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileDeclassificationDate.
    */
  virtual uci::type::NITF_DateType& enableFileDeclassificationDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileDeclassificationDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileDeclassificationDate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * FileDeclassificationExemption.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      FileDeclassificationExemption.
    */
  virtual const uci::type::NITF_DeclassificationExemptionType& getFileDeclassificationExemption() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileDeclassificationExemption.
    *
    * @return A reference to the accessor that provides access to the string identified by FileDeclassificationExemption.
    */
  virtual uci::type::NITF_DeclassificationExemptionType& getFileDeclassificationExemption() = 0;

  /** Sets the string identified by FileDeclassificationExemption to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileDeclassificationExemption.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationExemption(const uci::type::NITF_DeclassificationExemptionType& value) = 0;

  /** Sets the string identified by FileDeclassificationExemption to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationExemption(const std::string& value) = 0;

  /** Sets the string identified by FileDeclassificationExemption to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDeclassificationExemption(const char* value) = 0;

  /** Returns whether the Element identified by FileDeclassificationExemption exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileDeclassificationExemption is enabled or not.
    */
  virtual bool hasFileDeclassificationExemption() const = 0;

  /** Enables the Element identified by FileDeclassificationExemption.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileDeclassificationExemption.
    */
  virtual uci::type::NITF_DeclassificationExemptionType& enableFileDeclassificationExemption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileDeclassificationExemption.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileDeclassificationExemption() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileDowngrade.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileDowngrade.
    */
  virtual const uci::type::NITF_DowngradeType& getFileDowngrade() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileDowngrade.
    *
    * @return A reference to the accessor that provides access to the string identified by FileDowngrade.
    */
  virtual uci::type::NITF_DowngradeType& getFileDowngrade() = 0;

  /** Sets the string identified by FileDowngrade to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileDowngrade.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDowngrade(const uci::type::NITF_DowngradeType& value) = 0;

  /** Sets the string identified by FileDowngrade to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDowngrade(const std::string& value) = 0;

  /** Sets the string identified by FileDowngrade to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDowngrade(const char* value) = 0;

  /** Returns whether the Element identified by FileDowngrade exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileDowngrade is enabled or not.
    */
  virtual bool hasFileDowngrade() const = 0;

  /** Enables the Element identified by FileDowngrade.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileDowngrade.
    */
  virtual uci::type::NITF_DowngradeType& enableFileDowngrade(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileDowngrade.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileDowngrade() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileDowngradeDate.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileDowngradeDate.
    */
  virtual const uci::type::NITF_DateType& getFileDowngradeDate() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileDowngradeDate.
    *
    * @return A reference to the accessor that provides access to the string identified by FileDowngradeDate.
    */
  virtual uci::type::NITF_DateType& getFileDowngradeDate() = 0;

  /** Sets the string identified by FileDowngradeDate to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileDowngradeDate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDowngradeDate(const uci::type::NITF_DateType& value) = 0;

  /** Sets the string identified by FileDowngradeDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDowngradeDate(const std::string& value) = 0;

  /** Sets the string identified by FileDowngradeDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileDowngradeDate(const char* value) = 0;

  /** Returns whether the Element identified by FileDowngradeDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileDowngradeDate is enabled or not.
    */
  virtual bool hasFileDowngradeDate() const = 0;

  /** Enables the Element identified by FileDowngradeDate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileDowngradeDate.
    */
  virtual uci::type::NITF_DateType& enableFileDowngradeDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileDowngradeDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileDowngradeDate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileClassificationText.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileClassificationText.
    */
  virtual const uci::type::VisibleLatin1String43Type& getFileClassificationText() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileClassificationText.
    *
    * @return A reference to the accessor that provides access to the string identified by FileClassificationText.
    */
  virtual uci::type::VisibleLatin1String43Type& getFileClassificationText() = 0;

  /** Sets the string identified by FileClassificationText to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileClassificationText.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationText(const uci::type::VisibleLatin1String43Type& value) = 0;

  /** Sets the string identified by FileClassificationText to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationText(const std::string& value) = 0;

  /** Sets the string identified by FileClassificationText to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationText(const char* value) = 0;

  /** Returns whether the Element identified by FileClassificationText exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileClassificationText is enabled or not.
    */
  virtual bool hasFileClassificationText() const = 0;

  /** Enables the Element identified by FileClassificationText.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileClassificationText.
    */
  virtual uci::type::VisibleLatin1String43Type& enableFileClassificationText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileClassificationText.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileClassificationText() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * FileClassificationAuthorityType.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      FileClassificationAuthorityType.
    */
  virtual const uci::type::NITF_ClassificationAuthorityType& getFileClassificationAuthorityType() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileClassificationAuthorityType.
    *
    * @return A reference to the accessor that provides access to the string identified by FileClassificationAuthorityType.
    */
  virtual uci::type::NITF_ClassificationAuthorityType& getFileClassificationAuthorityType() = 0;

  /** Sets the string identified by FileClassificationAuthorityType to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileClassificationAuthorityType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationAuthorityType(const uci::type::NITF_ClassificationAuthorityType& value) = 0;

  /** Sets the string identified by FileClassificationAuthorityType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationAuthorityType(const std::string& value) = 0;

  /** Sets the string identified by FileClassificationAuthorityType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationAuthorityType(const char* value) = 0;

  /** Returns whether the Element identified by FileClassificationAuthorityType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileClassificationAuthorityType is enabled or not.
    */
  virtual bool hasFileClassificationAuthorityType() const = 0;

  /** Enables the Element identified by FileClassificationAuthorityType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileClassificationAuthorityType.
    */
  virtual uci::type::NITF_ClassificationAuthorityType& enableFileClassificationAuthorityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileClassificationAuthorityType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileClassificationAuthorityType() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * FileClassificationAuthority.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      FileClassificationAuthority.
    */
  virtual const uci::type::VisibleLatin1String40Type& getFileClassificationAuthority() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileClassificationAuthority.
    *
    * @return A reference to the accessor that provides access to the string identified by FileClassificationAuthority.
    */
  virtual uci::type::VisibleLatin1String40Type& getFileClassificationAuthority() = 0;

  /** Sets the string identified by FileClassificationAuthority to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileClassificationAuthority.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationAuthority(const uci::type::VisibleLatin1String40Type& value) = 0;

  /** Sets the string identified by FileClassificationAuthority to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationAuthority(const std::string& value) = 0;

  /** Sets the string identified by FileClassificationAuthority to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationAuthority(const char* value) = 0;

  /** Returns whether the Element identified by FileClassificationAuthority exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileClassificationAuthority is enabled or not.
    */
  virtual bool hasFileClassificationAuthority() const = 0;

  /** Enables the Element identified by FileClassificationAuthority.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileClassificationAuthority.
    */
  virtual uci::type::VisibleLatin1String40Type& enableFileClassificationAuthority(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileClassificationAuthority.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileClassificationAuthority() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileClassificationReason.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileClassificationReason.
    */
  virtual const uci::type::NITF_ClassificationReasonType& getFileClassificationReason() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileClassificationReason.
    *
    * @return A reference to the accessor that provides access to the string identified by FileClassificationReason.
    */
  virtual uci::type::NITF_ClassificationReasonType& getFileClassificationReason() = 0;

  /** Sets the string identified by FileClassificationReason to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileClassificationReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationReason(const uci::type::NITF_ClassificationReasonType& value) = 0;

  /** Sets the string identified by FileClassificationReason to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationReason(const std::string& value) = 0;

  /** Sets the string identified by FileClassificationReason to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileClassificationReason(const char* value) = 0;

  /** Returns whether the Element identified by FileClassificationReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileClassificationReason is enabled or not.
    */
  virtual bool hasFileClassificationReason() const = 0;

  /** Enables the Element identified by FileClassificationReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileClassificationReason.
    */
  virtual uci::type::NITF_ClassificationReasonType& enableFileClassificationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileClassificationReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileClassificationReason() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    */
  virtual const uci::type::NITF_DateType& getFileSecuritySourceDate() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    *
    * @return A reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    */
  virtual uci::type::NITF_DateType& getFileSecuritySourceDate() = 0;

  /** Sets the string identified by FileSecuritySourceDate to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileSecuritySourceDate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecuritySourceDate(const uci::type::NITF_DateType& value) = 0;

  /** Sets the string identified by FileSecuritySourceDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecuritySourceDate(const std::string& value) = 0;

  /** Sets the string identified by FileSecuritySourceDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecuritySourceDate(const char* value) = 0;

  /** Returns whether the Element identified by FileSecuritySourceDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileSecuritySourceDate is enabled or not.
    */
  virtual bool hasFileSecuritySourceDate() const = 0;

  /** Enables the Element identified by FileSecuritySourceDate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    */
  virtual uci::type::NITF_DateType& enableFileSecuritySourceDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileSecuritySourceDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileSecuritySourceDate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    */
  virtual const uci::type::VisibleLatin1String15Type& getFileSecurityControlNumber() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    *
    * @return A reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    */
  virtual uci::type::VisibleLatin1String15Type& getFileSecurityControlNumber() = 0;

  /** Sets the string identified by FileSecurityControlNumber to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileSecurityControlNumber.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecurityControlNumber(const uci::type::VisibleLatin1String15Type& value) = 0;

  /** Sets the string identified by FileSecurityControlNumber to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecurityControlNumber(const std::string& value) = 0;

  /** Sets the string identified by FileSecurityControlNumber to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setFileSecurityControlNumber(const char* value) = 0;

  /** Returns whether the Element identified by FileSecurityControlNumber exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileSecurityControlNumber is enabled or not.
    */
  virtual bool hasFileSecurityControlNumber() const = 0;

  /** Enables the Element identified by FileSecurityControlNumber.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    */
  virtual uci::type::VisibleLatin1String15Type& enableFileSecurityControlNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileSecurityControlNumber.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearFileSecurityControlNumber() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by OriginatorsName.
    *
    * @return A const reference to the accessor that provides access to the string identified by OriginatorsName.
    */
  virtual const uci::type::VisibleLatin1String24Type& getOriginatorsName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by OriginatorsName.
    *
    * @return A reference to the accessor that provides access to the string identified by OriginatorsName.
    */
  virtual uci::type::VisibleLatin1String24Type& getOriginatorsName() = 0;

  /** Sets the string identified by OriginatorsName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by OriginatorsName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setOriginatorsName(const uci::type::VisibleLatin1String24Type& value) = 0;

  /** Sets the string identified by OriginatorsName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setOriginatorsName(const std::string& value) = 0;

  /** Sets the string identified by OriginatorsName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setOriginatorsName(const char* value) = 0;

  /** Returns whether the Element identified by OriginatorsName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OriginatorsName is enabled or not.
    */
  virtual bool hasOriginatorsName() const = 0;

  /** Enables the Element identified by OriginatorsName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by OriginatorsName.
    */
  virtual uci::type::VisibleLatin1String24Type& enableOriginatorsName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OriginatorsName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearOriginatorsName() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by OriginatorsPhone.
    *
    * @return A const reference to the accessor that provides access to the string identified by OriginatorsPhone.
    */
  virtual const uci::type::VisibleLatin1String18Type& getOriginatorsPhone() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by OriginatorsPhone.
    *
    * @return A reference to the accessor that provides access to the string identified by OriginatorsPhone.
    */
  virtual uci::type::VisibleLatin1String18Type& getOriginatorsPhone() = 0;

  /** Sets the string identified by OriginatorsPhone to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by OriginatorsPhone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setOriginatorsPhone(const uci::type::VisibleLatin1String18Type& value) = 0;

  /** Sets the string identified by OriginatorsPhone to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setOriginatorsPhone(const std::string& value) = 0;

  /** Sets the string identified by OriginatorsPhone to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& setOriginatorsPhone(const char* value) = 0;

  /** Returns whether the Element identified by OriginatorsPhone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OriginatorsPhone is enabled or not.
    */
  virtual bool hasOriginatorsPhone() const = 0;

  /** Enables the Element identified by OriginatorsPhone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by OriginatorsPhone.
    */
  virtual uci::type::VisibleLatin1String18Type& enableOriginatorsPhone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OriginatorsPhone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderRevA_Type& clearOriginatorsPhone() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  FileHeaderRevA_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~FileHeaderRevA_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The FileHeaderRevA_Type to copy from.
    */
  FileHeaderRevA_Type(const FileHeaderRevA_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this FileHeaderRevA_Type to the contents of the FileHeaderRevA_Type on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The FileHeaderRevA_Type on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this FileHeaderRevA_Type.
    * @return A reference to this FileHeaderRevA_Type.
    */
  FileHeaderRevA_Type& operator=(const FileHeaderRevA_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_FILEHEADERREVA_TYPE_H

