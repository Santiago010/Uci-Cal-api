/** @file PO_CapabilityMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_CAPABILITYMDT_H
#define UCI_TYPE_PO_CAPABILITYMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityBaseType.h"
#include "uci/type/FOR_Type.h"
#include "uci/type/PO_CapabilityType.h"
#include "uci/type/PO_CollectionConstraintsType.h"
#include "uci/type/PO_ComponentType.h"
#include "uci/type/PO_SubCapabilityType.h"
#include "uci/type/PO_TrackCapabilityType.h"
#include "uci/type/PointingTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_CapabilityMDT : public virtual CapabilityBaseType {
public:

  /** This method constructs a new PO_CapabilityMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityMDT.
    */
  static UCI_EXPORT PO_CapabilityMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_CapabilityMDT initializing the data accessed by the new PO_CapabilityMDT using the
    * data accessed by the specified PO_CapabilityMDT (cloning).
    *
    * @param accessor The PO_CapabilityMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PO_CapabilityMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityMDT.
    */
  static UCI_EXPORT PO_CapabilityMDT& create(const PO_CapabilityMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_CapabilityMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PO_CapabilityMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_CapabilityMDT& accessor);

  /** Returns this accessor's type constant, i.e. pO_CapabilityMDT.
    *
    * @return This accessor's type constant, i.e. pO_CapabilityMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_CapabilityMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_CapabilityMDT.
    *
    * @return The version that was initialized from the uci:version attribute of PO_CapabilityMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.000.003.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_CapabilityMDT& accessor) = 0;

  /** Indicates an installed PO Capability, its configurable characteristics and its controllability. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_CapabilityType, uci::type::accessorType::pO_CapabilityType> Capability;

  /** This indicates the type of pointing options that the PO Subsystem can support. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 6]
    */
  typedef uci::base::BoundedList<uci::type::PointingTypeEnum, uci::type::accessorType::pointingTypeEnum> PointingCapability;

  /** Indicates all of the subcapabilities that a PO subsystem has available for command and control. Unique configurations
    * can appear multiple times as individual IDs which allows for both: 1. One ID associated with multiple capabilities 2.
    * A unique ID associated with one capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_SubCapabilityType, uci::type::accessorType::pO_SubCapabilityType> SubCapability;

  /** Indicates a Subsystem Component that is relevant to command and control of the associated Capability. A Component's
    * characteristics and performance directly influence those of the associated Capability. One or more defined components
    * may have settings/configuration independent with the associated Capability. Independent control of subsystem
    * components as related to capabilities also adds flexibility in the command and control of independent components
    * hosted within a single subsystem. Unique configurations can appear multiple times as individual IDs which allows for
    * both: 1. One ID associated with multiple capabilities 2. A unique ID associated with one capability. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentType, uci::type::accessorType::pO_ComponentType> PO_Component;

  /** Allowable range of values for Passive Optical track parameters that can be used to customize target detections.
    * Indicates all of the track options that a PO subsystem has available for command and control. Unique configurations
    * can appear multiple times as individual IDs which allows for both: 1. One ID associated with multiple capabilities 2.
    * A unique ID associated with one capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_TrackCapabilityType, uci::type::accessorType::pO_TrackCapabilityType> TrackOption;

  /** This field specifies which type of collection constraints are supported by this sensor. If multiple instances are
    * given, each should be of a different constraint type as indicated by the child element. [Occurrences: Minimum: 0;
    * Maximum: 10]
    */
  typedef uci::base::BoundedList<uci::type::PO_CollectionConstraintsType, uci::type::accessorType::pO_CollectionConstraintsType> CollectionConstraints;

  /** Returns a const reference to the bounded list identified by Capability.
    *
    * @return A const reference to the bounded list identified by Capability.
    */
  virtual const uci::type::PO_CapabilityMDT::Capability& getCapability() const = 0;

  /** Returns a reference to the bounded list identified by Capability.
    *
    * @return A reference to the bounded list identified by Capability.
    */
  virtual uci::type::PO_CapabilityMDT::Capability& getCapability() = 0;

  /** Sets the bounded list identified by Capability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setCapability(const uci::type::PO_CapabilityMDT::Capability& value) = 0;

  /** Returns a const reference to the bounded list identified by PointingCapability.
    *
    * @return A const reference to the bounded list identified by PointingCapability.
    */
  virtual const uci::type::PO_CapabilityMDT::PointingCapability& getPointingCapability() const = 0;

  /** Returns a reference to the bounded list identified by PointingCapability.
    *
    * @return A reference to the bounded list identified by PointingCapability.
    */
  virtual uci::type::PO_CapabilityMDT::PointingCapability& getPointingCapability() = 0;

  /** Sets the bounded list identified by PointingCapability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setPointingCapability(const uci::type::PO_CapabilityMDT::PointingCapability& value) = 0;

  /** Returns a const reference to the bounded list identified by SubCapability.
    *
    * @return A const reference to the bounded list identified by SubCapability.
    */
  virtual const uci::type::PO_CapabilityMDT::SubCapability& getSubCapability() const = 0;

  /** Returns a reference to the bounded list identified by SubCapability.
    *
    * @return A reference to the bounded list identified by SubCapability.
    */
  virtual uci::type::PO_CapabilityMDT::SubCapability& getSubCapability() = 0;

  /** Sets the bounded list identified by SubCapability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setSubCapability(const uci::type::PO_CapabilityMDT::SubCapability& value) = 0;

  /** Returns a const reference to the bounded list identified by PO_Component.
    *
    * @return A const reference to the bounded list identified by PO_Component.
    */
  virtual const uci::type::PO_CapabilityMDT::PO_Component& getPO_Component() const = 0;

  /** Returns a reference to the bounded list identified by PO_Component.
    *
    * @return A reference to the bounded list identified by PO_Component.
    */
  virtual uci::type::PO_CapabilityMDT::PO_Component& getPO_Component() = 0;

  /** Sets the bounded list identified by PO_Component.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setPO_Component(const uci::type::PO_CapabilityMDT::PO_Component& value) = 0;

  /** Returns a const reference to the bounded list identified by TrackOption.
    *
    * @return A const reference to the bounded list identified by TrackOption.
    */
  virtual const uci::type::PO_CapabilityMDT::TrackOption& getTrackOption() const = 0;

  /** Returns a reference to the bounded list identified by TrackOption.
    *
    * @return A reference to the bounded list identified by TrackOption.
    */
  virtual uci::type::PO_CapabilityMDT::TrackOption& getTrackOption() = 0;

  /** Sets the bounded list identified by TrackOption.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setTrackOption(const uci::type::PO_CapabilityMDT::TrackOption& value) = 0;

  /** Returns a const reference to the bounded list identified by CollectionConstraints.
    *
    * @return A const reference to the bounded list identified by CollectionConstraints.
    */
  virtual const uci::type::PO_CapabilityMDT::CollectionConstraints& getCollectionConstraints() const = 0;

  /** Returns a reference to the bounded list identified by CollectionConstraints.
    *
    * @return A reference to the bounded list identified by CollectionConstraints.
    */
  virtual uci::type::PO_CapabilityMDT::CollectionConstraints& getCollectionConstraints() = 0;

  /** Sets the bounded list identified by CollectionConstraints.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setCollectionConstraints(const uci::type::PO_CapabilityMDT::CollectionConstraints& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CapabilityFOR.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CapabilityFOR.
    */
  virtual const uci::type::FOR_Type& getCapabilityFOR() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityFOR.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityFOR.
    */
  virtual uci::type::FOR_Type& getCapabilityFOR() = 0;

  /** Sets the complex content identified by CapabilityFOR to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityFOR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setCapabilityFOR(const uci::type::FOR_Type& value) = 0;

  /** Returns whether the Element identified by CapabilityFOR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CapabilityFOR is enabled or not.
    */
  virtual bool hasCapabilityFOR() const = 0;

  /** Enables the Element identified by CapabilityFOR.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityFOR.
    */
  virtual uci::type::FOR_Type& enableCapabilityFOR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CapabilityFOR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& clearCapabilityFOR() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityThermalBlankingFOR.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityThermalBlankingFOR.
    */
  virtual const uci::type::FOR_Type& getCapabilityThermalBlankingFOR() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CapabilityThermalBlankingFOR.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CapabilityThermalBlankingFOR.
    */
  virtual uci::type::FOR_Type& getCapabilityThermalBlankingFOR() = 0;

  /** Sets the complex content identified by CapabilityThermalBlankingFOR to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityThermalBlankingFOR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& setCapabilityThermalBlankingFOR(const uci::type::FOR_Type& value) = 0;

  /** Returns whether the Element identified by CapabilityThermalBlankingFOR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CapabilityThermalBlankingFOR is enabled or not.
    */
  virtual bool hasCapabilityThermalBlankingFOR() const = 0;

  /** Enables the Element identified by CapabilityThermalBlankingFOR.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CapabilityThermalBlankingFOR.
    */
  virtual uci::type::FOR_Type& enableCapabilityThermalBlankingFOR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CapabilityThermalBlankingFOR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityMDT& clearCapabilityThermalBlankingFOR() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_CapabilityMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_CapabilityMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_CapabilityMDT to copy from.
    */
  PO_CapabilityMDT(const PO_CapabilityMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_CapabilityMDT to the contents of the PO_CapabilityMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_CapabilityMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this PO_CapabilityMDT.
    * @return A reference to this PO_CapabilityMDT.
    */
  PO_CapabilityMDT& operator=(const PO_CapabilityMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_CAPABILITYMDT_H

