/** @file CryptoStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CRYPTOSTATUSTYPE_H
#define UCI_TYPE_CRYPTOSTATUSTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/CryptoPortStatusType.h"
#include "uci/type/CryptoSlotGroupType.h"
#include "uci/type/SupportCapabilityStatusBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type represents the status and settings for a crypto key slot that is relevant to mission operations. */
class CryptoStatusType : public virtual SupportCapabilityStatusBaseType {
public:

  /** This method constructs a new CryptoStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CryptoStatusType.
    */
  static UCI_EXPORT CryptoStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CryptoStatusType initializing the data accessed by the new CryptoStatusType using the
    * data accessed by the specified CryptoStatusType (cloning).
    *
    * @param accessor The CryptoStatusType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CryptoStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CryptoStatusType.
    */
  static UCI_EXPORT CryptoStatusType& create(const CryptoStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CryptoStatusType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The CryptoStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CryptoStatusType& accessor);

  /** Returns this accessor's type constant, i.e. cryptoStatusType.
    *
    * @return This accessor's type constant, i.e. cryptoStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cryptoStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CryptoStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of CryptoStatusType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CryptoStatusType& accessor) = 0;

  /** The ID of the Activity (Instance) of the communication capability which this is applicable to. If empty, means all.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityID_Type, uci::type::accessorType::activityID_Type> SupportActivityID;

  /** Indicates the status of groups of crypto keys loaded in or used by the subsystem. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CryptoSlotGroupType, uci::type::accessorType::cryptoSlotGroupType> CryptoSlotGroup;

  /** Crypto Ports provide a construct for command and control and status reporting of crypto components. Crypto components
    * are used to encrypt and/or decrypt payload data. Typically a crypto device provides RED/BLACK separation to a
    * subsystem and a port resides on either the RED or BLACK side of the subsystem. If the port is on the RED side, the
    * port will encrypt data and output the encrypted payload to the corresponding crypto port on the BLACK side of the
    * crypto component. If the port is on the BLACK side, the port will decrypt data and output the decrypted payload to
    * the corresponding crypto port on the RED side of the crypto component. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CryptoPortStatusType, uci::type::accessorType::cryptoPortStatusType> CryptoPort;

  /** Returns a const reference to the bounded list identified by SupportActivityID.
    *
    * @return A const reference to the bounded list identified by SupportActivityID.
    */
  virtual const uci::type::CryptoStatusType::SupportActivityID& getSupportActivityID() const = 0;

  /** Returns a reference to the bounded list identified by SupportActivityID.
    *
    * @return A reference to the bounded list identified by SupportActivityID.
    */
  virtual uci::type::CryptoStatusType::SupportActivityID& getSupportActivityID() = 0;

  /** Sets the bounded list identified by SupportActivityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoStatusType& setSupportActivityID(const uci::type::CryptoStatusType::SupportActivityID& value) = 0;

  /** Returns a const reference to the bounded list identified by CryptoSlotGroup.
    *
    * @return A const reference to the bounded list identified by CryptoSlotGroup.
    */
  virtual const uci::type::CryptoStatusType::CryptoSlotGroup& getCryptoSlotGroup() const = 0;

  /** Returns a reference to the bounded list identified by CryptoSlotGroup.
    *
    * @return A reference to the bounded list identified by CryptoSlotGroup.
    */
  virtual uci::type::CryptoStatusType::CryptoSlotGroup& getCryptoSlotGroup() = 0;

  /** Sets the bounded list identified by CryptoSlotGroup.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoStatusType& setCryptoSlotGroup(const uci::type::CryptoStatusType::CryptoSlotGroup& value) = 0;

  /** Returns a const reference to the bounded list identified by CryptoPort.
    *
    * @return A const reference to the bounded list identified by CryptoPort.
    */
  virtual const uci::type::CryptoStatusType::CryptoPort& getCryptoPort() const = 0;

  /** Returns a reference to the bounded list identified by CryptoPort.
    *
    * @return A reference to the bounded list identified by CryptoPort.
    */
  virtual uci::type::CryptoStatusType::CryptoPort& getCryptoPort() = 0;

  /** Sets the bounded list identified by CryptoPort.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoStatusType& setCryptoPort(const uci::type::CryptoStatusType::CryptoPort& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CryptoStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CryptoStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CryptoStatusType to copy from.
    */
  CryptoStatusType(const CryptoStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CryptoStatusType to the contents of the CryptoStatusType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CryptoStatusType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CryptoStatusType.
    * @return A reference to this CryptoStatusType.
    */
  CryptoStatusType& operator=(const CryptoStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CRYPTOSTATUSTYPE_H

