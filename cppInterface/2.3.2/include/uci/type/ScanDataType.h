/** @file ScanDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SCANDATATYPE_H
#define UCI_TYPE_SCANDATATYPE_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AnglePositiveType.h"
#include "DateTimeType.h"
#include "DurationType.h"
#include "LobeType.h"
#include "MeasurementStatusEnum.h"
#include "RadarBeamPersistenceEnum.h"
#include "RadarBeamTypeEnum.h"
#include "ScanDataBaseType.h"
#include "ScanDirectionalityEnum.h"
#include "ScanMechanicsEnum.h"
#include "ScanPlaneEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ScanDataType : public virtual ScanDataBaseType {
public:

  /** This method constructs a new ScanDataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ScanDataType.
    */
  static UCI_EXPORT ScanDataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ScanDataType initializing the data accessed by the new ScanDataType using the data
    * accessed by the specified ScanDataType (cloning).
    *
    * @param accessor The ScanDataType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created ScanDataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ScanDataType.
    */
  static UCI_EXPORT ScanDataType& create(const ScanDataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ScanDataType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ScanDataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ScanDataType& accessor);

  /** Returns this accessor's type constant, i.e. scanDataType.
    *
    * @return This accessor's type constant, i.e. scanDataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::scanDataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ScanDataType.
    *
    * @return The version that was initialized from the uci:version attribute of ScanDataType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ScanDataType& accessor) = 0;

  /** Indicates the measured time duration of a single scan of a scanning Signal. This element is unbounded to allow
    * reporting of a series of scan periods. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DurationType, uci::type::accessorType::durationType> ScanPeriod;

  /** Indicates a characterization of an amplitude Lobe associated with the Scan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::LobeType, uci::type::accessorType::lobeType> Lobe;

  /** Returns the value of the SimplePrimitive data type identified by ScanTimestamp.
    *
    * @return The value of the simple primitive data type identified by ScanTimestamp.
    */
  virtual uci::type::DateTimeTypeValue getScanTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ScanTimestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ScanMeasurementStatus.
    *
    * @return A const reference to the value of the enumeration identified by ScanMeasurementStatus.
    */
  virtual const uci::type::MeasurementStatusEnum& getScanMeasurementStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by ScanMeasurementStatus.
    *
    * @return A reference to the value of the enumeration identified by ScanMeasurementStatus.
    */
  virtual uci::type::MeasurementStatusEnum& getScanMeasurementStatus() = 0;

  /** Sets the value of the enumeration identified by ScanMeasurementStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanMeasurementStatus(const uci::type::MeasurementStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by ScanMeasurementStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanMeasurementStatus(uci::type::MeasurementStatusEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ScanPlane.
    *
    * @return A const reference to the value of the enumeration identified by ScanPlane.
    */
  virtual const uci::type::ScanPlaneEnum& getScanPlane() const = 0;

  /** Returns a reference to the value of the enumeration identified by ScanPlane.
    *
    * @return A reference to the value of the enumeration identified by ScanPlane.
    */
  virtual uci::type::ScanPlaneEnum& getScanPlane() = 0;

  /** Sets the value of the enumeration identified by ScanPlane.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanPlane(const uci::type::ScanPlaneEnum& value) = 0;

  /** Sets the value of the enumeration identified by ScanPlane.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanPlane(uci::type::ScanPlaneEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ScanPlane exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ScanPlane is enabled or not.
    */
  virtual bool hasScanPlane() const = 0;

  /** Enables the Element identified by ScanPlane.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ScanPlane.
    */
  virtual uci::type::ScanPlaneEnum& enableScanPlane(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ScanPlane.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& clearScanPlane() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SectorWidth.
    *
    * @return The value of the simple primitive data type identified by SectorWidth.
    */
  virtual uci::type::AnglePositiveTypeValue getSectorWidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SectorWidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setSectorWidth(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by SectorWidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SectorWidth is enabled or not.
    */
  virtual bool hasSectorWidth() const = 0;

  /** Clears (disabled) the Element identified by SectorWidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& clearSectorWidth() = 0;

  /** Returns a const reference to the value of the enumeration identified by ScanDirectionality.
    *
    * @return A const reference to the value of the enumeration identified by ScanDirectionality.
    */
  virtual const uci::type::ScanDirectionalityEnum& getScanDirectionality() const = 0;

  /** Returns a reference to the value of the enumeration identified by ScanDirectionality.
    *
    * @return A reference to the value of the enumeration identified by ScanDirectionality.
    */
  virtual uci::type::ScanDirectionalityEnum& getScanDirectionality() = 0;

  /** Sets the value of the enumeration identified by ScanDirectionality.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanDirectionality(const uci::type::ScanDirectionalityEnum& value) = 0;

  /** Sets the value of the enumeration identified by ScanDirectionality.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanDirectionality(uci::type::ScanDirectionalityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ScanDirectionality exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ScanDirectionality is enabled or not.
    */
  virtual bool hasScanDirectionality() const = 0;

  /** Enables the Element identified by ScanDirectionality.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ScanDirectionality.
    */
  virtual uci::type::ScanDirectionalityEnum& enableScanDirectionality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ScanDirectionality.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& clearScanDirectionality() = 0;

  /** Returns a const reference to the value of the enumeration identified by ScanMechanics.
    *
    * @return A const reference to the value of the enumeration identified by ScanMechanics.
    */
  virtual const uci::type::ScanMechanicsEnum& getScanMechanics() const = 0;

  /** Returns a reference to the value of the enumeration identified by ScanMechanics.
    *
    * @return A reference to the value of the enumeration identified by ScanMechanics.
    */
  virtual uci::type::ScanMechanicsEnum& getScanMechanics() = 0;

  /** Sets the value of the enumeration identified by ScanMechanics.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanMechanics(const uci::type::ScanMechanicsEnum& value) = 0;

  /** Sets the value of the enumeration identified by ScanMechanics.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanMechanics(uci::type::ScanMechanicsEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ScanMechanics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ScanMechanics is enabled or not.
    */
  virtual bool hasScanMechanics() const = 0;

  /** Enables the Element identified by ScanMechanics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ScanMechanics.
    */
  virtual uci::type::ScanMechanicsEnum& enableScanMechanics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ScanMechanics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& clearScanMechanics() = 0;

  /** Returns a const reference to the bounded list identified by ScanPeriod.
    *
    * @return A const reference to the bounded list identified by ScanPeriod.
    */
  virtual const uci::type::ScanDataType::ScanPeriod& getScanPeriod() const = 0;

  /** Returns a reference to the bounded list identified by ScanPeriod.
    *
    * @return A reference to the bounded list identified by ScanPeriod.
    */
  virtual uci::type::ScanDataType::ScanPeriod& getScanPeriod() = 0;

  /** Sets the bounded list identified by ScanPeriod.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setScanPeriod(const uci::type::ScanDataType::ScanPeriod& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by OOK_Present.
    *
    * @return The value of the simple primitive data type identified by OOK_Present.
    */
  virtual xs::Boolean getOOK_Present() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by OOK_Present.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setOOK_Present(xs::Boolean value) = 0;

  /** Returns whether the Element identified by OOK_Present exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OOK_Present is enabled or not.
    */
  virtual bool hasOOK_Present() const = 0;

  /** Clears (disabled) the Element identified by OOK_Present.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& clearOOK_Present() = 0;

  /** Returns a const reference to the bounded list identified by Lobe.
    *
    * @return A const reference to the bounded list identified by Lobe.
    */
  virtual const uci::type::ScanDataType::Lobe& getLobe() const = 0;

  /** Returns a reference to the bounded list identified by Lobe.
    *
    * @return A reference to the bounded list identified by Lobe.
    */
  virtual uci::type::ScanDataType::Lobe& getLobe() = 0;

  /** Sets the bounded list identified by Lobe.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setLobe(const uci::type::ScanDataType::Lobe& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by TypeOfBeam.
    *
    * @return A const reference to the value of the enumeration identified by TypeOfBeam.
    */
  virtual const uci::type::RadarBeamTypeEnum& getTypeOfBeam() const = 0;

  /** Returns a reference to the value of the enumeration identified by TypeOfBeam.
    *
    * @return A reference to the value of the enumeration identified by TypeOfBeam.
    */
  virtual uci::type::RadarBeamTypeEnum& getTypeOfBeam() = 0;

  /** Sets the value of the enumeration identified by TypeOfBeam.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setTypeOfBeam(const uci::type::RadarBeamTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by TypeOfBeam.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setTypeOfBeam(uci::type::RadarBeamTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TypeOfBeam exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TypeOfBeam is enabled or not.
    */
  virtual bool hasTypeOfBeam() const = 0;

  /** Enables the Element identified by TypeOfBeam.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TypeOfBeam.
    */
  virtual uci::type::RadarBeamTypeEnum& enableTypeOfBeam(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TypeOfBeam.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& clearTypeOfBeam() = 0;

  /** Returns a const reference to the value of the enumeration identified by BeamPersistence.
    *
    * @return A const reference to the value of the enumeration identified by BeamPersistence.
    */
  virtual const uci::type::RadarBeamPersistenceEnum& getBeamPersistence() const = 0;

  /** Returns a reference to the value of the enumeration identified by BeamPersistence.
    *
    * @return A reference to the value of the enumeration identified by BeamPersistence.
    */
  virtual uci::type::RadarBeamPersistenceEnum& getBeamPersistence() = 0;

  /** Sets the value of the enumeration identified by BeamPersistence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setBeamPersistence(const uci::type::RadarBeamPersistenceEnum& value) = 0;

  /** Sets the value of the enumeration identified by BeamPersistence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& setBeamPersistence(uci::type::RadarBeamPersistenceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by BeamPersistence exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BeamPersistence is enabled or not.
    */
  virtual bool hasBeamPersistence() const = 0;

  /** Enables the Element identified by BeamPersistence.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by BeamPersistence.
    */
  virtual uci::type::RadarBeamPersistenceEnum& enableBeamPersistence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BeamPersistence.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ScanDataType& clearBeamPersistence() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ScanDataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ScanDataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ScanDataType to copy from.
    */
  ScanDataType(const ScanDataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ScanDataType to the contents of the ScanDataType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ScanDataType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this ScanDataType.
    * @return A reference to this ScanDataType.
    */
  ScanDataType& operator=(const ScanDataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SCANDATATYPE_H

