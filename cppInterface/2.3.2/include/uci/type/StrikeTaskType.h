/** @file StrikeTaskType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_STRIKETASKTYPE_H
#define UCI_TYPE_STRIKETASKTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/AnglePairType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/StrikeTaskReleaseConstraintsType.h"
#include "uci/type/StrikeTaskWeaponListType.h"
#include "uci/type/TargetInformationType.h"
#include "uci/type/TargetType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class StrikeTaskType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new StrikeTaskType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StrikeTaskType.
    */
  static UCI_EXPORT StrikeTaskType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new StrikeTaskType initializing the data accessed by the new StrikeTaskType using the data
    * accessed by the specified StrikeTaskType (cloning).
    *
    * @param accessor The StrikeTaskType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created StrikeTaskType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StrikeTaskType.
    */
  static UCI_EXPORT StrikeTaskType& create(const StrikeTaskType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified StrikeTaskType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The StrikeTaskType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(StrikeTaskType& accessor);

  /** Returns this accessor's type constant, i.e. strikeTaskType.
    *
    * @return This accessor's type constant, i.e. strikeTaskType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::strikeTaskType;
  }

  /** Returns the version that was initialized from the uci:version attribute of StrikeTaskType.
    *
    * @return The version that was initialized from the uci:version attribute of StrikeTaskType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const StrikeTaskType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Target.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Target.
    */
  virtual const uci::type::TargetType& getTarget() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Target.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Target.
    */
  virtual uci::type::TargetType& getTarget() = 0;

  /** Sets the complex content identified by Target to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Target.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setTarget(const uci::type::TargetType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TargetInformation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TargetInformation.
    */
  virtual const uci::type::TargetInformationType& getTargetInformation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TargetInformation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TargetInformation.
    */
  virtual uci::type::TargetInformationType& getTargetInformation() = 0;

  /** Sets the complex content identified by TargetInformation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TargetInformation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setTargetInformation(const uci::type::TargetInformationType& value) = 0;

  /** Returns whether the Element identified by TargetInformation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetInformation is enabled or not.
    */
  virtual bool hasTargetInformation() const = 0;

  /** Enables the Element identified by TargetInformation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TargetInformation.
    */
  virtual uci::type::TargetInformationType& enableTargetInformation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TargetInformation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& clearTargetInformation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * IngressConstraint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      IngressConstraint.
    */
  virtual const uci::type::AnglePairType& getIngressConstraint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by IngressConstraint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by IngressConstraint.
    */
  virtual uci::type::AnglePairType& getIngressConstraint() = 0;

  /** Sets the complex content identified by IngressConstraint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by IngressConstraint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setIngressConstraint(const uci::type::AnglePairType& value) = 0;

  /** Returns whether the Element identified by IngressConstraint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IngressConstraint is enabled or not.
    */
  virtual bool hasIngressConstraint() const = 0;

  /** Enables the Element identified by IngressConstraint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by IngressConstraint.
    */
  virtual uci::type::AnglePairType& enableIngressConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IngressConstraint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& clearIngressConstraint() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EgressConstraint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EgressConstraint.
    */
  virtual const uci::type::AnglePairType& getEgressConstraint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EgressConstraint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EgressConstraint.
    */
  virtual uci::type::AnglePairType& getEgressConstraint() = 0;

  /** Sets the complex content identified by EgressConstraint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EgressConstraint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setEgressConstraint(const uci::type::AnglePairType& value) = 0;

  /** Returns whether the Element identified by EgressConstraint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EgressConstraint is enabled or not.
    */
  virtual bool hasEgressConstraint() const = 0;

  /** Enables the Element identified by EgressConstraint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EgressConstraint.
    */
  virtual uci::type::AnglePairType& enableEgressConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EgressConstraint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& clearEgressConstraint() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by InitialPoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by InitialPoint.
    */
  virtual const uci::type::Point3D_Type& getInitialPoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by InitialPoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by InitialPoint.
    */
  virtual uci::type::Point3D_Type& getInitialPoint() = 0;

  /** Sets the complex content identified by InitialPoint to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InitialPoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setInitialPoint(const uci::type::Point3D_Type& value) = 0;

  /** Returns whether the Element identified by InitialPoint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitialPoint is enabled or not.
    */
  virtual bool hasInitialPoint() const = 0;

  /** Enables the Element identified by InitialPoint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by InitialPoint.
    */
  virtual uci::type::Point3D_Type& enableInitialPoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InitialPoint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& clearInitialPoint() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ReleaseConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ReleaseConstraints.
    */
  virtual const uci::type::StrikeTaskReleaseConstraintsType& getReleaseConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReleaseConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReleaseConstraints.
    */
  virtual uci::type::StrikeTaskReleaseConstraintsType& getReleaseConstraints() = 0;

  /** Sets the complex content identified by ReleaseConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReleaseConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setReleaseConstraints(const uci::type::StrikeTaskReleaseConstraintsType& value) = 0;

  /** Returns whether the Element identified by ReleaseConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReleaseConstraints is enabled or not.
    */
  virtual bool hasReleaseConstraints() const = 0;

  /** Enables the Element identified by ReleaseConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReleaseConstraints.
    */
  virtual uci::type::StrikeTaskReleaseConstraintsType& enableReleaseConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReleaseConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& clearReleaseConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by WeaponList.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by WeaponList.
    */
  virtual const uci::type::StrikeTaskWeaponListType& getWeaponList() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WeaponList.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WeaponList.
    */
  virtual uci::type::StrikeTaskWeaponListType& getWeaponList() = 0;

  /** Sets the complex content identified by WeaponList to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WeaponList.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setWeaponList(const uci::type::StrikeTaskWeaponListType& value) = 0;

  /** Returns whether the Element identified by WeaponList exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WeaponList is enabled or not.
    */
  virtual bool hasWeaponList() const = 0;

  /** Enables the Element identified by WeaponList.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by WeaponList.
    */
  virtual uci::type::StrikeTaskWeaponListType& enableWeaponList(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WeaponList.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& clearWeaponList() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by NoStrike.
    *
    * @return A const reference to the accessor that provides access to the string identified by NoStrike.
    */
  virtual const uci::type::EmptyType& getNoStrike() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by NoStrike.
    *
    * @return A reference to the accessor that provides access to the string identified by NoStrike.
    */
  virtual uci::type::EmptyType& getNoStrike() = 0;

  /** Sets the string identified by NoStrike to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by NoStrike.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setNoStrike(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by NoStrike to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setNoStrike(const std::string& value) = 0;

  /** Sets the string identified by NoStrike to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& setNoStrike(const char* value) = 0;

  /** Returns whether the Element identified by NoStrike exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NoStrike is enabled or not.
    */
  virtual bool hasNoStrike() const = 0;

  /** Enables the Element identified by NoStrike.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by NoStrike.
    */
  virtual uci::type::EmptyType& enableNoStrike(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NoStrike.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeTaskType& clearNoStrike() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  StrikeTaskType() {
  }

  /** The destructor [only available to derived classes]. */
  ~StrikeTaskType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The StrikeTaskType to copy from.
    */
  StrikeTaskType(const StrikeTaskType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this StrikeTaskType to the contents of the StrikeTaskType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The StrikeTaskType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this StrikeTaskType.
    * @return A reference to this StrikeTaskType.
    */
  StrikeTaskType& operator=(const StrikeTaskType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_STRIKETASKTYPE_H

