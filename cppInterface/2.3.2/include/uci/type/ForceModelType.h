/** @file ForceModelType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_FORCEMODELTYPE_H
#define UCI_TYPE_FORCEMODELTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AtmosphericDragModelType.h"
#include "EarthOrientationParametersDataChoiceType.h"
#include "GravityModelType.h"
#include "OrbitalManeuverDetailsType.h"
#include "PhysicalModelType.h"
#include "SolarRadiationPressureModelType.h"
#include "ThirdBodyGravityType.h"
#include "VCM_ForceModelOptionsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Components of the force model for the satellite, independent of the satellite itself. */
class ForceModelType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ForceModelType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ForceModelType.
    */
  static UCI_EXPORT ForceModelType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ForceModelType initializing the data accessed by the new ForceModelType using the data
    * accessed by the specified ForceModelType (cloning).
    *
    * @param accessor The ForceModelType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ForceModelType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ForceModelType.
    */
  static UCI_EXPORT ForceModelType& create(const ForceModelType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ForceModelType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ForceModelType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ForceModelType& accessor);

  /** Returns this accessor's type constant, i.e. forceModelType.
    *
    * @return This accessor's type constant, i.e. forceModelType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::forceModelType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ForceModelType.
    *
    * @return The version that was initialized from the uci:version attribute of ForceModelType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ForceModelType& accessor) = 0;

  /** A list of maneuvers to be included in the propagation. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::OrbitalManeuverDetailsType, uci::type::accessorType::orbitalManeuverDetailsType> Maneuver;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GravityModel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GravityModel.
    */
  virtual const uci::type::GravityModelType& getGravityModel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GravityModel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GravityModel.
    */
  virtual uci::type::GravityModelType& getGravityModel() = 0;

  /** Sets the complex content identified by GravityModel to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GravityModel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setGravityModel(const uci::type::GravityModelType& value) = 0;

  /** Returns whether the Element identified by GravityModel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GravityModel is enabled or not.
    */
  virtual bool hasGravityModel() const = 0;

  /** Enables the Element identified by GravityModel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by GravityModel.
    */
  virtual uci::type::GravityModelType& enableGravityModel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GravityModel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& clearGravityModel() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AtmosphericDragModel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AtmosphericDragModel.
    */
  virtual const uci::type::AtmosphericDragModelType& getAtmosphericDragModel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AtmosphericDragModel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AtmosphericDragModel.
    */
  virtual uci::type::AtmosphericDragModelType& getAtmosphericDragModel() = 0;

  /** Sets the complex content identified by AtmosphericDragModel to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AtmosphericDragModel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setAtmosphericDragModel(const uci::type::AtmosphericDragModelType& value) = 0;

  /** Returns whether the Element identified by AtmosphericDragModel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AtmosphericDragModel is enabled or not.
    */
  virtual bool hasAtmosphericDragModel() const = 0;

  /** Enables the Element identified by AtmosphericDragModel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AtmosphericDragModel.
    */
  virtual uci::type::AtmosphericDragModelType& enableAtmosphericDragModel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AtmosphericDragModel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& clearAtmosphericDragModel() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SolarRadiationPressureModel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SolarRadiationPressureModel.
    */
  virtual const uci::type::SolarRadiationPressureModelType& getSolarRadiationPressureModel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * SolarRadiationPressureModel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SolarRadiationPressureModel.
    */
  virtual uci::type::SolarRadiationPressureModelType& getSolarRadiationPressureModel() = 0;

  /** Sets the complex content identified by SolarRadiationPressureModel to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SolarRadiationPressureModel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setSolarRadiationPressureModel(const uci::type::SolarRadiationPressureModelType& value) = 0;

  /** Returns whether the Element identified by SolarRadiationPressureModel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SolarRadiationPressureModel is enabled or not.
    */
  virtual bool hasSolarRadiationPressureModel() const = 0;

  /** Enables the Element identified by SolarRadiationPressureModel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SolarRadiationPressureModel.
    */
  virtual uci::type::SolarRadiationPressureModelType& enableSolarRadiationPressureModel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SolarRadiationPressureModel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& clearSolarRadiationPressureModel() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ThirdBodyGravityModel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ThirdBodyGravityModel.
    */
  virtual const uci::type::ThirdBodyGravityType& getThirdBodyGravityModel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ThirdBodyGravityModel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ThirdBodyGravityModel.
    */
  virtual uci::type::ThirdBodyGravityType& getThirdBodyGravityModel() = 0;

  /** Sets the complex content identified by ThirdBodyGravityModel to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ThirdBodyGravityModel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setThirdBodyGravityModel(const uci::type::ThirdBodyGravityType& value) = 0;

  /** Returns whether the Element identified by ThirdBodyGravityModel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ThirdBodyGravityModel is enabled or not.
    */
  virtual bool hasThirdBodyGravityModel() const = 0;

  /** Enables the Element identified by ThirdBodyGravityModel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ThirdBodyGravityModel.
    */
  virtual uci::type::ThirdBodyGravityType& enableThirdBodyGravityModel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ThirdBodyGravityModel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& clearThirdBodyGravityModel() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EarthOrientationParametersDataChoice.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EarthOrientationParametersDataChoice.
    */
  virtual const uci::type::EarthOrientationParametersDataChoiceType& getEarthOrientationParametersDataChoice() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * EarthOrientationParametersDataChoice.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EarthOrientationParametersDataChoice.
    */
  virtual uci::type::EarthOrientationParametersDataChoiceType& getEarthOrientationParametersDataChoice() = 0;

  /** Sets the complex content identified by EarthOrientationParametersDataChoice to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EarthOrientationParametersDataChoice.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setEarthOrientationParametersDataChoice(const uci::type::EarthOrientationParametersDataChoiceType& value) = 0;

  /** Returns whether the Element identified by EarthOrientationParametersDataChoice exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EarthOrientationParametersDataChoice is enabled or
    *      not.
    */
  virtual bool hasEarthOrientationParametersDataChoice() const = 0;

  /** Enables the Element identified by EarthOrientationParametersDataChoice.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EarthOrientationParametersDataChoice.
    */
  virtual uci::type::EarthOrientationParametersDataChoiceType& enableEarthOrientationParametersDataChoice(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EarthOrientationParametersDataChoice.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& clearEarthOrientationParametersDataChoice() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PhysicalModel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PhysicalModel.
    */
  virtual const uci::type::PhysicalModelType& getPhysicalModel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PhysicalModel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PhysicalModel.
    */
  virtual uci::type::PhysicalModelType& getPhysicalModel() = 0;

  /** Sets the complex content identified by PhysicalModel to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PhysicalModel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setPhysicalModel(const uci::type::PhysicalModelType& value) = 0;

  /** Returns whether the Element identified by PhysicalModel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PhysicalModel is enabled or not.
    */
  virtual bool hasPhysicalModel() const = 0;

  /** Enables the Element identified by PhysicalModel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PhysicalModel.
    */
  virtual uci::type::PhysicalModelType& enablePhysicalModel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PhysicalModel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& clearPhysicalModel() = 0;

  /** Returns a const reference to the bounded list identified by Maneuver.
    *
    * @return A const reference to the bounded list identified by Maneuver.
    */
  virtual const uci::type::ForceModelType::Maneuver& getManeuver() const = 0;

  /** Returns a reference to the bounded list identified by Maneuver.
    *
    * @return A reference to the bounded list identified by Maneuver.
    */
  virtual uci::type::ForceModelType::Maneuver& getManeuver() = 0;

  /** Sets the bounded list identified by Maneuver.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setManeuver(const uci::type::ForceModelType::Maneuver& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * VCM_ForceModelOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      VCM_ForceModelOptions.
    */
  virtual const uci::type::VCM_ForceModelOptionsType& getVCM_ForceModelOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VCM_ForceModelOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VCM_ForceModelOptions.
    */
  virtual uci::type::VCM_ForceModelOptionsType& getVCM_ForceModelOptions() = 0;

  /** Sets the complex content identified by VCM_ForceModelOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VCM_ForceModelOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& setVCM_ForceModelOptions(const uci::type::VCM_ForceModelOptionsType& value) = 0;

  /** Returns whether the Element identified by VCM_ForceModelOptions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VCM_ForceModelOptions is enabled or not.
    */
  virtual bool hasVCM_ForceModelOptions() const = 0;

  /** Enables the Element identified by VCM_ForceModelOptions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VCM_ForceModelOptions.
    */
  virtual uci::type::VCM_ForceModelOptionsType& enableVCM_ForceModelOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VCM_ForceModelOptions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ForceModelType& clearVCM_ForceModelOptions() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ForceModelType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ForceModelType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ForceModelType to copy from.
    */
  ForceModelType(const ForceModelType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ForceModelType to the contents of the ForceModelType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ForceModelType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this ForceModelType.
    * @return A reference to this ForceModelType.
    */
  ForceModelType& operator=(const ForceModelType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_FORCEMODELTYPE_H

