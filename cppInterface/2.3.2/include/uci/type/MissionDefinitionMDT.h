/** @file MissionDefinitionMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MISSIONDEFINITIONMDT_H
#define UCI_TYPE_MISSIONDEFINITIONMDT_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ArchiveRequestType.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/MissionCategoryType.h"
#include "uci/type/MissionDefinitionID_Type.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/MissionStateEnum.h"
#include "uci/type/OrderTraceabilityType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/UserIdentifierType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MissionDefinitionMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new MissionDefinitionMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MissionDefinitionMDT.
    */
  static UCI_EXPORT MissionDefinitionMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MissionDefinitionMDT initializing the data accessed by the new MissionDefinitionMDT
    * using the data accessed by the specified MissionDefinitionMDT (cloning).
    *
    * @param accessor The MissionDefinitionMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created MissionDefinitionMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MissionDefinitionMDT.
    */
  static UCI_EXPORT MissionDefinitionMDT& create(const MissionDefinitionMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MissionDefinitionMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The MissionDefinitionMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MissionDefinitionMDT& accessor);

  /** Returns this accessor's type constant, i.e. missionDefinitionMDT.
    *
    * @return This accessor's type constant, i.e. missionDefinitionMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::missionDefinitionMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of MissionDefinitionMDT.
    *
    * @return The version that was initialized from the uci:version attribute of MissionDefinitionMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MissionDefinitionMDT& accessor) = 0;

  /** Identifies one or more parent missions. This defines a mission hierarchy which allows one mission type to be
    * contained within other mission type or types. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MissionID_Type, uci::type::accessorType::missionID_Type> ParentMissionID;

  /** Indicates an operational tasking order that is the source of the MissionDefinition. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrderTraceabilityType, uci::type::accessorType::orderTraceabilityType> OrderTraceability;

  /** An operator specified purpose or category of the mission. This gives the ability for displays or services to filter
    * missions by their type. The absence of this element indicates that the mission has no special type. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MissionCategoryType, uci::type::accessorType::missionCategoryType> MissionType;

  /** Indicates a system authorized to access mission definition. Systems who are listed are associated with planning or
    * execution of the mission. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> AuthorizedSystemID;

  /** Indicates a user authorized to access mission definition. Users who are listed are associated with planning or
    * execution of the mission. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::UserIdentifierType, uci::type::accessorType::userIdentifierType> AuthorizedUserIdentifier;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MissionDefinitionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MissionDefinitionID.
    */
  virtual const uci::type::MissionDefinitionID_Type& getMissionDefinitionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionDefinitionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionDefinitionID.
    */
  virtual uci::type::MissionDefinitionID_Type& getMissionDefinitionID() = 0;

  /** Sets the complex content identified by MissionDefinitionID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionDefinitionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setMissionDefinitionID(const uci::type::MissionDefinitionID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MissionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MissionID.
    */
  virtual const uci::type::MissionID_Type& getMissionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionID.
    */
  virtual uci::type::MissionID_Type& getMissionID() = 0;

  /** Sets the complex content identified by MissionID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setMissionID(const uci::type::MissionID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by ParentMissionID.
    *
    * @return A const reference to the bounded list identified by ParentMissionID.
    */
  virtual const uci::type::MissionDefinitionMDT::ParentMissionID& getParentMissionID() const = 0;

  /** Returns a reference to the bounded list identified by ParentMissionID.
    *
    * @return A reference to the bounded list identified by ParentMissionID.
    */
  virtual uci::type::MissionDefinitionMDT::ParentMissionID& getParentMissionID() = 0;

  /** Sets the bounded list identified by ParentMissionID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setParentMissionID(const uci::type::MissionDefinitionMDT::ParentMissionID& value) = 0;

  /** Returns a const reference to the bounded list identified by OrderTraceability.
    *
    * @return A const reference to the bounded list identified by OrderTraceability.
    */
  virtual const uci::type::MissionDefinitionMDT::OrderTraceability& getOrderTraceability() const = 0;

  /** Returns a reference to the bounded list identified by OrderTraceability.
    *
    * @return A reference to the bounded list identified by OrderTraceability.
    */
  virtual uci::type::MissionDefinitionMDT::OrderTraceability& getOrderTraceability() = 0;

  /** Sets the bounded list identified by OrderTraceability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setOrderTraceability(const uci::type::MissionDefinitionMDT::OrderTraceability& value) = 0;

  /** Returns a const reference to the bounded list identified by MissionType.
    *
    * @return A const reference to the bounded list identified by MissionType.
    */
  virtual const uci::type::MissionDefinitionMDT::MissionType& getMissionType() const = 0;

  /** Returns a reference to the bounded list identified by MissionType.
    *
    * @return A reference to the bounded list identified by MissionType.
    */
  virtual uci::type::MissionDefinitionMDT::MissionType& getMissionType() = 0;

  /** Sets the bounded list identified by MissionType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setMissionType(const uci::type::MissionDefinitionMDT::MissionType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by MissionState.
    *
    * @return A const reference to the value of the enumeration identified by MissionState.
    */
  virtual const uci::type::MissionStateEnum& getMissionState() const = 0;

  /** Returns a reference to the value of the enumeration identified by MissionState.
    *
    * @return A reference to the value of the enumeration identified by MissionState.
    */
  virtual uci::type::MissionStateEnum& getMissionState() = 0;

  /** Sets the value of the enumeration identified by MissionState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setMissionState(const uci::type::MissionStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by MissionState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setMissionState(uci::type::MissionStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TimeSpan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TimeSpan.
    */
  virtual const uci::type::DateTimeRangeType& getTimeSpan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TimeSpan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TimeSpan.
    */
  virtual uci::type::DateTimeRangeType& getTimeSpan() = 0;

  /** Sets the complex content identified by TimeSpan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TimeSpan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setTimeSpan(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns whether the Element identified by TimeSpan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeSpan is enabled or not.
    */
  virtual bool hasTimeSpan() const = 0;

  /** Enables the Element identified by TimeSpan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TimeSpan.
    */
  virtual uci::type::DateTimeRangeType& enableTimeSpan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TimeSpan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& clearTimeSpan() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Expired.
    *
    * @return The value of the simple primitive data type identified by Expired.
    */
  virtual xs::Boolean getExpired() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Expired.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setExpired(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by AuthorizedSystemID.
    *
    * @return A const reference to the bounded list identified by AuthorizedSystemID.
    */
  virtual const uci::type::MissionDefinitionMDT::AuthorizedSystemID& getAuthorizedSystemID() const = 0;

  /** Returns a reference to the bounded list identified by AuthorizedSystemID.
    *
    * @return A reference to the bounded list identified by AuthorizedSystemID.
    */
  virtual uci::type::MissionDefinitionMDT::AuthorizedSystemID& getAuthorizedSystemID() = 0;

  /** Sets the bounded list identified by AuthorizedSystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setAuthorizedSystemID(const uci::type::MissionDefinitionMDT::AuthorizedSystemID& value) = 0;

  /** Returns a const reference to the bounded list identified by AuthorizedUserIdentifier.
    *
    * @return A const reference to the bounded list identified by AuthorizedUserIdentifier.
    */
  virtual const uci::type::MissionDefinitionMDT::AuthorizedUserIdentifier& getAuthorizedUserIdentifier() const = 0;

  /** Returns a reference to the bounded list identified by AuthorizedUserIdentifier.
    *
    * @return A reference to the bounded list identified by AuthorizedUserIdentifier.
    */
  virtual uci::type::MissionDefinitionMDT::AuthorizedUserIdentifier& getAuthorizedUserIdentifier() = 0;

  /** Sets the bounded list identified by AuthorizedUserIdentifier.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setAuthorizedUserIdentifier(const uci::type::MissionDefinitionMDT::AuthorizedUserIdentifier& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ArchiveConfiguration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ArchiveConfiguration.
    */
  virtual const uci::type::ArchiveRequestType& getArchiveConfiguration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ArchiveConfiguration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ArchiveConfiguration.
    */
  virtual uci::type::ArchiveRequestType& getArchiveConfiguration() = 0;

  /** Sets the complex content identified by ArchiveConfiguration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ArchiveConfiguration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& setArchiveConfiguration(const uci::type::ArchiveRequestType& value) = 0;

  /** Returns whether the Element identified by ArchiveConfiguration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ArchiveConfiguration is enabled or not.
    */
  virtual bool hasArchiveConfiguration() const = 0;

  /** Enables the Element identified by ArchiveConfiguration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ArchiveConfiguration.
    */
  virtual uci::type::ArchiveRequestType& enableArchiveConfiguration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ArchiveConfiguration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionDefinitionMDT& clearArchiveConfiguration() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MissionDefinitionMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~MissionDefinitionMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MissionDefinitionMDT to copy from.
    */
  MissionDefinitionMDT(const MissionDefinitionMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MissionDefinitionMDT to the contents of the MissionDefinitionMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The MissionDefinitionMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this MissionDefinitionMDT.
    * @return A reference to this MissionDefinitionMDT.
    */
  MissionDefinitionMDT& operator=(const MissionDefinitionMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MISSIONDEFINITIONMDT_H

