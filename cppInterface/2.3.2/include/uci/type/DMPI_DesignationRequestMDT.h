/** @file DMPI_DesignationRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DMPI_DESIGNATIONREQUESTMDT_H
#define UCI_TYPE_DMPI_DESIGNATIONREQUESTMDT_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AvailableWeaponsType.h"
#include "DateTimeType.h"
#include "PixelReferenceCoordinateType.h"
#include "Point2D_Type.h"
#include "ProductMetadataID_Type.h"
#include "RecommendedWeaponsType.h"
#include "RequestBaseType.h"
#include "TaskID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DMPI_DesignationRequestMDT : public virtual RequestBaseType {
public:

  /** This method constructs a new DMPI_DesignationRequestMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DMPI_DesignationRequestMDT.
    */
  static UCI_EXPORT DMPI_DesignationRequestMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DMPI_DesignationRequestMDT initializing the data accessed by the new
    * DMPI_DesignationRequestMDT using the data accessed by the specified DMPI_DesignationRequestMDT (cloning).
    *
    * @param accessor The DMPI_DesignationRequestMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created DMPI_DesignationRequestMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DMPI_DesignationRequestMDT.
    */
  static UCI_EXPORT DMPI_DesignationRequestMDT& create(const DMPI_DesignationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DMPI_DesignationRequestMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The DMPI_DesignationRequestMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DMPI_DesignationRequestMDT& accessor);

  /** Returns this accessor's type constant, i.e. dMPI_DesignationRequestMDT.
    *
    * @return This accessor's type constant, i.e. dMPI_DesignationRequestMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::dMPI_DesignationRequestMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of DMPI_DesignationRequestMDT.
    *
    * @return The version that was initialized from the uci:version attribute of DMPI_DesignationRequestMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DMPI_DesignationRequestMDT& accessor) = 0;

  /** Indicates the IDs of the data product from which this DMPI designation should be derived. It should be considered
    * required in cases where the DMPI designation requestor expects specific data products to be used to create the DMPI
    * designation, such as dynamic targeting scenarios with freshly collected sensor products. It is optional to support
    * use cases where products aren't used to create the DMPI designation and/or the selection of products is left to the
    * designator to select. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> ProductMetadataID;

  /** Indicates a recommendation on the type and quantity of weapons to use when targeting and creating DMPIs.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RecommendedWeaponsType, uci::type::accessorType::recommendedWeaponsType> RecommendedWeapons;

  /** Indicates a constraint on the type and quantity of weapons available (or to be used) when targeting and creating
    * DMPIs. It is optional for cases when the system/node creating DMPIs has direct awareness of the plans and weapon
    * type/quantity of the strike Systems and/or the requestor has deferred the selection. When specified, this element is
    * considered a targeting constraint to be used regardless of other weapon type/quantity information that may be
    * available. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AvailableWeaponsType, uci::type::accessorType::availableWeaponsType> AvailableWeapons;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual const uci::type::TaskID_Type& getTaskID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& getTaskID() = 0;

  /** Sets the complex content identified by TaskID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& setTaskID(const uci::type::TaskID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by ProductMetadataID.
    *
    * @return A const reference to the bounded list identified by ProductMetadataID.
    */
  virtual const uci::type::DMPI_DesignationRequestMDT::ProductMetadataID& getProductMetadataID() const = 0;

  /** Returns a reference to the bounded list identified by ProductMetadataID.
    *
    * @return A reference to the bounded list identified by ProductMetadataID.
    */
  virtual uci::type::DMPI_DesignationRequestMDT::ProductMetadataID& getProductMetadataID() = 0;

  /** Sets the bounded list identified by ProductMetadataID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& setProductMetadataID(const uci::type::DMPI_DesignationRequestMDT::ProductMetadataID& value) = 0;

  /** Returns a const reference to the bounded list identified by RecommendedWeapons.
    *
    * @return A const reference to the bounded list identified by RecommendedWeapons.
    */
  virtual const uci::type::DMPI_DesignationRequestMDT::RecommendedWeapons& getRecommendedWeapons() const = 0;

  /** Returns a reference to the bounded list identified by RecommendedWeapons.
    *
    * @return A reference to the bounded list identified by RecommendedWeapons.
    */
  virtual uci::type::DMPI_DesignationRequestMDT::RecommendedWeapons& getRecommendedWeapons() = 0;

  /** Sets the bounded list identified by RecommendedWeapons.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& setRecommendedWeapons(const uci::type::DMPI_DesignationRequestMDT::RecommendedWeapons& value) = 0;

  /** Returns a const reference to the bounded list identified by AvailableWeapons.
    *
    * @return A const reference to the bounded list identified by AvailableWeapons.
    */
  virtual const uci::type::DMPI_DesignationRequestMDT::AvailableWeapons& getAvailableWeapons() const = 0;

  /** Returns a reference to the bounded list identified by AvailableWeapons.
    *
    * @return A reference to the bounded list identified by AvailableWeapons.
    */
  virtual uci::type::DMPI_DesignationRequestMDT::AvailableWeapons& getAvailableWeapons() = 0;

  /** Sets the bounded list identified by AvailableWeapons.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& setAvailableWeapons(const uci::type::DMPI_DesignationRequestMDT::AvailableWeapons& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RespondBy.
    *
    * @return The value of the simple primitive data type identified by RespondBy.
    */
  virtual uci::type::DateTimeTypeValue getRespondBy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RespondBy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& setRespondBy(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by RespondBy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RespondBy is enabled or not.
    */
  virtual bool hasRespondBy() const = 0;

  /** Clears (disabled) the Element identified by RespondBy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& clearRespondBy() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProposedDMPI_Coordinates.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProposedDMPI_Coordinates.
    */
  virtual const uci::type::Point2D_Type& getProposedDMPI_Coordinates() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ProposedDMPI_Coordinates.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ProposedDMPI_Coordinates.
    */
  virtual uci::type::Point2D_Type& getProposedDMPI_Coordinates() = 0;

  /** Sets the complex content identified by ProposedDMPI_Coordinates to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProposedDMPI_Coordinates.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& setProposedDMPI_Coordinates(const uci::type::Point2D_Type& value) = 0;

  /** Returns whether the Element identified by ProposedDMPI_Coordinates exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProposedDMPI_Coordinates is enabled or not.
    */
  virtual bool hasProposedDMPI_Coordinates() const = 0;

  /** Enables the Element identified by ProposedDMPI_Coordinates.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ProposedDMPI_Coordinates.
    */
  virtual uci::type::Point2D_Type& enableProposedDMPI_Coordinates(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProposedDMPI_Coordinates.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& clearProposedDMPI_Coordinates() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ReferencePixelCoordinate.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ReferencePixelCoordinate.
    */
  virtual const uci::type::PixelReferenceCoordinateType& getReferencePixelCoordinate() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ReferencePixelCoordinate.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ReferencePixelCoordinate.
    */
  virtual uci::type::PixelReferenceCoordinateType& getReferencePixelCoordinate() = 0;

  /** Sets the complex content identified by ReferencePixelCoordinate to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReferencePixelCoordinate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& setReferencePixelCoordinate(const uci::type::PixelReferenceCoordinateType& value) = 0;

  /** Returns whether the Element identified by ReferencePixelCoordinate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReferencePixelCoordinate is enabled or not.
    */
  virtual bool hasReferencePixelCoordinate() const = 0;

  /** Enables the Element identified by ReferencePixelCoordinate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ReferencePixelCoordinate.
    */
  virtual uci::type::PixelReferenceCoordinateType& enableReferencePixelCoordinate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReferencePixelCoordinate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationRequestMDT& clearReferencePixelCoordinate() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DMPI_DesignationRequestMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~DMPI_DesignationRequestMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DMPI_DesignationRequestMDT to copy from.
    */
  DMPI_DesignationRequestMDT(const DMPI_DesignationRequestMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DMPI_DesignationRequestMDT to the contents of the
    * DMPI_DesignationRequestMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The DMPI_DesignationRequestMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this DMPI_DesignationRequestMDT.
    * @return A reference to this DMPI_DesignationRequestMDT.
    */
  DMPI_DesignationRequestMDT& operator=(const DMPI_DesignationRequestMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DMPI_DESIGNATIONREQUESTMDT_H

