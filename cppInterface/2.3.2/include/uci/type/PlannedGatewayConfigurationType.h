/** @file PlannedGatewayConfigurationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANNEDGATEWAYCONFIGURATIONTYPE_H
#define UCI_TYPE_PLANNEDGATEWAYCONFIGURATIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CommConfigurationID_Type.h"
#include "uci/type/CommConfigurationStateEnum.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/GatewayConfigurationPET.h"
#include "uci/type/GatewayLinkDestinationType.h"
#include "uci/type/MDF_CommandType.h"
#include "uci/type/MessageConfigurationType.h"
#include "uci/type/ProductDisseminationDestinationID_Type.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Ties the unique gateway - Link - Capability/Activity to Message and Product Ingress-Egress configuration details. */
class PlannedGatewayConfigurationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlannedGatewayConfigurationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlannedGatewayConfigurationType.
    */
  static UCI_EXPORT PlannedGatewayConfigurationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlannedGatewayConfigurationType initializing the data accessed by the new
    * PlannedGatewayConfigurationType using the data accessed by the specified PlannedGatewayConfigurationType (cloning).
    *
    * @param accessor The PlannedGatewayConfigurationType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created PlannedGatewayConfigurationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlannedGatewayConfigurationType.
    */
  static UCI_EXPORT PlannedGatewayConfigurationType& create(const PlannedGatewayConfigurationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlannedGatewayConfigurationType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PlannedGatewayConfigurationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlannedGatewayConfigurationType& accessor);

  /** Returns this accessor's type constant, i.e. plannedGatewayConfigurationType.
    *
    * @return This accessor's type constant, i.e. plannedGatewayConfigurationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::plannedGatewayConfigurationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlannedGatewayConfigurationType.
    *
    * @return The version that was initialized from the uci:version attribute of PlannedGatewayConfigurationType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlannedGatewayConfigurationType& accessor) = 0;

  /** If specified, indicates the Service instance to Gateway the data. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type> GatewayServiceID;

  /** Defines the necessary IDs which facilitate gatewaying the data. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::GatewayLinkDestinationType, uci::type::accessorType::gatewayLinkDestinationType> GatewayLinkDestination;

  /** If specified, indicates the message topics, filters, and gateways. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::MessageConfigurationType, uci::type::accessorType::messageConfigurationType> MessageConfiguration;

  /** The remote System ID for which product data shall be ingressed. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> ProductDisseminationIngressSystemID;

  /** The Product Dissemination Destinations which data should be sent to. This is the method to specify Product Egress
    * within the standard Product Dissemination Workflow. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductDisseminationDestinationID_Type, uci::type::accessorType::productDisseminationDestinationID_Type> ProductDisseminationEgressDestinationID;

  /** Returns a const reference to the bounded list identified by GatewayServiceID.
    *
    * @return A const reference to the bounded list identified by GatewayServiceID.
    */
  virtual const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& getGatewayServiceID() const = 0;

  /** Returns a reference to the bounded list identified by GatewayServiceID.
    *
    * @return A reference to the bounded list identified by GatewayServiceID.
    */
  virtual uci::type::PlannedGatewayConfigurationType::GatewayServiceID& getGatewayServiceID() = 0;

  /** Sets the bounded list identified by GatewayServiceID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setGatewayServiceID(const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ConfigurationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ConfigurationID.
    */
  virtual const uci::type::CommConfigurationID_Type& getConfigurationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConfigurationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConfigurationID.
    */
  virtual uci::type::CommConfigurationID_Type& getConfigurationID() = 0;

  /** Sets the complex content identified by ConfigurationID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConfigurationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setConfigurationID(const uci::type::CommConfigurationID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ConfigurationState.
    *
    * @return A const reference to the value of the enumeration identified by ConfigurationState.
    */
  virtual const uci::type::CommConfigurationStateEnum& getConfigurationState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConfigurationState.
    *
    * @return A reference to the value of the enumeration identified by ConfigurationState.
    */
  virtual uci::type::CommConfigurationStateEnum& getConfigurationState() = 0;

  /** Sets the value of the enumeration identified by ConfigurationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setConfigurationState(const uci::type::CommConfigurationStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConfigurationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setConfigurationState(uci::type::CommConfigurationStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivateMDF.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivateMDF.
    */
  virtual const uci::type::MDF_CommandType& getActivateMDF() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivateMDF.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivateMDF.
    */
  virtual uci::type::MDF_CommandType& getActivateMDF() = 0;

  /** Sets the complex content identified by ActivateMDF to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivateMDF.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setActivateMDF(const uci::type::MDF_CommandType& value) = 0;

  /** Returns whether the Element identified by ActivateMDF exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivateMDF is enabled or not.
    */
  virtual bool hasActivateMDF() const = 0;

  /** Enables the Element identified by ActivateMDF.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivateMDF.
    */
  virtual uci::type::MDF_CommandType& enableActivateMDF(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivateMDF.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& clearActivateMDF() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ActivateProfileID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ActivateProfileID.
    */
  virtual const uci::type::CommProfileID_Type& getActivateProfileID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivateProfileID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivateProfileID.
    */
  virtual uci::type::CommProfileID_Type& getActivateProfileID() = 0;

  /** Sets the complex content identified by ActivateProfileID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivateProfileID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setActivateProfileID(const uci::type::CommProfileID_Type& value) = 0;

  /** Returns whether the Element identified by ActivateProfileID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivateProfileID is enabled or not.
    */
  virtual bool hasActivateProfileID() const = 0;

  /** Enables the Element identified by ActivateProfileID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivateProfileID.
    */
  virtual uci::type::CommProfileID_Type& enableActivateProfileID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivateProfileID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& clearActivateProfileID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GatewayCapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GatewayCapabilityID.
    */
  virtual const uci::type::CapabilityID_Type& getGatewayCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GatewayCapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GatewayCapabilityID.
    */
  virtual uci::type::CapabilityID_Type& getGatewayCapabilityID() = 0;

  /** Sets the complex content identified by GatewayCapabilityID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GatewayCapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setGatewayCapabilityID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns whether the Element identified by GatewayCapabilityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GatewayCapabilityID is enabled or not.
    */
  virtual bool hasGatewayCapabilityID() const = 0;

  /** Enables the Element identified by GatewayCapabilityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by GatewayCapabilityID.
    */
  virtual uci::type::CapabilityID_Type& enableGatewayCapabilityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GatewayCapabilityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& clearGatewayCapabilityID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GatewayActivityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GatewayActivityID.
    */
  virtual const uci::type::ActivityID_Type& getGatewayActivityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GatewayActivityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GatewayActivityID.
    */
  virtual uci::type::ActivityID_Type& getGatewayActivityID() = 0;

  /** Sets the complex content identified by GatewayActivityID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GatewayActivityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setGatewayActivityID(const uci::type::ActivityID_Type& value) = 0;

  /** Returns whether the Element identified by GatewayActivityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GatewayActivityID is enabled or not.
    */
  virtual bool hasGatewayActivityID() const = 0;

  /** Enables the Element identified by GatewayActivityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by GatewayActivityID.
    */
  virtual uci::type::ActivityID_Type& enableGatewayActivityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GatewayActivityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& clearGatewayActivityID() = 0;

  /** Returns a const reference to the bounded list identified by GatewayLinkDestination.
    *
    * @return A const reference to the bounded list identified by GatewayLinkDestination.
    */
  virtual const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& getGatewayLinkDestination() const = 0;

  /** Returns a reference to the bounded list identified by GatewayLinkDestination.
    *
    * @return A reference to the bounded list identified by GatewayLinkDestination.
    */
  virtual uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& getGatewayLinkDestination() = 0;

  /** Sets the bounded list identified by GatewayLinkDestination.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setGatewayLinkDestination(const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& value) = 0;

  /** Returns a const reference to the bounded list identified by MessageConfiguration.
    *
    * @return A const reference to the bounded list identified by MessageConfiguration.
    */
  virtual const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& getMessageConfiguration() const = 0;

  /** Returns a reference to the bounded list identified by MessageConfiguration.
    *
    * @return A reference to the bounded list identified by MessageConfiguration.
    */
  virtual uci::type::PlannedGatewayConfigurationType::MessageConfiguration& getMessageConfiguration() = 0;

  /** Sets the bounded list identified by MessageConfiguration.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setMessageConfiguration(const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& value) = 0;

  /** Returns a const reference to the bounded list identified by ProductDisseminationIngressSystemID.
    *
    * @return A const reference to the bounded list identified by ProductDisseminationIngressSystemID.
    */
  virtual const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& getProductDisseminationIngressSystemID() const = 0;

  /** Returns a reference to the bounded list identified by ProductDisseminationIngressSystemID.
    *
    * @return A reference to the bounded list identified by ProductDisseminationIngressSystemID.
    */
  virtual uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& getProductDisseminationIngressSystemID() = 0;

  /** Sets the bounded list identified by ProductDisseminationIngressSystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setProductDisseminationIngressSystemID(const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& value) = 0;

  /** Returns a const reference to the bounded list identified by ProductDisseminationEgressDestinationID.
    *
    * @return A const reference to the bounded list identified by ProductDisseminationEgressDestinationID.
    */
  virtual const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& getProductDisseminationEgressDestinationID() const = 0;

  /** Returns a reference to the bounded list identified by ProductDisseminationEgressDestinationID.
    *
    * @return A reference to the bounded list identified by ProductDisseminationEgressDestinationID.
    */
  virtual uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& getProductDisseminationEgressDestinationID() = 0;

  /** Sets the bounded list identified by ProductDisseminationEgressDestinationID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setProductDisseminationEgressDestinationID(const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GatewaySpecificSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GatewaySpecificSettings.
    */
  virtual const uci::type::GatewayConfigurationPET& getGatewaySpecificSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * GatewaySpecificSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      GatewaySpecificSettings.
    */
  virtual uci::type::GatewayConfigurationPET& getGatewaySpecificSettings() = 0;

  /** Sets the complex content identified by GatewaySpecificSettings to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GatewaySpecificSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& setGatewaySpecificSettings(const uci::type::GatewayConfigurationPET& value) = 0;

  /** Returns whether the Element identified by GatewaySpecificSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GatewaySpecificSettings is enabled or not.
    */
  virtual bool hasGatewaySpecificSettings() const = 0;

  /** Enables the Element identified by GatewaySpecificSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      GatewaySpecificSettings.
    */
  virtual uci::type::GatewayConfigurationPET& enableGatewaySpecificSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GatewaySpecificSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlannedGatewayConfigurationType& clearGatewaySpecificSettings() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlannedGatewayConfigurationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlannedGatewayConfigurationType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlannedGatewayConfigurationType to copy from.
    */
  PlannedGatewayConfigurationType(const PlannedGatewayConfigurationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlannedGatewayConfigurationType to the contents of the
    * PlannedGatewayConfigurationType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PlannedGatewayConfigurationType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this PlannedGatewayConfigurationType.
    * @return A reference to this PlannedGatewayConfigurationType.
    */
  PlannedGatewayConfigurationType& operator=(const PlannedGatewayConfigurationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANNEDGATEWAYCONFIGURATIONTYPE_H

