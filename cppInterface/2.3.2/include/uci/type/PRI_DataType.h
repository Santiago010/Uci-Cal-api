/** @file PRI_DataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PRI_DATATYPE_H
#define UCI_TYPE_PRI_DATATYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DurationType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/PRI_AgilePatternEnum.h"
#include "uci/type/PRI_DataBaseType.h"
#include "uci/type/PRI_MeasurementEnum.h"
#include "uci/type/PRI_SwitchingPatternEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PRI_DataType : public virtual PRI_DataBaseType {
public:

  /** This method constructs a new PRI_DataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PRI_DataType.
    */
  static UCI_EXPORT PRI_DataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PRI_DataType initializing the data accessed by the new PRI_DataType using the data
    * accessed by the specified PRI_DataType (cloning).
    *
    * @param accessor The PRI_DataType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created PRI_DataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PRI_DataType.
    */
  static UCI_EXPORT PRI_DataType& create(const PRI_DataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PRI_DataType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PRI_DataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PRI_DataType& accessor);

  /** Returns this accessor's type constant, i.e. pRI_DataType.
    *
    * @return This accessor's type constant, i.e. pRI_DataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pRI_DataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PRI_DataType.
    *
    * @return The version that was initialized from the uci:version attribute of PRI_DataType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PRI_DataType& accessor) = 0;

  /** Indicates a measured PRI pattern interval. The intervals are generally reported in the order they are measured, in
    * order to preserve the pattern sequence. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DurationType, uci::type::accessorType::durationType> PRI_PatternInterval;

  /** Returns a const reference to the value of the enumeration identified by PRI_SwitchingPattern.
    *
    * @return A const reference to the value of the enumeration identified by PRI_SwitchingPattern.
    */
  virtual const uci::type::PRI_SwitchingPatternEnum& getPRI_SwitchingPattern() const = 0;

  /** Returns a reference to the value of the enumeration identified by PRI_SwitchingPattern.
    *
    * @return A reference to the value of the enumeration identified by PRI_SwitchingPattern.
    */
  virtual uci::type::PRI_SwitchingPatternEnum& getPRI_SwitchingPattern() = 0;

  /** Sets the value of the enumeration identified by PRI_SwitchingPattern.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_SwitchingPattern(const uci::type::PRI_SwitchingPatternEnum& value) = 0;

  /** Sets the value of the enumeration identified by PRI_SwitchingPattern.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_SwitchingPattern(uci::type::PRI_SwitchingPatternEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PRI_SwitchingPattern exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_SwitchingPattern is enabled or not.
    */
  virtual bool hasPRI_SwitchingPattern() const = 0;

  /** Enables the Element identified by PRI_SwitchingPattern.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PRI_SwitchingPattern.
    */
  virtual uci::type::PRI_SwitchingPatternEnum& enablePRI_SwitchingPattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PRI_SwitchingPattern.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_SwitchingPattern() = 0;

  /** Returns a const reference to the value of the enumeration identified by PRI_AgilePattern.
    *
    * @return A const reference to the value of the enumeration identified by PRI_AgilePattern.
    */
  virtual const uci::type::PRI_AgilePatternEnum& getPRI_AgilePattern() const = 0;

  /** Returns a reference to the value of the enumeration identified by PRI_AgilePattern.
    *
    * @return A reference to the value of the enumeration identified by PRI_AgilePattern.
    */
  virtual uci::type::PRI_AgilePatternEnum& getPRI_AgilePattern() = 0;

  /** Sets the value of the enumeration identified by PRI_AgilePattern.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_AgilePattern(const uci::type::PRI_AgilePatternEnum& value) = 0;

  /** Sets the value of the enumeration identified by PRI_AgilePattern.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_AgilePattern(uci::type::PRI_AgilePatternEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PRI_AgilePattern exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_AgilePattern is enabled or not.
    */
  virtual bool hasPRI_AgilePattern() const = 0;

  /** Enables the Element identified by PRI_AgilePattern.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PRI_AgilePattern.
    */
  virtual uci::type::PRI_AgilePatternEnum& enablePRI_AgilePattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PRI_AgilePattern.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_AgilePattern() = 0;

  /** Returns a const reference to the value of the enumeration identified by PRI_Measurement.
    *
    * @return A const reference to the value of the enumeration identified by PRI_Measurement.
    */
  virtual const uci::type::PRI_MeasurementEnum& getPRI_Measurement() const = 0;

  /** Returns a reference to the value of the enumeration identified by PRI_Measurement.
    *
    * @return A reference to the value of the enumeration identified by PRI_Measurement.
    */
  virtual uci::type::PRI_MeasurementEnum& getPRI_Measurement() = 0;

  /** Sets the value of the enumeration identified by PRI_Measurement.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_Measurement(const uci::type::PRI_MeasurementEnum& value) = 0;

  /** Sets the value of the enumeration identified by PRI_Measurement.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_Measurement(uci::type::PRI_MeasurementEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PRI_Measurement exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_Measurement is enabled or not.
    */
  virtual bool hasPRI_Measurement() const = 0;

  /** Enables the Element identified by PRI_Measurement.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PRI_Measurement.
    */
  virtual uci::type::PRI_MeasurementEnum& enablePRI_Measurement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PRI_Measurement.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_Measurement() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_JitterDeviation.
    *
    * @return The value of the simple primitive data type identified by PRI_JitterDeviation.
    */
  virtual uci::type::DurationTypeValue getPRI_JitterDeviation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_JitterDeviation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_JitterDeviation(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PRI_JitterDeviation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_JitterDeviation is enabled or not.
    */
  virtual bool hasPRI_JitterDeviation() const = 0;

  /** Clears (disabled) the Element identified by PRI_JitterDeviation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_JitterDeviation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_PulseGroupsPresent.
    *
    * @return The value of the simple primitive data type identified by PRI_PulseGroupsPresent.
    */
  virtual xs::Boolean getPRI_PulseGroupsPresent() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_PulseGroupsPresent.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_PulseGroupsPresent(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PRI_PulseGroupsPresent exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_PulseGroupsPresent is enabled or not.
    */
  virtual bool hasPRI_PulseGroupsPresent() const = 0;

  /** Clears (disabled) the Element identified by PRI_PulseGroupsPresent.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_PulseGroupsPresent() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_Quantized.
    *
    * @return The value of the simple primitive data type identified by PRI_Quantized.
    */
  virtual xs::Boolean getPRI_Quantized() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_Quantized.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_Quantized(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PRI_Quantized exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_Quantized is enabled or not.
    */
  virtual bool hasPRI_Quantized() const = 0;

  /** Clears (disabled) the Element identified by PRI_Quantized.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_Quantized() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_QuantizationPeriod.
    *
    * @return The value of the simple primitive data type identified by PRI_QuantizationPeriod.
    */
  virtual uci::type::DurationTypeValue getPRI_QuantizationPeriod() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_QuantizationPeriod.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_QuantizationPeriod(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PRI_QuantizationPeriod exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_QuantizationPeriod is enabled or not.
    */
  virtual bool hasPRI_QuantizationPeriod() const = 0;

  /** Clears (disabled) the Element identified by PRI_QuantizationPeriod.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_QuantizationPeriod() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_Squirrelly.
    *
    * @return The value of the simple primitive data type identified by PRI_Squirrelly.
    */
  virtual xs::Boolean getPRI_Squirrelly() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_Squirrelly.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_Squirrelly(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PRI_Squirrelly exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_Squirrelly is enabled or not.
    */
  virtual bool hasPRI_Squirrelly() const = 0;

  /** Clears (disabled) the Element identified by PRI_Squirrelly.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_Squirrelly() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_MissingPulse.
    *
    * @return The value of the simple primitive data type identified by PRI_MissingPulse.
    */
  virtual xs::Boolean getPRI_MissingPulse() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_MissingPulse.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_MissingPulse(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PRI_MissingPulse exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_MissingPulse is enabled or not.
    */
  virtual bool hasPRI_MissingPulse() const = 0;

  /** Clears (disabled) the Element identified by PRI_MissingPulse.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_MissingPulse() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_PatternPeriod.
    *
    * @return The value of the simple primitive data type identified by PRI_PatternPeriod.
    */
  virtual uci::type::DurationTypeValue getPRI_PatternPeriod() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_PatternPeriod.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_PatternPeriod(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PRI_PatternPeriod exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_PatternPeriod is enabled or not.
    */
  virtual bool hasPRI_PatternPeriod() const = 0;

  /** Clears (disabled) the Element identified by PRI_PatternPeriod.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_PatternPeriod() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_PatternLevels.
    *
    * @return The value of the simple primitive data type identified by PRI_PatternLevels.
    */
  virtual xs::UnsignedInt getPRI_PatternLevels() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_PatternLevels.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_PatternLevels(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by PRI_PatternLevels exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_PatternLevels is enabled or not.
    */
  virtual bool hasPRI_PatternLevels() const = 0;

  /** Clears (disabled) the Element identified by PRI_PatternLevels.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_PatternLevels() = 0;

  /** Returns a const reference to the bounded list identified by PRI_PatternInterval.
    *
    * @return A const reference to the bounded list identified by PRI_PatternInterval.
    */
  virtual const uci::type::PRI_DataType::PRI_PatternInterval& getPRI_PatternInterval() const = 0;

  /** Returns a reference to the bounded list identified by PRI_PatternInterval.
    *
    * @return A reference to the bounded list identified by PRI_PatternInterval.
    */
  virtual uci::type::PRI_DataType::PRI_PatternInterval& getPRI_PatternInterval() = 0;

  /** Sets the bounded list identified by PRI_PatternInterval.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_PatternInterval(const uci::type::PRI_DataType::PRI_PatternInterval& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by PRI_JitterDetected.
    *
    * @return A const reference to the accessor that provides access to the string identified by PRI_JitterDetected.
    */
  virtual const uci::type::EmptyType& getPRI_JitterDetected() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by PRI_JitterDetected.
    *
    * @return A reference to the accessor that provides access to the string identified by PRI_JitterDetected.
    */
  virtual uci::type::EmptyType& getPRI_JitterDetected() = 0;

  /** Sets the string identified by PRI_JitterDetected to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by PRI_JitterDetected.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_JitterDetected(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by PRI_JitterDetected to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_JitterDetected(const std::string& value) = 0;

  /** Sets the string identified by PRI_JitterDetected to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& setPRI_JitterDetected(const char* value) = 0;

  /** Returns whether the Element identified by PRI_JitterDetected exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_JitterDetected is enabled or not.
    */
  virtual bool hasPRI_JitterDetected() const = 0;

  /** Enables the Element identified by PRI_JitterDetected.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by PRI_JitterDetected.
    */
  virtual uci::type::EmptyType& enablePRI_JitterDetected(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PRI_JitterDetected.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PRI_DataType& clearPRI_JitterDetected() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PRI_DataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PRI_DataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PRI_DataType to copy from.
    */
  PRI_DataType(const PRI_DataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PRI_DataType to the contents of the PRI_DataType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PRI_DataType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this PRI_DataType.
    * @return A reference to this PRI_DataType.
    */
  PRI_DataType& operator=(const PRI_DataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PRI_DATATYPE_H

