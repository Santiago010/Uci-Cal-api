/** @file CS_CapabilitiesType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CS_CAPABILITIESTYPE_H
#define UCI_TYPE_CS_CAPABILITIESTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AngleHalfType.h"
#include "uci/type/AngleRateType.h"
#include "uci/type/CS_ObscuraDataType.h"
#include "uci/type/CS_SensorDataType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/PolarizationEnum.h"
#include "uci/type/PowerType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type represents sub-capabilities for a CounterSpace capability. These typically represent individual receive and
  * transmit capabilities.
  */
class CS_CapabilitiesType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CS_CapabilitiesType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_CapabilitiesType.
    */
  static UCI_EXPORT CS_CapabilitiesType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CS_CapabilitiesType initializing the data accessed by the new CS_CapabilitiesType using
    * the data accessed by the specified CS_CapabilitiesType (cloning).
    *
    * @param accessor The CS_CapabilitiesType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CS_CapabilitiesType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_CapabilitiesType.
    */
  static UCI_EXPORT CS_CapabilitiesType& create(const CS_CapabilitiesType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CS_CapabilitiesType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CS_CapabilitiesType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CS_CapabilitiesType& accessor);

  /** Returns this accessor's type constant, i.e. cS_CapabilitiesType.
    *
    * @return This accessor's type constant, i.e. cS_CapabilitiesType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cS_CapabilitiesType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CS_CapabilitiesType.
    *
    * @return The version that was initialized from the uci:version attribute of CS_CapabilitiesType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CS_CapabilitiesType& accessor) = 0;

  /** The modulations supported by this sub-capability. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 62]
    */
  typedef uci::base::BoundedList<uci::type::ModulationEnum, uci::type::accessorType::modulationEnum> Modulation;

  /** The polarizations supported by this sub-capability. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 12]
    */
  typedef uci::base::BoundedList<uci::type::PolarizationEnum, uci::type::accessorType::polarizationEnum> Polarization;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubCapabilityName.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubCapabilityName.
    */
  virtual const uci::type::ForeignKeyType& getSubCapabilityName() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubCapabilityName.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityName.
    */
  virtual uci::type::ForeignKeyType& getSubCapabilityName() = 0;

  /** Sets the complex content identified by SubCapabilityName to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubCapabilityName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setSubCapabilityName(const uci::type::ForeignKeyType& value) = 0;

  /** Enables the Element identified by SubCapabilityName.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityName.
    */
  virtual uci::type::ForeignKeyType& enableSubCapabilityName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Dependency.
    *
    * @return The value of the simple primitive data type identified by Dependency.
    */
  virtual xs::Int getDependency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Dependency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setDependency(xs::Int value) = 0;

  /** Returns whether the Element identified by Dependency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Dependency is enabled or not.
    */
  virtual bool hasDependency() const = 0;

  /** Clears (disabled) the Element identified by Dependency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearDependency() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TxFrequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TxFrequency.
    */
  virtual const uci::type::FrequencyRangeType& getTxFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TxFrequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TxFrequency.
    */
  virtual uci::type::FrequencyRangeType& getTxFrequency() = 0;

  /** Sets the complex content identified by TxFrequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TxFrequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setTxFrequency(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns whether the Element identified by TxFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TxFrequency is enabled or not.
    */
  virtual bool hasTxFrequency() const = 0;

  /** Enables the Element identified by TxFrequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TxFrequency.
    */
  virtual uci::type::FrequencyRangeType& enableTxFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TxFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearTxFrequency() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TxBandwidth.
    *
    * @return The value of the simple primitive data type identified by TxBandwidth.
    */
  virtual uci::type::FrequencyTypeValue getTxBandwidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TxBandwidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setTxBandwidth(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by TxBandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TxBandwidth is enabled or not.
    */
  virtual bool hasTxBandwidth() const = 0;

  /** Clears (disabled) the Element identified by TxBandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearTxBandwidth() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Power.
    *
    * @return The value of the simple primitive data type identified by Power.
    */
  virtual uci::type::PowerTypeValue getPower() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Power.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setPower(uci::type::PowerTypeValue value) = 0;

  /** Returns whether the Element identified by Power exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Power is enabled or not.
    */
  virtual bool hasPower() const = 0;

  /** Clears (disabled) the Element identified by Power.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearPower() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RxFrequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RxFrequency.
    */
  virtual const uci::type::FrequencyRangeType& getRxFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RxFrequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RxFrequency.
    */
  virtual uci::type::FrequencyRangeType& getRxFrequency() = 0;

  /** Sets the complex content identified by RxFrequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RxFrequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setRxFrequency(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns whether the Element identified by RxFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RxFrequency is enabled or not.
    */
  virtual bool hasRxFrequency() const = 0;

  /** Enables the Element identified by RxFrequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RxFrequency.
    */
  virtual uci::type::FrequencyRangeType& enableRxFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RxFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearRxFrequency() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RxBandwidth.
    *
    * @return The value of the simple primitive data type identified by RxBandwidth.
    */
  virtual uci::type::FrequencyTypeValue getRxBandwidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RxBandwidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setRxBandwidth(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by RxBandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RxBandwidth is enabled or not.
    */
  virtual bool hasRxBandwidth() const = 0;

  /** Clears (disabled) the Element identified by RxBandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearRxBandwidth() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AzSlewRate.
    *
    * @return The value of the simple primitive data type identified by AzSlewRate.
    */
  virtual uci::type::AngleRateTypeValue getAzSlewRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AzSlewRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setAzSlewRate(uci::type::AngleRateTypeValue value) = 0;

  /** Returns whether the Element identified by AzSlewRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AzSlewRate is enabled or not.
    */
  virtual bool hasAzSlewRate() const = 0;

  /** Clears (disabled) the Element identified by AzSlewRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearAzSlewRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ElSlewRate.
    *
    * @return The value of the simple primitive data type identified by ElSlewRate.
    */
  virtual uci::type::AngleRateTypeValue getElSlewRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ElSlewRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setElSlewRate(uci::type::AngleRateTypeValue value) = 0;

  /** Returns whether the Element identified by ElSlewRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ElSlewRate is enabled or not.
    */
  virtual bool hasElSlewRate() const = 0;

  /** Clears (disabled) the Element identified by ElSlewRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearElSlewRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinElevation.
    *
    * @return The value of the simple primitive data type identified by MinElevation.
    */
  virtual uci::type::AngleHalfTypeValue getMinElevation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinElevation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setMinElevation(uci::type::AngleHalfTypeValue value) = 0;

  /** Returns whether the Element identified by MinElevation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinElevation is enabled or not.
    */
  virtual bool hasMinElevation() const = 0;

  /** Clears (disabled) the Element identified by MinElevation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearMinElevation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MaxElevation.
    *
    * @return The value of the simple primitive data type identified by MaxElevation.
    */
  virtual uci::type::AngleHalfTypeValue getMaxElevation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MaxElevation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setMaxElevation(uci::type::AngleHalfTypeValue value) = 0;

  /** Returns whether the Element identified by MaxElevation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MaxElevation is enabled or not.
    */
  virtual bool hasMaxElevation() const = 0;

  /** Clears (disabled) the Element identified by MaxElevation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearMaxElevation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Capacity.
    *
    * @return The value of the simple primitive data type identified by Capacity.
    */
  virtual xs::UnsignedInt getCapacity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Capacity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setCapacity(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Capacity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Capacity is enabled or not.
    */
  virtual bool hasCapacity() const = 0;

  /** Clears (disabled) the Element identified by Capacity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearCapacity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Location.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual const uci::type::Point3D_Type& getLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Location.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual uci::type::Point3D_Type& getLocation() = 0;

  /** Sets the complex content identified by Location to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Location.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setLocation(const uci::type::Point3D_Type& value) = 0;

  /** Returns whether the Element identified by Location exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Location is enabled or not.
    */
  virtual bool hasLocation() const = 0;

  /** Enables the Element identified by Location.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual uci::type::Point3D_Type& enableLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Location.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearLocation() = 0;

  /** Returns a const reference to the bounded list identified by Modulation.
    *
    * @return A const reference to the bounded list identified by Modulation.
    */
  virtual const uci::type::CS_CapabilitiesType::Modulation& getModulation() const = 0;

  /** Returns a reference to the bounded list identified by Modulation.
    *
    * @return A reference to the bounded list identified by Modulation.
    */
  virtual uci::type::CS_CapabilitiesType::Modulation& getModulation() = 0;

  /** Sets the bounded list identified by Modulation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setModulation(const uci::type::CS_CapabilitiesType::Modulation& value) = 0;

  /** Returns a const reference to the bounded list identified by Polarization.
    *
    * @return A const reference to the bounded list identified by Polarization.
    */
  virtual const uci::type::CS_CapabilitiesType::Polarization& getPolarization() const = 0;

  /** Returns a reference to the bounded list identified by Polarization.
    *
    * @return A reference to the bounded list identified by Polarization.
    */
  virtual uci::type::CS_CapabilitiesType::Polarization& getPolarization() = 0;

  /** Sets the bounded list identified by Polarization.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setPolarization(const uci::type::CS_CapabilitiesType::Polarization& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ObscuraData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ObscuraData.
    */
  virtual const uci::type::CS_ObscuraDataType& getObscuraData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ObscuraData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ObscuraData.
    */
  virtual uci::type::CS_ObscuraDataType& getObscuraData() = 0;

  /** Sets the complex content identified by ObscuraData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ObscuraData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setObscuraData(const uci::type::CS_ObscuraDataType& value) = 0;

  /** Returns whether the Element identified by ObscuraData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObscuraData is enabled or not.
    */
  virtual bool hasObscuraData() const = 0;

  /** Enables the Element identified by ObscuraData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ObscuraData.
    */
  virtual uci::type::CS_ObscuraDataType& enableObscuraData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ObscuraData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearObscuraData() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SensorData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SensorData.
    */
  virtual const uci::type::CS_SensorDataType& getSensorData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SensorData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SensorData.
    */
  virtual uci::type::CS_SensorDataType& getSensorData() = 0;

  /** Sets the complex content identified by SensorData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SensorData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& setSensorData(const uci::type::CS_SensorDataType& value) = 0;

  /** Returns whether the Element identified by SensorData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SensorData is enabled or not.
    */
  virtual bool hasSensorData() const = 0;

  /** Enables the Element identified by SensorData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SensorData.
    */
  virtual uci::type::CS_SensorDataType& enableSensorData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SensorData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_CapabilitiesType& clearSensorData() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CS_CapabilitiesType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CS_CapabilitiesType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CS_CapabilitiesType to copy from.
    */
  CS_CapabilitiesType(const CS_CapabilitiesType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CS_CapabilitiesType to the contents of the CS_CapabilitiesType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CS_CapabilitiesType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CS_CapabilitiesType.
    * @return A reference to this CS_CapabilitiesType.
    */
  CS_CapabilitiesType& operator=(const CS_CapabilitiesType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CS_CAPABILITIESTYPE_H

