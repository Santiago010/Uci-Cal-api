/** @file TaskResponseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_TASKRESPONSETYPE_H
#define UCI_TYPE_TASKRESPONSETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/AMTI_TaskBaseType.h"
#include "uci/type/AO_TaskBaseType.h"
#include "uci/type/AirSampleTaskBaseType.h"
#include "uci/type/COMINT_TaskBaseType.h"
#include "uci/type/CommRelayTaskBaseType.h"
#include "uci/type/EA_ResponseType.h"
#include "uci/type/ESM_TaskBaseType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/FlightTaskBaseType.h"
#include "uci/type/OrbitChangeTaskBaseType.h"
#include "uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "uci/type/PO_TaskBaseType.h"
#include "uci/type/RefuelTaskBaseType.h"
#include "uci/type/SAR_TaskBaseType.h"
#include "uci/type/SMTI_TaskBaseType.h"
#include "uci/type/StrikeTaskWeaponListType.h"
#include "uci/type/SystemDeploymentTaskBaseType.h"
#include "uci/type/TacticalOrderTaskBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class TaskResponseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new TaskResponseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TaskResponseType.
    */
  static UCI_EXPORT TaskResponseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new TaskResponseType initializing the data accessed by the new TaskResponseType using the
    * data accessed by the specified TaskResponseType (cloning).
    *
    * @param accessor The TaskResponseType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created TaskResponseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TaskResponseType.
    */
  static UCI_EXPORT TaskResponseType& create(const TaskResponseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified TaskResponseType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The TaskResponseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(TaskResponseType& accessor);

  /** Returns this accessor's type constant, i.e. taskResponseType.
    *
    * @return This accessor's type constant, i.e. taskResponseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::taskResponseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of TaskResponseType.
    *
    * @return The version that was initialized from the uci:version attribute of TaskResponseType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const TaskResponseType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum TaskResponseTypeChoice {
    TASKRESPONSETYPE_CHOICE_NONE,
    TASKRESPONSETYPE_CHOICE_AIRSAMPLE,
    TASKRESPONSETYPE_CHOICE_AMTI,
    TASKRESPONSETYPE_CHOICE_AO,
    TASKRESPONSETYPE_CHOICE_CARGODELIVERY,
    TASKRESPONSETYPE_CHOICE_COMINT,
    TASKRESPONSETYPE_CHOICE_COMMRELAY,
    TASKRESPONSETYPE_CHOICE_EA,
    TASKRESPONSETYPE_CHOICE_ESM,
    TASKRESPONSETYPE_CHOICE_FLIGHT,
    TASKRESPONSETYPE_CHOICE_ORBITCHANGE,
    TASKRESPONSETYPE_CHOICE_ORBITALSURVEILLANCE,
    TASKRESPONSETYPE_CHOICE_PO,
    TASKRESPONSETYPE_CHOICE_REFUEL,
    TASKRESPONSETYPE_CHOICE_SAR,
    TASKRESPONSETYPE_CHOICE_SMTI,
    TASKRESPONSETYPE_CHOICE_STRIKE,
    TASKRESPONSETYPE_CHOICE_SYSTEMDEPLOYMENT,
    TASKRESPONSETYPE_CHOICE_TACTICALORDER,
    TASKRESPONSETYPE_CHOICE_WEATHERRADAR
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual TaskResponseTypeChoice getTaskResponseTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getTaskResponseTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setTaskResponseTypeChoiceOrdinal(TaskResponseTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AirSample.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AirSample.
    */
  virtual const uci::type::AirSampleTaskBaseType& getAirSample() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AirSample.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AirSample.
    */
  virtual uci::type::AirSampleTaskBaseType& getAirSample() = 0;

  /** Sets the complex content identified by AirSample to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AirSample.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setAirSample(const uci::type::AirSampleTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AirSample.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AirSample, false otherwise.
    */
  virtual bool isAirSample() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AirSample.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AirSample.
    */
  virtual uci::type::AirSampleTaskBaseType& chooseAirSample(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AMTI.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AMTI.
    */
  virtual const uci::type::AMTI_TaskBaseType& getAMTI() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AMTI.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AMTI.
    */
  virtual uci::type::AMTI_TaskBaseType& getAMTI() = 0;

  /** Sets the complex content identified by AMTI to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AMTI.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setAMTI(const uci::type::AMTI_TaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AMTI, false otherwise.
    */
  virtual bool isAMTI() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AMTI.
    */
  virtual uci::type::AMTI_TaskBaseType& chooseAMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AO.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AO.
    */
  virtual const uci::type::AO_TaskBaseType& getAO() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AO.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AO.
    */
  virtual uci::type::AO_TaskBaseType& getAO() = 0;

  /** Sets the complex content identified by AO to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setAO(const uci::type::AO_TaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AO, false otherwise.
    */
  virtual bool isAO() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AO.
    */
  virtual uci::type::AO_TaskBaseType& chooseAO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CargoDelivery.
    *
    * @return A const reference to the accessor that provides access to the string identified by CargoDelivery.
    */
  virtual const uci::type::EmptyType& getCargoDelivery() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CargoDelivery.
    *
    * @return A reference to the accessor that provides access to the string identified by CargoDelivery.
    */
  virtual uci::type::EmptyType& getCargoDelivery() = 0;

  /** Sets the string identified by CargoDelivery to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CargoDelivery.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setCargoDelivery(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by CargoDelivery to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setCargoDelivery(const std::string& value) = 0;

  /** Sets the string identified by CargoDelivery to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setCargoDelivery(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CargoDelivery.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CargoDelivery, false otherwise.
    */
  virtual bool isCargoDelivery() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CargoDelivery.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by CargoDelivery.
    */
  virtual uci::type::EmptyType& chooseCargoDelivery(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by COMINT.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by COMINT.
    */
  virtual const uci::type::COMINT_TaskBaseType& getCOMINT() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by COMINT.
    *
    * @return A reference to the accessor that provides access to the complex content identified by COMINT.
    */
  virtual uci::type::COMINT_TaskBaseType& getCOMINT() = 0;

  /** Sets the complex content identified by COMINT to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by COMINT.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setCOMINT(const uci::type::COMINT_TaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by COMINT.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by COMINT, false otherwise.
    */
  virtual bool isCOMINT() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by COMINT.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by COMINT.
    */
  virtual uci::type::COMINT_TaskBaseType& chooseCOMINT(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CommRelay.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CommRelay.
    */
  virtual const uci::type::CommRelayTaskBaseType& getCommRelay() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommRelay.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommRelay.
    */
  virtual uci::type::CommRelayTaskBaseType& getCommRelay() = 0;

  /** Sets the complex content identified by CommRelay to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommRelay.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setCommRelay(const uci::type::CommRelayTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommRelay.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommRelay, false otherwise.
    */
  virtual bool isCommRelay() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CommRelay.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommRelay.
    */
  virtual uci::type::CommRelayTaskBaseType& chooseCommRelay(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EA.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EA.
    */
  virtual const uci::type::EA_ResponseType& getEA() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EA.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EA.
    */
  virtual uci::type::EA_ResponseType& getEA() = 0;

  /** Sets the complex content identified by EA to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EA.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setEA(const uci::type::EA_ResponseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EA.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EA, false otherwise.
    */
  virtual bool isEA() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by EA.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EA.
    */
  virtual uci::type::EA_ResponseType& chooseEA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ESM.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ESM.
    */
  virtual const uci::type::ESM_TaskBaseType& getESM() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ESM.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ESM.
    */
  virtual uci::type::ESM_TaskBaseType& getESM() = 0;

  /** Sets the complex content identified by ESM to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ESM.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setESM(const uci::type::ESM_TaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ESM.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ESM, false otherwise.
    */
  virtual bool isESM() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ESM.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ESM.
    */
  virtual uci::type::ESM_TaskBaseType& chooseESM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Flight.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Flight.
    */
  virtual const uci::type::FlightTaskBaseType& getFlight() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Flight.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Flight.
    */
  virtual uci::type::FlightTaskBaseType& getFlight() = 0;

  /** Sets the complex content identified by Flight to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Flight.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setFlight(const uci::type::FlightTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Flight.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Flight, false otherwise.
    */
  virtual bool isFlight() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Flight.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Flight.
    */
  virtual uci::type::FlightTaskBaseType& chooseFlight(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitChange.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitChange.
    */
  virtual const uci::type::OrbitChangeTaskBaseType& getOrbitChange() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitChange.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitChange.
    */
  virtual uci::type::OrbitChangeTaskBaseType& getOrbitChange() = 0;

  /** Sets the complex content identified by OrbitChange to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitChange.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setOrbitChange(const uci::type::OrbitChangeTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitChange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitChange, false otherwise.
    */
  virtual bool isOrbitChange() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitChange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitChange.
    */
  virtual uci::type::OrbitChangeTaskBaseType& chooseOrbitChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitalSurveillance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitalSurveillance.
    */
  virtual const uci::type::OrbitalSurveillanceTaskBaseType& getOrbitalSurveillance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitalSurveillance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalSurveillance.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& getOrbitalSurveillance() = 0;

  /** Sets the complex content identified by OrbitalSurveillance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitalSurveillance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setOrbitalSurveillance(const uci::type::OrbitalSurveillanceTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillance, false
    *      otherwise.
    */
  virtual bool isOrbitalSurveillance() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitalSurveillance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitalSurveillance.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& chooseOrbitalSurveillance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PO.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PO.
    */
  virtual const uci::type::PO_TaskBaseType& getPO() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PO.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PO.
    */
  virtual uci::type::PO_TaskBaseType& getPO() = 0;

  /** Sets the complex content identified by PO to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setPO(const uci::type::PO_TaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PO, false otherwise.
    */
  virtual bool isPO() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by PO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PO.
    */
  virtual uci::type::PO_TaskBaseType& choosePO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Refuel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Refuel.
    */
  virtual const uci::type::RefuelTaskBaseType& getRefuel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Refuel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Refuel.
    */
  virtual uci::type::RefuelTaskBaseType& getRefuel() = 0;

  /** Sets the complex content identified by Refuel to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Refuel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setRefuel(const uci::type::RefuelTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Refuel.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Refuel, false otherwise.
    */
  virtual bool isRefuel() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Refuel.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Refuel.
    */
  virtual uci::type::RefuelTaskBaseType& chooseRefuel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SAR.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SAR.
    */
  virtual const uci::type::SAR_TaskBaseType& getSAR() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SAR.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SAR.
    */
  virtual uci::type::SAR_TaskBaseType& getSAR() = 0;

  /** Sets the complex content identified by SAR to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SAR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setSAR(const uci::type::SAR_TaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SAR.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SAR, false otherwise.
    */
  virtual bool isSAR() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SAR.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SAR.
    */
  virtual uci::type::SAR_TaskBaseType& chooseSAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SMTI.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SMTI.
    */
  virtual const uci::type::SMTI_TaskBaseType& getSMTI() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SMTI.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SMTI.
    */
  virtual uci::type::SMTI_TaskBaseType& getSMTI() = 0;

  /** Sets the complex content identified by SMTI to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SMTI.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setSMTI(const uci::type::SMTI_TaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SMTI, false otherwise.
    */
  virtual bool isSMTI() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SMTI.
    */
  virtual uci::type::SMTI_TaskBaseType& chooseSMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Strike.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Strike.
    */
  virtual const uci::type::StrikeTaskWeaponListType& getStrike() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Strike.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Strike.
    */
  virtual uci::type::StrikeTaskWeaponListType& getStrike() = 0;

  /** Sets the complex content identified by Strike to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Strike.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setStrike(const uci::type::StrikeTaskWeaponListType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Strike.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Strike, false otherwise.
    */
  virtual bool isStrike() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Strike.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Strike.
    */
  virtual uci::type::StrikeTaskWeaponListType& chooseStrike(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemDeployment.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemDeployment.
    */
  virtual const uci::type::SystemDeploymentTaskBaseType& getSystemDeployment() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemDeployment.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemDeployment.
    */
  virtual uci::type::SystemDeploymentTaskBaseType& getSystemDeployment() = 0;

  /** Sets the complex content identified by SystemDeployment to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemDeployment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setSystemDeployment(const uci::type::SystemDeploymentTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SystemDeployment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SystemDeployment, false
    *      otherwise.
    */
  virtual bool isSystemDeployment() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SystemDeployment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SystemDeployment.
    */
  virtual uci::type::SystemDeploymentTaskBaseType& chooseSystemDeployment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TacticalOrder.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TacticalOrder.
    */
  virtual const uci::type::TacticalOrderTaskBaseType& getTacticalOrder() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TacticalOrder.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TacticalOrder.
    */
  virtual uci::type::TacticalOrderTaskBaseType& getTacticalOrder() = 0;

  /** Sets the complex content identified by TacticalOrder to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TacticalOrder.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setTacticalOrder(const uci::type::TacticalOrderTaskBaseType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TacticalOrder.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TacticalOrder, false otherwise.
    */
  virtual bool isTacticalOrder() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by TacticalOrder.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TacticalOrder.
    */
  virtual uci::type::TacticalOrderTaskBaseType& chooseTacticalOrder(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by WeatherRadar.
    *
    * @return A const reference to the accessor that provides access to the string identified by WeatherRadar.
    */
  virtual const uci::type::EmptyType& getWeatherRadar() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by WeatherRadar.
    *
    * @return A reference to the accessor that provides access to the string identified by WeatherRadar.
    */
  virtual uci::type::EmptyType& getWeatherRadar() = 0;

  /** Sets the string identified by WeatherRadar to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by WeatherRadar.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setWeatherRadar(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by WeatherRadar to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setWeatherRadar(const std::string& value) = 0;

  /** Sets the string identified by WeatherRadar to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskResponseType& setWeatherRadar(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeatherRadar.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeatherRadar, false otherwise.
    */
  virtual bool isWeatherRadar() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherRadar.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by WeatherRadar.
    */
  virtual uci::type::EmptyType& chooseWeatherRadar(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  TaskResponseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~TaskResponseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The TaskResponseType to copy from.
    */
  TaskResponseType(const TaskResponseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this TaskResponseType to the contents of the TaskResponseType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The TaskResponseType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this TaskResponseType.
    * @return A reference to this TaskResponseType.
    */
  TaskResponseType& operator=(const TaskResponseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_TASKRESPONSETYPE_H

