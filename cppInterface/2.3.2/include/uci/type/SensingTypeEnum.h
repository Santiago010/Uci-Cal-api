/** @file SensingTypeEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:09 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SENSINGTYPEENUM_H
#define UCI_TYPE_SENSINGTYPEENUM_H

#include <map>
#include <sstream>

#include "../base/Accessor.h"
#include "../base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** An enumeration specifying types of sensing used to characterize the environment via observation, measurement,
  * collection or similar means.
  */
class SensingTypeEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Measurement, collection or other sensing of sound levels. */
    UCI_ACOUSTIC,

    /** Sensing of air to determine the presence or characteristics of gases, molecules or other materials in it. */
    UCI_AIR_SAMPLE,

    /** Sensing to determine the presence or characteristics of biological materials. */
    UCI_BIOLOGICAL,

    /** Sensing to determine the presence or characteristics of chemical materials. */
    UCI_CHEMICAL,

    /** Sensing to determine the presence or characteristics of aircraft contrails. */
    UCI_CONTRAIL,

    /** Measurement, collection or other sensing of optical or infrared emissions or reflections. Sibling enumerations
      * provide more specific forms of EO/IR sensing; use them when applicable.
      */
    UCI_EOIR,

    /** Measurement, collection or other sensing of optical or infrared emissions or reflections for the purpose of
      * controlling a weapon via a datalink or other communications channel.
      */
    UCI_EOIR_FIRE_CONTROL,

    /** Measurement, collection or other sensing of optical or infrared emissions or reflections for the purpose of creating
      * imagery.
      */
    UCI_EOIR_IMAGING,

    /** Use of a laser or other active optical or infrared device to illuminate a target for activities such as sensor
      * pointing or weapon guidance via a seeker on the weapon or point. Targeting can be similar to fire control depending
      * on the weapon type.
      */
    UCI_EOIR_TARGETING,

    /** Measurement, collection or other sensing of optical or infrared emissions or reflections for the purpose of
      * determining the location of an object.
      */
    UCI_EOIR_TRACKING,

    /** Measurement, collection or other sensing of optical or infrared emissions or reflections for the purpose of creating
      * video.
      */
    UCI_EOIR_VIDEO,

    /** Observation via human eyesight. */
    UCI_EYESIGHT,

    /** Geospatial intelligence (GEOINT) is intelligence about the human activity on earth derived from the exploitation and
      * analysis of imagery and geospatial information that describes, assesses, and visually depicts physical features and
      * geographically referenced activities on the Earth.
      */
    UCI_GEOINT,

    /** Human intelligence (HUMINT) is intelligence gathered by means of interpersonal contact, as opposed to the more
      * technical intelligence gathering disciplines such as signals intelligence, imagery intelligence and measurement and
      * signature intelligence.
      */
    UCI_HUMINT,

    /** Imagery intelligence (IMINT) is an intelligence gathering discipline wherein imagery is analyzed to identify
      * information of intelligence value.
      */
    UCI_IMINT,

    /** Detection or measurement of an object based on the object's effect on the local electromagnetic field. */
    UCI_MAGNETIC_ANOMALY,

    /** Measurement and signature intelligence (MASINT) is a technical branch of intelligence gathering, which serves to
      * detect, track, identify or describe the distinctive characteristics of fixed or dynamic target sources.
      */
    UCI_MASINT,

    /** Sensing to detect nuclear explosions, nuclear materials or other characteristics of nuclear weapons. */
    UCI_NUCLEAR,

    /** Indicates another type of sensing. Use of this enumerate should avoided or at least minimized. If used, it should
      * only be used temporarily while proposing the addition of new well named enumerate(s) to the standard.
      */
    UCI_OTHER,

    /** Measurement, collection or other sensing of radar emissions or reflections. Radar uses radio waves to determine the
      * range, angle, or velocity of objects. Sibling enumerations provide more specific forms of radar sensing; use them
      * when applicable.
      */
    UCI_RADAR,

    /** Measurement, collection or other sensing of radar emissions or reflections for the purpose of controlling a weapon
      * via a datalink or other communications channel.
      */
    UCI_RADAR_FIRE_CONTROL,

    /** Measurement, collection or other sensing of radar emissions or reflections for the purpose of creating imagery. */
    UCI_RADAR_IMAGING,

    /** Use of a radar to determine the kinematics of a target for activities such as sensor pointing or developing weapon
      * impact coordinates. Targeting can be similar to fire control depending on the weapon type.
      */
    UCI_RADAR_TARGETING,

    /** Measurement, collection or other sensing of radar emissions or reflections for the purpose of determining the
      * kinematics of one or multiple targets.
      */
    UCI_RADAR_TRACKING,

    /** Measurement, collection or other sensing of radar emissions or reflections for the purpose of characterizing weather. */
    UCI_RADAR_WEATHER,

    /** Sensing, such as a geiger counter, to determine the presence or characteristics of radiological materials. */
    UCI_RADIOLOGICAL,

    /** Detection or measurement of movement of the earth or objects on the earth due to natural activities or the movement
      * of other objects.
      */
    UCI_SEISMIC_VIBRATION,

    /** Signals intelligence (SIGINT) is intelligence-gathering by interception of signals. Sibling enumerations provide more
      * specific forms of SIGINT; use them when applicable.
      */
    UCI_SIGINT,

    /** Electronic signals intelligence (ELINT) is intelligence-gathering by interception of signals used for communications
      * including telephone conversations, text messages and various types of online interactions.
      */
    UCI_SIGINT_COMINT,

    /** Electronic signals intelligence (ELINT) is intelligence-gathering by interception of signals other than those used
      * for communications.
      */
    UCI_SIGINT_ELINT,

    /** Electronic warfare (EW) is any action involving the use of the electromagnetic spectrum (EM spectrum) or directed
      * energy to control the spectrum, attack an enemy, or impede enemy assaults.
      */
    UCI_SIGINT_EW,

    /** Tactical EW supporting electronic attack. */
    UCI_SIGINT_EW_ESM,

    /** Intelligence from the interception of foreign electromagnetic emissions associated with the testing and operational
      * deployment of foreign aerospace, surface, and subsurface systems.
      */
    UCI_SIGINT_FISINT,

    /** Detection or measurement of sound propagation to detect objects on or under the surface of the water, such as other
      * vessels.
      */
    UCI_SONAR,

    /** Device that measures the temperature of its environment and converts the input data into electronic data to record,
      * monitor, or signal temperature changes.
      */
    UCI_TEMPERATURE,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. sensingTypeEnum.
    *
    * @return This accessor's type constant, i.e. sensingTypeEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sensingTypeEnum;
  }

  /** The assignment operator. Sets the contents of this SensingTypeEnum to the contents of the SensingTypeEnum on the
    * right hand side (rhs) of the assignment operator.
    *
    * @param rhs The SensingTypeEnum on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this SensingTypeEnum.
    * @return A reference to this SensingTypeEnum.
    */
  SensingTypeEnum& operator=(const SensingTypeEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this SensingTypeEnum enumeration to the EnumerationItem on the right
    * hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this SensingTypeEnum enumeration.
    * @return A reference to this SensingTypeEnum enumeration.
    */
  SensingTypeEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this SensingTypeEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this SensingTypeEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this SensingTypeEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this SensingTypeEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this SensingTypeEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this SensingTypeEnum enumeration.
    *
    * @return The number of items in this SensingTypeEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 35;
  }

  /** Returns whether this SensingTypeEnum enumeration is valid or not. A SensingTypeEnum enumeration is valid if its value
    * is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this SensingTypeEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the SensingTypeEnum enumeration on the right hand side of the == operator is equal to the
    * value as this SensingTypeEnum enumeration.
    *
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of this SensingTypeEnum
    *      enumeration.
    * @return True if the value of the specified SensingTypeEnum enumeration (rhs) is equal to the value of this
    *      SensingTypeEnum enumeration, false otherwise.
    */
  bool operator==(const SensingTypeEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the SensingTypeEnum enumeration on the right hand side of the != operator is not equal to
    * the value as this SensingTypeEnum enumeration.
    *
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of this SensingTypeEnum
    *      enumeration.
    * @return True if the value of the specified SensingTypeEnum enumeration (rhs) is not equal to the value of this
    *      SensingTypeEnum enumeration, false otherwise.
    */
  bool operator!=(const SensingTypeEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the SensingTypeEnum enumeration on the right hand side of the < operator is less than the
    * value as this SensingTypeEnum enumeration.
    *
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of this SensingTypeEnum
    *      enumeration.
    * @return True if the value of the specified SensingTypeEnum enumeration (rhs) is less than the value of this
    *      SensingTypeEnum enumeration, false otherwise.
    */
  bool operator<(const SensingTypeEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the SensingTypeEnum enumeration on the right hand side of the <= operator is less than or
    * equal to the value as this SensingTypeEnum enumeration.
    *
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of this SensingTypeEnum
    *      enumeration.
    * @return True if the value of the specified SensingTypeEnum enumeration (rhs) is less than or equal to the value of
    *      this SensingTypeEnum enumeration, false otherwise.
    */
  bool operator<=(const SensingTypeEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the SensingTypeEnum enumeration on the right hand side of the > operator is greater than
    * the value as this SensingTypeEnum enumeration.
    *
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of this SensingTypeEnum
    *      enumeration.
    * @return True if the value of the specified SensingTypeEnum enumeration (rhs) is greater than the value of this
    *      SensingTypeEnum enumeration, false otherwise.
    */
  bool operator>(const SensingTypeEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the SensingTypeEnum enumeration on the right hand side of the >= operator is greater than
    * or equal to the value as this SensingTypeEnum enumeration.
    *
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of this SensingTypeEnum
    *      enumeration.
    * @return True if the value of the specified SensingTypeEnum enumeration (rhs) is greater than or equal to the value of
    *      this SensingTypeEnum enumeration, false otherwise.
    */
  bool operator>=(const SensingTypeEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this SensingTypeEnum enumeration is equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this SensingTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this SensingTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified SensingTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified SensingTypeEnum
    *      enumeration.
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the SensingTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const SensingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this SensingTypeEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this SensingTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this SensingTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified SensingTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified SensingTypeEnum
    *      enumeration.
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the SensingTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const SensingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this SensingTypeEnum enumeration is less than the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this SensingTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this SensingTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified SensingTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified SensingTypeEnum
    *      enumeration.
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the SensingTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const SensingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this SensingTypeEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this SensingTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this SensingTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * SensingTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified SensingTypeEnum
    *      enumeration.
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the SensingTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const SensingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this SensingTypeEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this SensingTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this SensingTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified SensingTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified SensingTypeEnum
    *      enumeration.
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the SensingTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const SensingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this SensingTypeEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this SensingTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this SensingTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * SensingTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified SensingTypeEnum
    *      enumeration.
    * @param rhs The SensingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the SensingTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const SensingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this SensingTypeEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this SensingTypeEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this SensingTypeEnum enumeration
    *      to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new SensingTypeEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  SensingTypeEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~SensingTypeEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SensingTypeEnum to copy from.
    */
  SensingTypeEnum(const SensingTypeEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::SensingTypeEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_SENSINGTYPEENUM_H

