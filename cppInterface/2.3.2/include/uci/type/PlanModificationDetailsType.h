/** @file PlanModificationDetailsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANMODIFICATIONDETAILSTYPE_H
#define UCI_TYPE_PLANMODIFICATIONDETAILSTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/export.h"
#include "ExecutionSequenceReplaceOrModifyChoiceType.h"
#include "HierarchyModificationType.h"
#include "PlanApplicabilityModificationType.h"
#include "PlanWindowModificationTypeChoiceType.h"
#include "RequirementAllocationLockDetailsType.h"
#include "SubPlansModificationType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Specifies details pertaining to the Plan Modification Request. */
class PlanModificationDetailsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanModificationDetailsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanModificationDetailsType.
    */
  static UCI_EXPORT PlanModificationDetailsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanModificationDetailsType initializing the data accessed by the new
    * PlanModificationDetailsType using the data accessed by the specified PlanModificationDetailsType (cloning).
    *
    * @param accessor The PlanModificationDetailsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created PlanModificationDetailsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanModificationDetailsType.
    */
  static UCI_EXPORT PlanModificationDetailsType& create(const PlanModificationDetailsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanModificationDetailsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PlanModificationDetailsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanModificationDetailsType& accessor);

  /** Returns this accessor's type constant, i.e. planModificationDetailsType.
    *
    * @return This accessor's type constant, i.e. planModificationDetailsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planModificationDetailsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanModificationDetailsType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanModificationDetailsType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanModificationDetailsType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ForPlanningUseOnly.
    *
    * @return The value of the simple primitive data type identified by ForPlanningUseOnly.
    */
  virtual xs::Boolean getForPlanningUseOnly() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ForPlanningUseOnly.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& setForPlanningUseOnly(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ForPlanningUseOnly exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ForPlanningUseOnly is enabled or not.
    */
  virtual bool hasForPlanningUseOnly() const = 0;

  /** Clears (disabled) the Element identified by ForPlanningUseOnly.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& clearForPlanningUseOnly() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * WindowModification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      WindowModification.
    */
  virtual const uci::type::PlanWindowModificationTypeChoiceType& getWindowModification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WindowModification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WindowModification.
    */
  virtual uci::type::PlanWindowModificationTypeChoiceType& getWindowModification() = 0;

  /** Sets the complex content identified by WindowModification to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WindowModification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& setWindowModification(const uci::type::PlanWindowModificationTypeChoiceType& value) = 0;

  /** Returns whether the Element identified by WindowModification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WindowModification is enabled or not.
    */
  virtual bool hasWindowModification() const = 0;

  /** Enables the Element identified by WindowModification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by WindowModification.
    */
  virtual uci::type::PlanWindowModificationTypeChoiceType& enableWindowModification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WindowModification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& clearWindowModification() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ApplicabilityModification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ApplicabilityModification.
    */
  virtual const uci::type::PlanApplicabilityModificationType& getApplicabilityModification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ApplicabilityModification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ApplicabilityModification.
    */
  virtual uci::type::PlanApplicabilityModificationType& getApplicabilityModification() = 0;

  /** Sets the complex content identified by ApplicabilityModification to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ApplicabilityModification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& setApplicabilityModification(const uci::type::PlanApplicabilityModificationType& value) = 0;

  /** Returns whether the Element identified by ApplicabilityModification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ApplicabilityModification is enabled or not.
    */
  virtual bool hasApplicabilityModification() const = 0;

  /** Enables the Element identified by ApplicabilityModification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ApplicabilityModification.
    */
  virtual uci::type::PlanApplicabilityModificationType& enableApplicabilityModification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ApplicabilityModification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& clearApplicabilityModification() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubPlansModification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubPlansModification.
    */
  virtual const uci::type::SubPlansModificationType& getSubPlansModification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubPlansModification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubPlansModification.
    */
  virtual uci::type::SubPlansModificationType& getSubPlansModification() = 0;

  /** Sets the complex content identified by SubPlansModification to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubPlansModification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& setSubPlansModification(const uci::type::SubPlansModificationType& value) = 0;

  /** Returns whether the Element identified by SubPlansModification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubPlansModification is enabled or not.
    */
  virtual bool hasSubPlansModification() const = 0;

  /** Enables the Element identified by SubPlansModification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubPlansModification.
    */
  virtual uci::type::SubPlansModificationType& enableSubPlansModification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubPlansModification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& clearSubPlansModification() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * HierarchyModification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      HierarchyModification.
    */
  virtual const uci::type::HierarchyModificationType& getHierarchyModification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by HierarchyModification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by HierarchyModification.
    */
  virtual uci::type::HierarchyModificationType& getHierarchyModification() = 0;

  /** Sets the complex content identified by HierarchyModification to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by HierarchyModification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& setHierarchyModification(const uci::type::HierarchyModificationType& value) = 0;

  /** Returns whether the Element identified by HierarchyModification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HierarchyModification is enabled or not.
    */
  virtual bool hasHierarchyModification() const = 0;

  /** Enables the Element identified by HierarchyModification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by HierarchyModification.
    */
  virtual uci::type::HierarchyModificationType& enableHierarchyModification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by HierarchyModification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& clearHierarchyModification() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ExecutionSequenceModification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ExecutionSequenceModification.
    */
  virtual const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& getExecutionSequenceModification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ExecutionSequenceModification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ExecutionSequenceModification.
    */
  virtual uci::type::ExecutionSequenceReplaceOrModifyChoiceType& getExecutionSequenceModification() = 0;

  /** Sets the complex content identified by ExecutionSequenceModification to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ExecutionSequenceModification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& setExecutionSequenceModification(const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& value) = 0;

  /** Returns whether the Element identified by ExecutionSequenceModification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExecutionSequenceModification is enabled or not.
    */
  virtual bool hasExecutionSequenceModification() const = 0;

  /** Enables the Element identified by ExecutionSequenceModification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ExecutionSequenceModification.
    */
  virtual uci::type::ExecutionSequenceReplaceOrModifyChoiceType& enableExecutionSequenceModification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ExecutionSequenceModification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& clearExecutionSequenceModification() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequirementAllocationLock.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequirementAllocationLock.
    */
  virtual const uci::type::RequirementAllocationLockDetailsType& getRequirementAllocationLock() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RequirementAllocationLock.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RequirementAllocationLock.
    */
  virtual uci::type::RequirementAllocationLockDetailsType& getRequirementAllocationLock() = 0;

  /** Sets the complex content identified by RequirementAllocationLock to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequirementAllocationLock.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& setRequirementAllocationLock(const uci::type::RequirementAllocationLockDetailsType& value) = 0;

  /** Returns whether the Element identified by RequirementAllocationLock exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RequirementAllocationLock is enabled or not.
    */
  virtual bool hasRequirementAllocationLock() const = 0;

  /** Enables the Element identified by RequirementAllocationLock.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RequirementAllocationLock.
    */
  virtual uci::type::RequirementAllocationLockDetailsType& enableRequirementAllocationLock(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RequirementAllocationLock.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanModificationDetailsType& clearRequirementAllocationLock() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanModificationDetailsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanModificationDetailsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanModificationDetailsType to copy from.
    */
  PlanModificationDetailsType(const PlanModificationDetailsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanModificationDetailsType to the contents of the
    * PlanModificationDetailsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PlanModificationDetailsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this PlanModificationDetailsType.
    * @return A reference to this PlanModificationDetailsType.
    */
  PlanModificationDetailsType& operator=(const PlanModificationDetailsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANMODIFICATIONDETAILSTYPE_H

