/** @file QualifyingTagsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_QUALIFYINGTAGSTYPE_H
#define UCI_TYPE_QUALIFYINGTAGSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/UnsignedShortAccessor.h"
#include "uci/base/export.h"
#include "uci/type/EmptyType.h"
#include "uci/type/SystemMessageIdentifierType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class QualifyingTagsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new QualifyingTagsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed QualifyingTagsType.
    */
  static UCI_EXPORT QualifyingTagsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new QualifyingTagsType initializing the data accessed by the new QualifyingTagsType using
    * the data accessed by the specified QualifyingTagsType (cloning).
    *
    * @param accessor The QualifyingTagsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created QualifyingTagsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed QualifyingTagsType.
    */
  static UCI_EXPORT QualifyingTagsType& create(const QualifyingTagsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified QualifyingTagsType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The QualifyingTagsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(QualifyingTagsType& accessor);

  /** Returns this accessor's type constant, i.e. qualifyingTagsType.
    *
    * @return This accessor's type constant, i.e. qualifyingTagsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::qualifyingTagsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of QualifyingTagsType.
    *
    * @return The version that was initialized from the uci:version attribute of QualifyingTagsType.
    */
  static std::string getUCITypeVersion() {
    return "000.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const QualifyingTagsType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by QualifiedSpecial.
    *
    * @return The value of the simple primitive data type identified by QualifiedSpecial.
    */
  virtual xs::UnsignedShort getQualifiedSpecial() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by QualifiedSpecial.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setQualifiedSpecial(xs::UnsignedShort value) = 0;

  /** Returns whether the Element identified by QualifiedSpecial exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by QualifiedSpecial is enabled or not.
    */
  virtual bool hasQualifiedSpecial() const = 0;

  /** Clears (disabled) the Element identified by QualifiedSpecial.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& clearQualifiedSpecial() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ProcessSpecial.
    *
    * @return A const reference to the accessor that provides access to the string identified by ProcessSpecial.
    */
  virtual const uci::type::EmptyType& getProcessSpecial() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ProcessSpecial.
    *
    * @return A reference to the accessor that provides access to the string identified by ProcessSpecial.
    */
  virtual uci::type::EmptyType& getProcessSpecial() = 0;

  /** Sets the string identified by ProcessSpecial to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ProcessSpecial.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setProcessSpecial(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by ProcessSpecial to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setProcessSpecial(const std::string& value) = 0;

  /** Sets the string identified by ProcessSpecial to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setProcessSpecial(const char* value) = 0;

  /** Returns whether the Element identified by ProcessSpecial exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProcessSpecial is enabled or not.
    */
  virtual bool hasProcessSpecial() const = 0;

  /** Enables the Element identified by ProcessSpecial.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ProcessSpecial.
    */
  virtual uci::type::EmptyType& enableProcessSpecial(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProcessSpecial.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& clearProcessSpecial() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FilterOverride.
    *
    * @return A const reference to the accessor that provides access to the string identified by FilterOverride.
    */
  virtual const uci::type::EmptyType& getFilterOverride() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FilterOverride.
    *
    * @return A reference to the accessor that provides access to the string identified by FilterOverride.
    */
  virtual uci::type::EmptyType& getFilterOverride() = 0;

  /** Sets the string identified by FilterOverride to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FilterOverride.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setFilterOverride(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by FilterOverride to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setFilterOverride(const std::string& value) = 0;

  /** Sets the string identified by FilterOverride to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setFilterOverride(const char* value) = 0;

  /** Returns whether the Element identified by FilterOverride exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FilterOverride is enabled or not.
    */
  virtual bool hasFilterOverride() const = 0;

  /** Enables the Element identified by FilterOverride.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FilterOverride.
    */
  virtual uci::type::EmptyType& enableFilterOverride(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FilterOverride.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& clearFilterOverride() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by HighInterest.
    *
    * @return A const reference to the accessor that provides access to the string identified by HighInterest.
    */
  virtual const uci::type::EmptyType& getHighInterest() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by HighInterest.
    *
    * @return A reference to the accessor that provides access to the string identified by HighInterest.
    */
  virtual uci::type::EmptyType& getHighInterest() = 0;

  /** Sets the string identified by HighInterest to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by HighInterest.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setHighInterest(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by HighInterest to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setHighInterest(const std::string& value) = 0;

  /** Sets the string identified by HighInterest to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setHighInterest(const char* value) = 0;

  /** Returns whether the Element identified by HighInterest exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HighInterest is enabled or not.
    */
  virtual bool hasHighInterest() const = 0;

  /** Enables the Element identified by HighInterest.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by HighInterest.
    */
  virtual uci::type::EmptyType& enableHighInterest(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by HighInterest.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& clearHighInterest() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Retain.
    *
    * @return A const reference to the accessor that provides access to the string identified by Retain.
    */
  virtual const uci::type::EmptyType& getRetain() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Retain.
    *
    * @return A reference to the accessor that provides access to the string identified by Retain.
    */
  virtual uci::type::EmptyType& getRetain() = 0;

  /** Sets the string identified by Retain to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Retain.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setRetain(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by Retain to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setRetain(const std::string& value) = 0;

  /** Sets the string identified by Retain to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setRetain(const char* value) = 0;

  /** Returns whether the Element identified by Retain exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Retain is enabled or not.
    */
  virtual bool hasRetain() const = 0;

  /** Enables the Element identified by Retain.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Retain.
    */
  virtual uci::type::EmptyType& enableRetain(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Retain.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& clearRetain() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by QualifyingSource.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by QualifyingSource.
    */
  virtual const uci::type::SystemMessageIdentifierType& getQualifyingSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by QualifyingSource.
    *
    * @return A reference to the accessor that provides access to the complex content identified by QualifyingSource.
    */
  virtual uci::type::SystemMessageIdentifierType& getQualifyingSource() = 0;

  /** Sets the complex content identified by QualifyingSource to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by QualifyingSource.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::QualifyingTagsType& setQualifyingSource(const uci::type::SystemMessageIdentifierType& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  QualifyingTagsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~QualifyingTagsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The QualifyingTagsType to copy from.
    */
  QualifyingTagsType(const QualifyingTagsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this QualifyingTagsType to the contents of the QualifyingTagsType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The QualifyingTagsType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this QualifyingTagsType.
    * @return A reference to this QualifyingTagsType.
    */
  QualifyingTagsType& operator=(const QualifyingTagsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_QUALIFYINGTAGSTYPE_H

