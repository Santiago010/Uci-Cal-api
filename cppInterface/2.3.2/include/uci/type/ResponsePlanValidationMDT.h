/** @file ResponsePlanValidationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RESPONSEPLANVALIDATIONMDT_H
#define UCI_TYPE_RESPONSEPLANVALIDATIONMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CompletionStatusType.h"
#include "IncompleteProcessingType.h"
#include "PlanValidationStateEnum.h"
#include "ResponseAllocationInvalidType.h"
#include "ResponsePlanID_Type.h"
#include "ResponsePlanValidationID_Type.h"
#include "ResponsePlanningResultType.h"
#include "ValidatorType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ResponsePlanValidationMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ResponsePlanValidationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResponsePlanValidationMDT.
    */
  static UCI_EXPORT ResponsePlanValidationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ResponsePlanValidationMDT initializing the data accessed by the new
    * ResponsePlanValidationMDT using the data accessed by the specified ResponsePlanValidationMDT (cloning).
    *
    * @param accessor The ResponsePlanValidationMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ResponsePlanValidationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResponsePlanValidationMDT.
    */
  static UCI_EXPORT ResponsePlanValidationMDT& create(const ResponsePlanValidationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ResponsePlanValidationMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ResponsePlanValidationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ResponsePlanValidationMDT& accessor);

  /** Returns this accessor's type constant, i.e. responsePlanValidationMDT.
    *
    * @return This accessor's type constant, i.e. responsePlanValidationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::responsePlanValidationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of ResponsePlanValidationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of ResponsePlanValidationMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ResponsePlanValidationMDT& accessor) = 0;

  /** Indicates items associated with command processing that failed to complete. For example if a particular required
    * Capability wasn't available, it could be referenced here. This element/type is highly flexible. It can reference
    * almost any message/concept in UCI as a planning issue. The wide range of messages/concepts it can reference makes it
    * 1) difficult to use as a basis for software/services to resolve the issue but 2) an excellent general method for
    * processing algorithms to convey issues to operators. This element shouldn't be used to report processing
    * issues/results that are more directly indicated by other processing status elements. For example, for planning
    * processing, other elements focus specifically on per-Requirement allocation results therefore this element shouldn't
    * be used for per-Requirement allocation results. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IncompleteProcessingType, uci::type::accessorType::incompleteProcessingType> IncompleteItem;

  /** Indicates an Response whose allocation was found to be invalid. If the associated ResponsePlanValidationCommand
    * indicated "modify to validate", results of attempts to modify the allocation can be found in sibling elements.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResponseAllocationInvalidType, uci::type::accessorType::responseAllocationInvalidType> InvalidAllocation;

  /** Indicates allocation results per Response. This element is only expected when the ResponsePlan was found to be
    * invalid and the associated ResponsePlanValidationCommand indicated "modify to validate" was allowed. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResponsePlanningResultType, uci::type::accessorType::responsePlanningResultType> AllocationResult;

  /** Indicates a modified, valid version of the evaluated ResponsePlan. This element should only be given when the
    * evaluated ResponsePlan was found to be invalid, the ResponsePlanValidationCommand indicated "modify to validate" and
    * the modifications resulted in a valid ResponsePlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResponsePlanID_Type, uci::type::accessorType::responsePlanID_Type> ModifiedPlanID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResponsePlanValidationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResponsePlanValidationID.
    */
  virtual const uci::type::ResponsePlanValidationID_Type& getResponsePlanValidationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ResponsePlanValidationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResponsePlanValidationID.
    */
  virtual uci::type::ResponsePlanValidationID_Type& getResponsePlanValidationID() = 0;

  /** Sets the complex content identified by ResponsePlanValidationID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponsePlanValidationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setResponsePlanValidationID(const uci::type::ResponsePlanValidationID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanID.
    */
  virtual const uci::type::ResponsePlanID_Type& getPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanID.
    */
  virtual uci::type::ResponsePlanID_Type& getPlanID() = 0;

  /** Sets the complex content identified by PlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setPlanID(const uci::type::ResponsePlanID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Validator.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Validator.
    */
  virtual const uci::type::ValidatorType& getValidator() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Validator.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Validator.
    */
  virtual uci::type::ValidatorType& getValidator() = 0;

  /** Sets the complex content identified by Validator to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Validator.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setValidator(const uci::type::ValidatorType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ValidationState.
    *
    * @return A const reference to the value of the enumeration identified by ValidationState.
    */
  virtual const uci::type::PlanValidationStateEnum& getValidationState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ValidationState.
    *
    * @return A reference to the value of the enumeration identified by ValidationState.
    */
  virtual uci::type::PlanValidationStateEnum& getValidationState() = 0;

  /** Sets the value of the enumeration identified by ValidationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setValidationState(const uci::type::PlanValidationStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ValidationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setValidationState(uci::type::PlanValidationStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual const uci::type::CompletionStatusType& getCompletionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& getCompletionStatus() = 0;

  /** Sets the complex content identified by CompletionStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CompletionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setCompletionStatus(const uci::type::CompletionStatusType& value) = 0;

  /** Returns whether the Element identified by CompletionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CompletionStatus is enabled or not.
    */
  virtual bool hasCompletionStatus() const = 0;

  /** Enables the Element identified by CompletionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& enableCompletionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CompletionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& clearCompletionStatus() = 0;

  /** Returns a const reference to the bounded list identified by IncompleteItem.
    *
    * @return A const reference to the bounded list identified by IncompleteItem.
    */
  virtual const uci::type::ResponsePlanValidationMDT::IncompleteItem& getIncompleteItem() const = 0;

  /** Returns a reference to the bounded list identified by IncompleteItem.
    *
    * @return A reference to the bounded list identified by IncompleteItem.
    */
  virtual uci::type::ResponsePlanValidationMDT::IncompleteItem& getIncompleteItem() = 0;

  /** Sets the bounded list identified by IncompleteItem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setIncompleteItem(const uci::type::ResponsePlanValidationMDT::IncompleteItem& value) = 0;

  /** Returns a const reference to the bounded list identified by InvalidAllocation.
    *
    * @return A const reference to the bounded list identified by InvalidAllocation.
    */
  virtual const uci::type::ResponsePlanValidationMDT::InvalidAllocation& getInvalidAllocation() const = 0;

  /** Returns a reference to the bounded list identified by InvalidAllocation.
    *
    * @return A reference to the bounded list identified by InvalidAllocation.
    */
  virtual uci::type::ResponsePlanValidationMDT::InvalidAllocation& getInvalidAllocation() = 0;

  /** Sets the bounded list identified by InvalidAllocation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setInvalidAllocation(const uci::type::ResponsePlanValidationMDT::InvalidAllocation& value) = 0;

  /** Returns a const reference to the bounded list identified by AllocationResult.
    *
    * @return A const reference to the bounded list identified by AllocationResult.
    */
  virtual const uci::type::ResponsePlanValidationMDT::AllocationResult& getAllocationResult() const = 0;

  /** Returns a reference to the bounded list identified by AllocationResult.
    *
    * @return A reference to the bounded list identified by AllocationResult.
    */
  virtual uci::type::ResponsePlanValidationMDT::AllocationResult& getAllocationResult() = 0;

  /** Sets the bounded list identified by AllocationResult.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setAllocationResult(const uci::type::ResponsePlanValidationMDT::AllocationResult& value) = 0;

  /** Returns a const reference to the bounded list identified by ModifiedPlanID.
    *
    * @return A const reference to the bounded list identified by ModifiedPlanID.
    */
  virtual const uci::type::ResponsePlanValidationMDT::ModifiedPlanID& getModifiedPlanID() const = 0;

  /** Returns a reference to the bounded list identified by ModifiedPlanID.
    *
    * @return A reference to the bounded list identified by ModifiedPlanID.
    */
  virtual uci::type::ResponsePlanValidationMDT::ModifiedPlanID& getModifiedPlanID() = 0;

  /** Sets the bounded list identified by ModifiedPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponsePlanValidationMDT& setModifiedPlanID(const uci::type::ResponsePlanValidationMDT::ModifiedPlanID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ResponsePlanValidationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~ResponsePlanValidationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ResponsePlanValidationMDT to copy from.
    */
  ResponsePlanValidationMDT(const ResponsePlanValidationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ResponsePlanValidationMDT to the contents of the
    * ResponsePlanValidationMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ResponsePlanValidationMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ResponsePlanValidationMDT.
    * @return A reference to this ResponsePlanValidationMDT.
    */
  ResponsePlanValidationMDT& operator=(const ResponsePlanValidationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RESPONSEPLANVALIDATIONMDT_H

