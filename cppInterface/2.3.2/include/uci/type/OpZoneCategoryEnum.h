/** @file OpZoneCategoryEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:09 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPZONECATEGORYENUM_H
#define UCI_TYPE_OPZONECATEGORYENUM_H

#include <map>
#include <sstream>

#include "uci/base/Accessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The type of an operational zone. Many, but not all, of the enumerations are from MIL-STD-6016 Point Type (DFI 363/DUI
  * 003) and Point Amplification (DFI 379/DUI 002). Some of the enumerations in this type can also have unique parameters
  * that are specified in OpZoneCategoryType. See individual enumerations for more details.
  */
class OpZoneCategoryEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** A point at which AEW aircraft are or will be orbiting or maneuvering. */
    UCI_AIRBORNE_EARLY_WARNING,

    /** A point at which CAP aircraft are or will be orbiting or maneuvering. */
    UCI_COMBAT_AIR_PATROL,

    /** Indicates an area with constrained entries and exits. The additional parameters used with this zone category are
      * defined in the ConstrainedEntryExitType choice in OpZoneCategoryType.
      */
    UCI_CONSTRAINED_ENTRY_EXIT,

    /** Indicates the zone is contaminated, an area caused by the deposit and/or absorption of radioactive material, or of
      * biological or chemical agents on and by structures, areas, personnel, or objects.
      */
    UCI_CONTAMINATED,

    /** A specified area above, below, or within which there may be a potential danger. */
    UCI_DANGER,

    /** An area the source tn is capable of defending against ballistic missiles, etc.,(i.e. the source tn is operational
      * with ready weapons and has designated the area for defense).
      */
    UCI_DEFENDED_AREA,

    /** Indicates the zone is a directed search area. */
    UCI_DIRECTED_SEARCH_AREA,

    /** Indicates the zone is the boundary for an electronic order of battle request. */
    UCI_EOB,

    /** An area for military maneuver or simulated wartime operation involving planning, preparation and execution. */
    UCI_EXERCISE,

    /** Indicates the zone is a fighter area of responsibility (AOR), an airspace of defined dimensions within which the
      * responsibility for engagement normally rests with fighter aircraft.
      */
    UCI_FIGHTER_ENGAGE_AOR,

    /** Indicates a geographic area of interest for the purpose of limiting data. The additional parameters used with this
      * zone category are defined in the OpZoneFilterAreaPET choice in OpZoneCategoryType.
      */
    UCI_FILTER_AREA,

    /** Indicates the zone is a hazard area that doesn't have a specified operational purpose. */
    UCI_GENERAL_HAZARD,

    /** A general zone describing an air station that must be amplified by voice or predetermined procedures. */
    UCI_GENERAL_STATION,

    /** Indicates the zone is a ground area of responsibility (AOR), an area of ground within which the responsibility for
      * engagement normally rests with the appropriate ground force commander.
      */
    UCI_GROUND_AOR,

    /** Indicates the zone is a hostile tactical area, an area in which hostile tactical forces (to include ground, air, or
      * maritime) are known to be or will be operating.
      */
    UCI_HOSTILE_TACTICAL_AREA,

    /** Indicates the zone is a hostile weapon zone, an area in which hostile air defense systems are capable of engagement. */
    UCI_HOSTILE_WEAPON,

    /** The real or expected point that a device has or will penetrate or contact a surface. */
    UCI_IMPACT_POINT,

    /** Indicates the zone is a jamming control zone. The additional parameters used with this zone category are defined in
      * the OpZoneJammingType choice in OpZoneCategoryType.
      */
    UCI_JAMMING,

    /** Indicates the zone is a boundary within which applicable systems must stay. The additional parameters used with this
      * zone category are defined in the IngressEgressType choice in OpZoneCategoryType.
      */
    UCI_KEEP_IN,

    /** Indicates the zone is a kill zone, an air defense system (SOC) area in which friendly fighters may use less
      * restrictive rules of engagement.
      */
    UCI_KILL,

    /** Indicates the zone is a missile engagement zone, a primary engagement area designated for friendly surface to air
      * missiles.
      */
    UCI_MISSILE_ENGAGEMENT,

    /** A point indicating the position from which a missile has been or will be launched. The additional parameters used
      * with this zone category are defined in the OpZoneMissileLaunchDataType choice in OpZoneCategoryType.
      */
    UCI_MISSILE_LAUNCH_POINT,

    /** Indicates the zone is an area in which a mission will take place. */
    UCI_MISSION_AREA,

    /** An area usually along an enemy mobility corridor where enemy activity (or inactivity) confirms a particular course of
      * action.
      */
    UCI_NAMED_AREA_OF_INTEREST,

    /** Indicates the zone is an area where communications use is restricted. */
    UCI_NO_COMM,

    /** Indicates the zone is an area where strike impact is restricted; the zone does not restrict the launch of weapons.
      * The additional parameters used with this zone category are defined in the OpZoneNoFireType choice in
      * OpZoneCategoryType.
      */
    UCI_NO_FIRE,

    /** Indicates the zone is an area where flight is restricted. The additional parameters used with this zone category are
      * defined in the OpZoneNoFlyType choice in OpZoneCategoryType.
      */
    UCI_NO_FLY,

    /** Indicates the zone is an area where image collection is restricted. */
    UCI_NO_IMAGE,

    /** A figure eight pattern within a rectangle that the aircraft is or will be tracking. */
    UCI_ORBIT_FIGURE_EIGHT,

    /** An oval within a rectangle that the aircraft is or will be tracking. */
    UCI_ORBIT_RACE_TRACK,

    /** A rectangle in which the aircraft will track randomly. */
    UCI_ORBIT_RANDOM_CLOSED,

    /** Indicates the zone is an area that doesn't have a specified operational purpose. */
    UCI_REFERENCE,

    /** An area where a search is being or will be conducted. normally associated with a SAR mission. */
    UCI_SEARCH,

    /** Indicates the zone is a short range area defense (SHORAD), an area defended by friendly army short range air defense
      * systems.
      */
    UCI_SHORAD,

    /** A restricted area established to allow submarine operations to be unimpeded by the operation, or possible attack from
      * friendly forces in wartime, or to be conducted without submerged mutual interference in peacetime.
      */
    UCI_SUBMARINE_PATROL_AREA,

    /** An engagement area usually along an enemy mobility corridor. */
    UCI_TARGET_AREA_OF_INTEREST,

    /** Indicates the zone is a region where specific vehicle configuration parameters should be changed. The additional
      * parameters used with this zone category are defined in the VehicleCommandDataType choice in OpZoneCategoryType.
      */
    UCI_VEHICLE_CONFIGURATION,

    /** Indicates the zone is an area within which a set of restricted weapons cannot be used against a target type and/or
      * within in the zone. The additional parameters used with this zone category are defined in the
      * OpZoneWeaponRestrictionType choice in OpZoneCategoryType.
      */
    UCI_WEAPON_RESTRICTION,

    /** Indicates the zone is an area within which weather conditions have a potential for mission impact. The additional
      * parameters used with this zone category are defined in the OpZoneWeatherType choice in OpZoneCategoryType.
      */
    UCI_WEATHER_CONDITIONS,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. opZoneCategoryEnum.
    *
    * @return This accessor's type constant, i.e. opZoneCategoryEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::opZoneCategoryEnum;
  }

  /** The assignment operator. Sets the contents of this OpZoneCategoryEnum to the contents of the OpZoneCategoryEnum on
    * the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The OpZoneCategoryEnum on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this OpZoneCategoryEnum.
    * @return A reference to this OpZoneCategoryEnum.
    */
  OpZoneCategoryEnum& operator=(const OpZoneCategoryEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this OpZoneCategoryEnum enumeration to the EnumerationItem on the
    * right hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this OpZoneCategoryEnum enumeration.
    * @return A reference to this OpZoneCategoryEnum enumeration.
    */
  OpZoneCategoryEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this OpZoneCategoryEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this OpZoneCategoryEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this OpZoneCategoryEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this OpZoneCategoryEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this OpZoneCategoryEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this OpZoneCategoryEnum enumeration.
    *
    * @return The number of items in this OpZoneCategoryEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 39;
  }

  /** Returns whether this OpZoneCategoryEnum enumeration is valid or not. A OpZoneCategoryEnum enumeration is valid if its
    * value is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this OpZoneCategoryEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the OpZoneCategoryEnum enumeration on the right hand side of the == operator is equal to
    * the value as this OpZoneCategoryEnum enumeration.
    *
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of this
    *      OpZoneCategoryEnum enumeration.
    * @return True if the value of the specified OpZoneCategoryEnum enumeration (rhs) is equal to the value of this
    *      OpZoneCategoryEnum enumeration, false otherwise.
    */
  bool operator==(const OpZoneCategoryEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the OpZoneCategoryEnum enumeration on the right hand side of the != operator is not equal
    * to the value as this OpZoneCategoryEnum enumeration.
    *
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of this
    *      OpZoneCategoryEnum enumeration.
    * @return True if the value of the specified OpZoneCategoryEnum enumeration (rhs) is not equal to the value of this
    *      OpZoneCategoryEnum enumeration, false otherwise.
    */
  bool operator!=(const OpZoneCategoryEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the OpZoneCategoryEnum enumeration on the right hand side of the < operator is less than
    * the value as this OpZoneCategoryEnum enumeration.
    *
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of this
    *      OpZoneCategoryEnum enumeration.
    * @return True if the value of the specified OpZoneCategoryEnum enumeration (rhs) is less than the value of this
    *      OpZoneCategoryEnum enumeration, false otherwise.
    */
  bool operator<(const OpZoneCategoryEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the OpZoneCategoryEnum enumeration on the right hand side of the <= operator is less than
    * or equal to the value as this OpZoneCategoryEnum enumeration.
    *
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of this
    *      OpZoneCategoryEnum enumeration.
    * @return True if the value of the specified OpZoneCategoryEnum enumeration (rhs) is less than or equal to the value of
    *      this OpZoneCategoryEnum enumeration, false otherwise.
    */
  bool operator<=(const OpZoneCategoryEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the OpZoneCategoryEnum enumeration on the right hand side of the > operator is greater
    * than the value as this OpZoneCategoryEnum enumeration.
    *
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of this
    *      OpZoneCategoryEnum enumeration.
    * @return True if the value of the specified OpZoneCategoryEnum enumeration (rhs) is greater than the value of this
    *      OpZoneCategoryEnum enumeration, false otherwise.
    */
  bool operator>(const OpZoneCategoryEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the OpZoneCategoryEnum enumeration on the right hand side of the >= operator is greater
    * than or equal to the value as this OpZoneCategoryEnum enumeration.
    *
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of this
    *      OpZoneCategoryEnum enumeration.
    * @return True if the value of the specified OpZoneCategoryEnum enumeration (rhs) is greater than or equal to the value
    *      of this OpZoneCategoryEnum enumeration, false otherwise.
    */
  bool operator>=(const OpZoneCategoryEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this OpZoneCategoryEnum enumeration is equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OpZoneCategoryEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this OpZoneCategoryEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified OpZoneCategoryEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OpZoneCategoryEnum
    *      enumeration.
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the OpZoneCategoryEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const OpZoneCategoryEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this OpZoneCategoryEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OpZoneCategoryEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this OpZoneCategoryEnum
    *      enumeration, false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified
    * OpZoneCategoryEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OpZoneCategoryEnum
    *      enumeration.
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the OpZoneCategoryEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const OpZoneCategoryEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this OpZoneCategoryEnum enumeration is less than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OpZoneCategoryEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this OpZoneCategoryEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified OpZoneCategoryEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OpZoneCategoryEnum
    *      enumeration.
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the OpZoneCategoryEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const OpZoneCategoryEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this OpZoneCategoryEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OpZoneCategoryEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this OpZoneCategoryEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * OpZoneCategoryEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OpZoneCategoryEnum
    *      enumeration.
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the OpZoneCategoryEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const OpZoneCategoryEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this OpZoneCategoryEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OpZoneCategoryEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this OpZoneCategoryEnum
    *      enumeration, false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified
    * OpZoneCategoryEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OpZoneCategoryEnum
    *      enumeration.
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the OpZoneCategoryEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const OpZoneCategoryEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this OpZoneCategoryEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OpZoneCategoryEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this
    *      OpZoneCategoryEnum enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * OpZoneCategoryEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OpZoneCategoryEnum
    *      enumeration.
    * @param rhs The OpZoneCategoryEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the
    *      OpZoneCategoryEnum enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const OpZoneCategoryEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this OpZoneCategoryEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this OpZoneCategoryEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this OpZoneCategoryEnum enumeration
    *      to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new OpZoneCategoryEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  OpZoneCategoryEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~OpZoneCategoryEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OpZoneCategoryEnum to copy from.
    */
  OpZoneCategoryEnum(const OpZoneCategoryEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::OpZoneCategoryEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_OPZONECATEGORYENUM_H

