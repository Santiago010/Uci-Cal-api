/** @file VehicleThreatAssessmentRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_VEHICLETHREATASSESSMENTREQUESTTYPE_H
#define UCI_TYPE_VEHICLETHREATASSESSMENTREQUESTTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AssessmentSuppressionEnum.h"
#include "uci/type/DetectionEnvelopeParametersType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/SystemPositionSpecificationType.h"
#include "uci/type/ThreatCapabilityEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The inputs used in generating and/or requesting a Vehicle Threat Assessment. */
class VehicleThreatAssessmentRequestType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new VehicleThreatAssessmentRequestType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed VehicleThreatAssessmentRequestType.
    */
  static UCI_EXPORT VehicleThreatAssessmentRequestType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new VehicleThreatAssessmentRequestType initializing the data accessed by the new
    * VehicleThreatAssessmentRequestType using the data accessed by the specified VehicleThreatAssessmentRequestType
    * (cloning).
    *
    * @param accessor The VehicleThreatAssessmentRequestType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created VehicleThreatAssessmentRequestType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed VehicleThreatAssessmentRequestType.
    */
  static UCI_EXPORT VehicleThreatAssessmentRequestType& create(const VehicleThreatAssessmentRequestType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified VehicleThreatAssessmentRequestType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The VehicleThreatAssessmentRequestType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(VehicleThreatAssessmentRequestType& accessor);

  /** Returns this accessor's type constant, i.e. vehicleThreatAssessmentRequestType.
    *
    * @return This accessor's type constant, i.e. vehicleThreatAssessmentRequestType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::vehicleThreatAssessmentRequestType;
  }

  /** Returns the version that was initialized from the uci:version attribute of VehicleThreatAssessmentRequestType.
    *
    * @return The version that was initialized from the uci:version attribute of VehicleThreatAssessmentRequestType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const VehicleThreatAssessmentRequestType& accessor) = 0;

  /** This element identifies the vehicle that should be used for threat assessment. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemPositionSpecificationType, uci::type::accessorType::systemPositionSpecificationType> SystemToAssess;

  /** This element identifies other vehicles that are to be considered for the assessment, but not assessed (i.e. include a
    * vehicle with a supporting capability, but there is no need to assess the supporting vehicle, just the vehicle being
    * supported). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemPositionSpecificationType, uci::type::accessorType::systemPositionSpecificationType> SupportingSystem;

  /** This element is used if the threat assessment should be generated in regards to only certain threats. If this element
    * is not specified then all entities are considered. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type> EntityID;

  /** Returns a const reference to the value of the enumeration identified by AssessmentSuppression.
    *
    * @return A const reference to the value of the enumeration identified by AssessmentSuppression.
    */
  virtual const uci::type::AssessmentSuppressionEnum& getAssessmentSuppression() const = 0;

  /** Returns a reference to the value of the enumeration identified by AssessmentSuppression.
    *
    * @return A reference to the value of the enumeration identified by AssessmentSuppression.
    */
  virtual uci::type::AssessmentSuppressionEnum& getAssessmentSuppression() = 0;

  /** Sets the value of the enumeration identified by AssessmentSuppression.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setAssessmentSuppression(const uci::type::AssessmentSuppressionEnum& value) = 0;

  /** Sets the value of the enumeration identified by AssessmentSuppression.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setAssessmentSuppression(uci::type::AssessmentSuppressionEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ThreatCapability.
    *
    * @return A const reference to the value of the enumeration identified by ThreatCapability.
    */
  virtual const uci::type::ThreatCapabilityEnum& getThreatCapability() const = 0;

  /** Returns a reference to the value of the enumeration identified by ThreatCapability.
    *
    * @return A reference to the value of the enumeration identified by ThreatCapability.
    */
  virtual uci::type::ThreatCapabilityEnum& getThreatCapability() = 0;

  /** Sets the value of the enumeration identified by ThreatCapability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setThreatCapability(const uci::type::ThreatCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by ThreatCapability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setThreatCapability(uci::type::ThreatCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by SystemToAssess.
    *
    * @return A const reference to the bounded list identified by SystemToAssess.
    */
  virtual const uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& getSystemToAssess() const = 0;

  /** Returns a reference to the bounded list identified by SystemToAssess.
    *
    * @return A reference to the bounded list identified by SystemToAssess.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& getSystemToAssess() = 0;

  /** Sets the bounded list identified by SystemToAssess.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setSystemToAssess(const uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportingSystem.
    *
    * @return A const reference to the bounded list identified by SupportingSystem.
    */
  virtual const uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& getSupportingSystem() const = 0;

  /** Returns a reference to the bounded list identified by SupportingSystem.
    *
    * @return A reference to the bounded list identified by SupportingSystem.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& getSupportingSystem() = 0;

  /** Sets the bounded list identified by SupportingSystem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setSupportingSystem(const uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& value) = 0;

  /** Returns a const reference to the bounded list identified by EntityID.
    *
    * @return A const reference to the bounded list identified by EntityID.
    */
  virtual const uci::type::VehicleThreatAssessmentRequestType::EntityID& getEntityID() const = 0;

  /** Returns a reference to the bounded list identified by EntityID.
    *
    * @return A reference to the bounded list identified by EntityID.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType::EntityID& getEntityID() = 0;

  /** Sets the bounded list identified by EntityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setEntityID(const uci::type::VehicleThreatAssessmentRequestType::EntityID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GenerateDetectionEnvelope.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GenerateDetectionEnvelope.
    */
  virtual const uci::type::DetectionEnvelopeParametersType& getGenerateDetectionEnvelope() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * GenerateDetectionEnvelope.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      GenerateDetectionEnvelope.
    */
  virtual uci::type::DetectionEnvelopeParametersType& getGenerateDetectionEnvelope() = 0;

  /** Sets the complex content identified by GenerateDetectionEnvelope to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GenerateDetectionEnvelope.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setGenerateDetectionEnvelope(const uci::type::DetectionEnvelopeParametersType& value) = 0;

  /** Returns whether the Element identified by GenerateDetectionEnvelope exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GenerateDetectionEnvelope is enabled or not.
    */
  virtual bool hasGenerateDetectionEnvelope() const = 0;

  /** Enables the Element identified by GenerateDetectionEnvelope.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      GenerateDetectionEnvelope.
    */
  virtual uci::type::DetectionEnvelopeParametersType& enableGenerateDetectionEnvelope(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GenerateDetectionEnvelope.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& clearGenerateDetectionEnvelope() = 0;

  /** Returns the value of the SimplePrimitive data type identified by GenerateThreatZone.
    *
    * @return The value of the simple primitive data type identified by GenerateThreatZone.
    */
  virtual xs::Boolean getGenerateThreatZone() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by GenerateThreatZone.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& setGenerateThreatZone(xs::Boolean value) = 0;

  /** Returns whether the Element identified by GenerateThreatZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GenerateThreatZone is enabled or not.
    */
  virtual bool hasGenerateThreatZone() const = 0;

  /** Clears (disabled) the Element identified by GenerateThreatZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleThreatAssessmentRequestType& clearGenerateThreatZone() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  VehicleThreatAssessmentRequestType() {
  }

  /** The destructor [only available to derived classes]. */
  ~VehicleThreatAssessmentRequestType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The VehicleThreatAssessmentRequestType to copy from.
    */
  VehicleThreatAssessmentRequestType(const VehicleThreatAssessmentRequestType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this VehicleThreatAssessmentRequestType to the contents of the
    * VehicleThreatAssessmentRequestType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The VehicleThreatAssessmentRequestType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this VehicleThreatAssessmentRequestType.
    * @return A reference to this VehicleThreatAssessmentRequestType.
    */
  VehicleThreatAssessmentRequestType& operator=(const VehicleThreatAssessmentRequestType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_VEHICLETHREATASSESSMENTREQUESTTYPE_H

