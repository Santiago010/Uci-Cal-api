/** @file SecurityEventType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SECURITYEVENTTYPE_H
#define UCI_TYPE_SECURITYEVENTTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "SecurityAccessType.h"
#include "SecurityAuditManagementType.h"
#include "SecurityAuthenticationType.h"
#include "SecurityFileManagementType.h"
#include "SecurityIntegrityType.h"
#include "SecurityIntrusionDetectionType.h"
#include "SecurityKeyManagementType.h"
#include "SecurityPolicyManagementType.h"
#include "SecuritySanitizationType.h"
#include "SecuritySystemType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SecurityEventType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SecurityEventType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SecurityEventType.
    */
  static UCI_EXPORT SecurityEventType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SecurityEventType initializing the data accessed by the new SecurityEventType using the
    * data accessed by the specified SecurityEventType (cloning).
    *
    * @param accessor The SecurityEventType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SecurityEventType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SecurityEventType.
    */
  static UCI_EXPORT SecurityEventType& create(const SecurityEventType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SecurityEventType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SecurityEventType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SecurityEventType& accessor);

  /** Returns this accessor's type constant, i.e. securityEventType.
    *
    * @return This accessor's type constant, i.e. securityEventType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::securityEventType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SecurityEventType.
    *
    * @return The version that was initialized from the uci:version attribute of SecurityEventType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SecurityEventType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum SecurityEventTypeChoice {
    SECURITYEVENTTYPE_CHOICE_NONE,
    SECURITYEVENTTYPE_CHOICE_ACCOUNTACCESS,
    SECURITYEVENTTYPE_CHOICE_AUTHENTICATION,
    SECURITYEVENTTYPE_CHOICE_INTEGRITY,
    SECURITYEVENTTYPE_CHOICE_AUDITMANAGEMENT,
    SECURITYEVENTTYPE_CHOICE_FILEMANAGEMENT,
    SECURITYEVENTTYPE_CHOICE_KEYMANAGEMENT,
    SECURITYEVENTTYPE_CHOICE_POLICYMANAGEMENT,
    SECURITYEVENTTYPE_CHOICE_SYSTEM,
    SECURITYEVENTTYPE_CHOICE_INTRUSIONDETECTION,
    SECURITYEVENTTYPE_CHOICE_SANITIZATION
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual SecurityEventTypeChoice getSecurityEventTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getSecurityEventTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setSecurityEventTypeChoiceOrdinal(SecurityEventTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AccountAccess.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AccountAccess.
    */
  virtual const uci::type::SecurityAccessType& getAccountAccess() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AccountAccess.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AccountAccess.
    */
  virtual uci::type::SecurityAccessType& getAccountAccess() = 0;

  /** Sets the complex content identified by AccountAccess to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AccountAccess.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setAccountAccess(const uci::type::SecurityAccessType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AccountAccess.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AccountAccess, false otherwise.
    */
  virtual bool isAccountAccess() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AccountAccess.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AccountAccess.
    */
  virtual uci::type::SecurityAccessType& chooseAccountAccess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Authentication.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Authentication.
    */
  virtual const uci::type::SecurityAuthenticationType& getAuthentication() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Authentication.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Authentication.
    */
  virtual uci::type::SecurityAuthenticationType& getAuthentication() = 0;

  /** Sets the complex content identified by Authentication to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Authentication.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setAuthentication(const uci::type::SecurityAuthenticationType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Authentication.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Authentication, false otherwise.
    */
  virtual bool isAuthentication() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Authentication.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Authentication.
    */
  virtual uci::type::SecurityAuthenticationType& chooseAuthentication(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Integrity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Integrity.
    */
  virtual const uci::type::SecurityIntegrityType& getIntegrity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Integrity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Integrity.
    */
  virtual uci::type::SecurityIntegrityType& getIntegrity() = 0;

  /** Sets the complex content identified by Integrity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Integrity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setIntegrity(const uci::type::SecurityIntegrityType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Integrity.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Integrity, false otherwise.
    */
  virtual bool isIntegrity() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Integrity.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Integrity.
    */
  virtual uci::type::SecurityIntegrityType& chooseIntegrity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AuditManagement.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AuditManagement.
    */
  virtual const uci::type::SecurityAuditManagementType& getAuditManagement() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AuditManagement.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AuditManagement.
    */
  virtual uci::type::SecurityAuditManagementType& getAuditManagement() = 0;

  /** Sets the complex content identified by AuditManagement to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AuditManagement.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setAuditManagement(const uci::type::SecurityAuditManagementType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AuditManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AuditManagement, false
    *      otherwise.
    */
  virtual bool isAuditManagement() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AuditManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AuditManagement.
    */
  virtual uci::type::SecurityAuditManagementType& chooseAuditManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FileManagement.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FileManagement.
    */
  virtual const uci::type::SecurityFileManagementType& getFileManagement() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FileManagement.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FileManagement.
    */
  virtual uci::type::SecurityFileManagementType& getFileManagement() = 0;

  /** Sets the complex content identified by FileManagement to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FileManagement.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setFileManagement(const uci::type::SecurityFileManagementType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FileManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FileManagement, false otherwise.
    */
  virtual bool isFileManagement() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FileManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FileManagement.
    */
  virtual uci::type::SecurityFileManagementType& chooseFileManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by KeyManagement.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by KeyManagement.
    */
  virtual const uci::type::SecurityKeyManagementType& getKeyManagement() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by KeyManagement.
    *
    * @return A reference to the accessor that provides access to the complex content identified by KeyManagement.
    */
  virtual uci::type::SecurityKeyManagementType& getKeyManagement() = 0;

  /** Sets the complex content identified by KeyManagement to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by KeyManagement.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setKeyManagement(const uci::type::SecurityKeyManagementType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by KeyManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by KeyManagement, false otherwise.
    */
  virtual bool isKeyManagement() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by KeyManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by KeyManagement.
    */
  virtual uci::type::SecurityKeyManagementType& chooseKeyManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PolicyManagement.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PolicyManagement.
    */
  virtual const uci::type::SecurityPolicyManagementType& getPolicyManagement() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PolicyManagement.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PolicyManagement.
    */
  virtual uci::type::SecurityPolicyManagementType& getPolicyManagement() = 0;

  /** Sets the complex content identified by PolicyManagement to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PolicyManagement.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setPolicyManagement(const uci::type::SecurityPolicyManagementType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PolicyManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PolicyManagement, false
    *      otherwise.
    */
  virtual bool isPolicyManagement() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by PolicyManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PolicyManagement.
    */
  virtual uci::type::SecurityPolicyManagementType& choosePolicyManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by System.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by System.
    */
  virtual const uci::type::SecuritySystemType& getSystem() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by System.
    *
    * @return A reference to the accessor that provides access to the complex content identified by System.
    */
  virtual uci::type::SecuritySystemType& getSystem() = 0;

  /** Sets the complex content identified by System to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by System.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setSystem(const uci::type::SecuritySystemType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by System.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by System, false otherwise.
    */
  virtual bool isSystem() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by System.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by System.
    */
  virtual uci::type::SecuritySystemType& chooseSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * IntrusionDetection.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      IntrusionDetection.
    */
  virtual const uci::type::SecurityIntrusionDetectionType& getIntrusionDetection() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by IntrusionDetection.
    *
    * @return A reference to the accessor that provides access to the complex content identified by IntrusionDetection.
    */
  virtual uci::type::SecurityIntrusionDetectionType& getIntrusionDetection() = 0;

  /** Sets the complex content identified by IntrusionDetection to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by IntrusionDetection.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setIntrusionDetection(const uci::type::SecurityIntrusionDetectionType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by IntrusionDetection.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by IntrusionDetection, false
    *      otherwise.
    */
  virtual bool isIntrusionDetection() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by IntrusionDetection.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by IntrusionDetection.
    */
  virtual uci::type::SecurityIntrusionDetectionType& chooseIntrusionDetection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Sanitization.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Sanitization.
    */
  virtual const uci::type::SecuritySanitizationType& getSanitization() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Sanitization.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Sanitization.
    */
  virtual uci::type::SecuritySanitizationType& getSanitization() = 0;

  /** Sets the complex content identified by Sanitization to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Sanitization.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityEventType& setSanitization(const uci::type::SecuritySanitizationType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Sanitization.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Sanitization, false otherwise.
    */
  virtual bool isSanitization() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Sanitization.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Sanitization.
    */
  virtual uci::type::SecuritySanitizationType& chooseSanitization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SecurityEventType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SecurityEventType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SecurityEventType to copy from.
    */
  SecurityEventType(const SecurityEventType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SecurityEventType to the contents of the SecurityEventType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SecurityEventType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SecurityEventType.
    * @return A reference to this SecurityEventType.
    */
  SecurityEventType& operator=(const SecurityEventType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SECURITYEVENTTYPE_H

