/** @file AirDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_AIRDATATYPE_H
#define UCI_TYPE_AIRDATATYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/FloatAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AltitudeBarometricType.h"
#include "uci/type/AngleHalfType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/SpeedType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AirDataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AirDataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirDataType.
    */
  static UCI_EXPORT AirDataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AirDataType initializing the data accessed by the new AirDataType using the data
    * accessed by the specified AirDataType (cloning).
    *
    * @param accessor The AirDataType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created AirDataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirDataType.
    */
  static UCI_EXPORT AirDataType& create(const AirDataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AirDataType. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The AirDataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AirDataType& accessor);

  /** Returns this accessor's type constant, i.e. airDataType.
    *
    * @return This accessor's type constant, i.e. airDataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::airDataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AirDataType.
    *
    * @return The version that was initialized from the uci:version attribute of AirDataType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AirDataType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by IndicatedBaroAltitude.
    *
    * @return The value of the simple primitive data type identified by IndicatedBaroAltitude.
    */
  virtual uci::type::AltitudeBarometricTypeValue getIndicatedBaroAltitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IndicatedBaroAltitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& setIndicatedBaroAltitude(uci::type::AltitudeBarometricTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by BarometricAltitudeRate.
    *
    * @return The value of the simple primitive data type identified by BarometricAltitudeRate.
    */
  virtual xs::Float getBarometricAltitudeRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BarometricAltitudeRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& setBarometricAltitudeRate(xs::Float value) = 0;

  /** Returns whether the Element identified by BarometricAltitudeRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BarometricAltitudeRate is enabled or not.
    */
  virtual bool hasBarometricAltitudeRate() const = 0;

  /** Clears (disabled) the Element identified by BarometricAltitudeRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& clearBarometricAltitudeRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Kollsman.
    *
    * @return The value of the simple primitive data type identified by Kollsman.
    */
  virtual xs::Double getKollsman() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Kollsman.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& setKollsman(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TrueAirspeed.
    *
    * @return The value of the simple primitive data type identified by TrueAirspeed.
    */
  virtual uci::type::SpeedTypeValue getTrueAirspeed() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TrueAirspeed.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& setTrueAirspeed(uci::type::SpeedTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Alpha.
    *
    * @return The value of the simple primitive data type identified by Alpha.
    */
  virtual uci::type::AngleHalfTypeValue getAlpha() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Alpha.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& setAlpha(uci::type::AngleHalfTypeValue value) = 0;

  /** Returns whether the Element identified by Alpha exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Alpha is enabled or not.
    */
  virtual bool hasAlpha() const = 0;

  /** Clears (disabled) the Element identified by Alpha.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& clearAlpha() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Beta.
    *
    * @return The value of the simple primitive data type identified by Beta.
    */
  virtual uci::type::AngleHalfTypeValue getBeta() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Beta.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& setBeta(uci::type::AngleHalfTypeValue value) = 0;

  /** Returns whether the Element identified by Beta exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Beta is enabled or not.
    */
  virtual bool hasBeta() const = 0;

  /** Clears (disabled) the Element identified by Beta.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& clearBeta() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @return The value of the simple primitive data type identified by Timestamp.
    */
  virtual uci::type::DateTimeTypeValue getTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& setTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by Timestamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Timestamp is enabled or not.
    */
  virtual bool hasTimestamp() const = 0;

  /** Clears (disabled) the Element identified by Timestamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirDataType& clearTimestamp() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AirDataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AirDataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AirDataType to copy from.
    */
  AirDataType(const AirDataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AirDataType to the contents of the AirDataType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AirDataType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this AirDataType.
    * @return A reference to this AirDataType.
    */
  AirDataType& operator=(const AirDataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_AIRDATATYPE_H

