/** @file PO_ComponentProductGeneratorType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_COMPONENTPRODUCTGENERATORTYPE_H
#define UCI_TYPE_PO_COMPONENTPRODUCTGENERATORTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ComponentControllabilityA_Type.h"
#include "PO_ComponentSettingsOutputProductSettingsType.h"
#include "PO_ComponentSettingsProductGeneratorSettingsType.h"
#include "PO_FPA_ID_Type.h"
#include "PO_ProductGeneratorID_Type.h"
#include "ProductOutputCapabilityImageryType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentProductGeneratorType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_ComponentProductGeneratorType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentProductGeneratorType.
    */
  static UCI_EXPORT PO_ComponentProductGeneratorType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_ComponentProductGeneratorType initializing the data accessed by the new
    * PO_ComponentProductGeneratorType using the data accessed by the specified PO_ComponentProductGeneratorType (cloning).
    *
    * @param accessor The PO_ComponentProductGeneratorType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created PO_ComponentProductGeneratorType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentProductGeneratorType.
    */
  static UCI_EXPORT PO_ComponentProductGeneratorType& create(const PO_ComponentProductGeneratorType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_ComponentProductGeneratorType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PO_ComponentProductGeneratorType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_ComponentProductGeneratorType& accessor);

  /** Returns this accessor's type constant, i.e. pO_ComponentProductGeneratorType.
    *
    * @return This accessor's type constant, i.e. pO_ComponentProductGeneratorType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_ComponentProductGeneratorType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_ComponentProductGeneratorType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_ComponentProductGeneratorType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_ComponentProductGeneratorType& accessor) = 0;

  /** Product generator produce products by consume the optical data produced by one or more Focal Plane Arrays (FPAs).
    * This field specifies those FPAs whose generated data is processed by this stage. This information is useful in
    * identifying which processing stage to configure if required. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_FPA_ID_Type, uci::type::accessorType::pO_FPA_ID_Type> FPA_ID;

  /** Indicates an output of the generator. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ProductOutputCapabilityImageryType, uci::type::accessorType::productOutputCapabilityImageryType> ComponentProductOutput;

  /** Indicates the settings values used for the product output for this subsystem. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsOutputProductSettingsType, uci::type::accessorType::pO_ComponentSettingsOutputProductSettingsType> OutputProductSettings;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GeneratorID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GeneratorID.
    */
  virtual const uci::type::PO_ProductGeneratorID_Type& getGeneratorID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GeneratorID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GeneratorID.
    */
  virtual uci::type::PO_ProductGeneratorID_Type& getGeneratorID() = 0;

  /** Sets the complex content identified by GeneratorID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GeneratorID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& setGeneratorID(const uci::type::PO_ProductGeneratorID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by FPA_ID.
    *
    * @return A const reference to the bounded list identified by FPA_ID.
    */
  virtual const uci::type::PO_ComponentProductGeneratorType::FPA_ID& getFPA_ID() const = 0;

  /** Returns a reference to the bounded list identified by FPA_ID.
    *
    * @return A reference to the bounded list identified by FPA_ID.
    */
  virtual uci::type::PO_ComponentProductGeneratorType::FPA_ID& getFPA_ID() = 0;

  /** Sets the bounded list identified by FPA_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& setFPA_ID(const uci::type::PO_ComponentProductGeneratorType::FPA_ID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Controllability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Controllability.
    */
  virtual const uci::type::ComponentControllabilityA_Type& getControllability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Controllability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Controllability.
    */
  virtual uci::type::ComponentControllabilityA_Type& getControllability() = 0;

  /** Sets the complex content identified by Controllability to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Controllability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& setControllability(const uci::type::ComponentControllabilityA_Type& value) = 0;

  /** Returns whether the Element identified by Controllability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Controllability is enabled or not.
    */
  virtual bool hasControllability() const = 0;

  /** Enables the Element identified by Controllability.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Controllability.
    */
  virtual uci::type::ComponentControllabilityA_Type& enableControllability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Controllability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& clearControllability() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductGeneratorSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductGeneratorSettings.
    */
  virtual const uci::type::PO_ComponentSettingsProductGeneratorSettingsType& getProductGeneratorSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ProductGeneratorSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ProductGeneratorSettings.
    */
  virtual uci::type::PO_ComponentSettingsProductGeneratorSettingsType& getProductGeneratorSettings() = 0;

  /** Sets the complex content identified by ProductGeneratorSettings to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductGeneratorSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& setProductGeneratorSettings(const uci::type::PO_ComponentSettingsProductGeneratorSettingsType& value) = 0;

  /** Returns whether the Element identified by ProductGeneratorSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductGeneratorSettings is enabled or not.
    */
  virtual bool hasProductGeneratorSettings() const = 0;

  /** Enables the Element identified by ProductGeneratorSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ProductGeneratorSettings.
    */
  virtual uci::type::PO_ComponentSettingsProductGeneratorSettingsType& enableProductGeneratorSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProductGeneratorSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& clearProductGeneratorSettings() = 0;

  /** Returns a const reference to the bounded list identified by ComponentProductOutput.
    *
    * @return A const reference to the bounded list identified by ComponentProductOutput.
    */
  virtual const uci::type::PO_ComponentProductGeneratorType::ComponentProductOutput& getComponentProductOutput() const = 0;

  /** Returns a reference to the bounded list identified by ComponentProductOutput.
    *
    * @return A reference to the bounded list identified by ComponentProductOutput.
    */
  virtual uci::type::PO_ComponentProductGeneratorType::ComponentProductOutput& getComponentProductOutput() = 0;

  /** Sets the bounded list identified by ComponentProductOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& setComponentProductOutput(const uci::type::PO_ComponentProductGeneratorType::ComponentProductOutput& value) = 0;

  /** Returns a const reference to the bounded list identified by OutputProductSettings.
    *
    * @return A const reference to the bounded list identified by OutputProductSettings.
    */
  virtual const uci::type::PO_ComponentProductGeneratorType::OutputProductSettings& getOutputProductSettings() const = 0;

  /** Returns a reference to the bounded list identified by OutputProductSettings.
    *
    * @return A reference to the bounded list identified by OutputProductSettings.
    */
  virtual uci::type::PO_ComponentProductGeneratorType::OutputProductSettings& getOutputProductSettings() = 0;

  /** Sets the bounded list identified by OutputProductSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentProductGeneratorType& setOutputProductSettings(const uci::type::PO_ComponentProductGeneratorType::OutputProductSettings& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_ComponentProductGeneratorType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_ComponentProductGeneratorType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_ComponentProductGeneratorType to copy from.
    */
  PO_ComponentProductGeneratorType(const PO_ComponentProductGeneratorType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_ComponentProductGeneratorType to the contents of the
    * PO_ComponentProductGeneratorType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PO_ComponentProductGeneratorType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this PO_ComponentProductGeneratorType.
    * @return A reference to this PO_ComponentProductGeneratorType.
    */
  PO_ComponentProductGeneratorType& operator=(const PO_ComponentProductGeneratorType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_COMPONENTPRODUCTGENERATORTYPE_H

