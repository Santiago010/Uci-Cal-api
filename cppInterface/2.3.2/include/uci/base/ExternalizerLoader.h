/** @file ExternalizerLoader.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:05 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_BASE_EXTERNALIZERLOADER_H
#define UCI_BASE_EXTERNALIZERLOADER_H

#include "Externalizer.h"
#include "export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

/** The ExternalizerLoader is responsible to obtaining and removing access to implementations of the Externalizer class. */
class ExternalizerLoader {
public:

  /** This method provides access to an Externalizer of the specified type.
    *
    * @param encoding The encoding of the Externalizer.
    * @param schemaVersion The OMS Schema Definition version of the Externalizer.
    * @param calApiVersion The OMS CAL API version of the Externalizer.
    * @return A pointer to an Externalizer that provides access to an Externalizer of the specified type.
    */
  virtual uci::base::Externalizer* getExternalizer(const std::string& encoding, const std::string& schemaVersion, const std::string& calApiVersion) = 0;

  /** This method destroys the specified Externalizer instance.
    *
    * @param externalizer The Externalizer to be destroyed.
    */
  virtual void destroyExternalizer(uci::base::Externalizer* externalizer) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ExternalizerLoader() {
  }

  /** The destructor [only available to derived classes]. */
  ~ExternalizerLoader() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ExternalizerLoader to copy from.
    */
  ExternalizerLoader(const ExternalizerLoader& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ExternalizerLoader to the contents of the ExternalizerLoader on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ExternalizerLoader on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ExternalizerLoader.
    * @return A reference to this ExternalizerLoader.
    */
  ExternalizerLoader& operator=(const ExternalizerLoader& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace base
} // namespace uci

#ifdef __cplusplus
extern "C" {
#endif

/** Creates a new ExternalizerLoader.
  *
  * @returns The newly created ExternalizerLoader.
  */
UCI_EXPORT uci::base::ExternalizerLoader* uci_getExternalizerLoader();

/** Destroys a ExternalizerLoader.
  *
  * @param externalizerLoader The ExternalizerLoader to be destroyed.
  */
UCI_EXPORT void uci_destroyExternalizerLoader(uci::base::ExternalizerLoader* externalizerLoader);

#ifdef __cplusplus
}
#endif

#endif // UCI_BASE_EXTERNALIZERLOADER_H

