/** @file DateTimeAccessor.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:05 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_BASE_DATETIMEACCESSOR_H
#define UCI_BASE_DATETIMEACCESSOR_H

#include "Accessor.h"
#include "../../xs/type/simpleXmlSchemaPrimitives.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

/** The DateTimeAccessor accessor class is used to provide access to uci::xs::DateTime data types. */
class DateTimeAccessor : public virtual Accessor {
public:

  /** Returns this accessor's type constant, i.e. dateTimeAccessor.
    *
    * @return This accessor's type constant, i.e. dateTimeAccessor.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::base::accessorType::dateTimeAccessor;
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DateTimeAccessor& accessor) = 0;

  /** Returns the DateTime accessed by this DateTimeAccessor.
    *
    * @return The DateTime accessed by this DateTimeAccessor.
    */
  virtual xs::DateTime getDateTimeValue() const = 0;

  /** Sets the DateTime accessed by this DateTimeAccessor to the specified DateTime.
    *
    * @param value The DateTime whose value will be used to set the value of the DateTime accessed by this accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::base::DateTimeAccessor& setDateTimeValue(xs::DateTime value) = 0;

  /** Assigns the value of the DateTime accessed by this DateTimeAccessor to the value of the DateTime accessed by the
    * DateTimeAccessor on the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The DateTimeAccessor on the right hand side (rhs) of the assignment operator which provides access to the
    *      DateTime whose value is to be used to set the DateTime that is accessed by this DateTimeAccessor.
    * @return A constant reference to this DateTimeAccessor.
    */
  virtual DateTimeAccessor& operator=(const DateTimeAccessor& rhs) {
    setDateTimeValue(rhs.getDateTimeValue());
    return *this;
  }

  /** Assigns the value of the DateTime accessed by this DateTimeAccessor to the value of the DateTime accessed by the
    * DateTimeAccessor on the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The DateTime whose value will be used to set the value of the DateTime accessed by this accessor.
    * @return A constant reference to this DateTimeAccessor.
    */
  virtual DateTimeAccessor& operator=(xs::DateTime rhs) {
    setDateTimeValue(rhs);
    return *this;
  }

  /** Conversion operator to convert this DateTimeAccessor to an xs::DateTime.
    *
    * @return No return specified, this conversion operator returns a xs::DateTime.
    */
  virtual operator xs::DateTime() const {
    return getDateTimeValue();
  }

protected:

  /** The constructor [only available to derived classes]. */
  DateTimeAccessor() {
  }

  /** The destructor [only available to derived classes]. */
  ~DateTimeAccessor() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DateTimeAccessor to copy from.
    */
  DateTimeAccessor(const DateTimeAccessor& rhs) {
    (void)rhs;
  }

};

} // namespace base
} // namespace uci

#endif // UCI_BASE_DATETIMEACCESSOR_H

