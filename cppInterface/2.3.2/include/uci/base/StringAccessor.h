/** @file StringAccessor.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:05 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_BASE_STRINGACCESSOR_H
#define UCI_BASE_STRINGACCESSOR_H

#include <string>

#include "Accessor.h"
#include "accessorType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

/** The StringAccessor is used to provide access to all strings. */
class StringAccessor : public virtual Accessor {
public:

  /** The constructor [only available to derived classes]. */
  StringAccessor() {
  }

  /** The destructor [only available to derived classes]. */
  ~StringAccessor() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The StringAccessor to copy from.
    */
  StringAccessor(const StringAccessor& rhs) {
    (void)rhs;
  }


  /** Returns this accessor's type constant, i.e. string.
    *
    * @return This accessor's type constant, i.e. string.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return xs::accessorType::string;
  }

  /** Returns the string accessed by this StringAccessor as a C++ standard library string.
    *
    * @return The string access by this StringAccessor returned as a C++ standard library string.
    */
  virtual std::string str() const = 0;

  /** Returns the string accessed by this StringAccessor as a C-string (i.e. const char *). The string that is returned is
    * owned by this StringAccessor. Thus the returned pointer should never be deleted. Doing so will produce undefined
    * results.
    *
    * @return The string access by this StringAccessor returned as a C-string (i.e. const char*). This pointer should never
    *      be deleted.
    * @note The returned pointer should not be deleted as the memory used to hold the C-string is owned by the CAL.
    */
  virtual const char* c_str() const = 0;


  /** Sets the string accessed by this StringAccessor to the contents of the specified value which is a C++ standard
    * library string.
    *
    * @param value The C++ standard library string whose contents are to be used to set the string accessed by this
    *      StringAccessor.
    * @return A reference to this StringAccessor.
    */
  virtual StringAccessor& setStringValue(const std::string& value) = 0;

  /** Sets the string accessed by this StringAccessor to the specified value which is a C-string (i.e. const char *).
    *
    * @param value The C-string (i.e. const char *) whose contents are to be used to set the string accessed by this
    *      StringAccessor.
    * @return A reference to this StringAccessor.
    */
  virtual StringAccessor& setStringValue(const char* value) = 0;

  /** Sets the value of the string accessed by this StringAccessor to the value of the string accessed by the
    * StringAccessor on the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The StringAccessor on the right hand side (rhs) of the assignment operator which provides access to the
    *      string whose contents are to be assigned to the string that is accessed by this StringAccessor.
    * @return A reference to this StringAccessor.
    */
  virtual StringAccessor& operator=(const StringAccessor& rhs) {
    setStringValue(rhs.str());
    return *this;
  }

  /** Sets the value of the string that is accessed by this StringAccessor to the value of the C++ standard library string
    * on the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The C++ standard library string on the right hand side (rhs) of the assignment operator whose contents are
    *      to be assigned to the string accessed by this StringAccessor.
    * @return A reference to this StringAccessor.
    */
  virtual StringAccessor& operator=(const std::string& rhs) {
    setStringValue(rhs);
    return *this;
  }

  /** Sets the value of the string that is accessed by this StringAccessor to the value of the C-string (i.e., const char*)
    * on the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The C-string on the right hand side (rhs) of the assignment operator whose contents are to be copied to
    *      the string accessed by this StringAccessor.
    * @return A reference to this StringAccessor.
    */
  virtual StringAccessor& operator=(const char* rhs) {
    setStringValue(rhs);
    return *this;
  }

  /** Returns the value accessed by this Accessor.
    *
    * @return The value accessed by this Accessor.
    */
  virtual operator std::string() const {
    return str();
  }

protected:


};

} // namespace base
} // namespace uci

#endif // UCI_BASE_STRINGACCESSOR_H

