/** @file Externalizer.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:05 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_BASE_EXTERNALIZER_H
#define UCI_BASE_EXTERNALIZER_H

#include <iostream>
#include <string>
#include <vector>

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class Accessor;

/** The Externalizer class provides support to export and import messages to and from an external format. The external
  * format can be independent of any internal CAL serialization and transport implementations.
  */
class Externalizer {
public:

  /** This method reads the content of the C++ standard library istream to import into the accessor.
    *
    * @param istream The C++ standard library istream whose content will be used to import into the accessor.
    * @param accessor The accessor to be written to.
    */
  virtual void read(std::istream& istream, uci::base::Accessor& accessor) = 0;

  /** This method reads the content of the C++ standard library string to import into the accessor.
    *
    * @param string The C++ standard library string whose content will be used to import into the accessor.
    * @param accessor The accessor to be written to.
    */
  virtual void read(const std::string& string, uci::base::Accessor& accessor) = 0;

  /** This method reads the content of the C++ standard library vector to import into the accessor.
    *
    * @param vector The C++ standard library vector whose content will be used to import into the accessor.
    * @param accessor The accessor to be written to.
    */
  virtual void read(const std::vector<uint8_t>& vector, uci::base::Accessor& accessor) = 0;

  /** This method reads the content of the accessor to export into the C++ standard library ostream.
    *
    * @param accessor The accessor whose content will be used to export into the ostream.
    * @param ostream The C++ standard library ostream to be written to.
    */
  virtual void write(const uci::base::Accessor& accessor, std::ostream& ostream) = 0;

  /** This method reads the content of the accessor to export into the C++ standard library string.
    *
    * @param accessor The accessor whose content will be used to export into the string.
    * @param string The C++ standard library string to be written to.
    */
  virtual void write(const uci::base::Accessor& accessor, std::string& string) = 0;

  /** This method reads the content of the accessor to export into the C++ standard library vector.
    *
    * @param accessor The accessor whose content will be used to export into the vector.
    * @param vector The C++ standard library vector to be written to.
    */
  virtual void write(const uci::base::Accessor& accessor, std::vector<uint8_t>& vector) = 0;

  /** This method returns whether this Externalizer only supports the read functions with OMS Messages.
    *
    * @return True if this Externalizer only supports the read functions with OMS Messages, false otherwise.
    */
  virtual bool messageReadOnly() const = 0;

  /** This method returns whether this Externalizer only supports the write functions with OMS Messages.
    *
    * @return True if this Externalizer only supports the write functions with OMS Messages, false otherwise.
    */
  virtual bool messageWriteOnly() const = 0;

  /** This method returns whether this Externalizer supports the read functions with objects.
    *
    * @return True if this Externalizer supports the read functions with objects, false otherwise.
    */
  virtual bool supportsObjectRead() const = 0;

  /** This method returns whether this Externalizer supports the write functions with objects.
    *
    * @return True if this Externalizer supports the write functions with objects, false otherwise.
    */
  virtual bool supportsObjectWrite() const = 0;

  /** This method returns the version of the OMS CAL API associated with this Externalizer.
    *
    * @return The Externalizer OMS CAL API version.
    */
  virtual std::string getCalApiVersion() const = 0;

  /** This method returns the encoding associated with this Externalizer.
    *
    * @return The Externalizer encoding.
    */
  virtual std::string getEncoding() const = 0;

  /** This method returns the version of the schema definition associated with this Externalizer.
    *
    * @return The Externalizer schema definition version.
    */
  virtual std::string getSchemaVersion() const = 0;

  /** This method returns the vendor associated with this Externalizer.
    *
    * @return The Externalizer vendor.
    */
  virtual std::string getVendor() const = 0;

  /** This method returns the vendor's version associated with this Externalizer.
    *
    * @return The Externalizer vendor's version.
    */
  virtual std::string getVendorVersion() const = 0;

protected:

  /** The constructor [only available to derived classes]. */
  Externalizer() {
  }

  /** The destructor [only available to derived classes]. */
  ~Externalizer() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The Externalizer to copy from.
    */
  Externalizer(const Externalizer& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this Externalizer to the contents of the Externalizer on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The Externalizer on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this Externalizer.
    * @return A reference to this Externalizer.
    */
  Externalizer& operator=(const Externalizer& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace base
} // namespace uci

#endif // UCI_BASE_EXTERNALIZER_H

