/** @file AbstractServiceBusConnection.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:05 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_BASE_ABSTRACTSERVICEBUSCONNECTION_H
#define UCI_BASE_ABSTRACTSERVICEBUSCONNECTION_H

#include <stdint.h>

#include <map>
#include <stdexcept>
#include <string>

#include "UCIException.h"
#include "UUID.h"
#include "export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnectionStatusListener;

/** The AbstractServiceBusConnection provides the fundamental support for sending and receiving messages. */
class AbstractServiceBusConnection {
public:

  /** The AbstractServiceBusConnectionStateEnum is an enumeration of the Abstract Service Bus Connection state. */
  enum AbstractServiceBusConnectionStateEnum {
    /** Abstract Service Bus Connection state is initializing. */
    INITIALIZING,

    /** Abstract Service Bus Connection state is normal. */
    NORMAL,

    /** Abstract Service Bus Connection state is degraded. */
    DEGRADED,

    /** Abstract Service Bus Connection state is inoperable. */
    INOPERABLE,

    /** Abstract Service Bus Connection state is failed. */
    FAILED

  };


  /** The AbstractServiceBusConnectionStatusData contains information about the current state of the Abstract Service Bus
    * Connection.
    */
  struct AbstractServiceBusConnectionStatusData {

    /** Current Abstract Service Bus Connection state. */
    AbstractServiceBusConnectionStateEnum state;

    /** Information concerning the current Abstract Service Bus Connection state. */
    std::string stateDetail;

  };


  /** The shutdown method is used to shutdown this Abstract Service Bus Connection. Once shutdown, this Abstract Service
    * Bus Connection can no longer be used.
    */
  virtual void shutdown() = 0;

  /** This method will return the system label, i.e. the name of the system.
    *
    * @return The system's label.
    */
  virtual std::string getMySystemLabel() const = 0;

  /** Returns the UUID that provides access to the UUID of the system that this AbstractServiceBusConnection is executing
    * on.
    *
    * @return The system UUID.
    */
  virtual uci::base::UUID getMySystemUUID() const = 0;

  /** Returns the UUID of the service that is invoking this method.
    *
    * @return The UUID of the Service that is invoking this method.
    */
  virtual uci::base::UUID getMyServiceUUID() const = 0;

  /** Returns the UUID of the subsystem that this AbstractServiceBusConnection is executing on.
    *
    * @return The UUID of the Subsystem that this AbstractServiceBusConnection is executing on.
    */
  virtual uci::base::UUID getMySubsystemUUID() const = 0;

  /** Returns the UUID of the component having the specified name.
    *
    * @param name The name of the component whose UUID is to be returned. The name must uniquely identify the component to
    *      avoid collision with other components and to retrieve the appropriate UUID.
    * @return The UUID of the component associated with the specified name.
    */
  virtual uci::base::UUID getMyComponentUUID(const std::string& name) const = 0;

  /** Returns the UUID of the capability having the specified name.
    *
    * @param name The name of the capability whose UUID is to be returned. The name must uniquely identify the capability
    *      to avoid collision with other capabilities and to retrieve the appropriate UUID.
    * @return The UUID of the capability associated with the specified name.
    */
  virtual uci::base::UUID getMyCapabilityUUID(const std::string& name) const = 0;

  /** Returns the version of the OMS schema that was used to generate this AbstractServiceBusConnection class.
    *
    * @return The schema version info.
    */
  virtual std::string getOmsSchemaVersion() const {
    return std::string("002.3");
  }

  /** Returns the version of the OMS API that the OMS Schema compiler that generated this AbstractServiceBusConnection
    * class complies with.
    *
    * @return The version of the OMS API that the OMS Schema compiler that generated this AbstractServiceBusConnection
    *      class complies with.
    */
  virtual std::string getOMSApiVersion() const {
    return std::string("2.3");
  }

  /** Returns the version of the OMS Schema Compiler specification that the OMS Schema compiler that generated this
    * AbstractServiceBusConnection class complies with.
    *
    * @return The version of the OMS Schema Compiler specification that the OMS Schema compiler that generated this
    *      AbstractServiceBusConnection class complies with.
    */
  virtual std::string getOmsSchemaCompilerVersion() const {
    return std::string("3.11.1");
  }

  /** Returns the version of Abstract Service Bus Connection that this AbstractServiceBusConnection class supports.
    *
    * @return The version of the Abstract Service Bus Connection.
    */
  virtual std::string getAbstractServiceBusConnectionVersion() const = 0;

  /** Returns the current status of this Abstract Service Bus Connection.
    *
    * @return The status of the Abstract Service Bus Connection.
    */
  virtual AbstractServiceBusConnectionStatusData getStatus() const = 0;

  /** Adds a listener to this Abstract Service Bus Connection to process changes in the operational status.
    *
    * @param listener The listener that will process changes to the operational status.
    */
  virtual void addStatusListener(AbstractServiceBusConnectionStatusListener& listener) = 0;

  /** Removes the specified listener from this Abstract Service Bus Connection.
    *
    * @param listener The listener that is to be removed from this Abstract Service Bus Connection.
    */
  virtual void removeStatusListener(AbstractServiceBusConnectionStatusListener& listener) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AbstractServiceBusConnection() {
  }

  /** The destructor [only available to derived classes]. */
  ~AbstractServiceBusConnection() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AbstractServiceBusConnection to copy from.
    */
  AbstractServiceBusConnection(const AbstractServiceBusConnection& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AbstractServiceBusConnection to the contents of the
    * AbstractServiceBusConnection on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The AbstractServiceBusConnection on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this AbstractServiceBusConnection.
    * @return A reference to this AbstractServiceBusConnection.
    */
  AbstractServiceBusConnection& operator=(const AbstractServiceBusConnection& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace base
} // namespace uci

#ifdef __cplusplus
extern "C" {
#endif

/** Creates a new Abstract Service Bus Connection
  *
  * @returns The newly created Abstract Service Bus Connection
  */
UCI_EXPORT uci::base::AbstractServiceBusConnection* uci_getAbstractServiceBusConnection(const std::string& serviceIdentifier, const std::string& typeOfAbstractServiceBusConnection);

#ifdef __cplusplus
}
#endif

#endif // UCI_BASE_ABSTRACTSERVICEBUSCONNECTION_H

