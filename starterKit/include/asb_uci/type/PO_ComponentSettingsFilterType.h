/** @file PO_ComponentSettingsFilterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_COMPONENTSETTINGSFILTERTYPE_H
#define ASB_UCI_TYPE_PO_COMPONENTSETTINGSFILTERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFilterType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentControlsA_Type;
class PO_ComponentSettingsBandpassFrequencyType;
class PO_FPA_ID_Type;
class PO_FilterID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentSettingsFilterType : public virtual uci::type::PO_ComponentSettingsFilterType {
public:
  /** Filters exist within the optical pathway that leads to one or more Focal Plane Arrays (FPAs). This field specifies
    * those FPAs that are associated with this filter, i.e. those FPAs that record light that passes through this filter.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using FPA_ID = asb_uci::base::BoundedList<uci::type::PO_FPA_ID_Type, uci::type::accessorType::pO_FPA_ID_Type, asb_uci::type::PO_FPA_ID_Type>;

  /** For those filters that operate over a range of frequencies (as opposed to those that operate on all frequencies),
    * this field is used to specify what those frequencies are. If not specified, then it is assumed that the filter does
    * not pass through light of any frequency. If a single frequency is desired, then set min and max to the same value.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using BandpassFrequency = asb_uci::base::BoundedList<uci::type::PO_ComponentSettingsBandpassFrequencyType, uci::type::accessorType::pO_ComponentSettingsBandpassFrequencyType, asb_uci::type::PO_ComponentSettingsBandpassFrequencyType>;

  /** The constructor */
  PO_ComponentSettingsFilterType();

  /** The copy constructor
    *
    * @param rhs The PO_ComponentSettingsFilterType to copy from
    */
  PO_ComponentSettingsFilterType(const PO_ComponentSettingsFilterType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_ComponentSettingsFilterType to move from
    */
  PO_ComponentSettingsFilterType(PO_ComponentSettingsFilterType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_ComponentSettingsFilterType to copy from
    * @return The PO_ComponentSettingsFilterType that was assigned
    */
  PO_ComponentSettingsFilterType& operator=(const PO_ComponentSettingsFilterType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_ComponentSettingsFilterType to move from
    * @return The PO_ComponentSettingsFilterType that was assigned
    */
  PO_ComponentSettingsFilterType& operator=(PO_ComponentSettingsFilterType&& rhs) = delete;

  /** The destructor */
  virtual ~PO_ComponentSettingsFilterType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ComponentSettingsFilterType whose contents are to be used to set this
    *      uci::type::PO_ComponentSettingsFilterType's contents.
    */
  void copy(const uci::type::PO_ComponentSettingsFilterType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ComponentSettingsFilterType whose contents are to be used to set this
    *      uci::type::PO_ComponentSettingsFilterType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_ComponentSettingsFilterType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the FilterID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FilterID field.
    */
  const uci::type::PO_FilterID_Type& getFilterID() const override;

  /** Returns the accessor to the FilterID field contained in this message fragment
    *
    * @return The reference to the accessor to the FilterID field.
    */
  uci::type::PO_FilterID_Type& getFilterID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentSettingsFilterType& setFilterID(const uci::type::PO_FilterID_Type& accessor) override;

  /** Returns the accessor to the FPA_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FPA_ID field.
    */
  const uci::type::PO_ComponentSettingsFilterType::FPA_ID& getFPA_ID() const override;

  /** Returns the accessor to the FPA_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the FPA_ID field.
    */
  uci::type::PO_ComponentSettingsFilterType::FPA_ID& getFPA_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentSettingsFilterType& setFPA_ID(const uci::type::PO_ComponentSettingsFilterType::FPA_ID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentControlsA_Type& getFilterControls_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ComponentControlsA_Type& getFilterControls() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentControlsA_Type& getFilterControls() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentSettingsFilterType& setFilterControls(const uci::type::ComponentControlsA_Type& accessor) override;

  /** Returns whether this optional field FilterControlsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFilterControls() const noexcept override;

  /** Enables the optional field such that getFilterControls will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentControlsA_Type& enableFilterControls(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentSettingsFilterType& clearFilterControls() noexcept override;

  /** Returns the accessor to the BandpassFrequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the BandpassFrequency field.
    */
  const uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& getBandpassFrequency() const override;

  /** Returns the accessor to the BandpassFrequency field contained in this message fragment
    *
    * @return The reference to the accessor to the BandpassFrequency field.
    */
  uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& getBandpassFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentSettingsFilterType& setBandpassFrequency(const uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_ComponentSettingsFilterType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFilterType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_ComponentSettingsFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PO_FilterID_Type> filterID_Accessor;
  std::unique_ptr<FPA_ID> fPA_ID_Accessor;
  std::unique_ptr<ComponentControlsA_Type> filterControls_Accessor;
  std::unique_ptr<BandpassFrequency> bandpassFrequency_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_COMPONENTSETTINGSFILTERTYPE_H
