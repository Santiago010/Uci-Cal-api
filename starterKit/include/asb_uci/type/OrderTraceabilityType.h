/** @file OrderTraceabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ORDERTRACEABILITYTYPE_H
#define ASB_UCI_TYPE_ORDERTRACEABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ROME_IdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrderTraceabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ACO_FileTraceabilityType;
class ACTDF_FileTraceabilityType;
class AOCO_TraceabilityType;
class ATO_FileTraceabilityType;
class CollectionDeckTraceabilityType;
class FileMetadataID_Type;
class RSTA_FileTraceabilityType;
class SystemID_Type;

/** Allows traceability to the source of this data. */
class OrderTraceabilityType : public virtual uci::type::OrderTraceabilityType {
public:
  /** Indicates a reference to an external (non-UCI) tasking source: the Air Tasking Order. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ATO = asb_uci::base::BoundedList<uci::type::ATO_FileTraceabilityType, uci::type::accessorType::aTO_FileTraceabilityType, asb_uci::type::ATO_FileTraceabilityType>;

  /** Indicates a reference to an external (non-UCI) tasking source: the Airspace Control Order. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ACO = asb_uci::base::BoundedList<uci::type::ACO_FileTraceabilityType, uci::type::accessorType::aCO_FileTraceabilityType, asb_uci::type::ACO_FileTraceabilityType>;

  /** Indicates a reference to an external (non-UCI) tasking source: Aircraft Collection Tasking Data Format. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ACTDF = asb_uci::base::BoundedList<uci::type::ACTDF_FileTraceabilityType, uci::type::accessorType::aCTDF_FileTraceabilityType, asb_uci::type::ACTDF_FileTraceabilityType>;

  /** Indicates a reference to an external (non-UCI) tasking source: the ISR supplement to the ATO known as the
    * Reconnaissance, Surveillance and Target Acquisition (RSTA). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using RSTA = asb_uci::base::BoundedList<uci::type::RSTA_FileTraceabilityType, uci::type::accessorType::rSTA_FileTraceabilityType, asb_uci::type::RSTA_FileTraceabilityType>;

  /** This element represents the unique ID of the mission specified by the ATO. ROME ID is a type of Mission ID, defined
    * by ACTDF where ROME is the acronym for Reconnaissance Operations Management Enterprise. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ROME_Identifier = asb_uci::base::BoundedList<uci::type::ROME_IdentityType, uci::type::accessorType::rOME_IdentityType, asb_uci::type::ROME_IdentityType>;

  /** Indicates a reference to an external (non-UCI) tasking source: the collection deck. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using CollectionDeck = asb_uci::base::BoundedList<uci::type::CollectionDeckTraceabilityType, uci::type::accessorType::collectionDeckTraceabilityType, asb_uci::type::CollectionDeckTraceabilityType>;

  /** Indicates a reference to an external (non-UCI) tasking source: Airborne Overhead Cooperative Operations.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AOCO = asb_uci::base::BoundedList<uci::type::AOCO_TraceabilityType, uci::type::accessorType::aOCO_TraceabilityType, asb_uci::type::AOCO_TraceabilityType>;

  /** Indicates a reference to an external (non-UCI) tasking source: Space Operations Directive. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SOD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Master Space Plan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using MSP_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Integrated Sensor Support Plan. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using ISSP_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Joint Integrated Prioritized Target List.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using JIPTL_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Joint Space Tasking Order. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using JSTO_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Planning Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using PLANORD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Operation Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using OPORD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Warning Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using WARNORD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Deployment Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using DEPORD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Alert Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using ALERTORD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Fragmentary Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using FRAGORD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Execute Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using EXORD_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Special Instructions. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SPINS_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source: Commanders Intent. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using COMMANDERS_INTENT_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source or other mission related file that does not fall into
    * any of the other categories. Recommended for restricted use for pending change package proposals or debug purposes.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OTHER_FILE_ID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** The constructor */
  OrderTraceabilityType();

  /** The copy constructor
    *
    * @param rhs The OrderTraceabilityType to copy from
    */
  OrderTraceabilityType(const OrderTraceabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OrderTraceabilityType to move from
    */
  OrderTraceabilityType(OrderTraceabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The OrderTraceabilityType to copy from
    * @return The OrderTraceabilityType that was assigned
    */
  OrderTraceabilityType& operator=(const OrderTraceabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OrderTraceabilityType to move from
    * @return The OrderTraceabilityType that was assigned
    */
  OrderTraceabilityType& operator=(OrderTraceabilityType&& rhs) = delete;

  /** The destructor */
  virtual ~OrderTraceabilityType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrderTraceabilityType whose contents are to be used to set this
    *      uci::type::OrderTraceabilityType's contents.
    */
  void copy(const uci::type::OrderTraceabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrderTraceabilityType whose contents are to be used to set this
    *      uci::type::OrderTraceabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OrderTraceabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the OrderSourceID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrderSourceID field.
    */
  const uci::type::SystemID_Type& getOrderSourceID() const override;

  /** Returns the accessor to the OrderSourceID field contained in this message fragment
    *
    * @return The reference to the accessor to the OrderSourceID field.
    */
  uci::type::SystemID_Type& getOrderSourceID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setOrderSourceID(const uci::type::SystemID_Type& accessor) override;

  /** Returns the accessor to the ATO field contained in this message fragment
    *
    * @return The const reference to the accessor to the ATO field.
    */
  const uci::type::OrderTraceabilityType::ATO& getATO() const override;

  /** Returns the accessor to the ATO field contained in this message fragment
    *
    * @return The reference to the accessor to the ATO field.
    */
  uci::type::OrderTraceabilityType::ATO& getATO() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setATO(const uci::type::OrderTraceabilityType::ATO& accessor) override;

  /** Returns the accessor to the ACO field contained in this message fragment
    *
    * @return The const reference to the accessor to the ACO field.
    */
  const uci::type::OrderTraceabilityType::ACO& getACO() const override;

  /** Returns the accessor to the ACO field contained in this message fragment
    *
    * @return The reference to the accessor to the ACO field.
    */
  uci::type::OrderTraceabilityType::ACO& getACO() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setACO(const uci::type::OrderTraceabilityType::ACO& accessor) override;

  /** Returns the accessor to the ACTDF field contained in this message fragment
    *
    * @return The const reference to the accessor to the ACTDF field.
    */
  const uci::type::OrderTraceabilityType::ACTDF& getACTDF() const override;

  /** Returns the accessor to the ACTDF field contained in this message fragment
    *
    * @return The reference to the accessor to the ACTDF field.
    */
  uci::type::OrderTraceabilityType::ACTDF& getACTDF() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setACTDF(const uci::type::OrderTraceabilityType::ACTDF& accessor) override;

  /** Returns the accessor to the RSTA field contained in this message fragment
    *
    * @return The const reference to the accessor to the RSTA field.
    */
  const uci::type::OrderTraceabilityType::RSTA& getRSTA() const override;

  /** Returns the accessor to the RSTA field contained in this message fragment
    *
    * @return The reference to the accessor to the RSTA field.
    */
  uci::type::OrderTraceabilityType::RSTA& getRSTA() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setRSTA(const uci::type::OrderTraceabilityType::RSTA& accessor) override;

  /** Returns the accessor to the ROME_Identifier field contained in this message fragment
    *
    * @return The const reference to the accessor to the ROME_Identifier field.
    */
  const uci::type::OrderTraceabilityType::ROME_Identifier& getROME_Identifier() const override;

  /** Returns the accessor to the ROME_Identifier field contained in this message fragment
    *
    * @return The reference to the accessor to the ROME_Identifier field.
    */
  uci::type::OrderTraceabilityType::ROME_Identifier& getROME_Identifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setROME_Identifier(const uci::type::OrderTraceabilityType::ROME_Identifier& accessor) override;

  /** Returns the accessor to the CollectionDeck field contained in this message fragment
    *
    * @return The const reference to the accessor to the CollectionDeck field.
    */
  const uci::type::OrderTraceabilityType::CollectionDeck& getCollectionDeck() const override;

  /** Returns the accessor to the CollectionDeck field contained in this message fragment
    *
    * @return The reference to the accessor to the CollectionDeck field.
    */
  uci::type::OrderTraceabilityType::CollectionDeck& getCollectionDeck() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setCollectionDeck(const uci::type::OrderTraceabilityType::CollectionDeck& accessor) override;

  /** Returns the accessor to the AOCO field contained in this message fragment
    *
    * @return The const reference to the accessor to the AOCO field.
    */
  const uci::type::OrderTraceabilityType::AOCO& getAOCO() const override;

  /** Returns the accessor to the AOCO field contained in this message fragment
    *
    * @return The reference to the accessor to the AOCO field.
    */
  uci::type::OrderTraceabilityType::AOCO& getAOCO() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setAOCO(const uci::type::OrderTraceabilityType::AOCO& accessor) override;

  /** Returns the accessor to the SOD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SOD_ID field.
    */
  const uci::type::OrderTraceabilityType::SOD_ID& getSOD_ID() const override;

  /** Returns the accessor to the SOD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the SOD_ID field.
    */
  uci::type::OrderTraceabilityType::SOD_ID& getSOD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setSOD_ID(const uci::type::OrderTraceabilityType::SOD_ID& accessor) override;

  /** Returns the accessor to the MSP_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MSP_ID field.
    */
  const uci::type::OrderTraceabilityType::MSP_ID& getMSP_ID() const override;

  /** Returns the accessor to the MSP_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the MSP_ID field.
    */
  uci::type::OrderTraceabilityType::MSP_ID& getMSP_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setMSP_ID(const uci::type::OrderTraceabilityType::MSP_ID& accessor) override;

  /** Returns the accessor to the ISSP_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ISSP_ID field.
    */
  const uci::type::OrderTraceabilityType::ISSP_ID& getISSP_ID() const override;

  /** Returns the accessor to the ISSP_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the ISSP_ID field.
    */
  uci::type::OrderTraceabilityType::ISSP_ID& getISSP_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setISSP_ID(const uci::type::OrderTraceabilityType::ISSP_ID& accessor) override;

  /** Returns the accessor to the JIPTL_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the JIPTL_ID field.
    */
  const uci::type::OrderTraceabilityType::JIPTL_ID& getJIPTL_ID() const override;

  /** Returns the accessor to the JIPTL_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the JIPTL_ID field.
    */
  uci::type::OrderTraceabilityType::JIPTL_ID& getJIPTL_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setJIPTL_ID(const uci::type::OrderTraceabilityType::JIPTL_ID& accessor) override;

  /** Returns the accessor to the JSTO_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the JSTO_ID field.
    */
  const uci::type::OrderTraceabilityType::JSTO_ID& getJSTO_ID() const override;

  /** Returns the accessor to the JSTO_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the JSTO_ID field.
    */
  uci::type::OrderTraceabilityType::JSTO_ID& getJSTO_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setJSTO_ID(const uci::type::OrderTraceabilityType::JSTO_ID& accessor) override;

  /** Returns the accessor to the PLANORD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the PLANORD_ID field.
    */
  const uci::type::OrderTraceabilityType::PLANORD_ID& getPLANORD_ID() const override;

  /** Returns the accessor to the PLANORD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the PLANORD_ID field.
    */
  uci::type::OrderTraceabilityType::PLANORD_ID& getPLANORD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setPLANORD_ID(const uci::type::OrderTraceabilityType::PLANORD_ID& accessor) override;

  /** Returns the accessor to the OPORD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OPORD_ID field.
    */
  const uci::type::OrderTraceabilityType::OPORD_ID& getOPORD_ID() const override;

  /** Returns the accessor to the OPORD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the OPORD_ID field.
    */
  uci::type::OrderTraceabilityType::OPORD_ID& getOPORD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setOPORD_ID(const uci::type::OrderTraceabilityType::OPORD_ID& accessor) override;

  /** Returns the accessor to the WARNORD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the WARNORD_ID field.
    */
  const uci::type::OrderTraceabilityType::WARNORD_ID& getWARNORD_ID() const override;

  /** Returns the accessor to the WARNORD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the WARNORD_ID field.
    */
  uci::type::OrderTraceabilityType::WARNORD_ID& getWARNORD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setWARNORD_ID(const uci::type::OrderTraceabilityType::WARNORD_ID& accessor) override;

  /** Returns the accessor to the DEPORD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the DEPORD_ID field.
    */
  const uci::type::OrderTraceabilityType::DEPORD_ID& getDEPORD_ID() const override;

  /** Returns the accessor to the DEPORD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the DEPORD_ID field.
    */
  uci::type::OrderTraceabilityType::DEPORD_ID& getDEPORD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setDEPORD_ID(const uci::type::OrderTraceabilityType::DEPORD_ID& accessor) override;

  /** Returns the accessor to the ALERTORD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ALERTORD_ID field.
    */
  const uci::type::OrderTraceabilityType::ALERTORD_ID& getALERTORD_ID() const override;

  /** Returns the accessor to the ALERTORD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the ALERTORD_ID field.
    */
  uci::type::OrderTraceabilityType::ALERTORD_ID& getALERTORD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setALERTORD_ID(const uci::type::OrderTraceabilityType::ALERTORD_ID& accessor) override;

  /** Returns the accessor to the FRAGORD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FRAGORD_ID field.
    */
  const uci::type::OrderTraceabilityType::FRAGORD_ID& getFRAGORD_ID() const override;

  /** Returns the accessor to the FRAGORD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the FRAGORD_ID field.
    */
  uci::type::OrderTraceabilityType::FRAGORD_ID& getFRAGORD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setFRAGORD_ID(const uci::type::OrderTraceabilityType::FRAGORD_ID& accessor) override;

  /** Returns the accessor to the EXORD_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EXORD_ID field.
    */
  const uci::type::OrderTraceabilityType::EXORD_ID& getEXORD_ID() const override;

  /** Returns the accessor to the EXORD_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the EXORD_ID field.
    */
  uci::type::OrderTraceabilityType::EXORD_ID& getEXORD_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setEXORD_ID(const uci::type::OrderTraceabilityType::EXORD_ID& accessor) override;

  /** Returns the accessor to the SPINS_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SPINS_ID field.
    */
  const uci::type::OrderTraceabilityType::SPINS_ID& getSPINS_ID() const override;

  /** Returns the accessor to the SPINS_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the SPINS_ID field.
    */
  uci::type::OrderTraceabilityType::SPINS_ID& getSPINS_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setSPINS_ID(const uci::type::OrderTraceabilityType::SPINS_ID& accessor) override;

  /** Returns the accessor to the COMMANDERS_INTENT_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the COMMANDERS_INTENT_ID field.
    */
  const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& getCOMMANDERS_INTENT_ID() const override;

  /** Returns the accessor to the COMMANDERS_INTENT_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the COMMANDERS_INTENT_ID field.
    */
  uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& getCOMMANDERS_INTENT_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setCOMMANDERS_INTENT_ID(const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& accessor) override;

  /** Returns the accessor to the OTHER_FILE_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OTHER_FILE_ID field.
    */
  const uci::type::OrderTraceabilityType::OTHER_FILE_ID& getOTHER_FILE_ID() const override;

  /** Returns the accessor to the OTHER_FILE_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the OTHER_FILE_ID field.
    */
  uci::type::OrderTraceabilityType::OTHER_FILE_ID& getOTHER_FILE_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrderTraceabilityType& setOTHER_FILE_ID(const uci::type::OrderTraceabilityType::OTHER_FILE_ID& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OrderTraceabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OrderTraceabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OrderTraceabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SystemID_Type> orderSourceID_Accessor;
  std::unique_ptr<ATO> aTO_Accessor;
  std::unique_ptr<ACO> aCO_Accessor;
  std::unique_ptr<ACTDF> aCTDF_Accessor;
  std::unique_ptr<RSTA> rSTA_Accessor;
  std::unique_ptr<ROME_Identifier> rOME_Identifier_Accessor;
  std::unique_ptr<CollectionDeck> collectionDeck_Accessor;
  std::unique_ptr<AOCO> aOCO_Accessor;
  std::unique_ptr<SOD_ID> sOD_ID_Accessor;
  std::unique_ptr<MSP_ID> mSP_ID_Accessor;
  std::unique_ptr<ISSP_ID> iSSP_ID_Accessor;
  std::unique_ptr<JIPTL_ID> jIPTL_ID_Accessor;
  std::unique_ptr<JSTO_ID> jSTO_ID_Accessor;
  std::unique_ptr<PLANORD_ID> pLANORD_ID_Accessor;
  std::unique_ptr<OPORD_ID> oPORD_ID_Accessor;
  std::unique_ptr<WARNORD_ID> wARNORD_ID_Accessor;
  std::unique_ptr<DEPORD_ID> dEPORD_ID_Accessor;
  std::unique_ptr<ALERTORD_ID> aLERTORD_ID_Accessor;
  std::unique_ptr<FRAGORD_ID> fRAGORD_ID_Accessor;
  std::unique_ptr<EXORD_ID> eXORD_ID_Accessor;
  std::unique_ptr<SPINS_ID> sPINS_ID_Accessor;
  std::unique_ptr<COMMANDERS_INTENT_ID> cOMMANDERS_INTENT_ID_Accessor;
  std::unique_ptr<OTHER_FILE_ID> oTHER_FILE_ID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ORDERTRACEABILITYTYPE_H
