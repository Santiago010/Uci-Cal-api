/** @file CapabilitySettingsCommandBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CAPABILITYSETTINGSCOMMANDBASETYPE_H
#define ASB_UCI_TYPE_CAPABILITYSETTINGSCOMMANDBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CommandBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilitySettingsCommandBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityPrecedenceType;
class CapabilityStateType;
class ForeignKeyType;
class MDF_CommandType;
class SubsystemID_Type;

/** The base type for all [Capability]SettingsCommand messages. */
class CapabilitySettingsCommandBaseType : public virtual uci::type::CapabilitySettingsCommandBaseType, public virtual CommandBaseType {
public:
  /** Indicates a command to deactivate the current Mission Data File and activate the MDF given by this element. If the
    * referenced MDF is already active, then this element indicates a command to activate a new file within one or more
    * subcategories of the current MDF. The use of a list here is for Capabilities, such as ESM, that require the
    * activation of different subcategories of dissimilar data sets and determining and creating all of the possible
    * combinations becomes unwieldy. This could be due to an MDF of scan tables where each scan table is applicable to a
    * particular region and changing more often, where other MDFs such as an EOB cover a much larger operating area and
    * change much less frequently. For the case of Capabilities requiring multiple active MDFs, deactivation of MDFs must
    * be controlled by the platform provider since activation of a new MDF deactivates the other, i.e. overwrites with a
    * new MDF. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActivateMDF = asb_uci::base::BoundedList<uci::type::MDF_CommandType, uci::type::accessorType::mDF_CommandType, asb_uci::type::MDF_CommandType>;

  /** Indicates a command to set relative precedence of the Capabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CapabilityPrecedence = asb_uci::base::BoundedList<uci::type::CapabilityPrecedenceType, uci::type::accessorType::capabilityPrecedenceType, asb_uci::type::CapabilityPrecedenceType>;

  /** Indicates a command to change the state of the Capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CapabilityState = asb_uci::base::BoundedList<uci::type::CapabilityStateType, uci::type::accessorType::capabilityStateType, asb_uci::type::CapabilityStateType>;

  /** The constructor */
  CapabilitySettingsCommandBaseType();

  /** The copy constructor
    *
    * @param rhs The CapabilitySettingsCommandBaseType to copy from
    */
  CapabilitySettingsCommandBaseType(const CapabilitySettingsCommandBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CapabilitySettingsCommandBaseType to move from
    */
  CapabilitySettingsCommandBaseType(CapabilitySettingsCommandBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CapabilitySettingsCommandBaseType to copy from
    * @return The CapabilitySettingsCommandBaseType that was assigned
    */
  CapabilitySettingsCommandBaseType& operator=(const CapabilitySettingsCommandBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CapabilitySettingsCommandBaseType to move from
    * @return The CapabilitySettingsCommandBaseType that was assigned
    */
  CapabilitySettingsCommandBaseType& operator=(CapabilitySettingsCommandBaseType&& rhs) = delete;

  /** The destructor */
  ~CapabilitySettingsCommandBaseType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CapabilitySettingsCommandBaseType whose contents are to be used to set this
    *      uci::type::CapabilitySettingsCommandBaseType's contents.
    */
  void copy(const uci::type::CapabilitySettingsCommandBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CapabilitySettingsCommandBaseType whose contents are to be used to set this
    *      uci::type::CapabilitySettingsCommandBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CapabilitySettingsCommandBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SubsystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubsystemID field.
    */
  const uci::type::SubsystemID_Type& getSubsystemID() const override;

  /** Returns the accessor to the SubsystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SubsystemID field.
    */
  uci::type::SubsystemID_Type& getSubsystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilitySettingsCommandBaseType& setSubsystemID(const uci::type::SubsystemID_Type& accessor) override;

  /** Returns the accessor to the ActivateMDF field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivateMDF field.
    */
  const uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& getActivateMDF() const override;

  /** Returns the accessor to the ActivateMDF field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivateMDF field.
    */
  uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& getActivateMDF() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilitySettingsCommandBaseType& setActivateMDF(const uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& accessor) override;

  /** Returns the accessor to the CapabilityPrecedence field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityPrecedence field.
    */
  const uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& getCapabilityPrecedence() const override;

  /** Returns the accessor to the CapabilityPrecedence field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityPrecedence field.
    */
  uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& getCapabilityPrecedence() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilitySettingsCommandBaseType& setCapabilityPrecedence(const uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& accessor) override;

  /** Returns the accessor to the CapabilityState field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityState field.
    */
  const uci::type::CapabilitySettingsCommandBaseType::CapabilityState& getCapabilityState() const override;

  /** Returns the accessor to the CapabilityState field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityState field.
    */
  uci::type::CapabilitySettingsCommandBaseType::CapabilityState& getCapabilityState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilitySettingsCommandBaseType& setCapabilityState(const uci::type::CapabilitySettingsCommandBaseType::CapabilityState& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getRepresentationKey_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getRepresentationKey() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getRepresentationKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilitySettingsCommandBaseType& setRepresentationKey(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field RepresentationKeyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRepresentationKey() const noexcept override;

  /** Enables the optional field such that getRepresentationKey will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableRepresentationKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilitySettingsCommandBaseType& clearRepresentationKey() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CapabilitySettingsCommandBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilitySettingsCommandBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CapabilitySettingsCommandBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SubsystemID_Type> subsystemID_Accessor;
  std::unique_ptr<ActivateMDF> activateMDF_Accessor;
  std::unique_ptr<CapabilityPrecedence> capabilityPrecedence_Accessor;
  std::unique_ptr<CapabilityState> capabilityState_Accessor;
  std::unique_ptr<ForeignKeyType> representationKey_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CAPABILITYSETTINGSCOMMANDBASETYPE_H
