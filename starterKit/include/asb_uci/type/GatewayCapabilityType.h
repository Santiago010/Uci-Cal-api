/** @file GatewayCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_GATEWAYCAPABILITYTYPE_H
#define ASB_UCI_TYPE_GATEWAYCAPABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommDataFormatEnum.h"
#include "asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "asb_uci/type/ProductTypeEnum.h"
#include "uci/type/GatewayCapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommProfileID_Type;
class ForeignKeyType;
class GatewayCapabilityOptionsType;

/** Utilized to describe a Gateway Capability which is synonymous with a Message Processor and-or a product disseminator. */
class GatewayCapabilityType : public virtual uci::type::GatewayCapabilityType, public virtual CommandableCapabilityDeclarationType {
public:
  /** Indicates a Profile (preset) that is applicable to this Capability. Only the profiles currently available and
    * applicable to this Capability should be listed. A Profile (or preset) is a logical collection of data, whose
    * implementation is not specified, that is used to tailor, configure or otherwise affect the behavior of a Capability.
    * Profiles can vary from mission to mission or even by phases of a single mission. They are generally developed in
    * pre-mission planning and are unique for each Subsystem model. Their content is not standardized by UCI, but the
    * mechanism for advertising their availability and activating them is. Their content is abstracted by the UCI concept
    * of Capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AvailableProfileID = asb_uci::base::BoundedList<uci::type::CommProfileID_Type, uci::type::accessorType::commProfileID_Type, asb_uci::type::CommProfileID_Type>;

  /** If specified in the capability that the type is Product then, SupportedProduct should be filled. The product type
    * that the ProductProcessingPlan applies to. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 81]
    */
  using SupportedProduct = asb_uci::base::BoundedList<uci::type::ProductTypeEnum, uci::type::accessorType::productTypeEnum, asb_uci::type::ProductTypeEnum>;

  /** The constructor */
  GatewayCapabilityType();

  /** The copy constructor
    *
    * @param rhs The GatewayCapabilityType to copy from
    */
  GatewayCapabilityType(const GatewayCapabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The GatewayCapabilityType to move from
    */
  GatewayCapabilityType(GatewayCapabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The GatewayCapabilityType to copy from
    * @return The GatewayCapabilityType that was assigned
    */
  GatewayCapabilityType& operator=(const GatewayCapabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The GatewayCapabilityType to move from
    * @return The GatewayCapabilityType that was assigned
    */
  GatewayCapabilityType& operator=(GatewayCapabilityType&& rhs) = delete;

  /** The destructor */
  ~GatewayCapabilityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::GatewayCapabilityType whose contents are to be used to set this
    *      uci::type::GatewayCapabilityType's contents.
    */
  void copy(const uci::type::GatewayCapabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::GatewayCapabilityType whose contents are to be used to set this
    *      uci::type::GatewayCapabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::GatewayCapabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  const uci::type::CommDataFormatEnum& getCapabilityType() const override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  uci::type::CommDataFormatEnum& getCapabilityType() override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param accessor The accessor to use to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayCapabilityType& setCapabilityType(const uci::type::CommDataFormatEnum& accessor) override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param value The new value to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayCapabilityType& setCapabilityType(uci::type::CommDataFormatEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getSubCapabilityType_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getSubCapabilityType() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getSubCapabilityType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayCapabilityType& setSubCapabilityType(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field SubCapabilityTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubCapabilityType() const noexcept override;

  /** Enables the optional field such that getSubCapabilityType will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableSubCapabilityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayCapabilityType& clearSubCapabilityType() noexcept override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityOptions field.
    */
  const uci::type::GatewayCapabilityOptionsType& getCapabilityOptions() const override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityOptions field.
    */
  uci::type::GatewayCapabilityOptionsType& getCapabilityOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayCapabilityType& setCapabilityOptions(const uci::type::GatewayCapabilityOptionsType& accessor) override;

  /** Returns the accessor to the AvailableProfileID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AvailableProfileID field.
    */
  const uci::type::GatewayCapabilityType::AvailableProfileID& getAvailableProfileID() const override;

  /** Returns the accessor to the AvailableProfileID field contained in this message fragment
    *
    * @return The reference to the accessor to the AvailableProfileID field.
    */
  uci::type::GatewayCapabilityType::AvailableProfileID& getAvailableProfileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayCapabilityType& setAvailableProfileID(const uci::type::GatewayCapabilityType::AvailableProfileID& accessor) override;

  /** Returns the accessor to the SupportedProduct field contained in this message fragment
    *
    * @return The const reference to the accessor to the SupportedProduct field.
    */
  const uci::type::GatewayCapabilityType::SupportedProduct& getSupportedProduct() const override;

  /** Returns the accessor to the SupportedProduct field contained in this message fragment
    *
    * @return The reference to the accessor to the SupportedProduct field.
    */
  uci::type::GatewayCapabilityType::SupportedProduct& getSupportedProduct() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayCapabilityType& setSupportedProduct(const uci::type::GatewayCapabilityType::SupportedProduct& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<GatewayCapabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::GatewayCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CommDataFormatEnum> capabilityType_Accessor;
  std::unique_ptr<ForeignKeyType> subCapabilityType_Accessor;
  std::unique_ptr<GatewayCapabilityOptionsType> capabilityOptions_Accessor;
  std::unique_ptr<AvailableProfileID> availableProfileID_Accessor;
  std::unique_ptr<SupportedProduct> supportedProduct_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_GATEWAYCAPABILITYTYPE_H
