/** @file ACFTB_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ACFTB_TYPE_H
#define ASB_UCI_TYPE_ACFTB_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/AlphanumericSpaceString11OnlyType.h"
#include "../../../include/asb_uci/type/AlphanumericSpaceString7OnlyType.h"
#include "../../../include/asb_uci/type/NumericSpaceString13OnlyType.h"
#include "../../../include/asb_uci/type/NumericSpaceString2OnlyType.h"
#include "../../../include/asb_uci/type/NumericSpaceString6OnlyType.h"
#include "../../../include/asb_uci/type/NumericSpaceString7OnlyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ACFTB_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ACFTB_Type : public virtual uci::type::ACFTB_Type {
public:
  /** The constructor */
  ACFTB_Type();

  /** The copy constructor
    *
    * @param rhs The ACFTB_Type to copy from
    */
  ACFTB_Type(const ACFTB_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ACFTB_Type to move from
    */
  ACFTB_Type(ACFTB_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ACFTB_Type to copy from
    * @return The ACFTB_Type that was assigned
    */
  ACFTB_Type& operator=(const ACFTB_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ACFTB_Type to move from
    * @return The ACFTB_Type that was assigned
    */
  ACFTB_Type& operator=(ACFTB_Type&& rhs) = delete;

  /** The destructor */
  virtual ~ACFTB_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ACFTB_Type whose contents are to be used to set this uci::type::ACFTB_Type's contents.
    */
  void copy(const uci::type::ACFTB_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ACFTB_Type whose contents are to be used to set this uci::type::ACFTB_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ACFTB_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11OnlyType& getAC_MSN_Identifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericSpaceString11OnlyType& getAC_MSN_Identifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11OnlyType& getAC_MSN_Identifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_MSN_Identifier(const uci::type::AlphanumericSpaceString11OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_MSN_Identifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_MSN_Identifier(const char* value) override;

  /** Returns whether this optional field aC_MSN_Identifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAC_MSN_Identifier() const noexcept override;

  /** Enables the optional field such that getAC_MSN_Identifier will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11OnlyType& enableAC_MSN_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearAC_MSN_Identifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11OnlyType& getAC_TAIL_NO_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericSpaceString11OnlyType& getAC_TAIL_NO() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11OnlyType& getAC_TAIL_NO() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_TAIL_NO(const uci::type::AlphanumericSpaceString11OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_TAIL_NO(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_TAIL_NO(const char* value) override;

  /** Returns whether this optional field aC_TAIL_NO_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAC_TAIL_NO() const noexcept override;

  /** Enables the optional field such that getAC_TAIL_NO will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11OnlyType& enableAC_TAIL_NO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearAC_TAIL_NO() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString13OnlyType& getAC_TO_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString13OnlyType& getAC_TO() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString13OnlyType& getAC_TO() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_TO(const uci::type::NumericSpaceString13OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_TO(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setAC_TO(const char* value) override;

  /** Returns whether this optional field aC_TO_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAC_TO() const noexcept override;

  /** Enables the optional field such that getAC_TO will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString13OnlyType& enableAC_TO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearAC_TO() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString7OnlyType& getSENSOR_Identifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericSpaceString7OnlyType& getSENSOR_Identifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString7OnlyType& getSENSOR_Identifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSENSOR_Identifier(const uci::type::AlphanumericSpaceString7OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSENSOR_Identifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSENSOR_Identifier(const char* value) override;

  /** Returns whether this optional field sENSOR_Identifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSENSOR_Identifier() const noexcept override;

  /** Enables the optional field such that getSENSOR_Identifier will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString7OnlyType& enableSENSOR_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearSENSOR_Identifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString2OnlyType& getSCENE_SOURCE_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString2OnlyType& getSCENE_SOURCE() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString2OnlyType& getSCENE_SOURCE() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSCENE_SOURCE(const uci::type::NumericSpaceString2OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSCENE_SOURCE(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSCENE_SOURCE(const char* value) override;

  /** Returns whether this optional field sCENE_SOURCE_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSCENE_SOURCE() const noexcept override;

  /** Enables the optional field such that getSCENE_SOURCE will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString2OnlyType& enableSCENE_SOURCE(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearSCENE_SOURCE() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString7OnlyType& getSCNUM_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString7OnlyType& getSCNUM() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString7OnlyType& getSCNUM() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSCNUM(const uci::type::NumericSpaceString7OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSCNUM(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setSCNUM(const char* value) override;

  /** Returns whether this optional field sCNUM_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSCNUM() const noexcept override;

  /** Enables the optional field such that getSCNUM will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString7OnlyType& enableSCNUM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearSCNUM() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString7OnlyType& getIMHOSTNO_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString7OnlyType& getIMHOSTNO() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString7OnlyType& getIMHOSTNO() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setIMHOSTNO(const uci::type::NumericSpaceString7OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setIMHOSTNO(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setIMHOSTNO(const char* value) override;

  /** Returns whether this optional field iMHOSTNO_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIMHOSTNO() const noexcept override;

  /** Enables the optional field such that getIMHOSTNO will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString7OnlyType& enableIMHOSTNO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearIMHOSTNO() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString6OnlyType& getIMREQ_Identifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString6OnlyType& getIMREQ_Identifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString6OnlyType& getIMREQ_Identifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setIMREQ_Identifier(const uci::type::NumericSpaceString6OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setIMREQ_Identifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& setIMREQ_Identifier(const char* value) override;

  /** Returns whether this optional field iMREQ_Identifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIMREQ_Identifier() const noexcept override;

  /** Enables the optional field such that getIMREQ_Identifier will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString6OnlyType& enableIMREQ_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ACFTB_Type& clearIMREQ_Identifier() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ACFTB_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ACFTB_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ACFTB_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<AlphanumericSpaceString11OnlyType> aC_MSN_Identifier_Accessor;
  std::unique_ptr<AlphanumericSpaceString11OnlyType> aC_TAIL_NO_Accessor;
  std::unique_ptr<NumericSpaceString13OnlyType> aC_TO_Accessor;
  std::unique_ptr<AlphanumericSpaceString7OnlyType> sENSOR_Identifier_Accessor;
  std::unique_ptr<NumericSpaceString2OnlyType> sCENE_SOURCE_Accessor;
  std::unique_ptr<NumericSpaceString7OnlyType> sCNUM_Accessor;
  std::unique_ptr<NumericSpaceString7OnlyType> iMHOSTNO_Accessor;
  std::unique_ptr<NumericSpaceString6OnlyType> iMREQ_Identifier_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ACFTB_TYPE_H
