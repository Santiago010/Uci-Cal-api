/** @file SignalType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SIGNALTYPE_H
#define ASB_UCI_TYPE_SIGNALTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/EmitterUrgencyEnum.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/LockIndicatorEnum.h"
#include "../../../include/asb_uci/type/MeasurementQualityEnum.h"
#include "../../../include/asb_uci/type/MobilityEnum.h"
#include "../../../include/asb_uci/type/ModulationEnum.h"
#include "../../../include/asb_uci/type/SignalReportStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SignalType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityByType;
class EmitterFunctionType;
class ForeignKeyType;
class ModulationParameterType;
class PulseDataID_Type;
class SignalEmitterKinematicsType;
class SignalID_Type;
class SignalIdentityType;
class SignalNavDataType;
class SignalParametricsType;
class SignalRemoveInfoType;
class SignalSourceType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SignalType : public virtual uci::type::SignalType {
public:
  /** Indicates the unique ID of a PulseData collection associated with the Signal. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using AssociatedPulseDataID = asb_uci::base::BoundedList<uci::type::PulseDataID_Type, uci::type::accessorType::pulseDataID_Type, asb_uci::type::PulseDataID_Type>;

  /** Indicates the kinematic state of the collecting system and antenna at the time of collection of the Signal.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CollectorKinematics = asb_uci::base::BoundedList<uci::type::SignalNavDataType, uci::type::accessorType::signalNavDataType, asb_uci::type::SignalNavDataType>;

  /** Indicates the modulation of the signal. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 62]
    */
  using Modulation = asb_uci::base::BoundedList<uci::type::ModulationEnum, uci::type::accessorType::modulationEnum, asb_uci::type::ModulationEnum>;

  /** Indicates a custom modulation parameter that is not covered by other elements in the Signal data structure. This will
    * typically be used to fully cover the fields defined in other interoperability standards such as the JICD.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ModulationParameter = asb_uci::base::BoundedList<uci::type::ModulationParameterType, uci::type::accessorType::modulationParameterType, asb_uci::type::ModulationParameterType>;

  /** The constructor */
  SignalType();

  /** The copy constructor
    *
    * @param rhs The SignalType to copy from
    */
  SignalType(const SignalType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SignalType to move from
    */
  SignalType(SignalType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SignalType to copy from
    * @return The SignalType that was assigned
    */
  SignalType& operator=(const SignalType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SignalType to move from
    * @return The SignalType that was assigned
    */
  SignalType& operator=(SignalType&& rhs) = delete;

  /** The destructor */
  virtual ~SignalType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalType whose contents are to be used to set this uci::type::SignalType's contents.
    */
  void copy(const uci::type::SignalType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalType whose contents are to be used to set this uci::type::SignalType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SignalType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SignalID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SignalID field.
    */
  const uci::type::SignalID_Type& getSignalID() const override;

  /** Returns the accessor to the SignalID field contained in this message fragment
    *
    * @return The reference to the accessor to the SignalID field.
    */
  uci::type::SignalID_Type& getSignalID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setSignalID(const uci::type::SignalID_Type& accessor) override;

  /** Returns the contents of the message's SignalState field
    *
    * @return The contents of the SignalState field
    */
  const uci::type::SignalReportStateEnum& getSignalState() const override;

  /** Returns the contents of the message's SignalState field
    *
    * @return The contents of the SignalState field
    */
  uci::type::SignalReportStateEnum& getSignalState() override;

  /** Sets the contents of the message's SignalState field
    *
    * @param accessor The accessor to use to set the SignalState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setSignalState(const uci::type::SignalReportStateEnum& accessor) override;

  /** Sets the contents of the message's SignalState field
    *
    * @param value The new value to set the SignalState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setSignalState(uci::type::SignalReportStateEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalSourceType& getSource_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalSourceType& getSource() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalSourceType& getSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setSource(const uci::type::SignalSourceType& accessor) override;

  /** Returns whether this optional field Sourceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSource() const noexcept override;

  /** Enables the optional field such that getSource will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalSourceType& enableSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearSource() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getLocalTrackIdentifier_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getLocalTrackIdentifier() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getLocalTrackIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setLocalTrackIdentifier(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field LocalTrackIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocalTrackIdentifier() const noexcept override;

  /** Enables the optional field such that getLocalTrackIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableLocalTrackIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearLocalTrackIdentifier() noexcept override;

  /** Returns the accessor to the AssociatedPulseDataID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedPulseDataID field.
    */
  const uci::type::SignalType::AssociatedPulseDataID& getAssociatedPulseDataID() const override;

  /** Returns the accessor to the AssociatedPulseDataID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedPulseDataID field.
    */
  uci::type::SignalType::AssociatedPulseDataID& getAssociatedPulseDataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setAssociatedPulseDataID(const uci::type::SignalType::AssociatedPulseDataID& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getInitialDetectionTimestamp() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setInitialDetectionTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field InitialDetectionTimestampis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInitialDetectionTimestamp() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearInitialDetectionTimestamp() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getLatestDetectionTimestamp() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setLatestDetectionTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field LatestDetectionTimestampis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLatestDetectionTimestamp() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearLatestDetectionTimestamp() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementQualityEnum& getTimestampQuality_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementQualityEnum& getTimestampQuality() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementQualityEnum& getTimestampQuality() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setTimestampQuality(const uci::type::MeasurementQualityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setTimestampQuality(uci::type::MeasurementQualityEnum::EnumerationItem value) override;

  /** Returns whether this optional field TimestampQualityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimestampQuality() const noexcept override;

  /** Enables the optional field such that getTimestampQuality will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementQualityEnum& enableTimestampQuality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearTimestampQuality() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalParametricsType& getParametrics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalParametricsType& getParametrics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalParametricsType& getParametrics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setParametrics(const uci::type::SignalParametricsType& accessor) override;

  /** Returns whether this optional field Parametricsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasParametrics() const noexcept override;

  /** Enables the optional field such that getParametrics will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalParametricsType& enableParametrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearParametrics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterFunctionType& getEmitterFunction_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EmitterFunctionType& getEmitterFunction() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterFunctionType& getEmitterFunction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setEmitterFunction(const uci::type::EmitterFunctionType& accessor) override;

  /** Returns whether this optional field EmitterFunctionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEmitterFunction() const noexcept override;

  /** Enables the optional field such that getEmitterFunction will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterFunctionType& enableEmitterFunction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearEmitterFunction() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalIdentityType& getEmitterIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalIdentityType& getEmitterIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalIdentityType& getEmitterIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setEmitterIdentity(const uci::type::SignalIdentityType& accessor) override;

  /** Returns whether this optional field EmitterIdentityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEmitterIdentity() const noexcept override;

  /** Enables the optional field such that getEmitterIdentity will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalIdentityType& enableEmitterIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearEmitterIdentity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalEmitterKinematicsType& getEmitterKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalEmitterKinematicsType& getEmitterKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalEmitterKinematicsType& getEmitterKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setEmitterKinematics(const uci::type::SignalEmitterKinematicsType& accessor) override;

  /** Returns whether this optional field EmitterKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEmitterKinematics() const noexcept override;

  /** Enables the optional field such that getEmitterKinematics will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalEmitterKinematicsType& enableEmitterKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearEmitterKinematics() noexcept override;

  /** Returns the accessor to the CollectorKinematics field contained in this message fragment
    *
    * @return The const reference to the accessor to the CollectorKinematics field.
    */
  const uci::type::SignalType::CollectorKinematics& getCollectorKinematics() const override;

  /** Returns the accessor to the CollectorKinematics field contained in this message fragment
    *
    * @return The reference to the accessor to the CollectorKinematics field.
    */
  uci::type::SignalType::CollectorKinematics& getCollectorKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setCollectorKinematics(const uci::type::SignalType::CollectorKinematics& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getWartimeReserveMode_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getWartimeReserveMode() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getWartimeReserveMode() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setWartimeReserveMode(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setWartimeReserveMode(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setWartimeReserveMode(const char* value) override;

  /** Returns whether this optional field wartimeReserveMode_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWartimeReserveMode() const noexcept override;

  /** Enables the optional field such that getWartimeReserveMode will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableWartimeReserveMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearWartimeReserveMode() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LockIndicatorEnum& getLockIndicator_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LockIndicatorEnum& getLockIndicator() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LockIndicatorEnum& getLockIndicator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setLockIndicator(const uci::type::LockIndicatorEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setLockIndicator(uci::type::LockIndicatorEnum::EnumerationItem value) override;

  /** Returns whether this optional field LockIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLockIndicator() const noexcept override;

  /** Enables the optional field such that getLockIndicator will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LockIndicatorEnum& enableLockIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearLockIndicator() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityByType& getActivityBy_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActivityByType& getActivityBy() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityByType& getActivityBy() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setActivityBy(const uci::type::ActivityByType& accessor) override;

  /** Returns whether this optional field ActivityByis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivityBy() const noexcept override;

  /** Enables the optional field such that getActivityBy will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityByType& enableActivityBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearActivityBy() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalRemoveInfoType& getRemoveInfo_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalRemoveInfoType& getRemoveInfo() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalRemoveInfoType& getRemoveInfo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setRemoveInfo(const uci::type::SignalRemoveInfoType& accessor) override;

  /** Returns whether this optional field RemoveInfois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemoveInfo() const noexcept override;

  /** Enables the optional field such that getRemoveInfo will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearRemoveInfo() noexcept override;

  /** Returns the accessor to the Modulation field contained in this message fragment
    *
    * @return The const reference to the accessor to the Modulation field.
    */
  const uci::type::SignalType::Modulation& getModulation() const override;

  /** Returns the accessor to the Modulation field contained in this message fragment
    *
    * @return The reference to the accessor to the Modulation field.
    */
  uci::type::SignalType::Modulation& getModulation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setModulation(const uci::type::SignalType::Modulation& accessor) override;

  /** Returns the accessor to the ModulationParameter field contained in this message fragment
    *
    * @return The const reference to the accessor to the ModulationParameter field.
    */
  const uci::type::SignalType::ModulationParameter& getModulationParameter() const override;

  /** Returns the accessor to the ModulationParameter field contained in this message fragment
    *
    * @return The reference to the accessor to the ModulationParameter field.
    */
  uci::type::SignalType::ModulationParameter& getModulationParameter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setModulationParameter(const uci::type::SignalType::ModulationParameter& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterUrgencyEnum& getUrgency_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EmitterUrgencyEnum& getUrgency() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterUrgencyEnum& getUrgency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setUrgency(const uci::type::EmitterUrgencyEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setUrgency(uci::type::EmitterUrgencyEnum::EnumerationItem value) override;

  /** Returns whether this optional field Urgencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUrgency() const noexcept override;

  /** Enables the optional field such that getUrgency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterUrgencyEnum& enableUrgency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearUrgency() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& getMobility_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MobilityEnum& getMobility() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& getMobility() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setMobility(const uci::type::MobilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& setMobility(uci::type::MobilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field Mobilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMobility() const noexcept override;

  /** Enables the optional field such that getMobility will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& enableMobility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalType& clearMobility() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SignalType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SignalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SignalID_Type> signalID_Accessor;
  std::unique_ptr<SignalReportStateEnum> signalState_Accessor;
  std::unique_ptr<SignalSourceType> source_Accessor;
  std::unique_ptr<ForeignKeyType> localTrackIdentifier_Accessor;
  std::unique_ptr<AssociatedPulseDataID> associatedPulseDataID_Accessor;
  boost::optional<DateTimeTypeValue> initialDetectionTimestamp_Accessor;
  boost::optional<DateTimeTypeValue> latestDetectionTimestamp_Accessor;
  std::unique_ptr<MeasurementQualityEnum> timestampQuality_Accessor;
  std::unique_ptr<SignalParametricsType> parametrics_Accessor;
  std::unique_ptr<EmitterFunctionType> emitterFunction_Accessor;
  std::unique_ptr<SignalIdentityType> emitterIdentity_Accessor;
  std::unique_ptr<SignalEmitterKinematicsType> emitterKinematics_Accessor;
  std::unique_ptr<CollectorKinematics> collectorKinematics_Accessor;
  std::unique_ptr<EmptyType> wartimeReserveMode_Accessor;
  std::unique_ptr<LockIndicatorEnum> lockIndicator_Accessor;
  std::unique_ptr<ActivityByType> activityBy_Accessor;
  std::unique_ptr<SignalRemoveInfoType> removeInfo_Accessor;
  std::unique_ptr<Modulation> modulation_Accessor;
  std::unique_ptr<ModulationParameter> modulationParameter_Accessor;
  std::unique_ptr<EmitterUrgencyEnum> urgency_Accessor;
  std::unique_ptr<MobilityEnum> mobility_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SIGNALTYPE_H
