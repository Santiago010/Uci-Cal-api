/** @file EntityConfirmationRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ENTITYCONFIRMATIONREQUESTMDT_H
#define ASB_UCI_TYPE_ENTITYCONFIRMATIONREQUESTMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_uci/type/RequestBaseType.h"
#include "uci/type/EntityConfirmationRequestMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EntityDimensionEstimateType;
class EntityDimensionEstimateUncertaintyType;
class EntityID_Type;
class EntityOrbitalEphemerisID_Type;
class FileMetadataID_Type;
class MeasurementKinematicsChoiceType;
class ProductMetadataID_Type;
class QuaternionAttitudeType;
class RequirementInstanceID_ChoiceType;
class SensorKinematicsChoiceType;
class SystemID_Type;
class SystemOrbitalEphemerisID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityConfirmationRequestMDT : public virtual uci::type::EntityConfirmationRequestMDT, public virtual RequestBaseType {
public:
  /** Provides references to files related to the Entity that supports this confirmation. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using FileMetadataID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** The constructor */
  EntityConfirmationRequestMDT();

  /** The copy constructor
    *
    * @param rhs The EntityConfirmationRequestMDT to copy from
    */
  EntityConfirmationRequestMDT(const EntityConfirmationRequestMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EntityConfirmationRequestMDT to move from
    */
  EntityConfirmationRequestMDT(EntityConfirmationRequestMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EntityConfirmationRequestMDT to copy from
    * @return The EntityConfirmationRequestMDT that was assigned
    */
  EntityConfirmationRequestMDT& operator=(const EntityConfirmationRequestMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EntityConfirmationRequestMDT to move from
    * @return The EntityConfirmationRequestMDT that was assigned
    */
  EntityConfirmationRequestMDT& operator=(EntityConfirmationRequestMDT&& rhs) = delete;

  /** The destructor */
  ~EntityConfirmationRequestMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityConfirmationRequestMDT whose contents are to be used to set this
    *      uci::type::EntityConfirmationRequestMDT's contents.
    */
  void copy(const uci::type::EntityConfirmationRequestMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityConfirmationRequestMDT whose contents are to be used to set this
    *      uci::type::EntityConfirmationRequestMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EntityConfirmationRequestMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemID field.
    */
  const uci::type::SystemID_Type& getSystemID() const override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemID field.
    */
  uci::type::SystemID_Type& getSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setSystemID(const uci::type::SystemID_Type& accessor) override;

  /** Returns the accessor to the RequirementID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequirementID field.
    */
  const uci::type::RequirementInstanceID_ChoiceType& getRequirementID() const override;

  /** Returns the accessor to the RequirementID field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementID field.
    */
  uci::type::RequirementInstanceID_ChoiceType& getRequirementID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setRequirementID(const uci::type::RequirementInstanceID_ChoiceType& accessor) override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityID field.
    */
  const uci::type::EntityID_Type& getEntityID() const override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the EntityID field.
    */
  uci::type::EntityID_Type& getEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setEntityID(const uci::type::EntityID_Type& accessor) override;

  /** Enables the optional field such that getEntityID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityID_Type& enableEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's TimeStamp field
    *
    * @return The contents of the TimeStamp field
    */
  uci::type::DateTimeTypeValue getTimeStamp() const override;

  /** Sets the contents of the message's TimeStamp field
    *
    * @param value The new value to set the TimeStamp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setTimeStamp(uci::type::DateTimeTypeValue value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityDimensionEstimateUncertaintyType& getEntityDimension_EstimateUncertainty_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EntityDimensionEstimateUncertaintyType& getEntityDimension_EstimateUncertainty() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityDimensionEstimateUncertaintyType& getEntityDimension_EstimateUncertainty() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setEntityDimension_EstimateUncertainty(const uci::type::EntityDimensionEstimateUncertaintyType& accessor) override;

  /** Returns whether this optional field EntityDimension_EstimateUncertaintyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEntityDimension_EstimateUncertainty() const noexcept override;

  /** Enables the optional field such that getEntityDimension_EstimateUncertainty will return the optional field and not
    * throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityDimensionEstimateUncertaintyType& enableEntityDimension_EstimateUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearEntityDimension_EstimateUncertainty() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityDimensionEstimateType& getEntityDimension_Estimate_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EntityDimensionEstimateType& getEntityDimension_Estimate() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityDimensionEstimateType& getEntityDimension_Estimate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setEntityDimension_Estimate(const uci::type::EntityDimensionEstimateType& accessor) override;

  /** Returns whether this optional field EntityDimension_Estimateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEntityDimension_Estimate() const noexcept override;

  /** Enables the optional field such that getEntityDimension_Estimate will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityDimensionEstimateType& enableEntityDimension_Estimate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearEntityDimension_Estimate() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::QuaternionAttitudeType& getAttitudeEstimates_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::QuaternionAttitudeType& getAttitudeEstimates() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::QuaternionAttitudeType& getAttitudeEstimates() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setAttitudeEstimates(const uci::type::QuaternionAttitudeType& accessor) override;

  /** Returns whether this optional field AttitudeEstimatesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAttitudeEstimates() const noexcept override;

  /** Enables the optional field such that getAttitudeEstimates will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::QuaternionAttitudeType& enableAttitudeEstimates(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearAttitudeEstimates() noexcept override;

  /** Returns the accessor to the FileMetadataID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FileMetadataID field.
    */
  const uci::type::EntityConfirmationRequestMDT::FileMetadataID& getFileMetadataID() const override;

  /** Returns the accessor to the FileMetadataID field contained in this message fragment
    *
    * @return The reference to the accessor to the FileMetadataID field.
    */
  uci::type::EntityConfirmationRequestMDT::FileMetadataID& getFileMetadataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setFileMetadataID(const uci::type::EntityConfirmationRequestMDT::FileMetadataID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductMetadataID_Type& getProductMetadataID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ProductMetadataID_Type& getProductMetadataID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductMetadataID_Type& getProductMetadataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setProductMetadataID(const uci::type::ProductMetadataID_Type& accessor) override;

  /** Returns whether this optional field ProductMetadataIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProductMetadataID() const noexcept override;

  /** Enables the optional field such that getProductMetadataID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductMetadataID_Type& enableProductMetadataID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearProductMetadataID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setMeasurementKinematics(const uci::type::MeasurementKinematicsChoiceType& accessor) override;

  /** Returns whether this optional field MeasurementKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMeasurementKinematics() const noexcept override;

  /** Enables the optional field such that getMeasurementKinematics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementKinematicsChoiceType& enableMeasurementKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearMeasurementKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SensorKinematicsChoiceType& getReferenceKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SensorKinematicsChoiceType& getReferenceKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SensorKinematicsChoiceType& getReferenceKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setReferenceKinematics(const uci::type::SensorKinematicsChoiceType& accessor) override;

  /** Returns whether this optional field ReferenceKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReferenceKinematics() const noexcept override;

  /** Enables the optional field such that getReferenceKinematics will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SensorKinematicsChoiceType& enableReferenceKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearReferenceKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitalEphemerisID_Type& getSystemEphemerisID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemOrbitalEphemerisID_Type& getSystemEphemerisID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitalEphemerisID_Type& getSystemEphemerisID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setSystemEphemerisID(const uci::type::SystemOrbitalEphemerisID_Type& accessor) override;

  /** Returns whether this optional field SystemEphemerisIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSystemEphemerisID() const noexcept override;

  /** Enables the optional field such that getSystemEphemerisID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitalEphemerisID_Type& enableSystemEphemerisID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearSystemEphemerisID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityOrbitalEphemerisID_Type& getEntityEphemerisID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EntityOrbitalEphemerisID_Type& getEntityEphemerisID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityOrbitalEphemerisID_Type& getEntityEphemerisID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& setEntityEphemerisID(const uci::type::EntityOrbitalEphemerisID_Type& accessor) override;

  /** Returns whether this optional field EntityEphemerisIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEntityEphemerisID() const noexcept override;

  /** Enables the optional field such that getEntityEphemerisID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityOrbitalEphemerisID_Type& enableEntityEphemerisID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityConfirmationRequestMDT& clearEntityEphemerisID() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EntityConfirmationRequestMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityConfirmationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EntityConfirmationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SystemID_Type> systemID_Accessor;
  std::unique_ptr<RequirementInstanceID_ChoiceType> requirementID_Accessor;
  std::unique_ptr<EntityID_Type> entityID_Accessor;
  DateTimeTypeValue timeStamp_Accessor{0};
  std::unique_ptr<EntityDimensionEstimateUncertaintyType> entityDimension_EstimateUncertainty_Accessor;
  std::unique_ptr<EntityDimensionEstimateType> entityDimension_Estimate_Accessor;
  std::unique_ptr<QuaternionAttitudeType> attitudeEstimates_Accessor;
  std::unique_ptr<FileMetadataID> fileMetadataID_Accessor;
  std::unique_ptr<ProductMetadataID_Type> productMetadataID_Accessor;
  std::unique_ptr<MeasurementKinematicsChoiceType> measurementKinematics_Accessor;
  std::unique_ptr<SensorKinematicsChoiceType> referenceKinematics_Accessor;
  std::unique_ptr<SystemOrbitalEphemerisID_Type> systemEphemerisID_Accessor;
  std::unique_ptr<EntityOrbitalEphemerisID_Type> entityEphemerisID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ENTITYCONFIRMATIONREQUESTMDT_H
