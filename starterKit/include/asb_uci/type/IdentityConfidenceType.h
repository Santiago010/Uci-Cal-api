/** @file IdentityConfidenceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_IDENTITYCONFIDENCETYPE_H
#define ASB_UCI_TYPE_IDENTITYCONFIDENCETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityConfidenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_IdentityConfidenceType;
class EmitterMultipleType;
class EnvironmentIdentityConfidenceType;
class PlatformIdentityConfidenceType;
class SpecificEmitterMultipleType;
class SpecificFacilityIdentityConfidenceType;
class SpecificIdentityConfidenceType;
class SpecificVehicleIdentityConfidenceType;
class StandardIdentityConfidenceType;
class StoreMultipleType;

/** See annotations in child elements and messages/elements that use this type for details. */
class IdentityConfidenceType : public virtual uci::type::IdentityConfidenceType {
public:
  /** Indicates a possible "standard identity" of the Entity. The value of the child Confidence element of all instances of
    * this element should sum to 100%. If multiple instances are given, each must be of a different standard identity as
    * indicated by the child element. [Occurrences: Minimum: 0; Maximum: 8]
    */
  using Standard = asb_uci::base::BoundedList<uci::type::StandardIdentityConfidenceType, uci::type::accessorType::standardIdentityConfidenceType, asb_uci::type::StandardIdentityConfidenceType>;

  /** Indicates a possible "environment" of the Entity. The value of the child Confidence element of all instances of this
    * element should sum to 100%. If multiple instances are given, each must be of a different environment type as
    * indicated by the child element. [Occurrences: Minimum: 0; Maximum: 6]
    */
  using Environment = asb_uci::base::BoundedList<uci::type::EnvironmentIdentityConfidenceType, uci::type::accessorType::environmentIdentityConfidenceType, asb_uci::type::EnvironmentIdentityConfidenceType>;

  /** Indicates a possible "platform identity" of the Entity. The value of the child Confidence element of all instances of
    * this element should sum to 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Platform = asb_uci::base::BoundedList<uci::type::PlatformIdentityConfidenceType, uci::type::accessorType::platformIdentityConfidenceType, asb_uci::type::PlatformIdentityConfidenceType>;

  /** Indicates a possible "specific identity" of the Entity. The value of the child Confidence element of all instances of
    * this element should sum to 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Specific = asb_uci::base::BoundedList<uci::type::SpecificIdentityConfidenceType, uci::type::accessorType::specificIdentityConfidenceType, asb_uci::type::SpecificIdentityConfidenceType>;

  /** Indicates an emitter that has been identified in association with the Entity. An Entity can have multiple emitters
    * each of which are represented by one instance of this element. Each emitter can in turn have an ambiguity list of
    * emitter types indicated by descendant elements. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Emitter = asb_uci::base::BoundedList<uci::type::EmitterMultipleType, uci::type::accessorType::emitterMultipleType, asb_uci::type::EmitterMultipleType>;

  /** Indicates a specific emitter instance that has been identified in association with the Entity. An Entity can have
    * multiple emitters and therefore multiple specific emitters. Each specific emitter can in turn have an ambiguity list
    * of specific emitter instance possibilities as indicated by descendant elements. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using SpecificEmitter = asb_uci::base::BoundedList<uci::type::SpecificEmitterMultipleType, uci::type::accessorType::specificEmitterMultipleType, asb_uci::type::SpecificEmitterMultipleType>;

  /** Indicates a possible specific vehicle instance, generally a blue forces vehicle, that has been identified in
    * association with the Entity. The value of the child Confidence element of all instances of this element should sum to
    * 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SpecificVehicle = asb_uci::base::BoundedList<uci::type::SpecificVehicleIdentityConfidenceType, uci::type::accessorType::specificVehicleIdentityConfidenceType, asb_uci::type::SpecificVehicleIdentityConfidenceType>;

  /** Indicates a possible specific facility instance, generally a blue forces facility, that has been identified in
    * association with the Entity. The value of the child Confidence element of all instances of this element should sum to
    * 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SpecificFacility = asb_uci::base::BoundedList<uci::type::SpecificFacilityIdentityConfidenceType, uci::type::accessorType::specificFacilityIdentityConfidenceType, asb_uci::type::SpecificFacilityIdentityConfidenceType>;

  /** Indicates a possible identity of the Entity in the taxonomy/nomenclature of the Electronic Order of Battle (EOB). The
    * value of the child Confidence element of all instances of this element should sum to 100%. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using EOB = asb_uci::base::BoundedList<uci::type::EOB_IdentityConfidenceType, uci::type::accessorType::eOB_IdentityConfidenceType, asb_uci::type::EOB_IdentityConfidenceType>;

  /** Indicates a specific weapon instance that has been identified in association with the Entity. An Entity can have
    * multiple weapons. Each weapon can in turn have an ambiguity list of specific weapon instance possibilities as
    * indicated by descendant elements. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Weapon = asb_uci::base::BoundedList<uci::type::StoreMultipleType, uci::type::accessorType::storeMultipleType, asb_uci::type::StoreMultipleType>;

  /** The constructor */
  IdentityConfidenceType();

  /** The copy constructor
    *
    * @param rhs The IdentityConfidenceType to copy from
    */
  IdentityConfidenceType(const IdentityConfidenceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The IdentityConfidenceType to move from
    */
  IdentityConfidenceType(IdentityConfidenceType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The IdentityConfidenceType to copy from
    * @return The IdentityConfidenceType that was assigned
    */
  IdentityConfidenceType& operator=(const IdentityConfidenceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The IdentityConfidenceType to move from
    * @return The IdentityConfidenceType that was assigned
    */
  IdentityConfidenceType& operator=(IdentityConfidenceType&& rhs) = delete;

  /** The destructor */
  virtual ~IdentityConfidenceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::IdentityConfidenceType whose contents are to be used to set this
    *      uci::type::IdentityConfidenceType's contents.
    */
  void copy(const uci::type::IdentityConfidenceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::IdentityConfidenceType whose contents are to be used to set this
    *      uci::type::IdentityConfidenceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::IdentityConfidenceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the Standard field contained in this message fragment
    *
    * @return The const reference to the accessor to the Standard field.
    */
  const uci::type::IdentityConfidenceType::Standard& getStandard() const override;

  /** Returns the accessor to the Standard field contained in this message fragment
    *
    * @return The reference to the accessor to the Standard field.
    */
  uci::type::IdentityConfidenceType::Standard& getStandard() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setStandard(const uci::type::IdentityConfidenceType::Standard& accessor) override;

  /** Returns the accessor to the Environment field contained in this message fragment
    *
    * @return The const reference to the accessor to the Environment field.
    */
  const uci::type::IdentityConfidenceType::Environment& getEnvironment() const override;

  /** Returns the accessor to the Environment field contained in this message fragment
    *
    * @return The reference to the accessor to the Environment field.
    */
  uci::type::IdentityConfidenceType::Environment& getEnvironment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setEnvironment(const uci::type::IdentityConfidenceType::Environment& accessor) override;

  /** Returns the accessor to the Platform field contained in this message fragment
    *
    * @return The const reference to the accessor to the Platform field.
    */
  const uci::type::IdentityConfidenceType::Platform& getPlatform() const override;

  /** Returns the accessor to the Platform field contained in this message fragment
    *
    * @return The reference to the accessor to the Platform field.
    */
  uci::type::IdentityConfidenceType::Platform& getPlatform() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setPlatform(const uci::type::IdentityConfidenceType::Platform& accessor) override;

  /** Returns the accessor to the Specific field contained in this message fragment
    *
    * @return The const reference to the accessor to the Specific field.
    */
  const uci::type::IdentityConfidenceType::Specific& getSpecific() const override;

  /** Returns the accessor to the Specific field contained in this message fragment
    *
    * @return The reference to the accessor to the Specific field.
    */
  uci::type::IdentityConfidenceType::Specific& getSpecific() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setSpecific(const uci::type::IdentityConfidenceType::Specific& accessor) override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Emitter field.
    */
  const uci::type::IdentityConfidenceType::Emitter& getEmitter() const override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The reference to the accessor to the Emitter field.
    */
  uci::type::IdentityConfidenceType::Emitter& getEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setEmitter(const uci::type::IdentityConfidenceType::Emitter& accessor) override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificEmitter field.
    */
  const uci::type::IdentityConfidenceType::SpecificEmitter& getSpecificEmitter() const override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificEmitter field.
    */
  uci::type::IdentityConfidenceType::SpecificEmitter& getSpecificEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setSpecificEmitter(const uci::type::IdentityConfidenceType::SpecificEmitter& accessor) override;

  /** Returns the accessor to the SpecificVehicle field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificVehicle field.
    */
  const uci::type::IdentityConfidenceType::SpecificVehicle& getSpecificVehicle() const override;

  /** Returns the accessor to the SpecificVehicle field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificVehicle field.
    */
  uci::type::IdentityConfidenceType::SpecificVehicle& getSpecificVehicle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setSpecificVehicle(const uci::type::IdentityConfidenceType::SpecificVehicle& accessor) override;

  /** Returns the accessor to the SpecificFacility field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificFacility field.
    */
  const uci::type::IdentityConfidenceType::SpecificFacility& getSpecificFacility() const override;

  /** Returns the accessor to the SpecificFacility field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificFacility field.
    */
  uci::type::IdentityConfidenceType::SpecificFacility& getSpecificFacility() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setSpecificFacility(const uci::type::IdentityConfidenceType::SpecificFacility& accessor) override;

  /** Returns the accessor to the EOB field contained in this message fragment
    *
    * @return The const reference to the accessor to the EOB field.
    */
  const uci::type::IdentityConfidenceType::EOB& getEOB() const override;

  /** Returns the accessor to the EOB field contained in this message fragment
    *
    * @return The reference to the accessor to the EOB field.
    */
  uci::type::IdentityConfidenceType::EOB& getEOB() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setEOB(const uci::type::IdentityConfidenceType::EOB& accessor) override;

  /** Returns the accessor to the Weapon field contained in this message fragment
    *
    * @return The const reference to the accessor to the Weapon field.
    */
  const uci::type::IdentityConfidenceType::Weapon& getWeapon() const override;

  /** Returns the accessor to the Weapon field contained in this message fragment
    *
    * @return The reference to the accessor to the Weapon field.
    */
  uci::type::IdentityConfidenceType::Weapon& getWeapon() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityConfidenceType& setWeapon(const uci::type::IdentityConfidenceType::Weapon& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<IdentityConfidenceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::IdentityConfidenceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::IdentityConfidenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Standard> standard_Accessor;
  std::unique_ptr<Environment> environment_Accessor;
  std::unique_ptr<Platform> platform_Accessor;
  std::unique_ptr<Specific> specific_Accessor;
  std::unique_ptr<Emitter> emitter_Accessor;
  std::unique_ptr<SpecificEmitter> specificEmitter_Accessor;
  std::unique_ptr<SpecificVehicle> specificVehicle_Accessor;
  std::unique_ptr<SpecificFacility> specificFacility_Accessor;
  std::unique_ptr<EOB> eOB_Accessor;
  std::unique_ptr<Weapon> weapon_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_IDENTITYCONFIDENCETYPE_H
