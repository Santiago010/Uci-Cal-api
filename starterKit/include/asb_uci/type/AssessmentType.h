/** @file AssessmentType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ASSESSMENTTYPE_H
#define ASB_UCI_TYPE_ASSESSMENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "uci/base/Accessor.h"
#include "uci/type/AssessmentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AchievabilityAssessmentPET;
class CapabilityUtilizationAssessmentType;
class CommPointingPlanAssessmentType;
class RouteDeconflictionAssessmentType;
class RouteThreatAssessmentType;
class RouteVulnerabilityMetricsAssessmentType;
class TargetMobilityAssessmentType;
class ThreatNominationAssessmentType;
class VehicleThreatAssessmentType;

/** See annotations in child elements and messages/elements that use this type for details. */
class AssessmentType : public virtual uci::type::AssessmentType {
public:
  /** The constructor */
  AssessmentType();

  /** The copy constructor
    *
    * @param rhs The AssessmentType to copy from
    */
  AssessmentType(const AssessmentType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The AssessmentType to move from
    */
  AssessmentType(AssessmentType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The AssessmentType to copy from
    * @return The AssessmentType that was assigned
    */
  AssessmentType& operator=(const AssessmentType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The AssessmentType to move from
    * @return The AssessmentType that was assigned
    */
  AssessmentType& operator=(AssessmentType&& rhs) = delete;

  /** The destructor */
  virtual ~AssessmentType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AssessmentType whose contents are to be used to set this uci::type::AssessmentType's
    *      contents.
    */
  void copy(const uci::type::AssessmentType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AssessmentType whose contents are to be used to set this uci::type::AssessmentType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::AssessmentType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::AssessmentType::AssessmentTypeChoice getAssessmentTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getAssessmentTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setAssessmentTypeChoiceOrdinal(uci::type::AssessmentType::AssessmentTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CommPointingPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommPointingPlan field.
    */
  uci::type::CommPointingPlanAssessmentType& getCommPointingPlan_() const;

  /** Returns the accessor to the CommPointingPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the CommPointingPlan field.
    */
  const uci::type::CommPointingPlanAssessmentType& getCommPointingPlan() const override;

  /** Returns the accessor to the CommPointingPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the CommPointingPlan field.
    */
  uci::type::CommPointingPlanAssessmentType& getCommPointingPlan() override;

  /** Sets this choice's choice to be commPointingPlan and initializes commPointingPlan to be the specified value. A deep
    * copy will be used by this method to set commPointingPlan
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setCommPointingPlan(const uci::type::CommPointingPlanAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommPointingPlan.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommPointingPlan, false
    *      otherwise.
    */
  bool isCommPointingPlan() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CommPointingPlan.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommPointingPlan.
    */
  uci::type::CommPointingPlanAssessmentType& chooseCommPointingPlan(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CommPointingPlan.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommPointingPlan.
    */
  uci::type::CommPointingPlanAssessmentType& chooseCommPointingPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CapabilityUtilization field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityUtilization field.
    */
  uci::type::CapabilityUtilizationAssessmentType& getCapabilityUtilization_() const;

  /** Returns the accessor to the CapabilityUtilization field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityUtilization field.
    */
  const uci::type::CapabilityUtilizationAssessmentType& getCapabilityUtilization() const override;

  /** Returns the accessor to the CapabilityUtilization field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityUtilization field.
    */
  uci::type::CapabilityUtilizationAssessmentType& getCapabilityUtilization() override;

  /** Sets this choice's choice to be capabilityUtilization and initializes capabilityUtilization to be the specified
    * value. A deep copy will be used by this method to set capabilityUtilization
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setCapabilityUtilization(const uci::type::CapabilityUtilizationAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CapabilityUtilization.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CapabilityUtilization, false
    *      otherwise.
    */
  bool isCapabilityUtilization() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityUtilization.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityUtilization.
    */
  uci::type::CapabilityUtilizationAssessmentType& chooseCapabilityUtilization(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityUtilization.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityUtilization.
    */
  uci::type::CapabilityUtilizationAssessmentType& chooseCapabilityUtilization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RouteDeconfliction field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteDeconfliction field.
    */
  uci::type::RouteDeconflictionAssessmentType& getRouteDeconfliction_() const;

  /** Returns the accessor to the RouteDeconfliction field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteDeconfliction field.
    */
  const uci::type::RouteDeconflictionAssessmentType& getRouteDeconfliction() const override;

  /** Returns the accessor to the RouteDeconfliction field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteDeconfliction field.
    */
  uci::type::RouteDeconflictionAssessmentType& getRouteDeconfliction() override;

  /** Sets this choice's choice to be routeDeconfliction and initializes routeDeconfliction to be the specified value. A
    * deep copy will be used by this method to set routeDeconfliction
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setRouteDeconfliction(const uci::type::RouteDeconflictionAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteDeconfliction.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteDeconfliction, false
    *      otherwise.
    */
  bool isRouteDeconfliction() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteDeconfliction.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteDeconfliction.
    */
  uci::type::RouteDeconflictionAssessmentType& chooseRouteDeconfliction(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RouteDeconfliction.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteDeconfliction.
    */
  uci::type::RouteDeconflictionAssessmentType& chooseRouteDeconfliction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RouteVulnerabilityMetrics field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteVulnerabilityMetrics field.
    */
  uci::type::RouteVulnerabilityMetricsAssessmentType& getRouteVulnerabilityMetrics_() const;

  /** Returns the accessor to the RouteVulnerabilityMetrics field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteVulnerabilityMetrics field.
    */
  const uci::type::RouteVulnerabilityMetricsAssessmentType& getRouteVulnerabilityMetrics() const override;

  /** Returns the accessor to the RouteVulnerabilityMetrics field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteVulnerabilityMetrics field.
    */
  uci::type::RouteVulnerabilityMetricsAssessmentType& getRouteVulnerabilityMetrics() override;

  /** Sets this choice's choice to be routeVulnerabilityMetrics and initializes routeVulnerabilityMetrics to be the
    * specified value. A deep copy will be used by this method to set routeVulnerabilityMetrics
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setRouteVulnerabilityMetrics(const uci::type::RouteVulnerabilityMetricsAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteVulnerabilityMetrics.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteVulnerabilityMetrics, false
    *      otherwise.
    */
  bool isRouteVulnerabilityMetrics() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteVulnerabilityMetrics.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteVulnerabilityMetrics.
    */
  uci::type::RouteVulnerabilityMetricsAssessmentType& chooseRouteVulnerabilityMetrics(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RouteVulnerabilityMetrics.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteVulnerabilityMetrics.
    */
  uci::type::RouteVulnerabilityMetricsAssessmentType& chooseRouteVulnerabilityMetrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RouteThreatAssessment field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteThreatAssessment field.
    */
  uci::type::RouteThreatAssessmentType& getRouteThreatAssessment_() const;

  /** Returns the accessor to the RouteThreatAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteThreatAssessment field.
    */
  const uci::type::RouteThreatAssessmentType& getRouteThreatAssessment() const override;

  /** Returns the accessor to the RouteThreatAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteThreatAssessment field.
    */
  uci::type::RouteThreatAssessmentType& getRouteThreatAssessment() override;

  /** Sets this choice's choice to be routeThreatAssessment and initializes routeThreatAssessment to be the specified
    * value. A deep copy will be used by this method to set routeThreatAssessment
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setRouteThreatAssessment(const uci::type::RouteThreatAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteThreatAssessment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteThreatAssessment, false
    *      otherwise.
    */
  bool isRouteThreatAssessment() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteThreatAssessment.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteThreatAssessment.
    */
  uci::type::RouteThreatAssessmentType& chooseRouteThreatAssessment(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RouteThreatAssessment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteThreatAssessment.
    */
  uci::type::RouteThreatAssessmentType& chooseRouteThreatAssessment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the TargetMobility field contained in this message fragment
    *
    * @return The const reference to the accessor to the TargetMobility field.
    */
  uci::type::TargetMobilityAssessmentType& getTargetMobility_() const;

  /** Returns the accessor to the TargetMobility field contained in this message fragment
    *
    * @return The reference to the accessor to the TargetMobility field.
    */
  const uci::type::TargetMobilityAssessmentType& getTargetMobility() const override;

  /** Returns the accessor to the TargetMobility field contained in this message fragment
    *
    * @return The reference to the accessor to the TargetMobility field.
    */
  uci::type::TargetMobilityAssessmentType& getTargetMobility() override;

  /** Sets this choice's choice to be targetMobility and initializes targetMobility to be the specified value. A deep copy
    * will be used by this method to set targetMobility
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setTargetMobility(const uci::type::TargetMobilityAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TargetMobility.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TargetMobility, false otherwise.
    */
  bool isTargetMobility() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by TargetMobility.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TargetMobility.
    */
  uci::type::TargetMobilityAssessmentType& chooseTargetMobility(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by TargetMobility.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TargetMobility.
    */
  uci::type::TargetMobilityAssessmentType& chooseTargetMobility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the VehicleThreatAssessment field contained in this message fragment
    *
    * @return The const reference to the accessor to the VehicleThreatAssessment field.
    */
  uci::type::VehicleThreatAssessmentType& getVehicleThreatAssessment_() const;

  /** Returns the accessor to the VehicleThreatAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the VehicleThreatAssessment field.
    */
  const uci::type::VehicleThreatAssessmentType& getVehicleThreatAssessment() const override;

  /** Returns the accessor to the VehicleThreatAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the VehicleThreatAssessment field.
    */
  uci::type::VehicleThreatAssessmentType& getVehicleThreatAssessment() override;

  /** Sets this choice's choice to be vehicleThreatAssessment and initializes vehicleThreatAssessment to be the specified
    * value. A deep copy will be used by this method to set vehicleThreatAssessment
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setVehicleThreatAssessment(const uci::type::VehicleThreatAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VehicleThreatAssessment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VehicleThreatAssessment, false
    *      otherwise.
    */
  bool isVehicleThreatAssessment() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VehicleThreatAssessment.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VehicleThreatAssessment.
    */
  uci::type::VehicleThreatAssessmentType& chooseVehicleThreatAssessment(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VehicleThreatAssessment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VehicleThreatAssessment.
    */
  uci::type::VehicleThreatAssessmentType& chooseVehicleThreatAssessment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ThreatNominationAssessment field contained in this message fragment
    *
    * @return The const reference to the accessor to the ThreatNominationAssessment field.
    */
  uci::type::ThreatNominationAssessmentType& getThreatNominationAssessment_() const;

  /** Returns the accessor to the ThreatNominationAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the ThreatNominationAssessment field.
    */
  const uci::type::ThreatNominationAssessmentType& getThreatNominationAssessment() const override;

  /** Returns the accessor to the ThreatNominationAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the ThreatNominationAssessment field.
    */
  uci::type::ThreatNominationAssessmentType& getThreatNominationAssessment() override;

  /** Sets this choice's choice to be threatNominationAssessment and initializes threatNominationAssessment to be the
    * specified value. A deep copy will be used by this method to set threatNominationAssessment
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setThreatNominationAssessment(const uci::type::ThreatNominationAssessmentType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ThreatNominationAssessment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ThreatNominationAssessment,
    *      false otherwise.
    */
  bool isThreatNominationAssessment() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ThreatNominationAssessment.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ThreatNominationAssessment.
    */
  uci::type::ThreatNominationAssessmentType& chooseThreatNominationAssessment(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ThreatNominationAssessment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ThreatNominationAssessment.
    */
  uci::type::ThreatNominationAssessmentType& chooseThreatNominationAssessment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AchievabilityAssessment field contained in this message fragment
    *
    * @return The const reference to the accessor to the AchievabilityAssessment field.
    */
  uci::type::AchievabilityAssessmentPET& getAchievabilityAssessment_() const;

  /** Returns the accessor to the AchievabilityAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the AchievabilityAssessment field.
    */
  const uci::type::AchievabilityAssessmentPET& getAchievabilityAssessment() const override;

  /** Returns the accessor to the AchievabilityAssessment field contained in this message fragment
    *
    * @return The reference to the accessor to the AchievabilityAssessment field.
    */
  uci::type::AchievabilityAssessmentPET& getAchievabilityAssessment() override;

  /** Sets this choice's choice to be achievabilityAssessment and initializes achievabilityAssessment to be the specified
    * value. A deep copy will be used by this method to set achievabilityAssessment
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AssessmentType& setAchievabilityAssessment(const uci::type::AchievabilityAssessmentPET& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AchievabilityAssessment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AchievabilityAssessment, false
    *      otherwise.
    */
  bool isAchievabilityAssessment() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AchievabilityAssessment.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AchievabilityAssessment.
    */
  uci::type::AchievabilityAssessmentPET& chooseAchievabilityAssessment(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AchievabilityAssessment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AchievabilityAssessment.
    */
  uci::type::AchievabilityAssessmentPET& chooseAchievabilityAssessment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<AssessmentType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::AssessmentType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::AssessmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CommPointingPlanAssessmentType> commPointingPlan_Accessor;
  std::unique_ptr<CapabilityUtilizationAssessmentType> capabilityUtilization_Accessor;
  std::unique_ptr<RouteDeconflictionAssessmentType> routeDeconfliction_Accessor;
  std::unique_ptr<RouteVulnerabilityMetricsAssessmentType> routeVulnerabilityMetrics_Accessor;
  std::unique_ptr<RouteThreatAssessmentType> routeThreatAssessment_Accessor;
  std::unique_ptr<TargetMobilityAssessmentType> targetMobility_Accessor;
  std::unique_ptr<VehicleThreatAssessmentType> vehicleThreatAssessment_Accessor;
  std::unique_ptr<ThreatNominationAssessmentType> threatNominationAssessment_Accessor;
  std::unique_ptr<AchievabilityAssessmentPET> achievabilityAssessment_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ASSESSMENTTYPE_H
