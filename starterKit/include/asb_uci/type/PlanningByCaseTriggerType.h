/** @file PlanningByCaseTriggerType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANNINGBYCASETRIGGERTYPE_H
#define ASB_UCI_TYPE_PLANNINGBYCASETRIGGERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/EmptyType.h"
#include "uci/base/Accessor.h"
#include "uci/type/PlanningByCaseTriggerType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityTaxonomyType;
class CommsLostTriggerDataType;
class EnduranceType;
class PlanVulnerabilityType;
class RequirementFailedTriggerType;
class RequirementTriggerType;
class ResponseID_Type;
class SatelliteEnduranceType;
class SystemStateFilterType;
class ThresholdOffOrbitTriggerDataType;
class ThresholdOffRouteTriggerDataType;
class ZoneViolationTriggerDataType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanningByCaseTriggerType : public virtual uci::type::PlanningByCaseTriggerType {
public:
  /** The constructor */
  PlanningByCaseTriggerType();

  /** The copy constructor
    *
    * @param rhs The PlanningByCaseTriggerType to copy from
    */
  PlanningByCaseTriggerType(const PlanningByCaseTriggerType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlanningByCaseTriggerType to move from
    */
  PlanningByCaseTriggerType(PlanningByCaseTriggerType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The PlanningByCaseTriggerType to copy from
    * @return The PlanningByCaseTriggerType that was assigned
    */
  PlanningByCaseTriggerType& operator=(const PlanningByCaseTriggerType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlanningByCaseTriggerType to move from
    * @return The PlanningByCaseTriggerType that was assigned
    */
  PlanningByCaseTriggerType& operator=(PlanningByCaseTriggerType&& rhs) = delete;

  /** The destructor */
  virtual ~PlanningByCaseTriggerType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanningByCaseTriggerType whose contents are to be used to set this
    *      uci::type::PlanningByCaseTriggerType's contents.
    */
  void copy(const uci::type::PlanningByCaseTriggerType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanningByCaseTriggerType whose contents are to be used to set this
    *      uci::type::PlanningByCaseTriggerType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlanningByCaseTriggerType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::PlanningByCaseTriggerType::PlanningByCaseTriggerTypeChoice getPlanningByCaseTriggerTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getPlanningByCaseTriggerTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setPlanningByCaseTriggerTypeChoiceOrdinal(uci::type::PlanningByCaseTriggerType::PlanningByCaseTriggerTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CapabilityAdded field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityAdded field.
    */
  uci::type::CapabilityTaxonomyType& getCapabilityAdded_() const;

  /** Returns the accessor to the CapabilityAdded field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityAdded field.
    */
  const uci::type::CapabilityTaxonomyType& getCapabilityAdded() const override;

  /** Returns the accessor to the CapabilityAdded field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityAdded field.
    */
  uci::type::CapabilityTaxonomyType& getCapabilityAdded() override;

  /** Sets this choice's choice to be capabilityAdded and initializes capabilityAdded to be the specified value. A deep
    * copy will be used by this method to set capabilityAdded
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setCapabilityAdded(const uci::type::CapabilityTaxonomyType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CapabilityAdded.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CapabilityAdded, false
    *      otherwise.
    */
  bool isCapabilityAdded() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityAdded.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityAdded.
    */
  uci::type::CapabilityTaxonomyType& chooseCapabilityAdded(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityAdded.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityAdded.
    */
  uci::type::CapabilityTaxonomyType& chooseCapabilityAdded(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CapabilityFailure field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityFailure field.
    */
  uci::type::CapabilityTaxonomyType& getCapabilityFailure_() const;

  /** Returns the accessor to the CapabilityFailure field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityFailure field.
    */
  const uci::type::CapabilityTaxonomyType& getCapabilityFailure() const override;

  /** Returns the accessor to the CapabilityFailure field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityFailure field.
    */
  uci::type::CapabilityTaxonomyType& getCapabilityFailure() override;

  /** Sets this choice's choice to be capabilityFailure and initializes capabilityFailure to be the specified value. A deep
    * copy will be used by this method to set capabilityFailure
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setCapabilityFailure(const uci::type::CapabilityTaxonomyType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CapabilityFailure.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CapabilityFailure, false
    *      otherwise.
    */
  bool isCapabilityFailure() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityFailure.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityFailure.
    */
  uci::type::CapabilityTaxonomyType& chooseCapabilityFailure(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityFailure.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityFailure.
    */
  uci::type::CapabilityTaxonomyType& chooseCapabilityFailure(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CommsLost field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommsLost field.
    */
  uci::type::CommsLostTriggerDataType& getCommsLost_() const;

  /** Returns the accessor to the CommsLost field contained in this message fragment
    *
    * @return The reference to the accessor to the CommsLost field.
    */
  const uci::type::CommsLostTriggerDataType& getCommsLost() const override;

  /** Returns the accessor to the CommsLost field contained in this message fragment
    *
    * @return The reference to the accessor to the CommsLost field.
    */
  uci::type::CommsLostTriggerDataType& getCommsLost() override;

  /** Sets this choice's choice to be commsLost and initializes commsLost to be the specified value. A deep copy will be
    * used by this method to set commsLost
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setCommsLost(const uci::type::CommsLostTriggerDataType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommsLost.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommsLost, false otherwise.
    */
  bool isCommsLost() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CommsLost.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommsLost.
    */
  uci::type::CommsLostTriggerDataType& chooseCommsLost(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CommsLost.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommsLost.
    */
  uci::type::CommsLostTriggerDataType& chooseCommsLost(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getDMPI_OverDesignation_() const;

  /** Returns the contents of the message's DMPI_OverDesignation item
    *
    * @return The contents of the DMPI_OverDesignation field
    */
  const uci::type::EmptyType& getDMPI_OverDesignation() const override;

  /** Returns the contents of the message's DMPI_OverDesignation item
    *
    * @return The contents of the DMPI_OverDesignation field
    */
  uci::type::EmptyType& getDMPI_OverDesignation() override;

  /** Sets this choice's choice to be DMPI_OverDesignation and initializes DMPI_OverDesignation to be the specified value
    *
    * @param value The new value to set DMPI_OverDesignation to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setDMPI_OverDesignation(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be DMPI_OverDesignation and initializes DMPI_OverDesignation to be the specified value
    *
    * @param value The new value to set DMPI_OverDesignation to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setDMPI_OverDesignation(const std::string& value) override;

  /** Sets this choice's choice to be DMPI_OverDesignation and initializes DMPI_OverDesignation to be the specified value
    *
    * @param value The new value to set DMPI_OverDesignation to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setDMPI_OverDesignation(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DMPI_OverDesignation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DMPI_OverDesignation, false
    *      otherwise.
    */
  bool isDMPI_OverDesignation() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by DMPI_OverDesignation.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DMPI_OverDesignation.
    */
  uci::type::EmptyType& chooseDMPI_OverDesignation(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by DMPI_OverDesignation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DMPI_OverDesignation.
    */
  uci::type::EmptyType& chooseDMPI_OverDesignation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getDMPI_UnderDesignation_() const;

  /** Returns the contents of the message's DMPI_UnderDesignation item
    *
    * @return The contents of the DMPI_UnderDesignation field
    */
  const uci::type::EmptyType& getDMPI_UnderDesignation() const override;

  /** Returns the contents of the message's DMPI_UnderDesignation item
    *
    * @return The contents of the DMPI_UnderDesignation field
    */
  uci::type::EmptyType& getDMPI_UnderDesignation() override;

  /** Sets this choice's choice to be DMPI_UnderDesignation and initializes DMPI_UnderDesignation to be the specified value
    *
    * @param value The new value to set DMPI_UnderDesignation to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setDMPI_UnderDesignation(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be DMPI_UnderDesignation and initializes DMPI_UnderDesignation to be the specified value
    *
    * @param value The new value to set DMPI_UnderDesignation to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setDMPI_UnderDesignation(const std::string& value) override;

  /** Sets this choice's choice to be DMPI_UnderDesignation and initializes DMPI_UnderDesignation to be the specified value
    *
    * @param value The new value to set DMPI_UnderDesignation to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setDMPI_UnderDesignation(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DMPI_UnderDesignation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DMPI_UnderDesignation, false
    *      otherwise.
    */
  bool isDMPI_UnderDesignation() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by DMPI_UnderDesignation.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DMPI_UnderDesignation.
    */
  uci::type::EmptyType& chooseDMPI_UnderDesignation(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by DMPI_UnderDesignation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DMPI_UnderDesignation.
    */
  uci::type::EmptyType& chooseDMPI_UnderDesignation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EnduranceLow field contained in this message fragment
    *
    * @return The const reference to the accessor to the EnduranceLow field.
    */
  uci::type::EnduranceType& getEnduranceLow_() const;

  /** Returns the accessor to the EnduranceLow field contained in this message fragment
    *
    * @return The reference to the accessor to the EnduranceLow field.
    */
  const uci::type::EnduranceType& getEnduranceLow() const override;

  /** Returns the accessor to the EnduranceLow field contained in this message fragment
    *
    * @return The reference to the accessor to the EnduranceLow field.
    */
  uci::type::EnduranceType& getEnduranceLow() override;

  /** Sets this choice's choice to be enduranceLow and initializes enduranceLow to be the specified value. A deep copy will
    * be used by this method to set enduranceLow
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setEnduranceLow(const uci::type::EnduranceType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EnduranceLow.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EnduranceLow, false otherwise.
    */
  bool isEnduranceLow() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EnduranceLow.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EnduranceLow.
    */
  uci::type::EnduranceType& chooseEnduranceLow(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EnduranceLow.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EnduranceLow.
    */
  uci::type::EnduranceType& chooseEnduranceLow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OffRoute field contained in this message fragment
    *
    * @return The const reference to the accessor to the OffRoute field.
    */
  uci::type::ThresholdOffRouteTriggerDataType& getOffRoute_() const;

  /** Returns the accessor to the OffRoute field contained in this message fragment
    *
    * @return The reference to the accessor to the OffRoute field.
    */
  const uci::type::ThresholdOffRouteTriggerDataType& getOffRoute() const override;

  /** Returns the accessor to the OffRoute field contained in this message fragment
    *
    * @return The reference to the accessor to the OffRoute field.
    */
  uci::type::ThresholdOffRouteTriggerDataType& getOffRoute() override;

  /** Sets this choice's choice to be offRoute and initializes offRoute to be the specified value. A deep copy will be used
    * by this method to set offRoute
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setOffRoute(const uci::type::ThresholdOffRouteTriggerDataType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OffRoute.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OffRoute, false otherwise.
    */
  bool isOffRoute() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OffRoute.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OffRoute.
    */
  uci::type::ThresholdOffRouteTriggerDataType& chooseOffRoute(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OffRoute.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OffRoute.
    */
  uci::type::ThresholdOffRouteTriggerDataType& chooseOffRoute(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getProximityConflict_() const;

  /** Returns the contents of the message's ProximityConflict item
    *
    * @return The contents of the ProximityConflict field
    */
  const uci::type::EmptyType& getProximityConflict() const override;

  /** Returns the contents of the message's ProximityConflict item
    *
    * @return The contents of the ProximityConflict field
    */
  uci::type::EmptyType& getProximityConflict() override;

  /** Sets this choice's choice to be ProximityConflict and initializes ProximityConflict to be the specified value
    *
    * @param value The new value to set ProximityConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setProximityConflict(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be ProximityConflict and initializes ProximityConflict to be the specified value
    *
    * @param value The new value to set ProximityConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setProximityConflict(const std::string& value) override;

  /** Sets this choice's choice to be ProximityConflict and initializes ProximityConflict to be the specified value
    *
    * @param value The new value to set ProximityConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setProximityConflict(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProximityConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProximityConflict, false
    *      otherwise.
    */
  bool isProximityConflict() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ProximityConflict.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProximityConflict.
    */
  uci::type::EmptyType& chooseProximityConflict(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ProximityConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProximityConflict.
    */
  uci::type::EmptyType& chooseProximityConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getReleasePointOutsideLAR_() const;

  /** Returns the contents of the message's ReleasePointOutsideLAR item
    *
    * @return The contents of the ReleasePointOutsideLAR field
    */
  const uci::type::EmptyType& getReleasePointOutsideLAR() const override;

  /** Returns the contents of the message's ReleasePointOutsideLAR item
    *
    * @return The contents of the ReleasePointOutsideLAR field
    */
  uci::type::EmptyType& getReleasePointOutsideLAR() override;

  /** Sets this choice's choice to be ReleasePointOutsideLAR and initializes ReleasePointOutsideLAR to be the specified
    * value
    *
    * @param value The new value to set ReleasePointOutsideLAR to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setReleasePointOutsideLAR(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be ReleasePointOutsideLAR and initializes ReleasePointOutsideLAR to be the specified
    * value
    *
    * @param value The new value to set ReleasePointOutsideLAR to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setReleasePointOutsideLAR(const std::string& value) override;

  /** Sets this choice's choice to be ReleasePointOutsideLAR and initializes ReleasePointOutsideLAR to be the specified
    * value
    *
    * @param value The new value to set ReleasePointOutsideLAR to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setReleasePointOutsideLAR(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ReleasePointOutsideLAR.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ReleasePointOutsideLAR, false
    *      otherwise.
    */
  bool isReleasePointOutsideLAR() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ReleasePointOutsideLAR.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ReleasePointOutsideLAR.
    */
  uci::type::EmptyType& chooseReleasePointOutsideLAR(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ReleasePointOutsideLAR.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ReleasePointOutsideLAR.
    */
  uci::type::EmptyType& chooseReleasePointOutsideLAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getRouteConflict_() const;

  /** Returns the contents of the message's RouteConflict item
    *
    * @return The contents of the RouteConflict field
    */
  const uci::type::EmptyType& getRouteConflict() const override;

  /** Returns the contents of the message's RouteConflict item
    *
    * @return The contents of the RouteConflict field
    */
  uci::type::EmptyType& getRouteConflict() override;

  /** Sets this choice's choice to be RouteConflict and initializes RouteConflict to be the specified value
    *
    * @param value The new value to set RouteConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRouteConflict(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be RouteConflict and initializes RouteConflict to be the specified value
    *
    * @param value The new value to set RouteConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRouteConflict(const std::string& value) override;

  /** Sets this choice's choice to be RouteConflict and initializes RouteConflict to be the specified value
    *
    * @param value The new value to set RouteConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRouteConflict(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteConflict, false otherwise.
    */
  bool isRouteConflict() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteConflict.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteConflict.
    */
  uci::type::EmptyType& chooseRouteConflict(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RouteConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteConflict.
    */
  uci::type::EmptyType& chooseRouteConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RouteVulnerability field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteVulnerability field.
    */
  uci::type::PlanVulnerabilityType& getRouteVulnerability_() const;

  /** Returns the accessor to the RouteVulnerability field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteVulnerability field.
    */
  const uci::type::PlanVulnerabilityType& getRouteVulnerability() const override;

  /** Returns the accessor to the RouteVulnerability field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteVulnerability field.
    */
  uci::type::PlanVulnerabilityType& getRouteVulnerability() override;

  /** Sets this choice's choice to be routeVulnerability and initializes routeVulnerability to be the specified value. A
    * deep copy will be used by this method to set routeVulnerability
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRouteVulnerability(const uci::type::PlanVulnerabilityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteVulnerability.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteVulnerability, false
    *      otherwise.
    */
  bool isRouteVulnerability() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteVulnerability.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteVulnerability.
    */
  uci::type::PlanVulnerabilityType& chooseRouteVulnerability(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RouteVulnerability.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteVulnerability.
    */
  uci::type::PlanVulnerabilityType& chooseRouteVulnerability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SystemStateChange field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemStateChange field.
    */
  uci::type::SystemStateFilterType& getSystemStateChange_() const;

  /** Returns the accessor to the SystemStateChange field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemStateChange field.
    */
  const uci::type::SystemStateFilterType& getSystemStateChange() const override;

  /** Returns the accessor to the SystemStateChange field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemStateChange field.
    */
  uci::type::SystemStateFilterType& getSystemStateChange() override;

  /** Sets this choice's choice to be systemStateChange and initializes systemStateChange to be the specified value. A deep
    * copy will be used by this method to set systemStateChange
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setSystemStateChange(const uci::type::SystemStateFilterType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SystemStateChange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SystemStateChange, false
    *      otherwise.
    */
  bool isSystemStateChange() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SystemStateChange.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SystemStateChange.
    */
  uci::type::SystemStateFilterType& chooseSystemStateChange(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SystemStateChange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SystemStateChange.
    */
  uci::type::SystemStateFilterType& chooseSystemStateChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RequirementAdded field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequirementAdded field.
    */
  uci::type::RequirementTriggerType& getRequirementAdded_() const;

  /** Returns the accessor to the RequirementAdded field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementAdded field.
    */
  const uci::type::RequirementTriggerType& getRequirementAdded() const override;

  /** Returns the accessor to the RequirementAdded field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementAdded field.
    */
  uci::type::RequirementTriggerType& getRequirementAdded() override;

  /** Sets this choice's choice to be requirementAdded and initializes requirementAdded to be the specified value. A deep
    * copy will be used by this method to set requirementAdded
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementAdded(const uci::type::RequirementTriggerType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementAdded.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementAdded, false
    *      otherwise.
    */
  bool isRequirementAdded() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementAdded.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementAdded.
    */
  uci::type::RequirementTriggerType& chooseRequirementAdded(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementAdded.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementAdded.
    */
  uci::type::RequirementTriggerType& chooseRequirementAdded(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getRequirementDependencyFailed_() const;

  /** Returns the contents of the message's RequirementDependencyFailed item
    *
    * @return The contents of the RequirementDependencyFailed field
    */
  const uci::type::EmptyType& getRequirementDependencyFailed() const override;

  /** Returns the contents of the message's RequirementDependencyFailed item
    *
    * @return The contents of the RequirementDependencyFailed field
    */
  uci::type::EmptyType& getRequirementDependencyFailed() override;

  /** Sets this choice's choice to be RequirementDependencyFailed and initializes RequirementDependencyFailed to be the
    * specified value
    *
    * @param value The new value to set RequirementDependencyFailed to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementDependencyFailed(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be RequirementDependencyFailed and initializes RequirementDependencyFailed to be the
    * specified value
    *
    * @param value The new value to set RequirementDependencyFailed to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementDependencyFailed(const std::string& value) override;

  /** Sets this choice's choice to be RequirementDependencyFailed and initializes RequirementDependencyFailed to be the
    * specified value
    *
    * @param value The new value to set RequirementDependencyFailed to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementDependencyFailed(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementDependencyFailed.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementDependencyFailed,
    *      false otherwise.
    */
  bool isRequirementDependencyFailed() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementDependencyFailed.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementDependencyFailed.
    */
  uci::type::EmptyType& chooseRequirementDependencyFailed(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementDependencyFailed.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementDependencyFailed.
    */
  uci::type::EmptyType& chooseRequirementDependencyFailed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RequirementDropped field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequirementDropped field.
    */
  uci::type::RequirementTriggerType& getRequirementDropped_() const;

  /** Returns the accessor to the RequirementDropped field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementDropped field.
    */
  const uci::type::RequirementTriggerType& getRequirementDropped() const override;

  /** Returns the accessor to the RequirementDropped field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementDropped field.
    */
  uci::type::RequirementTriggerType& getRequirementDropped() override;

  /** Sets this choice's choice to be requirementDropped and initializes requirementDropped to be the specified value. A
    * deep copy will be used by this method to set requirementDropped
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementDropped(const uci::type::RequirementTriggerType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementDropped.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementDropped, false
    *      otherwise.
    */
  bool isRequirementDropped() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementDropped.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementDropped.
    */
  uci::type::RequirementTriggerType& chooseRequirementDropped(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementDropped.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementDropped.
    */
  uci::type::RequirementTriggerType& chooseRequirementDropped(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RequirementFailed field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequirementFailed field.
    */
  uci::type::RequirementFailedTriggerType& getRequirementFailed_() const;

  /** Returns the accessor to the RequirementFailed field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementFailed field.
    */
  const uci::type::RequirementFailedTriggerType& getRequirementFailed() const override;

  /** Returns the accessor to the RequirementFailed field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementFailed field.
    */
  uci::type::RequirementFailedTriggerType& getRequirementFailed() override;

  /** Sets this choice's choice to be requirementFailed and initializes requirementFailed to be the specified value. A deep
    * copy will be used by this method to set requirementFailed
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementFailed(const uci::type::RequirementFailedTriggerType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementFailed.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementFailed, false
    *      otherwise.
    */
  bool isRequirementFailed() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementFailed.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementFailed.
    */
  uci::type::RequirementFailedTriggerType& chooseRequirementFailed(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementFailed.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementFailed.
    */
  uci::type::RequirementFailedTriggerType& chooseRequirementFailed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RequirementChange field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequirementChange field.
    */
  uci::type::RequirementTriggerType& getRequirementChange_() const;

  /** Returns the accessor to the RequirementChange field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementChange field.
    */
  const uci::type::RequirementTriggerType& getRequirementChange() const override;

  /** Returns the accessor to the RequirementChange field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementChange field.
    */
  uci::type::RequirementTriggerType& getRequirementChange() override;

  /** Sets this choice's choice to be requirementChange and initializes requirementChange to be the specified value. A deep
    * copy will be used by this method to set requirementChange
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementChange(const uci::type::RequirementTriggerType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementChange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementChange, false
    *      otherwise.
    */
  bool isRequirementChange() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementChange.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementChange.
    */
  uci::type::RequirementTriggerType& chooseRequirementChange(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementChange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementChange.
    */
  uci::type::RequirementTriggerType& chooseRequirementChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getRequirementTiming_() const;

  /** Returns the contents of the message's RequirementTiming item
    *
    * @return The contents of the RequirementTiming field
    */
  const uci::type::EmptyType& getRequirementTiming() const override;

  /** Returns the contents of the message's RequirementTiming item
    *
    * @return The contents of the RequirementTiming field
    */
  uci::type::EmptyType& getRequirementTiming() override;

  /** Sets this choice's choice to be RequirementTiming and initializes RequirementTiming to be the specified value
    *
    * @param value The new value to set RequirementTiming to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementTiming(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be RequirementTiming and initializes RequirementTiming to be the specified value
    *
    * @param value The new value to set RequirementTiming to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementTiming(const std::string& value) override;

  /** Sets this choice's choice to be RequirementTiming and initializes RequirementTiming to be the specified value
    *
    * @param value The new value to set RequirementTiming to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setRequirementTiming(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementTiming.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementTiming, false
    *      otherwise.
    */
  bool isRequirementTiming() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementTiming.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementTiming.
    */
  uci::type::EmptyType& chooseRequirementTiming(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementTiming.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementTiming.
    */
  uci::type::EmptyType& chooseRequirementTiming(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ZoneViolation field contained in this message fragment
    *
    * @return The const reference to the accessor to the ZoneViolation field.
    */
  uci::type::ZoneViolationTriggerDataType& getZoneViolation_() const;

  /** Returns the accessor to the ZoneViolation field contained in this message fragment
    *
    * @return The reference to the accessor to the ZoneViolation field.
    */
  const uci::type::ZoneViolationTriggerDataType& getZoneViolation() const override;

  /** Returns the accessor to the ZoneViolation field contained in this message fragment
    *
    * @return The reference to the accessor to the ZoneViolation field.
    */
  uci::type::ZoneViolationTriggerDataType& getZoneViolation() override;

  /** Sets this choice's choice to be zoneViolation and initializes zoneViolation to be the specified value. A deep copy
    * will be used by this method to set zoneViolation
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setZoneViolation(const uci::type::ZoneViolationTriggerDataType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ZoneViolation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ZoneViolation, false otherwise.
    */
  bool isZoneViolation() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ZoneViolation.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ZoneViolation.
    */
  uci::type::ZoneViolationTriggerDataType& chooseZoneViolation(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ZoneViolation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ZoneViolation.
    */
  uci::type::ZoneViolationTriggerDataType& chooseZoneViolation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getOrbitConflict_() const;

  /** Returns the contents of the message's OrbitConflict item
    *
    * @return The contents of the OrbitConflict field
    */
  const uci::type::EmptyType& getOrbitConflict() const override;

  /** Returns the contents of the message's OrbitConflict item
    *
    * @return The contents of the OrbitConflict field
    */
  uci::type::EmptyType& getOrbitConflict() override;

  /** Sets this choice's choice to be OrbitConflict and initializes OrbitConflict to be the specified value
    *
    * @param value The new value to set OrbitConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setOrbitConflict(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be OrbitConflict and initializes OrbitConflict to be the specified value
    *
    * @param value The new value to set OrbitConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setOrbitConflict(const std::string& value) override;

  /** Sets this choice's choice to be OrbitConflict and initializes OrbitConflict to be the specified value
    *
    * @param value The new value to set OrbitConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setOrbitConflict(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitConflict, false otherwise.
    */
  bool isOrbitConflict() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitConflict.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitConflict.
    */
  uci::type::EmptyType& chooseOrbitConflict(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitConflict.
    */
  uci::type::EmptyType& chooseOrbitConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OffPlannedOrbit field contained in this message fragment
    *
    * @return The const reference to the accessor to the OffPlannedOrbit field.
    */
  uci::type::ThresholdOffOrbitTriggerDataType& getOffPlannedOrbit_() const;

  /** Returns the accessor to the OffPlannedOrbit field contained in this message fragment
    *
    * @return The reference to the accessor to the OffPlannedOrbit field.
    */
  const uci::type::ThresholdOffOrbitTriggerDataType& getOffPlannedOrbit() const override;

  /** Returns the accessor to the OffPlannedOrbit field contained in this message fragment
    *
    * @return The reference to the accessor to the OffPlannedOrbit field.
    */
  uci::type::ThresholdOffOrbitTriggerDataType& getOffPlannedOrbit() override;

  /** Sets this choice's choice to be offPlannedOrbit and initializes offPlannedOrbit to be the specified value. A deep
    * copy will be used by this method to set offPlannedOrbit
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setOffPlannedOrbit(const uci::type::ThresholdOffOrbitTriggerDataType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OffPlannedOrbit.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OffPlannedOrbit, false
    *      otherwise.
    */
  bool isOffPlannedOrbit() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OffPlannedOrbit.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OffPlannedOrbit.
    */
  uci::type::ThresholdOffOrbitTriggerDataType& chooseOffPlannedOrbit(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OffPlannedOrbit.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OffPlannedOrbit.
    */
  uci::type::ThresholdOffOrbitTriggerDataType& chooseOffPlannedOrbit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SpacecraftEnduranceLow field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpacecraftEnduranceLow field.
    */
  uci::type::SatelliteEnduranceType& getSpacecraftEnduranceLow_() const;

  /** Returns the accessor to the SpacecraftEnduranceLow field contained in this message fragment
    *
    * @return The reference to the accessor to the SpacecraftEnduranceLow field.
    */
  const uci::type::SatelliteEnduranceType& getSpacecraftEnduranceLow() const override;

  /** Returns the accessor to the SpacecraftEnduranceLow field contained in this message fragment
    *
    * @return The reference to the accessor to the SpacecraftEnduranceLow field.
    */
  uci::type::SatelliteEnduranceType& getSpacecraftEnduranceLow() override;

  /** Sets this choice's choice to be spacecraftEnduranceLow and initializes spacecraftEnduranceLow to be the specified
    * value. A deep copy will be used by this method to set spacecraftEnduranceLow
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setSpacecraftEnduranceLow(const uci::type::SatelliteEnduranceType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpacecraftEnduranceLow.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpacecraftEnduranceLow, false
    *      otherwise.
    */
  bool isSpacecraftEnduranceLow() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SpacecraftEnduranceLow.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpacecraftEnduranceLow.
    */
  uci::type::SatelliteEnduranceType& chooseSpacecraftEnduranceLow(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SpacecraftEnduranceLow.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpacecraftEnduranceLow.
    */
  uci::type::SatelliteEnduranceType& chooseSpacecraftEnduranceLow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getSpacecraftProximityConflict_() const;

  /** Returns the contents of the message's SpacecraftProximityConflict item
    *
    * @return The contents of the SpacecraftProximityConflict field
    */
  const uci::type::EmptyType& getSpacecraftProximityConflict() const override;

  /** Returns the contents of the message's SpacecraftProximityConflict item
    *
    * @return The contents of the SpacecraftProximityConflict field
    */
  uci::type::EmptyType& getSpacecraftProximityConflict() override;

  /** Sets this choice's choice to be SpacecraftProximityConflict and initializes SpacecraftProximityConflict to be the
    * specified value
    *
    * @param value The new value to set SpacecraftProximityConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setSpacecraftProximityConflict(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be SpacecraftProximityConflict and initializes SpacecraftProximityConflict to be the
    * specified value
    *
    * @param value The new value to set SpacecraftProximityConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setSpacecraftProximityConflict(const std::string& value) override;

  /** Sets this choice's choice to be SpacecraftProximityConflict and initializes SpacecraftProximityConflict to be the
    * specified value
    *
    * @param value The new value to set SpacecraftProximityConflict to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setSpacecraftProximityConflict(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpacecraftProximityConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpacecraftProximityConflict,
    *      false otherwise.
    */
  bool isSpacecraftProximityConflict() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SpacecraftProximityConflict.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpacecraftProximityConflict.
    */
  uci::type::EmptyType& chooseSpacecraftProximityConflict(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SpacecraftProximityConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpacecraftProximityConflict.
    */
  uci::type::EmptyType& chooseSpacecraftProximityConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ResponseID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResponseID field.
    */
  uci::type::ResponseID_Type& getResponseID_() const;

  /** Returns the accessor to the ResponseID field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponseID field.
    */
  const uci::type::ResponseID_Type& getResponseID() const override;

  /** Returns the accessor to the ResponseID field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponseID field.
    */
  uci::type::ResponseID_Type& getResponseID() override;

  /** Sets this choice's choice to be responseID and initializes responseID to be the specified value. A deep copy will be
    * used by this method to set responseID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningByCaseTriggerType& setResponseID(const uci::type::ResponseID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ResponseID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ResponseID, false otherwise.
    */
  bool isResponseID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ResponseID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ResponseID.
    */
  uci::type::ResponseID_Type& chooseResponseID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ResponseID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ResponseID.
    */
  uci::type::ResponseID_Type& chooseResponseID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlanningByCaseTriggerType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningByCaseTriggerType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlanningByCaseTriggerType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CapabilityTaxonomyType> capabilityAdded_Accessor;
  std::unique_ptr<CapabilityTaxonomyType> capabilityFailure_Accessor;
  std::unique_ptr<CommsLostTriggerDataType> commsLost_Accessor;
  std::unique_ptr<EmptyType> dMPI_OverDesignation_Accessor;
  std::unique_ptr<EmptyType> dMPI_UnderDesignation_Accessor;
  std::unique_ptr<EnduranceType> enduranceLow_Accessor;
  std::unique_ptr<ThresholdOffRouteTriggerDataType> offRoute_Accessor;
  std::unique_ptr<EmptyType> proximityConflict_Accessor;
  std::unique_ptr<EmptyType> releasePointOutsideLAR_Accessor;
  std::unique_ptr<EmptyType> routeConflict_Accessor;
  std::unique_ptr<PlanVulnerabilityType> routeVulnerability_Accessor;
  std::unique_ptr<SystemStateFilterType> systemStateChange_Accessor;
  std::unique_ptr<RequirementTriggerType> requirementAdded_Accessor;
  std::unique_ptr<EmptyType> requirementDependencyFailed_Accessor;
  std::unique_ptr<RequirementTriggerType> requirementDropped_Accessor;
  std::unique_ptr<RequirementFailedTriggerType> requirementFailed_Accessor;
  std::unique_ptr<RequirementTriggerType> requirementChange_Accessor;
  std::unique_ptr<EmptyType> requirementTiming_Accessor;
  std::unique_ptr<ZoneViolationTriggerDataType> zoneViolation_Accessor;
  std::unique_ptr<EmptyType> orbitConflict_Accessor;
  std::unique_ptr<ThresholdOffOrbitTriggerDataType> offPlannedOrbit_Accessor;
  std::unique_ptr<SatelliteEnduranceType> spacecraftEnduranceLow_Accessor;
  std::unique_ptr<EmptyType> spacecraftProximityConflict_Accessor;
  std::unique_ptr<ResponseID_Type> responseID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANNINGBYCASETRIGGERTYPE_H
