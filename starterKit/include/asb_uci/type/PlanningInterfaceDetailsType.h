/** @file PlanningInterfaceDetailsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANNINGINTERFACEDETAILSTYPE_H
#define ASB_UCI_TYPE_PLANNINGINTERFACEDETAILSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningInterfaceDetailsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActionPlanProcessType;
class ActivityPlanProcessType;
class EffectPlanProcessType;
class MissionPlanProcessType;
class OrbitPlanProcessType;
class ResponsePlanProcessType;
class RoutePlanProcessType;
class TaskPlanProcessType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanningInterfaceDetailsType : public virtual uci::type::PlanningInterfaceDetailsType {
public:
  /** The constructor */
  PlanningInterfaceDetailsType();

  /** The copy constructor
    *
    * @param rhs The PlanningInterfaceDetailsType to copy from
    */
  PlanningInterfaceDetailsType(const PlanningInterfaceDetailsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlanningInterfaceDetailsType to move from
    */
  PlanningInterfaceDetailsType(PlanningInterfaceDetailsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlanningInterfaceDetailsType to copy from
    * @return The PlanningInterfaceDetailsType that was assigned
    */
  PlanningInterfaceDetailsType& operator=(const PlanningInterfaceDetailsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlanningInterfaceDetailsType to move from
    * @return The PlanningInterfaceDetailsType that was assigned
    */
  PlanningInterfaceDetailsType& operator=(PlanningInterfaceDetailsType&& rhs) = delete;

  /** The destructor */
  virtual ~PlanningInterfaceDetailsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanningInterfaceDetailsType whose contents are to be used to set this
    *      uci::type::PlanningInterfaceDetailsType's contents.
    */
  void copy(const uci::type::PlanningInterfaceDetailsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanningInterfaceDetailsType whose contents are to be used to set this
    *      uci::type::PlanningInterfaceDetailsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlanningInterfaceDetailsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionPlanProcessType& getMissionPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MissionPlanProcessType& getMissionPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionPlanProcessType& getMissionPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setMissionPlan(const uci::type::MissionPlanProcessType& accessor) override;

  /** Returns whether this optional field MissionPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionPlan() const noexcept override;

  /** Enables the optional field such that getMissionPlan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionPlanProcessType& enableMissionPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearMissionPlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TaskPlanProcessType& getTaskPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::TaskPlanProcessType& getTaskPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TaskPlanProcessType& getTaskPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setTaskPlan(const uci::type::TaskPlanProcessType& accessor) override;

  /** Returns whether this optional field TaskPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTaskPlan() const noexcept override;

  /** Enables the optional field such that getTaskPlan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TaskPlanProcessType& enableTaskPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearTaskPlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanProcessType& getRoutePlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RoutePlanProcessType& getRoutePlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanProcessType& getRoutePlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setRoutePlan(const uci::type::RoutePlanProcessType& accessor) override;

  /** Returns whether this optional field RoutePlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRoutePlan() const noexcept override;

  /** Enables the optional field such that getRoutePlan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanProcessType& enableRoutePlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearRoutePlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& getRouteActivityPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActivityPlanProcessType& getRouteActivityPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& getRouteActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setRouteActivityPlan(const uci::type::ActivityPlanProcessType& accessor) override;

  /** Returns whether this optional field RouteActivityPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRouteActivityPlan() const noexcept override;

  /** Enables the optional field such that getRouteActivityPlan will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& enableRouteActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearRouteActivityPlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& getActivityPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActivityPlanProcessType& getActivityPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& getActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setActivityPlan(const uci::type::ActivityPlanProcessType& accessor) override;

  /** Returns whether this optional field ActivityPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivityPlan() const noexcept override;

  /** Enables the optional field such that getActivityPlan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& enableActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearActivityPlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitPlanProcessType& getOrbitPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitPlanProcessType& getOrbitPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitPlanProcessType& getOrbitPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setOrbitPlan(const uci::type::OrbitPlanProcessType& accessor) override;

  /** Returns whether this optional field OrbitPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrbitPlan() const noexcept override;

  /** Enables the optional field such that getOrbitPlan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitPlanProcessType& enableOrbitPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearOrbitPlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& getOrbitActivityPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActivityPlanProcessType& getOrbitActivityPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& getOrbitActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setOrbitActivityPlan(const uci::type::ActivityPlanProcessType& accessor) override;

  /** Returns whether this optional field OrbitActivityPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrbitActivityPlan() const noexcept override;

  /** Enables the optional field such that getOrbitActivityPlan will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanProcessType& enableOrbitActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearOrbitActivityPlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EffectPlanProcessType& getEffectPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EffectPlanProcessType& getEffectPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EffectPlanProcessType& getEffectPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setEffectPlan(const uci::type::EffectPlanProcessType& accessor) override;

  /** Returns whether this optional field EffectPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEffectPlan() const noexcept override;

  /** Enables the optional field such that getEffectPlan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EffectPlanProcessType& enableEffectPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearEffectPlan() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActionPlanProcessType& getActionPlanProcess_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActionPlanProcessType& getActionPlanProcess() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActionPlanProcessType& getActionPlanProcess() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setActionPlanProcess(const uci::type::ActionPlanProcessType& accessor) override;

  /** Returns whether this optional field ActionPlanProcessis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActionPlanProcess() const noexcept override;

  /** Enables the optional field such that getActionPlanProcess will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActionPlanProcessType& enableActionPlanProcess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearActionPlanProcess() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ResponsePlanProcessType& getResponsePlanProcess_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ResponsePlanProcessType& getResponsePlanProcess() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ResponsePlanProcessType& getResponsePlanProcess() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& setResponsePlanProcess(const uci::type::ResponsePlanProcessType& accessor) override;

  /** Returns whether this optional field ResponsePlanProcessis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasResponsePlanProcess() const noexcept override;

  /** Enables the optional field such that getResponsePlanProcess will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ResponsePlanProcessType& enableResponsePlanProcess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanningInterfaceDetailsType& clearResponsePlanProcess() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlanningInterfaceDetailsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningInterfaceDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlanningInterfaceDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MissionPlanProcessType> missionPlan_Accessor;
  std::unique_ptr<TaskPlanProcessType> taskPlan_Accessor;
  std::unique_ptr<RoutePlanProcessType> routePlan_Accessor;
  std::unique_ptr<ActivityPlanProcessType> routeActivityPlan_Accessor;
  std::unique_ptr<ActivityPlanProcessType> activityPlan_Accessor;
  std::unique_ptr<OrbitPlanProcessType> orbitPlan_Accessor;
  std::unique_ptr<ActivityPlanProcessType> orbitActivityPlan_Accessor;
  std::unique_ptr<EffectPlanProcessType> effectPlan_Accessor;
  std::unique_ptr<ActionPlanProcessType> actionPlanProcess_Accessor;
  std::unique_ptr<ResponsePlanProcessType> responsePlanProcess_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANNINGINTERFACEDETAILSTYPE_H
