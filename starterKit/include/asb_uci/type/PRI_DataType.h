/** @file PRI_DataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PRI_DATATYPE_H
#define ASB_UCI_TYPE_PRI_DATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/PRI_AgilePatternEnum.h"
#include "../../../include/asb_uci/type/PRI_DataBaseType.h"
#include "../../../include/asb_uci/type/PRI_MeasurementEnum.h"
#include "../../../include/asb_uci/type/PRI_SwitchingPatternEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PRI_DataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PRI_DataType : public virtual uci::type::PRI_DataType, public virtual PRI_DataBaseType {
public:
  /** Indicates a measured PRI pattern interval. The intervals are generally reported in the order they are measured, in
    * order to preserve the pattern sequence. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using PRI_PatternInterval = asb_uci::base::BoundedList<uci::type::DurationType, uci::type::accessorType::durationType, asb_uci::type::DurationType>;

  /** The constructor */
  PRI_DataType();

  /** The copy constructor
    *
    * @param rhs The PRI_DataType to copy from
    */
  PRI_DataType(const PRI_DataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PRI_DataType to move from
    */
  PRI_DataType(PRI_DataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PRI_DataType to copy from
    * @return The PRI_DataType that was assigned
    */
  PRI_DataType& operator=(const PRI_DataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PRI_DataType to move from
    * @return The PRI_DataType that was assigned
    */
  PRI_DataType& operator=(PRI_DataType&& rhs) = delete;

  /** The destructor */
  ~PRI_DataType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PRI_DataType whose contents are to be used to set this uci::type::PRI_DataType's
    *      contents.
    */
  void copy(const uci::type::PRI_DataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PRI_DataType whose contents are to be used to set this uci::type::PRI_DataType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PRI_DataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_SwitchingPatternEnum& getPRI_SwitchingPattern_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PRI_SwitchingPatternEnum& getPRI_SwitchingPattern() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_SwitchingPatternEnum& getPRI_SwitchingPattern() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_SwitchingPattern(const uci::type::PRI_SwitchingPatternEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_SwitchingPattern(uci::type::PRI_SwitchingPatternEnum::EnumerationItem value) override;

  /** Returns whether this optional field PRI_SwitchingPatternis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_SwitchingPattern() const noexcept override;

  /** Enables the optional field such that getPRI_SwitchingPattern will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_SwitchingPatternEnum& enablePRI_SwitchingPattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_SwitchingPattern() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_AgilePatternEnum& getPRI_AgilePattern_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PRI_AgilePatternEnum& getPRI_AgilePattern() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_AgilePatternEnum& getPRI_AgilePattern() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_AgilePattern(const uci::type::PRI_AgilePatternEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_AgilePattern(uci::type::PRI_AgilePatternEnum::EnumerationItem value) override;

  /** Returns whether this optional field PRI_AgilePatternis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_AgilePattern() const noexcept override;

  /** Enables the optional field such that getPRI_AgilePattern will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_AgilePatternEnum& enablePRI_AgilePattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_AgilePattern() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_MeasurementEnum& getPRI_Measurement_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PRI_MeasurementEnum& getPRI_Measurement() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_MeasurementEnum& getPRI_Measurement() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_Measurement(const uci::type::PRI_MeasurementEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_Measurement(uci::type::PRI_MeasurementEnum::EnumerationItem value) override;

  /** Returns whether this optional field PRI_Measurementis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_Measurement() const noexcept override;

  /** Enables the optional field such that getPRI_Measurement will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_MeasurementEnum& enablePRI_Measurement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_Measurement() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPRI_JitterDeviation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_JitterDeviation(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PRI_JitterDeviationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_JitterDeviation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_JitterDeviation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPRI_PulseGroupsPresent() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_PulseGroupsPresent(xs::Boolean value) override;

  /** Returns whether this optional field PRI_PulseGroupsPresentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_PulseGroupsPresent() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_PulseGroupsPresent() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPRI_Quantized() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_Quantized(xs::Boolean value) override;

  /** Returns whether this optional field PRI_Quantizedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_Quantized() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_Quantized() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPRI_QuantizationPeriod() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_QuantizationPeriod(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PRI_QuantizationPeriodis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_QuantizationPeriod() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_QuantizationPeriod() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPRI_Squirrelly() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_Squirrelly(xs::Boolean value) override;

  /** Returns whether this optional field PRI_Squirrellyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_Squirrelly() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_Squirrelly() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPRI_MissingPulse() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_MissingPulse(xs::Boolean value) override;

  /** Returns whether this optional field PRI_MissingPulseis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_MissingPulse() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_MissingPulse() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPRI_PatternPeriod() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_PatternPeriod(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PRI_PatternPeriodis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_PatternPeriod() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_PatternPeriod() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getPRI_PatternLevels() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_PatternLevels(xs::UnsignedInt value) override;

  /** Returns whether this optional field PRI_PatternLevelsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_PatternLevels() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_PatternLevels() noexcept override;

  /** Returns the accessor to the PRI_PatternInterval field contained in this message fragment
    *
    * @return The const reference to the accessor to the PRI_PatternInterval field.
    */
  const uci::type::PRI_DataType::PRI_PatternInterval& getPRI_PatternInterval() const override;

  /** Returns the accessor to the PRI_PatternInterval field contained in this message fragment
    *
    * @return The reference to the accessor to the PRI_PatternInterval field.
    */
  uci::type::PRI_DataType::PRI_PatternInterval& getPRI_PatternInterval() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_PatternInterval(const uci::type::PRI_DataType::PRI_PatternInterval& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getPRI_JitterDetected_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getPRI_JitterDetected() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getPRI_JitterDetected() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_JitterDetected(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_JitterDetected(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& setPRI_JitterDetected(const char* value) override;

  /** Returns whether this optional field pRI_JitterDetected_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_JitterDetected() const noexcept override;

  /** Enables the optional field such that getPRI_JitterDetected will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enablePRI_JitterDetected(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PRI_DataType& clearPRI_JitterDetected() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PRI_DataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PRI_DataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PRI_DataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PRI_SwitchingPatternEnum> pRI_SwitchingPattern_Accessor;
  std::unique_ptr<PRI_AgilePatternEnum> pRI_AgilePattern_Accessor;
  std::unique_ptr<PRI_MeasurementEnum> pRI_Measurement_Accessor;
  boost::optional<DurationTypeValue> pRI_JitterDeviation_Accessor;
  boost::optional<asb_xs::Boolean> pRI_PulseGroupsPresent_Accessor;
  boost::optional<asb_xs::Boolean> pRI_Quantized_Accessor;
  boost::optional<DurationTypeValue> pRI_QuantizationPeriod_Accessor;
  boost::optional<asb_xs::Boolean> pRI_Squirrelly_Accessor;
  boost::optional<asb_xs::Boolean> pRI_MissingPulse_Accessor;
  boost::optional<DurationTypeValue> pRI_PatternPeriod_Accessor;
  boost::optional<asb_xs::UnsignedInt> pRI_PatternLevels_Accessor;
  std::unique_ptr<PRI_PatternInterval> pRI_PatternInterval_Accessor;
  std::unique_ptr<EmptyType> pRI_JitterDetected_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PRI_DATATYPE_H
