/** @file DLZ_DataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_DLZ_DATATYPE_H
#define ASB_UCI_TYPE_DLZ_DATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/AnglePositiveType.h"
#include "../../../include/asb_uci/type/AngleType.h"
#include "../../../include/asb_uci/type/DistanceType.h"
#include "../../../include/asb_uci/type/TimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DLZ_DataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class SteeringUnitVectorType;
class Velocity2D_Type;

/** This type contains the data necessary for a DLZ. */
class DLZ_DataType : public virtual uci::type::DLZ_DataType {
public:
  /** The constructor */
  DLZ_DataType();

  /** The copy constructor
    *
    * @param rhs The DLZ_DataType to copy from
    */
  DLZ_DataType(const DLZ_DataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The DLZ_DataType to move from
    */
  DLZ_DataType(DLZ_DataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The DLZ_DataType to copy from
    * @return The DLZ_DataType that was assigned
    */
  DLZ_DataType& operator=(const DLZ_DataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The DLZ_DataType to move from
    * @return The DLZ_DataType that was assigned
    */
  DLZ_DataType& operator=(DLZ_DataType&& rhs) = delete;

  /** The destructor */
  virtual ~DLZ_DataType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::DLZ_DataType whose contents are to be used to set this uci::type::DLZ_DataType's
    *      contents.
    */
  void copy(const uci::type::DLZ_DataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::DLZ_DataType whose contents are to be used to set this uci::type::DLZ_DataType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::DLZ_DataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getRangeTurnAndClose() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setRangeTurnAndClose(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field RangeTurnAndCloseis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRangeTurnAndClose() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearRangeTurnAndClose() noexcept override;

  /** Returns the contents of the message's RangeMinimum field
    *
    * @return The contents of the RangeMinimum field
    */
  uci::type::DistanceTypeValue getRangeMinimum() const override;

  /** Sets the contents of the message's RangeMinimum field
    *
    * @param value The new value to set the RangeMinimum field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setRangeMinimum(uci::type::DistanceTypeValue value) override;

  /** Returns the contents of the message's RangeTurnAndRun field
    *
    * @return The contents of the RangeTurnAndRun field
    */
  uci::type::DistanceTypeValue getRangeTurnAndRun() const override;

  /** Sets the contents of the message's RangeTurnAndRun field
    *
    * @param value The new value to set the RangeTurnAndRun field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setRangeTurnAndRun(uci::type::DistanceTypeValue value) override;

  /** Returns the contents of the message's RangeProbabilityOfIntercept field
    *
    * @return The contents of the RangeProbabilityOfIntercept field
    */
  uci::type::DistanceTypeValue getRangeProbabilityOfIntercept() const override;

  /** Sets the contents of the message's RangeProbabilityOfIntercept field
    *
    * @param value The new value to set the RangeProbabilityOfIntercept field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setRangeProbabilityOfIntercept(uci::type::DistanceTypeValue value) override;

  /** Returns the contents of the message's RangeMaxGuidance field
    *
    * @return The contents of the RangeMaxGuidance field
    */
  uci::type::DistanceTypeValue getRangeMaxGuidance() const override;

  /** Sets the contents of the message's RangeMaxGuidance field
    *
    * @param value The new value to set the RangeMaxGuidance field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setRangeMaxGuidance(uci::type::DistanceTypeValue value) override;

  /** Returns the contents of the message's RangeOptimal field
    *
    * @return The contents of the RangeOptimal field
    */
  uci::type::DistanceTypeValue getRangeOptimal() const override;

  /** Sets the contents of the message's RangeOptimal field
    *
    * @param value The new value to set the RangeOptimal field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setRangeOptimal(uci::type::DistanceTypeValue value) override;

  /** Returns the contents of the message's RangeMaxAero field
    *
    * @return The contents of the RangeMaxAero field
    */
  uci::type::DistanceTypeValue getRangeMaxAero() const override;

  /** Sets the contents of the message's RangeMaxAero field
    *
    * @param value The new value to set the RangeMaxAero field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setRangeMaxAero(uci::type::DistanceTypeValue value) override;

  /** Returns the accessor to the TargetClosureRate field contained in this message fragment
    *
    * @return The const reference to the accessor to the TargetClosureRate field.
    */
  const uci::type::Velocity2D_Type& getTargetClosureRate() const override;

  /** Returns the accessor to the TargetClosureRate field contained in this message fragment
    *
    * @return The reference to the accessor to the TargetClosureRate field.
    */
  uci::type::Velocity2D_Type& getTargetClosureRate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setTargetClosureRate(const uci::type::Velocity2D_Type& accessor) override;

  /** Enables the optional field such that getTargetClosureRate will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Velocity2D_Type& enableTargetClosureRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's TargetRange field
    *
    * @return The contents of the TargetRange field
    */
  uci::type::DistanceTypeValue getTargetRange() const override;

  /** Sets the contents of the message's TargetRange field
    *
    * @param value The new value to set the TargetRange field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setTargetRange(uci::type::DistanceTypeValue value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getWeaponToTargetSeekerActivationRange() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setWeaponToTargetSeekerActivationRange(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field WeaponToTargetSeekerActivationRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWeaponToTargetSeekerActivationRange() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearWeaponToTargetSeekerActivationRange() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getWeaponToTargetAutonomousRange() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setWeaponToTargetAutonomousRange(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field WeaponToTargetAutonomousRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWeaponToTargetAutonomousRange() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearWeaponToTargetAutonomousRange() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getWeaponToTargetMPRFRange() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setWeaponToTargetMPRFRange(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field WeaponToTargetMPRFRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWeaponToTargetMPRFRange() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearWeaponToTargetMPRFRange() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getA_Pole() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setA_Pole(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field A_Poleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasA_Pole() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearA_Pole() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getF_Pole() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setF_Pole(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field F_Poleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasF_Pole() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearF_Pole() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getM_Pole() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setM_Pole(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field M_Poleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasM_Pole() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearM_Pole() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getAllowableSteeringError() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setAllowableSteeringError(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field AllowableSteeringErroris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAllowableSteeringError() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearAllowableSteeringError() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SteeringUnitVectorType& getSteeringUnitVector_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SteeringUnitVectorType& getSteeringUnitVector() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SteeringUnitVectorType& getSteeringUnitVector() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setSteeringUnitVector(const uci::type::SteeringUnitVectorType& accessor) override;

  /** Returns whether this optional field SteeringUnitVectoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSteeringUnitVector() const noexcept override;

  /** Enables the optional field such that getSteeringUnitVector will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SteeringUnitVectorType& enableSteeringUnitVector(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearSteeringUnitVector() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleTypeValue getLoftAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setLoftAngle(uci::type::AngleTypeValue value) override;

  /** Returns whether this optional field LoftAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLoftAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearLoftAngle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getDigitalManuveringCueAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setDigitalManuveringCueAngle(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field DigitalManuveringCueAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDigitalManuveringCueAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearDigitalManuveringCueAngle() noexcept override;

  /** Returns the contents of the message's TimeOfIntercept field
    *
    * @return The contents of the TimeOfIntercept field
    */
  uci::type::TimeTypeValue getTimeOfIntercept() const override;

  /** Sets the contents of the message's TimeOfIntercept field
    *
    * @param value The new value to set the TimeOfIntercept field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setTimeOfIntercept(uci::type::TimeTypeValue value) override;

  /** Returns the contents of the message's TimeToRelease field
    *
    * @return The contents of the TimeToRelease field
    */
  uci::type::TimeTypeValue getTimeToRelease() const override;

  /** Sets the contents of the message's TimeToRelease field
    *
    * @param value The new value to set the TimeToRelease field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setTimeToRelease(uci::type::TimeTypeValue value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TimeTypeValue getTimeOfActivation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setTimeOfActivation(uci::type::TimeTypeValue value) override;

  /** Returns whether this optional field TimeOfActivationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeOfActivation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearTimeOfActivation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TimeTypeValue getTimeOfMPRF() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setTimeOfMPRF(uci::type::TimeTypeValue value) override;

  /** Returns whether this optional field TimeOfMPRFis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeOfMPRF() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearTimeOfMPRF() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TimeTypeValue getTimeOfAutonomous() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& setTimeOfAutonomous(uci::type::TimeTypeValue value) override;

  /** Returns whether this optional field TimeOfAutonomousis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeOfAutonomous() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DLZ_DataType& clearTimeOfAutonomous() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<DLZ_DataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::DLZ_DataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::DLZ_DataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<DistanceTypeValue> rangeTurnAndClose_Accessor;
  DistanceTypeValue rangeMinimum_Accessor{0.0};
  DistanceTypeValue rangeTurnAndRun_Accessor{0.0};
  DistanceTypeValue rangeProbabilityOfIntercept_Accessor{0.0};
  DistanceTypeValue rangeMaxGuidance_Accessor{0.0};
  DistanceTypeValue rangeOptimal_Accessor{0.0};
  DistanceTypeValue rangeMaxAero_Accessor{0.0};
  std::unique_ptr<Velocity2D_Type> targetClosureRate_Accessor;
  DistanceTypeValue targetRange_Accessor{0.0};
  boost::optional<DistanceTypeValue> weaponToTargetSeekerActivationRange_Accessor;
  boost::optional<DistanceTypeValue> weaponToTargetAutonomousRange_Accessor;
  boost::optional<DistanceTypeValue> weaponToTargetMPRFRange_Accessor;
  boost::optional<DistanceTypeValue> a_Pole_Accessor;
  boost::optional<DistanceTypeValue> f_Pole_Accessor;
  boost::optional<DistanceTypeValue> m_Pole_Accessor;
  boost::optional<AnglePositiveTypeValue> allowableSteeringError_Accessor;
  std::unique_ptr<SteeringUnitVectorType> steeringUnitVector_Accessor;
  boost::optional<AngleTypeValue> loftAngle_Accessor;
  boost::optional<AnglePositiveTypeValue> digitalManuveringCueAngle_Accessor;
  TimeTypeValue timeOfIntercept_Accessor{0};
  TimeTypeValue timeToRelease_Accessor{0};
  boost::optional<TimeTypeValue> timeOfActivation_Accessor;
  boost::optional<TimeTypeValue> timeOfMPRF_Accessor;
  boost::optional<TimeTypeValue> timeOfAutonomous_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_DLZ_DATATYPE_H
