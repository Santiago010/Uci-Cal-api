/** @file CoordinatedRequirementSetMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COORDINATEDREQUIREMENTSETMDT_H
#define ASB_UCI_TYPE_COORDINATEDREQUIREMENTSETMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/FrequencyType.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CoordinatedRequirementSetMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CallSignType;
class CoordinatedRequirementSetID_Type;
class LinkedRequirementType;
class SecurityInformationType;
class TimingConstraintsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class CoordinatedRequirementSetMDT : public virtual uci::type::CoordinatedRequirementSetMDT {
public:
  /** Identifies the individual Requirements which belong to the coordinated Requirement set. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  using LinkedRequirement = asb_uci::base::BoundedList<uci::type::LinkedRequirementType, uci::type::accessorType::linkedRequirementType, asb_uci::type::LinkedRequirementType>;

  /** Indicates call signs for the operators of Systems executing Requirements in the coordinated Requirement set. See type
    * annotations for further details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CallSign = asb_uci::base::BoundedList<uci::type::CallSignType, uci::type::accessorType::callSignType, asb_uci::type::CallSignType>;

  /** The constructor */
  CoordinatedRequirementSetMDT();

  /** The copy constructor
    *
    * @param rhs The CoordinatedRequirementSetMDT to copy from
    */
  CoordinatedRequirementSetMDT(const CoordinatedRequirementSetMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CoordinatedRequirementSetMDT to move from
    */
  CoordinatedRequirementSetMDT(CoordinatedRequirementSetMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CoordinatedRequirementSetMDT to copy from
    * @return The CoordinatedRequirementSetMDT that was assigned
    */
  CoordinatedRequirementSetMDT& operator=(const CoordinatedRequirementSetMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CoordinatedRequirementSetMDT to move from
    * @return The CoordinatedRequirementSetMDT that was assigned
    */
  CoordinatedRequirementSetMDT& operator=(CoordinatedRequirementSetMDT&& rhs) = delete;

  /** The destructor */
  virtual ~CoordinatedRequirementSetMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CoordinatedRequirementSetMDT whose contents are to be used to set this
    *      uci::type::CoordinatedRequirementSetMDT's contents.
    */
  void copy(const uci::type::CoordinatedRequirementSetMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CoordinatedRequirementSetMDT whose contents are to be used to set this
    *      uci::type::CoordinatedRequirementSetMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CoordinatedRequirementSetMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the CoordinatedRequirementSetID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CoordinatedRequirementSetID field.
    */
  const uci::type::CoordinatedRequirementSetID_Type& getCoordinatedRequirementSetID() const override;

  /** Returns the accessor to the CoordinatedRequirementSetID field contained in this message fragment
    *
    * @return The reference to the accessor to the CoordinatedRequirementSetID field.
    */
  uci::type::CoordinatedRequirementSetID_Type& getCoordinatedRequirementSetID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setCoordinatedRequirementSetID(const uci::type::CoordinatedRequirementSetID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SecurityInformationType& getAcceptableClassificationLevel_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SecurityInformationType& getAcceptableClassificationLevel() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SecurityInformationType& getAcceptableClassificationLevel() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setAcceptableClassificationLevel(const uci::type::SecurityInformationType& accessor) override;

  /** Returns whether this optional field AcceptableClassificationLevelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAcceptableClassificationLevel() const noexcept override;

  /** Enables the optional field such that getAcceptableClassificationLevel will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SecurityInformationType& enableAcceptableClassificationLevel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& clearAcceptableClassificationLevel() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getSpecialInstructions_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString1024Type& getSpecialInstructions() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getSpecialInstructions() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setSpecialInstructions(const uci::type::VisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setSpecialInstructions(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setSpecialInstructions(const char* value) override;

  /** Returns whether this optional field specialInstructions_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSpecialInstructions() const noexcept override;

  /** Enables the optional field such that getSpecialInstructions will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& enableSpecialInstructions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& clearSpecialInstructions() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TimingConstraintsType& getTimingConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::TimingConstraintsType& getTimingConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TimingConstraintsType& getTimingConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setTimingConstraints(const uci::type::TimingConstraintsType& accessor) override;

  /** Returns whether this optional field TimingConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimingConstraints() const noexcept override;

  /** Enables the optional field such that getTimingConstraints will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TimingConstraintsType& enableTimingConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& clearTimingConstraints() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getCoordinationParameter_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const asb_uci::type::VisibleString256Type& getCoordinationParameter() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getCoordinationParameter() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setCoordinationParameter(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setCoordinationParameter(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setCoordinationParameter(const char* value) override;

  /** Returns whether this optional field coordinationParameter_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCoordinationParameter() const noexcept override;

  /** Enables the optional field such that getCoordinationParameter will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& enableCoordinationParameter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& clearCoordinationParameter() noexcept override;

  /** Returns the accessor to the LinkedRequirement field contained in this message fragment
    *
    * @return The const reference to the accessor to the LinkedRequirement field.
    */
  const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& getLinkedRequirement() const override;

  /** Returns the accessor to the LinkedRequirement field contained in this message fragment
    *
    * @return The reference to the accessor to the LinkedRequirement field.
    */
  uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& getLinkedRequirement() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setLinkedRequirement(const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getVOIP_Number_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const asb_uci::type::VisibleString256Type& getVOIP_Number() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getVOIP_Number() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setVOIP_Number(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setVOIP_Number(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setVOIP_Number(const char* value) override;

  /** Returns whether this optional field vOIP_Number_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVOIP_Number() const noexcept override;

  /** Enables the optional field such that getVOIP_Number will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& enableVOIP_Number(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& clearVOIP_Number() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getChatRoom_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const asb_uci::type::VisibleString256Type& getChatRoom() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getChatRoom() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setChatRoom(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setChatRoom(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setChatRoom(const char* value) override;

  /** Returns whether this optional field chatRoom_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChatRoom() const noexcept override;

  /** Enables the optional field such that getChatRoom will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& enableChatRoom(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& clearChatRoom() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrequency() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setFrequency(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field Frequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequency() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& clearFrequency() noexcept override;

  /** Returns the accessor to the CallSign field contained in this message fragment
    *
    * @return The const reference to the accessor to the CallSign field.
    */
  const uci::type::CoordinatedRequirementSetMDT::CallSign& getCallSign() const override;

  /** Returns the accessor to the CallSign field contained in this message fragment
    *
    * @return The reference to the accessor to the CallSign field.
    */
  uci::type::CoordinatedRequirementSetMDT::CallSign& getCallSign() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CoordinatedRequirementSetMDT& setCallSign(const uci::type::CoordinatedRequirementSetMDT::CallSign& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CoordinatedRequirementSetMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CoordinatedRequirementSetMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CoordinatedRequirementSetMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CoordinatedRequirementSetID_Type> coordinatedRequirementSetID_Accessor;
  std::unique_ptr<SecurityInformationType> acceptableClassificationLevel_Accessor;
  std::unique_ptr<VisibleString1024Type> specialInstructions_Accessor;
  std::unique_ptr<TimingConstraintsType> timingConstraints_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> coordinationParameter_Accessor;
  std::unique_ptr<LinkedRequirement> linkedRequirement_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> vOIP_Number_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> chatRoom_Accessor;
  boost::optional<FrequencyTypeValue> frequency_Accessor;
  std::unique_ptr<CallSign> callSign_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COORDINATEDREQUIREMENTSETMDT_H
