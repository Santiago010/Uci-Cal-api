/** @file EA_ActivityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_EA_ACTIVITYCOMMANDTYPE_H
#define ASB_UCI_TYPE_EA_ACTIVITYCOMMANDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "uci/type/EA_ActivityCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityCommandFrequencyType;
class DependentActivityType;
class EA_ActivityChangeBeamCommandType;
class EA_ChangeLocationAndPowerType;
class ProtectedAssetReturnPowerType;
class SelectAntennaType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EA_ActivityCommandType : public virtual uci::type::EA_ActivityCommandType, public virtual SharedRF_ApertureActivityCommandBaseType {
public:
  /** Indicates a command to modify an existing Beam of an existing EA Activity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using ChangeBeam = asb_uci::base::BoundedList<uci::type::EA_ActivityChangeBeamCommandType, uci::type::accessorType::eA_ActivityChangeBeamCommandType, asb_uci::type::EA_ActivityChangeBeamCommandType>;

  /** The ProtectedAsset child element indicates which of the protected assets of the activity are the subject of the child
    * attribute ChangeProtectedAssetPredictedReturnPower. (In order to add or remove protected entities, a new
    * CapabilityCommandType must be utilized.). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ChangeProtectedEntityPredictedReturnPower = asb_uci::base::BoundedList<uci::type::ProtectedAssetReturnPowerType, uci::type::accessorType::protectedAssetReturnPowerType, asb_uci::type::ProtectedAssetReturnPowerType>;

  /** The constructor */
  EA_ActivityCommandType();

  /** The copy constructor
    *
    * @param rhs The EA_ActivityCommandType to copy from
    */
  EA_ActivityCommandType(const EA_ActivityCommandType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EA_ActivityCommandType to move from
    */
  EA_ActivityCommandType(EA_ActivityCommandType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EA_ActivityCommandType to copy from
    * @return The EA_ActivityCommandType that was assigned
    */
  EA_ActivityCommandType& operator=(const EA_ActivityCommandType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EA_ActivityCommandType to move from
    * @return The EA_ActivityCommandType that was assigned
    */
  EA_ActivityCommandType& operator=(EA_ActivityCommandType&& rhs) = delete;

  /** The destructor */
  ~EA_ActivityCommandType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EA_ActivityCommandType whose contents are to be used to set this
    *      uci::type::EA_ActivityCommandType's contents.
    */
  void copy(const uci::type::EA_ActivityCommandType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EA_ActivityCommandType whose contents are to be used to set this
    *      uci::type::EA_ActivityCommandType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EA_ActivityCommandType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ChangeBeam field contained in this message fragment
    *
    * @return The const reference to the accessor to the ChangeBeam field.
    */
  const uci::type::EA_ActivityCommandType::ChangeBeam& getChangeBeam() const override;

  /** Returns the accessor to the ChangeBeam field contained in this message fragment
    *
    * @return The reference to the accessor to the ChangeBeam field.
    */
  uci::type::EA_ActivityCommandType::ChangeBeam& getChangeBeam() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& setChangeBeam(const uci::type::EA_ActivityCommandType::ChangeBeam& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DependentActivityType& getChangeDependentActivity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DependentActivityType& getChangeDependentActivity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DependentActivityType& getChangeDependentActivity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& setChangeDependentActivity(const uci::type::DependentActivityType& accessor) override;

  /** Returns whether this optional field ChangeDependentActivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChangeDependentActivity() const noexcept override;

  /** Enables the optional field such that getChangeDependentActivity will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DependentActivityType& enableChangeDependentActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& clearChangeDependentActivity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SelectAntennaType& getChangeReceiveAntenna_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SelectAntennaType& getChangeReceiveAntenna() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SelectAntennaType& getChangeReceiveAntenna() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& setChangeReceiveAntenna(const uci::type::SelectAntennaType& accessor) override;

  /** Returns whether this optional field ChangeReceiveAntennais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChangeReceiveAntenna() const noexcept override;

  /** Enables the optional field such that getChangeReceiveAntenna will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SelectAntennaType& enableChangeReceiveAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& clearChangeReceiveAntenna() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SelectAntennaType& getChangeTransmitAntenna_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SelectAntennaType& getChangeTransmitAntenna() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SelectAntennaType& getChangeTransmitAntenna() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& setChangeTransmitAntenna(const uci::type::SelectAntennaType& accessor) override;

  /** Returns whether this optional field ChangeTransmitAntennais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChangeTransmitAntenna() const noexcept override;

  /** Enables the optional field such that getChangeTransmitAntenna will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SelectAntennaType& enableChangeTransmitAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& clearChangeTransmitAntenna() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_ChangeLocationAndPowerType& getChangeTarget_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EA_ChangeLocationAndPowerType& getChangeTarget() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_ChangeLocationAndPowerType& getChangeTarget() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& setChangeTarget(const uci::type::EA_ChangeLocationAndPowerType& accessor) override;

  /** Returns whether this optional field ChangeTargetis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChangeTarget() const noexcept override;

  /** Enables the optional field such that getChangeTarget will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_ChangeLocationAndPowerType& enableChangeTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& clearChangeTarget() noexcept override;

  /** Returns the accessor to the ChangeProtectedEntityPredictedReturnPower field contained in this message fragment
    *
    * @return The const reference to the accessor to the ChangeProtectedEntityPredictedReturnPower field.
    */
  const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& getChangeProtectedEntityPredictedReturnPower() const override;

  /** Returns the accessor to the ChangeProtectedEntityPredictedReturnPower field contained in this message fragment
    *
    * @return The reference to the accessor to the ChangeProtectedEntityPredictedReturnPower field.
    */
  uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& getChangeProtectedEntityPredictedReturnPower() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& setChangeProtectedEntityPredictedReturnPower(const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandFrequencyType& getFrequency() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) override;

  /** Returns whether this optional field Frequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequency() const noexcept override;

  /** Enables the optional field such that getFrequency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_ActivityCommandType& clearFrequency() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EA_ActivityCommandType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EA_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ChangeBeam> changeBeam_Accessor;
  std::unique_ptr<DependentActivityType> changeDependentActivity_Accessor;
  std::unique_ptr<SelectAntennaType> changeReceiveAntenna_Accessor;
  std::unique_ptr<SelectAntennaType> changeTransmitAntenna_Accessor;
  std::unique_ptr<EA_ChangeLocationAndPowerType> changeTarget_Accessor;
  std::unique_ptr<ChangeProtectedEntityPredictedReturnPower> changeProtectedEntityPredictedReturnPower_Accessor;
  std::unique_ptr<CapabilityCommandFrequencyType> frequency_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_EA_ACTIVITYCOMMANDTYPE_H
