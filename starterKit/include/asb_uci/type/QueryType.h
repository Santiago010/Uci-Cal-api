/** @file QueryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_QUERYTYPE_H
#define ASB_UCI_TYPE_QUERYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/QueryPET.h"
#include "uci/base/Accessor.h"
#include "uci/type/QueryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class QueryComparisonType;
class QueryContainsType;
class QueryCountType;
class QueryEqualsType;
class QueryExistsType;
class QueryInstanceOfType;
class QueryMatchType;
class QueryPET;

/** Defines the generic UCI Query Language (UQL) operations. Each operation has a single input, a node that is the
  * current context of the query, and will output either true or false. When determining whether a Message should be sent
  * in a corresponding status, it should be sent if the output of the query is true. The data model of a UCI Message
  * should be considered as a tree structure containing branch and leaf nodes. The default context of a query is the
  * Message, i.e. the top-level global element declaration. Each UQL query is evaluated separately for each Message. For
  * more information on how the tree is evaluated, see the annotations in QueryStepType.
  */
class QueryType : public virtual uci::type::QueryType, public virtual QueryPET {
public:
  /** Evaluates the query to true if all of the sub-queries are evaluated to true. [Occurrences: Minimum: 2; Maximum:
    * MAX_LENGTH]
    */
  using And = asb_uci::base::BoundedList<uci::type::QueryPET, uci::type::accessorType::queryPET, asb_uci::type::QueryPET>;

  /** Evaluates the query to true if any of the sub-queries are evaluated to true. [Occurrences: Minimum: 2; Maximum:
    * MAX_LENGTH]
    */
  using Or = asb_uci::base::BoundedList<uci::type::QueryPET, uci::type::accessorType::queryPET, asb_uci::type::QueryPET>;

  /** The constructor */
  QueryType();

  /** The copy constructor
    *
    * @param rhs The QueryType to copy from
    */
  QueryType(const QueryType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The QueryType to move from
    */
  QueryType(QueryType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The QueryType to copy from
    * @return The QueryType that was assigned
    */
  QueryType& operator=(const QueryType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The QueryType to move from
    * @return The QueryType that was assigned
    */
  QueryType& operator=(QueryType&& rhs) = delete;

  /** The destructor */
  ~QueryType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::QueryType whose contents are to be used to set this uci::type::QueryType's contents.
    */
  void copy(const uci::type::QueryType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::QueryType whose contents are to be used to set this uci::type::QueryType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::QueryType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::QueryType::QueryTypeChoice getQueryTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getQueryTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setQueryTypeChoiceOrdinal(uci::type::QueryType::QueryTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Equals field contained in this message fragment
    *
    * @return The const reference to the accessor to the Equals field.
    */
  uci::type::QueryEqualsType& getEquals_() const;

  /** Returns the accessor to the Equals field contained in this message fragment
    *
    * @return The reference to the accessor to the Equals field.
    */
  const uci::type::QueryEqualsType& getEquals() const override;

  /** Returns the accessor to the Equals field contained in this message fragment
    *
    * @return The reference to the accessor to the Equals field.
    */
  uci::type::QueryEqualsType& getEquals() override;

  /** Sets this choice's choice to be equals and initializes equals to be the specified value. A deep copy will be used by
    * this method to set equals
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setEquals(const uci::type::QueryEqualsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Equals.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Equals, false otherwise.
    */
  bool isEquals() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Equals.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Equals.
    */
  uci::type::QueryEqualsType& chooseEquals(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Equals.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Equals.
    */
  uci::type::QueryEqualsType& chooseEquals(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the LessThan field contained in this message fragment
    *
    * @return The const reference to the accessor to the LessThan field.
    */
  uci::type::QueryComparisonType& getLessThan_() const;

  /** Returns the accessor to the LessThan field contained in this message fragment
    *
    * @return The reference to the accessor to the LessThan field.
    */
  const uci::type::QueryComparisonType& getLessThan() const override;

  /** Returns the accessor to the LessThan field contained in this message fragment
    *
    * @return The reference to the accessor to the LessThan field.
    */
  uci::type::QueryComparisonType& getLessThan() override;

  /** Sets this choice's choice to be lessThan and initializes lessThan to be the specified value. A deep copy will be used
    * by this method to set lessThan
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setLessThan(const uci::type::QueryComparisonType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LessThan.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LessThan, false otherwise.
    */
  bool isLessThan() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by LessThan.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LessThan.
    */
  uci::type::QueryComparisonType& chooseLessThan(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by LessThan.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LessThan.
    */
  uci::type::QueryComparisonType& chooseLessThan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the LessThanOrEqualTo field contained in this message fragment
    *
    * @return The const reference to the accessor to the LessThanOrEqualTo field.
    */
  uci::type::QueryComparisonType& getLessThanOrEqualTo_() const;

  /** Returns the accessor to the LessThanOrEqualTo field contained in this message fragment
    *
    * @return The reference to the accessor to the LessThanOrEqualTo field.
    */
  const uci::type::QueryComparisonType& getLessThanOrEqualTo() const override;

  /** Returns the accessor to the LessThanOrEqualTo field contained in this message fragment
    *
    * @return The reference to the accessor to the LessThanOrEqualTo field.
    */
  uci::type::QueryComparisonType& getLessThanOrEqualTo() override;

  /** Sets this choice's choice to be lessThanOrEqualTo and initializes lessThanOrEqualTo to be the specified value. A deep
    * copy will be used by this method to set lessThanOrEqualTo
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setLessThanOrEqualTo(const uci::type::QueryComparisonType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LessThanOrEqualTo.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LessThanOrEqualTo, false
    *      otherwise.
    */
  bool isLessThanOrEqualTo() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by LessThanOrEqualTo.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LessThanOrEqualTo.
    */
  uci::type::QueryComparisonType& chooseLessThanOrEqualTo(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by LessThanOrEqualTo.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LessThanOrEqualTo.
    */
  uci::type::QueryComparisonType& chooseLessThanOrEqualTo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the GreaterThan field contained in this message fragment
    *
    * @return The const reference to the accessor to the GreaterThan field.
    */
  uci::type::QueryComparisonType& getGreaterThan_() const;

  /** Returns the accessor to the GreaterThan field contained in this message fragment
    *
    * @return The reference to the accessor to the GreaterThan field.
    */
  const uci::type::QueryComparisonType& getGreaterThan() const override;

  /** Returns the accessor to the GreaterThan field contained in this message fragment
    *
    * @return The reference to the accessor to the GreaterThan field.
    */
  uci::type::QueryComparisonType& getGreaterThan() override;

  /** Sets this choice's choice to be greaterThan and initializes greaterThan to be the specified value. A deep copy will
    * be used by this method to set greaterThan
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setGreaterThan(const uci::type::QueryComparisonType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GreaterThan.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GreaterThan, false otherwise.
    */
  bool isGreaterThan() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThan.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GreaterThan.
    */
  uci::type::QueryComparisonType& chooseGreaterThan(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThan.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GreaterThan.
    */
  uci::type::QueryComparisonType& chooseGreaterThan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the GreaterThanOrEqualTo field contained in this message fragment
    *
    * @return The const reference to the accessor to the GreaterThanOrEqualTo field.
    */
  uci::type::QueryComparisonType& getGreaterThanOrEqualTo_() const;

  /** Returns the accessor to the GreaterThanOrEqualTo field contained in this message fragment
    *
    * @return The reference to the accessor to the GreaterThanOrEqualTo field.
    */
  const uci::type::QueryComparisonType& getGreaterThanOrEqualTo() const override;

  /** Returns the accessor to the GreaterThanOrEqualTo field contained in this message fragment
    *
    * @return The reference to the accessor to the GreaterThanOrEqualTo field.
    */
  uci::type::QueryComparisonType& getGreaterThanOrEqualTo() override;

  /** Sets this choice's choice to be greaterThanOrEqualTo and initializes greaterThanOrEqualTo to be the specified value.
    * A deep copy will be used by this method to set greaterThanOrEqualTo
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setGreaterThanOrEqualTo(const uci::type::QueryComparisonType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GreaterThanOrEqualTo.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GreaterThanOrEqualTo, false
    *      otherwise.
    */
  bool isGreaterThanOrEqualTo() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThanOrEqualTo.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GreaterThanOrEqualTo.
    */
  uci::type::QueryComparisonType& chooseGreaterThanOrEqualTo(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThanOrEqualTo.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GreaterThanOrEqualTo.
    */
  uci::type::QueryComparisonType& chooseGreaterThanOrEqualTo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ContainsCaseSensitive field contained in this message fragment
    *
    * @return The const reference to the accessor to the ContainsCaseSensitive field.
    */
  uci::type::QueryContainsType& getContainsCaseSensitive_() const;

  /** Returns the accessor to the ContainsCaseSensitive field contained in this message fragment
    *
    * @return The reference to the accessor to the ContainsCaseSensitive field.
    */
  const uci::type::QueryContainsType& getContainsCaseSensitive() const override;

  /** Returns the accessor to the ContainsCaseSensitive field contained in this message fragment
    *
    * @return The reference to the accessor to the ContainsCaseSensitive field.
    */
  uci::type::QueryContainsType& getContainsCaseSensitive() override;

  /** Sets this choice's choice to be containsCaseSensitive and initializes containsCaseSensitive to be the specified
    * value. A deep copy will be used by this method to set containsCaseSensitive
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setContainsCaseSensitive(const uci::type::QueryContainsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ContainsCaseSensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ContainsCaseSensitive, false
    *      otherwise.
    */
  bool isContainsCaseSensitive() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ContainsCaseSensitive.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ContainsCaseSensitive.
    */
  uci::type::QueryContainsType& chooseContainsCaseSensitive(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ContainsCaseSensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ContainsCaseSensitive.
    */
  uci::type::QueryContainsType& chooseContainsCaseSensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ContainsCaseInsensitive field contained in this message fragment
    *
    * @return The const reference to the accessor to the ContainsCaseInsensitive field.
    */
  uci::type::QueryContainsType& getContainsCaseInsensitive_() const;

  /** Returns the accessor to the ContainsCaseInsensitive field contained in this message fragment
    *
    * @return The reference to the accessor to the ContainsCaseInsensitive field.
    */
  const uci::type::QueryContainsType& getContainsCaseInsensitive() const override;

  /** Returns the accessor to the ContainsCaseInsensitive field contained in this message fragment
    *
    * @return The reference to the accessor to the ContainsCaseInsensitive field.
    */
  uci::type::QueryContainsType& getContainsCaseInsensitive() override;

  /** Sets this choice's choice to be containsCaseInsensitive and initializes containsCaseInsensitive to be the specified
    * value. A deep copy will be used by this method to set containsCaseInsensitive
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setContainsCaseInsensitive(const uci::type::QueryContainsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ContainsCaseInsensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ContainsCaseInsensitive, false
    *      otherwise.
    */
  bool isContainsCaseInsensitive() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ContainsCaseInsensitive.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ContainsCaseInsensitive.
    */
  uci::type::QueryContainsType& chooseContainsCaseInsensitive(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ContainsCaseInsensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ContainsCaseInsensitive.
    */
  uci::type::QueryContainsType& chooseContainsCaseInsensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the InstanceOf field contained in this message fragment
    *
    * @return The const reference to the accessor to the InstanceOf field.
    */
  uci::type::QueryInstanceOfType& getInstanceOf_() const;

  /** Returns the accessor to the InstanceOf field contained in this message fragment
    *
    * @return The reference to the accessor to the InstanceOf field.
    */
  const uci::type::QueryInstanceOfType& getInstanceOf() const override;

  /** Returns the accessor to the InstanceOf field contained in this message fragment
    *
    * @return The reference to the accessor to the InstanceOf field.
    */
  uci::type::QueryInstanceOfType& getInstanceOf() override;

  /** Sets this choice's choice to be instanceOf and initializes instanceOf to be the specified value. A deep copy will be
    * used by this method to set instanceOf
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setInstanceOf(const uci::type::QueryInstanceOfType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by InstanceOf.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by InstanceOf, false otherwise.
    */
  bool isInstanceOf() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by InstanceOf.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by InstanceOf.
    */
  uci::type::QueryInstanceOfType& chooseInstanceOf(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by InstanceOf.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by InstanceOf.
    */
  uci::type::QueryInstanceOfType& chooseInstanceOf(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Count field contained in this message fragment
    *
    * @return The const reference to the accessor to the Count field.
    */
  uci::type::QueryCountType& getCount_() const;

  /** Returns the accessor to the Count field contained in this message fragment
    *
    * @return The reference to the accessor to the Count field.
    */
  const uci::type::QueryCountType& getCount() const override;

  /** Returns the accessor to the Count field contained in this message fragment
    *
    * @return The reference to the accessor to the Count field.
    */
  uci::type::QueryCountType& getCount() override;

  /** Sets this choice's choice to be count and initializes count to be the specified value. A deep copy will be used by
    * this method to set count
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setCount(const uci::type::QueryCountType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Count.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Count, false otherwise.
    */
  bool isCount() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Count.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Count.
    */
  uci::type::QueryCountType& chooseCount(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Count.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Count.
    */
  uci::type::QueryCountType& chooseCount(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Exists field contained in this message fragment
    *
    * @return The const reference to the accessor to the Exists field.
    */
  uci::type::QueryExistsType& getExists_() const;

  /** Returns the accessor to the Exists field contained in this message fragment
    *
    * @return The reference to the accessor to the Exists field.
    */
  const uci::type::QueryExistsType& getExists() const override;

  /** Returns the accessor to the Exists field contained in this message fragment
    *
    * @return The reference to the accessor to the Exists field.
    */
  uci::type::QueryExistsType& getExists() override;

  /** Sets this choice's choice to be exists and initializes exists to be the specified value. A deep copy will be used by
    * this method to set exists
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setExists(const uci::type::QueryExistsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Exists.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Exists, false otherwise.
    */
  bool isExists() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Exists.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Exists.
    */
  uci::type::QueryExistsType& chooseExists(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Exists.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Exists.
    */
  uci::type::QueryExistsType& chooseExists(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AnyMatch field contained in this message fragment
    *
    * @return The const reference to the accessor to the AnyMatch field.
    */
  uci::type::QueryMatchType& getAnyMatch_() const;

  /** Returns the accessor to the AnyMatch field contained in this message fragment
    *
    * @return The reference to the accessor to the AnyMatch field.
    */
  const uci::type::QueryMatchType& getAnyMatch() const override;

  /** Returns the accessor to the AnyMatch field contained in this message fragment
    *
    * @return The reference to the accessor to the AnyMatch field.
    */
  uci::type::QueryMatchType& getAnyMatch() override;

  /** Sets this choice's choice to be anyMatch and initializes anyMatch to be the specified value. A deep copy will be used
    * by this method to set anyMatch
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setAnyMatch(const uci::type::QueryMatchType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AnyMatch.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AnyMatch, false otherwise.
    */
  bool isAnyMatch() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AnyMatch.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AnyMatch.
    */
  uci::type::QueryMatchType& chooseAnyMatch(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AnyMatch.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AnyMatch.
    */
  uci::type::QueryMatchType& chooseAnyMatch(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AllMatch field contained in this message fragment
    *
    * @return The const reference to the accessor to the AllMatch field.
    */
  uci::type::QueryMatchType& getAllMatch_() const;

  /** Returns the accessor to the AllMatch field contained in this message fragment
    *
    * @return The reference to the accessor to the AllMatch field.
    */
  const uci::type::QueryMatchType& getAllMatch() const override;

  /** Returns the accessor to the AllMatch field contained in this message fragment
    *
    * @return The reference to the accessor to the AllMatch field.
    */
  uci::type::QueryMatchType& getAllMatch() override;

  /** Sets this choice's choice to be allMatch and initializes allMatch to be the specified value. A deep copy will be used
    * by this method to set allMatch
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setAllMatch(const uci::type::QueryMatchType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AllMatch.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AllMatch, false otherwise.
    */
  bool isAllMatch() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AllMatch.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AllMatch.
    */
  uci::type::QueryMatchType& chooseAllMatch(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AllMatch.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AllMatch.
    */
  uci::type::QueryMatchType& chooseAllMatch(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the And item contained in this message fragment
    *
    * @return The const reference to the accessor to the And item.
    */
  uci::type::QueryType::And& getAnd_() const;

  /** Returns the accessor to the And item contained in this message fragment
    *
    * @return The const reference to the accessor to the And item.
    */
  const uci::type::QueryType::And& getAnd() const override;

  /** Returns the accessor to the And item contained in this message fragment
    *
    * @return The reference to the accessor to the And item.
    */
  uci::type::QueryType::And& getAnd() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setAnd(const uci::type::QueryType::And& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by And.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by And, false otherwise.
    */
  bool isAnd() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by And.
    *
    * @return A reference to the accessor that provides access to the choice identified by And.
    */
  uci::type::QueryType::And& chooseAnd() override;

  /** Returns the accessor to the Or item contained in this message fragment
    *
    * @return The const reference to the accessor to the Or item.
    */
  uci::type::QueryType::Or& getOr_() const;

  /** Returns the accessor to the Or item contained in this message fragment
    *
    * @return The const reference to the accessor to the Or item.
    */
  const uci::type::QueryType::Or& getOr() const override;

  /** Returns the accessor to the Or item contained in this message fragment
    *
    * @return The reference to the accessor to the Or item.
    */
  uci::type::QueryType::Or& getOr() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setOr(const uci::type::QueryType::Or& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Or.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Or, false otherwise.
    */
  bool isOr() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Or.
    *
    * @return A reference to the accessor that provides access to the choice identified by Or.
    */
  uci::type::QueryType::Or& chooseOr() override;

  /** Returns the accessor to the Not field contained in this message fragment
    *
    * @return The const reference to the accessor to the Not field.
    */
  uci::type::QueryPET& getNot_() const;

  /** Returns the accessor to the Not field contained in this message fragment
    *
    * @return The reference to the accessor to the Not field.
    */
  const uci::type::QueryPET& getNot() const override;

  /** Returns the accessor to the Not field contained in this message fragment
    *
    * @return The reference to the accessor to the Not field.
    */
  uci::type::QueryPET& getNot() override;

  /** Sets this choice's choice to be not_r and initializes not_r to be the specified value. A deep copy will be used by
    * this method to set not_r
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryType& setNot(const uci::type::QueryPET& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Not.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Not, false otherwise.
    */
  bool isNot() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Not.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Not.
    */
  uci::type::QueryPET& chooseNot(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Not.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Not.
    */
  uci::type::QueryPET& chooseNot(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<QueryType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::QueryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<QueryEqualsType> equals_Accessor;
  std::unique_ptr<QueryComparisonType> lessThan_Accessor;
  std::unique_ptr<QueryComparisonType> lessThanOrEqualTo_Accessor;
  std::unique_ptr<QueryComparisonType> greaterThan_Accessor;
  std::unique_ptr<QueryComparisonType> greaterThanOrEqualTo_Accessor;
  std::unique_ptr<QueryContainsType> containsCaseSensitive_Accessor;
  std::unique_ptr<QueryContainsType> containsCaseInsensitive_Accessor;
  std::unique_ptr<QueryInstanceOfType> instanceOf_Accessor;
  std::unique_ptr<QueryCountType> count_Accessor;
  std::unique_ptr<QueryExistsType> exists_Accessor;
  std::unique_ptr<QueryMatchType> anyMatch_Accessor;
  std::unique_ptr<QueryMatchType> allMatch_Accessor;
  std::unique_ptr<And> and_Accessor;
  std::unique_ptr<Or> or_Accessor;
  std::unique_ptr<QueryPET> not_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_QUERYTYPE_H
