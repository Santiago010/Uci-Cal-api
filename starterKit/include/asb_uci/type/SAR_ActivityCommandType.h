/** @file SAR_ActivityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SAR_ACTIVITYCOMMANDTYPE_H
#define ASB_UCI_TYPE_SAR_ACTIVITYCOMMANDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/PairIdentifierEnum.h"
#include "asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/SAR_ActivityCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AtmosphericPropagationLossType;
class CapabilityCommandFrequencyType;
class CapabilityCommandTemporalConstraintsType;
class ECEF_UnitVectorType;
class ProductOutputCommandImageryType;
class RepetitionType;
class SAR_CapabilityCommandSubCapabilityType;
class SAR_CollectionConstraintsType;
class SAR_CollectionOptionsType;
class SAR_DesiredWaveformType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SAR_ActivityCommandType : public virtual uci::type::SAR_ActivityCommandType, public virtual SharedRF_ApertureActivityCommandBaseType {
public:
  /** Atmospheric propagation information to be used when determining CNR or range/power levels. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using AtmosphericPropagation = asb_uci::base::BoundedList<uci::type::AtmosphericPropagationLossType, uci::type::accessorType::atmosphericPropagationLossType, asb_uci::type::AtmosphericPropagationLossType>;

  /** Indicates a required output Product of the Command. Only Products consistent with SAR and supported by the commanded
    * SAR Capability should be requested. If omitted, no output Product should be produced. See ProductTypeEnum for further
    * details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ProductOutput = asb_uci::base::BoundedList<uci::type::ProductOutputCommandImageryType, uci::type::accessorType::productOutputCommandImageryType, asb_uci::type::ProductOutputCommandImageryType>;

  /** The constructor */
  SAR_ActivityCommandType();

  /** The copy constructor
    *
    * @param rhs The SAR_ActivityCommandType to copy from
    */
  SAR_ActivityCommandType(const SAR_ActivityCommandType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SAR_ActivityCommandType to move from
    */
  SAR_ActivityCommandType(SAR_ActivityCommandType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SAR_ActivityCommandType to copy from
    * @return The SAR_ActivityCommandType that was assigned
    */
  SAR_ActivityCommandType& operator=(const SAR_ActivityCommandType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SAR_ActivityCommandType to move from
    * @return The SAR_ActivityCommandType that was assigned
    */
  SAR_ActivityCommandType& operator=(SAR_ActivityCommandType&& rhs) = delete;

  /** The destructor */
  ~SAR_ActivityCommandType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SAR_ActivityCommandType whose contents are to be used to set this
    *      uci::type::SAR_ActivityCommandType's contents.
    */
  void copy(const uci::type::SAR_ActivityCommandType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SAR_ActivityCommandType whose contents are to be used to set this
    *      uci::type::SAR_ActivityCommandType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SAR_ActivityCommandType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getAttempt() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setAttempt(xs::UnsignedInt value) override;

  /** Returns whether this optional field Attemptis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAttempt() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearAttempt() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CapabilityCommandSubCapabilityType& getSubCapability_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SAR_CapabilityCommandSubCapabilityType& getSubCapability() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CapabilityCommandSubCapabilityType& getSubCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setSubCapability(const uci::type::SAR_CapabilityCommandSubCapabilityType& accessor) override;

  /** Returns whether this optional field SubCapabilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubCapability() const noexcept override;

  /** Enables the optional field such that getSubCapability will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CapabilityCommandSubCapabilityType& enableSubCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearSubCapability() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setTemporalConstraints(const uci::type::CapabilityCommandTemporalConstraintsType& accessor) override;

  /** Returns whether this optional field TemporalConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTemporalConstraints() const noexcept override;

  /** Enables the optional field such that getTemporalConstraints will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandTemporalConstraintsType& enableTemporalConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearTemporalConstraints() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getOverrideRejection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setOverrideRejection(xs::Boolean value) override;

  /** Returns whether this optional field OverrideRejectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOverrideRejection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearOverrideRejection() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandFrequencyType& getFrequency() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) override;

  /** Returns whether this optional field Frequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequency() const noexcept override;

  /** Enables the optional field such that getFrequency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearFrequency() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionOptionsType& getCollectionOptions_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SAR_CollectionOptionsType& getCollectionOptions() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionOptionsType& getCollectionOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setCollectionOptions(const uci::type::SAR_CollectionOptionsType& accessor) override;

  /** Returns whether this optional field CollectionOptionsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionOptions() const noexcept override;

  /** Enables the optional field such that getCollectionOptions will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionOptionsType& enableCollectionOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearCollectionOptions() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionConstraintsType& getCollectionConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SAR_CollectionConstraintsType& getCollectionConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionConstraintsType& getCollectionConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setCollectionConstraints(const uci::type::SAR_CollectionConstraintsType& accessor) override;

  /** Returns whether this optional field CollectionConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionConstraints() const noexcept override;

  /** Enables the optional field such that getCollectionConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionConstraintsType& enableCollectionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearCollectionConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_UnitVectorType& getPlaneNormalUnitVector_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_UnitVectorType& getPlaneNormalUnitVector() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_UnitVectorType& getPlaneNormalUnitVector() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setPlaneNormalUnitVector(const uci::type::ECEF_UnitVectorType& accessor) override;

  /** Returns whether this optional field PlaneNormalUnitVectoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlaneNormalUnitVector() const noexcept override;

  /** Enables the optional field such that getPlaneNormalUnitVector will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_UnitVectorType& enablePlaneNormalUnitVector(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearPlaneNormalUnitVector() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getCoefficientOfTroposphericRefraction() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setCoefficientOfTroposphericRefraction(xs::Double value) override;

  /** Returns whether this optional field CoefficientOfTroposphericRefractionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCoefficientOfTroposphericRefraction() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearCoefficientOfTroposphericRefraction() noexcept override;

  /** Returns the accessor to the AtmosphericPropagation field contained in this message fragment
    *
    * @return The const reference to the accessor to the AtmosphericPropagation field.
    */
  const uci::type::SAR_ActivityCommandType::AtmosphericPropagation& getAtmosphericPropagation() const override;

  /** Returns the accessor to the AtmosphericPropagation field contained in this message fragment
    *
    * @return The reference to the accessor to the AtmosphericPropagation field.
    */
  uci::type::SAR_ActivityCommandType::AtmosphericPropagation& getAtmosphericPropagation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setAtmosphericPropagation(const uci::type::SAR_ActivityCommandType::AtmosphericPropagation& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_DesiredWaveformType& getDesiredWaveform_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SAR_DesiredWaveformType& getDesiredWaveform() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_DesiredWaveformType& getDesiredWaveform() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setDesiredWaveform(const uci::type::SAR_DesiredWaveformType& accessor) override;

  /** Returns whether this optional field DesiredWaveformis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDesiredWaveform() const noexcept override;

  /** Enables the optional field such that getDesiredWaveform will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_DesiredWaveformType& enableDesiredWaveform(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearDesiredWaveform() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PairIdentifierEnum& getPairIdentifier_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PairIdentifierEnum& getPairIdentifier() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PairIdentifierEnum& getPairIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setPairIdentifier(const uci::type::PairIdentifierEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setPairIdentifier(uci::type::PairIdentifierEnum::EnumerationItem value) override;

  /** Returns whether this optional field PairIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPairIdentifier() const noexcept override;

  /** Enables the optional field such that getPairIdentifier will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PairIdentifierEnum& enablePairIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearPairIdentifier() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& getRepetition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RepetitionType& getRepetition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& getRepetition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setRepetition(const uci::type::RepetitionType& accessor) override;

  /** Returns whether this optional field Repetitionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRepetition() const noexcept override;

  /** Enables the optional field such that getRepetition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& clearRepetition() noexcept override;

  /** Returns the accessor to the ProductOutput field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductOutput field.
    */
  const uci::type::SAR_ActivityCommandType::ProductOutput& getProductOutput() const override;

  /** Returns the accessor to the ProductOutput field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductOutput field.
    */
  uci::type::SAR_ActivityCommandType::ProductOutput& getProductOutput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityCommandType& setProductOutput(const uci::type::SAR_ActivityCommandType::ProductOutput& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SAR_ActivityCommandType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SAR_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::UnsignedInt> attempt_Accessor;
  std::unique_ptr<SAR_CapabilityCommandSubCapabilityType> subCapability_Accessor;
  std::unique_ptr<CapabilityCommandTemporalConstraintsType> temporalConstraints_Accessor;
  boost::optional<asb_xs::Boolean> overrideRejection_Accessor;
  std::unique_ptr<CapabilityCommandFrequencyType> frequency_Accessor;
  std::unique_ptr<SAR_CollectionOptionsType> collectionOptions_Accessor;
  std::unique_ptr<SAR_CollectionConstraintsType> collectionConstraints_Accessor;
  std::unique_ptr<ECEF_UnitVectorType> planeNormalUnitVector_Accessor;
  boost::optional<asb_xs::Double> coefficientOfTroposphericRefraction_Accessor;
  std::unique_ptr<AtmosphericPropagation> atmosphericPropagation_Accessor;
  std::unique_ptr<SAR_DesiredWaveformType> desiredWaveform_Accessor;
  std::unique_ptr<PairIdentifierEnum> pairIdentifier_Accessor;
  std::unique_ptr<RepetitionType> repetition_Accessor;
  std::unique_ptr<ProductOutput> productOutput_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SAR_ACTIVITYCOMMANDTYPE_H
