/** @file ProductFilterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PRODUCTFILTERTYPE_H
#define ASB_UCI_TYPE_PRODUCTFILTERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/ProductTypeEnum.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductFilterType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class DateTimeRangeType;
class FileFormatType;
class LocationFilterType;
class SecurityInformationType;
class SourceFilterType;
class SourceLocationFilterType;

/** This element defines a filter which can be applied to any product regardless of type. */
class ProductFilterType : public virtual uci::type::ProductFilterType {
public:
  /** The constructor */
  ProductFilterType();

  /** The copy constructor
    *
    * @param rhs The ProductFilterType to copy from
    */
  ProductFilterType(const ProductFilterType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ProductFilterType to move from
    */
  ProductFilterType(ProductFilterType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The ProductFilterType to copy from
    * @return The ProductFilterType that was assigned
    */
  ProductFilterType& operator=(const ProductFilterType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ProductFilterType to move from
    * @return The ProductFilterType that was assigned
    */
  ProductFilterType& operator=(ProductFilterType&& rhs) = delete;

  /** The destructor */
  virtual ~ProductFilterType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ProductFilterType whose contents are to be used to set this
    *      uci::type::ProductFilterType's contents.
    */
  void copy(const uci::type::ProductFilterType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ProductFilterType whose contents are to be used to set this
    *      uci::type::ProductFilterType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ProductFilterType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::ProductFilterType::ProductFilterTypeChoice getProductFilterTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getProductFilterTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setProductFilterTypeChoiceOrdinal(uci::type::ProductFilterType::ProductFilterTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The const reference to the accessor to the Source field.
    */
  uci::type::SourceFilterType& getSource_() const;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The reference to the accessor to the Source field.
    */
  const uci::type::SourceFilterType& getSource() const override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The reference to the accessor to the Source field.
    */
  uci::type::SourceFilterType& getSource() override;

  /** Sets this choice's choice to be source and initializes source to be the specified value. A deep copy will be used by
    * this method to set source
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setSource(const uci::type::SourceFilterType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Source.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Source, false otherwise.
    */
  bool isSource() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Source.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Source.
    */
  uci::type::SourceFilterType& chooseSource(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Source.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Source.
    */
  uci::type::SourceFilterType& chooseSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Geospatial field contained in this message fragment
    *
    * @return The const reference to the accessor to the Geospatial field.
    */
  uci::type::LocationFilterType& getGeospatial_() const;

  /** Returns the accessor to the Geospatial field contained in this message fragment
    *
    * @return The const reference to the accessor to the Geospatial field.
    */
  const uci::type::LocationFilterType& getGeospatial() const override;

  /** Returns the accessor to the Geospatial field contained in this message fragment
    *
    * @return The reference to the accessor to the Geospatial field.
    */
  uci::type::LocationFilterType& getGeospatial() override;

  /** Sets this choice's choice to be Geospatial and initializes Geospatial to be the specified value. A deep copy will be
    * used by this method to set Geospatial
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setGeospatial(const uci::type::LocationFilterType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Geospatial.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Geospatial, false otherwise.
    */
  bool isGeospatial() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Geospatial.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Geospatial.
    */
  uci::type::LocationFilterType& chooseGeospatial(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Geospatial.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Geospatial.
    */
  uci::type::LocationFilterType& chooseGeospatial(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SourceGeospatial field contained in this message fragment
    *
    * @return The const reference to the accessor to the SourceGeospatial field.
    */
  uci::type::SourceLocationFilterType& getSourceGeospatial_() const;

  /** Returns the accessor to the SourceGeospatial field contained in this message fragment
    *
    * @return The reference to the accessor to the SourceGeospatial field.
    */
  const uci::type::SourceLocationFilterType& getSourceGeospatial() const override;

  /** Returns the accessor to the SourceGeospatial field contained in this message fragment
    *
    * @return The reference to the accessor to the SourceGeospatial field.
    */
  uci::type::SourceLocationFilterType& getSourceGeospatial() override;

  /** Sets this choice's choice to be sourceGeospatial and initializes sourceGeospatial to be the specified value. A deep
    * copy will be used by this method to set sourceGeospatial
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setSourceGeospatial(const uci::type::SourceLocationFilterType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SourceGeospatial.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SourceGeospatial, false
    *      otherwise.
    */
  bool isSourceGeospatial() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SourceGeospatial.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SourceGeospatial.
    */
  uci::type::SourceLocationFilterType& chooseSourceGeospatial(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SourceGeospatial.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SourceGeospatial.
    */
  uci::type::SourceLocationFilterType& chooseSourceGeospatial(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the FileFormat field contained in this message fragment
    *
    * @return The const reference to the accessor to the FileFormat field.
    */
  uci::type::FileFormatType& getFileFormat_() const;

  /** Returns the accessor to the FileFormat field contained in this message fragment
    *
    * @return The const reference to the accessor to the FileFormat field.
    */
  const uci::type::FileFormatType& getFileFormat() const override;

  /** Returns the accessor to the FileFormat field contained in this message fragment
    *
    * @return The reference to the accessor to the FileFormat field.
    */
  uci::type::FileFormatType& getFileFormat() override;

  /** Sets this choice's choice to be FileFormat and initializes FileFormat to be the specified value. A deep copy will be
    * used by this method to set FileFormat
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setFileFormat(const uci::type::FileFormatType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FileFormat.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FileFormat, false otherwise.
    */
  bool isFileFormat() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FileFormat.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FileFormat.
    */
  uci::type::FileFormatType& chooseFileFormat(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FileFormat.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FileFormat.
    */
  uci::type::FileFormatType& chooseFileFormat(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecurityInformation field.
    */
  uci::type::SecurityInformationType& getSecurityInformation_() const;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityInformation field.
    */
  const uci::type::SecurityInformationType& getSecurityInformation() const override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityInformation field.
    */
  uci::type::SecurityInformationType& getSecurityInformation() override;

  /** Sets this choice's choice to be securityInformation and initializes securityInformation to be the specified value. A
    * deep copy will be used by this method to set securityInformation
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setSecurityInformation(const uci::type::SecurityInformationType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SecurityInformation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SecurityInformation, false
    *      otherwise.
    */
  bool isSecurityInformation() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SecurityInformation.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SecurityInformation.
    */
  uci::type::SecurityInformationType& chooseSecurityInformation(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SecurityInformation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SecurityInformation.
    */
  uci::type::SecurityInformationType& chooseSecurityInformation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the DateTimeRange field contained in this message fragment
    *
    * @return The const reference to the accessor to the DateTimeRange field.
    */
  uci::type::DateTimeRangeType& getDateTimeRange_() const;

  /** Returns the accessor to the DateTimeRange field contained in this message fragment
    *
    * @return The reference to the accessor to the DateTimeRange field.
    */
  const uci::type::DateTimeRangeType& getDateTimeRange() const override;

  /** Returns the accessor to the DateTimeRange field contained in this message fragment
    *
    * @return The reference to the accessor to the DateTimeRange field.
    */
  uci::type::DateTimeRangeType& getDateTimeRange() override;

  /** Sets this choice's choice to be dateTimeRange and initializes dateTimeRange to be the specified value. A deep copy
    * will be used by this method to set dateTimeRange
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setDateTimeRange(const uci::type::DateTimeRangeType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DateTimeRange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DateTimeRange, false otherwise.
    */
  bool isDateTimeRange() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by DateTimeRange.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DateTimeRange.
    */
  uci::type::DateTimeRangeType& chooseDateTimeRange(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by DateTimeRange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DateTimeRange.
    */
  uci::type::DateTimeRangeType& chooseDateTimeRange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getX_Path_() const;

  /** Returns the contents of the message's X_Path item
    *
    * @return The contents of the X_Path field
    */
  const uci::type::VisibleString1024Type& getX_Path() const override;

  /** Returns the contents of the message's X_Path item
    *
    * @return The contents of the X_Path field
    */
  uci::type::VisibleString1024Type& getX_Path() override;

  /** Sets this choice's choice to be X_Path and initializes X_Path to be the specified value
    *
    * @param value The new value to set X_Path to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setX_Path(const uci::type::VisibleString1024Type& value) override;

  /** Sets this choice's choice to be X_Path and initializes X_Path to be the specified value
    *
    * @param value The new value to set X_Path to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setX_Path(const std::string& value) override;

  /** Sets this choice's choice to be X_Path and initializes X_Path to be the specified value
    *
    * @param value The new value to set X_Path to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setX_Path(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by X_Path.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by X_Path, false otherwise.
    */
  bool isX_Path() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by X_Path.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by X_Path.
    */
  uci::type::VisibleString1024Type& chooseX_Path(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by X_Path.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by X_Path.
    */
  uci::type::VisibleString1024Type& chooseX_Path(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's ProductType item
    *
    * @return The contents of the ProductType item
    */
  uci::type::ProductTypeEnum& getProductType_() const;

  /** Returns the contents of the message's ProductType item
    *
    * @return The contents of the ProductType item
    */
  const uci::type::ProductTypeEnum& getProductType() const override;

  /** Returns the contents of the message's ProductType item
    *
    * @return The contents of the ProductType item
    */
  uci::type::ProductTypeEnum& getProductType() override;

  /** Sets this choice's choice to be ProductType and initializes ProductType to be the specified value
    *
    * @param accessor The new value to set the ProductType item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setProductType(const uci::type::ProductTypeEnum& accessor) override;

  /** Sets this choice's choice to be ProductType and initializes ProductType to be the specified value
    *
    * @param value The new value to set the ProductType item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductFilterType& setProductType(uci::type::ProductTypeEnum::EnumerationItem value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProductType.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProductType, false otherwise.
    */
  bool isProductType() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ProductType.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProductType.
    */
  uci::type::ProductTypeEnum& chooseProductType(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ProductType.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProductType.
    */
  uci::type::ProductTypeEnum& chooseProductType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ProductFilterType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductFilterType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ProductFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SourceFilterType> source_Accessor;
  std::unique_ptr<LocationFilterType> geospatial_Accessor;
  std::unique_ptr<SourceLocationFilterType> sourceGeospatial_Accessor;
  std::unique_ptr<FileFormatType> fileFormat_Accessor;
  std::unique_ptr<SecurityInformationType> securityInformation_Accessor;
  std::unique_ptr<DateTimeRangeType> dateTimeRange_Accessor;
  std::unique_ptr<VisibleString1024Type> x_Path_Accessor;
  std::unique_ptr<ProductTypeEnum> productType_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PRODUCTFILTERTYPE_H
