/** @file CommMADL_TopologyEntryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMMADL_TOPOLOGYENTRYTYPE_H
#define ASB_UCI_TYPE_COMMMADL_TOPOLOGYENTRYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommMADL_DataRateTypeEnum.h"
#include "asb_uci/type/CommMADL_FlightGroupType.h"
#include "asb_uci/type/CommMADL_NodeDataValidityEnum.h"
#include "asb_uci/type/CommMADL_TimeSourceEnum.h"
#include "asb_uci/type/MADL_NodeRangeType.h"
#include "asb_uci/type/ShortPositiveType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/CommMADL_TopologyEntryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommMADL_SecurityKeyType;
class Point4D_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class CommMADL_TopologyEntryType : public virtual uci::type::CommMADL_TopologyEntryType {
public:
  /** Identifies the security categories and bandwidths associated with the member. [Occurrences: Minimum: 0; Maximum: 4] */
  using SecurityKey = asb_uci::base::BoundedList<uci::type::CommMADL_SecurityKeyType, uci::type::accessorType::commMADL_SecurityKeyType, asb_uci::type::CommMADL_SecurityKeyType>;

  /** The constructor */
  CommMADL_TopologyEntryType();

  /** The copy constructor
    *
    * @param rhs The CommMADL_TopologyEntryType to copy from
    */
  CommMADL_TopologyEntryType(const CommMADL_TopologyEntryType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommMADL_TopologyEntryType to move from
    */
  CommMADL_TopologyEntryType(CommMADL_TopologyEntryType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommMADL_TopologyEntryType to copy from
    * @return The CommMADL_TopologyEntryType that was assigned
    */
  CommMADL_TopologyEntryType& operator=(const CommMADL_TopologyEntryType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommMADL_TopologyEntryType to move from
    * @return The CommMADL_TopologyEntryType that was assigned
    */
  CommMADL_TopologyEntryType& operator=(CommMADL_TopologyEntryType&& rhs) = delete;

  /** The destructor */
  virtual ~CommMADL_TopologyEntryType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommMADL_TopologyEntryType whose contents are to be used to set this
    *      uci::type::CommMADL_TopologyEntryType's contents.
    */
  void copy(const uci::type::CommMADL_TopologyEntryType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommMADL_TopologyEntryType whose contents are to be used to set this
    *      uci::type::CommMADL_TopologyEntryType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommMADL_TopologyEntryType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's MemberNodeIdentifier field
    *
    * @return The contents of the MemberNodeIdentifier field
    */
  uci::type::MADL_NodeRangeTypeValue getMemberNodeIdentifier() const override;

  /** Sets the contents of the message's MemberNodeIdentifier field
    *
    * @param value The new value to set the MemberNodeIdentifier field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberNodeIdentifier(uci::type::MADL_NodeRangeTypeValue value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::ShortPositiveTypeValue getMemberMADL_UniqueIdentifier() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberMADL_UniqueIdentifier(uci::type::ShortPositiveTypeValue value) override;

  /** Returns whether this optional field MemberMADL_UniqueIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMemberMADL_UniqueIdentifier() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearMemberMADL_UniqueIdentifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::CommMADL_FlightGroupType& getMemberFlightGroupIdentifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::CommMADL_FlightGroupType& getMemberFlightGroupIdentifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::CommMADL_FlightGroupType& getMemberFlightGroupIdentifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberFlightGroupIdentifier(const uci::type::CommMADL_FlightGroupType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberFlightGroupIdentifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberFlightGroupIdentifier(const char* value) override;

  /** Returns whether this optional field memberFlightGroupIdentifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMemberFlightGroupIdentifier() const noexcept override;

  /** Enables the optional field such that getMemberFlightGroupIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::CommMADL_FlightGroupType& enableMemberFlightGroupIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearMemberFlightGroupIdentifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getDataCapable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setDataCapable(xs::Boolean value) override;

  /** Returns whether this optional field DataCapableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDataCapable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearDataCapable() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getVoiceCapable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setVoiceCapable(xs::Boolean value) override;

  /** Returns whether this optional field VoiceCapableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVoiceCapable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearVoiceCapable() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point4D_Type& getMemberPosition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point4D_Type& getMemberPosition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point4D_Type& getMemberPosition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberPosition(const uci::type::Point4D_Type& accessor) override;

  /** Returns whether this optional field MemberPositionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMemberPosition() const noexcept override;

  /** Enables the optional field such that getMemberPosition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point4D_Type& enableMemberPosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearMemberPosition() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommMADL_TimeSourceEnum& getMemberTimeSource_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommMADL_TimeSourceEnum& getMemberTimeSource() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommMADL_TimeSourceEnum& getMemberTimeSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberTimeSource(const uci::type::CommMADL_TimeSourceEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setMemberTimeSource(uci::type::CommMADL_TimeSourceEnum::EnumerationItem value) override;

  /** Returns whether this optional field MemberTimeSourceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMemberTimeSource() const noexcept override;

  /** Enables the optional field such that getMemberTimeSource will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommMADL_TimeSourceEnum& enableMemberTimeSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearMemberTimeSource() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getNetTimeFineSyncAchieved() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setNetTimeFineSyncAchieved(xs::Boolean value) override;

  /** Returns whether this optional field NetTimeFineSyncAchievedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetTimeFineSyncAchieved() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearNetTimeFineSyncAchieved() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MADL_NodeRangeTypeValue getPathLatencyRelay() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setPathLatencyRelay(uci::type::MADL_NodeRangeTypeValue value) override;

  /** Returns whether this optional field PathLatencyRelayis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPathLatencyRelay() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearPathLatencyRelay() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommMADL_DataRateTypeEnum& getActualTxDataRate_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommMADL_DataRateTypeEnum& getActualTxDataRate() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommMADL_DataRateTypeEnum& getActualTxDataRate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setActualTxDataRate(const uci::type::CommMADL_DataRateTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setActualTxDataRate(uci::type::CommMADL_DataRateTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field ActualTxDataRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActualTxDataRate() const noexcept override;

  /** Enables the optional field such that getActualTxDataRate will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommMADL_DataRateTypeEnum& enableActualTxDataRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearActualTxDataRate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getHigherDataRateCapable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setHigherDataRateCapable(xs::Boolean value) override;

  /** Returns whether this optional field HigherDataRateCapableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasHigherDataRateCapable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& clearHigherDataRateCapable() noexcept override;

  /** Returns the accessor to the SecurityKey field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecurityKey field.
    */
  const uci::type::CommMADL_TopologyEntryType::SecurityKey& getSecurityKey() const override;

  /** Returns the accessor to the SecurityKey field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityKey field.
    */
  uci::type::CommMADL_TopologyEntryType::SecurityKey& getSecurityKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setSecurityKey(const uci::type::CommMADL_TopologyEntryType::SecurityKey& accessor) override;

  /** Returns the contents of the message's NodeDataValidity field
    *
    * @return The contents of the NodeDataValidity field
    */
  const uci::type::CommMADL_NodeDataValidityEnum& getNodeDataValidity() const override;

  /** Returns the contents of the message's NodeDataValidity field
    *
    * @return The contents of the NodeDataValidity field
    */
  uci::type::CommMADL_NodeDataValidityEnum& getNodeDataValidity() override;

  /** Sets the contents of the message's NodeDataValidity field
    *
    * @param accessor The accessor to use to set the NodeDataValidity field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setNodeDataValidity(const uci::type::CommMADL_NodeDataValidityEnum& accessor) override;

  /** Sets the contents of the message's NodeDataValidity field
    *
    * @param value The new value to set the NodeDataValidity field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommMADL_TopologyEntryType& setNodeDataValidity(uci::type::CommMADL_NodeDataValidityEnum::EnumerationItem value) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommMADL_TopologyEntryType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_TopologyEntryType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommMADL_TopologyEntryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  MADL_NodeRangeTypeValue memberNodeIdentifier_Accessor{0};
  boost::optional<ShortPositiveTypeValue> memberMADL_UniqueIdentifier_Accessor;
  std::unique_ptr<CommMADL_FlightGroupType> memberFlightGroupIdentifier_Accessor;
  boost::optional<asb_xs::Boolean> dataCapable_Accessor;
  boost::optional<asb_xs::Boolean> voiceCapable_Accessor;
  std::unique_ptr<Point4D_Type> memberPosition_Accessor;
  std::unique_ptr<CommMADL_TimeSourceEnum> memberTimeSource_Accessor;
  boost::optional<asb_xs::Boolean> netTimeFineSyncAchieved_Accessor;
  boost::optional<MADL_NodeRangeTypeValue> pathLatencyRelay_Accessor;
  std::unique_ptr<CommMADL_DataRateTypeEnum> actualTxDataRate_Accessor;
  boost::optional<asb_xs::Boolean> higherDataRateCapable_Accessor;
  std::unique_ptr<SecurityKey> securityKey_Accessor;
  std::unique_ptr<CommMADL_NodeDataValidityEnum> nodeDataValidity_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMMADL_TOPOLOGYENTRYTYPE_H
