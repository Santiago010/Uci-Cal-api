/** @file EntityManagementRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ENTITYMANAGEMENTREQUESTTYPE_H
#define ASB_UCI_TYPE_ENTITYMANAGEMENTREQUESTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityManagementRequestType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EntityManagementClearIdentityType;
class EntityManagementDownType;
class EntityManagementDropRestrictType;
class EntityManagementDropType;
class EntityManagementKinematicsType;
class EntityManagementMergeType;
class EntityManagementProposeCorrelationType;
class EntityManagementSetActivityByType;
class EntityManagementSetCapabilityType;
class EntityManagementSetEnduranceType;
class EntityManagementSetFusionEligibilityType;
class EntityManagementSetIdentityType;
class EntityManagementSetLink16MetadataType;
class EntityManagementSetModeType;
class EntityManagementSetPlatformStatusType;
class EntityManagementSetSignalSummaryType;
class EntityManagementSetStrengthType;
class EntityManagementSetVoiceControlType;
class EntityManagementSplitType;
class EntityManagementSwapType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityManagementRequestType : public virtual uci::type::EntityManagementRequestType {
public:
  /** The constructor */
  EntityManagementRequestType();

  /** The copy constructor
    *
    * @param rhs The EntityManagementRequestType to copy from
    */
  EntityManagementRequestType(const EntityManagementRequestType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EntityManagementRequestType to move from
    */
  EntityManagementRequestType(EntityManagementRequestType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The EntityManagementRequestType to copy from
    * @return The EntityManagementRequestType that was assigned
    */
  EntityManagementRequestType& operator=(const EntityManagementRequestType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EntityManagementRequestType to move from
    * @return The EntityManagementRequestType that was assigned
    */
  EntityManagementRequestType& operator=(EntityManagementRequestType&& rhs) = delete;

  /** The destructor */
  virtual ~EntityManagementRequestType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityManagementRequestType whose contents are to be used to set this
    *      uci::type::EntityManagementRequestType's contents.
    */
  void copy(const uci::type::EntityManagementRequestType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityManagementRequestType whose contents are to be used to set this
    *      uci::type::EntityManagementRequestType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EntityManagementRequestType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::EntityManagementRequestType::EntityManagementRequestTypeChoice getEntityManagementRequestTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getEntityManagementRequestTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In
    * addition, the access methods associated with the chosen element will be enabled and will provide access to the chosen
    * element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setEntityManagementRequestTypeChoiceOrdinal(uci::type::EntityManagementRequestType::EntityManagementRequestTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Split field contained in this message fragment
    *
    * @return The const reference to the accessor to the Split field.
    */
  uci::type::EntityManagementSplitType& getSplit_() const;

  /** Returns the accessor to the Split field contained in this message fragment
    *
    * @return The reference to the accessor to the Split field.
    */
  const uci::type::EntityManagementSplitType& getSplit() const override;

  /** Returns the accessor to the Split field contained in this message fragment
    *
    * @return The reference to the accessor to the Split field.
    */
  uci::type::EntityManagementSplitType& getSplit() override;

  /** Sets this choice's choice to be split and initializes split to be the specified value. A deep copy will be used by
    * this method to set split
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSplit(const uci::type::EntityManagementSplitType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Split.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Split, false otherwise.
    */
  bool isSplit() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Split.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Split.
    */
  uci::type::EntityManagementSplitType& chooseSplit(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Split.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Split.
    */
  uci::type::EntityManagementSplitType& chooseSplit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Merge field contained in this message fragment
    *
    * @return The const reference to the accessor to the Merge field.
    */
  uci::type::EntityManagementMergeType& getMerge_() const;

  /** Returns the accessor to the Merge field contained in this message fragment
    *
    * @return The reference to the accessor to the Merge field.
    */
  const uci::type::EntityManagementMergeType& getMerge() const override;

  /** Returns the accessor to the Merge field contained in this message fragment
    *
    * @return The reference to the accessor to the Merge field.
    */
  uci::type::EntityManagementMergeType& getMerge() override;

  /** Sets this choice's choice to be merge and initializes merge to be the specified value. A deep copy will be used by
    * this method to set merge
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setMerge(const uci::type::EntityManagementMergeType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Merge.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Merge, false otherwise.
    */
  bool isMerge() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Merge.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Merge.
    */
  uci::type::EntityManagementMergeType& chooseMerge(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Merge.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Merge.
    */
  uci::type::EntityManagementMergeType& chooseMerge(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Drop field contained in this message fragment
    *
    * @return The const reference to the accessor to the Drop field.
    */
  uci::type::EntityManagementDropType& getDrop_() const;

  /** Returns the accessor to the Drop field contained in this message fragment
    *
    * @return The const reference to the accessor to the Drop field.
    */
  const uci::type::EntityManagementDropType& getDrop() const override;

  /** Returns the accessor to the Drop field contained in this message fragment
    *
    * @return The reference to the accessor to the Drop field.
    */
  uci::type::EntityManagementDropType& getDrop() override;

  /** Sets this choice's choice to be Drop and initializes Drop to be the specified value. A deep copy will be used by this
    * method to set Drop
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setDrop(const uci::type::EntityManagementDropType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Drop.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Drop, false otherwise.
    */
  bool isDrop() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Drop.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Drop.
    */
  uci::type::EntityManagementDropType& chooseDrop(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Drop.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Drop.
    */
  uci::type::EntityManagementDropType& chooseDrop(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetDropRestriction field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetDropRestriction field.
    */
  uci::type::EntityManagementDropRestrictType& getSetDropRestriction_() const;

  /** Returns the accessor to the SetDropRestriction field contained in this message fragment
    *
    * @return The reference to the accessor to the SetDropRestriction field.
    */
  const uci::type::EntityManagementDropRestrictType& getSetDropRestriction() const override;

  /** Returns the accessor to the SetDropRestriction field contained in this message fragment
    *
    * @return The reference to the accessor to the SetDropRestriction field.
    */
  uci::type::EntityManagementDropRestrictType& getSetDropRestriction() override;

  /** Sets this choice's choice to be setDropRestriction and initializes setDropRestriction to be the specified value. A
    * deep copy will be used by this method to set setDropRestriction
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetDropRestriction(const uci::type::EntityManagementDropRestrictType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetDropRestriction.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetDropRestriction, false
    *      otherwise.
    */
  bool isSetDropRestriction() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetDropRestriction.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetDropRestriction.
    */
  uci::type::EntityManagementDropRestrictType& chooseSetDropRestriction(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetDropRestriction.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetDropRestriction.
    */
  uci::type::EntityManagementDropRestrictType& chooseSetDropRestriction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ClearDropRestriction field contained in this message fragment
    *
    * @return The const reference to the accessor to the ClearDropRestriction field.
    */
  uci::type::EntityManagementDropRestrictType& getClearDropRestriction_() const;

  /** Returns the accessor to the ClearDropRestriction field contained in this message fragment
    *
    * @return The reference to the accessor to the ClearDropRestriction field.
    */
  const uci::type::EntityManagementDropRestrictType& getClearDropRestriction() const override;

  /** Returns the accessor to the ClearDropRestriction field contained in this message fragment
    *
    * @return The reference to the accessor to the ClearDropRestriction field.
    */
  uci::type::EntityManagementDropRestrictType& getClearDropRestriction() override;

  /** Sets this choice's choice to be clearDropRestriction and initializes clearDropRestriction to be the specified value.
    * A deep copy will be used by this method to set clearDropRestriction
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setClearDropRestriction(const uci::type::EntityManagementDropRestrictType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ClearDropRestriction.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ClearDropRestriction, false
    *      otherwise.
    */
  bool isClearDropRestriction() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ClearDropRestriction.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ClearDropRestriction.
    */
  uci::type::EntityManagementDropRestrictType& chooseClearDropRestriction(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ClearDropRestriction.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ClearDropRestriction.
    */
  uci::type::EntityManagementDropRestrictType& chooseClearDropRestriction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Swap field contained in this message fragment
    *
    * @return The const reference to the accessor to the Swap field.
    */
  uci::type::EntityManagementSwapType& getSwap_() const;

  /** Returns the accessor to the Swap field contained in this message fragment
    *
    * @return The reference to the accessor to the Swap field.
    */
  const uci::type::EntityManagementSwapType& getSwap() const override;

  /** Returns the accessor to the Swap field contained in this message fragment
    *
    * @return The reference to the accessor to the Swap field.
    */
  uci::type::EntityManagementSwapType& getSwap() override;

  /** Sets this choice's choice to be swap and initializes swap to be the specified value. A deep copy will be used by this
    * method to set swap
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSwap(const uci::type::EntityManagementSwapType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Swap.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Swap, false otherwise.
    */
  bool isSwap() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Swap.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Swap.
    */
  uci::type::EntityManagementSwapType& chooseSwap(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Swap.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Swap.
    */
  uci::type::EntityManagementSwapType& chooseSwap(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetFusionEligibility field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetFusionEligibility field.
    */
  uci::type::EntityManagementSetFusionEligibilityType& getSetFusionEligibility_() const;

  /** Returns the accessor to the SetFusionEligibility field contained in this message fragment
    *
    * @return The reference to the accessor to the SetFusionEligibility field.
    */
  const uci::type::EntityManagementSetFusionEligibilityType& getSetFusionEligibility() const override;

  /** Returns the accessor to the SetFusionEligibility field contained in this message fragment
    *
    * @return The reference to the accessor to the SetFusionEligibility field.
    */
  uci::type::EntityManagementSetFusionEligibilityType& getSetFusionEligibility() override;

  /** Sets this choice's choice to be setFusionEligibility and initializes setFusionEligibility to be the specified value.
    * A deep copy will be used by this method to set setFusionEligibility
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetFusionEligibility(const uci::type::EntityManagementSetFusionEligibilityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetFusionEligibility.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetFusionEligibility, false
    *      otherwise.
    */
  bool isSetFusionEligibility() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetFusionEligibility.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetFusionEligibility.
    */
  uci::type::EntityManagementSetFusionEligibilityType& chooseSetFusionEligibility(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetFusionEligibility.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetFusionEligibility.
    */
  uci::type::EntityManagementSetFusionEligibilityType& chooseSetFusionEligibility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetIdentity field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetIdentity field.
    */
  uci::type::EntityManagementSetIdentityType& getSetIdentity_() const;

  /** Returns the accessor to the SetIdentity field contained in this message fragment
    *
    * @return The reference to the accessor to the SetIdentity field.
    */
  const uci::type::EntityManagementSetIdentityType& getSetIdentity() const override;

  /** Returns the accessor to the SetIdentity field contained in this message fragment
    *
    * @return The reference to the accessor to the SetIdentity field.
    */
  uci::type::EntityManagementSetIdentityType& getSetIdentity() override;

  /** Sets this choice's choice to be setIdentity and initializes setIdentity to be the specified value. A deep copy will
    * be used by this method to set setIdentity
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetIdentity(const uci::type::EntityManagementSetIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetIdentity.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetIdentity, false otherwise.
    */
  bool isSetIdentity() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetIdentity.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetIdentity.
    */
  uci::type::EntityManagementSetIdentityType& chooseSetIdentity(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetIdentity.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetIdentity.
    */
  uci::type::EntityManagementSetIdentityType& chooseSetIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ClearIFF field contained in this message fragment
    *
    * @return The const reference to the accessor to the ClearIFF field.
    */
  uci::type::EntityManagementClearIdentityType& getClearIFF_() const;

  /** Returns the accessor to the ClearIFF field contained in this message fragment
    *
    * @return The reference to the accessor to the ClearIFF field.
    */
  const uci::type::EntityManagementClearIdentityType& getClearIFF() const override;

  /** Returns the accessor to the ClearIFF field contained in this message fragment
    *
    * @return The reference to the accessor to the ClearIFF field.
    */
  uci::type::EntityManagementClearIdentityType& getClearIFF() override;

  /** Sets this choice's choice to be clearIFF and initializes clearIFF to be the specified value. A deep copy will be used
    * by this method to set clearIFF
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setClearIFF(const uci::type::EntityManagementClearIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ClearIFF.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ClearIFF, false otherwise.
    */
  bool isClearIFF() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ClearIFF.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ClearIFF.
    */
  uci::type::EntityManagementClearIdentityType& chooseClearIFF(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ClearIFF.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ClearIFF.
    */
  uci::type::EntityManagementClearIdentityType& chooseClearIFF(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetDownLocation field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetDownLocation field.
    */
  uci::type::EntityManagementDownType& getSetDownLocation_() const;

  /** Returns the accessor to the SetDownLocation field contained in this message fragment
    *
    * @return The reference to the accessor to the SetDownLocation field.
    */
  const uci::type::EntityManagementDownType& getSetDownLocation() const override;

  /** Returns the accessor to the SetDownLocation field contained in this message fragment
    *
    * @return The reference to the accessor to the SetDownLocation field.
    */
  uci::type::EntityManagementDownType& getSetDownLocation() override;

  /** Sets this choice's choice to be setDownLocation and initializes setDownLocation to be the specified value. A deep
    * copy will be used by this method to set setDownLocation
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetDownLocation(const uci::type::EntityManagementDownType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetDownLocation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetDownLocation, false
    *      otherwise.
    */
  bool isSetDownLocation() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetDownLocation.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetDownLocation.
    */
  uci::type::EntityManagementDownType& chooseSetDownLocation(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetDownLocation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetDownLocation.
    */
  uci::type::EntityManagementDownType& chooseSetDownLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetKinematics field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetKinematics field.
    */
  uci::type::EntityManagementKinematicsType& getSetKinematics_() const;

  /** Returns the accessor to the SetKinematics field contained in this message fragment
    *
    * @return The reference to the accessor to the SetKinematics field.
    */
  const uci::type::EntityManagementKinematicsType& getSetKinematics() const override;

  /** Returns the accessor to the SetKinematics field contained in this message fragment
    *
    * @return The reference to the accessor to the SetKinematics field.
    */
  uci::type::EntityManagementKinematicsType& getSetKinematics() override;

  /** Sets this choice's choice to be setKinematics and initializes setKinematics to be the specified value. A deep copy
    * will be used by this method to set setKinematics
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetKinematics(const uci::type::EntityManagementKinematicsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetKinematics.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetKinematics, false otherwise.
    */
  bool isSetKinematics() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetKinematics.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetKinematics.
    */
  uci::type::EntityManagementKinematicsType& chooseSetKinematics(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetKinematics.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetKinematics.
    */
  uci::type::EntityManagementKinematicsType& chooseSetKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetMode field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetMode field.
    */
  uci::type::EntityManagementSetModeType& getSetMode_() const;

  /** Returns the accessor to the SetMode field contained in this message fragment
    *
    * @return The reference to the accessor to the SetMode field.
    */
  const uci::type::EntityManagementSetModeType& getSetMode() const override;

  /** Returns the accessor to the SetMode field contained in this message fragment
    *
    * @return The reference to the accessor to the SetMode field.
    */
  uci::type::EntityManagementSetModeType& getSetMode() override;

  /** Sets this choice's choice to be setMode and initializes setMode to be the specified value. A deep copy will be used
    * by this method to set setMode
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetMode(const uci::type::EntityManagementSetModeType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetMode.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetMode, false otherwise.
    */
  bool isSetMode() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetMode.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetMode.
    */
  uci::type::EntityManagementSetModeType& chooseSetMode(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetMode.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetMode.
    */
  uci::type::EntityManagementSetModeType& chooseSetMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetActivityBy field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetActivityBy field.
    */
  uci::type::EntityManagementSetActivityByType& getSetActivityBy_() const;

  /** Returns the accessor to the SetActivityBy field contained in this message fragment
    *
    * @return The reference to the accessor to the SetActivityBy field.
    */
  const uci::type::EntityManagementSetActivityByType& getSetActivityBy() const override;

  /** Returns the accessor to the SetActivityBy field contained in this message fragment
    *
    * @return The reference to the accessor to the SetActivityBy field.
    */
  uci::type::EntityManagementSetActivityByType& getSetActivityBy() override;

  /** Sets this choice's choice to be setActivityBy and initializes setActivityBy to be the specified value. A deep copy
    * will be used by this method to set setActivityBy
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetActivityBy(const uci::type::EntityManagementSetActivityByType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetActivityBy.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetActivityBy, false otherwise.
    */
  bool isSetActivityBy() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetActivityBy.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetActivityBy.
    */
  uci::type::EntityManagementSetActivityByType& chooseSetActivityBy(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetActivityBy.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetActivityBy.
    */
  uci::type::EntityManagementSetActivityByType& chooseSetActivityBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetStrength field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetStrength field.
    */
  uci::type::EntityManagementSetStrengthType& getSetStrength_() const;

  /** Returns the accessor to the SetStrength field contained in this message fragment
    *
    * @return The reference to the accessor to the SetStrength field.
    */
  const uci::type::EntityManagementSetStrengthType& getSetStrength() const override;

  /** Returns the accessor to the SetStrength field contained in this message fragment
    *
    * @return The reference to the accessor to the SetStrength field.
    */
  uci::type::EntityManagementSetStrengthType& getSetStrength() override;

  /** Sets this choice's choice to be setStrength and initializes setStrength to be the specified value. A deep copy will
    * be used by this method to set setStrength
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetStrength(const uci::type::EntityManagementSetStrengthType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetStrength.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetStrength, false otherwise.
    */
  bool isSetStrength() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetStrength.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetStrength.
    */
  uci::type::EntityManagementSetStrengthType& chooseSetStrength(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetStrength.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetStrength.
    */
  uci::type::EntityManagementSetStrengthType& chooseSetStrength(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetPlatformStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetPlatformStatus field.
    */
  uci::type::EntityManagementSetPlatformStatusType& getSetPlatformStatus_() const;

  /** Returns the accessor to the SetPlatformStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the SetPlatformStatus field.
    */
  const uci::type::EntityManagementSetPlatformStatusType& getSetPlatformStatus() const override;

  /** Returns the accessor to the SetPlatformStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the SetPlatformStatus field.
    */
  uci::type::EntityManagementSetPlatformStatusType& getSetPlatformStatus() override;

  /** Sets this choice's choice to be setPlatformStatus and initializes setPlatformStatus to be the specified value. A deep
    * copy will be used by this method to set setPlatformStatus
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetPlatformStatus(const uci::type::EntityManagementSetPlatformStatusType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetPlatformStatus.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetPlatformStatus, false
    *      otherwise.
    */
  bool isSetPlatformStatus() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetPlatformStatus.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetPlatformStatus.
    */
  uci::type::EntityManagementSetPlatformStatusType& chooseSetPlatformStatus(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetPlatformStatus.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetPlatformStatus.
    */
  uci::type::EntityManagementSetPlatformStatusType& chooseSetPlatformStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetEndurance field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetEndurance field.
    */
  uci::type::EntityManagementSetEnduranceType& getSetEndurance_() const;

  /** Returns the accessor to the SetEndurance field contained in this message fragment
    *
    * @return The reference to the accessor to the SetEndurance field.
    */
  const uci::type::EntityManagementSetEnduranceType& getSetEndurance() const override;

  /** Returns the accessor to the SetEndurance field contained in this message fragment
    *
    * @return The reference to the accessor to the SetEndurance field.
    */
  uci::type::EntityManagementSetEnduranceType& getSetEndurance() override;

  /** Sets this choice's choice to be setEndurance and initializes setEndurance to be the specified value. A deep copy will
    * be used by this method to set setEndurance
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetEndurance(const uci::type::EntityManagementSetEnduranceType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetEndurance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetEndurance, false otherwise.
    */
  bool isSetEndurance() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetEndurance.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetEndurance.
    */
  uci::type::EntityManagementSetEnduranceType& chooseSetEndurance(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetEndurance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetEndurance.
    */
  uci::type::EntityManagementSetEnduranceType& chooseSetEndurance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetLink16Metadata field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetLink16Metadata field.
    */
  uci::type::EntityManagementSetLink16MetadataType& getSetLink16Metadata_() const;

  /** Returns the accessor to the SetLink16Metadata field contained in this message fragment
    *
    * @return The reference to the accessor to the SetLink16Metadata field.
    */
  const uci::type::EntityManagementSetLink16MetadataType& getSetLink16Metadata() const override;

  /** Returns the accessor to the SetLink16Metadata field contained in this message fragment
    *
    * @return The reference to the accessor to the SetLink16Metadata field.
    */
  uci::type::EntityManagementSetLink16MetadataType& getSetLink16Metadata() override;

  /** Sets this choice's choice to be setLink16Metadata and initializes setLink16Metadata to be the specified value. A deep
    * copy will be used by this method to set setLink16Metadata
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetLink16Metadata(const uci::type::EntityManagementSetLink16MetadataType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetLink16Metadata.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetLink16Metadata, false
    *      otherwise.
    */
  bool isSetLink16Metadata() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetLink16Metadata.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetLink16Metadata.
    */
  uci::type::EntityManagementSetLink16MetadataType& chooseSetLink16Metadata(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetLink16Metadata.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetLink16Metadata.
    */
  uci::type::EntityManagementSetLink16MetadataType& chooseSetLink16Metadata(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ProposeCorrelation field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProposeCorrelation field.
    */
  uci::type::EntityManagementProposeCorrelationType& getProposeCorrelation_() const;

  /** Returns the accessor to the ProposeCorrelation field contained in this message fragment
    *
    * @return The reference to the accessor to the ProposeCorrelation field.
    */
  const uci::type::EntityManagementProposeCorrelationType& getProposeCorrelation() const override;

  /** Returns the accessor to the ProposeCorrelation field contained in this message fragment
    *
    * @return The reference to the accessor to the ProposeCorrelation field.
    */
  uci::type::EntityManagementProposeCorrelationType& getProposeCorrelation() override;

  /** Sets this choice's choice to be proposeCorrelation and initializes proposeCorrelation to be the specified value. A
    * deep copy will be used by this method to set proposeCorrelation
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setProposeCorrelation(const uci::type::EntityManagementProposeCorrelationType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProposeCorrelation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProposeCorrelation, false
    *      otherwise.
    */
  bool isProposeCorrelation() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ProposeCorrelation.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProposeCorrelation.
    */
  uci::type::EntityManagementProposeCorrelationType& chooseProposeCorrelation(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ProposeCorrelation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProposeCorrelation.
    */
  uci::type::EntityManagementProposeCorrelationType& chooseProposeCorrelation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetVoiceControl field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetVoiceControl field.
    */
  uci::type::EntityManagementSetVoiceControlType& getSetVoiceControl_() const;

  /** Returns the accessor to the SetVoiceControl field contained in this message fragment
    *
    * @return The reference to the accessor to the SetVoiceControl field.
    */
  const uci::type::EntityManagementSetVoiceControlType& getSetVoiceControl() const override;

  /** Returns the accessor to the SetVoiceControl field contained in this message fragment
    *
    * @return The reference to the accessor to the SetVoiceControl field.
    */
  uci::type::EntityManagementSetVoiceControlType& getSetVoiceControl() override;

  /** Sets this choice's choice to be setVoiceControl and initializes setVoiceControl to be the specified value. A deep
    * copy will be used by this method to set setVoiceControl
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetVoiceControl(const uci::type::EntityManagementSetVoiceControlType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetVoiceControl.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetVoiceControl, false
    *      otherwise.
    */
  bool isSetVoiceControl() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetVoiceControl.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetVoiceControl.
    */
  uci::type::EntityManagementSetVoiceControlType& chooseSetVoiceControl(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetVoiceControl.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetVoiceControl.
    */
  uci::type::EntityManagementSetVoiceControlType& chooseSetVoiceControl(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetCapability field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetCapability field.
    */
  uci::type::EntityManagementSetCapabilityType& getSetCapability_() const;

  /** Returns the accessor to the SetCapability field contained in this message fragment
    *
    * @return The reference to the accessor to the SetCapability field.
    */
  const uci::type::EntityManagementSetCapabilityType& getSetCapability() const override;

  /** Returns the accessor to the SetCapability field contained in this message fragment
    *
    * @return The reference to the accessor to the SetCapability field.
    */
  uci::type::EntityManagementSetCapabilityType& getSetCapability() override;

  /** Sets this choice's choice to be setCapability and initializes setCapability to be the specified value. A deep copy
    * will be used by this method to set setCapability
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetCapability(const uci::type::EntityManagementSetCapabilityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetCapability.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetCapability, false otherwise.
    */
  bool isSetCapability() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetCapability.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetCapability.
    */
  uci::type::EntityManagementSetCapabilityType& chooseSetCapability(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetCapability.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetCapability.
    */
  uci::type::EntityManagementSetCapabilityType& chooseSetCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SetSignalSummary field contained in this message fragment
    *
    * @return The const reference to the accessor to the SetSignalSummary field.
    */
  uci::type::EntityManagementSetSignalSummaryType& getSetSignalSummary_() const;

  /** Returns the accessor to the SetSignalSummary field contained in this message fragment
    *
    * @return The reference to the accessor to the SetSignalSummary field.
    */
  const uci::type::EntityManagementSetSignalSummaryType& getSetSignalSummary() const override;

  /** Returns the accessor to the SetSignalSummary field contained in this message fragment
    *
    * @return The reference to the accessor to the SetSignalSummary field.
    */
  uci::type::EntityManagementSetSignalSummaryType& getSetSignalSummary() override;

  /** Sets this choice's choice to be setSignalSummary and initializes setSignalSummary to be the specified value. A deep
    * copy will be used by this method to set setSignalSummary
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityManagementRequestType& setSetSignalSummary(const uci::type::EntityManagementSetSignalSummaryType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetSignalSummary.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetSignalSummary, false
    *      otherwise.
    */
  bool isSetSignalSummary() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SetSignalSummary.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetSignalSummary.
    */
  uci::type::EntityManagementSetSignalSummaryType& chooseSetSignalSummary(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SetSignalSummary.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetSignalSummary.
    */
  uci::type::EntityManagementSetSignalSummaryType& chooseSetSignalSummary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EntityManagementRequestType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityManagementRequestType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EntityManagementRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EntityManagementSplitType> split_Accessor;
  std::unique_ptr<EntityManagementMergeType> merge_Accessor;
  std::unique_ptr<EntityManagementDropType> drop_Accessor;
  std::unique_ptr<EntityManagementDropRestrictType> setDropRestriction_Accessor;
  std::unique_ptr<EntityManagementDropRestrictType> clearDropRestriction_Accessor;
  std::unique_ptr<EntityManagementSwapType> swap_Accessor;
  std::unique_ptr<EntityManagementSetFusionEligibilityType> setFusionEligibility_Accessor;
  std::unique_ptr<EntityManagementSetIdentityType> setIdentity_Accessor;
  std::unique_ptr<EntityManagementClearIdentityType> clearIFF_Accessor;
  std::unique_ptr<EntityManagementDownType> setDownLocation_Accessor;
  std::unique_ptr<EntityManagementKinematicsType> setKinematics_Accessor;
  std::unique_ptr<EntityManagementSetModeType> setMode_Accessor;
  std::unique_ptr<EntityManagementSetActivityByType> setActivityBy_Accessor;
  std::unique_ptr<EntityManagementSetStrengthType> setStrength_Accessor;
  std::unique_ptr<EntityManagementSetPlatformStatusType> setPlatformStatus_Accessor;
  std::unique_ptr<EntityManagementSetEnduranceType> setEndurance_Accessor;
  std::unique_ptr<EntityManagementSetLink16MetadataType> setLink16Metadata_Accessor;
  std::unique_ptr<EntityManagementProposeCorrelationType> proposeCorrelation_Accessor;
  std::unique_ptr<EntityManagementSetVoiceControlType> setVoiceControl_Accessor;
  std::unique_ptr<EntityManagementSetCapabilityType> setCapability_Accessor;
  std::unique_ptr<EntityManagementSetSignalSummaryType> setSignalSummary_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ENTITYMANAGEMENTREQUESTTYPE_H
