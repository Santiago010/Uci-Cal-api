/** @file FileHeaderType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_FILEHEADERTYPE_H
#define ASB_UCI_TYPE_FILEHEADERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AlphanumericPunctuatedString11Type.h"
#include "asb_uci/type/AlphanumericSpaceString11Type.h"
#include "asb_uci/type/FIPS_ClassificationSystemType.h"
#include "asb_uci/type/FileDeclassificationEnum.h"
#include "asb_uci/type/FileHeaderClassificationAuthorityType.h"
#include "asb_uci/type/FileHeaderDowngradeStringType.h"
#include "asb_uci/type/NumericSpaceString11Type.h"
#include "asb_uci/type/SAR_CollectionReasonEnum.h"
#include "asb_uci/type/VisibleString16Type.h"
#include "asb_uci/type/VisibleString3Type.h"
#include "asb_uci/type/VisibleString80Type.h"
#include "asb_uci/type/VisibleString9Type.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/FileHeaderType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CountryCodeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class FileHeaderType : public virtual uci::type::FileHeaderType {
public:
  /** The constructor */
  FileHeaderType();

  /** The copy constructor
    *
    * @param rhs The FileHeaderType to copy from
    */
  FileHeaderType(const FileHeaderType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The FileHeaderType to move from
    */
  FileHeaderType(FileHeaderType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The FileHeaderType to copy from
    * @return The FileHeaderType that was assigned
    */
  FileHeaderType& operator=(const FileHeaderType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The FileHeaderType to move from
    * @return The FileHeaderType that was assigned
    */
  FileHeaderType& operator=(FileHeaderType&& rhs) = delete;

  /** The destructor */
  virtual ~FileHeaderType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::FileHeaderType whose contents are to be used to set this uci::type::FileHeaderType's
    *      contents.
    */
  void copy(const uci::type::FileHeaderType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::FileHeaderType whose contents are to be used to set this uci::type::FileHeaderType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::FileHeaderType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getCountryCode_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CountryCodeType& getCountryCode() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getCountryCode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setCountryCode(const uci::type::CountryCodeType& accessor) override;

  /** Returns whether this optional field CountryCodeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCountryCode() const noexcept override;

  /** Enables the optional field such that getCountryCode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& enableCountryCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearCountryCode() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionReasonEnum& getSceneSource_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SAR_CollectionReasonEnum& getSceneSource() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionReasonEnum& getSceneSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setSceneSource(const uci::type::SAR_CollectionReasonEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setSceneSource(uci::type::SAR_CollectionReasonEnum::EnumerationItem value) override;

  /** Returns whether this optional field SceneSourceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSceneSource() const noexcept override;

  /** Enables the optional field such that getSceneSource will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionReasonEnum& enableSceneSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearSceneSource() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericPunctuatedString11Type& getOriginatingStationIdentifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericPunctuatedString11Type& getOriginatingStationIdentifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericPunctuatedString11Type& getOriginatingStationIdentifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatingStationIdentifier(const uci::type::AlphanumericPunctuatedString11Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatingStationIdentifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatingStationIdentifier(const char* value) override;

  /** Returns whether this optional field originatingStationIdentifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOriginatingStationIdentifier() const noexcept override;

  /** Enables the optional field such that getOriginatingStationIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericPunctuatedString11Type& enableOriginatingStationIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearOriginatingStationIdentifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getCollectionIdentifier() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setCollectionIdentifier(xs::UnsignedInt value) override;

  /** Returns whether this optional field CollectionIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionIdentifier() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearCollectionIdentifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString80Type& getFileTitle_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString80Type& getFileTitle() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString80Type& getFileTitle() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileTitle(const uci::type::VisibleString80Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileTitle(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileTitle(const char* value) override;

  /** Returns whether this optional field fileTitle_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileTitle() const noexcept override;

  /** Enables the optional field such that getFileTitle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString80Type& enableFileTitle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileTitle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11Type& getOriginatorsName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericSpaceString11Type& getOriginatorsName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11Type& getOriginatorsName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatorsName(const uci::type::AlphanumericSpaceString11Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatorsName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatorsName(const char* value) override;

  /** Returns whether this optional field originatorsName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOriginatorsName() const noexcept override;

  /** Enables the optional field such that getOriginatorsName will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericSpaceString11Type& enableOriginatorsName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearOriginatorsName() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString11Type& getOriginatorsPhone_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString11Type& getOriginatorsPhone() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString11Type& getOriginatorsPhone() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatorsPhone(const uci::type::NumericSpaceString11Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatorsPhone(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setOriginatorsPhone(const char* value) override;

  /** Returns whether this optional field originatorsPhone_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOriginatorsPhone() const noexcept override;

  /** Enables the optional field such that getOriginatorsPhone will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString11Type& enableOriginatorsPhone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearOriginatorsPhone() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FIPS_ClassificationSystemType& getFileClassificationSystem_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::FIPS_ClassificationSystemType& getFileClassificationSystem() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FIPS_ClassificationSystemType& getFileClassificationSystem() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileClassificationSystem(const uci::type::FIPS_ClassificationSystemType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileClassificationSystem(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileClassificationSystem(const char* value) override;

  /** Returns whether this optional field fileClassificationSystem_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileClassificationSystem() const noexcept override;

  /** Enables the optional field such that getFileClassificationSystem will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::FIPS_ClassificationSystemType& enableFileClassificationSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileClassificationSystem() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString16Type& getFileSecurityControlNumber_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString16Type& getFileSecurityControlNumber() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString16Type& getFileSecurityControlNumber() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileSecurityControlNumber(const uci::type::VisibleString16Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileSecurityControlNumber(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileSecurityControlNumber(const char* value) override;

  /** Returns whether this optional field fileSecurityControlNumber_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileSecurityControlNumber() const noexcept override;

  /** Enables the optional field such that getFileSecurityControlNumber will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString16Type& enableFileSecurityControlNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileSecurityControlNumber() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString3Type& getFileControlAndHandling_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString3Type& getFileControlAndHandling() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString3Type& getFileControlAndHandling() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileControlAndHandling(const uci::type::VisibleString3Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileControlAndHandling(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileControlAndHandling(const char* value) override;

  /** Returns whether this optional field fileControlAndHandling_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileControlAndHandling() const noexcept override;

  /** Enables the optional field such that getFileControlAndHandling will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString3Type& enableFileControlAndHandling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileControlAndHandling() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileDeclassificationEnum& getFileDeclassificationType_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FileDeclassificationEnum& getFileDeclassificationType() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileDeclassificationEnum& getFileDeclassificationType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileDeclassificationType(const uci::type::FileDeclassificationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileDeclassificationType(uci::type::FileDeclassificationEnum::EnumerationItem value) override;

  /** Returns whether this optional field FileDeclassificationTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileDeclassificationType() const noexcept override;

  /** Enables the optional field such that getFileDeclassificationType will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileDeclassificationEnum& enableFileDeclassificationType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileDeclassificationType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FileHeaderClassificationAuthorityType& getFileClassificationAuthorityType_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::FileHeaderClassificationAuthorityType& getFileClassificationAuthorityType() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FileHeaderClassificationAuthorityType& getFileClassificationAuthorityType() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileClassificationAuthorityType(const uci::type::FileHeaderClassificationAuthorityType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileClassificationAuthorityType(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileClassificationAuthorityType(const char* value) override;

  /** Returns whether this optional field fileClassificationAuthorityType_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileClassificationAuthorityType() const noexcept override;

  /** Enables the optional field such that getFileClassificationAuthorityType will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::FileHeaderClassificationAuthorityType& enableFileClassificationAuthorityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileClassificationAuthorityType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FileHeaderDowngradeStringType& getFileDowngrade_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::FileHeaderDowngradeStringType& getFileDowngrade() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FileHeaderDowngradeStringType& getFileDowngrade() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileDowngrade(const uci::type::FileHeaderDowngradeStringType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileDowngrade(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileDowngrade(const char* value) override;

  /** Returns whether this optional field fileDowngrade_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileDowngrade() const noexcept override;

  /** Enables the optional field such that getFileDowngrade will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::FileHeaderDowngradeStringType& enableFileDowngrade(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileDowngrade() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString9Type& getFileSecuritySourceDate_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString9Type& getFileSecuritySourceDate() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString9Type& getFileSecuritySourceDate() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileSecuritySourceDate(const uci::type::VisibleString9Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileSecuritySourceDate(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& setFileSecuritySourceDate(const char* value) override;

  /** Returns whether this optional field fileSecuritySourceDate_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileSecuritySourceDate() const noexcept override;

  /** Enables the optional field such that getFileSecuritySourceDate will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString9Type& enableFileSecuritySourceDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderType& clearFileSecuritySourceDate() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<FileHeaderType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::FileHeaderType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::FileHeaderType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CountryCodeType> countryCode_Accessor;
  std::unique_ptr<SAR_CollectionReasonEnum> sceneSource_Accessor;
  std::unique_ptr<AlphanumericPunctuatedString11Type> originatingStationIdentifier_Accessor;
  boost::optional<asb_xs::UnsignedInt> collectionIdentifier_Accessor;
  std::unique_ptr<VisibleString80Type> fileTitle_Accessor;
  std::unique_ptr<AlphanumericSpaceString11Type> originatorsName_Accessor;
  std::unique_ptr<NumericSpaceString11Type> originatorsPhone_Accessor;
  std::unique_ptr<FIPS_ClassificationSystemType> fileClassificationSystem_Accessor;
  std::unique_ptr<VisibleString16Type> fileSecurityControlNumber_Accessor;
  std::unique_ptr<VisibleString3Type> fileControlAndHandling_Accessor;
  std::unique_ptr<FileDeclassificationEnum> fileDeclassificationType_Accessor;
  std::unique_ptr<FileHeaderClassificationAuthorityType> fileClassificationAuthorityType_Accessor;
  std::unique_ptr<FileHeaderDowngradeStringType> fileDowngrade_Accessor;
  std::unique_ptr<VisibleString9Type> fileSecuritySourceDate_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_FILEHEADERTYPE_H
