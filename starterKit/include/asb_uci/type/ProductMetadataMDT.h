/** @file ProductMetadataMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PRODUCTMETADATAMDT_H
#define ASB_UCI_TYPE_PRODUCTMETADATAMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CreationSourceEnum.h"
#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_uci/type/FileNameType.h"
#include "asb_uci/type/SHA_2_256_HashType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/ProductMetadataMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class BasicEncyclopediaNumberType;
class DemodulationParameterType;
class EntityMetadataType;
class ForeignKeyType;
class ProductCollectionLocationType;
class ProductGeospatialLocationType;
class ProductMetadataID_Type;
class ProductOutputType;
class RequirementProductMetadataType;
class SecurityInformationType;
class SourceFiltersType;
class SystemID_Type;
class ThumbnailType;
class TraceabilityType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ProductMetadataMDT : public virtual uci::type::ProductMetadataMDT, public virtual DataRecordBaseType {
public:
  /** Describes the geospatial location or locations which the product associated with this ProductMetadata is relevant. If
    * more than one is provided, they may be disjoint. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using GeospatialLocation = asb_uci::base::BoundedList<uci::type::ProductGeospatialLocationType, uci::type::accessorType::productGeospatialLocationType, asb_uci::type::ProductGeospatialLocationType>;

  /** Indicates the unique ID of a ProductMetadata message corresponding to the original product that this product was
    * derived from. It is possible for the original products to "expire" despite this reference. This differs from
    * "DerivedFrom" in SecurityInformation in that it refers to a specific ProductMetadataID for a product that might not
    * persist vs. a less specific name, description or identification that remains meaningful over time. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using DerivedFromID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** Tasking sources work at different levels of detail and abstraction, progressing from what to do to how specifically
    * to do it. Inputs from abstract tasking sources and Tasks can be decomposed into discrete, actionable Tasks. This
    * element provides traceability to the external tasking or Task associated with the Product described by this
    * ProductMetadata. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Traceability = asb_uci::base::BoundedList<uci::type::TraceabilityType, uci::type::accessorType::traceabilityType, asb_uci::type::TraceabilityType>;

  /** Indicates Requirement-related metadata for the Product. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using RequirementMetadata = asb_uci::base::BoundedList<uci::type::RequirementProductMetadataType, uci::type::accessorType::requirementProductMetadataType, asb_uci::type::RequirementProductMetadataType>;

  /** Indicates Entity-related metadata for Products which are associated with or contain Entities. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using EntityMetadata = asb_uci::base::BoundedList<uci::type::EntityMetadataType, uci::type::accessorType::entityMetadataType, asb_uci::type::EntityMetadataType>;

  /** Indicates the unique product metadata ID of a product that is being associated with this product. The associated
    * products may have been created together or are used together. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssociatedID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** The constructor */
  ProductMetadataMDT();

  /** The copy constructor
    *
    * @param rhs The ProductMetadataMDT to copy from
    */
  ProductMetadataMDT(const ProductMetadataMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ProductMetadataMDT to move from
    */
  ProductMetadataMDT(ProductMetadataMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ProductMetadataMDT to copy from
    * @return The ProductMetadataMDT that was assigned
    */
  ProductMetadataMDT& operator=(const ProductMetadataMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ProductMetadataMDT to move from
    * @return The ProductMetadataMDT that was assigned
    */
  ProductMetadataMDT& operator=(ProductMetadataMDT&& rhs) = delete;

  /** The destructor */
  ~ProductMetadataMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ProductMetadataMDT whose contents are to be used to set this
    *      uci::type::ProductMetadataMDT's contents.
    */
  void copy(const uci::type::ProductMetadataMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ProductMetadataMDT whose contents are to be used to set this
    *      uci::type::ProductMetadataMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ProductMetadataMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ProductMetadataID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductMetadataID field.
    */
  const uci::type::ProductMetadataID_Type& getProductMetadataID() const override;

  /** Returns the accessor to the ProductMetadataID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductMetadataID field.
    */
  uci::type::ProductMetadataID_Type& getProductMetadataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setProductMetadataID(const uci::type::ProductMetadataID_Type& accessor) override;

  /** Returns the accessor to the ProductDescription field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductDescription field.
    */
  const uci::type::ProductOutputType& getProductDescription() const override;

  /** Returns the accessor to the ProductDescription field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductDescription field.
    */
  uci::type::ProductOutputType& getProductDescription() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setProductDescription(const uci::type::ProductOutputType& accessor) override;

  /** Enables the optional field such that getProductDescription will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductOutputType& enableProductDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FileNameType& getFileName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::FileNameType& getFileName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FileNameType& getFileName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setFileName(const uci::type::FileNameType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setFileName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setFileName(const char* value) override;

  /** Returns whether this optional field fileName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileName() const noexcept override;

  /** Enables the optional field such that getFileName will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::FileNameType& enableFileName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& clearFileName() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BasicEncyclopediaNumberType& getBE_Number_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::BasicEncyclopediaNumberType& getBE_Number() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BasicEncyclopediaNumberType& getBE_Number() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setBE_Number(const uci::type::BasicEncyclopediaNumberType& accessor) override;

  /** Returns whether this optional field BE_Numberis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBE_Number() const noexcept override;

  /** Enables the optional field such that getBE_Number will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BasicEncyclopediaNumberType& enableBE_Number(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& clearBE_Number() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getSceneKey_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getSceneKey() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getSceneKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setSceneKey(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field SceneKeyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSceneKey() const noexcept override;

  /** Enables the optional field such that getSceneKey will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableSceneKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& clearSceneKey() noexcept override;

  /** Returns the accessor to the GeospatialLocation field contained in this message fragment
    *
    * @return The const reference to the accessor to the GeospatialLocation field.
    */
  const uci::type::ProductMetadataMDT::GeospatialLocation& getGeospatialLocation() const override;

  /** Returns the accessor to the GeospatialLocation field contained in this message fragment
    *
    * @return The reference to the accessor to the GeospatialLocation field.
    */
  uci::type::ProductMetadataMDT::GeospatialLocation& getGeospatialLocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setGeospatialLocation(const uci::type::ProductMetadataMDT::GeospatialLocation& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductCollectionLocationType& getCollectionLocation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ProductCollectionLocationType& getCollectionLocation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductCollectionLocationType& getCollectionLocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setCollectionLocation(const uci::type::ProductCollectionLocationType& accessor) override;

  /** Returns whether this optional field CollectionLocationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionLocation() const noexcept override;

  /** Enables the optional field such that getCollectionLocation will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductCollectionLocationType& enableCollectionLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& clearCollectionLocation() noexcept override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemID field.
    */
  const uci::type::SystemID_Type& getSystemID() const override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemID field.
    */
  uci::type::SystemID_Type& getSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setSystemID(const uci::type::SystemID_Type& accessor) override;

  /** Returns the accessor to the ProductSource field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductSource field.
    */
  const uci::type::SourceFiltersType& getProductSource() const override;

  /** Returns the accessor to the ProductSource field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductSource field.
    */
  uci::type::SourceFiltersType& getProductSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setProductSource(const uci::type::SourceFiltersType& accessor) override;

  /** Returns the contents of the message's CreationSource field
    *
    * @return The contents of the CreationSource field
    */
  const uci::type::CreationSourceEnum& getCreationSource() const override;

  /** Returns the contents of the message's CreationSource field
    *
    * @return The contents of the CreationSource field
    */
  uci::type::CreationSourceEnum& getCreationSource() override;

  /** Sets the contents of the message's CreationSource field
    *
    * @param accessor The accessor to use to set the CreationSource field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setCreationSource(const uci::type::CreationSourceEnum& accessor) override;

  /** Sets the contents of the message's CreationSource field
    *
    * @param value The new value to set the CreationSource field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setCreationSource(uci::type::CreationSourceEnum::EnumerationItem value) override;

  /** Returns the contents of the message's UntrustedModification field
    *
    * @return The contents of the UntrustedModification field
    */
  xs::Boolean getUntrustedModification() const override;

  /** Sets the contents of the message's UntrustedModification field
    *
    * @param value The new value to set the UntrustedModification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setUntrustedModification(xs::Boolean value) override;

  /** Returns the contents of the message's Timestamp field
    *
    * @return The contents of the Timestamp field
    */
  uci::type::DateTimeTypeValue getTimestamp() const override;

  /** Sets the contents of the message's Timestamp field
    *
    * @param value The new value to set the Timestamp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecurityInformation field.
    */
  const uci::type::SecurityInformationType& getSecurityInformation() const override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityInformation field.
    */
  uci::type::SecurityInformationType& getSecurityInformation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setSecurityInformation(const uci::type::SecurityInformationType& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ThumbnailType& getThumbnail_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ThumbnailType& getThumbnail() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ThumbnailType& getThumbnail() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setThumbnail(const uci::type::ThumbnailType& accessor) override;

  /** Returns whether this optional field Thumbnailis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasThumbnail() const noexcept override;

  /** Enables the optional field such that getThumbnail will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ThumbnailType& enableThumbnail(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& clearThumbnail() noexcept override;

  /** Returns the accessor to the DerivedFromID field contained in this message fragment
    *
    * @return The const reference to the accessor to the DerivedFromID field.
    */
  const uci::type::ProductMetadataMDT::DerivedFromID& getDerivedFromID() const override;

  /** Returns the accessor to the DerivedFromID field contained in this message fragment
    *
    * @return The reference to the accessor to the DerivedFromID field.
    */
  uci::type::ProductMetadataMDT::DerivedFromID& getDerivedFromID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setDerivedFromID(const uci::type::ProductMetadataMDT::DerivedFromID& accessor) override;

  /** Returns the accessor to the Traceability field contained in this message fragment
    *
    * @return The const reference to the accessor to the Traceability field.
    */
  const uci::type::ProductMetadataMDT::Traceability& getTraceability() const override;

  /** Returns the accessor to the Traceability field contained in this message fragment
    *
    * @return The reference to the accessor to the Traceability field.
    */
  uci::type::ProductMetadataMDT::Traceability& getTraceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setTraceability(const uci::type::ProductMetadataMDT::Traceability& accessor) override;

  /** Returns the accessor to the RequirementMetadata field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequirementMetadata field.
    */
  const uci::type::ProductMetadataMDT::RequirementMetadata& getRequirementMetadata() const override;

  /** Returns the accessor to the RequirementMetadata field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementMetadata field.
    */
  uci::type::ProductMetadataMDT::RequirementMetadata& getRequirementMetadata() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setRequirementMetadata(const uci::type::ProductMetadataMDT::RequirementMetadata& accessor) override;

  /** Returns the accessor to the EntityMetadata field contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityMetadata field.
    */
  const uci::type::ProductMetadataMDT::EntityMetadata& getEntityMetadata() const override;

  /** Returns the accessor to the EntityMetadata field contained in this message fragment
    *
    * @return The reference to the accessor to the EntityMetadata field.
    */
  uci::type::ProductMetadataMDT::EntityMetadata& getEntityMetadata() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setEntityMetadata(const uci::type::ProductMetadataMDT::EntityMetadata& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::SHA_2_256_HashType& getSHA_2_Hash_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SHA_2_256_HashType& getSHA_2_Hash() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SHA_2_256_HashType& getSHA_2_Hash() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setSHA_2_Hash(const uci::type::SHA_2_256_HashType& value) override;

  /** Returns whether this optional field SHA_2_Hashis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSHA_2_Hash() const noexcept override;

  /** Enables the optional field such that getSHA_2_Hash will return the optional field and not throw an exception when
    * invoked.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SHA_2_256_HashType& enableSHA_2_Hash() override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& clearSHA_2_Hash() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DemodulationParameterType& getDemodulationParameters_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DemodulationParameterType& getDemodulationParameters() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DemodulationParameterType& getDemodulationParameters() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setDemodulationParameters(const uci::type::DemodulationParameterType& accessor) override;

  /** Returns whether this optional field DemodulationParametersis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDemodulationParameters() const noexcept override;

  /** Enables the optional field such that getDemodulationParameters will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DemodulationParameterType& enableDemodulationParameters(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& clearDemodulationParameters() noexcept override;

  /** Returns the accessor to the AssociatedID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedID field.
    */
  const uci::type::ProductMetadataMDT::AssociatedID& getAssociatedID() const override;

  /** Returns the accessor to the AssociatedID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedID field.
    */
  uci::type::ProductMetadataMDT::AssociatedID& getAssociatedID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductMetadataMDT& setAssociatedID(const uci::type::ProductMetadataMDT::AssociatedID& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ProductMetadataMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductMetadataMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ProductMetadataMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ProductMetadataID_Type> productMetadataID_Accessor;
  std::unique_ptr<ProductOutputType> productDescription_Accessor;
  std::unique_ptr<FileNameType> fileName_Accessor;
  std::unique_ptr<BasicEncyclopediaNumberType> bE_Number_Accessor;
  std::unique_ptr<ForeignKeyType> sceneKey_Accessor;
  std::unique_ptr<GeospatialLocation> geospatialLocation_Accessor;
  std::unique_ptr<ProductCollectionLocationType> collectionLocation_Accessor;
  std::unique_ptr<SystemID_Type> systemID_Accessor;
  std::unique_ptr<SourceFiltersType> productSource_Accessor;
  std::unique_ptr<CreationSourceEnum> creationSource_Accessor;
  asb_xs::Boolean untrustedModification_Accessor{false};
  DateTimeTypeValue timestamp_Accessor{0};
  std::unique_ptr<SecurityInformationType> securityInformation_Accessor;
  std::unique_ptr<ThumbnailType> thumbnail_Accessor;
  std::unique_ptr<DerivedFromID> derivedFromID_Accessor;
  std::unique_ptr<Traceability> traceability_Accessor;
  std::unique_ptr<RequirementMetadata> requirementMetadata_Accessor;
  std::unique_ptr<EntityMetadata> entityMetadata_Accessor;
  std::unique_ptr<SHA_2_256_HashType> sHA_2_Hash_Accessor;
  std::unique_ptr<DemodulationParameterType> demodulationParameters_Accessor;
  std::unique_ptr<AssociatedID> associatedID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PRODUCTMETADATAMDT_H
