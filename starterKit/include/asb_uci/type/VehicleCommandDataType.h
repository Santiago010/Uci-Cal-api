/** @file VehicleCommandDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_VEHICLECOMMANDDATATYPE_H
#define ASB_UCI_TYPE_VEHICLECOMMANDDATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/VehicleActionEnum.h"
#include "../../../include/asb_uci/type/VehicleLossOfLinkProcessingEnum.h"
#include "../../../include/asb_uci/type/VehicleSurvivabilityModeEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VehicleCommandDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommAllocationActionType;
class IFF_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class VehicleCommandDataType : public virtual uci::type::VehicleCommandDataType {
public:
  /** The constructor */
  VehicleCommandDataType();

  /** The copy constructor
    *
    * @param rhs The VehicleCommandDataType to copy from
    */
  VehicleCommandDataType(const VehicleCommandDataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The VehicleCommandDataType to move from
    */
  VehicleCommandDataType(VehicleCommandDataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The VehicleCommandDataType to copy from
    * @return The VehicleCommandDataType that was assigned
    */
  VehicleCommandDataType& operator=(const VehicleCommandDataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The VehicleCommandDataType to move from
    * @return The VehicleCommandDataType that was assigned
    */
  VehicleCommandDataType& operator=(VehicleCommandDataType&& rhs) = delete;

  /** The destructor */
  virtual ~VehicleCommandDataType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::VehicleCommandDataType whose contents are to be used to set this
    *      uci::type::VehicleCommandDataType's contents.
    */
  void copy(const uci::type::VehicleCommandDataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::VehicleCommandDataType whose contents are to be used to set this
    *      uci::type::VehicleCommandDataType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::VehicleCommandDataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleActionEnum& getVehicleAction_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VehicleActionEnum& getVehicleAction() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleActionEnum& getVehicleAction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setVehicleAction(const uci::type::VehicleActionEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setVehicleAction(uci::type::VehicleActionEnum::EnumerationItem value) override;

  /** Returns whether this optional field VehicleActionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVehicleAction() const noexcept override;

  /** Enables the optional field such that getVehicleAction will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleActionEnum& enableVehicleAction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& clearVehicleAction() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IFF_Type& getIFF_Settings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::IFF_Type& getIFF_Settings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IFF_Type& getIFF_Settings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setIFF_Settings(const uci::type::IFF_Type& accessor) override;

  /** Returns whether this optional field IFF_Settingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIFF_Settings() const noexcept override;

  /** Enables the optional field such that getIFF_Settings will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IFF_Type& enableIFF_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& clearIFF_Settings() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleSurvivabilityModeEnum& getSurvivabilityMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VehicleSurvivabilityModeEnum& getSurvivabilityMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleSurvivabilityModeEnum& getSurvivabilityMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setSurvivabilityMode(const uci::type::VehicleSurvivabilityModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setSurvivabilityMode(uci::type::VehicleSurvivabilityModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field SurvivabilityModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSurvivabilityMode() const noexcept override;

  /** Enables the optional field such that getSurvivabilityMode will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleSurvivabilityModeEnum& enableSurvivabilityMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& clearSurvivabilityMode() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getLostCommTimeout() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setLostCommTimeout(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field LostCommTimeoutis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLostCommTimeout() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& clearLostCommTimeout() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getLOS() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setLOS(xs::Boolean value) override;

  /** Returns whether this optional field LOSis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLOS() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& clearLOS() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleLossOfLinkProcessingEnum& getLossOfLinkProcessing_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VehicleLossOfLinkProcessingEnum& getLossOfLinkProcessing() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleLossOfLinkProcessingEnum& getLossOfLinkProcessing() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setLossOfLinkProcessing(const uci::type::VehicleLossOfLinkProcessingEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setLossOfLinkProcessing(uci::type::VehicleLossOfLinkProcessingEnum::EnumerationItem value) override;

  /** Returns whether this optional field LossOfLinkProcessingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLossOfLinkProcessing() const noexcept override;

  /** Enables the optional field such that getLossOfLinkProcessing will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleLossOfLinkProcessingEnum& enableLossOfLinkProcessing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& clearLossOfLinkProcessing() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommAllocationActionType& getCommAllocationAction_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommAllocationActionType& getCommAllocationAction() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommAllocationActionType& getCommAllocationAction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& setCommAllocationAction(const uci::type::CommAllocationActionType& accessor) override;

  /** Returns whether this optional field CommAllocationActionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCommAllocationAction() const noexcept override;

  /** Enables the optional field such that getCommAllocationAction will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommAllocationActionType& enableCommAllocationAction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VehicleCommandDataType& clearCommAllocationAction() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<VehicleCommandDataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::VehicleCommandDataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::VehicleCommandDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<VehicleActionEnum> vehicleAction_Accessor;
  std::unique_ptr<IFF_Type> iFF_Settings_Accessor;
  std::unique_ptr<VehicleSurvivabilityModeEnum> survivabilityMode_Accessor;
  boost::optional<DurationTypeValue> lostCommTimeout_Accessor;
  boost::optional<asb_xs::Boolean> lOS_Accessor;
  std::unique_ptr<VehicleLossOfLinkProcessingEnum> lossOfLinkProcessing_Accessor;
  std::unique_ptr<CommAllocationActionType> commAllocationAction_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_VEHICLECOMMANDDATATYPE_H
