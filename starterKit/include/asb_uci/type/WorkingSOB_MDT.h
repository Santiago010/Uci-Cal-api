/** @file WorkingSOB_MDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_WORKINGSOB_MDT_H
#define ASB_UCI_TYPE_WORKINGSOB_MDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WorkingSOB_MDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class OrbitRegimeType;
class OrderOfBattleTimestampsType;
class SOB_C2_RecordType;
class SOB_SatelliteRecordType;
class WorkingSOB_ID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class WorkingSOB_MDT : public virtual uci::type::WorkingSOB_MDT, public virtual DataRecordBaseType {
public:
  /** Indicates the orbit regime which the satellites corresponding to the sibling elements reside in. List size is based
    * on the number of enum values ("Select All That Apply") in OrbitRegimeEnum type. If multiple instances are given, each
    * should be of a different OrbitRegimeEnum type as indicated by the child element. [Occurrences: Minimum: 0; Maximum:
    * 11]
    */
  using Orbit = asb_uci::base::BoundedList<uci::type::OrbitRegimeType, uci::type::accessorType::orbitRegimeType, asb_uci::type::OrbitRegimeType>;

  /** Indicates a subset of satellite records from the catalog. This subset could include updates to the records that a
    * planning service would need. This record describes the characteristics of a particular satellite. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  using SatelliteRecord = asb_uci::base::BoundedList<uci::type::SOB_SatelliteRecordType, uci::type::accessorType::sOB_SatelliteRecordType, asb_uci::type::SOB_SatelliteRecordType>;

  /** Indicates the attributes of the C2 node associated with the satellite or satellites. An example of a C2 node would be
    * a ground station for the satellite or satellites. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using C2_Record = asb_uci::base::BoundedList<uci::type::SOB_C2_RecordType, uci::type::accessorType::sOB_C2_RecordType, asb_uci::type::SOB_C2_RecordType>;

  /** The constructor */
  WorkingSOB_MDT();

  /** The copy constructor
    *
    * @param rhs The WorkingSOB_MDT to copy from
    */
  WorkingSOB_MDT(const WorkingSOB_MDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The WorkingSOB_MDT to move from
    */
  WorkingSOB_MDT(WorkingSOB_MDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The WorkingSOB_MDT to copy from
    * @return The WorkingSOB_MDT that was assigned
    */
  WorkingSOB_MDT& operator=(const WorkingSOB_MDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The WorkingSOB_MDT to move from
    * @return The WorkingSOB_MDT that was assigned
    */
  WorkingSOB_MDT& operator=(WorkingSOB_MDT&& rhs) = delete;

  /** The destructor */
  ~WorkingSOB_MDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::WorkingSOB_MDT whose contents are to be used to set this uci::type::WorkingSOB_MDT's
    *      contents.
    */
  void copy(const uci::type::WorkingSOB_MDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::WorkingSOB_MDT whose contents are to be used to set this uci::type::WorkingSOB_MDT's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::WorkingSOB_MDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the WorkingSOB_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the WorkingSOB_ID field.
    */
  const uci::type::WorkingSOB_ID_Type& getWorkingSOB_ID() const override;

  /** Returns the accessor to the WorkingSOB_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the WorkingSOB_ID field.
    */
  uci::type::WorkingSOB_ID_Type& getWorkingSOB_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WorkingSOB_MDT& setWorkingSOB_ID(const uci::type::WorkingSOB_ID_Type& accessor) override;

  /** Returns the accessor to the Orbit field contained in this message fragment
    *
    * @return The const reference to the accessor to the Orbit field.
    */
  const uci::type::WorkingSOB_MDT::Orbit& getOrbit() const override;

  /** Returns the accessor to the Orbit field contained in this message fragment
    *
    * @return The reference to the accessor to the Orbit field.
    */
  uci::type::WorkingSOB_MDT::Orbit& getOrbit() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WorkingSOB_MDT& setOrbit(const uci::type::WorkingSOB_MDT::Orbit& accessor) override;

  /** Returns the accessor to the Timestamps field contained in this message fragment
    *
    * @return The const reference to the accessor to the Timestamps field.
    */
  const uci::type::OrderOfBattleTimestampsType& getTimestamps() const override;

  /** Returns the accessor to the Timestamps field contained in this message fragment
    *
    * @return The reference to the accessor to the Timestamps field.
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WorkingSOB_MDT& setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) override;

  /** Returns the accessor to the SatelliteRecord field contained in this message fragment
    *
    * @return The const reference to the accessor to the SatelliteRecord field.
    */
  const uci::type::WorkingSOB_MDT::SatelliteRecord& getSatelliteRecord() const override;

  /** Returns the accessor to the SatelliteRecord field contained in this message fragment
    *
    * @return The reference to the accessor to the SatelliteRecord field.
    */
  uci::type::WorkingSOB_MDT::SatelliteRecord& getSatelliteRecord() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WorkingSOB_MDT& setSatelliteRecord(const uci::type::WorkingSOB_MDT::SatelliteRecord& accessor) override;

  /** Returns the accessor to the C2_Record field contained in this message fragment
    *
    * @return The const reference to the accessor to the C2_Record field.
    */
  const uci::type::WorkingSOB_MDT::C2_Record& getC2_Record() const override;

  /** Returns the accessor to the C2_Record field contained in this message fragment
    *
    * @return The reference to the accessor to the C2_Record field.
    */
  uci::type::WorkingSOB_MDT::C2_Record& getC2_Record() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WorkingSOB_MDT& setC2_Record(const uci::type::WorkingSOB_MDT::C2_Record& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<WorkingSOB_MDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::WorkingSOB_MDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::WorkingSOB_MDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<WorkingSOB_ID_Type> workingSOB_ID_Accessor;
  std::unique_ptr<Orbit> orbit_Accessor;
  std::unique_ptr<OrderOfBattleTimestampsType> timestamps_Accessor;
  std::unique_ptr<SatelliteRecord> satelliteRecord_Accessor;
  std::unique_ptr<C2_Record> c2_Record_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_WORKINGSOB_MDT_H
