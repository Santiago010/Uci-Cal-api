/** @file CivilPathTerminatorType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CIVILPATHTERMINATORTYPE_H
#define ASB_UCI_TYPE_CIVILPATHTERMINATORTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/EmptyType.h"
#include "uci/base/Accessor.h"
#include "uci/type/CivilPathTerminatorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CF_CourseToFixType;
class RF_RadiusToFixType;

/** Used to specify the choice Civil Path Terminator Type associated with the End Point, to include its specific
  * parameters needed.
  */
class CivilPathTerminatorType : public virtual uci::type::CivilPathTerminatorType {
public:
  /** The constructor */
  CivilPathTerminatorType();

  /** The copy constructor
    *
    * @param rhs The CivilPathTerminatorType to copy from
    */
  CivilPathTerminatorType(const CivilPathTerminatorType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CivilPathTerminatorType to move from
    */
  CivilPathTerminatorType(CivilPathTerminatorType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The CivilPathTerminatorType to copy from
    * @return The CivilPathTerminatorType that was assigned
    */
  CivilPathTerminatorType& operator=(const CivilPathTerminatorType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CivilPathTerminatorType to move from
    * @return The CivilPathTerminatorType that was assigned
    */
  CivilPathTerminatorType& operator=(CivilPathTerminatorType&& rhs) = delete;

  /** The destructor */
  virtual ~CivilPathTerminatorType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CivilPathTerminatorType whose contents are to be used to set this
    *      uci::type::CivilPathTerminatorType's contents.
    */
  void copy(const uci::type::CivilPathTerminatorType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CivilPathTerminatorType whose contents are to be used to set this
    *      uci::type::CivilPathTerminatorType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CivilPathTerminatorType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::CivilPathTerminatorType::CivilPathTerminatorTypeChoice getCivilPathTerminatorTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getCivilPathTerminatorTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCivilPathTerminatorTypeChoiceOrdinal(uci::type::CivilPathTerminatorType::CivilPathTerminatorTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getAF_ArcToFix_() const;

  /** Returns the contents of the message's AF_ArcToFix item
    *
    * @return The contents of the AF_ArcToFix field
    */
  const uci::type::EmptyType& getAF_ArcToFix() const override;

  /** Returns the contents of the message's AF_ArcToFix item
    *
    * @return The contents of the AF_ArcToFix field
    */
  uci::type::EmptyType& getAF_ArcToFix() override;

  /** Sets this choice's choice to be AF_ArcToFix and initializes AF_ArcToFix to be the specified value
    *
    * @param value The new value to set AF_ArcToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setAF_ArcToFix(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be AF_ArcToFix and initializes AF_ArcToFix to be the specified value
    *
    * @param value The new value to set AF_ArcToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setAF_ArcToFix(const std::string& value) override;

  /** Sets this choice's choice to be AF_ArcToFix and initializes AF_ArcToFix to be the specified value
    *
    * @param value The new value to set AF_ArcToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setAF_ArcToFix(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AF_ArcToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AF_ArcToFix, false otherwise.
    */
  bool isAF_ArcToFix() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AF_ArcToFix.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AF_ArcToFix.
    */
  uci::type::EmptyType& chooseAF_ArcToFix(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AF_ArcToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AF_ArcToFix.
    */
  uci::type::EmptyType& chooseAF_ArcToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getCA_CourseToAltitude_() const;

  /** Returns the contents of the message's CA_CourseToAltitude item
    *
    * @return The contents of the CA_CourseToAltitude field
    */
  const uci::type::EmptyType& getCA_CourseToAltitude() const override;

  /** Returns the contents of the message's CA_CourseToAltitude item
    *
    * @return The contents of the CA_CourseToAltitude field
    */
  uci::type::EmptyType& getCA_CourseToAltitude() override;

  /** Sets this choice's choice to be CA_CourseToAltitude and initializes CA_CourseToAltitude to be the specified value
    *
    * @param value The new value to set CA_CourseToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCA_CourseToAltitude(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be CA_CourseToAltitude and initializes CA_CourseToAltitude to be the specified value
    *
    * @param value The new value to set CA_CourseToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCA_CourseToAltitude(const std::string& value) override;

  /** Sets this choice's choice to be CA_CourseToAltitude and initializes CA_CourseToAltitude to be the specified value
    *
    * @param value The new value to set CA_CourseToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCA_CourseToAltitude(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CA_CourseToAltitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CA_CourseToAltitude, false
    *      otherwise.
    */
  bool isCA_CourseToAltitude() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CA_CourseToAltitude.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CA_CourseToAltitude.
    */
  uci::type::EmptyType& chooseCA_CourseToAltitude(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CA_CourseToAltitude.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CA_CourseToAltitude.
    */
  uci::type::EmptyType& chooseCA_CourseToAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getCD_CourseToDMEDistance_() const;

  /** Returns the contents of the message's CD_CourseToDMEDistance item
    *
    * @return The contents of the CD_CourseToDMEDistance field
    */
  const uci::type::EmptyType& getCD_CourseToDMEDistance() const override;

  /** Returns the contents of the message's CD_CourseToDMEDistance item
    *
    * @return The contents of the CD_CourseToDMEDistance field
    */
  uci::type::EmptyType& getCD_CourseToDMEDistance() override;

  /** Sets this choice's choice to be CD_CourseToDMEDistance and initializes CD_CourseToDMEDistance to be the specified
    * value
    *
    * @param value The new value to set CD_CourseToDMEDistance to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCD_CourseToDMEDistance(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be CD_CourseToDMEDistance and initializes CD_CourseToDMEDistance to be the specified
    * value
    *
    * @param value The new value to set CD_CourseToDMEDistance to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCD_CourseToDMEDistance(const std::string& value) override;

  /** Sets this choice's choice to be CD_CourseToDMEDistance and initializes CD_CourseToDMEDistance to be the specified
    * value
    *
    * @param value The new value to set CD_CourseToDMEDistance to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCD_CourseToDMEDistance(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CD_CourseToDMEDistance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CD_CourseToDMEDistance, false
    *      otherwise.
    */
  bool isCD_CourseToDMEDistance() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CD_CourseToDMEDistance.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CD_CourseToDMEDistance.
    */
  uci::type::EmptyType& chooseCD_CourseToDMEDistance(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CD_CourseToDMEDistance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CD_CourseToDMEDistance.
    */
  uci::type::EmptyType& chooseCD_CourseToDMEDistance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CF_CourseToFix field contained in this message fragment
    *
    * @return The const reference to the accessor to the CF_CourseToFix field.
    */
  uci::type::CF_CourseToFixType& getCF_CourseToFix_() const;

  /** Returns the accessor to the CF_CourseToFix field contained in this message fragment
    *
    * @return The reference to the accessor to the CF_CourseToFix field.
    */
  const uci::type::CF_CourseToFixType& getCF_CourseToFix() const override;

  /** Returns the accessor to the CF_CourseToFix field contained in this message fragment
    *
    * @return The reference to the accessor to the CF_CourseToFix field.
    */
  uci::type::CF_CourseToFixType& getCF_CourseToFix() override;

  /** Sets this choice's choice to be cF_CourseToFix and initializes cF_CourseToFix to be the specified value. A deep copy
    * will be used by this method to set cF_CourseToFix
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCF_CourseToFix(const uci::type::CF_CourseToFixType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CF_CourseToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CF_CourseToFix, false otherwise.
    */
  bool isCF_CourseToFix() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CF_CourseToFix.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CF_CourseToFix.
    */
  uci::type::CF_CourseToFixType& chooseCF_CourseToFix(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CF_CourseToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CF_CourseToFix.
    */
  uci::type::CF_CourseToFixType& chooseCF_CourseToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getCI_CourseToIntercept_() const;

  /** Returns the contents of the message's CI_CourseToIntercept item
    *
    * @return The contents of the CI_CourseToIntercept field
    */
  const uci::type::EmptyType& getCI_CourseToIntercept() const override;

  /** Returns the contents of the message's CI_CourseToIntercept item
    *
    * @return The contents of the CI_CourseToIntercept field
    */
  uci::type::EmptyType& getCI_CourseToIntercept() override;

  /** Sets this choice's choice to be CI_CourseToIntercept and initializes CI_CourseToIntercept to be the specified value
    *
    * @param value The new value to set CI_CourseToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCI_CourseToIntercept(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be CI_CourseToIntercept and initializes CI_CourseToIntercept to be the specified value
    *
    * @param value The new value to set CI_CourseToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCI_CourseToIntercept(const std::string& value) override;

  /** Sets this choice's choice to be CI_CourseToIntercept and initializes CI_CourseToIntercept to be the specified value
    *
    * @param value The new value to set CI_CourseToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCI_CourseToIntercept(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CI_CourseToIntercept.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CI_CourseToIntercept, false
    *      otherwise.
    */
  bool isCI_CourseToIntercept() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CI_CourseToIntercept.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CI_CourseToIntercept.
    */
  uci::type::EmptyType& chooseCI_CourseToIntercept(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CI_CourseToIntercept.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CI_CourseToIntercept.
    */
  uci::type::EmptyType& chooseCI_CourseToIntercept(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getCR_CourseToRadial_() const;

  /** Returns the contents of the message's CR_CourseToRadial item
    *
    * @return The contents of the CR_CourseToRadial field
    */
  const uci::type::EmptyType& getCR_CourseToRadial() const override;

  /** Returns the contents of the message's CR_CourseToRadial item
    *
    * @return The contents of the CR_CourseToRadial field
    */
  uci::type::EmptyType& getCR_CourseToRadial() override;

  /** Sets this choice's choice to be CR_CourseToRadial and initializes CR_CourseToRadial to be the specified value
    *
    * @param value The new value to set CR_CourseToRadial to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCR_CourseToRadial(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be CR_CourseToRadial and initializes CR_CourseToRadial to be the specified value
    *
    * @param value The new value to set CR_CourseToRadial to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCR_CourseToRadial(const std::string& value) override;

  /** Sets this choice's choice to be CR_CourseToRadial and initializes CR_CourseToRadial to be the specified value
    *
    * @param value The new value to set CR_CourseToRadial to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setCR_CourseToRadial(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CR_CourseToRadial.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CR_CourseToRadial, false
    *      otherwise.
    */
  bool isCR_CourseToRadial() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CR_CourseToRadial.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CR_CourseToRadial.
    */
  uci::type::EmptyType& chooseCR_CourseToRadial(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CR_CourseToRadial.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CR_CourseToRadial.
    */
  uci::type::EmptyType& chooseCR_CourseToRadial(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getDF_DirectToFix_() const;

  /** Returns the contents of the message's DF_DirectToFix item
    *
    * @return The contents of the DF_DirectToFix field
    */
  const uci::type::EmptyType& getDF_DirectToFix() const override;

  /** Returns the contents of the message's DF_DirectToFix item
    *
    * @return The contents of the DF_DirectToFix field
    */
  uci::type::EmptyType& getDF_DirectToFix() override;

  /** Sets this choice's choice to be DF_DirectToFix and initializes DF_DirectToFix to be the specified value
    *
    * @param value The new value to set DF_DirectToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setDF_DirectToFix(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be DF_DirectToFix and initializes DF_DirectToFix to be the specified value
    *
    * @param value The new value to set DF_DirectToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setDF_DirectToFix(const std::string& value) override;

  /** Sets this choice's choice to be DF_DirectToFix and initializes DF_DirectToFix to be the specified value
    *
    * @param value The new value to set DF_DirectToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setDF_DirectToFix(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DF_DirectToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DF_DirectToFix, false otherwise.
    */
  bool isDF_DirectToFix() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by DF_DirectToFix.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DF_DirectToFix.
    */
  uci::type::EmptyType& chooseDF_DirectToFix(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by DF_DirectToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DF_DirectToFix.
    */
  uci::type::EmptyType& chooseDF_DirectToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getFA_TrackToAltitude_() const;

  /** Returns the contents of the message's FA_TrackToAltitude item
    *
    * @return The contents of the FA_TrackToAltitude field
    */
  const uci::type::EmptyType& getFA_TrackToAltitude() const override;

  /** Returns the contents of the message's FA_TrackToAltitude item
    *
    * @return The contents of the FA_TrackToAltitude field
    */
  uci::type::EmptyType& getFA_TrackToAltitude() override;

  /** Sets this choice's choice to be FA_TrackToAltitude and initializes FA_TrackToAltitude to be the specified value
    *
    * @param value The new value to set FA_TrackToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFA_TrackToAltitude(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be FA_TrackToAltitude and initializes FA_TrackToAltitude to be the specified value
    *
    * @param value The new value to set FA_TrackToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFA_TrackToAltitude(const std::string& value) override;

  /** Sets this choice's choice to be FA_TrackToAltitude and initializes FA_TrackToAltitude to be the specified value
    *
    * @param value The new value to set FA_TrackToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFA_TrackToAltitude(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FA_TrackToAltitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FA_TrackToAltitude, false
    *      otherwise.
    */
  bool isFA_TrackToAltitude() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FA_TrackToAltitude.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FA_TrackToAltitude.
    */
  uci::type::EmptyType& chooseFA_TrackToAltitude(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FA_TrackToAltitude.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FA_TrackToAltitude.
    */
  uci::type::EmptyType& chooseFA_TrackToAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getFC_TrackFromFixToDistanceAlongTrack_() const;

  /** Returns the contents of the message's FC_TrackFromFixToDistanceAlongTrack item
    *
    * @return The contents of the FC_TrackFromFixToDistanceAlongTrack field
    */
  const uci::type::EmptyType& getFC_TrackFromFixToDistanceAlongTrack() const override;

  /** Returns the contents of the message's FC_TrackFromFixToDistanceAlongTrack item
    *
    * @return The contents of the FC_TrackFromFixToDistanceAlongTrack field
    */
  uci::type::EmptyType& getFC_TrackFromFixToDistanceAlongTrack() override;

  /** Sets this choice's choice to be FC_TrackFromFixToDistanceAlongTrack and initializes
    * FC_TrackFromFixToDistanceAlongTrack to be the specified value
    *
    * @param value The new value to set FC_TrackFromFixToDistanceAlongTrack to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFC_TrackFromFixToDistanceAlongTrack(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be FC_TrackFromFixToDistanceAlongTrack and initializes
    * FC_TrackFromFixToDistanceAlongTrack to be the specified value
    *
    * @param value The new value to set FC_TrackFromFixToDistanceAlongTrack to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFC_TrackFromFixToDistanceAlongTrack(const std::string& value) override;

  /** Sets this choice's choice to be FC_TrackFromFixToDistanceAlongTrack and initializes
    * FC_TrackFromFixToDistanceAlongTrack to be the specified value
    *
    * @param value The new value to set FC_TrackFromFixToDistanceAlongTrack to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFC_TrackFromFixToDistanceAlongTrack(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by
    * FC_TrackFromFixToDistanceAlongTrack.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by
    *      FC_TrackFromFixToDistanceAlongTrack, false otherwise.
    */
  bool isFC_TrackFromFixToDistanceAlongTrack() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FC_TrackFromFixToDistanceAlongTrack.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by
    *      FC_TrackFromFixToDistanceAlongTrack.
    */
  uci::type::EmptyType& chooseFC_TrackFromFixToDistanceAlongTrack(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FC_TrackFromFixToDistanceAlongTrack.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by
    *      FC_TrackFromFixToDistanceAlongTrack.
    */
  uci::type::EmptyType& chooseFC_TrackFromFixToDistanceAlongTrack(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getFD_TrackFromFixToDMEDistance_() const;

  /** Returns the contents of the message's FD_TrackFromFixToDMEDistance item
    *
    * @return The contents of the FD_TrackFromFixToDMEDistance field
    */
  const uci::type::EmptyType& getFD_TrackFromFixToDMEDistance() const override;

  /** Returns the contents of the message's FD_TrackFromFixToDMEDistance item
    *
    * @return The contents of the FD_TrackFromFixToDMEDistance field
    */
  uci::type::EmptyType& getFD_TrackFromFixToDMEDistance() override;

  /** Sets this choice's choice to be FD_TrackFromFixToDMEDistance and initializes FD_TrackFromFixToDMEDistance to be the
    * specified value
    *
    * @param value The new value to set FD_TrackFromFixToDMEDistance to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFD_TrackFromFixToDMEDistance(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be FD_TrackFromFixToDMEDistance and initializes FD_TrackFromFixToDMEDistance to be the
    * specified value
    *
    * @param value The new value to set FD_TrackFromFixToDMEDistance to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFD_TrackFromFixToDMEDistance(const std::string& value) override;

  /** Sets this choice's choice to be FD_TrackFromFixToDMEDistance and initializes FD_TrackFromFixToDMEDistance to be the
    * specified value
    *
    * @param value The new value to set FD_TrackFromFixToDMEDistance to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFD_TrackFromFixToDMEDistance(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FD_TrackFromFixToDMEDistance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FD_TrackFromFixToDMEDistance,
    *      false otherwise.
    */
  bool isFD_TrackFromFixToDMEDistance() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FD_TrackFromFixToDMEDistance.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FD_TrackFromFixToDMEDistance.
    */
  uci::type::EmptyType& chooseFD_TrackFromFixToDMEDistance(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FD_TrackFromFixToDMEDistance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FD_TrackFromFixToDMEDistance.
    */
  uci::type::EmptyType& chooseFD_TrackFromFixToDMEDistance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getFM_FixToManualTermination_() const;

  /** Returns the contents of the message's FM_FixToManualTermination item
    *
    * @return The contents of the FM_FixToManualTermination field
    */
  const uci::type::EmptyType& getFM_FixToManualTermination() const override;

  /** Returns the contents of the message's FM_FixToManualTermination item
    *
    * @return The contents of the FM_FixToManualTermination field
    */
  uci::type::EmptyType& getFM_FixToManualTermination() override;

  /** Sets this choice's choice to be FM_FixToManualTermination and initializes FM_FixToManualTermination to be the
    * specified value
    *
    * @param value The new value to set FM_FixToManualTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFM_FixToManualTermination(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be FM_FixToManualTermination and initializes FM_FixToManualTermination to be the
    * specified value
    *
    * @param value The new value to set FM_FixToManualTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFM_FixToManualTermination(const std::string& value) override;

  /** Sets this choice's choice to be FM_FixToManualTermination and initializes FM_FixToManualTermination to be the
    * specified value
    *
    * @param value The new value to set FM_FixToManualTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setFM_FixToManualTermination(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FM_FixToManualTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FM_FixToManualTermination, false
    *      otherwise.
    */
  bool isFM_FixToManualTermination() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FM_FixToManualTermination.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FM_FixToManualTermination.
    */
  uci::type::EmptyType& chooseFM_FixToManualTermination(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FM_FixToManualTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FM_FixToManualTermination.
    */
  uci::type::EmptyType& chooseFM_FixToManualTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getHA_HoldingWithAltitudeTermination_() const;

  /** Returns the contents of the message's HA_HoldingWithAltitudeTermination item
    *
    * @return The contents of the HA_HoldingWithAltitudeTermination field
    */
  const uci::type::EmptyType& getHA_HoldingWithAltitudeTermination() const override;

  /** Returns the contents of the message's HA_HoldingWithAltitudeTermination item
    *
    * @return The contents of the HA_HoldingWithAltitudeTermination field
    */
  uci::type::EmptyType& getHA_HoldingWithAltitudeTermination() override;

  /** Sets this choice's choice to be HA_HoldingWithAltitudeTermination and initializes HA_HoldingWithAltitudeTermination
    * to be the specified value
    *
    * @param value The new value to set HA_HoldingWithAltitudeTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHA_HoldingWithAltitudeTermination(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be HA_HoldingWithAltitudeTermination and initializes HA_HoldingWithAltitudeTermination
    * to be the specified value
    *
    * @param value The new value to set HA_HoldingWithAltitudeTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHA_HoldingWithAltitudeTermination(const std::string& value) override;

  /** Sets this choice's choice to be HA_HoldingWithAltitudeTermination and initializes HA_HoldingWithAltitudeTermination
    * to be the specified value
    *
    * @param value The new value to set HA_HoldingWithAltitudeTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHA_HoldingWithAltitudeTermination(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by
    * HA_HoldingWithAltitudeTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by
    *      HA_HoldingWithAltitudeTermination, false otherwise.
    */
  bool isHA_HoldingWithAltitudeTermination() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by HA_HoldingWithAltitudeTermination.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by
    *      HA_HoldingWithAltitudeTermination.
    */
  uci::type::EmptyType& chooseHA_HoldingWithAltitudeTermination(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by HA_HoldingWithAltitudeTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by
    *      HA_HoldingWithAltitudeTermination.
    */
  uci::type::EmptyType& chooseHA_HoldingWithAltitudeTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getHF_HoldingWithFixTermination_() const;

  /** Returns the contents of the message's HF_HoldingWithFixTermination item
    *
    * @return The contents of the HF_HoldingWithFixTermination field
    */
  const uci::type::EmptyType& getHF_HoldingWithFixTermination() const override;

  /** Returns the contents of the message's HF_HoldingWithFixTermination item
    *
    * @return The contents of the HF_HoldingWithFixTermination field
    */
  uci::type::EmptyType& getHF_HoldingWithFixTermination() override;

  /** Sets this choice's choice to be HF_HoldingWithFixTermination and initializes HF_HoldingWithFixTermination to be the
    * specified value
    *
    * @param value The new value to set HF_HoldingWithFixTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHF_HoldingWithFixTermination(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be HF_HoldingWithFixTermination and initializes HF_HoldingWithFixTermination to be the
    * specified value
    *
    * @param value The new value to set HF_HoldingWithFixTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHF_HoldingWithFixTermination(const std::string& value) override;

  /** Sets this choice's choice to be HF_HoldingWithFixTermination and initializes HF_HoldingWithFixTermination to be the
    * specified value
    *
    * @param value The new value to set HF_HoldingWithFixTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHF_HoldingWithFixTermination(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by HF_HoldingWithFixTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by HF_HoldingWithFixTermination,
    *      false otherwise.
    */
  bool isHF_HoldingWithFixTermination() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by HF_HoldingWithFixTermination.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by HF_HoldingWithFixTermination.
    */
  uci::type::EmptyType& chooseHF_HoldingWithFixTermination(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by HF_HoldingWithFixTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by HF_HoldingWithFixTermination.
    */
  uci::type::EmptyType& chooseHF_HoldingWithFixTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getHM_HoldingWithManualTermination_() const;

  /** Returns the contents of the message's HM_HoldingWithManualTermination item
    *
    * @return The contents of the HM_HoldingWithManualTermination field
    */
  const uci::type::EmptyType& getHM_HoldingWithManualTermination() const override;

  /** Returns the contents of the message's HM_HoldingWithManualTermination item
    *
    * @return The contents of the HM_HoldingWithManualTermination field
    */
  uci::type::EmptyType& getHM_HoldingWithManualTermination() override;

  /** Sets this choice's choice to be HM_HoldingWithManualTermination and initializes HM_HoldingWithManualTermination to be
    * the specified value
    *
    * @param value The new value to set HM_HoldingWithManualTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHM_HoldingWithManualTermination(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be HM_HoldingWithManualTermination and initializes HM_HoldingWithManualTermination to be
    * the specified value
    *
    * @param value The new value to set HM_HoldingWithManualTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHM_HoldingWithManualTermination(const std::string& value) override;

  /** Sets this choice's choice to be HM_HoldingWithManualTermination and initializes HM_HoldingWithManualTermination to be
    * the specified value
    *
    * @param value The new value to set HM_HoldingWithManualTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setHM_HoldingWithManualTermination(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by HM_HoldingWithManualTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by HM_HoldingWithManualTermination,
    *      false otherwise.
    */
  bool isHM_HoldingWithManualTermination() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by HM_HoldingWithManualTermination.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by HM_HoldingWithManualTermination.
    */
  uci::type::EmptyType& chooseHM_HoldingWithManualTermination(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by HM_HoldingWithManualTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by HM_HoldingWithManualTermination.
    */
  uci::type::EmptyType& chooseHM_HoldingWithManualTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getIF_InitialFix_() const;

  /** Returns the contents of the message's IF_InitialFix item
    *
    * @return The contents of the IF_InitialFix field
    */
  const uci::type::EmptyType& getIF_InitialFix() const override;

  /** Returns the contents of the message's IF_InitialFix item
    *
    * @return The contents of the IF_InitialFix field
    */
  uci::type::EmptyType& getIF_InitialFix() override;

  /** Sets this choice's choice to be IF_InitialFix and initializes IF_InitialFix to be the specified value
    *
    * @param value The new value to set IF_InitialFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setIF_InitialFix(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be IF_InitialFix and initializes IF_InitialFix to be the specified value
    *
    * @param value The new value to set IF_InitialFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setIF_InitialFix(const std::string& value) override;

  /** Sets this choice's choice to be IF_InitialFix and initializes IF_InitialFix to be the specified value
    *
    * @param value The new value to set IF_InitialFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setIF_InitialFix(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by IF_InitialFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by IF_InitialFix, false otherwise.
    */
  bool isIF_InitialFix() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by IF_InitialFix.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by IF_InitialFix.
    */
  uci::type::EmptyType& chooseIF_InitialFix(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by IF_InitialFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by IF_InitialFix.
    */
  uci::type::EmptyType& chooseIF_InitialFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getPI_ProcedureTurnToIntercept_() const;

  /** Returns the contents of the message's PI_ProcedureTurnToIntercept item
    *
    * @return The contents of the PI_ProcedureTurnToIntercept field
    */
  const uci::type::EmptyType& getPI_ProcedureTurnToIntercept() const override;

  /** Returns the contents of the message's PI_ProcedureTurnToIntercept item
    *
    * @return The contents of the PI_ProcedureTurnToIntercept field
    */
  uci::type::EmptyType& getPI_ProcedureTurnToIntercept() override;

  /** Sets this choice's choice to be PI_ProcedureTurnToIntercept and initializes PI_ProcedureTurnToIntercept to be the
    * specified value
    *
    * @param value The new value to set PI_ProcedureTurnToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setPI_ProcedureTurnToIntercept(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be PI_ProcedureTurnToIntercept and initializes PI_ProcedureTurnToIntercept to be the
    * specified value
    *
    * @param value The new value to set PI_ProcedureTurnToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setPI_ProcedureTurnToIntercept(const std::string& value) override;

  /** Sets this choice's choice to be PI_ProcedureTurnToIntercept and initializes PI_ProcedureTurnToIntercept to be the
    * specified value
    *
    * @param value The new value to set PI_ProcedureTurnToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setPI_ProcedureTurnToIntercept(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PI_ProcedureTurnToIntercept.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PI_ProcedureTurnToIntercept,
    *      false otherwise.
    */
  bool isPI_ProcedureTurnToIntercept() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by PI_ProcedureTurnToIntercept.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PI_ProcedureTurnToIntercept.
    */
  uci::type::EmptyType& choosePI_ProcedureTurnToIntercept(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by PI_ProcedureTurnToIntercept.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PI_ProcedureTurnToIntercept.
    */
  uci::type::EmptyType& choosePI_ProcedureTurnToIntercept(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RF_RadiusToFix field contained in this message fragment
    *
    * @return The const reference to the accessor to the RF_RadiusToFix field.
    */
  uci::type::RF_RadiusToFixType& getRF_RadiusToFix_() const;

  /** Returns the accessor to the RF_RadiusToFix field contained in this message fragment
    *
    * @return The reference to the accessor to the RF_RadiusToFix field.
    */
  const uci::type::RF_RadiusToFixType& getRF_RadiusToFix() const override;

  /** Returns the accessor to the RF_RadiusToFix field contained in this message fragment
    *
    * @return The reference to the accessor to the RF_RadiusToFix field.
    */
  uci::type::RF_RadiusToFixType& getRF_RadiusToFix() override;

  /** Sets this choice's choice to be rF_RadiusToFix and initializes rF_RadiusToFix to be the specified value. A deep copy
    * will be used by this method to set rF_RadiusToFix
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setRF_RadiusToFix(const uci::type::RF_RadiusToFixType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RF_RadiusToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RF_RadiusToFix, false otherwise.
    */
  bool isRF_RadiusToFix() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RF_RadiusToFix.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RF_RadiusToFix.
    */
  uci::type::RF_RadiusToFixType& chooseRF_RadiusToFix(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RF_RadiusToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RF_RadiusToFix.
    */
  uci::type::RF_RadiusToFixType& chooseRF_RadiusToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getTF_TrackToFix_() const;

  /** Returns the contents of the message's TF_TrackToFix item
    *
    * @return The contents of the TF_TrackToFix field
    */
  const uci::type::EmptyType& getTF_TrackToFix() const override;

  /** Returns the contents of the message's TF_TrackToFix item
    *
    * @return The contents of the TF_TrackToFix field
    */
  uci::type::EmptyType& getTF_TrackToFix() override;

  /** Sets this choice's choice to be TF_TrackToFix and initializes TF_TrackToFix to be the specified value
    *
    * @param value The new value to set TF_TrackToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setTF_TrackToFix(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be TF_TrackToFix and initializes TF_TrackToFix to be the specified value
    *
    * @param value The new value to set TF_TrackToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setTF_TrackToFix(const std::string& value) override;

  /** Sets this choice's choice to be TF_TrackToFix and initializes TF_TrackToFix to be the specified value
    *
    * @param value The new value to set TF_TrackToFix to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setTF_TrackToFix(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TF_TrackToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TF_TrackToFix, false otherwise.
    */
  bool isTF_TrackToFix() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by TF_TrackToFix.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TF_TrackToFix.
    */
  uci::type::EmptyType& chooseTF_TrackToFix(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by TF_TrackToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TF_TrackToFix.
    */
  uci::type::EmptyType& chooseTF_TrackToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getVA_HeadingToAltitude_() const;

  /** Returns the contents of the message's VA_HeadingToAltitude item
    *
    * @return The contents of the VA_HeadingToAltitude field
    */
  const uci::type::EmptyType& getVA_HeadingToAltitude() const override;

  /** Returns the contents of the message's VA_HeadingToAltitude item
    *
    * @return The contents of the VA_HeadingToAltitude field
    */
  uci::type::EmptyType& getVA_HeadingToAltitude() override;

  /** Sets this choice's choice to be VA_HeadingToAltitude and initializes VA_HeadingToAltitude to be the specified value
    *
    * @param value The new value to set VA_HeadingToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVA_HeadingToAltitude(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be VA_HeadingToAltitude and initializes VA_HeadingToAltitude to be the specified value
    *
    * @param value The new value to set VA_HeadingToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVA_HeadingToAltitude(const std::string& value) override;

  /** Sets this choice's choice to be VA_HeadingToAltitude and initializes VA_HeadingToAltitude to be the specified value
    *
    * @param value The new value to set VA_HeadingToAltitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVA_HeadingToAltitude(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VA_HeadingToAltitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VA_HeadingToAltitude, false
    *      otherwise.
    */
  bool isVA_HeadingToAltitude() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VA_HeadingToAltitude.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VA_HeadingToAltitude.
    */
  uci::type::EmptyType& chooseVA_HeadingToAltitude(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VA_HeadingToAltitude.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VA_HeadingToAltitude.
    */
  uci::type::EmptyType& chooseVA_HeadingToAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getVD_HeadingToDMEDistanceTermination_() const;

  /** Returns the contents of the message's VD_HeadingToDMEDistanceTermination item
    *
    * @return The contents of the VD_HeadingToDMEDistanceTermination field
    */
  const uci::type::EmptyType& getVD_HeadingToDMEDistanceTermination() const override;

  /** Returns the contents of the message's VD_HeadingToDMEDistanceTermination item
    *
    * @return The contents of the VD_HeadingToDMEDistanceTermination field
    */
  uci::type::EmptyType& getVD_HeadingToDMEDistanceTermination() override;

  /** Sets this choice's choice to be VD_HeadingToDMEDistanceTermination and initializes VD_HeadingToDMEDistanceTermination
    * to be the specified value
    *
    * @param value The new value to set VD_HeadingToDMEDistanceTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVD_HeadingToDMEDistanceTermination(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be VD_HeadingToDMEDistanceTermination and initializes VD_HeadingToDMEDistanceTermination
    * to be the specified value
    *
    * @param value The new value to set VD_HeadingToDMEDistanceTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVD_HeadingToDMEDistanceTermination(const std::string& value) override;

  /** Sets this choice's choice to be VD_HeadingToDMEDistanceTermination and initializes VD_HeadingToDMEDistanceTermination
    * to be the specified value
    *
    * @param value The new value to set VD_HeadingToDMEDistanceTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVD_HeadingToDMEDistanceTermination(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by
    * VD_HeadingToDMEDistanceTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by
    *      VD_HeadingToDMEDistanceTermination, false otherwise.
    */
  bool isVD_HeadingToDMEDistanceTermination() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VD_HeadingToDMEDistanceTermination.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by
    *      VD_HeadingToDMEDistanceTermination.
    */
  uci::type::EmptyType& chooseVD_HeadingToDMEDistanceTermination(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VD_HeadingToDMEDistanceTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by
    *      VD_HeadingToDMEDistanceTermination.
    */
  uci::type::EmptyType& chooseVD_HeadingToDMEDistanceTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getVI_HeadingToIntercept_() const;

  /** Returns the contents of the message's VI_HeadingToIntercept item
    *
    * @return The contents of the VI_HeadingToIntercept field
    */
  const uci::type::EmptyType& getVI_HeadingToIntercept() const override;

  /** Returns the contents of the message's VI_HeadingToIntercept item
    *
    * @return The contents of the VI_HeadingToIntercept field
    */
  uci::type::EmptyType& getVI_HeadingToIntercept() override;

  /** Sets this choice's choice to be VI_HeadingToIntercept and initializes VI_HeadingToIntercept to be the specified value
    *
    * @param value The new value to set VI_HeadingToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVI_HeadingToIntercept(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be VI_HeadingToIntercept and initializes VI_HeadingToIntercept to be the specified value
    *
    * @param value The new value to set VI_HeadingToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVI_HeadingToIntercept(const std::string& value) override;

  /** Sets this choice's choice to be VI_HeadingToIntercept and initializes VI_HeadingToIntercept to be the specified value
    *
    * @param value The new value to set VI_HeadingToIntercept to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVI_HeadingToIntercept(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VI_HeadingToIntercept.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VI_HeadingToIntercept, false
    *      otherwise.
    */
  bool isVI_HeadingToIntercept() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VI_HeadingToIntercept.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VI_HeadingToIntercept.
    */
  uci::type::EmptyType& chooseVI_HeadingToIntercept(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VI_HeadingToIntercept.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VI_HeadingToIntercept.
    */
  uci::type::EmptyType& chooseVI_HeadingToIntercept(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getVM_HeadingToManual_() const;

  /** Returns the contents of the message's VM_HeadingToManual item
    *
    * @return The contents of the VM_HeadingToManual field
    */
  const uci::type::EmptyType& getVM_HeadingToManual() const override;

  /** Returns the contents of the message's VM_HeadingToManual item
    *
    * @return The contents of the VM_HeadingToManual field
    */
  uci::type::EmptyType& getVM_HeadingToManual() override;

  /** Sets this choice's choice to be VM_HeadingToManual and initializes VM_HeadingToManual to be the specified value
    *
    * @param value The new value to set VM_HeadingToManual to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVM_HeadingToManual(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be VM_HeadingToManual and initializes VM_HeadingToManual to be the specified value
    *
    * @param value The new value to set VM_HeadingToManual to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVM_HeadingToManual(const std::string& value) override;

  /** Sets this choice's choice to be VM_HeadingToManual and initializes VM_HeadingToManual to be the specified value
    *
    * @param value The new value to set VM_HeadingToManual to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVM_HeadingToManual(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VM_HeadingToManual.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VM_HeadingToManual, false
    *      otherwise.
    */
  bool isVM_HeadingToManual() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VM_HeadingToManual.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VM_HeadingToManual.
    */
  uci::type::EmptyType& chooseVM_HeadingToManual(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VM_HeadingToManual.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VM_HeadingToManual.
    */
  uci::type::EmptyType& chooseVM_HeadingToManual(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getVR_HeadingToRadialTermination_() const;

  /** Returns the contents of the message's VR_HeadingToRadialTermination item
    *
    * @return The contents of the VR_HeadingToRadialTermination field
    */
  const uci::type::EmptyType& getVR_HeadingToRadialTermination() const override;

  /** Returns the contents of the message's VR_HeadingToRadialTermination item
    *
    * @return The contents of the VR_HeadingToRadialTermination field
    */
  uci::type::EmptyType& getVR_HeadingToRadialTermination() override;

  /** Sets this choice's choice to be VR_HeadingToRadialTermination and initializes VR_HeadingToRadialTermination to be the
    * specified value
    *
    * @param value The new value to set VR_HeadingToRadialTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVR_HeadingToRadialTermination(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be VR_HeadingToRadialTermination and initializes VR_HeadingToRadialTermination to be the
    * specified value
    *
    * @param value The new value to set VR_HeadingToRadialTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVR_HeadingToRadialTermination(const std::string& value) override;

  /** Sets this choice's choice to be VR_HeadingToRadialTermination and initializes VR_HeadingToRadialTermination to be the
    * specified value
    *
    * @param value The new value to set VR_HeadingToRadialTermination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CivilPathTerminatorType& setVR_HeadingToRadialTermination(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VR_HeadingToRadialTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VR_HeadingToRadialTermination,
    *      false otherwise.
    */
  bool isVR_HeadingToRadialTermination() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VR_HeadingToRadialTermination.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VR_HeadingToRadialTermination.
    */
  uci::type::EmptyType& chooseVR_HeadingToRadialTermination(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VR_HeadingToRadialTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VR_HeadingToRadialTermination.
    */
  uci::type::EmptyType& chooseVR_HeadingToRadialTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CivilPathTerminatorType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CivilPathTerminatorType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CivilPathTerminatorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EmptyType> aF_ArcToFix_Accessor;
  std::unique_ptr<EmptyType> cA_CourseToAltitude_Accessor;
  std::unique_ptr<EmptyType> cD_CourseToDMEDistance_Accessor;
  std::unique_ptr<CF_CourseToFixType> cF_CourseToFix_Accessor;
  std::unique_ptr<EmptyType> cI_CourseToIntercept_Accessor;
  std::unique_ptr<EmptyType> cR_CourseToRadial_Accessor;
  std::unique_ptr<EmptyType> dF_DirectToFix_Accessor;
  std::unique_ptr<EmptyType> fA_TrackToAltitude_Accessor;
  std::unique_ptr<EmptyType> fC_TrackFromFixToDistanceAlongTrack_Accessor;
  std::unique_ptr<EmptyType> fD_TrackFromFixToDMEDistance_Accessor;
  std::unique_ptr<EmptyType> fM_FixToManualTermination_Accessor;
  std::unique_ptr<EmptyType> hA_HoldingWithAltitudeTermination_Accessor;
  std::unique_ptr<EmptyType> hF_HoldingWithFixTermination_Accessor;
  std::unique_ptr<EmptyType> hM_HoldingWithManualTermination_Accessor;
  std::unique_ptr<EmptyType> iF_InitialFix_Accessor;
  std::unique_ptr<EmptyType> pI_ProcedureTurnToIntercept_Accessor;
  std::unique_ptr<RF_RadiusToFixType> rF_RadiusToFix_Accessor;
  std::unique_ptr<EmptyType> tF_TrackToFix_Accessor;
  std::unique_ptr<EmptyType> vA_HeadingToAltitude_Accessor;
  std::unique_ptr<EmptyType> vD_HeadingToDMEDistanceTermination_Accessor;
  std::unique_ptr<EmptyType> vI_HeadingToIntercept_Accessor;
  std::unique_ptr<EmptyType> vM_HeadingToManual_Accessor;
  std::unique_ptr<EmptyType> vR_HeadingToRadialTermination_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CIVILPATHTERMINATORTYPE_H
