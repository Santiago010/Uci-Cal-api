/** @file OpBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_OPBASETYPE_H
#define ASB_UCI_TYPE_OPBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CreationSourceEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/OpBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class DataLinkIdentifierPET;
class MissionTraceabilityType;
class OpDescriptionType;
class QualifyingTagsType;
class ScheduleType;
class SystemID_Type;
class SystemScheduleStateType;
class TimeFunctionType;

/** The base type containing information common to messages OpLine, OpPoint, and OpZone. */
class OpBaseType : public virtual uci::type::OpBaseType {
public:
  /** Indicates time related events that are associated to the Op data type such as when activated or when operational. The
    * multiplicity is limited to N-1 options where NONE is an event that has no value, thus removed from list of available
    * options. [Occurrences: Minimum: 0; Maximum: 12]
    */
  using AssociatedTime = asb_uci::base::BoundedList<uci::type::TimeFunctionType, uci::type::accessorType::timeFunctionType, asb_uci::type::TimeFunctionType>;

  /** List of data link ID. Multiple data link IDs can be reported for the same network type. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using DataLinkIdentifier = asb_uci::base::BoundedList<uci::type::DataLinkIdentifierPET, uci::type::accessorType::dataLinkIdentifierPET, asb_uci::type::DataLinkIdentifierPET>;

  /** One or more systems to which this item applies. If omitted, item applies to all systems (i.e., Link-16 J3.0 receipt
    * is globally assigned). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SystemID = asb_uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type, asb_uci::type::SystemID_Type>;

  /** System-specific schedule that will override any part of the main schedule. This allows for system-specific schedule
    * different than main schedule. When adding a SystemScheduleOverride, the child SystemID also must be added to the
    * sibling SystemID list if the sibling list is not empty. The SystemScheduleOverride is independent of time planning.
    * For the system, this override can be done at execution. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SystemScheduleOverride = asb_uci::base::BoundedList<uci::type::SystemScheduleStateType, uci::type::accessorType::systemScheduleStateType, asb_uci::type::SystemScheduleStateType>;

  /** The constructor */
  OpBaseType();

  /** The copy constructor
    *
    * @param rhs The OpBaseType to copy from
    */
  OpBaseType(const OpBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OpBaseType to move from
    */
  OpBaseType(OpBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The OpBaseType to copy from
    * @return The OpBaseType that was assigned
    */
  OpBaseType& operator=(const OpBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OpBaseType to move from
    * @return The OpBaseType that was assigned
    */
  OpBaseType& operator=(OpBaseType&& rhs) = delete;

  /** The destructor */
  virtual ~OpBaseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OpBaseType whose contents are to be used to set this uci::type::OpBaseType's contents.
    */
  void copy(const uci::type::OpBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OpBaseType whose contents are to be used to set this uci::type::OpBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OpBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OpDescriptionType& getOpDescription_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OpDescriptionType& getOpDescription() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OpDescriptionType& getOpDescription() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setOpDescription(const uci::type::OpDescriptionType& accessor) override;

  /** Returns whether this optional field OpDescriptionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOpDescription() const noexcept override;

  /** Enables the optional field such that getOpDescription will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OpDescriptionType& enableOpDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& clearOpDescription() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionTraceabilityType& getMissionTraceability_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MissionTraceabilityType& getMissionTraceability() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionTraceabilityType& getMissionTraceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setMissionTraceability(const uci::type::MissionTraceabilityType& accessor) override;

  /** Returns whether this optional field MissionTraceabilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionTraceability() const noexcept override;

  /** Enables the optional field such that getMissionTraceability will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionTraceabilityType& enableMissionTraceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& clearMissionTraceability() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CreationSourceEnum& getSource_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CreationSourceEnum& getSource() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CreationSourceEnum& getSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setSource(const uci::type::CreationSourceEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setSource(uci::type::CreationSourceEnum::EnumerationItem value) override;

  /** Returns whether this optional field Sourceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSource() const noexcept override;

  /** Enables the optional field such that getSource will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CreationSourceEnum& enableSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& clearSource() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& getSchedule_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ScheduleType& getSchedule() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& getSchedule() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setSchedule(const uci::type::ScheduleType& accessor) override;

  /** Returns whether this optional field Scheduleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSchedule() const noexcept override;

  /** Enables the optional field such that getSchedule will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& enableSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& clearSchedule() noexcept override;

  /** Returns the accessor to the AssociatedTime field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedTime field.
    */
  const uci::type::OpBaseType::AssociatedTime& getAssociatedTime() const override;

  /** Returns the accessor to the AssociatedTime field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedTime field.
    */
  uci::type::OpBaseType::AssociatedTime& getAssociatedTime() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setAssociatedTime(const uci::type::OpBaseType::AssociatedTime& accessor) override;

  /** Returns the accessor to the DataLinkIdentifier field contained in this message fragment
    *
    * @return The const reference to the accessor to the DataLinkIdentifier field.
    */
  const uci::type::OpBaseType::DataLinkIdentifier& getDataLinkIdentifier() const override;

  /** Returns the accessor to the DataLinkIdentifier field contained in this message fragment
    *
    * @return The reference to the accessor to the DataLinkIdentifier field.
    */
  uci::type::OpBaseType::DataLinkIdentifier& getDataLinkIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setDataLinkIdentifier(const uci::type::OpBaseType::DataLinkIdentifier& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getPriority() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setPriority(xs::UnsignedInt value) override;

  /** Returns whether this optional field Priorityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPriority() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& clearPriority() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::QualifyingTagsType& getQualifyingTags_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::QualifyingTagsType& getQualifyingTags() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::QualifyingTagsType& getQualifyingTags() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setQualifyingTags(const uci::type::QualifyingTagsType& accessor) override;

  /** Returns whether this optional field QualifyingTagsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasQualifyingTags() const noexcept override;

  /** Enables the optional field such that getQualifyingTags will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::QualifyingTagsType& enableQualifyingTags(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& clearQualifyingTags() noexcept override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemID field.
    */
  const uci::type::OpBaseType::SystemID& getSystemID() const override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemID field.
    */
  uci::type::OpBaseType::SystemID& getSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setSystemID(const uci::type::OpBaseType::SystemID& accessor) override;

  /** Returns the accessor to the SystemScheduleOverride field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemScheduleOverride field.
    */
  const uci::type::OpBaseType::SystemScheduleOverride& getSystemScheduleOverride() const override;

  /** Returns the accessor to the SystemScheduleOverride field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemScheduleOverride field.
    */
  uci::type::OpBaseType::SystemScheduleOverride& getSystemScheduleOverride() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpBaseType& setSystemScheduleOverride(const uci::type::OpBaseType::SystemScheduleOverride& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OpBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OpBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OpBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<OpDescriptionType> opDescription_Accessor;
  std::unique_ptr<MissionTraceabilityType> missionTraceability_Accessor;
  std::unique_ptr<CreationSourceEnum> source_Accessor;
  std::unique_ptr<ScheduleType> schedule_Accessor;
  std::unique_ptr<AssociatedTime> associatedTime_Accessor;
  std::unique_ptr<DataLinkIdentifier> dataLinkIdentifier_Accessor;
  boost::optional<asb_xs::UnsignedInt> priority_Accessor;
  std::unique_ptr<QualifyingTagsType> qualifyingTags_Accessor;
  std::unique_ptr<SystemID> systemID_Accessor;
  std::unique_ptr<SystemScheduleOverride> systemScheduleOverride_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_OPBASETYPE_H
