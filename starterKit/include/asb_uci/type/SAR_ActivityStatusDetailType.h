/** @file SAR_ActivityStatusDetailType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SAR_ACTIVITYSTATUSDETAILTYPE_H
#define ASB_UCI_TYPE_SAR_ACTIVITYSTATUSDETAILTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../base/BoundedList.h"
#include "DateTimeType.h"
#include "DecibelType.h"
#include "DurationType.h"
#include "PercentType.h"
#include "RelativeDirectionEnum.h"
#include "../../asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_ActivityStatusDetailType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ConcurrentCollectionDetailsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SAR_ActivityStatusDetailType : public virtual uci::type::SAR_ActivityStatusDetailType {
public:
  /** This is the list of other activities that were executed concurrently with this activity. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ConcurrentActivity = asb_uci::base::BoundedList<uci::type::ConcurrentCollectionDetailsType, uci::type::accessorType::concurrentCollectionDetailsType, asb_uci::type::ConcurrentCollectionDetailsType>;

  /** The constructor */
  SAR_ActivityStatusDetailType();

  /** The copy constructor
    *
    * @param rhs The SAR_ActivityStatusDetailType to copy from
    */
  SAR_ActivityStatusDetailType(const SAR_ActivityStatusDetailType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SAR_ActivityStatusDetailType to move from
    */
  SAR_ActivityStatusDetailType(SAR_ActivityStatusDetailType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SAR_ActivityStatusDetailType to copy from
    * @return The SAR_ActivityStatusDetailType that was assigned
    */
  SAR_ActivityStatusDetailType& operator=(const SAR_ActivityStatusDetailType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SAR_ActivityStatusDetailType to move from
    * @return The SAR_ActivityStatusDetailType that was assigned
    */
  SAR_ActivityStatusDetailType& operator=(SAR_ActivityStatusDetailType&& rhs) = delete;

  /** The destructor */
  virtual ~SAR_ActivityStatusDetailType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SAR_ActivityStatusDetailType whose contents are to be used to set this
    *      uci::type::SAR_ActivityStatusDetailType's contents.
    */
  void copy(const uci::type::SAR_ActivityStatusDetailType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SAR_ActivityStatusDetailType whose contents are to be used to set this
    *      uci::type::SAR_ActivityStatusDetailType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SAR_ActivityStatusDetailType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentageInFOR() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setPercentageInFOR(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentageInFORis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentageInFOR() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearPercentageInFOR() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getActualStartTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setActualStartTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field ActualStartTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActualStartTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearActualStartTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getActualStopTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setActualStopTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field ActualStopTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActualStopTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearActualStopTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentCoverage() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setPercentCoverage(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentCoverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentCoverage() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearPercentCoverage() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getEntitiesReported() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setEntitiesReported(xs::UnsignedInt value) override;

  /** Returns whether this optional field EntitiesReportedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEntitiesReported() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearEntitiesReported() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getProductsProduced() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setProductsProduced(xs::UnsignedInt value) override;

  /** Returns whether this optional field ProductsProducedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProductsProduced() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearProductsProduced() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getEstimatedERP() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setEstimatedERP(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field EstimatedERPis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedERP() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearEstimatedERP() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getMinimumCNR() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setMinimumCNR(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field MinimumCNRis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinimumCNR() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearMinimumCNR() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Float getAchievableEllipticity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setAchievableEllipticity(xs::Float value) override;

  /** Returns whether this optional field AchievableEllipticityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAchievableEllipticity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearAchievableEllipticity() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getAchievableResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setAchievableResolution(xs::Double value) override;

  /** Returns whether this optional field AchievableResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAchievableResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearAchievableResolution() noexcept override;

  /** Returns the accessor to the ConcurrentActivity field contained in this message fragment
    *
    * @return The const reference to the accessor to the ConcurrentActivity field.
    */
  const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& getConcurrentActivity() const override;

  /** Returns the accessor to the ConcurrentActivity field contained in this message fragment
    *
    * @return The reference to the accessor to the ConcurrentActivity field.
    */
  uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& getConcurrentActivity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setConcurrentActivity(const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentOccluded() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setPercentOccluded(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentOccludedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentOccluded() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearPercentOccluded() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getTimeToService() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setTimeToService(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field TimeToServiceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeToService() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearTimeToService() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentRadarTimeline() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setPercentRadarTimeline(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentRadarTimelineis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentRadarTimeline() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearPercentRadarTimeline() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentageInFOV() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setPercentageInFOV(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentageInFOVis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentageInFOV() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearPercentageInFOV() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RelativeDirectionEnum& getRelativeDirectionOfTarget_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RelativeDirectionEnum& getRelativeDirectionOfTarget() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RelativeDirectionEnum& getRelativeDirectionOfTarget() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setRelativeDirectionOfTarget(const uci::type::RelativeDirectionEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& setRelativeDirectionOfTarget(uci::type::RelativeDirectionEnum::EnumerationItem value) override;

  /** Returns whether this optional field RelativeDirectionOfTargetis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRelativeDirectionOfTarget() const noexcept override;

  /** Enables the optional field such that getRelativeDirectionOfTarget will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RelativeDirectionEnum& enableRelativeDirectionOfTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_ActivityStatusDetailType& clearRelativeDirectionOfTarget() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SAR_ActivityStatusDetailType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_ActivityStatusDetailType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SAR_ActivityStatusDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<PercentTypeValue> percentageInFOR_Accessor;
  boost::optional<DateTimeTypeValue> actualStartTime_Accessor;
  boost::optional<DateTimeTypeValue> actualStopTime_Accessor;
  boost::optional<PercentTypeValue> percentCoverage_Accessor;
  boost::optional<asb_xs::UnsignedInt> entitiesReported_Accessor;
  boost::optional<asb_xs::UnsignedInt> productsProduced_Accessor;
  boost::optional<DecibelTypeValue> estimatedERP_Accessor;
  boost::optional<DecibelTypeValue> minimumCNR_Accessor;
  boost::optional<asb_xs::Float> achievableEllipticity_Accessor;
  boost::optional<asb_xs::Double> achievableResolution_Accessor;
  std::unique_ptr<ConcurrentActivity> concurrentActivity_Accessor;
  boost::optional<PercentTypeValue> percentOccluded_Accessor;
  boost::optional<DurationTypeValue> timeToService_Accessor;
  boost::optional<PercentTypeValue> percentRadarTimeline_Accessor;
  boost::optional<PercentTypeValue> percentageInFOV_Accessor;
  std::unique_ptr<RelativeDirectionEnum> relativeDirectionOfTarget_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SAR_ACTIVITYSTATUSDETAILTYPE_H
