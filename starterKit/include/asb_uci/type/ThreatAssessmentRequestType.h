/** @file ThreatAssessmentRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_THREATASSESSMENTREQUESTTYPE_H
#define ASB_UCI_TYPE_THREATASSESSMENTREQUESTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/AssessmentSuppressionEnum.h"
#include "asb_uci/type/DurationType.h"
#include "asb_uci/type/ThreatCapabilityEnum.h"
#include "uci/type/ThreatAssessmentRequestType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EntityID_Type;
class SystemRoutePlanSpecificationType;

/** The inputs used in generating and/or requesting a Route Threat Assessment. */
class ThreatAssessmentRequestType : public virtual uci::type::ThreatAssessmentRequestType {
public:
  /** This element indicates a specific threat Entity to assess. If omitted, all relevant threat Entities are assessed. If
    * any are given, only they are assessed. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ThreatEntityID = asb_uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type, asb_uci::type::EntityID_Type>;

  /** Indicates a System or Systems to assess given their RoutePlan and available capabilities. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  using SystemToAssess = asb_uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType, asb_uci::type::SystemRoutePlanSpecificationType>;

  /** Indicates additional systems to be considered for the assessment, but are not assessed. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SupportingSystem = asb_uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType, asb_uci::type::SystemRoutePlanSpecificationType>;

  /** The constructor */
  ThreatAssessmentRequestType();

  /** The copy constructor
    *
    * @param rhs The ThreatAssessmentRequestType to copy from
    */
  ThreatAssessmentRequestType(const ThreatAssessmentRequestType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ThreatAssessmentRequestType to move from
    */
  ThreatAssessmentRequestType(ThreatAssessmentRequestType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ThreatAssessmentRequestType to copy from
    * @return The ThreatAssessmentRequestType that was assigned
    */
  ThreatAssessmentRequestType& operator=(const ThreatAssessmentRequestType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ThreatAssessmentRequestType to move from
    * @return The ThreatAssessmentRequestType that was assigned
    */
  ThreatAssessmentRequestType& operator=(ThreatAssessmentRequestType&& rhs) = delete;

  /** The destructor */
  virtual ~ThreatAssessmentRequestType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ThreatAssessmentRequestType whose contents are to be used to set this
    *      uci::type::ThreatAssessmentRequestType's contents.
    */
  void copy(const uci::type::ThreatAssessmentRequestType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ThreatAssessmentRequestType whose contents are to be used to set this
    *      uci::type::ThreatAssessmentRequestType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ThreatAssessmentRequestType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's ThreatCapability field
    *
    * @return The contents of the ThreatCapability field
    */
  const uci::type::ThreatCapabilityEnum& getThreatCapability() const override;

  /** Returns the contents of the message's ThreatCapability field
    *
    * @return The contents of the ThreatCapability field
    */
  uci::type::ThreatCapabilityEnum& getThreatCapability() override;

  /** Sets the contents of the message's ThreatCapability field
    *
    * @param accessor The accessor to use to set the ThreatCapability field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setThreatCapability(const uci::type::ThreatCapabilityEnum& accessor) override;

  /** Sets the contents of the message's ThreatCapability field
    *
    * @param value The new value to set the ThreatCapability field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setThreatCapability(uci::type::ThreatCapabilityEnum::EnumerationItem value) override;

  /** Returns the contents of the message's ThreatSuppression field
    *
    * @return The contents of the ThreatSuppression field
    */
  const uci::type::AssessmentSuppressionEnum& getThreatSuppression() const override;

  /** Returns the contents of the message's ThreatSuppression field
    *
    * @return The contents of the ThreatSuppression field
    */
  uci::type::AssessmentSuppressionEnum& getThreatSuppression() override;

  /** Sets the contents of the message's ThreatSuppression field
    *
    * @param accessor The accessor to use to set the ThreatSuppression field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setThreatSuppression(const uci::type::AssessmentSuppressionEnum& accessor) override;

  /** Sets the contents of the message's ThreatSuppression field
    *
    * @param value The new value to set the ThreatSuppression field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setThreatSuppression(uci::type::AssessmentSuppressionEnum::EnumerationItem value) override;

  /** Returns the accessor to the ThreatEntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ThreatEntityID field.
    */
  const uci::type::ThreatAssessmentRequestType::ThreatEntityID& getThreatEntityID() const override;

  /** Returns the accessor to the ThreatEntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the ThreatEntityID field.
    */
  uci::type::ThreatAssessmentRequestType::ThreatEntityID& getThreatEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setThreatEntityID(const uci::type::ThreatAssessmentRequestType::ThreatEntityID& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getAssessmentInterval() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setAssessmentInterval(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field AssessmentIntervalis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssessmentInterval() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& clearAssessmentInterval() noexcept override;

  /** Returns the accessor to the SystemToAssess field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemToAssess field.
    */
  const uci::type::ThreatAssessmentRequestType::SystemToAssess& getSystemToAssess() const override;

  /** Returns the accessor to the SystemToAssess field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemToAssess field.
    */
  uci::type::ThreatAssessmentRequestType::SystemToAssess& getSystemToAssess() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setSystemToAssess(const uci::type::ThreatAssessmentRequestType::SystemToAssess& accessor) override;

  /** Returns the accessor to the SupportingSystem field contained in this message fragment
    *
    * @return The const reference to the accessor to the SupportingSystem field.
    */
  const uci::type::ThreatAssessmentRequestType::SupportingSystem& getSupportingSystem() const override;

  /** Returns the accessor to the SupportingSystem field contained in this message fragment
    *
    * @return The reference to the accessor to the SupportingSystem field.
    */
  uci::type::ThreatAssessmentRequestType::SupportingSystem& getSupportingSystem() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ThreatAssessmentRequestType& setSupportingSystem(const uci::type::ThreatAssessmentRequestType::SupportingSystem& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ThreatAssessmentRequestType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreatAssessmentRequestType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ThreatAssessmentRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ThreatCapabilityEnum> threatCapability_Accessor;
  std::unique_ptr<AssessmentSuppressionEnum> threatSuppression_Accessor;
  std::unique_ptr<ThreatEntityID> threatEntityID_Accessor;
  boost::optional<DurationTypeValue> assessmentInterval_Accessor;
  std::unique_ptr<SystemToAssess> systemToAssess_Accessor;
  std::unique_ptr<SupportingSystem> supportingSystem_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_THREATASSESSMENTREQUESTTYPE_H
