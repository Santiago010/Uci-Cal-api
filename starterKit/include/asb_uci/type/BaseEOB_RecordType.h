/** @file BaseEOB_RecordType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_BASEEOB_RECORDTYPE_H
#define ASB_UCI_TYPE_BASEEOB_RECORDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString3Type.h"
#include "asb_uci/type/MobilityEnum.h"
#include "asb_uci/type/OB_OperationalStatusEnum.h"
#include "asb_uci/type/VisibleString512Type.h"
#include "uci/type/BaseEOB_RecordType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_CodesType;
class EOB_FixedPositionType;
class EOB_RecordID_Type;
class IdentityType;
class OrderOfBattleTimestampsType;
class SecurityInformationType;

/** See annotations in child elements and messages/elements that use this type for details. */
class BaseEOB_RecordType : public virtual uci::type::BaseEOB_RecordType {
public:
  /** The constructor */
  BaseEOB_RecordType();

  /** The copy constructor
    *
    * @param rhs The BaseEOB_RecordType to copy from
    */
  BaseEOB_RecordType(const BaseEOB_RecordType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The BaseEOB_RecordType to move from
    */
  BaseEOB_RecordType(BaseEOB_RecordType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The BaseEOB_RecordType to copy from
    * @return The BaseEOB_RecordType that was assigned
    */
  BaseEOB_RecordType& operator=(const BaseEOB_RecordType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The BaseEOB_RecordType to move from
    * @return The BaseEOB_RecordType that was assigned
    */
  BaseEOB_RecordType& operator=(BaseEOB_RecordType&& rhs) = delete;

  /** The destructor */
  virtual ~BaseEOB_RecordType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::BaseEOB_RecordType whose contents are to be used to set this
    *      uci::type::BaseEOB_RecordType's contents.
    */
  void copy(const uci::type::BaseEOB_RecordType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::BaseEOB_RecordType whose contents are to be used to set this
    *      uci::type::BaseEOB_RecordType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::BaseEOB_RecordType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecurityInformation field.
    */
  const uci::type::SecurityInformationType& getSecurityInformation() const override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityInformation field.
    */
  uci::type::SecurityInformationType& getSecurityInformation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setSecurityInformation(const uci::type::SecurityInformationType& accessor) override;

  /** Returns the accessor to the EOB_RecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EOB_RecordID field.
    */
  const uci::type::EOB_RecordID_Type& getEOB_RecordID() const override;

  /** Returns the accessor to the EOB_RecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the EOB_RecordID field.
    */
  uci::type::EOB_RecordID_Type& getEOB_RecordID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) override;

  /** Returns the accessor to the Timestamps field contained in this message fragment
    *
    * @return The const reference to the accessor to the Timestamps field.
    */
  const uci::type::OrderOfBattleTimestampsType& getTimestamps() const override;

  /** Returns the accessor to the Timestamps field contained in this message fragment
    *
    * @return The reference to the accessor to the Timestamps field.
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) override;

  /** Returns the accessor to the Identity field contained in this message fragment
    *
    * @return The const reference to the accessor to the Identity field.
    */
  const uci::type::IdentityType& getIdentity() const override;

  /** Returns the accessor to the Identity field contained in this message fragment
    *
    * @return The reference to the accessor to the Identity field.
    */
  uci::type::IdentityType& getIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setIdentity(const uci::type::IdentityType& accessor) override;

  /** Enables the optional field such that getIdentity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Position field contained in this message fragment
    *
    * @return The const reference to the accessor to the Position field.
    */
  const uci::type::EOB_FixedPositionType& getPosition() const override;

  /** Returns the accessor to the Position field contained in this message fragment
    *
    * @return The reference to the accessor to the Position field.
    */
  uci::type::EOB_FixedPositionType& getPosition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setPosition(const uci::type::EOB_FixedPositionType& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& getMobility_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MobilityEnum& getMobility() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& getMobility() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setMobility(const uci::type::MobilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setMobility(uci::type::MobilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field Mobilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMobility() const noexcept override;

  /** Enables the optional field such that getMobility will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& enableMobility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& clearMobility() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_CodesType& getEOB_Codes_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EOB_CodesType& getEOB_Codes() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_CodesType& getEOB_Codes() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setEOB_Codes(const uci::type::EOB_CodesType& accessor) override;

  /** Returns whether this optional field EOB_Codesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEOB_Codes() const noexcept override;

  /** Enables the optional field such that getEOB_Codes will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_CodesType& enableEOB_Codes(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& clearEOB_Codes() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& getSiteOperationalStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OB_OperationalStatusEnum& getSiteOperationalStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& getSiteOperationalStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setSiteOperationalStatus(const uci::type::OB_OperationalStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setSiteOperationalStatus(uci::type::OB_OperationalStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field SiteOperationalStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSiteOperationalStatus() const noexcept override;

  /** Enables the optional field such that getSiteOperationalStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& enableSiteOperationalStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& clearSiteOperationalStatus() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString3Type& getRecordOwner_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString3Type& getRecordOwner() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString3Type& getRecordOwner() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setRecordOwner(const uci::type::AlphanumericDashSpaceUnderscoreString3Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setRecordOwner(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setRecordOwner(const char* value) override;

  /** Returns whether this optional field recordOwner_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRecordOwner() const noexcept override;

  /** Enables the optional field such that getRecordOwner will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString3Type& enableRecordOwner(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& clearRecordOwner() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& getRemarksText_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString512Type& getRemarksText() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& getRemarksText() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setRemarksText(const uci::type::VisibleString512Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setRemarksText(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& setRemarksText(const char* value) override;

  /** Returns whether this optional field remarksText_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemarksText() const noexcept override;

  /** Enables the optional field such that getRemarksText will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& enableRemarksText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::BaseEOB_RecordType& clearRemarksText() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<BaseEOB_RecordType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::BaseEOB_RecordType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::BaseEOB_RecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SecurityInformationType> securityInformation_Accessor;
  std::unique_ptr<EOB_RecordID_Type> eOB_RecordID_Accessor;
  std::unique_ptr<OrderOfBattleTimestampsType> timestamps_Accessor;
  std::unique_ptr<IdentityType> identity_Accessor;
  std::unique_ptr<EOB_FixedPositionType> position_Accessor;
  std::unique_ptr<MobilityEnum> mobility_Accessor;
  std::unique_ptr<EOB_CodesType> eOB_Codes_Accessor;
  std::unique_ptr<OB_OperationalStatusEnum> siteOperationalStatus_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString3Type> recordOwner_Accessor;
  std::unique_ptr<VisibleString512Type> remarksText_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_BASEEOB_RECORDTYPE_H
