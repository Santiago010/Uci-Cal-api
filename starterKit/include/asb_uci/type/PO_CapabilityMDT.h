/** @file PO_CapabilityMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_CAPABILITYMDT_H
#define ASB_UCI_TYPE_PO_CAPABILITYMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CapabilityBaseType.h"
#include "../../../include/asb_uci/type/PointingTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CapabilityMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class FOR_Type;
class PO_CapabilityType;
class PO_CollectionConstraintsType;
class PO_ComponentType;
class PO_SubCapabilityType;
class PO_TrackCapabilityType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_CapabilityMDT : public virtual uci::type::PO_CapabilityMDT, public virtual CapabilityBaseType {
public:
  /** Indicates an installed PO Capability, its configurable characteristics and its controllability. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  using Capability = asb_uci::base::BoundedList<uci::type::PO_CapabilityType, uci::type::accessorType::pO_CapabilityType, asb_uci::type::PO_CapabilityType>;

  /** This indicates the type of pointing options that the PO Subsystem can support. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 6]
    */
  using PointingCapability = asb_uci::base::BoundedList<uci::type::PointingTypeEnum, uci::type::accessorType::pointingTypeEnum, asb_uci::type::PointingTypeEnum>;

  /** Indicates all of the subcapabilities that a PO subsystem has available for command and control. Unique configurations
    * can appear multiple times as individual IDs which allows for both: 1. One ID associated with multiple capabilities 2.
    * A unique ID associated with one capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SubCapability = asb_uci::base::BoundedList<uci::type::PO_SubCapabilityType, uci::type::accessorType::pO_SubCapabilityType, asb_uci::type::PO_SubCapabilityType>;

  /** Indicates a Subsystem Component that is relevant to command and control of the associated Capability. A Component's
    * characteristics and performance directly influence those of the associated Capability. One or more defined components
    * may have settings/configuration independent with the associated Capability. Independent control of subsystem
    * components as related to capabilities also adds flexibility in the command and control of independent components
    * hosted within a single subsystem. Unique configurations can appear multiple times as individual IDs which allows for
    * both: 1. One ID associated with multiple capabilities 2. A unique ID associated with one capability. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using PO_Component = asb_uci::base::BoundedList<uci::type::PO_ComponentType, uci::type::accessorType::pO_ComponentType, asb_uci::type::PO_ComponentType>;

  /** Allowable range of values for Passive Optical track parameters that can be used to customize target detections.
    * Indicates all of the track options that a PO subsystem has available for command and control. Unique configurations
    * can appear multiple times as individual IDs which allows for both: 1. One ID associated with multiple capabilities 2.
    * A unique ID associated with one capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using TrackOption = asb_uci::base::BoundedList<uci::type::PO_TrackCapabilityType, uci::type::accessorType::pO_TrackCapabilityType, asb_uci::type::PO_TrackCapabilityType>;

  /** This field specifies which type of collection constraints are supported by this sensor. If multiple instances are
    * given, each should be of a different constraint type as indicated by the child element. [Occurrences: Minimum: 0;
    * Maximum: 10]
    */
  using CollectionConstraints = asb_uci::base::BoundedList<uci::type::PO_CollectionConstraintsType, uci::type::accessorType::pO_CollectionConstraintsType, asb_uci::type::PO_CollectionConstraintsType>;

  /** The constructor */
  PO_CapabilityMDT();

  /** The copy constructor
    *
    * @param rhs The PO_CapabilityMDT to copy from
    */
  PO_CapabilityMDT(const PO_CapabilityMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_CapabilityMDT to move from
    */
  PO_CapabilityMDT(PO_CapabilityMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_CapabilityMDT to copy from
    * @return The PO_CapabilityMDT that was assigned
    */
  PO_CapabilityMDT& operator=(const PO_CapabilityMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_CapabilityMDT to move from
    * @return The PO_CapabilityMDT that was assigned
    */
  PO_CapabilityMDT& operator=(PO_CapabilityMDT&& rhs) = delete;

  /** The destructor */
  ~PO_CapabilityMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CapabilityMDT whose contents are to be used to set this
    *      uci::type::PO_CapabilityMDT's contents.
    */
  void copy(const uci::type::PO_CapabilityMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CapabilityMDT whose contents are to be used to set this
    *      uci::type::PO_CapabilityMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_CapabilityMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the Capability field contained in this message fragment
    *
    * @return The const reference to the accessor to the Capability field.
    */
  const uci::type::PO_CapabilityMDT::Capability& getCapability() const override;

  /** Returns the accessor to the Capability field contained in this message fragment
    *
    * @return The reference to the accessor to the Capability field.
    */
  uci::type::PO_CapabilityMDT::Capability& getCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setCapability(const uci::type::PO_CapabilityMDT::Capability& accessor) override;

  /** Returns the accessor to the PointingCapability field contained in this message fragment
    *
    * @return The const reference to the accessor to the PointingCapability field.
    */
  const uci::type::PO_CapabilityMDT::PointingCapability& getPointingCapability() const override;

  /** Returns the accessor to the PointingCapability field contained in this message fragment
    *
    * @return The reference to the accessor to the PointingCapability field.
    */
  uci::type::PO_CapabilityMDT::PointingCapability& getPointingCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setPointingCapability(const uci::type::PO_CapabilityMDT::PointingCapability& accessor) override;

  /** Returns the accessor to the SubCapability field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCapability field.
    */
  const uci::type::PO_CapabilityMDT::SubCapability& getSubCapability() const override;

  /** Returns the accessor to the SubCapability field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCapability field.
    */
  uci::type::PO_CapabilityMDT::SubCapability& getSubCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setSubCapability(const uci::type::PO_CapabilityMDT::SubCapability& accessor) override;

  /** Returns the accessor to the PO_Component field contained in this message fragment
    *
    * @return The const reference to the accessor to the PO_Component field.
    */
  const uci::type::PO_CapabilityMDT::PO_Component& getPO_Component() const override;

  /** Returns the accessor to the PO_Component field contained in this message fragment
    *
    * @return The reference to the accessor to the PO_Component field.
    */
  uci::type::PO_CapabilityMDT::PO_Component& getPO_Component() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setPO_Component(const uci::type::PO_CapabilityMDT::PO_Component& accessor) override;

  /** Returns the accessor to the TrackOption field contained in this message fragment
    *
    * @return The const reference to the accessor to the TrackOption field.
    */
  const uci::type::PO_CapabilityMDT::TrackOption& getTrackOption() const override;

  /** Returns the accessor to the TrackOption field contained in this message fragment
    *
    * @return The reference to the accessor to the TrackOption field.
    */
  uci::type::PO_CapabilityMDT::TrackOption& getTrackOption() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setTrackOption(const uci::type::PO_CapabilityMDT::TrackOption& accessor) override;

  /** Returns the accessor to the CollectionConstraints field contained in this message fragment
    *
    * @return The const reference to the accessor to the CollectionConstraints field.
    */
  const uci::type::PO_CapabilityMDT::CollectionConstraints& getCollectionConstraints() const override;

  /** Returns the accessor to the CollectionConstraints field contained in this message fragment
    *
    * @return The reference to the accessor to the CollectionConstraints field.
    */
  uci::type::PO_CapabilityMDT::CollectionConstraints& getCollectionConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setCollectionConstraints(const uci::type::PO_CapabilityMDT::CollectionConstraints& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getCapabilityFOR_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOR_Type& getCapabilityFOR() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getCapabilityFOR() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setCapabilityFOR(const uci::type::FOR_Type& accessor) override;

  /** Returns whether this optional field CapabilityFORis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCapabilityFOR() const noexcept override;

  /** Enables the optional field such that getCapabilityFOR will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& enableCapabilityFOR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& clearCapabilityFOR() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getCapabilityThermalBlankingFOR_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOR_Type& getCapabilityThermalBlankingFOR() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getCapabilityThermalBlankingFOR() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& setCapabilityThermalBlankingFOR(const uci::type::FOR_Type& accessor) override;

  /** Returns whether this optional field CapabilityThermalBlankingFORis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCapabilityThermalBlankingFOR() const noexcept override;

  /** Enables the optional field such that getCapabilityThermalBlankingFOR will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& enableCapabilityThermalBlankingFOR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityMDT& clearCapabilityThermalBlankingFOR() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_CapabilityMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CapabilityMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_CapabilityMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Capability> capability_Accessor;
  std::unique_ptr<PointingCapability> pointingCapability_Accessor;
  std::unique_ptr<SubCapability> subCapability_Accessor;
  std::unique_ptr<PO_Component> pO_Component_Accessor;
  std::unique_ptr<TrackOption> trackOption_Accessor;
  std::unique_ptr<CollectionConstraints> collectionConstraints_Accessor;
  std::unique_ptr<FOR_Type> capabilityFOR_Accessor;
  std::unique_ptr<FOR_Type> capabilityThermalBlankingFOR_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_CAPABILITYMDT_H
