/** @file ImageSubheaderRevA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_IMAGESUBHEADERREVA_TYPE_H
#define ASB_UCI_TYPE_IMAGESUBHEADERREVA_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/CharOrSpacePairsType.h"
#include "../../../include/asb_uci/type/NITF_ClassificationAuthorityType.h"
#include "../../../include/asb_uci/type/NITF_ClassificationReasonType.h"
#include "../../../include/asb_uci/type/NITF_CodewordsType.h"
#include "../../../include/asb_uci/type/NITF_ControlAndHandlingType.h"
#include "../../../include/asb_uci/type/NITF_DateType.h"
#include "../../../include/asb_uci/type/NITF_DeclassificationExemptionType.h"
#include "../../../include/asb_uci/type/NITF_DeclassificationType.h"
#include "../../../include/asb_uci/type/NITF_DowngradeType.h"
#include "../../../include/asb_uci/type/NITF_FileSecurityClassificationType.h"
#include "../../../include/asb_uci/type/NITF_ReleasingInstructionsType.h"
#include "../../../include/asb_uci/type/VisibleLatin1String15Type.h"
#include "../../../include/asb_uci/type/VisibleLatin1String40Type.h"
#include "../../../include/asb_uci/type/VisibleLatin1String43Type.h"
#include "../../../include/asb_uci/type/VisibleString17Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImageSubheaderRevA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class IID2_ChoiceType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ImageSubheaderRevA_Type : public virtual uci::type::ImageSubheaderRevA_Type {
public:
  /** The constructor */
  ImageSubheaderRevA_Type();

  /** The copy constructor
    *
    * @param rhs The ImageSubheaderRevA_Type to copy from
    */
  ImageSubheaderRevA_Type(const ImageSubheaderRevA_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ImageSubheaderRevA_Type to move from
    */
  ImageSubheaderRevA_Type(ImageSubheaderRevA_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ImageSubheaderRevA_Type to copy from
    * @return The ImageSubheaderRevA_Type that was assigned
    */
  ImageSubheaderRevA_Type& operator=(const ImageSubheaderRevA_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ImageSubheaderRevA_Type to move from
    * @return The ImageSubheaderRevA_Type that was assigned
    */
  ImageSubheaderRevA_Type& operator=(ImageSubheaderRevA_Type&& rhs) = delete;

  /** The destructor */
  virtual ~ImageSubheaderRevA_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ImageSubheaderRevA_Type whose contents are to be used to set this
    *      uci::type::ImageSubheaderRevA_Type's contents.
    */
  void copy(const uci::type::ImageSubheaderRevA_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ImageSubheaderRevA_Type whose contents are to be used to set this
    *      uci::type::ImageSubheaderRevA_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ImageSubheaderRevA_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString17Type& getTargetIdentifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString17Type& getTargetIdentifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString17Type& getTargetIdentifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setTargetIdentifier(const uci::type::VisibleString17Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setTargetIdentifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setTargetIdentifier(const char* value) override;

  /** Returns whether this optional field targetIdentifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTargetIdentifier() const noexcept override;

  /** Enables the optional field such that getTargetIdentifier will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString17Type& enableTargetIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearTargetIdentifier() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IID2_ChoiceType& getIID2_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::IID2_ChoiceType& getIID2() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IID2_ChoiceType& getIID2() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setIID2(const uci::type::IID2_ChoiceType& accessor) override;

  /** Returns whether this optional field IID2is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIID2() const noexcept override;

  /** Enables the optional field such that getIID2 will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IID2_ChoiceType& enableIID2(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearIID2() noexcept override;

  /** Returns the contents of the message's ImageSecurityClassification field
    *
    * @return The contents of the ImageSecurityClassification field
    */
  const uci::type::NITF_FileSecurityClassificationType& getImageSecurityClassification() const noexcept override;

  /** Returns the contents of the message's ImageSecurityClassification field
    *
    * @return The contents of the ImageSecurityClassification field
    */
  uci::type::NITF_FileSecurityClassificationType& getImageSecurityClassification() noexcept override;

  /** Sets the contents of the message's ImageSecurityClassification field
    *
    * @param value The new value to set the ImageSecurityClassification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityClassification(const uci::type::NITF_FileSecurityClassificationType& value) override;

  /** Sets the contents of the message's ImageSecurityClassification field
    *
    * @param value The new value to set the ImageSecurityClassification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityClassification(const std::string& value) override;

  /** Sets the contents of the message's ImageSecurityClassification field
    *
    * @param value The new value to set the ImageSecurityClassification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityClassification(const char* value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::CharOrSpacePairsType& getImageSecurityClassificationSystem_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::CharOrSpacePairsType& getImageSecurityClassificationSystem() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::CharOrSpacePairsType& getImageSecurityClassificationSystem() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityClassificationSystem(const uci::type::CharOrSpacePairsType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityClassificationSystem(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityClassificationSystem(const char* value) override;

  /** Returns whether this optional field imageSecurityClassificationSystem_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageSecurityClassificationSystem() const noexcept override;

  /** Enables the optional field such that getImageSecurityClassificationSystem will return the optional field and not
    * throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::CharOrSpacePairsType& enableImageSecurityClassificationSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageSecurityClassificationSystem() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_CodewordsType& getImageCodewords_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_CodewordsType& getImageCodewords() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_CodewordsType& getImageCodewords() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageCodewords(const uci::type::NITF_CodewordsType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageCodewords(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageCodewords(const char* value) override;

  /** Returns whether this optional field imageCodewords_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageCodewords() const noexcept override;

  /** Enables the optional field such that getImageCodewords will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_CodewordsType& enableImageCodewords(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageCodewords() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ControlAndHandlingType& getImageControlAndHandling_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ControlAndHandlingType& getImageControlAndHandling() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ControlAndHandlingType& getImageControlAndHandling() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageControlAndHandling(const uci::type::NITF_ControlAndHandlingType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageControlAndHandling(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageControlAndHandling(const char* value) override;

  /** Returns whether this optional field imageControlAndHandling_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageControlAndHandling() const noexcept override;

  /** Enables the optional field such that getImageControlAndHandling will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ControlAndHandlingType& enableImageControlAndHandling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageControlAndHandling() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ReleasingInstructionsType& getImageReleasingInstructions_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ReleasingInstructionsType& getImageReleasingInstructions() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ReleasingInstructionsType& getImageReleasingInstructions() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageReleasingInstructions(const uci::type::NITF_ReleasingInstructionsType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageReleasingInstructions(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageReleasingInstructions(const char* value) override;

  /** Returns whether this optional field imageReleasingInstructions_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageReleasingInstructions() const noexcept override;

  /** Enables the optional field such that getImageReleasingInstructions will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ReleasingInstructionsType& enableImageReleasingInstructions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageReleasingInstructions() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationType& getImageDeclassificationType_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DeclassificationType& getImageDeclassificationType() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationType& getImageDeclassificationType() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationType(const uci::type::NITF_DeclassificationType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationType(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationType(const char* value) override;

  /** Returns whether this optional field imageDeclassificationType_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageDeclassificationType() const noexcept override;

  /** Enables the optional field such that getImageDeclassificationType will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationType& enableImageDeclassificationType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageDeclassificationType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getImageDeclassificationDate_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DateType& getImageDeclassificationDate() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getImageDeclassificationDate() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationDate(const uci::type::NITF_DateType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationDate(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationDate(const char* value) override;

  /** Returns whether this optional field imageDeclassificationDate_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageDeclassificationDate() const noexcept override;

  /** Enables the optional field such that getImageDeclassificationDate will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& enableImageDeclassificationDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageDeclassificationDate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationExemptionType& getImageDeclassificationExemption_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DeclassificationExemptionType& getImageDeclassificationExemption() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationExemptionType& getImageDeclassificationExemption() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationExemption(const uci::type::NITF_DeclassificationExemptionType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationExemption(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDeclassificationExemption(const char* value) override;

  /** Returns whether this optional field imageDeclassificationExemption_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageDeclassificationExemption() const noexcept override;

  /** Enables the optional field such that getImageDeclassificationExemption will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationExemptionType& enableImageDeclassificationExemption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageDeclassificationExemption() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DowngradeType& getImageDowngrade_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DowngradeType& getImageDowngrade() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DowngradeType& getImageDowngrade() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDowngrade(const uci::type::NITF_DowngradeType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDowngrade(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDowngrade(const char* value) override;

  /** Returns whether this optional field imageDowngrade_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageDowngrade() const noexcept override;

  /** Enables the optional field such that getImageDowngrade will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DowngradeType& enableImageDowngrade(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageDowngrade() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getImageDowngradeDate_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DateType& getImageDowngradeDate() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getImageDowngradeDate() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDowngradeDate(const uci::type::NITF_DateType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDowngradeDate(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageDowngradeDate(const char* value) override;

  /** Returns whether this optional field imageDowngradeDate_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageDowngradeDate() const noexcept override;

  /** Enables the optional field such that getImageDowngradeDate will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& enableImageDowngradeDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageDowngradeDate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String43Type& getImageClassificationText_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String43Type& getImageClassificationText() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String43Type& getImageClassificationText() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationText(const uci::type::VisibleLatin1String43Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationText(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationText(const char* value) override;

  /** Returns whether this optional field imageClassificationText_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageClassificationText() const noexcept override;

  /** Enables the optional field such that getImageClassificationText will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String43Type& enableImageClassificationText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageClassificationText() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationAuthorityType& getImageClassificationAuthorityType_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ClassificationAuthorityType& getImageClassificationAuthorityType() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationAuthorityType& getImageClassificationAuthorityType() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthorityType(const uci::type::NITF_ClassificationAuthorityType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthorityType(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthorityType(const char* value) override;

  /** Returns whether this optional field imageClassificationAuthorityType_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageClassificationAuthorityType() const noexcept override;

  /** Enables the optional field such that getImageClassificationAuthorityType will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationAuthorityType& enableImageClassificationAuthorityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageClassificationAuthorityType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String40Type& getImageClassificationAuthority_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String40Type& getImageClassificationAuthority() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String40Type& getImageClassificationAuthority() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthority(const uci::type::VisibleLatin1String40Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthority(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthority(const char* value) override;

  /** Returns whether this optional field imageClassificationAuthority_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageClassificationAuthority() const noexcept override;

  /** Enables the optional field such that getImageClassificationAuthority will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String40Type& enableImageClassificationAuthority(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageClassificationAuthority() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationReasonType& getImageClassificationReason_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ClassificationReasonType& getImageClassificationReason() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationReasonType& getImageClassificationReason() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationReason(const uci::type::NITF_ClassificationReasonType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationReason(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageClassificationReason(const char* value) override;

  /** Returns whether this optional field imageClassificationReason_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageClassificationReason() const noexcept override;

  /** Enables the optional field such that getImageClassificationReason will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationReasonType& enableImageClassificationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageClassificationReason() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getImageSecuritySourceDate_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DateType& getImageSecuritySourceDate() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getImageSecuritySourceDate() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecuritySourceDate(const uci::type::NITF_DateType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecuritySourceDate(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecuritySourceDate(const char* value) override;

  /** Returns whether this optional field imageSecuritySourceDate_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageSecuritySourceDate() const noexcept override;

  /** Enables the optional field such that getImageSecuritySourceDate will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& enableImageSecuritySourceDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageSecuritySourceDate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String15Type& getImageSecurityControlNumber_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String15Type& getImageSecurityControlNumber() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String15Type& getImageSecurityControlNumber() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityControlNumber(const uci::type::VisibleLatin1String15Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityControlNumber(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& setImageSecurityControlNumber(const char* value) override;

  /** Returns whether this optional field imageSecurityControlNumber_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageSecurityControlNumber() const noexcept override;

  /** Enables the optional field such that getImageSecurityControlNumber will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String15Type& enableImageSecurityControlNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderRevA_Type& clearImageSecurityControlNumber() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ImageSubheaderRevA_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ImageSubheaderRevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ImageSubheaderRevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<VisibleString17Type> targetIdentifier_Accessor;
  std::unique_ptr<IID2_ChoiceType> iID2_Accessor;
  std::unique_ptr<NITF_FileSecurityClassificationType> imageSecurityClassification_Accessor;
  std::unique_ptr<CharOrSpacePairsType> imageSecurityClassificationSystem_Accessor;
  std::unique_ptr<NITF_CodewordsType> imageCodewords_Accessor;
  std::unique_ptr<NITF_ControlAndHandlingType> imageControlAndHandling_Accessor;
  std::unique_ptr<NITF_ReleasingInstructionsType> imageReleasingInstructions_Accessor;
  std::unique_ptr<NITF_DeclassificationType> imageDeclassificationType_Accessor;
  std::unique_ptr<NITF_DateType> imageDeclassificationDate_Accessor;
  std::unique_ptr<NITF_DeclassificationExemptionType> imageDeclassificationExemption_Accessor;
  std::unique_ptr<NITF_DowngradeType> imageDowngrade_Accessor;
  std::unique_ptr<NITF_DateType> imageDowngradeDate_Accessor;
  std::unique_ptr<VisibleLatin1String43Type> imageClassificationText_Accessor;
  std::unique_ptr<NITF_ClassificationAuthorityType> imageClassificationAuthorityType_Accessor;
  std::unique_ptr<VisibleLatin1String40Type> imageClassificationAuthority_Accessor;
  std::unique_ptr<NITF_ClassificationReasonType> imageClassificationReason_Accessor;
  std::unique_ptr<NITF_DateType> imageSecuritySourceDate_Accessor;
  std::unique_ptr<VisibleLatin1String15Type> imageSecurityControlNumber_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_IMAGESUBHEADERREVA_TYPE_H
