/** @file PlanPolicyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANPOLICYTYPE_H
#define ASB_UCI_TYPE_PLANPOLICYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanPolicyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ApprovalPolicyBaseType;
class ByResultPolicyType;
class ByTriggerPolicyType;
class PlanPolicyApplicablePlanType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanPolicyType : public virtual uci::type::PlanPolicyType {
public:
  /** Indicates the set of planning activities whose generated plans are subject to the sibling *Policy elements.
    * [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using ApplicablePlanningActivity = asb_uci::base::BoundedList<uci::type::PlanPolicyApplicablePlanType, uci::type::accessorType::planPolicyApplicablePlanType, asb_uci::type::PlanPolicyApplicablePlanType>;

  /** Indicates approval policies when planning activity results match certain conditions. Conditions specified here are
    * considered to be overrides to the default planning activity approval policy given in the sibling Default element. For
    * example, if the default policy indicates task allocation approval is never required, this element could override the
    * default and require approval whenever a task allocation results in previously allocated Task or Tasks being dropped.
    * See the annotations in the sibling DefaultPolicy element for an overview of how the siblings relate to each other. If
    * multiple instances are given, each should be a different Result instance as indicated by the child Result element.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ByResultPolicy = asb_uci::base::BoundedList<uci::type::ByResultPolicyType, uci::type::accessorType::byResultPolicyType, asb_uci::type::ByResultPolicyType>;

  /** Indicates approval policies for re-plan activities initiated by triggered events, overriding the default approval
    * policy for the planning activity given in the sibling DefaultPolicy element. Additionally, this element allows
    * trigger-specific policies for a specific planning activities. For example, if the default policy indicates route
    * planning approval is never required, this element could override, requiring approval for route plans affecting all
    * Systems triggered by new threats if the route re-plan results in dropped tasks. If multiple instances are given, each
    * should be of a different trigger type as indicated by the child EventTrigger element. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ByTriggerPolicy = asb_uci::base::BoundedList<uci::type::ByTriggerPolicyType, uci::type::accessorType::byTriggerPolicyType, asb_uci::type::ByTriggerPolicyType>;

  /** The constructor */
  PlanPolicyType();

  /** The copy constructor
    *
    * @param rhs The PlanPolicyType to copy from
    */
  PlanPolicyType(const PlanPolicyType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlanPolicyType to move from
    */
  PlanPolicyType(PlanPolicyType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlanPolicyType to copy from
    * @return The PlanPolicyType that was assigned
    */
  PlanPolicyType& operator=(const PlanPolicyType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlanPolicyType to move from
    * @return The PlanPolicyType that was assigned
    */
  PlanPolicyType& operator=(PlanPolicyType&& rhs) = delete;

  /** The destructor */
  virtual ~PlanPolicyType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanPolicyType whose contents are to be used to set this uci::type::PlanPolicyType's
    *      contents.
    */
  void copy(const uci::type::PlanPolicyType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanPolicyType whose contents are to be used to set this uci::type::PlanPolicyType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlanPolicyType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ApplicablePlanningActivity field contained in this message fragment
    *
    * @return The const reference to the accessor to the ApplicablePlanningActivity field.
    */
  const uci::type::PlanPolicyType::ApplicablePlanningActivity& getApplicablePlanningActivity() const override;

  /** Returns the accessor to the ApplicablePlanningActivity field contained in this message fragment
    *
    * @return The reference to the accessor to the ApplicablePlanningActivity field.
    */
  uci::type::PlanPolicyType::ApplicablePlanningActivity& getApplicablePlanningActivity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPolicyType& setApplicablePlanningActivity(const uci::type::PlanPolicyType::ApplicablePlanningActivity& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ApprovalPolicyBaseType& getDefaultPolicy_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ApprovalPolicyBaseType& getDefaultPolicy() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ApprovalPolicyBaseType& getDefaultPolicy() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPolicyType& setDefaultPolicy(const uci::type::ApprovalPolicyBaseType& accessor) override;

  /** Returns whether this optional field DefaultPolicyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDefaultPolicy() const noexcept override;

  /** Enables the optional field such that getDefaultPolicy will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ApprovalPolicyBaseType& enableDefaultPolicy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPolicyType& clearDefaultPolicy() noexcept override;

  /** Returns the accessor to the ByResultPolicy field contained in this message fragment
    *
    * @return The const reference to the accessor to the ByResultPolicy field.
    */
  const uci::type::PlanPolicyType::ByResultPolicy& getByResultPolicy() const override;

  /** Returns the accessor to the ByResultPolicy field contained in this message fragment
    *
    * @return The reference to the accessor to the ByResultPolicy field.
    */
  uci::type::PlanPolicyType::ByResultPolicy& getByResultPolicy() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPolicyType& setByResultPolicy(const uci::type::PlanPolicyType::ByResultPolicy& accessor) override;

  /** Returns the accessor to the ByTriggerPolicy field contained in this message fragment
    *
    * @return The const reference to the accessor to the ByTriggerPolicy field.
    */
  const uci::type::PlanPolicyType::ByTriggerPolicy& getByTriggerPolicy() const override;

  /** Returns the accessor to the ByTriggerPolicy field contained in this message fragment
    *
    * @return The reference to the accessor to the ByTriggerPolicy field.
    */
  uci::type::PlanPolicyType::ByTriggerPolicy& getByTriggerPolicy() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPolicyType& setByTriggerPolicy(const uci::type::PlanPolicyType::ByTriggerPolicy& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlanPolicyType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanPolicyType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlanPolicyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ApplicablePlanningActivity> applicablePlanningActivity_Accessor;
  std::unique_ptr<ApprovalPolicyBaseType> defaultPolicy_Accessor;
  std::unique_ptr<ByResultPolicy> byResultPolicy_Accessor;
  std::unique_ptr<ByTriggerPolicy> byTriggerPolicy_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANPOLICYTYPE_H
