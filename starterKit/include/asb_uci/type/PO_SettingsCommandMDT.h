/** @file PO_SettingsCommandMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_SETTINGSCOMMANDMDT_H
#define ASB_UCI_TYPE_PO_SETTINGSCOMMANDMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CapabilitySettingsCommandBaseType.h"
#include "asb_uci/type/PO_MessageOutputsEnum.h"
#include "uci/type/PO_SettingsCommandMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class FOR_Type;
class PO_CollectionConstraintsSettingsType;
class PO_ComponentSettingsType;
class PO_SubCapabilitySettingsType;
class PO_TrackSettingsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_SettingsCommandMDT : public virtual uci::type::PO_SettingsCommandMDT, public virtual CapabilitySettingsCommandBaseType {
public:
  /** Indicates the subcapability settings to apply to this subsystem. All capabilities that are associated with the same
    * SubcapabilityID will be impacted the same in accordance to this settings command message. Any PO_Commands received
    * after this message has been processed will use these new settings unless directly overridden by settings specified in
    * the PO_Command. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SubCapability = asb_uci::base::BoundedList<uci::type::PO_SubCapabilitySettingsType, uci::type::accessorType::pO_SubCapabilitySettingsType, asb_uci::type::PO_SubCapabilitySettingsType>;

  /** Indicates the settings that can be applied for track. All capabilities that are associated with the same TrackOptions
    * ID in TrackSettings will be impacted the same in accordance to this settings command message. Any PO_Commands
    * received after this message has been processed will use these new settings unless directly overridden by settings
    * specified in the PO_Command. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using TrackSettings = asb_uci::base::BoundedList<uci::type::PO_TrackSettingsType, uci::type::accessorType::pO_TrackSettingsType, asb_uci::type::PO_TrackSettingsType>;

  /** The component settings specified in this field are used to set the default component settings used by the sensor. All
    * capabilities that are associated with the same ComponentID in ComponentSettings will be impacted the same in
    * accordance to this settings command message. Any PO_Commands received after this message has been processed will use
    * these new settings unless directly overridden by settings specified in the PO_Command. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ComponentSettings = asb_uci::base::BoundedList<uci::type::PO_ComponentSettingsType, uci::type::accessorType::pO_ComponentSettingsType, asb_uci::type::PO_ComponentSettingsType>;

  /** Specifies which messages are to be output by the Capability as the result of capability commands. Note: Only values
    * advertised in the Capability message are allowed. Any non-supported values should result in rejection of the settings
    * command. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 4]
    */
  using MessageOutput = asb_uci::base::BoundedList<uci::type::PO_MessageOutputsEnum, uci::type::accessorType::pO_MessageOutputsEnum, asb_uci::type::PO_MessageOutputsEnum>;

  /** The constructor */
  PO_SettingsCommandMDT();

  /** The copy constructor
    *
    * @param rhs The PO_SettingsCommandMDT to copy from
    */
  PO_SettingsCommandMDT(const PO_SettingsCommandMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_SettingsCommandMDT to move from
    */
  PO_SettingsCommandMDT(PO_SettingsCommandMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_SettingsCommandMDT to copy from
    * @return The PO_SettingsCommandMDT that was assigned
    */
  PO_SettingsCommandMDT& operator=(const PO_SettingsCommandMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_SettingsCommandMDT to move from
    * @return The PO_SettingsCommandMDT that was assigned
    */
  PO_SettingsCommandMDT& operator=(PO_SettingsCommandMDT&& rhs) = delete;

  /** The destructor */
  ~PO_SettingsCommandMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_SettingsCommandMDT whose contents are to be used to set this
    *      uci::type::PO_SettingsCommandMDT's contents.
    */
  void copy(const uci::type::PO_SettingsCommandMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_SettingsCommandMDT whose contents are to be used to set this
    *      uci::type::PO_SettingsCommandMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_SettingsCommandMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SubCapability field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCapability field.
    */
  const uci::type::PO_SettingsCommandMDT::SubCapability& getSubCapability() const override;

  /** Returns the accessor to the SubCapability field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCapability field.
    */
  uci::type::PO_SettingsCommandMDT::SubCapability& getSubCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& setSubCapability(const uci::type::PO_SettingsCommandMDT::SubCapability& accessor) override;

  /** Returns the accessor to the TrackSettings field contained in this message fragment
    *
    * @return The const reference to the accessor to the TrackSettings field.
    */
  const uci::type::PO_SettingsCommandMDT::TrackSettings& getTrackSettings() const override;

  /** Returns the accessor to the TrackSettings field contained in this message fragment
    *
    * @return The reference to the accessor to the TrackSettings field.
    */
  uci::type::PO_SettingsCommandMDT::TrackSettings& getTrackSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& setTrackSettings(const uci::type::PO_SettingsCommandMDT::TrackSettings& accessor) override;

  /** Returns the accessor to the ComponentSettings field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentSettings field.
    */
  const uci::type::PO_SettingsCommandMDT::ComponentSettings& getComponentSettings() const override;

  /** Returns the accessor to the ComponentSettings field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentSettings field.
    */
  uci::type::PO_SettingsCommandMDT::ComponentSettings& getComponentSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& setComponentSettings(const uci::type::PO_SettingsCommandMDT::ComponentSettings& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionConstraintsSettingsType& getCollectionConstraintsSettings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_CollectionConstraintsSettingsType& getCollectionConstraintsSettings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionConstraintsSettingsType& getCollectionConstraintsSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& setCollectionConstraintsSettings(const uci::type::PO_CollectionConstraintsSettingsType& accessor) override;

  /** Returns whether this optional field CollectionConstraintsSettingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionConstraintsSettings() const noexcept override;

  /** Enables the optional field such that getCollectionConstraintsSettings will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionConstraintsSettingsType& enableCollectionConstraintsSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& clearCollectionConstraintsSettings() noexcept override;

  /** Returns the accessor to the MessageOutput field contained in this message fragment
    *
    * @return The const reference to the accessor to the MessageOutput field.
    */
  const uci::type::PO_SettingsCommandMDT::MessageOutput& getMessageOutput() const override;

  /** Returns the accessor to the MessageOutput field contained in this message fragment
    *
    * @return The reference to the accessor to the MessageOutput field.
    */
  uci::type::PO_SettingsCommandMDT::MessageOutput& getMessageOutput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& setMessageOutput(const uci::type::PO_SettingsCommandMDT::MessageOutput& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getFOR_Settings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOR_Type& getFOR_Settings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getFOR_Settings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& setFOR_Settings(const uci::type::FOR_Type& accessor) override;

  /** Returns whether this optional field FOR_Settingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFOR_Settings() const noexcept override;

  /** Enables the optional field such that getFOR_Settings will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& enableFOR_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& clearFOR_Settings() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getThermalBlankingFOR_Settings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOR_Type& getThermalBlankingFOR_Settings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& getThermalBlankingFOR_Settings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& setThermalBlankingFOR_Settings(const uci::type::FOR_Type& accessor) override;

  /** Returns whether this optional field ThermalBlankingFOR_Settingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasThermalBlankingFOR_Settings() const noexcept override;

  /** Enables the optional field such that getThermalBlankingFOR_Settings will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Type& enableThermalBlankingFOR_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_SettingsCommandMDT& clearThermalBlankingFOR_Settings() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_SettingsCommandMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_SettingsCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_SettingsCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SubCapability> subCapability_Accessor;
  std::unique_ptr<TrackSettings> trackSettings_Accessor;
  std::unique_ptr<ComponentSettings> componentSettings_Accessor;
  std::unique_ptr<PO_CollectionConstraintsSettingsType> collectionConstraintsSettings_Accessor;
  std::unique_ptr<MessageOutput> messageOutput_Accessor;
  std::unique_ptr<FOR_Type> fOR_Settings_Accessor;
  std::unique_ptr<FOR_Type> thermalBlankingFOR_Settings_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_SETTINGSCOMMANDMDT_H
