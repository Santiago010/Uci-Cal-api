/** @file EffectMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_EFFECTMDT_H
#define ASB_UCI_TYPE_EFFECTMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/EffectTypeEnum.h"
#include "uci/type/EffectMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EffectID_Type;
class IdentityKindInstanceType;
class RequirementConstraintsType;
class RequirementGuidanceType;
class RequirementMetadataType;
class RequirementTargetConstraintsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EffectMDT : public virtual uci::type::EffectMDT {
public:
  /** Indicates the target of the Effect; the object the Effect will be done to or for. If omitted, the Effect places no
    * explicit limitation on which TargetObject it can be done to. See sibling EffectType element annotation for an overall
    * description of Effect structure. Note that the term "target" is used in a general sense. For some Requirement types,
    * a more suitable term might be "subject", "point", "location", etc. For example, the "target" of a SUPPORT Effect
    * could be a blue/friendly System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using TargetObject = asb_uci::base::BoundedList<uci::type::IdentityKindInstanceType, uci::type::accessorType::identityKindInstanceType, asb_uci::type::IdentityKindInstanceType>;

  /** Indicates a thing the sibling TargetObject must act on/against/toward to make the Effect applicable. See sibling
    * EffectType element annotation for an overall description of Effect structure. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using SecondaryObject = asb_uci::base::BoundedList<uci::type::IdentityKindInstanceType, uci::type::accessorType::identityKindInstanceType, asb_uci::type::IdentityKindInstanceType>;

  /** The constructor */
  EffectMDT();

  /** The copy constructor
    *
    * @param rhs The EffectMDT to copy from
    */
  EffectMDT(const EffectMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EffectMDT to move from
    */
  EffectMDT(EffectMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EffectMDT to copy from
    * @return The EffectMDT that was assigned
    */
  EffectMDT& operator=(const EffectMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EffectMDT to move from
    * @return The EffectMDT that was assigned
    */
  EffectMDT& operator=(EffectMDT&& rhs) = delete;

  /** The destructor */
  virtual ~EffectMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EffectMDT whose contents are to be used to set this uci::type::EffectMDT's contents.
    */
  void copy(const uci::type::EffectMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EffectMDT whose contents are to be used to set this uci::type::EffectMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EffectMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the EffectID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EffectID field.
    */
  const uci::type::EffectID_Type& getEffectID() const override;

  /** Returns the accessor to the EffectID field contained in this message fragment
    *
    * @return The reference to the accessor to the EffectID field.
    */
  uci::type::EffectID_Type& getEffectID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setEffectID(const uci::type::EffectID_Type& accessor) override;

  /** Returns the contents of the message's EffectType field
    *
    * @return The contents of the EffectType field
    */
  const uci::type::EffectTypeEnum& getEffectType() const override;

  /** Returns the contents of the message's EffectType field
    *
    * @return The contents of the EffectType field
    */
  uci::type::EffectTypeEnum& getEffectType() override;

  /** Sets the contents of the message's EffectType field
    *
    * @param accessor The accessor to use to set the EffectType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setEffectType(const uci::type::EffectTypeEnum& accessor) override;

  /** Sets the contents of the message's EffectType field
    *
    * @param value The new value to set the EffectType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setEffectType(uci::type::EffectTypeEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& getEffectConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementConstraintsType& getEffectConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& getEffectConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setEffectConstraints(const uci::type::RequirementConstraintsType& accessor) override;

  /** Returns whether this optional field EffectConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEffectConstraints() const noexcept override;

  /** Enables the optional field such that getEffectConstraints will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& enableEffectConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& clearEffectConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementGuidanceType& getEffectGuidance_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementGuidanceType& getEffectGuidance() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementGuidanceType& getEffectGuidance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setEffectGuidance(const uci::type::RequirementGuidanceType& accessor) override;

  /** Returns whether this optional field EffectGuidanceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEffectGuidance() const noexcept override;

  /** Enables the optional field such that getEffectGuidance will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementGuidanceType& enableEffectGuidance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& clearEffectGuidance() noexcept override;

  /** Returns the accessor to the TargetObject field contained in this message fragment
    *
    * @return The const reference to the accessor to the TargetObject field.
    */
  const uci::type::EffectMDT::TargetObject& getTargetObject() const override;

  /** Returns the accessor to the TargetObject field contained in this message fragment
    *
    * @return The reference to the accessor to the TargetObject field.
    */
  uci::type::EffectMDT::TargetObject& getTargetObject() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setTargetObject(const uci::type::EffectMDT::TargetObject& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementTargetConstraintsType& getTargetObjectConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementTargetConstraintsType& getTargetObjectConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementTargetConstraintsType& getTargetObjectConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setTargetObjectConstraints(const uci::type::RequirementTargetConstraintsType& accessor) override;

  /** Returns whether this optional field TargetObjectConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTargetObjectConstraints() const noexcept override;

  /** Enables the optional field such that getTargetObjectConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementTargetConstraintsType& enableTargetObjectConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& clearTargetObjectConstraints() noexcept override;

  /** Returns the accessor to the SecondaryObject field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecondaryObject field.
    */
  const uci::type::EffectMDT::SecondaryObject& getSecondaryObject() const override;

  /** Returns the accessor to the SecondaryObject field contained in this message fragment
    *
    * @return The reference to the accessor to the SecondaryObject field.
    */
  uci::type::EffectMDT::SecondaryObject& getSecondaryObject() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setSecondaryObject(const uci::type::EffectMDT::SecondaryObject& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementMetadataType& getMetadata_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementMetadataType& getMetadata() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementMetadataType& getMetadata() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& setMetadata(const uci::type::RequirementMetadataType& accessor) override;

  /** Returns whether this optional field Metadatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMetadata() const noexcept override;

  /** Enables the optional field such that getMetadata will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementMetadataType& enableMetadata(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EffectMDT& clearMetadata() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EffectMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EffectMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EffectMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EffectID_Type> effectID_Accessor;
  std::unique_ptr<EffectTypeEnum> effectType_Accessor;
  std::unique_ptr<RequirementConstraintsType> effectConstraints_Accessor;
  std::unique_ptr<RequirementGuidanceType> effectGuidance_Accessor;
  std::unique_ptr<TargetObject> targetObject_Accessor;
  std::unique_ptr<RequirementTargetConstraintsType> targetObjectConstraints_Accessor;
  std::unique_ptr<SecondaryObject> secondaryObject_Accessor;
  std::unique_ptr<RequirementMetadataType> metadata_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_EFFECTMDT_H
