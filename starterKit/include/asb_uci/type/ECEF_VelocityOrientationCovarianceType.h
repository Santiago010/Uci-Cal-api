/** @file ECEF_VelocityOrientationCovarianceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ECEF_VELOCITYORIENTATIONCOVARIANCETYPE_H
#define ASB_UCI_TYPE_ECEF_VELOCITYORIENTATIONCOVARIANCETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/ECEF_VelocityOrientationCovarianceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The 1-sigma velocity-orientation covariance terms in the Earth-Centered-Earth-Fixed (ECEF) coordinate system. The
  * covariances are symmetric and therefore the covariance values expressed here are the minimum set.
  */
class ECEF_VelocityOrientationCovarianceType : public virtual uci::type::ECEF_VelocityOrientationCovarianceType {
public:
  /** The constructor */
  ECEF_VelocityOrientationCovarianceType();

  /** The copy constructor
    *
    * @param rhs The ECEF_VelocityOrientationCovarianceType to copy from
    */
  ECEF_VelocityOrientationCovarianceType(const ECEF_VelocityOrientationCovarianceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ECEF_VelocityOrientationCovarianceType to move from
    */
  ECEF_VelocityOrientationCovarianceType(ECEF_VelocityOrientationCovarianceType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ECEF_VelocityOrientationCovarianceType to copy from
    * @return The ECEF_VelocityOrientationCovarianceType that was assigned
    */
  ECEF_VelocityOrientationCovarianceType& operator=(const ECEF_VelocityOrientationCovarianceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ECEF_VelocityOrientationCovarianceType to move from
    * @return The ECEF_VelocityOrientationCovarianceType that was assigned
    */
  ECEF_VelocityOrientationCovarianceType& operator=(ECEF_VelocityOrientationCovarianceType&& rhs) = delete;

  /** The destructor */
  virtual ~ECEF_VelocityOrientationCovarianceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ECEF_VelocityOrientationCovarianceType whose contents are to be used to set this
    *      uci::type::ECEF_VelocityOrientationCovarianceType's contents.
    */
  void copy(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ECEF_VelocityOrientationCovarianceType whose contents are to be used to set this
    *      uci::type::ECEF_VelocityOrientationCovarianceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's VxRr field
    *
    * @return The contents of the VxRr field
    */
  xs::Double getVxRr() const override;

  /** Sets the contents of the message's VxRr field
    *
    * @param value The new value to set the VxRr field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVxRr(xs::Double value) override;

  /** Returns the contents of the message's VxRp field
    *
    * @return The contents of the VxRp field
    */
  xs::Double getVxRp() const override;

  /** Sets the contents of the message's VxRp field
    *
    * @param value The new value to set the VxRp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVxRp(xs::Double value) override;

  /** Returns the contents of the message's VxRy field
    *
    * @return The contents of the VxRy field
    */
  xs::Double getVxRy() const override;

  /** Sets the contents of the message's VxRy field
    *
    * @param value The new value to set the VxRy field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVxRy(xs::Double value) override;

  /** Returns the contents of the message's VyRr field
    *
    * @return The contents of the VyRr field
    */
  xs::Double getVyRr() const override;

  /** Sets the contents of the message's VyRr field
    *
    * @param value The new value to set the VyRr field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVyRr(xs::Double value) override;

  /** Returns the contents of the message's VyRp field
    *
    * @return The contents of the VyRp field
    */
  xs::Double getVyRp() const override;

  /** Sets the contents of the message's VyRp field
    *
    * @param value The new value to set the VyRp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVyRp(xs::Double value) override;

  /** Returns the contents of the message's VyRy field
    *
    * @return The contents of the VyRy field
    */
  xs::Double getVyRy() const override;

  /** Sets the contents of the message's VyRy field
    *
    * @param value The new value to set the VyRy field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVyRy(xs::Double value) override;

  /** Returns the contents of the message's VzRr field
    *
    * @return The contents of the VzRr field
    */
  xs::Double getVzRr() const override;

  /** Sets the contents of the message's VzRr field
    *
    * @param value The new value to set the VzRr field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVzRr(xs::Double value) override;

  /** Returns the contents of the message's VzRp field
    *
    * @return The contents of the VzRp field
    */
  xs::Double getVzRp() const override;

  /** Sets the contents of the message's VzRp field
    *
    * @param value The new value to set the VzRp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVzRp(xs::Double value) override;

  /** Returns the contents of the message's VzRy field
    *
    * @return The contents of the VzRy field
    */
  xs::Double getVzRy() const override;

  /** Sets the contents of the message's VzRy field
    *
    * @param value The new value to set the VzRy field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& setVzRy(xs::Double value) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ECEF_VelocityOrientationCovarianceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_VelocityOrientationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  asb_xs::Double vxRr_Accessor{0.0};
  asb_xs::Double vxRp_Accessor{0.0};
  asb_xs::Double vxRy_Accessor{0.0};
  asb_xs::Double vyRr_Accessor{0.0};
  asb_xs::Double vyRp_Accessor{0.0};
  asb_xs::Double vyRy_Accessor{0.0};
  asb_xs::Double vzRr_Accessor{0.0};
  asb_xs::Double vzRp_Accessor{0.0};
  asb_xs::Double vzRy_Accessor{0.0};

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ECEF_VELOCITYORIENTATIONCOVARIANCETYPE_H
