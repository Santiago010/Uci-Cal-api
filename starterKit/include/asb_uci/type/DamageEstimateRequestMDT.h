/** @file DamageEstimateRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_DAMAGEESTIMATEREQUESTMDT_H
#define ASB_UCI_TYPE_DAMAGEESTIMATEREQUESTMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DamageCategoryEnum.h"
#include "asb_uci/type/DamageEstimateContentsEnum.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_uci/type/PercentType.h"
#include "asb_uci/type/RequestBaseType.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "uci/type/DamageEstimateRequestMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class DMPI_BlastPairingType;
class DMPI_DamageEstimateType;
class DamageEstimateTargetType;
class Point3D_Type;
class ProductMetadataID_Type;
class TaskID_Type;
class ZoneType;

/** See annotations in child elements and messages/elements that use this type for details. */
class DamageEstimateRequestMDT : public virtual uci::type::DamageEstimateRequestMDT, public virtual RequestBaseType {
public:
  /** Indicates a DMPI associated with this attack. If omitted, DMPI information should be retrieved via the sibling Target
    * element's Task reference. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using DMPI_Data = asb_uci::base::BoundedList<uci::type::DMPI_DamageEstimateType, uci::type::accessorType::dMPI_DamageEstimateType, asb_uci::type::DMPI_DamageEstimateType>;

  /** Indicates the ID of a data product from which this damage request should be derived. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ProductMetadataID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** Optional DMPI-to-BlastRadius pairings to be used for fratricide and collateral damage checks. If left unspecified,
    * DMPI will be looked up via TaskID, and blast radius (a.k.a. minimum safe distance) will be a lookup value based on
    * the weapon. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using DMPI_BlastPairing = asb_uci::base::BoundedList<uci::type::DMPI_BlastPairingType, uci::type::accessorType::dMPI_BlastPairingType, asb_uci::type::DMPI_BlastPairingType>;

  /** The constructor */
  DamageEstimateRequestMDT();

  /** The copy constructor
    *
    * @param rhs The DamageEstimateRequestMDT to copy from
    */
  DamageEstimateRequestMDT(const DamageEstimateRequestMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The DamageEstimateRequestMDT to move from
    */
  DamageEstimateRequestMDT(DamageEstimateRequestMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The DamageEstimateRequestMDT to copy from
    * @return The DamageEstimateRequestMDT that was assigned
    */
  DamageEstimateRequestMDT& operator=(const DamageEstimateRequestMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The DamageEstimateRequestMDT to move from
    * @return The DamageEstimateRequestMDT that was assigned
    */
  DamageEstimateRequestMDT& operator=(DamageEstimateRequestMDT&& rhs) = delete;

  /** The destructor */
  ~DamageEstimateRequestMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::DamageEstimateRequestMDT whose contents are to be used to set this
    *      uci::type::DamageEstimateRequestMDT's contents.
    */
  void copy(const uci::type::DamageEstimateRequestMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::DamageEstimateRequestMDT whose contents are to be used to set this
    *      uci::type::DamageEstimateRequestMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::DamageEstimateRequestMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's EstimateType field
    *
    * @return The contents of the EstimateType field
    */
  const uci::type::DamageCategoryEnum& getEstimateType() const override;

  /** Returns the contents of the message's EstimateType field
    *
    * @return The contents of the EstimateType field
    */
  uci::type::DamageCategoryEnum& getEstimateType() override;

  /** Sets the contents of the message's EstimateType field
    *
    * @param accessor The accessor to use to set the EstimateType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setEstimateType(const uci::type::DamageCategoryEnum& accessor) override;

  /** Sets the contents of the message's EstimateType field
    *
    * @param value The new value to set the EstimateType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setEstimateType(uci::type::DamageCategoryEnum::EnumerationItem value) override;

  /** Returns the contents of the message's EstimateContents field
    *
    * @return The contents of the EstimateContents field
    */
  const uci::type::DamageEstimateContentsEnum& getEstimateContents() const override;

  /** Returns the contents of the message's EstimateContents field
    *
    * @return The contents of the EstimateContents field
    */
  uci::type::DamageEstimateContentsEnum& getEstimateContents() override;

  /** Sets the contents of the message's EstimateContents field
    *
    * @param accessor The accessor to use to set the EstimateContents field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setEstimateContents(const uci::type::DamageEstimateContentsEnum& accessor) override;

  /** Sets the contents of the message's EstimateContents field
    *
    * @param value The new value to set the EstimateContents field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setEstimateContents(uci::type::DamageEstimateContentsEnum::EnumerationItem value) override;

  /** Returns the contents of the message's ReportingThreshold field
    *
    * @return The contents of the ReportingThreshold field
    */
  uci::type::PercentTypeValue getReportingThreshold() const override;

  /** Sets the contents of the message's ReportingThreshold field
    *
    * @param value The new value to set the ReportingThreshold field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setReportingThreshold(uci::type::PercentTypeValue value) override;

  /** Returns the accessor to the TargetData field contained in this message fragment
    *
    * @return The const reference to the accessor to the TargetData field.
    */
  const uci::type::DamageEstimateTargetType& getTargetData() const override;

  /** Returns the accessor to the TargetData field contained in this message fragment
    *
    * @return The reference to the accessor to the TargetData field.
    */
  uci::type::DamageEstimateTargetType& getTargetData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setTargetData(const uci::type::DamageEstimateTargetType& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString64Type& getTargetName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString64Type& getTargetName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString64Type& getTargetName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setTargetName(const uci::type::VisibleString64Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setTargetName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setTargetName(const char* value) override;

  /** Returns whether this optional field targetName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTargetName() const noexcept override;

  /** Enables the optional field such that getTargetName will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString64Type& enableTargetName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& clearTargetName() noexcept override;

  /** Returns the accessor to the DMPI_Data field contained in this message fragment
    *
    * @return The const reference to the accessor to the DMPI_Data field.
    */
  const uci::type::DamageEstimateRequestMDT::DMPI_Data& getDMPI_Data() const override;

  /** Returns the accessor to the DMPI_Data field contained in this message fragment
    *
    * @return The reference to the accessor to the DMPI_Data field.
    */
  uci::type::DamageEstimateRequestMDT::DMPI_Data& getDMPI_Data() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setDMPI_Data(const uci::type::DamageEstimateRequestMDT::DMPI_Data& accessor) override;

  /** Returns the accessor to the TaskID field contained in this message fragment
    *
    * @return The const reference to the accessor to the TaskID field.
    */
  const uci::type::TaskID_Type& getTaskID() const override;

  /** Returns the accessor to the TaskID field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskID field.
    */
  uci::type::TaskID_Type& getTaskID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setTaskID(const uci::type::TaskID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getReleasePoint_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point3D_Type& getReleasePoint() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getReleasePoint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setReleasePoint(const uci::type::Point3D_Type& accessor) override;

  /** Returns whether this optional field ReleasePointis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReleasePoint() const noexcept override;

  /** Enables the optional field such that getReleasePoint will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& enableReleasePoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& clearReleasePoint() noexcept override;

  /** Returns the accessor to the ProductMetadataID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductMetadataID field.
    */
  const uci::type::DamageEstimateRequestMDT::ProductMetadataID& getProductMetadataID() const override;

  /** Returns the accessor to the ProductMetadataID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductMetadataID field.
    */
  uci::type::DamageEstimateRequestMDT::ProductMetadataID& getProductMetadataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setProductMetadataID(const uci::type::DamageEstimateRequestMDT::ProductMetadataID& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getRespondBy() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setRespondBy(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field RespondByis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRespondBy() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& clearRespondBy() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& getEstimateZone_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ZoneType& getEstimateZone() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& getEstimateZone() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setEstimateZone(const uci::type::ZoneType& accessor) override;

  /** Returns whether this optional field EstimateZoneis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimateZone() const noexcept override;

  /** Enables the optional field such that getEstimateZone will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& enableEstimateZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& clearEstimateZone() noexcept override;

  /** Returns the accessor to the DMPI_BlastPairing field contained in this message fragment
    *
    * @return The const reference to the accessor to the DMPI_BlastPairing field.
    */
  const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& getDMPI_BlastPairing() const override;

  /** Returns the accessor to the DMPI_BlastPairing field contained in this message fragment
    *
    * @return The reference to the accessor to the DMPI_BlastPairing field.
    */
  uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& getDMPI_BlastPairing() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateRequestMDT& setDMPI_BlastPairing(const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<DamageEstimateRequestMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageEstimateRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::DamageEstimateRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<DamageCategoryEnum> estimateType_Accessor;
  std::unique_ptr<DamageEstimateContentsEnum> estimateContents_Accessor;
  PercentTypeValue reportingThreshold_Accessor{0.0};
  std::unique_ptr<DamageEstimateTargetType> targetData_Accessor;
  std::unique_ptr<VisibleString64Type> targetName_Accessor;
  std::unique_ptr<DMPI_Data> dMPI_Data_Accessor;
  std::unique_ptr<TaskID_Type> taskID_Accessor;
  std::unique_ptr<Point3D_Type> releasePoint_Accessor;
  std::unique_ptr<ProductMetadataID> productMetadataID_Accessor;
  boost::optional<DateTimeTypeValue> respondBy_Accessor;
  std::unique_ptr<ZoneType> estimateZone_Accessor;
  std::unique_ptr<DMPI_BlastPairing> dMPI_BlastPairing_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_DAMAGEESTIMATEREQUESTMDT_H
