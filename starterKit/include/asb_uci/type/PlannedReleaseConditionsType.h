/** @file PlannedReleaseConditionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANNEDRELEASECONDITIONSTYPE_H
#define ASB_UCI_TYPE_PLANNEDRELEASECONDITIONSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "uci/type/PlannedReleaseConditionsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class OrientationType;
class Point3D_Type;
class RoutePlanReferenceType;
class Velocity2D_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class PlannedReleaseConditionsType : public virtual uci::type::PlannedReleaseConditionsType {
public:
  /** The constructor */
  PlannedReleaseConditionsType();

  /** The copy constructor
    *
    * @param rhs The PlannedReleaseConditionsType to copy from
    */
  PlannedReleaseConditionsType(const PlannedReleaseConditionsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlannedReleaseConditionsType to move from
    */
  PlannedReleaseConditionsType(PlannedReleaseConditionsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlannedReleaseConditionsType to copy from
    * @return The PlannedReleaseConditionsType that was assigned
    */
  PlannedReleaseConditionsType& operator=(const PlannedReleaseConditionsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlannedReleaseConditionsType to move from
    * @return The PlannedReleaseConditionsType that was assigned
    */
  PlannedReleaseConditionsType& operator=(PlannedReleaseConditionsType&& rhs) = delete;

  /** The destructor */
  virtual ~PlannedReleaseConditionsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlannedReleaseConditionsType whose contents are to be used to set this
    *      uci::type::PlannedReleaseConditionsType's contents.
    */
  void copy(const uci::type::PlannedReleaseConditionsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlannedReleaseConditionsType whose contents are to be used to set this
    *      uci::type::PlannedReleaseConditionsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlannedReleaseConditionsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the Position field contained in this message fragment
    *
    * @return The const reference to the accessor to the Position field.
    */
  const uci::type::Point3D_Type& getPosition() const override;

  /** Returns the accessor to the Position field contained in this message fragment
    *
    * @return The reference to the accessor to the Position field.
    */
  uci::type::Point3D_Type& getPosition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& setPosition(const uci::type::Point3D_Type& accessor) override;

  /** Enables the optional field such that getPosition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& enablePosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Velocity field contained in this message fragment
    *
    * @return The const reference to the accessor to the Velocity field.
    */
  const uci::type::Velocity2D_Type& getVelocity() const override;

  /** Returns the accessor to the Velocity field contained in this message fragment
    *
    * @return The reference to the accessor to the Velocity field.
    */
  uci::type::Velocity2D_Type& getVelocity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& setVelocity(const uci::type::Velocity2D_Type& accessor) override;

  /** Enables the optional field such that getVelocity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Velocity2D_Type& enableVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrientationType& getOrientation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrientationType& getOrientation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrientationType& getOrientation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& setOrientation(const uci::type::OrientationType& accessor) override;

  /** Returns whether this optional field Orientationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrientation() const noexcept override;

  /** Enables the optional field such that getOrientation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrientationType& enableOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& clearOrientation() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Velocity2D_Type& getWindVelocity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Velocity2D_Type& getWindVelocity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Velocity2D_Type& getWindVelocity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& setWindVelocity(const uci::type::Velocity2D_Type& accessor) override;

  /** Returns whether this optional field WindVelocityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWindVelocity() const noexcept override;

  /** Enables the optional field such that getWindVelocity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Velocity2D_Type& enableWindVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& clearWindVelocity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanReferenceType& getAssociatedRoutePlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RoutePlanReferenceType& getAssociatedRoutePlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanReferenceType& getAssociatedRoutePlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& setAssociatedRoutePlan(const uci::type::RoutePlanReferenceType& accessor) override;

  /** Returns whether this optional field AssociatedRoutePlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssociatedRoutePlan() const noexcept override;

  /** Enables the optional field such that getAssociatedRoutePlan will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanReferenceType& enableAssociatedRoutePlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedReleaseConditionsType& clearAssociatedRoutePlan() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlannedReleaseConditionsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlannedReleaseConditionsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlannedReleaseConditionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Point3D_Type> position_Accessor;
  std::unique_ptr<Velocity2D_Type> velocity_Accessor;
  std::unique_ptr<OrientationType> orientation_Accessor;
  std::unique_ptr<Velocity2D_Type> windVelocity_Accessor;
  std::unique_ptr<RoutePlanReferenceType> associatedRoutePlan_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANNEDRELEASECONDITIONSTYPE_H
