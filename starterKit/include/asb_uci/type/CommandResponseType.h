/** @file CommandResponseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMANDRESPONSETYPE_H
#define ASB_UCI_TYPE_COMMANDRESPONSETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/EmptyType.h"
#include "uci/base/Accessor.h"
#include "uci/type/CommandResponseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AMTI_CommandResponseType;
class AO_CommandResponseType;
class AirSampleCommandResponseType;
class COMINT_CommandResponseType;
class CommRelayCommandResponseType;
class EA_CommandResponseType;
class ESM_CommandResponseType;
class PO_CommandResponseType;
class SAR_CommandResponseType;
class SMTI_CommandResponseType;
class StrikeWeaponCommandType;

/** See annotations in child elements and messages/elements that use this type for details. */
class CommandResponseType : public virtual uci::type::CommandResponseType {
public:
  /** The constructor */
  CommandResponseType();

  /** The copy constructor
    *
    * @param rhs The CommandResponseType to copy from
    */
  CommandResponseType(const CommandResponseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommandResponseType to move from
    */
  CommandResponseType(CommandResponseType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The CommandResponseType to copy from
    * @return The CommandResponseType that was assigned
    */
  CommandResponseType& operator=(const CommandResponseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommandResponseType to move from
    * @return The CommandResponseType that was assigned
    */
  CommandResponseType& operator=(CommandResponseType&& rhs) = delete;

  /** The destructor */
  virtual ~CommandResponseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommandResponseType whose contents are to be used to set this
    *      uci::type::CommandResponseType's contents.
    */
  void copy(const uci::type::CommandResponseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommandResponseType whose contents are to be used to set this
    *      uci::type::CommandResponseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommandResponseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::CommandResponseType::CommandResponseTypeChoice getCommandResponseTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getCommandResponseTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setCommandResponseTypeChoiceOrdinal(uci::type::CommandResponseType::CommandResponseTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The const reference to the accessor to the AirSample field.
    */
  uci::type::AirSampleCommandResponseType& getAirSample_() const;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The reference to the accessor to the AirSample field.
    */
  const uci::type::AirSampleCommandResponseType& getAirSample() const override;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The reference to the accessor to the AirSample field.
    */
  uci::type::AirSampleCommandResponseType& getAirSample() override;

  /** Sets this choice's choice to be airSample and initializes airSample to be the specified value. A deep copy will be
    * used by this method to set airSample
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setAirSample(const uci::type::AirSampleCommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AirSample.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AirSample, false otherwise.
    */
  bool isAirSample() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AirSample.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AirSample.
    */
  uci::type::AirSampleCommandResponseType& chooseAirSample(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AirSample.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AirSample.
    */
  uci::type::AirSampleCommandResponseType& chooseAirSample(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The const reference to the accessor to the AMTI field.
    */
  uci::type::AMTI_CommandResponseType& getAMTI_() const;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the AMTI field.
    */
  const uci::type::AMTI_CommandResponseType& getAMTI() const override;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the AMTI field.
    */
  uci::type::AMTI_CommandResponseType& getAMTI() override;

  /** Sets this choice's choice to be aMTI and initializes aMTI to be the specified value. A deep copy will be used by this
    * method to set aMTI
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setAMTI(const uci::type::AMTI_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AMTI, false otherwise.
    */
  bool isAMTI() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AMTI.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AMTI.
    */
  uci::type::AMTI_CommandResponseType& chooseAMTI(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AMTI.
    */
  uci::type::AMTI_CommandResponseType& chooseAMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The const reference to the accessor to the AO field.
    */
  uci::type::AO_CommandResponseType& getAO_() const;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The reference to the accessor to the AO field.
    */
  const uci::type::AO_CommandResponseType& getAO() const override;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The reference to the accessor to the AO field.
    */
  uci::type::AO_CommandResponseType& getAO() override;

  /** Sets this choice's choice to be aO and initializes aO to be the specified value. A deep copy will be used by this
    * method to set aO
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setAO(const uci::type::AO_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AO, false otherwise.
    */
  bool isAO() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AO.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AO.
    */
  uci::type::AO_CommandResponseType& chooseAO(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AO.
    */
  uci::type::AO_CommandResponseType& chooseAO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The const reference to the accessor to the COMINT field.
    */
  uci::type::COMINT_CommandResponseType& getCOMINT_() const;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The reference to the accessor to the COMINT field.
    */
  const uci::type::COMINT_CommandResponseType& getCOMINT() const override;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The reference to the accessor to the COMINT field.
    */
  uci::type::COMINT_CommandResponseType& getCOMINT() override;

  /** Sets this choice's choice to be cOMINT and initializes cOMINT to be the specified value. A deep copy will be used by
    * this method to set cOMINT
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setCOMINT(const uci::type::COMINT_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by COMINT.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by COMINT, false otherwise.
    */
  bool isCOMINT() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by COMINT.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by COMINT.
    */
  uci::type::COMINT_CommandResponseType& chooseCOMINT(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by COMINT.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by COMINT.
    */
  uci::type::COMINT_CommandResponseType& chooseCOMINT(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommRelay field.
    */
  uci::type::CommRelayCommandResponseType& getCommRelay_() const;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The reference to the accessor to the CommRelay field.
    */
  const uci::type::CommRelayCommandResponseType& getCommRelay() const override;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The reference to the accessor to the CommRelay field.
    */
  uci::type::CommRelayCommandResponseType& getCommRelay() override;

  /** Sets this choice's choice to be commRelay and initializes commRelay to be the specified value. A deep copy will be
    * used by this method to set commRelay
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setCommRelay(const uci::type::CommRelayCommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommRelay.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommRelay, false otherwise.
    */
  bool isCommRelay() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CommRelay.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommRelay.
    */
  uci::type::CommRelayCommandResponseType& chooseCommRelay(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CommRelay.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommRelay.
    */
  uci::type::CommRelayCommandResponseType& chooseCommRelay(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The const reference to the accessor to the EA field.
    */
  uci::type::EA_CommandResponseType& getEA_() const;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The reference to the accessor to the EA field.
    */
  const uci::type::EA_CommandResponseType& getEA() const override;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The reference to the accessor to the EA field.
    */
  uci::type::EA_CommandResponseType& getEA() override;

  /** Sets this choice's choice to be eA and initializes eA to be the specified value. A deep copy will be used by this
    * method to set eA
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setEA(const uci::type::EA_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EA.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EA, false otherwise.
    */
  bool isEA() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EA.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EA.
    */
  uci::type::EA_CommandResponseType& chooseEA(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EA.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EA.
    */
  uci::type::EA_CommandResponseType& chooseEA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The const reference to the accessor to the ESM field.
    */
  uci::type::ESM_CommandResponseType& getESM_() const;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The reference to the accessor to the ESM field.
    */
  const uci::type::ESM_CommandResponseType& getESM() const override;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The reference to the accessor to the ESM field.
    */
  uci::type::ESM_CommandResponseType& getESM() override;

  /** Sets this choice's choice to be eSM and initializes eSM to be the specified value. A deep copy will be used by this
    * method to set eSM
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setESM(const uci::type::ESM_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ESM.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ESM, false otherwise.
    */
  bool isESM() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ESM.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ESM.
    */
  uci::type::ESM_CommandResponseType& chooseESM(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ESM.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ESM.
    */
  uci::type::ESM_CommandResponseType& chooseESM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The const reference to the accessor to the PO field.
    */
  uci::type::PO_CommandResponseType& getPO_() const;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The reference to the accessor to the PO field.
    */
  const uci::type::PO_CommandResponseType& getPO() const override;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The reference to the accessor to the PO field.
    */
  uci::type::PO_CommandResponseType& getPO() override;

  /** Sets this choice's choice to be pO and initializes pO to be the specified value. A deep copy will be used by this
    * method to set pO
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setPO(const uci::type::PO_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PO, false otherwise.
    */
  bool isPO() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by PO.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PO.
    */
  uci::type::PO_CommandResponseType& choosePO(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by PO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PO.
    */
  uci::type::PO_CommandResponseType& choosePO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The const reference to the accessor to the SAR field.
    */
  uci::type::SAR_CommandResponseType& getSAR_() const;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The reference to the accessor to the SAR field.
    */
  const uci::type::SAR_CommandResponseType& getSAR() const override;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The reference to the accessor to the SAR field.
    */
  uci::type::SAR_CommandResponseType& getSAR() override;

  /** Sets this choice's choice to be sAR and initializes sAR to be the specified value. A deep copy will be used by this
    * method to set sAR
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setSAR(const uci::type::SAR_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SAR.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SAR, false otherwise.
    */
  bool isSAR() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SAR.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SAR.
    */
  uci::type::SAR_CommandResponseType& chooseSAR(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SAR.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SAR.
    */
  uci::type::SAR_CommandResponseType& chooseSAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The const reference to the accessor to the SMTI field.
    */
  uci::type::SMTI_CommandResponseType& getSMTI_() const;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the SMTI field.
    */
  const uci::type::SMTI_CommandResponseType& getSMTI() const override;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the SMTI field.
    */
  uci::type::SMTI_CommandResponseType& getSMTI() override;

  /** Sets this choice's choice to be sMTI and initializes sMTI to be the specified value. A deep copy will be used by this
    * method to set sMTI
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setSMTI(const uci::type::SMTI_CommandResponseType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SMTI, false otherwise.
    */
  bool isSMTI() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SMTI.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SMTI.
    */
  uci::type::SMTI_CommandResponseType& chooseSMTI(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SMTI.
    */
  uci::type::SMTI_CommandResponseType& chooseSMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The const reference to the accessor to the Strike field.
    */
  uci::type::StrikeWeaponCommandType& getStrike_() const;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The const reference to the accessor to the Strike field.
    */
  const uci::type::StrikeWeaponCommandType& getStrike() const override;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The reference to the accessor to the Strike field.
    */
  uci::type::StrikeWeaponCommandType& getStrike() override;

  /** Sets this choice's choice to be Strike and initializes Strike to be the specified value. A deep copy will be used by
    * this method to set Strike
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setStrike(const uci::type::StrikeWeaponCommandType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Strike.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Strike, false otherwise.
    */
  bool isStrike() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Strike.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Strike.
    */
  uci::type::StrikeWeaponCommandType& chooseStrike(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Strike.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Strike.
    */
  uci::type::StrikeWeaponCommandType& chooseStrike(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getWeatherRadar_() const;

  /** Returns the contents of the message's WeatherRadar item
    *
    * @return The contents of the WeatherRadar field
    */
  const uci::type::EmptyType& getWeatherRadar() const override;

  /** Returns the contents of the message's WeatherRadar item
    *
    * @return The contents of the WeatherRadar field
    */
  uci::type::EmptyType& getWeatherRadar() override;

  /** Sets this choice's choice to be WeatherRadar and initializes WeatherRadar to be the specified value
    *
    * @param value The new value to set WeatherRadar to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setWeatherRadar(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be WeatherRadar and initializes WeatherRadar to be the specified value
    *
    * @param value The new value to set WeatherRadar to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setWeatherRadar(const std::string& value) override;

  /** Sets this choice's choice to be WeatherRadar and initializes WeatherRadar to be the specified value
    *
    * @param value The new value to set WeatherRadar to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommandResponseType& setWeatherRadar(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeatherRadar.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeatherRadar, false otherwise.
    */
  bool isWeatherRadar() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherRadar.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherRadar.
    */
  uci::type::EmptyType& chooseWeatherRadar(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherRadar.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherRadar.
    */
  uci::type::EmptyType& chooseWeatherRadar(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommandResponseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommandResponseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommandResponseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<AirSampleCommandResponseType> airSample_Accessor;
  std::unique_ptr<AMTI_CommandResponseType> aMTI_Accessor;
  std::unique_ptr<AO_CommandResponseType> aO_Accessor;
  std::unique_ptr<COMINT_CommandResponseType> cOMINT_Accessor;
  std::unique_ptr<CommRelayCommandResponseType> commRelay_Accessor;
  std::unique_ptr<EA_CommandResponseType> eA_Accessor;
  std::unique_ptr<ESM_CommandResponseType> eSM_Accessor;
  std::unique_ptr<PO_CommandResponseType> pO_Accessor;
  std::unique_ptr<SAR_CommandResponseType> sAR_Accessor;
  std::unique_ptr<SMTI_CommandResponseType> sMTI_Accessor;
  std::unique_ptr<StrikeWeaponCommandType> strike_Accessor;
  std::unique_ptr<EmptyType> weatherRadar_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMANDRESPONSETYPE_H
