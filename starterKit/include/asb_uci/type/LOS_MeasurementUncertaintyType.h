/** @file LOS_MeasurementUncertaintyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_LOS_MEASUREMENTUNCERTAINTYTYPE_H
#define ASB_UCI_TYPE_LOS_MEASUREMENTUNCERTAINTYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/type/LOS_MeasurementUncertaintyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ArrivalDataUncertaintyType;
class ConeAngleSlantRangeUncertaintyType;
class ConeAngleUncertaintyType;
class LOS_SlantRangeUncertaintyType;
class LOS_VarianceAndCovarianceType;
class SlantRangeUncertaintyType;

/** The uncertainty in the Line of Sight (LOS) measurements. See annotations in child elements and messages/elements for
  * more details.
  */
class LOS_MeasurementUncertaintyType : public virtual uci::type::LOS_MeasurementUncertaintyType {
public:
  /** The constructor */
  LOS_MeasurementUncertaintyType();

  /** The copy constructor
    *
    * @param rhs The LOS_MeasurementUncertaintyType to copy from
    */
  LOS_MeasurementUncertaintyType(const LOS_MeasurementUncertaintyType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The LOS_MeasurementUncertaintyType to move from
    */
  LOS_MeasurementUncertaintyType(LOS_MeasurementUncertaintyType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The LOS_MeasurementUncertaintyType to copy from
    * @return The LOS_MeasurementUncertaintyType that was assigned
    */
  LOS_MeasurementUncertaintyType& operator=(const LOS_MeasurementUncertaintyType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The LOS_MeasurementUncertaintyType to move from
    * @return The LOS_MeasurementUncertaintyType that was assigned
    */
  LOS_MeasurementUncertaintyType& operator=(LOS_MeasurementUncertaintyType&& rhs) = delete;

  /** The destructor */
  virtual ~LOS_MeasurementUncertaintyType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::LOS_MeasurementUncertaintyType whose contents are to be used to set this
    *      uci::type::LOS_MeasurementUncertaintyType's contents.
    */
  void copy(const uci::type::LOS_MeasurementUncertaintyType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::LOS_MeasurementUncertaintyType whose contents are to be used to set this
    *      uci::type::LOS_MeasurementUncertaintyType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::LOS_MeasurementUncertaintyType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_VarianceAndCovarianceType& getLOS_Uncertainty_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LOS_VarianceAndCovarianceType& getLOS_Uncertainty() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_VarianceAndCovarianceType& getLOS_Uncertainty() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& setLOS_Uncertainty(const uci::type::LOS_VarianceAndCovarianceType& accessor) override;

  /** Returns whether this optional field LOS_Uncertaintyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLOS_Uncertainty() const noexcept override;

  /** Enables the optional field such that getLOS_Uncertainty will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_VarianceAndCovarianceType& enableLOS_Uncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& clearLOS_Uncertainty() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConeAngleUncertaintyType& getConeAngleUncertainty_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ConeAngleUncertaintyType& getConeAngleUncertainty() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConeAngleUncertaintyType& getConeAngleUncertainty() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& setConeAngleUncertainty(const uci::type::ConeAngleUncertaintyType& accessor) override;

  /** Returns whether this optional field ConeAngleUncertaintyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConeAngleUncertainty() const noexcept override;

  /** Enables the optional field such that getConeAngleUncertainty will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConeAngleUncertaintyType& enableConeAngleUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& clearConeAngleUncertainty() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArrivalDataUncertaintyType& getArrivalDataUncertainty_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ArrivalDataUncertaintyType& getArrivalDataUncertainty() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArrivalDataUncertaintyType& getArrivalDataUncertainty() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& setArrivalDataUncertainty(const uci::type::ArrivalDataUncertaintyType& accessor) override;

  /** Returns whether this optional field ArrivalDataUncertaintyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasArrivalDataUncertainty() const noexcept override;

  /** Enables the optional field such that getArrivalDataUncertainty will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArrivalDataUncertaintyType& enableArrivalDataUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& clearArrivalDataUncertainty() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SlantRangeUncertaintyType& getSlantRangeUncertainty_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SlantRangeUncertaintyType& getSlantRangeUncertainty() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SlantRangeUncertaintyType& getSlantRangeUncertainty() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& setSlantRangeUncertainty(const uci::type::SlantRangeUncertaintyType& accessor) override;

  /** Returns whether this optional field SlantRangeUncertaintyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSlantRangeUncertainty() const noexcept override;

  /** Enables the optional field such that getSlantRangeUncertainty will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SlantRangeUncertaintyType& enableSlantRangeUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& clearSlantRangeUncertainty() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConeAngleSlantRangeUncertaintyType& getConeAngleSlantRangeUncertainty_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ConeAngleSlantRangeUncertaintyType& getConeAngleSlantRangeUncertainty() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConeAngleSlantRangeUncertaintyType& getConeAngleSlantRangeUncertainty() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& setConeAngleSlantRangeUncertainty(const uci::type::ConeAngleSlantRangeUncertaintyType& accessor) override;

  /** Returns whether this optional field ConeAngleSlantRangeUncertaintyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConeAngleSlantRangeUncertainty() const noexcept override;

  /** Enables the optional field such that getConeAngleSlantRangeUncertainty will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConeAngleSlantRangeUncertaintyType& enableConeAngleSlantRangeUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& clearConeAngleSlantRangeUncertainty() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_SlantRangeUncertaintyType& getLOS_SlantRangeUncertainty_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LOS_SlantRangeUncertaintyType& getLOS_SlantRangeUncertainty() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_SlantRangeUncertaintyType& getLOS_SlantRangeUncertainty() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& setLOS_SlantRangeUncertainty(const uci::type::LOS_SlantRangeUncertaintyType& accessor) override;

  /** Returns whether this optional field LOS_SlantRangeUncertaintyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLOS_SlantRangeUncertainty() const noexcept override;

  /** Enables the optional field such that getLOS_SlantRangeUncertainty will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_SlantRangeUncertaintyType& enableLOS_SlantRangeUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LOS_MeasurementUncertaintyType& clearLOS_SlantRangeUncertainty() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<LOS_MeasurementUncertaintyType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_MeasurementUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::LOS_MeasurementUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<LOS_VarianceAndCovarianceType> lOS_Uncertainty_Accessor;
  std::unique_ptr<ConeAngleUncertaintyType> coneAngleUncertainty_Accessor;
  std::unique_ptr<ArrivalDataUncertaintyType> arrivalDataUncertainty_Accessor;
  std::unique_ptr<SlantRangeUncertaintyType> slantRangeUncertainty_Accessor;
  std::unique_ptr<ConeAngleSlantRangeUncertaintyType> coneAngleSlantRangeUncertainty_Accessor;
  std::unique_ptr<LOS_SlantRangeUncertaintyType> lOS_SlantRangeUncertainty_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_LOS_MEASUREMENTUNCERTAINTYTYPE_H
