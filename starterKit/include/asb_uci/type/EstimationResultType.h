/** @file EstimationResultType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ESTIMATIONRESULTTYPE_H
#define ASB_UCI_TYPE_ESTIMATIONRESULTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/DateTimeType.h"
#include "uci/type/EstimationResultType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityPlanExecutionStatusMDT;
class EffectPlanExecutionStatusMDT;
class MissionPlanExecutionStatusMDT;
class NavigationReportMDT;
class OrbitActivityPlanExecutionStatusMDT;
class OrbitPlanExecutionStatusMDT;
class PackageStatusMDT;
class PositionReportMDT;
class RouteActivityPlanExecutionStatusMDT;
class RoutePlanExecutionStatusMDT;
class SystemOrbitReportMDT;
class SystemOrbitalPositionReportMDT;
class SystemStatusMDT;
class TaskPlanExecutionStatusMDT;

/** See annotations in child elements and messages/elements that use this type for details. */
class EstimationResultType : public virtual uci::type::EstimationResultType {
public:
  /** The constructor */
  EstimationResultType();

  /** The copy constructor
    *
    * @param rhs The EstimationResultType to copy from
    */
  EstimationResultType(const EstimationResultType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EstimationResultType to move from
    */
  EstimationResultType(EstimationResultType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EstimationResultType to copy from
    * @return The EstimationResultType that was assigned
    */
  EstimationResultType& operator=(const EstimationResultType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EstimationResultType to move from
    * @return The EstimationResultType that was assigned
    */
  EstimationResultType& operator=(EstimationResultType&& rhs) = delete;

  /** The destructor */
  virtual ~EstimationResultType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EstimationResultType whose contents are to be used to set this
    *      uci::type::EstimationResultType's contents.
    */
  void copy(const uci::type::EstimationResultType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EstimationResultType whose contents are to be used to set this
    *      uci::type::EstimationResultType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EstimationResultType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionPlanExecutionStatusMDT& getMissionPlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MissionPlanExecutionStatusMDT& getMissionPlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionPlanExecutionStatusMDT& getMissionPlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setMissionPlanExecutionStatus(const uci::type::MissionPlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field MissionPlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionPlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getMissionPlanExecutionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionPlanExecutionStatusMDT& enableMissionPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearMissionPlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TaskPlanExecutionStatusMDT& getTaskPlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::TaskPlanExecutionStatusMDT& getTaskPlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TaskPlanExecutionStatusMDT& getTaskPlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setTaskPlanExecutionStatus(const uci::type::TaskPlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field TaskPlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTaskPlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getTaskPlanExecutionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TaskPlanExecutionStatusMDT& enableTaskPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearTaskPlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanExecutionStatusMDT& getRoutePlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RoutePlanExecutionStatusMDT& getRoutePlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanExecutionStatusMDT& getRoutePlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setRoutePlanExecutionStatus(const uci::type::RoutePlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field RoutePlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRoutePlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getRoutePlanExecutionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanExecutionStatusMDT& enableRoutePlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearRoutePlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RouteActivityPlanExecutionStatusMDT& getRouteActivityPlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RouteActivityPlanExecutionStatusMDT& getRouteActivityPlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RouteActivityPlanExecutionStatusMDT& getRouteActivityPlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setRouteActivityPlanExecutionStatus(const uci::type::RouteActivityPlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field RouteActivityPlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRouteActivityPlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getRouteActivityPlanExecutionStatus will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RouteActivityPlanExecutionStatusMDT& enableRouteActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearRouteActivityPlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitPlanExecutionStatusMDT& getOrbitPlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitPlanExecutionStatusMDT& getOrbitPlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitPlanExecutionStatusMDT& getOrbitPlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setOrbitPlanExecutionStatus(const uci::type::OrbitPlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field OrbitPlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrbitPlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getOrbitPlanExecutionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitPlanExecutionStatusMDT& enableOrbitPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearOrbitPlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitActivityPlanExecutionStatusMDT& getOrbitActivityPlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitActivityPlanExecutionStatusMDT& getOrbitActivityPlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitActivityPlanExecutionStatusMDT& getOrbitActivityPlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setOrbitActivityPlanExecutionStatus(const uci::type::OrbitActivityPlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field OrbitActivityPlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrbitActivityPlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getOrbitActivityPlanExecutionStatus will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitActivityPlanExecutionStatusMDT& enableOrbitActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearOrbitActivityPlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanExecutionStatusMDT& getActivityPlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActivityPlanExecutionStatusMDT& getActivityPlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanExecutionStatusMDT& getActivityPlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setActivityPlanExecutionStatus(const uci::type::ActivityPlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field ActivityPlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivityPlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getActivityPlanExecutionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityPlanExecutionStatusMDT& enableActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearActivityPlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EffectPlanExecutionStatusMDT& getEffectPlanExecutionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EffectPlanExecutionStatusMDT& getEffectPlanExecutionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EffectPlanExecutionStatusMDT& getEffectPlanExecutionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setEffectPlanExecutionStatus(const uci::type::EffectPlanExecutionStatusMDT& accessor) override;

  /** Returns whether this optional field EffectPlanExecutionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEffectPlanExecutionStatus() const noexcept override;

  /** Enables the optional field such that getEffectPlanExecutionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EffectPlanExecutionStatusMDT& enableEffectPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearEffectPlanExecutionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NavigationReportMDT& getNavigationReport_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NavigationReportMDT& getNavigationReport() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NavigationReportMDT& getNavigationReport() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setNavigationReport(const uci::type::NavigationReportMDT& accessor) override;

  /** Returns whether this optional field NavigationReportis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNavigationReport() const noexcept override;

  /** Enables the optional field such that getNavigationReport will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NavigationReportMDT& enableNavigationReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearNavigationReport() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionReportMDT& getPositionReport_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PositionReportMDT& getPositionReport() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionReportMDT& getPositionReport() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setPositionReport(const uci::type::PositionReportMDT& accessor) override;

  /** Returns whether this optional field PositionReportis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPositionReport() const noexcept override;

  /** Enables the optional field such that getPositionReport will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionReportMDT& enablePositionReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearPositionReport() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitReportMDT& getSystemOrbitReport_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemOrbitReportMDT& getSystemOrbitReport() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitReportMDT& getSystemOrbitReport() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setSystemOrbitReport(const uci::type::SystemOrbitReportMDT& accessor) override;

  /** Returns whether this optional field SystemOrbitReportis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSystemOrbitReport() const noexcept override;

  /** Enables the optional field such that getSystemOrbitReport will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitReportMDT& enableSystemOrbitReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearSystemOrbitReport() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitalPositionReportMDT& getSystemOrbitalPositionReport_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemOrbitalPositionReportMDT& getSystemOrbitalPositionReport() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitalPositionReportMDT& getSystemOrbitalPositionReport() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setSystemOrbitalPositionReport(const uci::type::SystemOrbitalPositionReportMDT& accessor) override;

  /** Returns whether this optional field SystemOrbitalPositionReportis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSystemOrbitalPositionReport() const noexcept override;

  /** Enables the optional field such that getSystemOrbitalPositionReport will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemOrbitalPositionReportMDT& enableSystemOrbitalPositionReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearSystemOrbitalPositionReport() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemStatusMDT& getSystemStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemStatusMDT& getSystemStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemStatusMDT& getSystemStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setSystemStatus(const uci::type::SystemStatusMDT& accessor) override;

  /** Returns whether this optional field SystemStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSystemStatus() const noexcept override;

  /** Enables the optional field such that getSystemStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemStatusMDT& enableSystemStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearSystemStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PackageStatusMDT& getPackageStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PackageStatusMDT& getPackageStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PackageStatusMDT& getPackageStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setPackageStatus(const uci::type::PackageStatusMDT& accessor) override;

  /** Returns whether this optional field PackageStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPackageStatus() const noexcept override;

  /** Enables the optional field such that getPackageStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PackageStatusMDT& enablePackageStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& clearPackageStatus() noexcept override;

  /** Returns the contents of the message's Timestamp field
    *
    * @return The contents of the Timestamp field
    */
  uci::type::DateTimeTypeValue getTimestamp() const override;

  /** Sets the contents of the message's Timestamp field
    *
    * @param value The new value to set the Timestamp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EstimationResultType& setTimestamp(uci::type::DateTimeTypeValue value) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EstimationResultType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EstimationResultType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EstimationResultType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MissionPlanExecutionStatusMDT> missionPlanExecutionStatus_Accessor;
  std::unique_ptr<TaskPlanExecutionStatusMDT> taskPlanExecutionStatus_Accessor;
  std::unique_ptr<RoutePlanExecutionStatusMDT> routePlanExecutionStatus_Accessor;
  std::unique_ptr<RouteActivityPlanExecutionStatusMDT> routeActivityPlanExecutionStatus_Accessor;
  std::unique_ptr<OrbitPlanExecutionStatusMDT> orbitPlanExecutionStatus_Accessor;
  std::unique_ptr<OrbitActivityPlanExecutionStatusMDT> orbitActivityPlanExecutionStatus_Accessor;
  std::unique_ptr<ActivityPlanExecutionStatusMDT> activityPlanExecutionStatus_Accessor;
  std::unique_ptr<EffectPlanExecutionStatusMDT> effectPlanExecutionStatus_Accessor;
  std::unique_ptr<NavigationReportMDT> navigationReport_Accessor;
  std::unique_ptr<PositionReportMDT> positionReport_Accessor;
  std::unique_ptr<SystemOrbitReportMDT> systemOrbitReport_Accessor;
  std::unique_ptr<SystemOrbitalPositionReportMDT> systemOrbitalPositionReport_Accessor;
  std::unique_ptr<SystemStatusMDT> systemStatus_Accessor;
  std::unique_ptr<PackageStatusMDT> packageStatus_Accessor;
  DateTimeTypeValue timestamp_Accessor{0};

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ESTIMATIONRESULTTYPE_H
