/** @file IdentityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_IDENTITYTYPE_H
#define ASB_UCI_TYPE_IDENTITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_IdentityType;
class EmitterIdentityType;
class EnvironmentIdentityType;
class FacilityIdentificationType;
class PlatformIdentityType;
class SpecificEmitterIdentityType;
class SpecificIdentityType;
class StandardIdentityType;
class StoreType;
class VehicleIdentificationType;

/** See annotations in child elements and messages/elements that use this type for details. */
class IdentityType : public virtual uci::type::IdentityType {
public:
  /** Indicates an emitter type that has been identified in association with the asset. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Emitter = asb_uci::base::BoundedList<uci::type::EmitterIdentityType, uci::type::accessorType::emitterIdentityType, asb_uci::type::EmitterIdentityType>;

  /** Indicates a specific emitter type ***instance*** that has been identified in association with the asset. Specific
    * Emitter Identification (SEI) technology passively measures emitters, and characterizes unique emitter signatures that
    * can be used for friendly or enemy emitter identification and fingerprinting. A SEI and this SpecificEmitter element
    * refer to a specific physical instance of a type of emitter as given in the sibling EmitterType element. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SpecificEmitter = asb_uci::base::BoundedList<uci::type::SpecificEmitterIdentityType, uci::type::accessorType::specificEmitterIdentityType, asb_uci::type::SpecificEmitterIdentityType>;

  /** The constructor */
  IdentityType();

  /** The copy constructor
    *
    * @param rhs The IdentityType to copy from
    */
  IdentityType(const IdentityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The IdentityType to move from
    */
  IdentityType(IdentityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The IdentityType to copy from
    * @return The IdentityType that was assigned
    */
  IdentityType& operator=(const IdentityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The IdentityType to move from
    * @return The IdentityType that was assigned
    */
  IdentityType& operator=(IdentityType&& rhs) = delete;

  /** The destructor */
  virtual ~IdentityType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::IdentityType whose contents are to be used to set this uci::type::IdentityType's
    *      contents.
    */
  void copy(const uci::type::IdentityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::IdentityType whose contents are to be used to set this uci::type::IdentityType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::IdentityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StandardIdentityType& getStandard_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::StandardIdentityType& getStandard() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StandardIdentityType& getStandard() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setStandard(const uci::type::StandardIdentityType& accessor) override;

  /** Returns whether this optional field Standardis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStandard() const noexcept override;

  /** Enables the optional field such that getStandard will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StandardIdentityType& enableStandard(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearStandard() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnvironmentIdentityType& getEnvironment_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EnvironmentIdentityType& getEnvironment() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnvironmentIdentityType& getEnvironment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setEnvironment(const uci::type::EnvironmentIdentityType& accessor) override;

  /** Returns whether this optional field Environmentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEnvironment() const noexcept override;

  /** Enables the optional field such that getEnvironment will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnvironmentIdentityType& enableEnvironment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearEnvironment() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformIdentityType& getPlatform_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PlatformIdentityType& getPlatform() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformIdentityType& getPlatform() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setPlatform(const uci::type::PlatformIdentityType& accessor) override;

  /** Returns whether this optional field Platformis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlatform() const noexcept override;

  /** Enables the optional field such that getPlatform will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformIdentityType& enablePlatform(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearPlatform() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpecificIdentityType& getSpecific_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SpecificIdentityType& getSpecific() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpecificIdentityType& getSpecific() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setSpecific(const uci::type::SpecificIdentityType& accessor) override;

  /** Returns whether this optional field Specificis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSpecific() const noexcept override;

  /** Enables the optional field such that getSpecific will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpecificIdentityType& enableSpecific(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearSpecific() noexcept override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Emitter field.
    */
  const uci::type::IdentityType::Emitter& getEmitter() const override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The reference to the accessor to the Emitter field.
    */
  uci::type::IdentityType::Emitter& getEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setEmitter(const uci::type::IdentityType::Emitter& accessor) override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificEmitter field.
    */
  const uci::type::IdentityType::SpecificEmitter& getSpecificEmitter() const override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificEmitter field.
    */
  uci::type::IdentityType::SpecificEmitter& getSpecificEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setSpecificEmitter(const uci::type::IdentityType::SpecificEmitter& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FacilityIdentificationType& getSpecificFacility_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FacilityIdentificationType& getSpecificFacility() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FacilityIdentificationType& getSpecificFacility() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setSpecificFacility(const uci::type::FacilityIdentificationType& accessor) override;

  /** Returns whether this optional field SpecificFacilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSpecificFacility() const noexcept override;

  /** Enables the optional field such that getSpecificFacility will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FacilityIdentificationType& enableSpecificFacility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearSpecificFacility() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleIdentificationType& getSpecificVehicle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VehicleIdentificationType& getSpecificVehicle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleIdentificationType& getSpecificVehicle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setSpecificVehicle(const uci::type::VehicleIdentificationType& accessor) override;

  /** Returns whether this optional field SpecificVehicleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSpecificVehicle() const noexcept override;

  /** Enables the optional field such that getSpecificVehicle will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VehicleIdentificationType& enableSpecificVehicle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearSpecificVehicle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_IdentityType& getEOB_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EOB_IdentityType& getEOB() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_IdentityType& getEOB() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setEOB(const uci::type::EOB_IdentityType& accessor) override;

  /** Returns whether this optional field EOBis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEOB() const noexcept override;

  /** Enables the optional field such that getEOB will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_IdentityType& enableEOB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearEOB() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StoreType& getWeapon_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::StoreType& getWeapon() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StoreType& getWeapon() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& setWeapon(const uci::type::StoreType& accessor) override;

  /** Returns whether this optional field Weaponis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWeapon() const noexcept override;

  /** Enables the optional field such that getWeapon will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StoreType& enableWeapon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IdentityType& clearWeapon() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<IdentityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::IdentityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::IdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<StandardIdentityType> standard_Accessor;
  std::unique_ptr<EnvironmentIdentityType> environment_Accessor;
  std::unique_ptr<PlatformIdentityType> platform_Accessor;
  std::unique_ptr<SpecificIdentityType> specific_Accessor;
  std::unique_ptr<Emitter> emitter_Accessor;
  std::unique_ptr<SpecificEmitter> specificEmitter_Accessor;
  std::unique_ptr<FacilityIdentificationType> specificFacility_Accessor;
  std::unique_ptr<VehicleIdentificationType> specificVehicle_Accessor;
  std::unique_ptr<EOB_IdentityType> eOB_Accessor;
  std::unique_ptr<StoreType> weapon_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_IDENTITYTYPE_H
