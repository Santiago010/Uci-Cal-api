/** @file CommStarlinkControlType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMSTARLINKCONTROLTYPE_H
#define ASB_UCI_TYPE_COMMSTARLINKCONTROLTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/PointingControlModeEnum.h"
#include "asb_uci/type/PositionModeEnum.h"
#include "uci/type/CommStarlinkControlType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class BeamPointingReferenceType;
class PolarizationType;

/** See annotations in child elements and messages/elements that use this type for details. */
class CommStarlinkControlType : public virtual uci::type::CommStarlinkControlType {
public:
  /** The constructor */
  CommStarlinkControlType();

  /** The copy constructor
    *
    * @param rhs The CommStarlinkControlType to copy from
    */
  CommStarlinkControlType(const CommStarlinkControlType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommStarlinkControlType to move from
    */
  CommStarlinkControlType(CommStarlinkControlType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommStarlinkControlType to copy from
    * @return The CommStarlinkControlType that was assigned
    */
  CommStarlinkControlType& operator=(const CommStarlinkControlType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommStarlinkControlType to move from
    * @return The CommStarlinkControlType that was assigned
    */
  CommStarlinkControlType& operator=(CommStarlinkControlType&& rhs) = delete;

  /** The destructor */
  virtual ~CommStarlinkControlType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommStarlinkControlType whose contents are to be used to set this
    *      uci::type::CommStarlinkControlType's contents.
    */
  void copy(const uci::type::CommStarlinkControlType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommStarlinkControlType whose contents are to be used to set this
    *      uci::type::CommStarlinkControlType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommStarlinkControlType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionModeEnum& getPositionMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PositionModeEnum& getPositionMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionModeEnum& getPositionMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& setPositionMode(const uci::type::PositionModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& setPositionMode(uci::type::PositionModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field PositionModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPositionMode() const noexcept override;

  /** Enables the optional field such that getPositionMode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionModeEnum& enablePositionMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& clearPositionMode() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PointingControlModeEnum& getPointingControlMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PointingControlModeEnum& getPointingControlMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PointingControlModeEnum& getPointingControlMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& setPointingControlMode(const uci::type::PointingControlModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& setPointingControlMode(uci::type::PointingControlModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field PointingControlModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPointingControlMode() const noexcept override;

  /** Enables the optional field such that getPointingControlMode will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PointingControlModeEnum& enablePointingControlMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& clearPointingControlMode() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BeamPointingReferenceType& getBeamPointing_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::BeamPointingReferenceType& getBeamPointing() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BeamPointingReferenceType& getBeamPointing() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& setBeamPointing(const uci::type::BeamPointingReferenceType& accessor) override;

  /** Returns whether this optional field BeamPointingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBeamPointing() const noexcept override;

  /** Enables the optional field such that getBeamPointing will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BeamPointingReferenceType& enableBeamPointing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& clearBeamPointing() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PolarizationType& getPolarizationReference_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PolarizationType& getPolarizationReference() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PolarizationType& getPolarizationReference() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& setPolarizationReference(const uci::type::PolarizationType& accessor) override;

  /** Returns whether this optional field PolarizationReferenceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPolarizationReference() const noexcept override;

  /** Enables the optional field such that getPolarizationReference will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PolarizationType& enablePolarizationReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommStarlinkControlType& clearPolarizationReference() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommStarlinkControlType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommStarlinkControlType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommStarlinkControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PositionModeEnum> positionMode_Accessor;
  std::unique_ptr<PointingControlModeEnum> pointingControlMode_Accessor;
  std::unique_ptr<BeamPointingReferenceType> beamPointing_Accessor;
  std::unique_ptr<PolarizationType> polarizationReference_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMSTARLINKCONTROLTYPE_H
