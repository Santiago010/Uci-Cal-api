/** @file ConstrainingPlansType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CONSTRAININGPLANSTYPE_H
#define ASB_UCI_TYPE_CONSTRAININGPLANSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/PlanTypeEnum.h"
#include "uci/type/ConstrainingPlansType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActionPlanConstraintType;
class ActivityPlanConstraintType;
class CommAllocationConstraintType;
class EffectPlanConstraintType;
class MissionPlanID_Type;
class OrbitActivityPlanConstraintType;
class OrbitPlanConstraintType;
class ResponsePlanConstraintType;
class RouteActivityPlanConstraintType;
class RoutePlanConstraintType;
class TaskPlanConstraintType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ConstrainingPlansType : public virtual uci::type::ConstrainingPlansType {
public:
  /** Indicates a type of Plan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). A
    * *PlanCommand that includes the ancestor ReplanReason element occurs only during live and/or autonomous operations.
    * During live/autonomous operations, a constrained *PlanCommand is understood to be constrained by the current/latest
    * *Plan. Therefore, a *PlanCommand with a ReplanReason can indicate a constraining *Plan without listing the unique ID;
    * this element alone is sufficient to identify the constraining plan. During non-live/non-autonomous operations, when
    * the sibling ReplanReason element is not given, the sibling *Plan element corresponding to this element should include
    * the specific *Plan unique ID and constraining details corresponding to this element. If omitted during non-live
    * operations, the corresponding sibling *Plan element should also be omitted. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 1; Maximum: 11]
    */
  using ConstrainingPlanType = asb_uci::base::BoundedList<uci::type::PlanTypeEnum, uci::type::accessorType::planTypeEnum, asb_uci::type::PlanTypeEnum>;

  /** Indicates a MissionPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by a MissionPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using MissionPlanID = asb_uci::base::BoundedList<uci::type::MissionPlanID_Type, uci::type::accessorType::missionPlanID_Type, asb_uci::type::MissionPlanID_Type>;

  /** Indicates a TaskPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by a TaskPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using TaskPlan = asb_uci::base::BoundedList<uci::type::TaskPlanConstraintType, uci::type::accessorType::taskPlanConstraintType, asb_uci::type::TaskPlanConstraintType>;

  /** Indicates a RoutePlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by a RoutePlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using RoutePlan = asb_uci::base::BoundedList<uci::type::RoutePlanConstraintType, uci::type::accessorType::routePlanConstraintType, asb_uci::type::RoutePlanConstraintType>;

  /** Indicates a RouteActivityPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.).
    * For a given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might
    * initially be created in a particular order with updates in another order or orders. For other Systems, the order
    * might be completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of
    * *Plan might be a constraint on the creation or update of any other kind. When omitted, the
    * existing/referenced/commanded *Plan isn't constrained by a RouteActivityPlan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using RouteActivityPlan = asb_uci::base::BoundedList<uci::type::RouteActivityPlanConstraintType, uci::type::accessorType::routeActivityPlanConstraintType, asb_uci::type::RouteActivityPlanConstraintType>;

  /** Indicates an OrbitPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an OrbitPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OrbitPlan = asb_uci::base::BoundedList<uci::type::OrbitPlanConstraintType, uci::type::accessorType::orbitPlanConstraintType, asb_uci::type::OrbitPlanConstraintType>;

  /** Indicates an OrbitActivityPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.).
    * For a given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might
    * initially be created in a particular order with updates in another order or orders. For other Systems, the order
    * might be completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of
    * *Plan might be a constraint on the creation or update of any other kind. When omitted, the
    * existing/referenced/commanded *Plan isn't constrained by an OrbitActivityPlan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using OrbitActivityPlan = asb_uci::base::BoundedList<uci::type::OrbitActivityPlanConstraintType, uci::type::accessorType::orbitActivityPlanConstraintType, asb_uci::type::OrbitActivityPlanConstraintType>;

  /** Indicates an ActivityPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an ActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActivityPlan = asb_uci::base::BoundedList<uci::type::ActivityPlanConstraintType, uci::type::accessorType::activityPlanConstraintType, asb_uci::type::ActivityPlanConstraintType>;

  /** Indicates a CommAllocation that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For
    * a given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might
    * initially be created in a particular order with updates in another order or orders. For other Systems, the order
    * might be completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of
    * *Plan might be a constraint on the creation or update of any other kind. When omitted, the
    * existing/referenced/commanded *Plan isn't constrained by a CommAllocation. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using CommAllocation = asb_uci::base::BoundedList<uci::type::CommAllocationConstraintType, uci::type::accessorType::commAllocationConstraintType, asb_uci::type::CommAllocationConstraintType>;

  /** Indicates an EffectPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using EffectPlan = asb_uci::base::BoundedList<uci::type::EffectPlanConstraintType, uci::type::accessorType::effectPlanConstraintType, asb_uci::type::EffectPlanConstraintType>;

  /** Indicates an ActionPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActionPlan = asb_uci::base::BoundedList<uci::type::ActionPlanConstraintType, uci::type::accessorType::actionPlanConstraintType, asb_uci::type::ActionPlanConstraintType>;

  /** Indicates a ResponsePlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ResponsePlan = asb_uci::base::BoundedList<uci::type::ResponsePlanConstraintType, uci::type::accessorType::responsePlanConstraintType, asb_uci::type::ResponsePlanConstraintType>;

  /** The constructor */
  ConstrainingPlansType();

  /** The copy constructor
    *
    * @param rhs The ConstrainingPlansType to copy from
    */
  ConstrainingPlansType(const ConstrainingPlansType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ConstrainingPlansType to move from
    */
  ConstrainingPlansType(ConstrainingPlansType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ConstrainingPlansType to copy from
    * @return The ConstrainingPlansType that was assigned
    */
  ConstrainingPlansType& operator=(const ConstrainingPlansType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ConstrainingPlansType to move from
    * @return The ConstrainingPlansType that was assigned
    */
  ConstrainingPlansType& operator=(ConstrainingPlansType&& rhs) = delete;

  /** The destructor */
  virtual ~ConstrainingPlansType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ConstrainingPlansType whose contents are to be used to set this
    *      uci::type::ConstrainingPlansType's contents.
    */
  void copy(const uci::type::ConstrainingPlansType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ConstrainingPlansType whose contents are to be used to set this
    *      uci::type::ConstrainingPlansType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ConstrainingPlansType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ConstrainingPlanType field contained in this message fragment
    *
    * @return The const reference to the accessor to the ConstrainingPlanType field.
    */
  const uci::type::ConstrainingPlansType::ConstrainingPlanType& getConstrainingPlanType() const override;

  /** Returns the accessor to the ConstrainingPlanType field contained in this message fragment
    *
    * @return The reference to the accessor to the ConstrainingPlanType field.
    */
  uci::type::ConstrainingPlansType::ConstrainingPlanType& getConstrainingPlanType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setConstrainingPlanType(const uci::type::ConstrainingPlansType::ConstrainingPlanType& accessor) override;

  /** Returns the accessor to the MissionPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissionPlanID field.
    */
  const uci::type::ConstrainingPlansType::MissionPlanID& getMissionPlanID() const override;

  /** Returns the accessor to the MissionPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionPlanID field.
    */
  uci::type::ConstrainingPlansType::MissionPlanID& getMissionPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setMissionPlanID(const uci::type::ConstrainingPlansType::MissionPlanID& accessor) override;

  /** Returns the accessor to the TaskPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the TaskPlan field.
    */
  const uci::type::ConstrainingPlansType::TaskPlan& getTaskPlan() const override;

  /** Returns the accessor to the TaskPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskPlan field.
    */
  uci::type::ConstrainingPlansType::TaskPlan& getTaskPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setTaskPlan(const uci::type::ConstrainingPlansType::TaskPlan& accessor) override;

  /** Returns the accessor to the RoutePlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the RoutePlan field.
    */
  const uci::type::ConstrainingPlansType::RoutePlan& getRoutePlan() const override;

  /** Returns the accessor to the RoutePlan field contained in this message fragment
    *
    * @return The reference to the accessor to the RoutePlan field.
    */
  uci::type::ConstrainingPlansType::RoutePlan& getRoutePlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setRoutePlan(const uci::type::ConstrainingPlansType::RoutePlan& accessor) override;

  /** Returns the accessor to the RouteActivityPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteActivityPlan field.
    */
  const uci::type::ConstrainingPlansType::RouteActivityPlan& getRouteActivityPlan() const override;

  /** Returns the accessor to the RouteActivityPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteActivityPlan field.
    */
  uci::type::ConstrainingPlansType::RouteActivityPlan& getRouteActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setRouteActivityPlan(const uci::type::ConstrainingPlansType::RouteActivityPlan& accessor) override;

  /** Returns the accessor to the OrbitPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitPlan field.
    */
  const uci::type::ConstrainingPlansType::OrbitPlan& getOrbitPlan() const override;

  /** Returns the accessor to the OrbitPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitPlan field.
    */
  uci::type::ConstrainingPlansType::OrbitPlan& getOrbitPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setOrbitPlan(const uci::type::ConstrainingPlansType::OrbitPlan& accessor) override;

  /** Returns the accessor to the OrbitActivityPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitActivityPlan field.
    */
  const uci::type::ConstrainingPlansType::OrbitActivityPlan& getOrbitActivityPlan() const override;

  /** Returns the accessor to the OrbitActivityPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitActivityPlan field.
    */
  uci::type::ConstrainingPlansType::OrbitActivityPlan& getOrbitActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setOrbitActivityPlan(const uci::type::ConstrainingPlansType::OrbitActivityPlan& accessor) override;

  /** Returns the accessor to the ActivityPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityPlan field.
    */
  const uci::type::ConstrainingPlansType::ActivityPlan& getActivityPlan() const override;

  /** Returns the accessor to the ActivityPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityPlan field.
    */
  uci::type::ConstrainingPlansType::ActivityPlan& getActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setActivityPlan(const uci::type::ConstrainingPlansType::ActivityPlan& accessor) override;

  /** Returns the accessor to the CommAllocation field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommAllocation field.
    */
  const uci::type::ConstrainingPlansType::CommAllocation& getCommAllocation() const override;

  /** Returns the accessor to the CommAllocation field contained in this message fragment
    *
    * @return The reference to the accessor to the CommAllocation field.
    */
  uci::type::ConstrainingPlansType::CommAllocation& getCommAllocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setCommAllocation(const uci::type::ConstrainingPlansType::CommAllocation& accessor) override;

  /** Returns the accessor to the EffectPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the EffectPlan field.
    */
  const uci::type::ConstrainingPlansType::EffectPlan& getEffectPlan() const override;

  /** Returns the accessor to the EffectPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the EffectPlan field.
    */
  uci::type::ConstrainingPlansType::EffectPlan& getEffectPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setEffectPlan(const uci::type::ConstrainingPlansType::EffectPlan& accessor) override;

  /** Returns the accessor to the ActionPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActionPlan field.
    */
  const uci::type::ConstrainingPlansType::ActionPlan& getActionPlan() const override;

  /** Returns the accessor to the ActionPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the ActionPlan field.
    */
  uci::type::ConstrainingPlansType::ActionPlan& getActionPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setActionPlan(const uci::type::ConstrainingPlansType::ActionPlan& accessor) override;

  /** Returns the accessor to the ResponsePlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResponsePlan field.
    */
  const uci::type::ConstrainingPlansType::ResponsePlan& getResponsePlan() const override;

  /** Returns the accessor to the ResponsePlan field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponsePlan field.
    */
  uci::type::ConstrainingPlansType::ResponsePlan& getResponsePlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConstrainingPlansType& setResponsePlan(const uci::type::ConstrainingPlansType::ResponsePlan& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ConstrainingPlansType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ConstrainingPlansType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ConstrainingPlansType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ConstrainingPlanType> constrainingPlanType_Accessor;
  std::unique_ptr<MissionPlanID> missionPlanID_Accessor;
  std::unique_ptr<TaskPlan> taskPlan_Accessor;
  std::unique_ptr<RoutePlan> routePlan_Accessor;
  std::unique_ptr<RouteActivityPlan> routeActivityPlan_Accessor;
  std::unique_ptr<OrbitPlan> orbitPlan_Accessor;
  std::unique_ptr<OrbitActivityPlan> orbitActivityPlan_Accessor;
  std::unique_ptr<ActivityPlan> activityPlan_Accessor;
  std::unique_ptr<CommAllocation> commAllocation_Accessor;
  std::unique_ptr<EffectPlan> effectPlan_Accessor;
  std::unique_ptr<ActionPlan> actionPlan_Accessor;
  std::unique_ptr<ResponsePlan> responsePlan_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CONSTRAININGPLANSTYPE_H
