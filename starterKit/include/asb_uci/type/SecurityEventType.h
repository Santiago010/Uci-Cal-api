/** @file SecurityEventType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SECURITYEVENTTYPE_H
#define ASB_UCI_TYPE_SECURITYEVENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "uci/base/Accessor.h"
#include "uci/type/SecurityEventType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class SecurityAccessType;
class SecurityAuditManagementType;
class SecurityAuthenticationType;
class SecurityFileManagementType;
class SecurityIntegrityType;
class SecurityIntrusionDetectionType;
class SecurityKeyManagementType;
class SecurityPolicyManagementType;
class SecuritySanitizationType;
class SecuritySystemType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SecurityEventType : public virtual uci::type::SecurityEventType {
public:
  /** The constructor */
  SecurityEventType();

  /** The copy constructor
    *
    * @param rhs The SecurityEventType to copy from
    */
  SecurityEventType(const SecurityEventType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SecurityEventType to move from
    */
  SecurityEventType(SecurityEventType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The SecurityEventType to copy from
    * @return The SecurityEventType that was assigned
    */
  SecurityEventType& operator=(const SecurityEventType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SecurityEventType to move from
    * @return The SecurityEventType that was assigned
    */
  SecurityEventType& operator=(SecurityEventType&& rhs) = delete;

  /** The destructor */
  virtual ~SecurityEventType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SecurityEventType whose contents are to be used to set this
    *      uci::type::SecurityEventType's contents.
    */
  void copy(const uci::type::SecurityEventType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SecurityEventType whose contents are to be used to set this
    *      uci::type::SecurityEventType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SecurityEventType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::SecurityEventType::SecurityEventTypeChoice getSecurityEventTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getSecurityEventTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setSecurityEventTypeChoiceOrdinal(uci::type::SecurityEventType::SecurityEventTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AccountAccess field contained in this message fragment
    *
    * @return The const reference to the accessor to the AccountAccess field.
    */
  uci::type::SecurityAccessType& getAccountAccess_() const;

  /** Returns the accessor to the AccountAccess field contained in this message fragment
    *
    * @return The reference to the accessor to the AccountAccess field.
    */
  const uci::type::SecurityAccessType& getAccountAccess() const override;

  /** Returns the accessor to the AccountAccess field contained in this message fragment
    *
    * @return The reference to the accessor to the AccountAccess field.
    */
  uci::type::SecurityAccessType& getAccountAccess() override;

  /** Sets this choice's choice to be accountAccess and initializes accountAccess to be the specified value. A deep copy
    * will be used by this method to set accountAccess
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setAccountAccess(const uci::type::SecurityAccessType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AccountAccess.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AccountAccess, false otherwise.
    */
  bool isAccountAccess() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AccountAccess.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AccountAccess.
    */
  uci::type::SecurityAccessType& chooseAccountAccess(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AccountAccess.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AccountAccess.
    */
  uci::type::SecurityAccessType& chooseAccountAccess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Authentication field contained in this message fragment
    *
    * @return The const reference to the accessor to the Authentication field.
    */
  uci::type::SecurityAuthenticationType& getAuthentication_() const;

  /** Returns the accessor to the Authentication field contained in this message fragment
    *
    * @return The reference to the accessor to the Authentication field.
    */
  const uci::type::SecurityAuthenticationType& getAuthentication() const override;

  /** Returns the accessor to the Authentication field contained in this message fragment
    *
    * @return The reference to the accessor to the Authentication field.
    */
  uci::type::SecurityAuthenticationType& getAuthentication() override;

  /** Sets this choice's choice to be authentication and initializes authentication to be the specified value. A deep copy
    * will be used by this method to set authentication
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setAuthentication(const uci::type::SecurityAuthenticationType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Authentication.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Authentication, false otherwise.
    */
  bool isAuthentication() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Authentication.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Authentication.
    */
  uci::type::SecurityAuthenticationType& chooseAuthentication(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Authentication.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Authentication.
    */
  uci::type::SecurityAuthenticationType& chooseAuthentication(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Integrity field contained in this message fragment
    *
    * @return The const reference to the accessor to the Integrity field.
    */
  uci::type::SecurityIntegrityType& getIntegrity_() const;

  /** Returns the accessor to the Integrity field contained in this message fragment
    *
    * @return The reference to the accessor to the Integrity field.
    */
  const uci::type::SecurityIntegrityType& getIntegrity() const override;

  /** Returns the accessor to the Integrity field contained in this message fragment
    *
    * @return The reference to the accessor to the Integrity field.
    */
  uci::type::SecurityIntegrityType& getIntegrity() override;

  /** Sets this choice's choice to be integrity and initializes integrity to be the specified value. A deep copy will be
    * used by this method to set integrity
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setIntegrity(const uci::type::SecurityIntegrityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Integrity.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Integrity, false otherwise.
    */
  bool isIntegrity() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Integrity.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Integrity.
    */
  uci::type::SecurityIntegrityType& chooseIntegrity(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Integrity.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Integrity.
    */
  uci::type::SecurityIntegrityType& chooseIntegrity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AuditManagement field contained in this message fragment
    *
    * @return The const reference to the accessor to the AuditManagement field.
    */
  uci::type::SecurityAuditManagementType& getAuditManagement_() const;

  /** Returns the accessor to the AuditManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the AuditManagement field.
    */
  const uci::type::SecurityAuditManagementType& getAuditManagement() const override;

  /** Returns the accessor to the AuditManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the AuditManagement field.
    */
  uci::type::SecurityAuditManagementType& getAuditManagement() override;

  /** Sets this choice's choice to be auditManagement and initializes auditManagement to be the specified value. A deep
    * copy will be used by this method to set auditManagement
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setAuditManagement(const uci::type::SecurityAuditManagementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AuditManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AuditManagement, false
    *      otherwise.
    */
  bool isAuditManagement() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AuditManagement.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AuditManagement.
    */
  uci::type::SecurityAuditManagementType& chooseAuditManagement(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AuditManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AuditManagement.
    */
  uci::type::SecurityAuditManagementType& chooseAuditManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the FileManagement field contained in this message fragment
    *
    * @return The const reference to the accessor to the FileManagement field.
    */
  uci::type::SecurityFileManagementType& getFileManagement_() const;

  /** Returns the accessor to the FileManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the FileManagement field.
    */
  const uci::type::SecurityFileManagementType& getFileManagement() const override;

  /** Returns the accessor to the FileManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the FileManagement field.
    */
  uci::type::SecurityFileManagementType& getFileManagement() override;

  /** Sets this choice's choice to be fileManagement and initializes fileManagement to be the specified value. A deep copy
    * will be used by this method to set fileManagement
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setFileManagement(const uci::type::SecurityFileManagementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FileManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FileManagement, false otherwise.
    */
  bool isFileManagement() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FileManagement.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FileManagement.
    */
  uci::type::SecurityFileManagementType& chooseFileManagement(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FileManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FileManagement.
    */
  uci::type::SecurityFileManagementType& chooseFileManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the KeyManagement field contained in this message fragment
    *
    * @return The const reference to the accessor to the KeyManagement field.
    */
  uci::type::SecurityKeyManagementType& getKeyManagement_() const;

  /** Returns the accessor to the KeyManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the KeyManagement field.
    */
  const uci::type::SecurityKeyManagementType& getKeyManagement() const override;

  /** Returns the accessor to the KeyManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the KeyManagement field.
    */
  uci::type::SecurityKeyManagementType& getKeyManagement() override;

  /** Sets this choice's choice to be keyManagement and initializes keyManagement to be the specified value. A deep copy
    * will be used by this method to set keyManagement
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setKeyManagement(const uci::type::SecurityKeyManagementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by KeyManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by KeyManagement, false otherwise.
    */
  bool isKeyManagement() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by KeyManagement.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by KeyManagement.
    */
  uci::type::SecurityKeyManagementType& chooseKeyManagement(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by KeyManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by KeyManagement.
    */
  uci::type::SecurityKeyManagementType& chooseKeyManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the PolicyManagement field contained in this message fragment
    *
    * @return The const reference to the accessor to the PolicyManagement field.
    */
  uci::type::SecurityPolicyManagementType& getPolicyManagement_() const;

  /** Returns the accessor to the PolicyManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the PolicyManagement field.
    */
  const uci::type::SecurityPolicyManagementType& getPolicyManagement() const override;

  /** Returns the accessor to the PolicyManagement field contained in this message fragment
    *
    * @return The reference to the accessor to the PolicyManagement field.
    */
  uci::type::SecurityPolicyManagementType& getPolicyManagement() override;

  /** Sets this choice's choice to be policyManagement and initializes policyManagement to be the specified value. A deep
    * copy will be used by this method to set policyManagement
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setPolicyManagement(const uci::type::SecurityPolicyManagementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PolicyManagement.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PolicyManagement, false
    *      otherwise.
    */
  bool isPolicyManagement() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by PolicyManagement.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PolicyManagement.
    */
  uci::type::SecurityPolicyManagementType& choosePolicyManagement(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by PolicyManagement.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PolicyManagement.
    */
  uci::type::SecurityPolicyManagementType& choosePolicyManagement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the System field contained in this message fragment
    *
    * @return The const reference to the accessor to the System field.
    */
  uci::type::SecuritySystemType& getSystem_() const;

  /** Returns the accessor to the System field contained in this message fragment
    *
    * @return The reference to the accessor to the System field.
    */
  const uci::type::SecuritySystemType& getSystem() const override;

  /** Returns the accessor to the System field contained in this message fragment
    *
    * @return The reference to the accessor to the System field.
    */
  uci::type::SecuritySystemType& getSystem() override;

  /** Sets this choice's choice to be system and initializes system to be the specified value. A deep copy will be used by
    * this method to set system
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setSystem(const uci::type::SecuritySystemType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by System.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by System, false otherwise.
    */
  bool isSystem() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by System.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by System.
    */
  uci::type::SecuritySystemType& chooseSystem(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by System.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by System.
    */
  uci::type::SecuritySystemType& chooseSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the IntrusionDetection field contained in this message fragment
    *
    * @return The const reference to the accessor to the IntrusionDetection field.
    */
  uci::type::SecurityIntrusionDetectionType& getIntrusionDetection_() const;

  /** Returns the accessor to the IntrusionDetection field contained in this message fragment
    *
    * @return The reference to the accessor to the IntrusionDetection field.
    */
  const uci::type::SecurityIntrusionDetectionType& getIntrusionDetection() const override;

  /** Returns the accessor to the IntrusionDetection field contained in this message fragment
    *
    * @return The reference to the accessor to the IntrusionDetection field.
    */
  uci::type::SecurityIntrusionDetectionType& getIntrusionDetection() override;

  /** Sets this choice's choice to be intrusionDetection and initializes intrusionDetection to be the specified value. A
    * deep copy will be used by this method to set intrusionDetection
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setIntrusionDetection(const uci::type::SecurityIntrusionDetectionType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by IntrusionDetection.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by IntrusionDetection, false
    *      otherwise.
    */
  bool isIntrusionDetection() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by IntrusionDetection.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by IntrusionDetection.
    */
  uci::type::SecurityIntrusionDetectionType& chooseIntrusionDetection(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by IntrusionDetection.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by IntrusionDetection.
    */
  uci::type::SecurityIntrusionDetectionType& chooseIntrusionDetection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Sanitization field contained in this message fragment
    *
    * @return The const reference to the accessor to the Sanitization field.
    */
  uci::type::SecuritySanitizationType& getSanitization_() const;

  /** Returns the accessor to the Sanitization field contained in this message fragment
    *
    * @return The reference to the accessor to the Sanitization field.
    */
  const uci::type::SecuritySanitizationType& getSanitization() const override;

  /** Returns the accessor to the Sanitization field contained in this message fragment
    *
    * @return The reference to the accessor to the Sanitization field.
    */
  uci::type::SecuritySanitizationType& getSanitization() override;

  /** Sets this choice's choice to be sanitization and initializes sanitization to be the specified value. A deep copy will
    * be used by this method to set sanitization
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityEventType& setSanitization(const uci::type::SecuritySanitizationType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Sanitization.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Sanitization, false otherwise.
    */
  bool isSanitization() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Sanitization.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Sanitization.
    */
  uci::type::SecuritySanitizationType& chooseSanitization(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Sanitization.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Sanitization.
    */
  uci::type::SecuritySanitizationType& chooseSanitization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SecurityEventType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SecurityEventType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SecurityEventType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SecurityAccessType> accountAccess_Accessor;
  std::unique_ptr<SecurityAuthenticationType> authentication_Accessor;
  std::unique_ptr<SecurityIntegrityType> integrity_Accessor;
  std::unique_ptr<SecurityAuditManagementType> auditManagement_Accessor;
  std::unique_ptr<SecurityFileManagementType> fileManagement_Accessor;
  std::unique_ptr<SecurityKeyManagementType> keyManagement_Accessor;
  std::unique_ptr<SecurityPolicyManagementType> policyManagement_Accessor;
  std::unique_ptr<SecuritySystemType> system_Accessor;
  std::unique_ptr<SecurityIntrusionDetectionType> intrusionDetection_Accessor;
  std::unique_ptr<SecuritySanitizationType> sanitization_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SECURITYEVENTTYPE_H
