/** @file CommLink16ControlType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMLINK16CONTROLTYPE_H
#define ASB_UCI_TYPE_COMMLINK16CONTROLTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/base/IntAccessor.h"
#include "asb_uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "asb_uci/type/CommLink16InitialEntryGroupEnum.h"
#include "asb_uci/type/CommLink16InterferenceProtModeEnum.h"
#include "asb_uci/type/CommLink16RangeModeEnum.h"
#include "asb_uci/type/CommLink16TransmitAntennaEnum.h"
#include "asb_uci/type/CommLink16TransmitModeEnum.h"
#include "asb_uci/type/CommLink16TxPowerSelectionEnum.h"
#include "asb_uci/type/CommLink16_PPLI_PoolEnum.h"
#include "asb_uci/type/FrequencyType.h"
#include "asb_uci/type/Link16_ParticipationGroupIndexType.h"
#include "asb_uci/type/Link16_PlatformStrengthType.h"
#include "asb_uci/type/Link16_TrackNumberType.h"
#include "asb_uci/type/VisibleString20Type.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/CommLink16ControlType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommLink16AdvancedSlotNotificationType;
class CommLink16DelayReductionType;
class CommLink16InitialEntryMessageType;
class CommLink16MissionInfoWordsType;
class CommLink16NetSelectionType;
class CommLink16ReceiptComplianceWordsType;
class CommLink16TxPG_Type;

/** Utilized to perform Link 16 Specific tuning of a communications capability. */
class CommLink16ControlType : public virtual uci::type::CommLink16ControlType {
public:
  /** Contains the Advanced Slot Notification for both modes. Indicates Advanced Slot Notification (ASN) Mode Selection
    * (MS) of Mode A (1) or Mode B (0), ASN Enabled (1) or Disabled (0) and the ASN Slot Selection (0..31, the default is
    * 7). [Occurrences: Minimum: 0; Maximum: 2]
    */
  using AdvancedSlotNotificationMode = asb_uci::base::BoundedList<uci::type::CommLink16AdvancedSlotNotificationType, uci::type::accessorType::commLink16AdvancedSlotNotificationType, asb_uci::type::CommLink16AdvancedSlotNotificationType>;

  /** The Delay Reduction Participation Group (PG) Index Number specifies which message or messages are subject to Delay
    * Reduction. List sizing based on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum: 3]
    */
  using DelayReduction = asb_uci::base::BoundedList<uci::type::CommLink16DelayReductionType, uci::type::accessorType::commLink16DelayReductionType, asb_uci::type::CommLink16DelayReductionType>;

  /** The Initial Entry Message send 10 words in Bit Words 580-589. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using InitialEntryWords = asb_uci::base::BoundedList<uci::base::IntAccessor, uci::base::accessorType::intAccessor, asb_uci::base::IntAccessor>;

  /** Used to set / identify the net selection per PG Index. List sizing based on MIDS Network Terminal Standardization.
    * [Occurrences: Minimum: 0; Maximum: 8]
    */
  using NetSelectionStatus = asb_uci::base::BoundedList<uci::type::CommLink16NetSelectionType, uci::type::accessorType::commLink16NetSelectionType, asb_uci::type::CommLink16NetSelectionType>;

  /** Up to 15 Secondary TNs used for forwarding. One location is reserved for the Net Manager Indicator. List sizing based
    * on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum: 16]
    */
  using SecondarySourceTrackNumber = asb_uci::base::BoundedList<uci::type::Link16_TrackNumberType, uci::type::accessorType::link16_TrackNumberType, asb_uci::type::Link16_TrackNumberType>;

  /** Allows the host to set a specific power level, packing limit, antenna configuration, staleness, and storage limit for
    * a specific PG. List sizing based on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum: 10]
    */
  using TransmitPG_Slots = asb_uci::base::BoundedList<uci::type::CommLink16TxPG_Type, uci::type::accessorType::commLink16TxPG_Type, asb_uci::type::CommLink16TxPG_Type>;

  /** Used to indicate whether the terminal will perform receipt compliance (R/C) processing on an original message
    * provided by the Host. List sizing based on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum:
    * 3]
    */
  using ReceiptComplianceProcessingWords = asb_uci::base::BoundedList<uci::type::CommLink16ReceiptComplianceWordsType, uci::type::accessorType::commLink16ReceiptComplianceWordsType, asb_uci::type::CommLink16ReceiptComplianceWordsType>;

  /** The constructor */
  CommLink16ControlType();

  /** The copy constructor
    *
    * @param rhs The CommLink16ControlType to copy from
    */
  CommLink16ControlType(const CommLink16ControlType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommLink16ControlType to move from
    */
  CommLink16ControlType(CommLink16ControlType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommLink16ControlType to copy from
    * @return The CommLink16ControlType that was assigned
    */
  CommLink16ControlType& operator=(const CommLink16ControlType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommLink16ControlType to move from
    * @return The CommLink16ControlType that was assigned
    */
  CommLink16ControlType& operator=(CommLink16ControlType&& rhs) = delete;

  /** The destructor */
  virtual ~CommLink16ControlType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommLink16ControlType whose contents are to be used to set this
    *      uci::type::CommLink16ControlType's contents.
    */
  void copy(const uci::type::CommLink16ControlType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommLink16ControlType whose contents are to be used to set this
    *      uci::type::CommLink16ControlType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommLink16ControlType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the AdvancedSlotNotificationMode field contained in this message fragment
    *
    * @return The const reference to the accessor to the AdvancedSlotNotificationMode field.
    */
  const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& getAdvancedSlotNotificationMode() const override;

  /** Returns the accessor to the AdvancedSlotNotificationMode field contained in this message fragment
    *
    * @return The reference to the accessor to the AdvancedSlotNotificationMode field.
    */
  uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& getAdvancedSlotNotificationMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setAdvancedSlotNotificationMode(const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16_ParticipationGroupIndexTypeValue getDataReductionPG_Index() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setDataReductionPG_Index(uci::type::Link16_ParticipationGroupIndexTypeValue value) override;

  /** Returns whether this optional field DataReductionPG_Indexis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDataReductionPG_Index() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearDataReductionPG_Index() noexcept override;

  /** Returns the accessor to the DelayReduction field contained in this message fragment
    *
    * @return The const reference to the accessor to the DelayReduction field.
    */
  const uci::type::CommLink16ControlType::DelayReduction& getDelayReduction() const override;

  /** Returns the accessor to the DelayReduction field contained in this message fragment
    *
    * @return The reference to the accessor to the DelayReduction field.
    */
  uci::type::CommLink16ControlType::DelayReduction& getDelayReduction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setDelayReduction(const uci::type::CommLink16ControlType::DelayReduction& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16EnhancedThroughputCodeRateEnum& getEnhancedThroughputCodeRate_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16EnhancedThroughputCodeRateEnum& getEnhancedThroughputCodeRate() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16EnhancedThroughputCodeRateEnum& getEnhancedThroughputCodeRate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setEnhancedThroughputCodeRate(const uci::type::CommLink16EnhancedThroughputCodeRateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setEnhancedThroughputCodeRate(uci::type::CommLink16EnhancedThroughputCodeRateEnum::EnumerationItem value) override;

  /** Returns whether this optional field EnhancedThroughputCodeRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEnhancedThroughputCodeRate() const noexcept override;

  /** Enables the optional field such that getEnhancedThroughputCodeRate will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16EnhancedThroughputCodeRateEnum& enableEnhancedThroughputCodeRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearEnhancedThroughputCodeRate() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InitialEntryGroupEnum& getInitialEntryGroup_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16InitialEntryGroupEnum& getInitialEntryGroup() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InitialEntryGroupEnum& getInitialEntryGroup() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInitialEntryGroup(const uci::type::CommLink16InitialEntryGroupEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInitialEntryGroup(uci::type::CommLink16InitialEntryGroupEnum::EnumerationItem value) override;

  /** Returns whether this optional field InitialEntryGroupis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInitialEntryGroup() const noexcept override;

  /** Enables the optional field such that getInitialEntryGroup will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InitialEntryGroupEnum& enableInitialEntryGroup(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearInitialEntryGroup() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InitialEntryMessageType& getInitialEntryMessageAssignment_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16InitialEntryMessageType& getInitialEntryMessageAssignment() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InitialEntryMessageType& getInitialEntryMessageAssignment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInitialEntryMessageAssignment(const uci::type::CommLink16InitialEntryMessageType& accessor) override;

  /** Returns whether this optional field InitialEntryMessageAssignmentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInitialEntryMessageAssignment() const noexcept override;

  /** Enables the optional field such that getInitialEntryMessageAssignment will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InitialEntryMessageType& enableInitialEntryMessageAssignment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearInitialEntryMessageAssignment() noexcept override;

  /** Returns the accessor to the InitialEntryWords field contained in this message fragment
    *
    * @return The const reference to the accessor to the InitialEntryWords field.
    */
  const uci::type::CommLink16ControlType::InitialEntryWords& getInitialEntryWords() const override;

  /** Returns the accessor to the InitialEntryWords field contained in this message fragment
    *
    * @return The reference to the accessor to the InitialEntryWords field.
    */
  uci::type::CommLink16ControlType::InitialEntryWords& getInitialEntryWords() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInitialEntryWords(const uci::type::CommLink16ControlType::InitialEntryWords& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getInitializationActivityIndicator() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInitializationActivityIndicator(xs::Boolean value) override;

  /** Returns whether this optional field InitializationActivityIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInitializationActivityIndicator() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearInitializationActivityIndicator() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getInitializationIndexNumber() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInitializationIndexNumber(xs::UnsignedByte value) override;

  /** Returns whether this optional field InitializationIndexNumberis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInitializationIndexNumber() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearInitializationIndexNumber() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InterferenceProtModeEnum& getInterferenceProtectionMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16InterferenceProtModeEnum& getInterferenceProtectionMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InterferenceProtModeEnum& getInterferenceProtectionMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInterferenceProtectionMode(const uci::type::CommLink16InterferenceProtModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setInterferenceProtectionMode(uci::type::CommLink16InterferenceProtModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field InterferenceProtectionModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInterferenceProtectionMode() const noexcept override;

  /** Enables the optional field such that getInterferenceProtectionMode will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16InterferenceProtModeEnum& enableInterferenceProtectionMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearInterferenceProtectionMode() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16MissionInfoWordsType& getMissionInformationWords_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16MissionInfoWordsType& getMissionInformationWords() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16MissionInfoWordsType& getMissionInformationWords() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setMissionInformationWords(const uci::type::CommLink16MissionInfoWordsType& accessor) override;

  /** Returns whether this optional field MissionInformationWordsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionInformationWords() const noexcept override;

  /** Enables the optional field such that getMissionInformationWords will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16MissionInfoWordsType& enableMissionInformationWords(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearMissionInformationWords() noexcept override;

  /** Returns the accessor to the NetSelectionStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the NetSelectionStatus field.
    */
  const uci::type::CommLink16ControlType::NetSelectionStatus& getNetSelectionStatus() const override;

  /** Returns the accessor to the NetSelectionStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the NetSelectionStatus field.
    */
  uci::type::CommLink16ControlType::NetSelectionStatus& getNetSelectionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setNetSelectionStatus(const uci::type::CommLink16ControlType::NetSelectionStatus& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getNetEntryTxEnable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setNetEntryTxEnable(xs::Boolean value) override;

  /** Returns whether this optional field NetEntryTxEnableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetEntryTxEnable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearNetEntryTxEnable() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16_PlatformStrengthTypeValue getPlatformStrength() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setPlatformStrength(uci::type::Link16_PlatformStrengthTypeValue value) override;

  /** Returns whether this optional field PlatformStrengthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlatformStrength() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearPlatformStrength() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16_PPLI_PoolEnum& getPPLI_Pool_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16_PPLI_PoolEnum& getPPLI_Pool() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16_PPLI_PoolEnum& getPPLI_Pool() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setPPLI_Pool(const uci::type::CommLink16_PPLI_PoolEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setPPLI_Pool(uci::type::CommLink16_PPLI_PoolEnum::EnumerationItem value) override;

  /** Returns whether this optional field PPLI_Poolis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPPLI_Pool() const noexcept override;

  /** Enables the optional field such that getPPLI_Pool will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16_PPLI_PoolEnum& enablePPLI_Pool(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearPPLI_Pool() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16RangeModeEnum& getRangeMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16RangeModeEnum& getRangeMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16RangeModeEnum& getRangeMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setRangeMode(const uci::type::CommLink16RangeModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setRangeMode(uci::type::CommLink16RangeModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field RangeModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRangeMode() const noexcept override;

  /** Enables the optional field such that getRangeMode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16RangeModeEnum& enableRangeMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearRangeMode() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16_ParticipationGroupIndexTypeValue getRouteEstPG_Index() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setRouteEstPG_Index(uci::type::Link16_ParticipationGroupIndexTypeValue value) override;

  /** Returns whether this optional field RouteEstPG_Indexis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRouteEstPG_Index() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearRouteEstPG_Index() noexcept override;

  /** Returns the accessor to the SecondarySourceTrackNumber field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecondarySourceTrackNumber field.
    */
  const uci::type::CommLink16ControlType::SecondarySourceTrackNumber& getSecondarySourceTrackNumber() const override;

  /** Returns the accessor to the SecondarySourceTrackNumber field contained in this message fragment
    *
    * @return The reference to the accessor to the SecondarySourceTrackNumber field.
    */
  uci::type::CommLink16ControlType::SecondarySourceTrackNumber& getSecondarySourceTrackNumber() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setSecondarySourceTrackNumber(const uci::type::CommLink16ControlType::SecondarySourceTrackNumber& accessor) override;

  /** Returns the accessor to the TransmitPG_Slots field contained in this message fragment
    *
    * @return The const reference to the accessor to the TransmitPG_Slots field.
    */
  const uci::type::CommLink16ControlType::TransmitPG_Slots& getTransmitPG_Slots() const override;

  /** Returns the accessor to the TransmitPG_Slots field contained in this message fragment
    *
    * @return The reference to the accessor to the TransmitPG_Slots field.
    */
  uci::type::CommLink16ControlType::TransmitPG_Slots& getTransmitPG_Slots() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setTransmitPG_Slots(const uci::type::CommLink16ControlType::TransmitPG_Slots& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitAntennaEnum& getTransmitAntenna_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16TransmitAntennaEnum& getTransmitAntenna() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitAntennaEnum& getTransmitAntenna() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setTransmitAntenna(const uci::type::CommLink16TransmitAntennaEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setTransmitAntenna(uci::type::CommLink16TransmitAntennaEnum::EnumerationItem value) override;

  /** Returns whether this optional field TransmitAntennais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTransmitAntenna() const noexcept override;

  /** Enables the optional field such that getTransmitAntenna will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitAntennaEnum& enableTransmitAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearTransmitAntenna() noexcept override;

  /** Returns the accessor to the ReceiptComplianceProcessingWords field contained in this message fragment
    *
    * @return The const reference to the accessor to the ReceiptComplianceProcessingWords field.
    */
  const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& getReceiptComplianceProcessingWords() const override;

  /** Returns the accessor to the ReceiptComplianceProcessingWords field contained in this message fragment
    *
    * @return The reference to the accessor to the ReceiptComplianceProcessingWords field.
    */
  uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& getReceiptComplianceProcessingWords() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setReceiptComplianceProcessingWords(const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitAntennaEnum& getReceiveAntenna_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16TransmitAntennaEnum& getReceiveAntenna() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitAntennaEnum& getReceiveAntenna() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setReceiveAntenna(const uci::type::CommLink16TransmitAntennaEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setReceiveAntenna(uci::type::CommLink16TransmitAntennaEnum::EnumerationItem value) override;

  /** Returns whether this optional field ReceiveAntennais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReceiveAntenna() const noexcept override;

  /** Enables the optional field such that getReceiveAntenna will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitAntennaEnum& enableReceiveAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearReceiveAntenna() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TxPowerSelectionEnum& getTransmitPowerSelection_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16TxPowerSelectionEnum& getTransmitPowerSelection() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TxPowerSelectionEnum& getTransmitPowerSelection() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setTransmitPowerSelection(const uci::type::CommLink16TxPowerSelectionEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setTransmitPowerSelection(uci::type::CommLink16TxPowerSelectionEnum::EnumerationItem value) override;

  /** Returns whether this optional field TransmitPowerSelectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTransmitPowerSelection() const noexcept override;

  /** Enables the optional field such that getTransmitPowerSelection will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TxPowerSelectionEnum& enableTransmitPowerSelection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearTransmitPowerSelection() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitModeEnum& getTransmitMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLink16TransmitModeEnum& getTransmitMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitModeEnum& getTransmitMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setTransmitMode(const uci::type::CommLink16TransmitModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setTransmitMode(uci::type::CommLink16TransmitModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field TransmitModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTransmitMode() const noexcept override;

  /** Enables the optional field such that getTransmitMode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLink16TransmitModeEnum& enableTransmitMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearTransmitMode() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getVoiceGroupRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setVoiceGroupRate(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field VoiceGroupRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVoiceGroupRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearVoiceGroupRate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getVoiceGroupCoding() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setVoiceGroupCoding(xs::Boolean value) override;

  /** Returns whether this optional field VoiceGroupCodingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVoiceGroupCoding() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearVoiceGroupCoding() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getForceTellIndicator() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setForceTellIndicator(xs::Boolean value) override;

  /** Returns whether this optional field ForceTellIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasForceTellIndicator() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearForceTellIndicator() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getResetNavKalmanFilter() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setResetNavKalmanFilter(xs::Boolean value) override;

  /** Returns whether this optional field ResetNavKalmanFilteris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasResetNavKalmanFilter() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearResetNavKalmanFilter() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getIPF_Reset() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setIPF_Reset(xs::Boolean value) override;

  /** Returns whether this optional field IPF_Resetis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPF_Reset() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearIPF_Reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString20Type& getVoiceCallSign_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString20Type& getVoiceCallSign() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString20Type& getVoiceCallSign() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setVoiceCallSign(const uci::type::VisibleString20Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setVoiceCallSign(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& setVoiceCallSign(const char* value) override;

  /** Returns whether this optional field voiceCallSign_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVoiceCallSign() const noexcept override;

  /** Enables the optional field such that getVoiceCallSign will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString20Type& enableVoiceCallSign(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommLink16ControlType& clearVoiceCallSign() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommLink16ControlType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLink16ControlType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommLink16ControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<AdvancedSlotNotificationMode> advancedSlotNotificationMode_Accessor;
  boost::optional<Link16_ParticipationGroupIndexTypeValue> dataReductionPG_Index_Accessor;
  std::unique_ptr<DelayReduction> delayReduction_Accessor;
  std::unique_ptr<CommLink16EnhancedThroughputCodeRateEnum> enhancedThroughputCodeRate_Accessor;
  std::unique_ptr<CommLink16InitialEntryGroupEnum> initialEntryGroup_Accessor;
  std::unique_ptr<CommLink16InitialEntryMessageType> initialEntryMessageAssignment_Accessor;
  std::unique_ptr<InitialEntryWords> initialEntryWords_Accessor;
  boost::optional<asb_xs::Boolean> initializationActivityIndicator_Accessor;
  boost::optional<asb_xs::UnsignedByte> initializationIndexNumber_Accessor;
  std::unique_ptr<CommLink16InterferenceProtModeEnum> interferenceProtectionMode_Accessor;
  std::unique_ptr<CommLink16MissionInfoWordsType> missionInformationWords_Accessor;
  std::unique_ptr<NetSelectionStatus> netSelectionStatus_Accessor;
  boost::optional<asb_xs::Boolean> netEntryTxEnable_Accessor;
  boost::optional<Link16_PlatformStrengthTypeValue> platformStrength_Accessor;
  std::unique_ptr<CommLink16_PPLI_PoolEnum> pPLI_Pool_Accessor;
  std::unique_ptr<CommLink16RangeModeEnum> rangeMode_Accessor;
  boost::optional<Link16_ParticipationGroupIndexTypeValue> routeEstPG_Index_Accessor;
  std::unique_ptr<SecondarySourceTrackNumber> secondarySourceTrackNumber_Accessor;
  std::unique_ptr<TransmitPG_Slots> transmitPG_Slots_Accessor;
  std::unique_ptr<CommLink16TransmitAntennaEnum> transmitAntenna_Accessor;
  std::unique_ptr<ReceiptComplianceProcessingWords> receiptComplianceProcessingWords_Accessor;
  std::unique_ptr<CommLink16TransmitAntennaEnum> receiveAntenna_Accessor;
  std::unique_ptr<CommLink16TxPowerSelectionEnum> transmitPowerSelection_Accessor;
  std::unique_ptr<CommLink16TransmitModeEnum> transmitMode_Accessor;
  boost::optional<FrequencyTypeValue> voiceGroupRate_Accessor;
  boost::optional<asb_xs::Boolean> voiceGroupCoding_Accessor;
  boost::optional<asb_xs::Boolean> forceTellIndicator_Accessor;
  boost::optional<asb_xs::Boolean> resetNavKalmanFilter_Accessor;
  boost::optional<asb_xs::Boolean> iPF_Reset_Accessor;
  std::unique_ptr<VisibleString20Type> voiceCallSign_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMLINK16CONTROLTYPE_H
