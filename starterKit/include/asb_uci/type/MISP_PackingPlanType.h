/** @file MISP_PackingPlanType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MISP_PACKINGPLANTYPE_H
#define ASB_UCI_TYPE_MISP_PACKINGPLANTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString16Type.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString20Type.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString40Type.h"
#include "asb_uci/type/MISP_OperationalModeEnum.h"
#include "asb_uci/type/TailNumberType.h"
#include "asb_uci/type/VisibleString10Type.h"
#include "asb_uci/type/VisibleString20Type.h"
#include "asb_uci/type/VisibleString480Type.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/MISP_PackingPlanType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class MissionID_Type;
class UMID_AudioID_Type;
class UMID_DataID_Type;
class UMID_SystemID_Type;
class UMID_VideoID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class MISP_PackingPlanType : public virtual uci::type::MISP_PackingPlanType {
public:
  /** The constructor */
  MISP_PackingPlanType();

  /** The copy constructor
    *
    * @param rhs The MISP_PackingPlanType to copy from
    */
  MISP_PackingPlanType(const MISP_PackingPlanType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MISP_PackingPlanType to move from
    */
  MISP_PackingPlanType(MISP_PackingPlanType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MISP_PackingPlanType to copy from
    * @return The MISP_PackingPlanType that was assigned
    */
  MISP_PackingPlanType& operator=(const MISP_PackingPlanType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MISP_PackingPlanType to move from
    * @return The MISP_PackingPlanType that was assigned
    */
  MISP_PackingPlanType& operator=(MISP_PackingPlanType&& rhs) = delete;

  /** The destructor */
  virtual ~MISP_PackingPlanType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MISP_PackingPlanType whose contents are to be used to set this
    *      uci::type::MISP_PackingPlanType's contents.
    */
  void copy(const uci::type::MISP_PackingPlanType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MISP_PackingPlanType whose contents are to be used to set this
    *      uci::type::MISP_PackingPlanType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MISP_PackingPlanType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the MissionID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissionID field.
    */
  const uci::type::MissionID_Type& getMissionID() const override;

  /** Returns the accessor to the MissionID field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionID field.
    */
  uci::type::MissionID_Type& getMissionID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setMissionID(const uci::type::MissionID_Type& accessor) override;

  /** Returns the contents of the message's PlatformDesignation field
    *
    * @return The contents of the PlatformDesignation field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString20Type& getPlatformDesignation() const noexcept override;

  /** Returns the contents of the message's PlatformDesignation field
    *
    * @return The contents of the PlatformDesignation field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString20Type& getPlatformDesignation() noexcept override;

  /** Sets the contents of the message's PlatformDesignation field
    *
    * @param value The new value to set the PlatformDesignation field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformDesignation(const uci::type::AlphanumericDashSpaceUnderscoreString20Type& value) override;

  /** Sets the contents of the message's PlatformDesignation field
    *
    * @param value The new value to set the PlatformDesignation field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformDesignation(const std::string& value) override;

  /** Sets the contents of the message's PlatformDesignation field
    *
    * @param value The new value to set the PlatformDesignation field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformDesignation(const char* value) override;

  /** Returns the contents of the message's ImageSourceSensor field
    *
    * @return The contents of the ImageSourceSensor field
    */
  const uci::type::VisibleString20Type& getImageSourceSensor() const noexcept override;

  /** Returns the contents of the message's ImageSourceSensor field
    *
    * @return The contents of the ImageSourceSensor field
    */
  uci::type::VisibleString20Type& getImageSourceSensor() noexcept override;

  /** Sets the contents of the message's ImageSourceSensor field
    *
    * @param value The new value to set the ImageSourceSensor field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setImageSourceSensor(const uci::type::VisibleString20Type& value) override;

  /** Sets the contents of the message's ImageSourceSensor field
    *
    * @param value The new value to set the ImageSourceSensor field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setImageSourceSensor(const std::string& value) override;

  /** Sets the contents of the message's ImageSourceSensor field
    *
    * @param value The new value to set the ImageSourceSensor field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setImageSourceSensor(const char* value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TailNumberType& getPlatformTailNumber_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::TailNumberType& getPlatformTailNumber() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TailNumberType& getPlatformTailNumber() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformTailNumber(const uci::type::TailNumberType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformTailNumber(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformTailNumber(const char* value) override;

  /** Returns whether this optional field platformTailNumber_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlatformTailNumber() const noexcept override;

  /** Enables the optional field such that getPlatformTailNumber will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::TailNumberType& enablePlatformTailNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearPlatformTailNumber() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getAirfieldBarometricPressure() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setAirfieldBarometricPressure(xs::Double value) override;

  /** Returns whether this optional field AirfieldBarometricPressureis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAirfieldBarometricPressure() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearAirfieldBarometricPressure() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getAirFieldElevation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setAirFieldElevation(xs::Double value) override;

  /** Returns whether this optional field AirFieldElevationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAirFieldElevation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearAirFieldElevation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString10Type& getPlatformCallSign_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString10Type& getPlatformCallSign() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString10Type& getPlatformCallSign() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformCallSign(const uci::type::VisibleString10Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformCallSign(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setPlatformCallSign(const char* value) override;

  /** Returns whether this optional field platformCallSign_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlatformCallSign() const noexcept override;

  /** Enables the optional field such that getPlatformCallSign will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString10Type& enablePlatformCallSign(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearPlatformCallSign() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MISP_OperationalModeEnum& getOperationalMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MISP_OperationalModeEnum& getOperationalMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MISP_OperationalModeEnum& getOperationalMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setOperationalMode(const uci::type::MISP_OperationalModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setOperationalMode(uci::type::MISP_OperationalModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field OperationalModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOperationalMode() const noexcept override;

  /** Enables the optional field such that getOperationalMode will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MISP_OperationalModeEnum& enableOperationalMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearOperationalMode() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString40Type& getClassificationOrMarkingSystem_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString40Type& getClassificationOrMarkingSystem() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString40Type& getClassificationOrMarkingSystem() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setClassificationOrMarkingSystem(const uci::type::AlphanumericDashSpaceUnderscoreString40Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setClassificationOrMarkingSystem(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setClassificationOrMarkingSystem(const char* value) override;

  /** Returns whether this optional field classificationOrMarkingSystem_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasClassificationOrMarkingSystem() const noexcept override;

  /** Enables the optional field such that getClassificationOrMarkingSystem will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString40Type& enableClassificationOrMarkingSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearClassificationOrMarkingSystem() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString480Type& getClassificationComment_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString480Type& getClassificationComment() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString480Type& getClassificationComment() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setClassificationComment(const uci::type::VisibleString480Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setClassificationComment(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setClassificationComment(const char* value) override;

  /** Returns whether this optional field classificationComment_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasClassificationComment() const noexcept override;

  /** Enables the optional field such that getClassificationComment will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString480Type& enableClassificationComment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearClassificationComment() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_VideoID_Type& getUMID_VideoID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::UMID_VideoID_Type& getUMID_VideoID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_VideoID_Type& getUMID_VideoID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setUMID_VideoID(const uci::type::UMID_VideoID_Type& accessor) override;

  /** Returns whether this optional field UMID_VideoIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUMID_VideoID() const noexcept override;

  /** Enables the optional field such that getUMID_VideoID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_VideoID_Type& enableUMID_VideoID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearUMID_VideoID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_AudioID_Type& getUMID_AudioID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::UMID_AudioID_Type& getUMID_AudioID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_AudioID_Type& getUMID_AudioID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setUMID_AudioID(const uci::type::UMID_AudioID_Type& accessor) override;

  /** Returns whether this optional field UMID_AudioIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUMID_AudioID() const noexcept override;

  /** Enables the optional field such that getUMID_AudioID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_AudioID_Type& enableUMID_AudioID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearUMID_AudioID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_DataID_Type& getUMID_DataID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::UMID_DataID_Type& getUMID_DataID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_DataID_Type& getUMID_DataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setUMID_DataID(const uci::type::UMID_DataID_Type& accessor) override;

  /** Returns whether this optional field UMID_DataIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUMID_DataID() const noexcept override;

  /** Enables the optional field such that getUMID_DataID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_DataID_Type& enableUMID_DataID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearUMID_DataID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_SystemID_Type& getUMID_SystemID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::UMID_SystemID_Type& getUMID_SystemID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_SystemID_Type& getUMID_SystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setUMID_SystemID(const uci::type::UMID_SystemID_Type& accessor) override;

  /** Returns whether this optional field UMID_SystemIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUMID_SystemID() const noexcept override;

  /** Enables the optional field such that getUMID_SystemID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UMID_SystemID_Type& enableUMID_SystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearUMID_SystemID() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString16Type& getItemDesignator_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString16Type& getItemDesignator() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString16Type& getItemDesignator() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setItemDesignator(const uci::type::AlphanumericDashSpaceUnderscoreString16Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setItemDesignator(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& setItemDesignator(const char* value) override;

  /** Returns whether this optional field itemDesignator_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasItemDesignator() const noexcept override;

  /** Enables the optional field such that getItemDesignator will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString16Type& enableItemDesignator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MISP_PackingPlanType& clearItemDesignator() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MISP_PackingPlanType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MISP_PackingPlanType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MISP_PackingPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MissionID_Type> missionID_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString20Type> platformDesignation_Accessor;
  std::unique_ptr<VisibleString20Type> imageSourceSensor_Accessor;
  std::unique_ptr<TailNumberType> platformTailNumber_Accessor;
  boost::optional<asb_xs::Double> airfieldBarometricPressure_Accessor;
  boost::optional<asb_xs::Double> airFieldElevation_Accessor;
  std::unique_ptr<VisibleString10Type> platformCallSign_Accessor;
  std::unique_ptr<MISP_OperationalModeEnum> operationalMode_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString40Type> classificationOrMarkingSystem_Accessor;
  std::unique_ptr<VisibleString480Type> classificationComment_Accessor;
  std::unique_ptr<UMID_VideoID_Type> uMID_VideoID_Accessor;
  std::unique_ptr<UMID_AudioID_Type> uMID_AudioID_Accessor;
  std::unique_ptr<UMID_DataID_Type> uMID_DataID_Accessor;
  std::unique_ptr<UMID_SystemID_Type> uMID_SystemID_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString16Type> itemDesignator_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MISP_PACKINGPLANTYPE_H
