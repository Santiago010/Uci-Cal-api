/** @file CS_SensorDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CS_SENSORDATATYPE_H
#define ASB_UCI_TYPE_CS_SENSORDATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AltitudeType.h"
#include "asb_uci/type/AnglePositiveType.h"
#include "asb_uci/type/AngleQuarterType.h"
#include "asb_uci/type/CS_SensorPointingEnum.h"
#include "asb_uci/type/CS_SensorTargetingEnum.h"
#include "asb_uci/type/CS_SensorTypeEnum.h"
#include "asb_uci/type/FrequencyType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/CS_SensorDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type describes a receive sensor sub-capability. */
class CS_SensorDataType : public virtual uci::type::CS_SensorDataType {
public:
  /** The constructor */
  CS_SensorDataType();

  /** The copy constructor
    *
    * @param rhs The CS_SensorDataType to copy from
    */
  CS_SensorDataType(const CS_SensorDataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CS_SensorDataType to move from
    */
  CS_SensorDataType(CS_SensorDataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CS_SensorDataType to copy from
    * @return The CS_SensorDataType that was assigned
    */
  CS_SensorDataType& operator=(const CS_SensorDataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CS_SensorDataType to move from
    * @return The CS_SensorDataType that was assigned
    */
  CS_SensorDataType& operator=(CS_SensorDataType&& rhs) = delete;

  /** The destructor */
  virtual ~CS_SensorDataType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CS_SensorDataType whose contents are to be used to set this
    *      uci::type::CS_SensorDataType's contents.
    */
  void copy(const uci::type::CS_SensorDataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CS_SensorDataType whose contents are to be used to set this
    *      uci::type::CS_SensorDataType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CS_SensorDataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's SensorType field
    *
    * @return The contents of the SensorType field
    */
  const uci::type::CS_SensorTypeEnum& getSensorType() const override;

  /** Returns the contents of the message's SensorType field
    *
    * @return The contents of the SensorType field
    */
  uci::type::CS_SensorTypeEnum& getSensorType() override;

  /** Sets the contents of the message's SensorType field
    *
    * @param accessor The accessor to use to set the SensorType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setSensorType(const uci::type::CS_SensorTypeEnum& accessor) override;

  /** Sets the contents of the message's SensorType field
    *
    * @param value The new value to set the SensorType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setSensorType(uci::type::CS_SensorTypeEnum::EnumerationItem value) override;

  /** Returns the contents of the message's SensorPointing field
    *
    * @return The contents of the SensorPointing field
    */
  const uci::type::CS_SensorPointingEnum& getSensorPointing() const override;

  /** Returns the contents of the message's SensorPointing field
    *
    * @return The contents of the SensorPointing field
    */
  uci::type::CS_SensorPointingEnum& getSensorPointing() override;

  /** Sets the contents of the message's SensorPointing field
    *
    * @param accessor The accessor to use to set the SensorPointing field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setSensorPointing(const uci::type::CS_SensorPointingEnum& accessor) override;

  /** Sets the contents of the message's SensorPointing field
    *
    * @param value The new value to set the SensorPointing field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setSensorPointing(uci::type::CS_SensorPointingEnum::EnumerationItem value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getInnerConeAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setInnerConeAngle(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field InnerConeAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInnerConeAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearInnerConeAngle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getOuterConeAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setOuterConeAngle(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field OuterConeAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOuterConeAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearOuterConeAngle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getMinClockAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setMinClockAngle(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field MinClockAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinClockAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearMinClockAngle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getMaxClockAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setMaxClockAngle(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field MaxClockAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMaxClockAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearMaxClockAngle() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_SensorTargetingEnum& getSensorTargeting_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CS_SensorTargetingEnum& getSensorTargeting() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_SensorTargetingEnum& getSensorTargeting() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setSensorTargeting(const uci::type::CS_SensorTargetingEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setSensorTargeting(uci::type::CS_SensorTargetingEnum::EnumerationItem value) override;

  /** Returns whether this optional field SensorTargetingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSensorTargeting() const noexcept override;

  /** Enables the optional field such that getSensorTargeting will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_SensorTargetingEnum& enableSensorTargeting(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearSensorTargeting() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getBoreSightAzimuth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setBoreSightAzimuth(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field BoreSightAzimuthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBoreSightAzimuth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearBoreSightAzimuth() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleQuarterTypeValue getBoreSightElevation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setBoreSightElevation(uci::type::AngleQuarterTypeValue value) override;

  /** Returns whether this optional field BoreSightElevationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBoreSightElevation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearBoreSightElevation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AltitudeTypeValue getMinAltitude() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setMinAltitude(uci::type::AltitudeTypeValue value) override;

  /** Returns whether this optional field MinAltitudeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinAltitude() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearMinAltitude() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AltitudeTypeValue getMaxAltitude() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setMaxAltitude(uci::type::AltitudeTypeValue value) override;

  /** Returns whether this optional field MaxAltitudeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMaxAltitude() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearMaxAltitude() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getAntennaDiameter() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setAntennaDiameter(xs::Double value) override;

  /** Returns whether this optional field AntennaDiameteris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAntennaDiameter() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearAntennaDiameter() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getAntennaFreq() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setAntennaFreq(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field AntennaFreqis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAntennaFreq() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearAntennaFreq() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getNumSteps() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& setNumSteps(xs::Int value) override;

  /** Returns whether this optional field NumStepsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNumSteps() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_SensorDataType& clearNumSteps() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CS_SensorDataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_SensorDataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CS_SensorDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CS_SensorTypeEnum> sensorType_Accessor;
  std::unique_ptr<CS_SensorPointingEnum> sensorPointing_Accessor;
  boost::optional<AnglePositiveTypeValue> innerConeAngle_Accessor;
  boost::optional<AnglePositiveTypeValue> outerConeAngle_Accessor;
  boost::optional<AnglePositiveTypeValue> minClockAngle_Accessor;
  boost::optional<AnglePositiveTypeValue> maxClockAngle_Accessor;
  std::unique_ptr<CS_SensorTargetingEnum> sensorTargeting_Accessor;
  boost::optional<AnglePositiveTypeValue> boreSightAzimuth_Accessor;
  boost::optional<AngleQuarterTypeValue> boreSightElevation_Accessor;
  boost::optional<AltitudeTypeValue> minAltitude_Accessor;
  boost::optional<AltitudeTypeValue> maxAltitude_Accessor;
  boost::optional<asb_xs::Double> antennaDiameter_Accessor;
  boost::optional<FrequencyTypeValue> antennaFreq_Accessor;
  boost::optional<asb_xs::Int> numSteps_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CS_SENSORDATATYPE_H
