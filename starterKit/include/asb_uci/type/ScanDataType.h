/** @file ScanDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SCANDATATYPE_H
#define ASB_UCI_TYPE_SCANDATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/AnglePositiveType.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_uci/type/DurationType.h"
#include "asb_uci/type/MeasurementStatusEnum.h"
#include "asb_uci/type/RadarBeamPersistenceEnum.h"
#include "asb_uci/type/RadarBeamTypeEnum.h"
#include "asb_uci/type/ScanDataBaseType.h"
#include "asb_uci/type/ScanDirectionalityEnum.h"
#include "asb_uci/type/ScanMechanicsEnum.h"
#include "asb_uci/type/ScanPlaneEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/ScanDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class LobeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ScanDataType : public virtual uci::type::ScanDataType, public virtual ScanDataBaseType {
public:
  /** Indicates the measured time duration of a single scan of a scanning Signal. This element is unbounded to allow
    * reporting of a series of scan periods. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ScanPeriod = asb_uci::base::BoundedList<uci::type::DurationType, uci::type::accessorType::durationType, asb_uci::type::DurationType>;

  /** Indicates a characterization of an amplitude Lobe associated with the Scan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Lobe = asb_uci::base::BoundedList<uci::type::LobeType, uci::type::accessorType::lobeType, asb_uci::type::LobeType>;

  /** The constructor */
  ScanDataType();

  /** The copy constructor
    *
    * @param rhs The ScanDataType to copy from
    */
  ScanDataType(const ScanDataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ScanDataType to move from
    */
  ScanDataType(ScanDataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ScanDataType to copy from
    * @return The ScanDataType that was assigned
    */
  ScanDataType& operator=(const ScanDataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ScanDataType to move from
    * @return The ScanDataType that was assigned
    */
  ScanDataType& operator=(ScanDataType&& rhs) = delete;

  /** The destructor */
  ~ScanDataType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ScanDataType whose contents are to be used to set this uci::type::ScanDataType's
    *      contents.
    */
  void copy(const uci::type::ScanDataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ScanDataType whose contents are to be used to set this uci::type::ScanDataType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ScanDataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's ScanTimestamp field
    *
    * @return The contents of the ScanTimestamp field
    */
  uci::type::DateTimeTypeValue getScanTimestamp() const override;

  /** Sets the contents of the message's ScanTimestamp field
    *
    * @param value The new value to set the ScanTimestamp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns the contents of the message's ScanMeasurementStatus field
    *
    * @return The contents of the ScanMeasurementStatus field
    */
  const uci::type::MeasurementStatusEnum& getScanMeasurementStatus() const override;

  /** Returns the contents of the message's ScanMeasurementStatus field
    *
    * @return The contents of the ScanMeasurementStatus field
    */
  uci::type::MeasurementStatusEnum& getScanMeasurementStatus() override;

  /** Sets the contents of the message's ScanMeasurementStatus field
    *
    * @param accessor The accessor to use to set the ScanMeasurementStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanMeasurementStatus(const uci::type::MeasurementStatusEnum& accessor) override;

  /** Sets the contents of the message's ScanMeasurementStatus field
    *
    * @param value The new value to set the ScanMeasurementStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanMeasurementStatus(uci::type::MeasurementStatusEnum::EnumerationItem value) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanPlaneEnum& getScanPlane_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ScanPlaneEnum& getScanPlane() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanPlaneEnum& getScanPlane() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanPlane(const uci::type::ScanPlaneEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanPlane(uci::type::ScanPlaneEnum::EnumerationItem value) override;

  /** Returns whether this optional field ScanPlaneis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasScanPlane() const noexcept override;

  /** Enables the optional field such that getScanPlane will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanPlaneEnum& enableScanPlane(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& clearScanPlane() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getSectorWidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setSectorWidth(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field SectorWidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSectorWidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& clearSectorWidth() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanDirectionalityEnum& getScanDirectionality_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ScanDirectionalityEnum& getScanDirectionality() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanDirectionalityEnum& getScanDirectionality() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanDirectionality(const uci::type::ScanDirectionalityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanDirectionality(uci::type::ScanDirectionalityEnum::EnumerationItem value) override;

  /** Returns whether this optional field ScanDirectionalityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasScanDirectionality() const noexcept override;

  /** Enables the optional field such that getScanDirectionality will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanDirectionalityEnum& enableScanDirectionality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& clearScanDirectionality() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanMechanicsEnum& getScanMechanics_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ScanMechanicsEnum& getScanMechanics() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanMechanicsEnum& getScanMechanics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanMechanics(const uci::type::ScanMechanicsEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanMechanics(uci::type::ScanMechanicsEnum::EnumerationItem value) override;

  /** Returns whether this optional field ScanMechanicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasScanMechanics() const noexcept override;

  /** Enables the optional field such that getScanMechanics will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanMechanicsEnum& enableScanMechanics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& clearScanMechanics() noexcept override;

  /** Returns the accessor to the ScanPeriod field contained in this message fragment
    *
    * @return The const reference to the accessor to the ScanPeriod field.
    */
  const uci::type::ScanDataType::ScanPeriod& getScanPeriod() const override;

  /** Returns the accessor to the ScanPeriod field contained in this message fragment
    *
    * @return The reference to the accessor to the ScanPeriod field.
    */
  uci::type::ScanDataType::ScanPeriod& getScanPeriod() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setScanPeriod(const uci::type::ScanDataType::ScanPeriod& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getOOK_Present() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setOOK_Present(xs::Boolean value) override;

  /** Returns whether this optional field OOK_Presentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOOK_Present() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& clearOOK_Present() noexcept override;

  /** Returns the accessor to the Lobe field contained in this message fragment
    *
    * @return The const reference to the accessor to the Lobe field.
    */
  const uci::type::ScanDataType::Lobe& getLobe() const override;

  /** Returns the accessor to the Lobe field contained in this message fragment
    *
    * @return The reference to the accessor to the Lobe field.
    */
  uci::type::ScanDataType::Lobe& getLobe() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setLobe(const uci::type::ScanDataType::Lobe& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamTypeEnum& getTypeOfBeam_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadarBeamTypeEnum& getTypeOfBeam() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamTypeEnum& getTypeOfBeam() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setTypeOfBeam(const uci::type::RadarBeamTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setTypeOfBeam(uci::type::RadarBeamTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field TypeOfBeamis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTypeOfBeam() const noexcept override;

  /** Enables the optional field such that getTypeOfBeam will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamTypeEnum& enableTypeOfBeam(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& clearTypeOfBeam() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamPersistenceEnum& getBeamPersistence_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadarBeamPersistenceEnum& getBeamPersistence() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamPersistenceEnum& getBeamPersistence() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setBeamPersistence(const uci::type::RadarBeamPersistenceEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& setBeamPersistence(uci::type::RadarBeamPersistenceEnum::EnumerationItem value) override;

  /** Returns whether this optional field BeamPersistenceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBeamPersistence() const noexcept override;

  /** Enables the optional field such that getBeamPersistence will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamPersistenceEnum& enableBeamPersistence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ScanDataType& clearBeamPersistence() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ScanDataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ScanDataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ScanDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  DateTimeTypeValue scanTimestamp_Accessor{0};
  std::unique_ptr<MeasurementStatusEnum> scanMeasurementStatus_Accessor;
  std::unique_ptr<ScanPlaneEnum> scanPlane_Accessor;
  boost::optional<AnglePositiveTypeValue> sectorWidth_Accessor;
  std::unique_ptr<ScanDirectionalityEnum> scanDirectionality_Accessor;
  std::unique_ptr<ScanMechanicsEnum> scanMechanics_Accessor;
  std::unique_ptr<ScanPeriod> scanPeriod_Accessor;
  boost::optional<asb_xs::Boolean> oOK_Present_Accessor;
  std::unique_ptr<Lobe> lobe_Accessor;
  std::unique_ptr<RadarBeamTypeEnum> typeOfBeam_Accessor;
  std::unique_ptr<RadarBeamPersistenceEnum> beamPersistence_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SCANDATATYPE_H
