/** @file OpZoneCategoryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_OPZONECATEGORYTYPE_H
#define ASB_UCI_TYPE_OPZONECATEGORYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "uci/base/Accessor.h"
#include "uci/type/OpZoneCategoryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ConstrainedEntryExitType;
class IngressEgressType;
class OpZoneFilterAreaPET;
class OpZoneJammingType;
class OpZoneMissileDataType;
class OpZoneNoFireType;
class OpZoneNoFlyType;
class OpZoneWeaponRestrictionType;
class OpZoneWeatherType;
class VehicleCommandDataType;

/** Container for parameters that are unique to a specific enumeration in OpZoneCategoryEnum. For example, KeepIn
  * enumeration can have amplifying information such as entry and exit restrictions of the zone.
  */
class OpZoneCategoryType : public virtual uci::type::OpZoneCategoryType {
public:
  /** Indicates that the OpZone can be a zone filter type. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using FilterArea = asb_uci::base::BoundedList<uci::type::OpZoneFilterAreaPET, uci::type::accessorType::opZoneFilterAreaPET, asb_uci::type::OpZoneFilterAreaPET>;

  /** The constructor */
  OpZoneCategoryType();

  /** The copy constructor
    *
    * @param rhs The OpZoneCategoryType to copy from
    */
  OpZoneCategoryType(const OpZoneCategoryType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OpZoneCategoryType to move from
    */
  OpZoneCategoryType(OpZoneCategoryType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The OpZoneCategoryType to copy from
    * @return The OpZoneCategoryType that was assigned
    */
  OpZoneCategoryType& operator=(const OpZoneCategoryType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OpZoneCategoryType to move from
    * @return The OpZoneCategoryType that was assigned
    */
  OpZoneCategoryType& operator=(OpZoneCategoryType&& rhs) = delete;

  /** The destructor */
  virtual ~OpZoneCategoryType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OpZoneCategoryType whose contents are to be used to set this
    *      uci::type::OpZoneCategoryType's contents.
    */
  void copy(const uci::type::OpZoneCategoryType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OpZoneCategoryType whose contents are to be used to set this
    *      uci::type::OpZoneCategoryType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OpZoneCategoryType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::OpZoneCategoryType::OpZoneCategoryTypeChoice getOpZoneCategoryTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getOpZoneCategoryTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setOpZoneCategoryTypeChoiceOrdinal(uci::type::OpZoneCategoryType::OpZoneCategoryTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ConstrainedEntryExit field contained in this message fragment
    *
    * @return The const reference to the accessor to the ConstrainedEntryExit field.
    */
  uci::type::ConstrainedEntryExitType& getConstrainedEntryExit_() const;

  /** Returns the accessor to the ConstrainedEntryExit field contained in this message fragment
    *
    * @return The reference to the accessor to the ConstrainedEntryExit field.
    */
  const uci::type::ConstrainedEntryExitType& getConstrainedEntryExit() const override;

  /** Returns the accessor to the ConstrainedEntryExit field contained in this message fragment
    *
    * @return The reference to the accessor to the ConstrainedEntryExit field.
    */
  uci::type::ConstrainedEntryExitType& getConstrainedEntryExit() override;

  /** Sets this choice's choice to be constrainedEntryExit and initializes constrainedEntryExit to be the specified value.
    * A deep copy will be used by this method to set constrainedEntryExit
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setConstrainedEntryExit(const uci::type::ConstrainedEntryExitType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ConstrainedEntryExit.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ConstrainedEntryExit, false
    *      otherwise.
    */
  bool isConstrainedEntryExit() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ConstrainedEntryExit.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ConstrainedEntryExit.
    */
  uci::type::ConstrainedEntryExitType& chooseConstrainedEntryExit(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ConstrainedEntryExit.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ConstrainedEntryExit.
    */
  uci::type::ConstrainedEntryExitType& chooseConstrainedEntryExit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the FilterArea item contained in this message fragment
    *
    * @return The const reference to the accessor to the FilterArea item.
    */
  uci::type::OpZoneCategoryType::FilterArea& getFilterArea_() const;

  /** Returns the accessor to the FilterArea item contained in this message fragment
    *
    * @return The const reference to the accessor to the FilterArea item.
    */
  const uci::type::OpZoneCategoryType::FilterArea& getFilterArea() const override;

  /** Returns the accessor to the FilterArea item contained in this message fragment
    *
    * @return The reference to the accessor to the FilterArea item.
    */
  uci::type::OpZoneCategoryType::FilterArea& getFilterArea() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setFilterArea(const uci::type::OpZoneCategoryType::FilterArea& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FilterArea.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FilterArea, false otherwise.
    */
  bool isFilterArea() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FilterArea.
    *
    * @return A reference to the accessor that provides access to the choice identified by FilterArea.
    */
  uci::type::OpZoneCategoryType::FilterArea& chooseFilterArea() override;

  /** Returns the accessor to the Jamming field contained in this message fragment
    *
    * @return The const reference to the accessor to the Jamming field.
    */
  uci::type::OpZoneJammingType& getJamming_() const;

  /** Returns the accessor to the Jamming field contained in this message fragment
    *
    * @return The reference to the accessor to the Jamming field.
    */
  const uci::type::OpZoneJammingType& getJamming() const override;

  /** Returns the accessor to the Jamming field contained in this message fragment
    *
    * @return The reference to the accessor to the Jamming field.
    */
  uci::type::OpZoneJammingType& getJamming() override;

  /** Sets this choice's choice to be jamming and initializes jamming to be the specified value. A deep copy will be used
    * by this method to set jamming
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setJamming(const uci::type::OpZoneJammingType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Jamming.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Jamming, false otherwise.
    */
  bool isJamming() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Jamming.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Jamming.
    */
  uci::type::OpZoneJammingType& chooseJamming(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Jamming.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Jamming.
    */
  uci::type::OpZoneJammingType& chooseJamming(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the KeepIn field contained in this message fragment
    *
    * @return The const reference to the accessor to the KeepIn field.
    */
  uci::type::IngressEgressType& getKeepIn_() const;

  /** Returns the accessor to the KeepIn field contained in this message fragment
    *
    * @return The reference to the accessor to the KeepIn field.
    */
  const uci::type::IngressEgressType& getKeepIn() const override;

  /** Returns the accessor to the KeepIn field contained in this message fragment
    *
    * @return The reference to the accessor to the KeepIn field.
    */
  uci::type::IngressEgressType& getKeepIn() override;

  /** Sets this choice's choice to be keepIn and initializes keepIn to be the specified value. A deep copy will be used by
    * this method to set keepIn
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setKeepIn(const uci::type::IngressEgressType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by KeepIn.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by KeepIn, false otherwise.
    */
  bool isKeepIn() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by KeepIn.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by KeepIn.
    */
  uci::type::IngressEgressType& chooseKeepIn(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by KeepIn.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by KeepIn.
    */
  uci::type::IngressEgressType& chooseKeepIn(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the MissileLaunchPoint field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissileLaunchPoint field.
    */
  uci::type::OpZoneMissileDataType& getMissileLaunchPoint_() const;

  /** Returns the accessor to the MissileLaunchPoint field contained in this message fragment
    *
    * @return The reference to the accessor to the MissileLaunchPoint field.
    */
  const uci::type::OpZoneMissileDataType& getMissileLaunchPoint() const override;

  /** Returns the accessor to the MissileLaunchPoint field contained in this message fragment
    *
    * @return The reference to the accessor to the MissileLaunchPoint field.
    */
  uci::type::OpZoneMissileDataType& getMissileLaunchPoint() override;

  /** Sets this choice's choice to be missileLaunchPoint and initializes missileLaunchPoint to be the specified value. A
    * deep copy will be used by this method to set missileLaunchPoint
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setMissileLaunchPoint(const uci::type::OpZoneMissileDataType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MissileLaunchPoint.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MissileLaunchPoint, false
    *      otherwise.
    */
  bool isMissileLaunchPoint() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by MissileLaunchPoint.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MissileLaunchPoint.
    */
  uci::type::OpZoneMissileDataType& chooseMissileLaunchPoint(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by MissileLaunchPoint.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MissileLaunchPoint.
    */
  uci::type::OpZoneMissileDataType& chooseMissileLaunchPoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the NoFire field contained in this message fragment
    *
    * @return The const reference to the accessor to the NoFire field.
    */
  uci::type::OpZoneNoFireType& getNoFire_() const;

  /** Returns the accessor to the NoFire field contained in this message fragment
    *
    * @return The reference to the accessor to the NoFire field.
    */
  const uci::type::OpZoneNoFireType& getNoFire() const override;

  /** Returns the accessor to the NoFire field contained in this message fragment
    *
    * @return The reference to the accessor to the NoFire field.
    */
  uci::type::OpZoneNoFireType& getNoFire() override;

  /** Sets this choice's choice to be noFire and initializes noFire to be the specified value. A deep copy will be used by
    * this method to set noFire
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setNoFire(const uci::type::OpZoneNoFireType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by NoFire.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by NoFire, false otherwise.
    */
  bool isNoFire() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by NoFire.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by NoFire.
    */
  uci::type::OpZoneNoFireType& chooseNoFire(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by NoFire.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by NoFire.
    */
  uci::type::OpZoneNoFireType& chooseNoFire(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the NoFly field contained in this message fragment
    *
    * @return The const reference to the accessor to the NoFly field.
    */
  uci::type::OpZoneNoFlyType& getNoFly_() const;

  /** Returns the accessor to the NoFly field contained in this message fragment
    *
    * @return The reference to the accessor to the NoFly field.
    */
  const uci::type::OpZoneNoFlyType& getNoFly() const override;

  /** Returns the accessor to the NoFly field contained in this message fragment
    *
    * @return The reference to the accessor to the NoFly field.
    */
  uci::type::OpZoneNoFlyType& getNoFly() override;

  /** Sets this choice's choice to be noFly and initializes noFly to be the specified value. A deep copy will be used by
    * this method to set noFly
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setNoFly(const uci::type::OpZoneNoFlyType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by NoFly.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by NoFly, false otherwise.
    */
  bool isNoFly() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by NoFly.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by NoFly.
    */
  uci::type::OpZoneNoFlyType& chooseNoFly(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by NoFly.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by NoFly.
    */
  uci::type::OpZoneNoFlyType& chooseNoFly(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the VehicleConfiguration field contained in this message fragment
    *
    * @return The const reference to the accessor to the VehicleConfiguration field.
    */
  uci::type::VehicleCommandDataType& getVehicleConfiguration_() const;

  /** Returns the accessor to the VehicleConfiguration field contained in this message fragment
    *
    * @return The reference to the accessor to the VehicleConfiguration field.
    */
  const uci::type::VehicleCommandDataType& getVehicleConfiguration() const override;

  /** Returns the accessor to the VehicleConfiguration field contained in this message fragment
    *
    * @return The reference to the accessor to the VehicleConfiguration field.
    */
  uci::type::VehicleCommandDataType& getVehicleConfiguration() override;

  /** Sets this choice's choice to be vehicleConfiguration and initializes vehicleConfiguration to be the specified value.
    * A deep copy will be used by this method to set vehicleConfiguration
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setVehicleConfiguration(const uci::type::VehicleCommandDataType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VehicleConfiguration.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VehicleConfiguration, false
    *      otherwise.
    */
  bool isVehicleConfiguration() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VehicleConfiguration.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VehicleConfiguration.
    */
  uci::type::VehicleCommandDataType& chooseVehicleConfiguration(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VehicleConfiguration.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VehicleConfiguration.
    */
  uci::type::VehicleCommandDataType& chooseVehicleConfiguration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the WeaponRestriction field contained in this message fragment
    *
    * @return The const reference to the accessor to the WeaponRestriction field.
    */
  uci::type::OpZoneWeaponRestrictionType& getWeaponRestriction_() const;

  /** Returns the accessor to the WeaponRestriction field contained in this message fragment
    *
    * @return The reference to the accessor to the WeaponRestriction field.
    */
  const uci::type::OpZoneWeaponRestrictionType& getWeaponRestriction() const override;

  /** Returns the accessor to the WeaponRestriction field contained in this message fragment
    *
    * @return The reference to the accessor to the WeaponRestriction field.
    */
  uci::type::OpZoneWeaponRestrictionType& getWeaponRestriction() override;

  /** Sets this choice's choice to be weaponRestriction and initializes weaponRestriction to be the specified value. A deep
    * copy will be used by this method to set weaponRestriction
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setWeaponRestriction(const uci::type::OpZoneWeaponRestrictionType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeaponRestriction.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeaponRestriction, false
    *      otherwise.
    */
  bool isWeaponRestriction() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by WeaponRestriction.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeaponRestriction.
    */
  uci::type::OpZoneWeaponRestrictionType& chooseWeaponRestriction(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by WeaponRestriction.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeaponRestriction.
    */
  uci::type::OpZoneWeaponRestrictionType& chooseWeaponRestriction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the WeatherConditions field contained in this message fragment
    *
    * @return The const reference to the accessor to the WeatherConditions field.
    */
  uci::type::OpZoneWeatherType& getWeatherConditions_() const;

  /** Returns the accessor to the WeatherConditions field contained in this message fragment
    *
    * @return The reference to the accessor to the WeatherConditions field.
    */
  const uci::type::OpZoneWeatherType& getWeatherConditions() const override;

  /** Returns the accessor to the WeatherConditions field contained in this message fragment
    *
    * @return The reference to the accessor to the WeatherConditions field.
    */
  uci::type::OpZoneWeatherType& getWeatherConditions() override;

  /** Sets this choice's choice to be weatherConditions and initializes weatherConditions to be the specified value. A deep
    * copy will be used by this method to set weatherConditions
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpZoneCategoryType& setWeatherConditions(const uci::type::OpZoneWeatherType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeatherConditions.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeatherConditions, false
    *      otherwise.
    */
  bool isWeatherConditions() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherConditions.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherConditions.
    */
  uci::type::OpZoneWeatherType& chooseWeatherConditions(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherConditions.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherConditions.
    */
  uci::type::OpZoneWeatherType& chooseWeatherConditions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OpZoneCategoryType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OpZoneCategoryType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OpZoneCategoryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ConstrainedEntryExitType> constrainedEntryExit_Accessor;
  std::unique_ptr<FilterArea> filterArea_Accessor;
  std::unique_ptr<OpZoneJammingType> jamming_Accessor;
  std::unique_ptr<IngressEgressType> keepIn_Accessor;
  std::unique_ptr<OpZoneMissileDataType> missileLaunchPoint_Accessor;
  std::unique_ptr<OpZoneNoFireType> noFire_Accessor;
  std::unique_ptr<OpZoneNoFlyType> noFly_Accessor;
  std::unique_ptr<VehicleCommandDataType> vehicleConfiguration_Accessor;
  std::unique_ptr<OpZoneWeaponRestrictionType> weaponRestriction_Accessor;
  std::unique_ptr<OpZoneWeatherType> weatherConditions_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_OPZONECATEGORYTYPE_H
