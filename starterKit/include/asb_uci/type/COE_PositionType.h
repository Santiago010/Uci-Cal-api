/** @file COE_PositionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COE_POSITIONTYPE_H
#define ASB_UCI_TYPE_COE_POSITIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AnglePositiveType.h"
#include "uci/base/Accessor.h"
#include "uci/type/COE_PositionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the set of classic orbital elements (COE) describing a spacecraft's position in an orbit. Elements
  * describing the size, shape and other characteristics of the orbit are in other types.
  */
class COE_PositionType : public virtual uci::type::COE_PositionType {
public:
  /** The constructor */
  COE_PositionType();

  /** The copy constructor
    *
    * @param rhs The COE_PositionType to copy from
    */
  COE_PositionType(const COE_PositionType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The COE_PositionType to move from
    */
  COE_PositionType(COE_PositionType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The COE_PositionType to copy from
    * @return The COE_PositionType that was assigned
    */
  COE_PositionType& operator=(const COE_PositionType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The COE_PositionType to move from
    * @return The COE_PositionType that was assigned
    */
  COE_PositionType& operator=(COE_PositionType&& rhs) = delete;

  /** The destructor */
  virtual ~COE_PositionType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::COE_PositionType whose contents are to be used to set this
    *      uci::type::COE_PositionType's contents.
    */
  void copy(const uci::type::COE_PositionType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::COE_PositionType whose contents are to be used to set this
    *      uci::type::COE_PositionType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::COE_PositionType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::COE_PositionType::COE_PositionTypeChoice getCOE_PositionTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getCOE_PositionTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COE_PositionType& setCOE_PositionTypeChoiceOrdinal(uci::type::COE_PositionType::COE_PositionTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's MeanAnomaly item
    *
    * @return The contents of the MeanAnomaly field
    */
  uci::type::AnglePositiveTypeValue getMeanAnomaly() const override;

  /** Sets this choice's choice to be MeanAnomaly and initializes MeanAnomaly to be the specified value
    *
    * @param value The new value to set MeanAnomaly to
    * @return A reference to the object on which this method was called.
    */
  uci::type::COE_PositionType& setMeanAnomaly(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MeanAnomaly.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MeanAnomaly, false otherwise.
    */
  bool isMeanAnomaly() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by MeanAnomaly. */
  void chooseMeanAnomaly();

  /** Returns the contents of the message's ArgumentOfLatitude item
    *
    * @return The contents of the ArgumentOfLatitude field
    */
  uci::type::AnglePositiveTypeValue getArgumentOfLatitude() const override;

  /** Sets this choice's choice to be ArgumentOfLatitude and initializes ArgumentOfLatitude to be the specified value
    *
    * @param value The new value to set ArgumentOfLatitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::COE_PositionType& setArgumentOfLatitude(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ArgumentOfLatitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ArgumentOfLatitude, false
    *      otherwise.
    */
  bool isArgumentOfLatitude() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ArgumentOfLatitude. */
  void chooseArgumentOfLatitude();

  /** Returns the contents of the message's TrueLongitude item
    *
    * @return The contents of the TrueLongitude field
    */
  uci::type::AnglePositiveTypeValue getTrueLongitude() const override;

  /** Sets this choice's choice to be TrueLongitude and initializes TrueLongitude to be the specified value
    *
    * @param value The new value to set TrueLongitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::COE_PositionType& setTrueLongitude(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TrueLongitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TrueLongitude, false otherwise.
    */
  bool isTrueLongitude() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by TrueLongitude. */
  void chooseTrueLongitude();

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<COE_PositionType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::COE_PositionType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::COE_PositionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::Double> meanAnomaly_Accessor;
  boost::optional<asb_xs::Double> argumentOfLatitude_Accessor;
  boost::optional<asb_xs::Double> trueLongitude_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COE_POSITIONTYPE_H
