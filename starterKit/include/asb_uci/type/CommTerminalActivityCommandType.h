/** @file CommTerminalActivityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMTERMINALACTIVITYCOMMANDTYPE_H
#define ASB_UCI_TYPE_COMMTERMINALACTIVITYCOMMANDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CommConnectionCommandEnum.h"
#include "../../../include/asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommTerminalActivityCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityCommandFrequencyType;
class CommControlType;
class CommLinkPortMapType;
class CommProfileID_Type;
class CommWaveformActivityCommandPET;
class DependentActivityType;
class LinkConnectionRequestType;
class NetworkLinkID_Type;
class ResourceSelectionType;
class VerboseStatusType;

/** See annotations in child elements and messages/elements that use this type for details. */
class CommTerminalActivityCommandType : public virtual uci::type::CommTerminalActivityCommandType, public virtual SharedRF_ApertureActivityCommandBaseType {
public:
  /** Indicates the unique ID of a Shared Antenna and/or AntennaResources to be used for the resulting Activity. This
    * allows Mission Processing to direct an specific antenna, antenna resource type, or antenna resource instance to be
    * used by the resulting Activity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ResourceSelection = asb_uci::base::BoundedList<uci::type::ResourceSelectionType, uci::type::accessorType::resourceSelectionType, asb_uci::type::ResourceSelectionType>;

  /** Indicates a command to change the connection status of the individual data links managed by the waveform. Generally,
    * a link's connection status must be CONNECTED for the waveform to transmit payload data over the communication medium
    * or for the waveform to receive transmissions from the communication medium. Note that this parameter is not available
    * until after a CommActivity is created and may not be available until the waveform has joined the network.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using LinkConnectionRequest = asb_uci::base::BoundedList<uci::type::LinkConnectionRequestType, uci::type::accessorType::linkConnectionRequestType, asb_uci::type::LinkConnectionRequestType>;

  /** The constructor */
  CommTerminalActivityCommandType();

  /** The copy constructor
    *
    * @param rhs The CommTerminalActivityCommandType to copy from
    */
  CommTerminalActivityCommandType(const CommTerminalActivityCommandType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommTerminalActivityCommandType to move from
    */
  CommTerminalActivityCommandType(CommTerminalActivityCommandType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommTerminalActivityCommandType to copy from
    * @return The CommTerminalActivityCommandType that was assigned
    */
  CommTerminalActivityCommandType& operator=(const CommTerminalActivityCommandType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommTerminalActivityCommandType to move from
    * @return The CommTerminalActivityCommandType that was assigned
    */
  CommTerminalActivityCommandType& operator=(CommTerminalActivityCommandType&& rhs) = delete;

  /** The destructor */
  ~CommTerminalActivityCommandType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommTerminalActivityCommandType whose contents are to be used to set this
    *      uci::type::CommTerminalActivityCommandType's contents.
    */
  void copy(const uci::type::CommTerminalActivityCommandType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommTerminalActivityCommandType whose contents are to be used to set this
    *      uci::type::CommTerminalActivityCommandType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommTerminalActivityCommandType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getActivateProfileID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommProfileID_Type& getActivateProfileID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getActivateProfileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setActivateProfileID(const uci::type::CommProfileID_Type& accessor) override;

  /** Returns whether this optional field ActivateProfileIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivateProfileID() const noexcept override;

  /** Enables the optional field such that getActivateProfileID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& enableActivateProfileID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearActivateProfileID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DependentActivityType& getChangeDependentActivity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DependentActivityType& getChangeDependentActivity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DependentActivityType& getChangeDependentActivity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setChangeDependentActivity(const uci::type::DependentActivityType& accessor) override;

  /** Returns whether this optional field ChangeDependentActivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChangeDependentActivity() const noexcept override;

  /** Enables the optional field such that getChangeDependentActivity will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DependentActivityType& enableChangeDependentActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearChangeDependentActivity() noexcept override;

  /** Returns the accessor to the ResourceSelection field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResourceSelection field.
    */
  const uci::type::CommTerminalActivityCommandType::ResourceSelection& getResourceSelection() const override;

  /** Returns the accessor to the ResourceSelection field contained in this message fragment
    *
    * @return The reference to the accessor to the ResourceSelection field.
    */
  uci::type::CommTerminalActivityCommandType::ResourceSelection& getResourceSelection() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setResourceSelection(const uci::type::CommTerminalActivityCommandType::ResourceSelection& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionCommandEnum& getConnectionRequest_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommConnectionCommandEnum& getConnectionRequest() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionCommandEnum& getConnectionRequest() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setConnectionRequest(const uci::type::CommConnectionCommandEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setConnectionRequest(uci::type::CommConnectionCommandEnum::EnumerationItem value) override;

  /** Returns whether this optional field ConnectionRequestis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConnectionRequest() const noexcept override;

  /** Enables the optional field such that getConnectionRequest will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionCommandEnum& enableConnectionRequest(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearConnectionRequest() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommControlType& getCommonSettingsChange_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommControlType& getCommonSettingsChange() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommControlType& getCommonSettingsChange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setCommonSettingsChange(const uci::type::CommControlType& accessor) override;

  /** Returns whether this optional field CommonSettingsChangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCommonSettingsChange() const noexcept override;

  /** Enables the optional field such that getCommonSettingsChange will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommControlType& enableCommonSettingsChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearCommonSettingsChange() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLinkPortMapType& getLinkPortAssignments_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLinkPortMapType& getLinkPortAssignments() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLinkPortMapType& getLinkPortAssignments() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setLinkPortAssignments(const uci::type::CommLinkPortMapType& accessor) override;

  /** Returns whether this optional field LinkPortAssignmentsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLinkPortAssignments() const noexcept override;

  /** Enables the optional field such that getLinkPortAssignments will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLinkPortMapType& enableLinkPortAssignments(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearLinkPortAssignments() noexcept override;

  /** Returns the accessor to the LinkConnectionRequest field contained in this message fragment
    *
    * @return The const reference to the accessor to the LinkConnectionRequest field.
    */
  const uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& getLinkConnectionRequest() const override;

  /** Returns the accessor to the LinkConnectionRequest field contained in this message fragment
    *
    * @return The reference to the accessor to the LinkConnectionRequest field.
    */
  uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& getLinkConnectionRequest() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setLinkConnectionRequest(const uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& getNetworkLinkID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NetworkLinkID_Type& getNetworkLinkID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& getNetworkLinkID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) override;

  /** Returns whether this optional field NetworkLinkIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkLinkID() const noexcept override;

  /** Enables the optional field such that getNetworkLinkID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& enableNetworkLinkID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearNetworkLinkID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommWaveformActivityCommandPET& getWaveformSpecificSettingsChange_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommWaveformActivityCommandPET& getWaveformSpecificSettingsChange() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommWaveformActivityCommandPET& getWaveformSpecificSettingsChange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setWaveformSpecificSettingsChange(const uci::type::CommWaveformActivityCommandPET& accessor) override;

  /** Returns whether this optional field WaveformSpecificSettingsChangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWaveformSpecificSettingsChange() const noexcept override;

  /** Enables the optional field such that getWaveformSpecificSettingsChange will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommWaveformActivityCommandPET& enableWaveformSpecificSettingsChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearWaveformSpecificSettingsChange() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& getVerboseStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VerboseStatusType& getVerboseStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& getVerboseStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setVerboseStatus(const uci::type::VerboseStatusType& accessor) override;

  /** Returns whether this optional field VerboseStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVerboseStatus() const noexcept override;

  /** Enables the optional field such that getVerboseStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& enableVerboseStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearVerboseStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandFrequencyType& getFrequency() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) override;

  /** Returns whether this optional field Frequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequency() const noexcept override;

  /** Enables the optional field such that getFrequency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalActivityCommandType& clearFrequency() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommTerminalActivityCommandType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommTerminalActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CommProfileID_Type> activateProfileID_Accessor;
  std::unique_ptr<DependentActivityType> changeDependentActivity_Accessor;
  std::unique_ptr<ResourceSelection> resourceSelection_Accessor;
  std::unique_ptr<CommConnectionCommandEnum> connectionRequest_Accessor;
  std::unique_ptr<CommControlType> commonSettingsChange_Accessor;
  std::unique_ptr<CommLinkPortMapType> linkPortAssignments_Accessor;
  std::unique_ptr<LinkConnectionRequest> linkConnectionRequest_Accessor;
  std::unique_ptr<NetworkLinkID_Type> networkLinkID_Accessor;
  std::unique_ptr<CommWaveformActivityCommandPET> waveformSpecificSettingsChange_Accessor;
  std::unique_ptr<VerboseStatusType> verboseStatus_Accessor;
  std::unique_ptr<CapabilityCommandFrequencyType> frequency_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMTERMINALACTIVITYCOMMANDTYPE_H
