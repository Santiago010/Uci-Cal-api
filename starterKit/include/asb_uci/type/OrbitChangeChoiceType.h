/** @file OrbitChangeChoiceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ORBITCHANGECHOICETYPE_H
#define ASB_UCI_TYPE_ORBITCHANGECHOICETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/AngleHalfPositiveType.h"
#include "../../../include/asb_uci/type/AngleType.h"
#include "../../../include/asb_uci/type/DistanceType.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitChangeChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class COE_OrbitType;
class OrbitalVolumeType;
class ProximityOperationsType;
class RSO_ApproachType;
class RaceTrackOrbitType;

/** Indicates a number of specific maneuvers to reach a new orbit. */
class OrbitChangeChoiceType : public virtual uci::type::OrbitChangeChoiceType {
public:
  /** The constructor */
  OrbitChangeChoiceType();

  /** The copy constructor
    *
    * @param rhs The OrbitChangeChoiceType to copy from
    */
  OrbitChangeChoiceType(const OrbitChangeChoiceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OrbitChangeChoiceType to move from
    */
  OrbitChangeChoiceType(OrbitChangeChoiceType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The OrbitChangeChoiceType to copy from
    * @return The OrbitChangeChoiceType that was assigned
    */
  OrbitChangeChoiceType& operator=(const OrbitChangeChoiceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OrbitChangeChoiceType to move from
    * @return The OrbitChangeChoiceType that was assigned
    */
  OrbitChangeChoiceType& operator=(OrbitChangeChoiceType&& rhs) = delete;

  /** The destructor */
  virtual ~OrbitChangeChoiceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitChangeChoiceType whose contents are to be used to set this
    *      uci::type::OrbitChangeChoiceType's contents.
    */
  void copy(const uci::type::OrbitChangeChoiceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitChangeChoiceType whose contents are to be used to set this
    *      uci::type::OrbitChangeChoiceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OrbitChangeChoiceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::OrbitChangeChoiceType::OrbitChangeChoiceTypeChoice getOrbitChangeChoiceTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getOrbitChangeChoiceTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setOrbitChangeChoiceTypeChoiceOrdinal(uci::type::OrbitChangeChoiceType::OrbitChangeChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SpecificOrbit field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificOrbit field.
    */
  uci::type::COE_OrbitType& getSpecificOrbit_() const;

  /** Returns the accessor to the SpecificOrbit field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificOrbit field.
    */
  const uci::type::COE_OrbitType& getSpecificOrbit() const override;

  /** Returns the accessor to the SpecificOrbit field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificOrbit field.
    */
  uci::type::COE_OrbitType& getSpecificOrbit() override;

  /** Sets this choice's choice to be specificOrbit and initializes specificOrbit to be the specified value. A deep copy
    * will be used by this method to set specificOrbit
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setSpecificOrbit(const uci::type::COE_OrbitType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpecificOrbit.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpecificOrbit, false otherwise.
    */
  bool isSpecificOrbit() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificOrbit.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificOrbit.
    */
  uci::type::COE_OrbitType& chooseSpecificOrbit(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificOrbit.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificOrbit.
    */
  uci::type::COE_OrbitType& chooseSpecificOrbit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SpecificPosition field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificPosition field.
    */
  uci::type::OrbitalVolumeType& getSpecificPosition_() const;

  /** Returns the accessor to the SpecificPosition field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificPosition field.
    */
  const uci::type::OrbitalVolumeType& getSpecificPosition() const override;

  /** Returns the accessor to the SpecificPosition field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificPosition field.
    */
  uci::type::OrbitalVolumeType& getSpecificPosition() override;

  /** Sets this choice's choice to be specificPosition and initializes specificPosition to be the specified value. A deep
    * copy will be used by this method to set specificPosition
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setSpecificPosition(const uci::type::OrbitalVolumeType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpecificPosition.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpecificPosition, false
    *      otherwise.
    */
  bool isSpecificPosition() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificPosition.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificPosition.
    */
  uci::type::OrbitalVolumeType& chooseSpecificPosition(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificPosition.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificPosition.
    */
  uci::type::OrbitalVolumeType& chooseSpecificPosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Rendezvous field contained in this message fragment
    *
    * @return The const reference to the accessor to the Rendezvous field.
    */
  uci::type::RSO_ApproachType& getRendezvous_() const;

  /** Returns the accessor to the Rendezvous field contained in this message fragment
    *
    * @return The reference to the accessor to the Rendezvous field.
    */
  const uci::type::RSO_ApproachType& getRendezvous() const override;

  /** Returns the accessor to the Rendezvous field contained in this message fragment
    *
    * @return The reference to the accessor to the Rendezvous field.
    */
  uci::type::RSO_ApproachType& getRendezvous() override;

  /** Sets this choice's choice to be rendezvous and initializes rendezvous to be the specified value. A deep copy will be
    * used by this method to set rendezvous
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setRendezvous(const uci::type::RSO_ApproachType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Rendezvous.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Rendezvous, false otherwise.
    */
  bool isRendezvous() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Rendezvous.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Rendezvous.
    */
  uci::type::RSO_ApproachType& chooseRendezvous(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Rendezvous.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Rendezvous.
    */
  uci::type::RSO_ApproachType& chooseRendezvous(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ProximityOperations field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProximityOperations field.
    */
  uci::type::ProximityOperationsType& getProximityOperations_() const;

  /** Returns the accessor to the ProximityOperations field contained in this message fragment
    *
    * @return The reference to the accessor to the ProximityOperations field.
    */
  const uci::type::ProximityOperationsType& getProximityOperations() const override;

  /** Returns the accessor to the ProximityOperations field contained in this message fragment
    *
    * @return The reference to the accessor to the ProximityOperations field.
    */
  uci::type::ProximityOperationsType& getProximityOperations() override;

  /** Sets this choice's choice to be proximityOperations and initializes proximityOperations to be the specified value. A
    * deep copy will be used by this method to set proximityOperations
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setProximityOperations(const uci::type::ProximityOperationsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProximityOperations.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProximityOperations, false
    *      otherwise.
    */
  bool isProximityOperations() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ProximityOperations.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProximityOperations.
    */
  uci::type::ProximityOperationsType& chooseProximityOperations(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ProximityOperations.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProximityOperations.
    */
  uci::type::ProximityOperationsType& chooseProximityOperations(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's Longitude item
    *
    * @return The contents of the Longitude field
    */
  uci::type::AngleTypeValue getLongitude() const override;

  /** Sets this choice's choice to be Longitude and initializes Longitude to be the specified value
    *
    * @param value The new value to set Longitude to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setLongitude(uci::type::AngleTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Longitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Longitude, false otherwise.
    */
  bool isLongitude() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Longitude. */
  void chooseLongitude();

  /** Returns the contents of the message's SemimajorAxis item
    *
    * @return The contents of the SemimajorAxis field
    */
  uci::type::DistanceTypeValue getSemimajorAxis() const override;

  /** Sets this choice's choice to be SemimajorAxis and initializes SemimajorAxis to be the specified value
    *
    * @param value The new value to set SemimajorAxis to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setSemimajorAxis(uci::type::DistanceTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SemimajorAxis.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SemimajorAxis, false otherwise.
    */
  bool isSemimajorAxis() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SemimajorAxis. */
  void chooseSemimajorAxis();

  /** Returns the contents of the message's Inclination item
    *
    * @return The contents of the Inclination field
    */
  uci::type::AngleHalfPositiveTypeValue getInclination() const override;

  /** Sets this choice's choice to be Inclination and initializes Inclination to be the specified value
    *
    * @param value The new value to set Inclination to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setInclination(uci::type::AngleHalfPositiveTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Inclination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Inclination, false otherwise.
    */
  bool isInclination() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Inclination. */
  void chooseInclination();

  /** Returns the contents of the message's Eccentricity item
    *
    * @return The contents of the Eccentricity field
    */
  xs::Double getEccentricity() const override;

  /** Sets this choice's choice to be Eccentricity and initializes Eccentricity to be the specified value
    *
    * @param value The new value to set Eccentricity to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setEccentricity(xs::Double value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Eccentricity.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Eccentricity, false otherwise.
    */
  bool isEccentricity() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Eccentricity. */
  void chooseEccentricity();

  /** Returns the accessor to the RaceTrack field contained in this message fragment
    *
    * @return The const reference to the accessor to the RaceTrack field.
    */
  uci::type::RaceTrackOrbitType& getRaceTrack_() const;

  /** Returns the accessor to the RaceTrack field contained in this message fragment
    *
    * @return The reference to the accessor to the RaceTrack field.
    */
  const uci::type::RaceTrackOrbitType& getRaceTrack() const override;

  /** Returns the accessor to the RaceTrack field contained in this message fragment
    *
    * @return The reference to the accessor to the RaceTrack field.
    */
  uci::type::RaceTrackOrbitType& getRaceTrack() override;

  /** Sets this choice's choice to be raceTrack and initializes raceTrack to be the specified value. A deep copy will be
    * used by this method to set raceTrack
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitChangeChoiceType& setRaceTrack(const uci::type::RaceTrackOrbitType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RaceTrack.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RaceTrack, false otherwise.
    */
  bool isRaceTrack() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RaceTrack.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RaceTrack.
    */
  uci::type::RaceTrackOrbitType& chooseRaceTrack(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RaceTrack.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RaceTrack.
    */
  uci::type::RaceTrackOrbitType& chooseRaceTrack(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OrbitChangeChoiceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitChangeChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OrbitChangeChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<COE_OrbitType> specificOrbit_Accessor;
  std::unique_ptr<OrbitalVolumeType> specificPosition_Accessor;
  std::unique_ptr<RSO_ApproachType> rendezvous_Accessor;
  std::unique_ptr<ProximityOperationsType> proximityOperations_Accessor;
  boost::optional<asb_xs::Double> longitude_Accessor;
  boost::optional<asb_xs::Double> semimajorAxis_Accessor;
  boost::optional<asb_xs::Double> inclination_Accessor;
  boost::optional<asb_xs::Double> eccentricity_Accessor;
  std::unique_ptr<RaceTrackOrbitType> raceTrack_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ORBITCHANGECHOICETYPE_H
