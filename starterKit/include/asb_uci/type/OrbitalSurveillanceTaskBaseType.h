/** @file OrbitalSurveillanceTaskBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ORBITALSURVEILLANCETASKBASETYPE_H
#define ASB_UCI_TYPE_ORBITALSURVEILLANCETASKBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DistanceType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceCapabilityEnum.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSubCapabilityEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceTaskBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AllowableSensorsType;
class OrbitalSurveillanceSubCapabilityDetailsChoiceType;
class ProductNeededByType;
class SDA_SpecialInstructionsConstraintType;

/** The base type for an Orbital Surveillance Task. */
class OrbitalSurveillanceTaskBaseType : public virtual uci::type::OrbitalSurveillanceTaskBaseType {
public:
  /** Indicates additional instructions associated with tasking for sensor collections. When "All" is chosen, all of the
    * special instructions must be accomplished to satisfy the Task. When "Any" is chosen, that Task can be satisfied by
    * performing only one of the special instructions provided. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SDA_SpecialInstructions = asb_uci::base::BoundedList<uci::type::SDA_SpecialInstructionsConstraintType, uci::type::accessorType::sDA_SpecialInstructionsConstraintType, asb_uci::type::SDA_SpecialInstructionsConstraintType>;

  /** The constructor */
  OrbitalSurveillanceTaskBaseType();

  /** The copy constructor
    *
    * @param rhs The OrbitalSurveillanceTaskBaseType to copy from
    */
  OrbitalSurveillanceTaskBaseType(const OrbitalSurveillanceTaskBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OrbitalSurveillanceTaskBaseType to move from
    */
  OrbitalSurveillanceTaskBaseType(OrbitalSurveillanceTaskBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The OrbitalSurveillanceTaskBaseType to copy from
    * @return The OrbitalSurveillanceTaskBaseType that was assigned
    */
  OrbitalSurveillanceTaskBaseType& operator=(const OrbitalSurveillanceTaskBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OrbitalSurveillanceTaskBaseType to move from
    * @return The OrbitalSurveillanceTaskBaseType that was assigned
    */
  OrbitalSurveillanceTaskBaseType& operator=(OrbitalSurveillanceTaskBaseType&& rhs) = delete;

  /** The destructor */
  virtual ~OrbitalSurveillanceTaskBaseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalSurveillanceTaskBaseType whose contents are to be used to set this
    *      uci::type::OrbitalSurveillanceTaskBaseType's contents.
    */
  void copy(const uci::type::OrbitalSurveillanceTaskBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalSurveillanceTaskBaseType whose contents are to be used to set this
    *      uci::type::OrbitalSurveillanceTaskBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OrbitalSurveillanceTaskBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  const uci::type::OrbitalSurveillanceCapabilityEnum& getCapabilityType() const override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  uci::type::OrbitalSurveillanceCapabilityEnum& getCapabilityType() override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param accessor The accessor to use to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setCapabilityType(const uci::type::OrbitalSurveillanceCapabilityEnum& accessor) override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param value The new value to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setCapabilityType(uci::type::OrbitalSurveillanceCapabilityEnum::EnumerationItem value) override;

  /** Returns the accessor to the SubCapabilityType field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCapabilityType field.
    */
  const uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& getSubCapabilityType() const override;

  /** Returns the accessor to the SubCapabilityType field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCapabilityType field.
    */
  uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& getSubCapabilityType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setSubCapabilityType(const uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSurveillanceSubCapabilityEnum& getInformationObjective_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalSurveillanceSubCapabilityEnum& getInformationObjective() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSurveillanceSubCapabilityEnum& getInformationObjective() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setInformationObjective(const uci::type::OrbitalSurveillanceSubCapabilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setInformationObjective(uci::type::OrbitalSurveillanceSubCapabilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field InformationObjectiveis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInformationObjective() const noexcept override;

  /** Enables the optional field such that getInformationObjective will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSurveillanceSubCapabilityEnum& enableInformationObjective(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& clearInformationObjective() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getMinSize() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setMinSize(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field MinSizeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinSize() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& clearMinSize() noexcept override;

  /** Returns the contents of the message's ConfirmObjectAcquisition field
    *
    * @return The contents of the ConfirmObjectAcquisition field
    */
  xs::Boolean getConfirmObjectAcquisition() const override;

  /** Sets the contents of the message's ConfirmObjectAcquisition field
    *
    * @param value The new value to set the ConfirmObjectAcquisition field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setConfirmObjectAcquisition(xs::Boolean value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductNeededByType& getProductNeededBy_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ProductNeededByType& getProductNeededBy() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductNeededByType& getProductNeededBy() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setProductNeededBy(const uci::type::ProductNeededByType& accessor) override;

  /** Returns whether this optional field ProductNeededByis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProductNeededBy() const noexcept override;

  /** Enables the optional field such that getProductNeededBy will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductNeededByType& enableProductNeededBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& clearProductNeededBy() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AllowableSensorsType& getSensorConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AllowableSensorsType& getSensorConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AllowableSensorsType& getSensorConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setSensorConstraints(const uci::type::AllowableSensorsType& accessor) override;

  /** Returns whether this optional field SensorConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSensorConstraints() const noexcept override;

  /** Enables the optional field such that getSensorConstraints will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AllowableSensorsType& enableSensorConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& clearSensorConstraints() noexcept override;

  /** Returns the accessor to the SDA_SpecialInstructions field contained in this message fragment
    *
    * @return The const reference to the accessor to the SDA_SpecialInstructions field.
    */
  const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& getSDA_SpecialInstructions() const override;

  /** Returns the accessor to the SDA_SpecialInstructions field contained in this message fragment
    *
    * @return The reference to the accessor to the SDA_SpecialInstructions field.
    */
  uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& getSDA_SpecialInstructions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceTaskBaseType& setSDA_SpecialInstructions(const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OrbitalSurveillanceTaskBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceTaskBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OrbitalSurveillanceTaskBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<OrbitalSurveillanceCapabilityEnum> capabilityType_Accessor;
  std::unique_ptr<OrbitalSurveillanceSubCapabilityDetailsChoiceType> subCapabilityType_Accessor;
  std::unique_ptr<OrbitalSurveillanceSubCapabilityEnum> informationObjective_Accessor;
  boost::optional<DistanceTypeValue> minSize_Accessor;
  asb_xs::Boolean confirmObjectAcquisition_Accessor{false};
  std::unique_ptr<ProductNeededByType> productNeededBy_Accessor;
  std::unique_ptr<AllowableSensorsType> sensorConstraints_Accessor;
  std::unique_ptr<SDA_SpecialInstructions> sDA_SpecialInstructions_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ORBITALSURVEILLANCETASKBASETYPE_H
