/** @file CS_CapabilitiesType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CS_CAPABILITIESTYPE_H
#define ASB_UCI_TYPE_CS_CAPABILITIESTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/AngleHalfType.h"
#include "asb_uci/type/AngleRateType.h"
#include "asb_uci/type/FrequencyType.h"
#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/type/PolarizationEnum.h"
#include "asb_uci/type/PowerType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/CS_CapabilitiesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CS_ObscuraDataType;
class CS_SensorDataType;
class ForeignKeyType;
class FrequencyRangeType;
class Point3D_Type;

/** This type represents sub-capabilities for a CounterSpace capability. These typically represent individual receive and
  * transmit capabilities.
  */
class CS_CapabilitiesType : public virtual uci::type::CS_CapabilitiesType {
public:
  /** The modulations supported by this sub-capability. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 62]
    */
  using Modulation = asb_uci::base::BoundedList<uci::type::ModulationEnum, uci::type::accessorType::modulationEnum, asb_uci::type::ModulationEnum>;

  /** The polarizations supported by this sub-capability. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 12]
    */
  using Polarization = asb_uci::base::BoundedList<uci::type::PolarizationEnum, uci::type::accessorType::polarizationEnum, asb_uci::type::PolarizationEnum>;

  /** The constructor */
  CS_CapabilitiesType();

  /** The copy constructor
    *
    * @param rhs The CS_CapabilitiesType to copy from
    */
  CS_CapabilitiesType(const CS_CapabilitiesType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CS_CapabilitiesType to move from
    */
  CS_CapabilitiesType(CS_CapabilitiesType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CS_CapabilitiesType to copy from
    * @return The CS_CapabilitiesType that was assigned
    */
  CS_CapabilitiesType& operator=(const CS_CapabilitiesType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CS_CapabilitiesType to move from
    * @return The CS_CapabilitiesType that was assigned
    */
  CS_CapabilitiesType& operator=(CS_CapabilitiesType&& rhs) = delete;

  /** The destructor */
  virtual ~CS_CapabilitiesType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CS_CapabilitiesType whose contents are to be used to set this
    *      uci::type::CS_CapabilitiesType's contents.
    */
  void copy(const uci::type::CS_CapabilitiesType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CS_CapabilitiesType whose contents are to be used to set this
    *      uci::type::CS_CapabilitiesType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CS_CapabilitiesType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SubCapabilityName field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCapabilityName field.
    */
  const uci::type::ForeignKeyType& getSubCapabilityName() const override;

  /** Returns the accessor to the SubCapabilityName field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCapabilityName field.
    */
  uci::type::ForeignKeyType& getSubCapabilityName() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setSubCapabilityName(const uci::type::ForeignKeyType& accessor) override;

  /** Enables the optional field such that getSubCapabilityName will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableSubCapabilityName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getDependency() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setDependency(xs::Int value) override;

  /** Returns whether this optional field Dependencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDependency() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearDependency() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getTxFrequency_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FrequencyRangeType& getTxFrequency() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getTxFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setTxFrequency(const uci::type::FrequencyRangeType& accessor) override;

  /** Returns whether this optional field TxFrequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTxFrequency() const noexcept override;

  /** Enables the optional field such that getTxFrequency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& enableTxFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearTxFrequency() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getTxBandwidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setTxBandwidth(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field TxBandwidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTxBandwidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearTxBandwidth() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PowerTypeValue getPower() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setPower(uci::type::PowerTypeValue value) override;

  /** Returns whether this optional field Poweris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPower() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearPower() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getRxFrequency_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FrequencyRangeType& getRxFrequency() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getRxFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setRxFrequency(const uci::type::FrequencyRangeType& accessor) override;

  /** Returns whether this optional field RxFrequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRxFrequency() const noexcept override;

  /** Enables the optional field such that getRxFrequency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& enableRxFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearRxFrequency() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getRxBandwidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setRxBandwidth(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field RxBandwidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRxBandwidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearRxBandwidth() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleRateTypeValue getAzSlewRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setAzSlewRate(uci::type::AngleRateTypeValue value) override;

  /** Returns whether this optional field AzSlewRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAzSlewRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearAzSlewRate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleRateTypeValue getElSlewRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setElSlewRate(uci::type::AngleRateTypeValue value) override;

  /** Returns whether this optional field ElSlewRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasElSlewRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearElSlewRate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleHalfTypeValue getMinElevation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setMinElevation(uci::type::AngleHalfTypeValue value) override;

  /** Returns whether this optional field MinElevationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinElevation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearMinElevation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleHalfTypeValue getMaxElevation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setMaxElevation(uci::type::AngleHalfTypeValue value) override;

  /** Returns whether this optional field MaxElevationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMaxElevation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearMaxElevation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getCapacity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setCapacity(xs::UnsignedInt value) override;

  /** Returns whether this optional field Capacityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCapacity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearCapacity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getLocation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point3D_Type& getLocation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getLocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setLocation(const uci::type::Point3D_Type& accessor) override;

  /** Returns whether this optional field Locationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocation() const noexcept override;

  /** Enables the optional field such that getLocation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& enableLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearLocation() noexcept override;

  /** Returns the accessor to the Modulation field contained in this message fragment
    *
    * @return The const reference to the accessor to the Modulation field.
    */
  const uci::type::CS_CapabilitiesType::Modulation& getModulation() const override;

  /** Returns the accessor to the Modulation field contained in this message fragment
    *
    * @return The reference to the accessor to the Modulation field.
    */
  uci::type::CS_CapabilitiesType::Modulation& getModulation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setModulation(const uci::type::CS_CapabilitiesType::Modulation& accessor) override;

  /** Returns the accessor to the Polarization field contained in this message fragment
    *
    * @return The const reference to the accessor to the Polarization field.
    */
  const uci::type::CS_CapabilitiesType::Polarization& getPolarization() const override;

  /** Returns the accessor to the Polarization field contained in this message fragment
    *
    * @return The reference to the accessor to the Polarization field.
    */
  uci::type::CS_CapabilitiesType::Polarization& getPolarization() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setPolarization(const uci::type::CS_CapabilitiesType::Polarization& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_ObscuraDataType& getObscuraData_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CS_ObscuraDataType& getObscuraData() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_ObscuraDataType& getObscuraData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setObscuraData(const uci::type::CS_ObscuraDataType& accessor) override;

  /** Returns whether this optional field ObscuraDatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObscuraData() const noexcept override;

  /** Enables the optional field such that getObscuraData will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_ObscuraDataType& enableObscuraData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearObscuraData() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_SensorDataType& getSensorData_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CS_SensorDataType& getSensorData() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_SensorDataType& getSensorData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& setSensorData(const uci::type::CS_SensorDataType& accessor) override;

  /** Returns whether this optional field SensorDatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSensorData() const noexcept override;

  /** Enables the optional field such that getSensorData will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_SensorDataType& enableSensorData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_CapabilitiesType& clearSensorData() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CS_CapabilitiesType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_CapabilitiesType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CS_CapabilitiesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ForeignKeyType> subCapabilityName_Accessor;
  boost::optional<asb_xs::Int> dependency_Accessor;
  std::unique_ptr<FrequencyRangeType> txFrequency_Accessor;
  boost::optional<FrequencyTypeValue> txBandwidth_Accessor;
  boost::optional<PowerTypeValue> power_Accessor;
  std::unique_ptr<FrequencyRangeType> rxFrequency_Accessor;
  boost::optional<FrequencyTypeValue> rxBandwidth_Accessor;
  boost::optional<AngleRateTypeValue> azSlewRate_Accessor;
  boost::optional<AngleRateTypeValue> elSlewRate_Accessor;
  boost::optional<AngleHalfTypeValue> minElevation_Accessor;
  boost::optional<AngleHalfTypeValue> maxElevation_Accessor;
  boost::optional<asb_xs::UnsignedInt> capacity_Accessor;
  std::unique_ptr<Point3D_Type> location_Accessor;
  std::unique_ptr<Modulation> modulation_Accessor;
  std::unique_ptr<Polarization> polarization_Accessor;
  std::unique_ptr<CS_ObscuraDataType> obscuraData_Accessor;
  std::unique_ptr<CS_SensorDataType> sensorData_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CS_CAPABILITIESTYPE_H
