/** @file SubsystemFaultType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SUBSYSTEMFAULTTYPE_H
#define ASB_UCI_TYPE_SUBSYSTEMFAULTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/FaultSeverityEnum.h"
#include "../../../include/asb_uci/type/FaultStateEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemFaultType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityID_Type;
class ComponentID_Type;
class FaultDataType;
class FaultID_Type;
class ServiceID_Type;
class SubsystemFaultAmbiguityGroupType;
class SubsystemID_Type;
class SupportCapabilityID_Type;

/** Contains fault data for reporting by subsystems and services. */
class SubsystemFaultType : public virtual uci::type::SubsystemFaultType {
public:
  /** Additional fault data which contains key/value pairs with format and unit indicated for the data value. This data
    * supports fault isolation and helps to minimize false alarms. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using FaultData = asb_uci::base::BoundedList<uci::type::FaultDataType, uci::type::accessorType::faultDataType, asb_uci::type::FaultDataType>;

  /** Indicates the unique ID of a Capability related to the fault. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CapabilityID = asb_uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type, asb_uci::type::CapabilityID_Type>;

  /** Indicates the unique ID of a SupportCapability related to the fault. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using SupportCapabilityID = asb_uci::base::BoundedList<uci::type::SupportCapabilityID_Type, uci::type::accessorType::supportCapabilityID_Type, asb_uci::type::SupportCapabilityID_Type>;

  /** Indicates the unique ID of a Component related to the fault. When multiple components are identified, it should be
    * inferred that each Component has been individually determined to be related to the fault. In situations where the
    * Subsystem has not yet been able to isolate the fault to individual components, the sibling AmbiguityGroup element
    * should be used. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ComponentID = asb_uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type, asb_uci::type::ComponentID_Type>;

  /** Indicates that a fault has been narrowed down to a set of components, but not yet fully isolated. Separate
    * AmbiguityGroups can be provided when it is desirable to associate specific tests with a subset of the set of
    * components. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AmbiguityGroup = asb_uci::base::BoundedList<uci::type::SubsystemFaultAmbiguityGroupType, uci::type::accessorType::subsystemFaultAmbiguityGroupType, asb_uci::type::SubsystemFaultAmbiguityGroupType>;

  /** The constructor */
  SubsystemFaultType();

  /** The copy constructor
    *
    * @param rhs The SubsystemFaultType to copy from
    */
  SubsystemFaultType(const SubsystemFaultType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SubsystemFaultType to move from
    */
  SubsystemFaultType(SubsystemFaultType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SubsystemFaultType to copy from
    * @return The SubsystemFaultType that was assigned
    */
  SubsystemFaultType& operator=(const SubsystemFaultType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SubsystemFaultType to move from
    * @return The SubsystemFaultType that was assigned
    */
  SubsystemFaultType& operator=(SubsystemFaultType&& rhs) = delete;

  /** The destructor */
  virtual ~SubsystemFaultType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SubsystemFaultType whose contents are to be used to set this
    *      uci::type::SubsystemFaultType's contents.
    */
  void copy(const uci::type::SubsystemFaultType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SubsystemFaultType whose contents are to be used to set this
    *      uci::type::SubsystemFaultType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SubsystemFaultType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the FaultID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FaultID field.
    */
  const uci::type::FaultID_Type& getFaultID() const override;

  /** Returns the accessor to the FaultID field contained in this message fragment
    *
    * @return The reference to the accessor to the FaultID field.
    */
  uci::type::FaultID_Type& getFaultID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultID(const uci::type::FaultID_Type& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FaultSeverityEnum& getSeverity_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FaultSeverityEnum& getSeverity() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FaultSeverityEnum& getSeverity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setSeverity(const uci::type::FaultSeverityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setSeverity(uci::type::FaultSeverityEnum::EnumerationItem value) override;

  /** Returns whether this optional field Severityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSeverity() const noexcept override;

  /** Enables the optional field such that getSeverity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FaultSeverityEnum& enableSeverity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& clearSeverity() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FaultStateEnum& getFaultState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FaultStateEnum& getFaultState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FaultStateEnum& getFaultState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultState(const uci::type::FaultStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultState(uci::type::FaultStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field FaultStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFaultState() const noexcept override;

  /** Enables the optional field such that getFaultState will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FaultStateEnum& enableFaultState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& clearFaultState() noexcept override;

  /** Returns the accessor to the FaultData field contained in this message fragment
    *
    * @return The const reference to the accessor to the FaultData field.
    */
  const uci::type::SubsystemFaultType::FaultData& getFaultData() const override;

  /** Returns the accessor to the FaultData field contained in this message fragment
    *
    * @return The reference to the accessor to the FaultData field.
    */
  uci::type::SubsystemFaultType::FaultData& getFaultData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultData(const uci::type::SubsystemFaultType::FaultData& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getDetectionTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setDetectionTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field DetectionTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDetectionTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& clearDetectionTime() noexcept override;

  /** Returns the contents of the message's FaultCode field
    *
    * @return The contents of the FaultCode field
    */
  const asb_uci::type::VisibleString256Type& getFaultCode() const noexcept override;

  /** Returns the contents of the message's FaultCode field
    *
    * @return The contents of the FaultCode field
    */
  asb_uci::type::VisibleString256Type& getFaultCode() noexcept override;

  /** Sets the contents of the message's FaultCode field
    *
    * @param value The new value to set the FaultCode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultCode(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the contents of the message's FaultCode field
    *
    * @param value The new value to set the FaultCode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultCode(const std::string& value) override;

  /** Sets the contents of the message's FaultCode field
    *
    * @param value The new value to set the FaultCode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultCode(const char* value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getFaultCodeCount() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultCodeCount(xs::Int value) override;

  /** Returns whether this optional field FaultCodeCountis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFaultCodeCount() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& clearFaultCodeCount() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getFaultDescription_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const asb_uci::type::VisibleString256Type& getFaultDescription() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& getFaultDescription() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultDescription(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultDescription(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setFaultDescription(const char* value) override;

  /** Returns whether this optional field faultDescription_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFaultDescription() const noexcept override;

  /** Enables the optional field such that getFaultDescription will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  asb_uci::type::VisibleString256Type& enableFaultDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& clearFaultDescription() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& getSubsystemID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SubsystemID_Type& getSubsystemID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& getSubsystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setSubsystemID(const uci::type::SubsystemID_Type& accessor) override;

  /** Returns whether this optional field SubsystemIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubsystemID() const noexcept override;

  /** Enables the optional field such that getSubsystemID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& enableSubsystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& clearSubsystemID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ServiceID_Type& getServiceID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ServiceID_Type& getServiceID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ServiceID_Type& getServiceID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setServiceID(const uci::type::ServiceID_Type& accessor) override;

  /** Returns whether this optional field ServiceIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasServiceID() const noexcept override;

  /** Enables the optional field such that getServiceID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ServiceID_Type& enableServiceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& clearServiceID() noexcept override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityID field.
    */
  const uci::type::SubsystemFaultType::CapabilityID& getCapabilityID() const override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityID field.
    */
  uci::type::SubsystemFaultType::CapabilityID& getCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setCapabilityID(const uci::type::SubsystemFaultType::CapabilityID& accessor) override;

  /** Returns the accessor to the SupportCapabilityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SupportCapabilityID field.
    */
  const uci::type::SubsystemFaultType::SupportCapabilityID& getSupportCapabilityID() const override;

  /** Returns the accessor to the SupportCapabilityID field contained in this message fragment
    *
    * @return The reference to the accessor to the SupportCapabilityID field.
    */
  uci::type::SubsystemFaultType::SupportCapabilityID& getSupportCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setSupportCapabilityID(const uci::type::SubsystemFaultType::SupportCapabilityID& accessor) override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentID field.
    */
  const uci::type::SubsystemFaultType::ComponentID& getComponentID() const override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentID field.
    */
  uci::type::SubsystemFaultType::ComponentID& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setComponentID(const uci::type::SubsystemFaultType::ComponentID& accessor) override;

  /** Returns the accessor to the AmbiguityGroup field contained in this message fragment
    *
    * @return The const reference to the accessor to the AmbiguityGroup field.
    */
  const uci::type::SubsystemFaultType::AmbiguityGroup& getAmbiguityGroup() const override;

  /** Returns the accessor to the AmbiguityGroup field contained in this message fragment
    *
    * @return The reference to the accessor to the AmbiguityGroup field.
    */
  uci::type::SubsystemFaultType::AmbiguityGroup& getAmbiguityGroup() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemFaultType& setAmbiguityGroup(const uci::type::SubsystemFaultType::AmbiguityGroup& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SubsystemFaultType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemFaultType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SubsystemFaultType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<FaultID_Type> faultID_Accessor;
  std::unique_ptr<FaultSeverityEnum> severity_Accessor;
  std::unique_ptr<FaultStateEnum> faultState_Accessor;
  std::unique_ptr<FaultData> faultData_Accessor;
  boost::optional<DateTimeTypeValue> detectionTime_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> faultCode_Accessor;
  boost::optional<asb_xs::Int> faultCodeCount_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> faultDescription_Accessor;
  std::unique_ptr<SubsystemID_Type> subsystemID_Accessor;
  std::unique_ptr<ServiceID_Type> serviceID_Accessor;
  std::unique_ptr<CapabilityID> capabilityID_Accessor;
  std::unique_ptr<SupportCapabilityID> supportCapabilityID_Accessor;
  std::unique_ptr<ComponentID> componentID_Accessor;
  std::unique_ptr<AmbiguityGroup> ambiguityGroup_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SUBSYSTEMFAULTTYPE_H
