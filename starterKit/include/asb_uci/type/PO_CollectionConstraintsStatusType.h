/** @file PO_CollectionConstraintsStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_COLLECTIONCONSTRAINTSSTATUSTYPE_H
#define ASB_UCI_TYPE_PO_COLLECTIONCONSTRAINTSSTATUSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "uci/type/PO_CollectionConstraintsStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class PO_AngleConstraintControlsStatusType;
class PO_ColorPatternConstraintControlsStatusType;
class PO_GimbalOrientationConstraintControlsStatusType;
class PO_SlantRangeConstraintControlsStatusType;
class PO_SweepSpeedConstraintControlsStatusType;

/** This type is used to return the current settings of the set of constraints that constrain when a PO sensor can start
  * collecting the requested image data.
  */
class PO_CollectionConstraintsStatusType : public virtual uci::type::PO_CollectionConstraintsStatusType {
public:
  /** The constructor */
  PO_CollectionConstraintsStatusType();

  /** The copy constructor
    *
    * @param rhs The PO_CollectionConstraintsStatusType to copy from
    */
  PO_CollectionConstraintsStatusType(const PO_CollectionConstraintsStatusType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_CollectionConstraintsStatusType to move from
    */
  PO_CollectionConstraintsStatusType(PO_CollectionConstraintsStatusType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_CollectionConstraintsStatusType to copy from
    * @return The PO_CollectionConstraintsStatusType that was assigned
    */
  PO_CollectionConstraintsStatusType& operator=(const PO_CollectionConstraintsStatusType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_CollectionConstraintsStatusType to move from
    * @return The PO_CollectionConstraintsStatusType that was assigned
    */
  PO_CollectionConstraintsStatusType& operator=(PO_CollectionConstraintsStatusType&& rhs) = delete;

  /** The destructor */
  virtual ~PO_CollectionConstraintsStatusType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CollectionConstraintsStatusType whose contents are to be used to set this
    *      uci::type::PO_CollectionConstraintsStatusType's contents.
    */
  void copy(const uci::type::PO_CollectionConstraintsStatusType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CollectionConstraintsStatusType whose contents are to be used to set this
    *      uci::type::PO_CollectionConstraintsStatusType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_CollectionConstraintsStatusType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getMapAngleConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getMapAngleConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getMapAngleConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setMapAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field MapAngleConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMapAngleConstraints() const noexcept override;

  /** Enables the optional field such that getMapAngleConstraints will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableMapAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearMapAngleConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getGrazingAngleConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getGrazingAngleConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getGrazingAngleConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setGrazingAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field GrazingAngleConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGrazingAngleConstraints() const noexcept override;

  /** Enables the optional field such that getGrazingAngleConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableGrazingAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearGrazingAngleConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getLookAngleConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getLookAngleConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getLookAngleConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setLookAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field LookAngleConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLookAngleConstraints() const noexcept override;

  /** Enables the optional field such that getLookAngleConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableLookAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearLookAngleConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getElevationAngleConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getElevationAngleConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getElevationAngleConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setElevationAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field ElevationAngleConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasElevationAngleConstraints() const noexcept override;

  /** Enables the optional field such that getElevationAngleConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableElevationAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearElevationAngleConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SlantRangeConstraintControlsStatusType& getSlantRangeConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_SlantRangeConstraintControlsStatusType& getSlantRangeConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SlantRangeConstraintControlsStatusType& getSlantRangeConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setSlantRangeConstraints(const uci::type::PO_SlantRangeConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field SlantRangeConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSlantRangeConstraints() const noexcept override;

  /** Enables the optional field such that getSlantRangeConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SlantRangeConstraintControlsStatusType& enableSlantRangeConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearSlantRangeConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ColorPatternConstraintControlsStatusType& getCollectionPattern_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ColorPatternConstraintControlsStatusType& getCollectionPattern() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ColorPatternConstraintControlsStatusType& getCollectionPattern() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setCollectionPattern(const uci::type::PO_ColorPatternConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field CollectionPatternis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionPattern() const noexcept override;

  /** Enables the optional field such that getCollectionPattern will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ColorPatternConstraintControlsStatusType& enableCollectionPattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearCollectionPattern() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getSunElevAngles_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getSunElevAngles() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getSunElevAngles() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setSunElevAngles(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field SunElevAnglesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSunElevAngles() const noexcept override;

  /** Enables the optional field such that getSunElevAngles will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableSunElevAngles(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearSunElevAngles() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getSunAzimuthAngles_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getSunAzimuthAngles() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getSunAzimuthAngles() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setSunAzimuthAngles(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field SunAzimuthAnglesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSunAzimuthAngles() const noexcept override;

  /** Enables the optional field such that getSunAzimuthAngles will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableSunAzimuthAngles(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearSunAzimuthAngles() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SweepSpeedConstraintControlsStatusType& getSweepSpeed_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_SweepSpeedConstraintControlsStatusType& getSweepSpeed() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SweepSpeedConstraintControlsStatusType& getSweepSpeed() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setSweepSpeed(const uci::type::PO_SweepSpeedConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field SweepSpeedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSweepSpeed() const noexcept override;

  /** Enables the optional field such that getSweepSpeed will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SweepSpeedConstraintControlsStatusType& enableSweepSpeed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearSweepSpeed() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& getGimbalOrientation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_GimbalOrientationConstraintControlsStatusType& getGimbalOrientation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& getGimbalOrientation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& setGimbalOrientation(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field GimbalOrientationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGimbalOrientation() const noexcept override;

  /** Enables the optional field such that getGimbalOrientation will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& enableGimbalOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsStatusType& clearGimbalOrientation() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_CollectionConstraintsStatusType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CollectionConstraintsStatusType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_CollectionConstraintsStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PO_AngleConstraintControlsStatusType> mapAngleConstraints_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> grazingAngleConstraints_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> lookAngleConstraints_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> elevationAngleConstraints_Accessor;
  std::unique_ptr<PO_SlantRangeConstraintControlsStatusType> slantRangeConstraints_Accessor;
  std::unique_ptr<PO_ColorPatternConstraintControlsStatusType> collectionPattern_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> sunElevAngles_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> sunAzimuthAngles_Accessor;
  std::unique_ptr<PO_SweepSpeedConstraintControlsStatusType> sweepSpeed_Accessor;
  std::unique_ptr<PO_GimbalOrientationConstraintControlsStatusType> gimbalOrientation_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_COLLECTIONCONSTRAINTSSTATUSTYPE_H
