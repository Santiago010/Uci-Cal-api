/** @file AccessEventType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ACCESSEVENTTYPE_H
#define ASB_UCI_TYPE_ACCESSEVENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/AccessEffortEnum.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/DistanceType.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessEventType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EnduranceMultiStandardType;
class KinematicsMultiStandardType;
class ManeuverMultiStandardType;

/** Specifies the parameters for the AccessEvent. */
class AccessEventType : public virtual uci::type::AccessEventType {
public:
  /** The constructor */
  AccessEventType();

  /** The copy constructor
    *
    * @param rhs The AccessEventType to copy from
    */
  AccessEventType(const AccessEventType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The AccessEventType to move from
    */
  AccessEventType(AccessEventType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The AccessEventType to copy from
    * @return The AccessEventType that was assigned
    */
  AccessEventType& operator=(const AccessEventType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The AccessEventType to move from
    * @return The AccessEventType that was assigned
    */
  AccessEventType& operator=(AccessEventType&& rhs) = delete;

  /** The destructor */
  virtual ~AccessEventType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AccessEventType whose contents are to be used to set this uci::type::AccessEventType's
    *      contents.
    */
  void copy(const uci::type::AccessEventType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AccessEventType whose contents are to be used to set this uci::type::AccessEventType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::AccessEventType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's Effort field
    *
    * @return The contents of the Effort field
    */
  const uci::type::AccessEffortEnum& getEffort() const override;

  /** Returns the contents of the message's Effort field
    *
    * @return The contents of the Effort field
    */
  uci::type::AccessEffortEnum& getEffort() override;

  /** Sets the contents of the message's Effort field
    *
    * @param accessor The accessor to use to set the Effort field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setEffort(const uci::type::AccessEffortEnum& accessor) override;

  /** Sets the contents of the message's Effort field
    *
    * @param value The new value to set the Effort field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setEffort(uci::type::AccessEffortEnum::EnumerationItem value) override;

  /** Returns the contents of the message's Time field
    *
    * @return The contents of the Time field
    */
  uci::type::DateTimeTypeValue getTime() const override;

  /** Sets the contents of the message's Time field
    *
    * @param value The new value to set the Time field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setTime(uci::type::DateTimeTypeValue value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getDuration() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setDuration(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field Durationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDuration() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearDuration() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getProbabilityOfAccessAttempt() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setProbabilityOfAccessAttempt(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field ProbabilityOfAccessAttemptis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProbabilityOfAccessAttempt() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearProbabilityOfAccessAttempt() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getProbabilityOfSuccessfulAccess() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setProbabilityOfSuccessfulAccess(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field ProbabilityOfSuccessfulAccessis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProbabilityOfSuccessfulAccess() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearProbabilityOfSuccessfulAccess() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsMultiStandardType& getSubjectObjectKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::KinematicsMultiStandardType& getSubjectObjectKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsMultiStandardType& getSubjectObjectKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setSubjectObjectKinematics(const uci::type::KinematicsMultiStandardType& accessor) override;

  /** Returns whether this optional field SubjectObjectKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubjectObjectKinematics() const noexcept override;

  /** Enables the optional field such that getSubjectObjectKinematics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsMultiStandardType& enableSubjectObjectKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearSubjectObjectKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsMultiStandardType& getAssessedObjectKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::KinematicsMultiStandardType& getAssessedObjectKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsMultiStandardType& getAssessedObjectKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setAssessedObjectKinematics(const uci::type::KinematicsMultiStandardType& accessor) override;

  /** Returns whether this optional field AssessedObjectKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssessedObjectKinematics() const noexcept override;

  /** Enables the optional field such that getAssessedObjectKinematics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsMultiStandardType& enableAssessedObjectKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearAssessedObjectKinematics() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getObjectSeparation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setObjectSeparation(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field ObjectSeparationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObjectSeparation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearObjectSeparation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getUnambiguousTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setUnambiguousTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field UnambiguousTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUnambiguousTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearUnambiguousTime() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceMultiStandardType& getResourceConsumption_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EnduranceMultiStandardType& getResourceConsumption() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceMultiStandardType& getResourceConsumption() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setResourceConsumption(const uci::type::EnduranceMultiStandardType& accessor) override;

  /** Returns whether this optional field ResourceConsumptionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasResourceConsumption() const noexcept override;

  /** Enables the optional field such that getResourceConsumption will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceMultiStandardType& enableResourceConsumption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearResourceConsumption() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ManeuverMultiStandardType& getAssessedObjectManeuver_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ManeuverMultiStandardType& getAssessedObjectManeuver() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ManeuverMultiStandardType& getAssessedObjectManeuver() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& setAssessedObjectManeuver(const uci::type::ManeuverMultiStandardType& accessor) override;

  /** Returns whether this optional field AssessedObjectManeuveris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssessedObjectManeuver() const noexcept override;

  /** Enables the optional field such that getAssessedObjectManeuver will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ManeuverMultiStandardType& enableAssessedObjectManeuver(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessEventType& clearAssessedObjectManeuver() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<AccessEventType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::AccessEventType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::AccessEventType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<AccessEffortEnum> effort_Accessor;
  DateTimeTypeValue time_Accessor{0};
  boost::optional<DurationTypeValue> duration_Accessor;
  boost::optional<PercentTypeValue> probabilityOfAccessAttempt_Accessor;
  boost::optional<PercentTypeValue> probabilityOfSuccessfulAccess_Accessor;
  std::unique_ptr<KinematicsMultiStandardType> subjectObjectKinematics_Accessor;
  std::unique_ptr<KinematicsMultiStandardType> assessedObjectKinematics_Accessor;
  boost::optional<DistanceTypeValue> objectSeparation_Accessor;
  boost::optional<DateTimeTypeValue> unambiguousTime_Accessor;
  std::unique_ptr<EnduranceMultiStandardType> resourceConsumption_Accessor;
  std::unique_ptr<ManeuverMultiStandardType> assessedObjectManeuver_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ACCESSEVENTTYPE_H
