/** @file NITF_PackingPlanType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_NITF_PACKINGPLANTYPE_H
#define ASB_UCI_TYPE_NITF_PACKINGPLANTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/NITF_PackingPlanPET.h"
#include "uci/type/NITF_PackingPlanType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ACFTB_Type;
class AIMIDB_Type;
class EXPLTB_Type;
class FileHeaderType;
class ImageSubheaderType;
class MSTGTA_Type;
class PATCHB_Type;
class SECTGA_Type;

/** This type is a tailored reproduction of data definitions included in NITF as described in MIL-STD-2500C and companion
  * Appendices. This data must flow from Task or Command source to recipient so that the recipient can populate the
  * resulting Products with this data to enable PED and other functions. Under most circumstances, UCI doesn't reproduce
  * other standards "in-band", in UCI messages. An exception is made in this case because to do otherwise would disrupt
  * C2 and PED. NOTE: This version of the NITF_PackingPlanType suffers from the following problems: Most elements are one
  * space longer than allowed by NITF; some elements' lengths are off by more, short or long; many TREs and elements are
  * extraneous (set by platform, not needed in UCI Task message), while other required tasking authority fields are
  * missing; and many fields are free text that could be restricted by regular expressions to meet NITF standards. The
  * new variants of the PackingPlanPET resolve these problems for MIL-STD-2500A, B, C.
  */
class NITF_PackingPlanType : public virtual uci::type::NITF_PackingPlanType, public virtual NITF_PackingPlanPET {
public:
  /** Information to be used for populating the Secondary Target Revision A (SECTGA) tagged record extension (TRE) as
    * defined by the Compendium of Controlled Extensions (CE). Size of list is based on the number of allowed SECTGA
    * extensions that can exist in a single NITF file. [Occurrences: Minimum: 0; Maximum: 250]
    */
  using SECTGA = asb_uci::base::BoundedList<uci::type::SECTGA_Type, uci::type::accessorType::sECTGA_Type, asb_uci::type::SECTGA_Type>;

  /** The constructor */
  NITF_PackingPlanType();

  /** The copy constructor
    *
    * @param rhs The NITF_PackingPlanType to copy from
    */
  NITF_PackingPlanType(const NITF_PackingPlanType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The NITF_PackingPlanType to move from
    */
  NITF_PackingPlanType(NITF_PackingPlanType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The NITF_PackingPlanType to copy from
    * @return The NITF_PackingPlanType that was assigned
    */
  NITF_PackingPlanType& operator=(const NITF_PackingPlanType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The NITF_PackingPlanType to move from
    * @return The NITF_PackingPlanType that was assigned
    */
  NITF_PackingPlanType& operator=(NITF_PackingPlanType&& rhs) = delete;

  /** The destructor */
  ~NITF_PackingPlanType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::NITF_PackingPlanType whose contents are to be used to set this
    *      uci::type::NITF_PackingPlanType's contents.
    */
  void copy(const uci::type::NITF_PackingPlanType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::NITF_PackingPlanType whose contents are to be used to set this
    *      uci::type::NITF_PackingPlanType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::NITF_PackingPlanType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileHeaderType& getFileHeader_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FileHeaderType& getFileHeader() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileHeaderType& getFileHeader() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setFileHeader(const uci::type::FileHeaderType& accessor) override;

  /** Returns whether this optional field FileHeaderis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileHeader() const noexcept override;

  /** Enables the optional field such that getFileHeader will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileHeaderType& enableFileHeader(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearFileHeader() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ImageSubheaderType& getImageSubheader_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ImageSubheaderType& getImageSubheader() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ImageSubheaderType& getImageSubheader() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setImageSubheader(const uci::type::ImageSubheaderType& accessor) override;

  /** Returns whether this optional field ImageSubheaderis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageSubheader() const noexcept override;

  /** Enables the optional field such that getImageSubheader will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ImageSubheaderType& enableImageSubheader(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearImageSubheader() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ACFTB_Type& getACFTB_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ACFTB_Type& getACFTB() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ACFTB_Type& getACFTB() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setACFTB(const uci::type::ACFTB_Type& accessor) override;

  /** Returns whether this optional field ACFTBis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasACFTB() const noexcept override;

  /** Enables the optional field such that getACFTB will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ACFTB_Type& enableACFTB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearACFTB() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AIMIDB_Type& getAIMIDB_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AIMIDB_Type& getAIMIDB() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AIMIDB_Type& getAIMIDB() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setAIMIDB(const uci::type::AIMIDB_Type& accessor) override;

  /** Returns whether this optional field AIMIDBis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAIMIDB() const noexcept override;

  /** Enables the optional field such that getAIMIDB will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AIMIDB_Type& enableAIMIDB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearAIMIDB() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EXPLTB_Type& getEXPLTB_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EXPLTB_Type& getEXPLTB() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EXPLTB_Type& getEXPLTB() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setEXPLTB(const uci::type::EXPLTB_Type& accessor) override;

  /** Returns whether this optional field EXPLTBis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEXPLTB() const noexcept override;

  /** Enables the optional field such that getEXPLTB will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EXPLTB_Type& enableEXPLTB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearEXPLTB() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getMPDSRA_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getMPDSRA() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getMPDSRA() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setMPDSRA(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setMPDSRA(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setMPDSRA(const char* value) override;

  /** Returns whether this optional field mPDSRA_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMPDSRA() const noexcept override;

  /** Enables the optional field such that getMPDSRA will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableMPDSRA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearMPDSRA() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PATCHB_Type& getPATCHB_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PATCHB_Type& getPATCHB() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PATCHB_Type& getPATCHB() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setPATCHB(const uci::type::PATCHB_Type& accessor) override;

  /** Returns whether this optional field PATCHBis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPATCHB() const noexcept override;

  /** Enables the optional field such that getPATCHB will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PATCHB_Type& enablePATCHB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearPATCHB() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MSTGTA_Type& getMSTGTA_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MSTGTA_Type& getMSTGTA() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MSTGTA_Type& getMSTGTA() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setMSTGTA(const uci::type::MSTGTA_Type& accessor) override;

  /** Returns whether this optional field MSTGTAis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMSTGTA() const noexcept override;

  /** Enables the optional field such that getMSTGTA will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MSTGTA_Type& enableMSTGTA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& clearMSTGTA() noexcept override;

  /** Returns the accessor to the SECTGA field contained in this message fragment
    *
    * @return The const reference to the accessor to the SECTGA field.
    */
  const uci::type::NITF_PackingPlanType::SECTGA& getSECTGA() const override;

  /** Returns the accessor to the SECTGA field contained in this message fragment
    *
    * @return The reference to the accessor to the SECTGA field.
    */
  uci::type::NITF_PackingPlanType::SECTGA& getSECTGA() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanType& setSECTGA(const uci::type::NITF_PackingPlanType::SECTGA& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<NITF_PackingPlanType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::NITF_PackingPlanType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::NITF_PackingPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<FileHeaderType> fileHeader_Accessor;
  std::unique_ptr<ImageSubheaderType> imageSubheader_Accessor;
  std::unique_ptr<ACFTB_Type> aCFTB_Accessor;
  std::unique_ptr<AIMIDB_Type> aIMIDB_Accessor;
  std::unique_ptr<EXPLTB_Type> eXPLTB_Accessor;
  std::unique_ptr<EmptyType> mPDSRA_Accessor;
  std::unique_ptr<PATCHB_Type> pATCHB_Accessor;
  std::unique_ptr<MSTGTA_Type> mSTGTA_Accessor;
  std::unique_ptr<SECTGA> sECTGA_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_NITF_PACKINGPLANTYPE_H
