/** @file ActionCapabilityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ACTIONCAPABILITYCOMMANDTYPE_H
#define ASB_UCI_TYPE_ACTIONCAPABILITYCOMMANDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/CapabilityCommandBaseType.h"
#include "uci/type/ActionCapabilityCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActionID_Type;
class RequirementConstraintsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ActionCapabilityCommandType : public virtual uci::type::ActionCapabilityCommandType, public virtual CapabilityCommandBaseType {
public:
  /** The constructor */
  ActionCapabilityCommandType();

  /** The copy constructor
    *
    * @param rhs The ActionCapabilityCommandType to copy from
    */
  ActionCapabilityCommandType(const ActionCapabilityCommandType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ActionCapabilityCommandType to move from
    */
  ActionCapabilityCommandType(ActionCapabilityCommandType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ActionCapabilityCommandType to copy from
    * @return The ActionCapabilityCommandType that was assigned
    */
  ActionCapabilityCommandType& operator=(const ActionCapabilityCommandType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ActionCapabilityCommandType to move from
    * @return The ActionCapabilityCommandType that was assigned
    */
  ActionCapabilityCommandType& operator=(ActionCapabilityCommandType&& rhs) = delete;

  /** The destructor */
  ~ActionCapabilityCommandType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ActionCapabilityCommandType whose contents are to be used to set this
    *      uci::type::ActionCapabilityCommandType's contents.
    */
  void copy(const uci::type::ActionCapabilityCommandType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ActionCapabilityCommandType whose contents are to be used to set this
    *      uci::type::ActionCapabilityCommandType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ActionCapabilityCommandType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ActionID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActionID field.
    */
  const uci::type::ActionID_Type& getActionID() const override;

  /** Returns the accessor to the ActionID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActionID field.
    */
  uci::type::ActionID_Type& getActionID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActionCapabilityCommandType& setActionID(const uci::type::ActionID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& getConstraintOverride_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementConstraintsType& getConstraintOverride() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& getConstraintOverride() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActionCapabilityCommandType& setConstraintOverride(const uci::type::RequirementConstraintsType& accessor) override;

  /** Returns whether this optional field ConstraintOverrideis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConstraintOverride() const noexcept override;

  /** Enables the optional field such that getConstraintOverride will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& enableConstraintOverride(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActionCapabilityCommandType& clearConstraintOverride() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ActionCapabilityCommandType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ActionCapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ActionCapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ActionID_Type> actionID_Accessor;
  std::unique_ptr<RequirementConstraintsType> constraintOverride_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ACTIONCAPABILITYCOMMANDTYPE_H
