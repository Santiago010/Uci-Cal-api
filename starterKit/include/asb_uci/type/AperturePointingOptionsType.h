/** @file AperturePointingOptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_APERTUREPOINTINGOPTIONSTYPE_H
#define ASB_UCI_TYPE_APERTUREPOINTINGOPTIONSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AperturePointingOptionsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class BeamPointingReferenceType;
class EntityID_Type;
class FieldOfRegardType;

/** Utilized by RF_ResourceAllocation and RF_ResourceAllocationRequest to indicate the spatial coverage needed for the
  * Activity requesting resources.
  */
class AperturePointingOptionsType : public virtual uci::type::AperturePointingOptionsType {
public:
  /** The constructor */
  AperturePointingOptionsType();

  /** The copy constructor
    *
    * @param rhs The AperturePointingOptionsType to copy from
    */
  AperturePointingOptionsType(const AperturePointingOptionsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The AperturePointingOptionsType to move from
    */
  AperturePointingOptionsType(AperturePointingOptionsType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The AperturePointingOptionsType to copy from
    * @return The AperturePointingOptionsType that was assigned
    */
  AperturePointingOptionsType& operator=(const AperturePointingOptionsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The AperturePointingOptionsType to move from
    * @return The AperturePointingOptionsType that was assigned
    */
  AperturePointingOptionsType& operator=(AperturePointingOptionsType&& rhs) = delete;

  /** The destructor */
  virtual ~AperturePointingOptionsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AperturePointingOptionsType whose contents are to be used to set this
    *      uci::type::AperturePointingOptionsType's contents.
    */
  void copy(const uci::type::AperturePointingOptionsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AperturePointingOptionsType whose contents are to be used to set this
    *      uci::type::AperturePointingOptionsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::AperturePointingOptionsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::AperturePointingOptionsType::AperturePointingOptionsTypeChoice getAperturePointingOptionsTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getAperturePointingOptionsTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In
    * addition, the access methods associated with the chosen element will be enabled and will provide access to the chosen
    * element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AperturePointingOptionsType& setAperturePointingOptionsTypeChoiceOrdinal(uci::type::AperturePointingOptionsType::AperturePointingOptionsTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the FieldOfRegard field contained in this message fragment
    *
    * @return The const reference to the accessor to the FieldOfRegard field.
    */
  uci::type::FieldOfRegardType& getFieldOfRegard_() const;

  /** Returns the accessor to the FieldOfRegard field contained in this message fragment
    *
    * @return The reference to the accessor to the FieldOfRegard field.
    */
  const uci::type::FieldOfRegardType& getFieldOfRegard() const override;

  /** Returns the accessor to the FieldOfRegard field contained in this message fragment
    *
    * @return The reference to the accessor to the FieldOfRegard field.
    */
  uci::type::FieldOfRegardType& getFieldOfRegard() override;

  /** Sets this choice's choice to be fieldOfRegard and initializes fieldOfRegard to be the specified value. A deep copy
    * will be used by this method to set fieldOfRegard
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AperturePointingOptionsType& setFieldOfRegard(const uci::type::FieldOfRegardType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FieldOfRegard.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FieldOfRegard, false otherwise.
    */
  bool isFieldOfRegard() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FieldOfRegard.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FieldOfRegard.
    */
  uci::type::FieldOfRegardType& chooseFieldOfRegard(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FieldOfRegard.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FieldOfRegard.
    */
  uci::type::FieldOfRegardType& chooseFieldOfRegard(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's InstallationIndex item
    *
    * @return The contents of the InstallationIndex field
    */
  xs::UnsignedInt getInstallationIndex() const override;

  /** Sets this choice's choice to be InstallationIndex and initializes InstallationIndex to be the specified value
    *
    * @param value The new value to set InstallationIndex to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AperturePointingOptionsType& setInstallationIndex(xs::UnsignedInt value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by InstallationIndex.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by InstallationIndex, false
    *      otherwise.
    */
  bool isInstallationIndex() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by InstallationIndex. */
  void chooseInstallationIndex();

  /** Returns the accessor to the RequestBeamPointingReference field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequestBeamPointingReference field.
    */
  uci::type::BeamPointingReferenceType& getRequestBeamPointingReference_() const;

  /** Returns the accessor to the RequestBeamPointingReference field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequestBeamPointingReference field.
    */
  const uci::type::BeamPointingReferenceType& getRequestBeamPointingReference() const override;

  /** Returns the accessor to the RequestBeamPointingReference field contained in this message fragment
    *
    * @return The reference to the accessor to the RequestBeamPointingReference field.
    */
  uci::type::BeamPointingReferenceType& getRequestBeamPointingReference() override;

  /** Sets this choice's choice to be RequestBeamPointingReference and initializes RequestBeamPointingReference to be the
    * specified value. A deep copy will be used by this method to set RequestBeamPointingReference
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AperturePointingOptionsType& setRequestBeamPointingReference(const uci::type::BeamPointingReferenceType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequestBeamPointingReference.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequestBeamPointingReference,
    *      false otherwise.
    */
  bool isRequestBeamPointingReference() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequestBeamPointingReference.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequestBeamPointingReference.
    */
  uci::type::BeamPointingReferenceType& chooseRequestBeamPointingReference(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequestBeamPointingReference.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequestBeamPointingReference.
    */
  uci::type::BeamPointingReferenceType& chooseRequestBeamPointingReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RequestEntityReferenceID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequestEntityReferenceID field.
    */
  uci::type::EntityID_Type& getRequestEntityReferenceID_() const;

  /** Returns the accessor to the RequestEntityReferenceID field contained in this message fragment
    *
    * @return The reference to the accessor to the RequestEntityReferenceID field.
    */
  const uci::type::EntityID_Type& getRequestEntityReferenceID() const override;

  /** Returns the accessor to the RequestEntityReferenceID field contained in this message fragment
    *
    * @return The reference to the accessor to the RequestEntityReferenceID field.
    */
  uci::type::EntityID_Type& getRequestEntityReferenceID() override;

  /** Sets this choice's choice to be requestEntityReferenceID and initializes requestEntityReferenceID to be the specified
    * value. A deep copy will be used by this method to set requestEntityReferenceID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AperturePointingOptionsType& setRequestEntityReferenceID(const uci::type::EntityID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequestEntityReferenceID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequestEntityReferenceID, false
    *      otherwise.
    */
  bool isRequestEntityReferenceID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RequestEntityReferenceID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequestEntityReferenceID.
    */
  uci::type::EntityID_Type& chooseRequestEntityReferenceID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RequestEntityReferenceID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequestEntityReferenceID.
    */
  uci::type::EntityID_Type& chooseRequestEntityReferenceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<AperturePointingOptionsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::AperturePointingOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::AperturePointingOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<FieldOfRegardType> fieldOfRegard_Accessor;
  boost::optional<asb_xs::UnsignedInt> installationIndex_Accessor;
  std::unique_ptr<BeamPointingReferenceType> requestBeamPointingReference_Accessor;
  std::unique_ptr<EntityID_Type> requestEntityReferenceID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_APERTUREPOINTINGOPTIONSTYPE_H
