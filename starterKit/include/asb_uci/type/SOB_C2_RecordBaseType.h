/** @file SOB_C2_RecordBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SOB_C2_RECORDBASETYPE_H
#define ASB_UCI_TYPE_SOB_C2_RECORDBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/OB_OperationalStatusEnum.h"
#include "asb_uci/type/VisibleString512Type.h"
#include "uci/type/SOB_C2_RecordBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_RecordID_Type;
class FileMetadataID_Type;
class OB_SensorType;
class OrderOfBattleC2_EmitterType;
class OrderOfBattleTimestampsType;
class Point2D_Type;
class ProductMetadataID_Type;
class SOB_C2_RecordID_Type;
class SOB_C2_RecordRemoveInfoType;
class SOB_SatelliteRecordID_Type;
class SatelliteC2_IdentityType;

/** Contains information about the C2 node associated with a satellite record. */
class SOB_C2_RecordBaseType : public virtual uci::type::SOB_C2_RecordBaseType {
public:
  /** Indicates the unique ID of the satellite that is being controlled by this C2 node. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using ControlledSatelliteID = asb_uci::base::BoundedList<uci::type::SOB_SatelliteRecordID_Type, uci::type::accessorType::sOB_SatelliteRecordID_Type, asb_uci::type::SOB_SatelliteRecordID_Type>;

  /** Indicates the unique ID of the lower ranking C2 node. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using SubordinateC2_ID = asb_uci::base::BoundedList<uci::type::SOB_C2_RecordID_Type, uci::type::accessorType::sOB_C2_RecordID_Type, asb_uci::type::SOB_C2_RecordID_Type>;

  /** Degree to which the item is ready to perform the overall mission. Default value is 'OPR'. List size for this element
    * is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 24]
    */
  using OperationalStatus = asb_uci::base::BoundedList<uci::type::OB_OperationalStatusEnum, uci::type::accessorType::oB_OperationalStatusEnum, asb_uci::type::OB_OperationalStatusEnum>;

  /** A reference to metadata for a product associated with the record. For example, an image collected by a tactical
    * sensor. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ProductID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** A reference to metadata for a file associated with the record. For example, a non-Product image or a CAD model of the
    * C2 node's physical characteristics. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using FileID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates modes and parametrics of a an emitter associated with the record. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Emitter = asb_uci::base::BoundedList<uci::type::OrderOfBattleC2_EmitterType, uci::type::accessorType::orderOfBattleC2_EmitterType, asb_uci::type::OrderOfBattleC2_EmitterType>;

  /** Indicates the sensors associated with the SOB record. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using Sensor = asb_uci::base::BoundedList<uci::type::OB_SensorType, uci::type::accessorType::oB_SensorType, asb_uci::type::OB_SensorType>;

  /** The constructor */
  SOB_C2_RecordBaseType();

  /** The copy constructor
    *
    * @param rhs The SOB_C2_RecordBaseType to copy from
    */
  SOB_C2_RecordBaseType(const SOB_C2_RecordBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SOB_C2_RecordBaseType to move from
    */
  SOB_C2_RecordBaseType(SOB_C2_RecordBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SOB_C2_RecordBaseType to copy from
    * @return The SOB_C2_RecordBaseType that was assigned
    */
  SOB_C2_RecordBaseType& operator=(const SOB_C2_RecordBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SOB_C2_RecordBaseType to move from
    * @return The SOB_C2_RecordBaseType that was assigned
    */
  SOB_C2_RecordBaseType& operator=(SOB_C2_RecordBaseType&& rhs) = delete;

  /** The destructor */
  virtual ~SOB_C2_RecordBaseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SOB_C2_RecordBaseType whose contents are to be used to set this
    *      uci::type::SOB_C2_RecordBaseType's contents.
    */
  void copy(const uci::type::SOB_C2_RecordBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SOB_C2_RecordBaseType whose contents are to be used to set this
    *      uci::type::SOB_C2_RecordBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SOB_C2_RecordBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SOB_C2_RecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SOB_C2_RecordID field.
    */
  const uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() const override;

  /** Returns the accessor to the SOB_C2_RecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the SOB_C2_RecordID field.
    */
  uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_RecordID_Type& getEOB_RecordID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EOB_RecordID_Type& getEOB_RecordID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_RecordID_Type& getEOB_RecordID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) override;

  /** Returns whether this optional field EOB_RecordIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEOB_RecordID() const noexcept override;

  /** Enables the optional field such that getEOB_RecordID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_RecordID_Type& enableEOB_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& clearEOB_RecordID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteC2_IdentityType& getIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SatelliteC2_IdentityType& getIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteC2_IdentityType& getIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setIdentity(const uci::type::SatelliteC2_IdentityType& accessor) override;

  /** Returns whether this optional field Identityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIdentity() const noexcept override;

  /** Enables the optional field such that getIdentity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteC2_IdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& clearIdentity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& getLocation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point2D_Type& getLocation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& getLocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setLocation(const uci::type::Point2D_Type& accessor) override;

  /** Returns whether this optional field Locationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocation() const noexcept override;

  /** Enables the optional field such that getLocation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& enableLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& clearLocation() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrderOfBattleTimestampsType& getTimestamps() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) override;

  /** Returns whether this optional field Timestampsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimestamps() const noexcept override;

  /** Enables the optional field such that getTimestamps will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& enableTimestamps(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& clearTimestamps() noexcept override;

  /** Returns the accessor to the ControlledSatelliteID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ControlledSatelliteID field.
    */
  const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& getControlledSatelliteID() const override;

  /** Returns the accessor to the ControlledSatelliteID field contained in this message fragment
    *
    * @return The reference to the accessor to the ControlledSatelliteID field.
    */
  uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& getControlledSatelliteID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setControlledSatelliteID(const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& accessor) override;

  /** Returns the accessor to the SubordinateC2_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubordinateC2_ID field.
    */
  const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& getSubordinateC2_ID() const override;

  /** Returns the accessor to the SubordinateC2_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the SubordinateC2_ID field.
    */
  uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& getSubordinateC2_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setSubordinateC2_ID(const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& accessor) override;

  /** Returns the accessor to the OperationalStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the OperationalStatus field.
    */
  const uci::type::SOB_C2_RecordBaseType::OperationalStatus& getOperationalStatus() const override;

  /** Returns the accessor to the OperationalStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the OperationalStatus field.
    */
  uci::type::SOB_C2_RecordBaseType::OperationalStatus& getOperationalStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setOperationalStatus(const uci::type::SOB_C2_RecordBaseType::OperationalStatus& accessor) override;

  /** Returns the accessor to the ProductID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductID field.
    */
  const uci::type::SOB_C2_RecordBaseType::ProductID& getProductID() const override;

  /** Returns the accessor to the ProductID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductID field.
    */
  uci::type::SOB_C2_RecordBaseType::ProductID& getProductID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setProductID(const uci::type::SOB_C2_RecordBaseType::ProductID& accessor) override;

  /** Returns the accessor to the FileID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FileID field.
    */
  const uci::type::SOB_C2_RecordBaseType::FileID& getFileID() const override;

  /** Returns the accessor to the FileID field contained in this message fragment
    *
    * @return The reference to the accessor to the FileID field.
    */
  uci::type::SOB_C2_RecordBaseType::FileID& getFileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setFileID(const uci::type::SOB_C2_RecordBaseType::FileID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SOB_C2_RecordRemoveInfoType& getRemoveInfo_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SOB_C2_RecordRemoveInfoType& getRemoveInfo() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SOB_C2_RecordRemoveInfoType& getRemoveInfo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setRemoveInfo(const uci::type::SOB_C2_RecordRemoveInfoType& accessor) override;

  /** Returns whether this optional field RemoveInfois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemoveInfo() const noexcept override;

  /** Enables the optional field such that getRemoveInfo will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SOB_C2_RecordRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& clearRemoveInfo() noexcept override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Emitter field.
    */
  const uci::type::SOB_C2_RecordBaseType::Emitter& getEmitter() const override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The reference to the accessor to the Emitter field.
    */
  uci::type::SOB_C2_RecordBaseType::Emitter& getEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setEmitter(const uci::type::SOB_C2_RecordBaseType::Emitter& accessor) override;

  /** Returns the accessor to the Sensor field contained in this message fragment
    *
    * @return The const reference to the accessor to the Sensor field.
    */
  const uci::type::SOB_C2_RecordBaseType::Sensor& getSensor() const override;

  /** Returns the accessor to the Sensor field contained in this message fragment
    *
    * @return The reference to the accessor to the Sensor field.
    */
  uci::type::SOB_C2_RecordBaseType::Sensor& getSensor() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setSensor(const uci::type::SOB_C2_RecordBaseType::Sensor& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& getRemarksText_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString512Type& getRemarksText() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& getRemarksText() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setRemarksText(const uci::type::VisibleString512Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setRemarksText(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& setRemarksText(const char* value) override;

  /** Returns whether this optional field remarksText_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemarksText() const noexcept override;

  /** Enables the optional field such that getRemarksText will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& enableRemarksText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_C2_RecordBaseType& clearRemarksText() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SOB_C2_RecordBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_C2_RecordBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SOB_C2_RecordBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SOB_C2_RecordID_Type> sOB_C2_RecordID_Accessor;
  std::unique_ptr<EOB_RecordID_Type> eOB_RecordID_Accessor;
  std::unique_ptr<SatelliteC2_IdentityType> identity_Accessor;
  std::unique_ptr<Point2D_Type> location_Accessor;
  std::unique_ptr<OrderOfBattleTimestampsType> timestamps_Accessor;
  std::unique_ptr<ControlledSatelliteID> controlledSatelliteID_Accessor;
  std::unique_ptr<SubordinateC2_ID> subordinateC2_ID_Accessor;
  std::unique_ptr<OperationalStatus> operationalStatus_Accessor;
  std::unique_ptr<ProductID> productID_Accessor;
  std::unique_ptr<FileID> fileID_Accessor;
  std::unique_ptr<SOB_C2_RecordRemoveInfoType> removeInfo_Accessor;
  std::unique_ptr<Emitter> emitter_Accessor;
  std::unique_ptr<Sensor> sensor_Accessor;
  std::unique_ptr<VisibleString512Type> remarksText_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SOB_C2_RECORDBASETYPE_H
