/** @file EA_CapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_EA_CAPABILITYTYPE_H
#define ASB_UCI_TYPE_EA_CAPABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CapabilityInitiationEnum.h"
#include "../../../include/asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "../../../include/asb_uci/type/EA_IndicatorEnum.h"
#include "../../../include/asb_uci/type/EA_MessageOutputsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_CapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentID_Type;
class EA_CapabilityOptionsType;
class EA_TechniqueGroupIdentifierType;
class EA_TechniqueType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EA_CapabilityType : public virtual uci::type::EA_CapabilityType, public virtual CommandableCapabilityDeclarationType {
public:
  /** Indicates an EA technique supported by the Capability. Names and implementations of techniques vary widely across EA
    * Subsystems. This element is an abstraction that describes them from a heterogeneous command and control perspective.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Technique = asb_uci::base::BoundedList<uci::type::EA_TechniqueType, uci::type::accessorType::eA_TechniqueType, asb_uci::type::EA_TechniqueType>;

  /** Indicates a command and control relevant Subsystem Component associated with the Capability. Only those Components
    * that are independent of the sibling Technique element should be listed; Technique has its own association to
    * Components. Multiple Capabilities can use the same Component. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssociatedComponentID = asb_uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type, asb_uci::type::ComponentID_Type>;

  /** The constructor */
  EA_CapabilityType();

  /** The copy constructor
    *
    * @param rhs The EA_CapabilityType to copy from
    */
  EA_CapabilityType(const EA_CapabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EA_CapabilityType to move from
    */
  EA_CapabilityType(EA_CapabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EA_CapabilityType to copy from
    * @return The EA_CapabilityType that was assigned
    */
  EA_CapabilityType& operator=(const EA_CapabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EA_CapabilityType to move from
    * @return The EA_CapabilityType that was assigned
    */
  EA_CapabilityType& operator=(EA_CapabilityType&& rhs) = delete;

  /** The destructor */
  ~EA_CapabilityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EA_CapabilityType whose contents are to be used to set this
    *      uci::type::EA_CapabilityType's contents.
    */
  void copy(const uci::type::EA_CapabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EA_CapabilityType whose contents are to be used to set this
    *      uci::type::EA_CapabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EA_CapabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  const uci::type::CapabilityInitiationEnum& getCapabilityType() const override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  uci::type::CapabilityInitiationEnum& getCapabilityType() override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param accessor The accessor to use to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setCapabilityType(const uci::type::CapabilityInitiationEnum& accessor) override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param value The new value to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setCapabilityType(uci::type::CapabilityInitiationEnum::EnumerationItem value) override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityOptions field.
    */
  const uci::type::EA_CapabilityOptionsType& getCapabilityOptions() const override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityOptions field.
    */
  uci::type::EA_CapabilityOptionsType& getCapabilityOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setCapabilityOptions(const uci::type::EA_CapabilityOptionsType& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_IndicatorEnum& getEA_Indicator_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EA_IndicatorEnum& getEA_Indicator() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_IndicatorEnum& getEA_Indicator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setEA_Indicator(const uci::type::EA_IndicatorEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setEA_Indicator(uci::type::EA_IndicatorEnum::EnumerationItem value) override;

  /** Returns whether this optional field EA_Indicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEA_Indicator() const noexcept override;

  /** Enables the optional field such that getEA_Indicator will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_IndicatorEnum& enableEA_Indicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& clearEA_Indicator() noexcept override;

  /** Returns the accessor to the Technique field contained in this message fragment
    *
    * @return The const reference to the accessor to the Technique field.
    */
  const uci::type::EA_CapabilityType::Technique& getTechnique() const override;

  /** Returns the accessor to the Technique field contained in this message fragment
    *
    * @return The reference to the accessor to the Technique field.
    */
  uci::type::EA_CapabilityType::Technique& getTechnique() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setTechnique(const uci::type::EA_CapabilityType::Technique& accessor) override;

  /** Returns the accessor to the AssociatedComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedComponentID field.
    */
  const uci::type::EA_CapabilityType::AssociatedComponentID& getAssociatedComponentID() const override;

  /** Returns the accessor to the AssociatedComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedComponentID field.
    */
  uci::type::EA_CapabilityType::AssociatedComponentID& getAssociatedComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setAssociatedComponentID(const uci::type::EA_CapabilityType::AssociatedComponentID& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_MessageOutputsEnum& getMessageOutput_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EA_MessageOutputsEnum& getMessageOutput() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_MessageOutputsEnum& getMessageOutput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setMessageOutput(const uci::type::EA_MessageOutputsEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setMessageOutput(uci::type::EA_MessageOutputsEnum::EnumerationItem value) override;

  /** Returns whether this optional field MessageOutputis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMessageOutput() const noexcept override;

  /** Enables the optional field such that getMessageOutput will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_MessageOutputsEnum& enableMessageOutput(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& clearMessageOutput() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_TechniqueGroupIdentifierType& getTechniqueGroupIdentifier_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EA_TechniqueGroupIdentifierType& getTechniqueGroupIdentifier() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_TechniqueGroupIdentifierType& getTechniqueGroupIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& setTechniqueGroupIdentifier(const uci::type::EA_TechniqueGroupIdentifierType& accessor) override;

  /** Returns whether this optional field TechniqueGroupIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTechniqueGroupIdentifier() const noexcept override;

  /** Enables the optional field such that getTechniqueGroupIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EA_TechniqueGroupIdentifierType& enableTechniqueGroupIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_CapabilityType& clearTechniqueGroupIdentifier() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EA_CapabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_CapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EA_CapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CapabilityInitiationEnum> capabilityType_Accessor;
  std::unique_ptr<EA_CapabilityOptionsType> capabilityOptions_Accessor;
  std::unique_ptr<EA_IndicatorEnum> eA_Indicator_Accessor;
  std::unique_ptr<Technique> technique_Accessor;
  std::unique_ptr<AssociatedComponentID> associatedComponentID_Accessor;
  std::unique_ptr<EA_MessageOutputsEnum> messageOutput_Accessor;
  std::unique_ptr<EA_TechniqueGroupIdentifierType> techniqueGroupIdentifier_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_EA_CAPABILITYTYPE_H
