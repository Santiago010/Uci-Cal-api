/** @file ObservationMeasurementSourceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_OBSERVATIONMEASUREMENTSOURCETYPE_H
#define ASB_UCI_TYPE_OBSERVATIONMEASUREMENTSOURCETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/MeasurementReportSourceTypeEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/ObservationMeasurementSourceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ElementDetailsType;
class FOV_ExtentType;
class MeasurementSourceIdentityType;
class NameValuePairType;
class ProductMetadataID_Type;
class SourceCharacteristicsType;
class SourceCoverageType;
class SourceResolutionType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ObservationMeasurementSourceType : public virtual uci::type::ObservationMeasurementSourceType {
public:
  /** Indicates the details such as kinematics of the source of the elements. In some cases, the source may be composed of
    * multiple, kinematically dispersed elements, such as a bi-static or multi-static radar. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ElementDetails = asb_uci::base::BoundedList<uci::type::ElementDetailsType, uci::type::accessorType::elementDetailsType, asb_uci::type::ElementDetailsType>;

  /** This element represents the unique identifier(s) of the ProductMetadata message(s) associated with the parent
    * MeasurementSource. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ProductMetadataID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** Indicates a custom source parameter that is not covered by other elements. These supplemental characteristics are
    * source sensor specific and may not be relevant to all producers. Reference the data providers interface control
    * document or service specification to determine if this data will be provided. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using CustomCharacteristics = asb_uci::base::BoundedList<uci::type::NameValuePairType, uci::type::accessorType::nameValuePairType, asb_uci::type::NameValuePairType>;

  /** The constructor */
  ObservationMeasurementSourceType();

  /** The copy constructor
    *
    * @param rhs The ObservationMeasurementSourceType to copy from
    */
  ObservationMeasurementSourceType(const ObservationMeasurementSourceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ObservationMeasurementSourceType to move from
    */
  ObservationMeasurementSourceType(ObservationMeasurementSourceType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ObservationMeasurementSourceType to copy from
    * @return The ObservationMeasurementSourceType that was assigned
    */
  ObservationMeasurementSourceType& operator=(const ObservationMeasurementSourceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ObservationMeasurementSourceType to move from
    * @return The ObservationMeasurementSourceType that was assigned
    */
  ObservationMeasurementSourceType& operator=(ObservationMeasurementSourceType&& rhs) = delete;

  /** The destructor */
  virtual ~ObservationMeasurementSourceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ObservationMeasurementSourceType whose contents are to be used to set this
    *      uci::type::ObservationMeasurementSourceType's contents.
    */
  void copy(const uci::type::ObservationMeasurementSourceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ObservationMeasurementSourceType whose contents are to be used to set this
    *      uci::type::ObservationMeasurementSourceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ObservationMeasurementSourceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ElementDetails field contained in this message fragment
    *
    * @return The const reference to the accessor to the ElementDetails field.
    */
  const uci::type::ObservationMeasurementSourceType::ElementDetails& getElementDetails() const override;

  /** Returns the accessor to the ElementDetails field contained in this message fragment
    *
    * @return The reference to the accessor to the ElementDetails field.
    */
  uci::type::ObservationMeasurementSourceType::ElementDetails& getElementDetails() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setElementDetails(const uci::type::ObservationMeasurementSourceType::ElementDetails& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementSourceIdentityType& getSourceIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementSourceIdentityType& getSourceIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementSourceIdentityType& getSourceIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setSourceIdentity(const uci::type::MeasurementSourceIdentityType& accessor) override;

  /** Returns whether this optional field SourceIdentityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceIdentity() const noexcept override;

  /** Enables the optional field such that getSourceIdentity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementSourceIdentityType& enableSourceIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearSourceIdentity() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementReportSourceTypeEnum& getSourceType_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementReportSourceTypeEnum& getSourceType() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementReportSourceTypeEnum& getSourceType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setSourceType(const uci::type::MeasurementReportSourceTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setSourceType(uci::type::MeasurementReportSourceTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field SourceTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceType() const noexcept override;

  /** Enables the optional field such that getSourceType will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementReportSourceTypeEnum& enableSourceType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearSourceType() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCoverageType& getSourceCoverage_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SourceCoverageType& getSourceCoverage() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCoverageType& getSourceCoverage() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setSourceCoverage(const uci::type::SourceCoverageType& accessor) override;

  /** Returns whether this optional field SourceCoverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceCoverage() const noexcept override;

  /** Enables the optional field such that getSourceCoverage will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCoverageType& enableSourceCoverage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearSourceCoverage() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ExtentType& getSourceAngularExtent_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOV_ExtentType& getSourceAngularExtent() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ExtentType& getSourceAngularExtent() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setSourceAngularExtent(const uci::type::FOV_ExtentType& accessor) override;

  /** Returns whether this optional field SourceAngularExtentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceAngularExtent() const noexcept override;

  /** Enables the optional field such that getSourceAngularExtent will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ExtentType& enableSourceAngularExtent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearSourceAngularExtent() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceResolutionType& getSourceResolution_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SourceResolutionType& getSourceResolution() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceResolutionType& getSourceResolution() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setSourceResolution(const uci::type::SourceResolutionType& accessor) override;

  /** Returns whether this optional field SourceResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceResolution() const noexcept override;

  /** Enables the optional field such that getSourceResolution will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceResolutionType& enableSourceResolution(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearSourceResolution() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setSourceSpecifiedCharacteristics(const uci::type::SourceCharacteristicsType& accessor) override;

  /** Returns whether this optional field SourceSpecifiedCharacteristicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceSpecifiedCharacteristics() const noexcept override;

  /** Enables the optional field such that getSourceSpecifiedCharacteristics will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCharacteristicsType& enableSourceSpecifiedCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearSourceSpecifiedCharacteristics() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getNumberOfLocalTracksReported() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setNumberOfLocalTracksReported(xs::Int value) override;

  /** Returns whether this optional field NumberOfLocalTracksReportedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNumberOfLocalTracksReported() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearNumberOfLocalTracksReported() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getNumberOfIndependentMeasurements() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setNumberOfIndependentMeasurements(xs::Int value) override;

  /** Returns whether this optional field NumberOfIndependentMeasurementsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNumberOfIndependentMeasurements() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& clearNumberOfIndependentMeasurements() noexcept override;

  /** Returns the accessor to the ProductMetadataID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductMetadataID field.
    */
  const uci::type::ObservationMeasurementSourceType::ProductMetadataID& getProductMetadataID() const override;

  /** Returns the accessor to the ProductMetadataID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductMetadataID field.
    */
  uci::type::ObservationMeasurementSourceType::ProductMetadataID& getProductMetadataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setProductMetadataID(const uci::type::ObservationMeasurementSourceType::ProductMetadataID& accessor) override;

  /** Returns the accessor to the CustomCharacteristics field contained in this message fragment
    *
    * @return The const reference to the accessor to the CustomCharacteristics field.
    */
  const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& getCustomCharacteristics() const override;

  /** Returns the accessor to the CustomCharacteristics field contained in this message fragment
    *
    * @return The reference to the accessor to the CustomCharacteristics field.
    */
  uci::type::ObservationMeasurementSourceType::CustomCharacteristics& getCustomCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ObservationMeasurementSourceType& setCustomCharacteristics(const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ObservationMeasurementSourceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ObservationMeasurementSourceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ObservationMeasurementSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ElementDetails> elementDetails_Accessor;
  std::unique_ptr<MeasurementSourceIdentityType> sourceIdentity_Accessor;
  std::unique_ptr<MeasurementReportSourceTypeEnum> sourceType_Accessor;
  std::unique_ptr<SourceCoverageType> sourceCoverage_Accessor;
  std::unique_ptr<FOV_ExtentType> sourceAngularExtent_Accessor;
  std::unique_ptr<SourceResolutionType> sourceResolution_Accessor;
  std::unique_ptr<SourceCharacteristicsType> sourceSpecifiedCharacteristics_Accessor;
  boost::optional<asb_xs::Int> numberOfLocalTracksReported_Accessor;
  boost::optional<asb_xs::Int> numberOfIndependentMeasurements_Accessor;
  std::unique_ptr<ProductMetadataID> productMetadataID_Accessor;
  std::unique_ptr<CustomCharacteristics> customCharacteristics_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_OBSERVATIONMEASUREMENTSOURCETYPE_H
