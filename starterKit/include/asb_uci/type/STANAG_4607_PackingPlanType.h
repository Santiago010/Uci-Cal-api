/** @file STANAG_4607_PackingPlanType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_STANAG_4607_PACKINGPLANTYPE_H
#define ASB_UCI_TYPE_STANAG_4607_PACKINGPLANTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString11Type.h"
#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString13Type.h"
#include "../../../include/asb_uci/type/FIPS_ClassificationSystemType.h"
#include "../../../include/asb_uci/type/STANAG_4607_PackingPlanPET.h"
#include "../../../include/asb_uci/type/VisibleString81Type.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/STANAG_4607_PackingPlanType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** NOTE: This version of the STANAG_4607_PackingPlanType suffers from the following problems: Some elements are one
  * space longer than allowed by STANAG_4607; some elements' lengths are off by more, short or long; some segments and
  * elements are extraneous (set by platform, not needed in UCI Task message), while other required tasking authority
  * fields are missing; and some required fields are marked optional. The RevisedSTANAG_4607_PackingPlanType resolves
  * these problems.
  */
class STANAG_4607_PackingPlanType : public virtual uci::type::STANAG_4607_PackingPlanType, public virtual STANAG_4607_PackingPlanPET {
public:
  /** The constructor */
  STANAG_4607_PackingPlanType();

  /** The copy constructor
    *
    * @param rhs The STANAG_4607_PackingPlanType to copy from
    */
  STANAG_4607_PackingPlanType(const STANAG_4607_PackingPlanType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The STANAG_4607_PackingPlanType to move from
    */
  STANAG_4607_PackingPlanType(STANAG_4607_PackingPlanType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The STANAG_4607_PackingPlanType to copy from
    * @return The STANAG_4607_PackingPlanType that was assigned
    */
  STANAG_4607_PackingPlanType& operator=(const STANAG_4607_PackingPlanType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The STANAG_4607_PackingPlanType to move from
    * @return The STANAG_4607_PackingPlanType that was assigned
    */
  STANAG_4607_PackingPlanType& operator=(STANAG_4607_PackingPlanType&& rhs) = delete;

  /** The destructor */
  ~STANAG_4607_PackingPlanType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::STANAG_4607_PackingPlanType whose contents are to be used to set this
    *      uci::type::STANAG_4607_PackingPlanType's contents.
    */
  void copy(const uci::type::STANAG_4607_PackingPlanType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::STANAG_4607_PackingPlanType whose contents are to be used to set this
    *      uci::type::STANAG_4607_PackingPlanType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::STANAG_4607_PackingPlanType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getExerciseIdentifier() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setExerciseIdentifier(xs::UnsignedInt value) override;

  /** Returns whether this optional field ExerciseIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasExerciseIdentifier() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& clearExerciseIdentifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FIPS_ClassificationSystemType& getClassificationSystem_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::FIPS_ClassificationSystemType& getClassificationSystem() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FIPS_ClassificationSystemType& getClassificationSystem() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setClassificationSystem(const uci::type::FIPS_ClassificationSystemType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setClassificationSystem(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setClassificationSystem(const char* value) override;

  /** Returns whether this optional field classificationSystem_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasClassificationSystem() const noexcept override;

  /** Enables the optional field such that getClassificationSystem will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::FIPS_ClassificationSystemType& enableClassificationSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& clearClassificationSystem() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11Type& getOriginatorIdentifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString11Type& getOriginatorIdentifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11Type& getOriginatorIdentifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setOriginatorIdentifier(const uci::type::AlphanumericDashSpaceUnderscoreString11Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setOriginatorIdentifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setOriginatorIdentifier(const char* value) override;

  /** Returns whether this optional field originatorIdentifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOriginatorIdentifier() const noexcept override;

  /** Enables the optional field such that getOriginatorIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11Type& enableOriginatorIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& clearOriginatorIdentifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString13Type& getMissionPlan_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString13Type& getMissionPlan() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString13Type& getMissionPlan() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setMissionPlan(const uci::type::AlphanumericDashSpaceUnderscoreString13Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setMissionPlan(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setMissionPlan(const char* value) override;

  /** Returns whether this optional field missionPlan_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionPlan() const noexcept override;

  /** Enables the optional field such that getMissionPlan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString13Type& enableMissionPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& clearMissionPlan() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11Type& getRecipient_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString11Type& getRecipient() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11Type& getRecipient() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setRecipient(const uci::type::AlphanumericDashSpaceUnderscoreString11Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setRecipient(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setRecipient(const char* value) override;

  /** Returns whether this optional field recipient_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRecipient() const noexcept override;

  /** Enables the optional field such that getRecipient will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11Type& enableRecipient(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& clearRecipient() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString81Type& getFreeText_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString81Type& getFreeText() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString81Type& getFreeText() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setFreeText(const uci::type::VisibleString81Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setFreeText(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& setFreeText(const char* value) override;

  /** Returns whether this optional field freeText_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFreeText() const noexcept override;

  /** Enables the optional field such that getFreeText will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString81Type& enableFreeText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::STANAG_4607_PackingPlanType& clearFreeText() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<STANAG_4607_PackingPlanType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::STANAG_4607_PackingPlanType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::STANAG_4607_PackingPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::UnsignedInt> exerciseIdentifier_Accessor;
  std::unique_ptr<FIPS_ClassificationSystemType> classificationSystem_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString11Type> originatorIdentifier_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString13Type> missionPlan_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString11Type> recipient_Accessor;
  std::unique_ptr<VisibleString81Type> freeText_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_STANAG_4607_PACKINGPLANTYPE_H
