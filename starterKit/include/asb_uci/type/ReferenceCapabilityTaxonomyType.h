/** @file ReferenceCapabilityTaxonomyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_REFERENCECAPABILITYTAXONOMYTYPE_H
#define ASB_UCI_TYPE_REFERENCECAPABILITYTAXONOMYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ActionTypeEnum.h"
#include "../../../include/asb_uci/type/CommCapabilityEnum.h"
#include "../../../include/asb_uci/type/CyberTypeEnum.h"
#include "../../../include/asb_uci/type/EffectTypeEnum.h"
#include "../../../include/asb_uci/type/EnvironmentPairingEnum.h"
#include "../../../include/asb_uci/type/IdentificationTypeEnum.h"
#include "../../../include/asb_uci/type/SensingTypeEnum.h"
#include "../../../include/asb_uci/type/WeaponTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReferenceCapabilityTaxonomyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ReferenceCapabilityTaxonomyType : public virtual uci::type::ReferenceCapabilityTaxonomyType {
public:
  /** Indicates the domain/environment which the Capability is employed from and the "target" domain/environment. See
    * enumerated type annotations for further details. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 1; Maximum: 48]
    */
  using DomainPairing = asb_uci::base::BoundedList<uci::type::EnvironmentPairingEnum, uci::type::accessorType::environmentPairingEnum, asb_uci::type::EnvironmentPairingEnum>;

  /** Indicates the Effect of the Capability. See enumerated type annotations for further details. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 47]
    */
  using Effect = asb_uci::base::BoundedList<uci::type::EffectTypeEnum, uci::type::accessorType::effectTypeEnum, asb_uci::type::EffectTypeEnum>;

  /** Indicates an Action that implements the Capability. See enumerated type annotations for further details. List size
    * for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 84]
    */
  using Action = asb_uci::base::BoundedList<uci::type::ActionTypeEnum, uci::type::accessorType::actionTypeEnum, asb_uci::type::ActionTypeEnum>;

  /** Indicates a form of sensing that implements the Capability. See enumerated type annotations for further details. List
    * size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 35]
    */
  using Sensing = asb_uci::base::BoundedList<uci::type::SensingTypeEnum, uci::type::accessorType::sensingTypeEnum, asb_uci::type::SensingTypeEnum>;

  /** Indicates a weapon that implements the Capability. Offensive, defensive and self-protect weapons are included. Cyber
    * weapons are described in the sibling Cyber element. See enumerated type annotations for further details. List size
    * for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 28]
    */
  using Weapon = asb_uci::base::BoundedList<uci::type::WeaponTypeEnum, uci::type::accessorType::weaponTypeEnum, asb_uci::type::WeaponTypeEnum>;

  /** Indicates a form of communications that implements the Capability. See enumerated type annotations for further
    * details. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 53]
    */
  using Communications = asb_uci::base::BoundedList<uci::type::CommCapabilityEnum, uci::type::accessorType::commCapabilityEnum, asb_uci::type::CommCapabilityEnum>;

  /** Indicates a form of self-identification that implements the Capability. See enumerated type annotations for further
    * details. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 8]
    */
  using Identification = asb_uci::base::BoundedList<uci::type::IdentificationTypeEnum, uci::type::accessorType::identificationTypeEnum, asb_uci::type::IdentificationTypeEnum>;

  /** Indicates a form of offensive (OCO) or defensive (DCO) cyber operation that implements the Capability. See enumerated
    * type annotations for further details. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 17]
    */
  using Cyber = asb_uci::base::BoundedList<uci::type::CyberTypeEnum, uci::type::accessorType::cyberTypeEnum, asb_uci::type::CyberTypeEnum>;

  /** The constructor */
  ReferenceCapabilityTaxonomyType();

  /** The copy constructor
    *
    * @param rhs The ReferenceCapabilityTaxonomyType to copy from
    */
  ReferenceCapabilityTaxonomyType(const ReferenceCapabilityTaxonomyType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ReferenceCapabilityTaxonomyType to move from
    */
  ReferenceCapabilityTaxonomyType(ReferenceCapabilityTaxonomyType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ReferenceCapabilityTaxonomyType to copy from
    * @return The ReferenceCapabilityTaxonomyType that was assigned
    */
  ReferenceCapabilityTaxonomyType& operator=(const ReferenceCapabilityTaxonomyType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ReferenceCapabilityTaxonomyType to move from
    * @return The ReferenceCapabilityTaxonomyType that was assigned
    */
  ReferenceCapabilityTaxonomyType& operator=(ReferenceCapabilityTaxonomyType&& rhs) = delete;

  /** The destructor */
  virtual ~ReferenceCapabilityTaxonomyType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ReferenceCapabilityTaxonomyType whose contents are to be used to set this
    *      uci::type::ReferenceCapabilityTaxonomyType's contents.
    */
  void copy(const uci::type::ReferenceCapabilityTaxonomyType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ReferenceCapabilityTaxonomyType whose contents are to be used to set this
    *      uci::type::ReferenceCapabilityTaxonomyType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ReferenceCapabilityTaxonomyType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the DomainPairing field contained in this message fragment
    *
    * @return The const reference to the accessor to the DomainPairing field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::DomainPairing& getDomainPairing() const override;

  /** Returns the accessor to the DomainPairing field contained in this message fragment
    *
    * @return The reference to the accessor to the DomainPairing field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::DomainPairing& getDomainPairing() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setDomainPairing(const uci::type::ReferenceCapabilityTaxonomyType::DomainPairing& accessor) override;

  /** Returns the accessor to the Effect field contained in this message fragment
    *
    * @return The const reference to the accessor to the Effect field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::Effect& getEffect() const override;

  /** Returns the accessor to the Effect field contained in this message fragment
    *
    * @return The reference to the accessor to the Effect field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::Effect& getEffect() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setEffect(const uci::type::ReferenceCapabilityTaxonomyType::Effect& accessor) override;

  /** Returns the accessor to the Action field contained in this message fragment
    *
    * @return The const reference to the accessor to the Action field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::Action& getAction() const override;

  /** Returns the accessor to the Action field contained in this message fragment
    *
    * @return The reference to the accessor to the Action field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::Action& getAction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setAction(const uci::type::ReferenceCapabilityTaxonomyType::Action& accessor) override;

  /** Returns the accessor to the Sensing field contained in this message fragment
    *
    * @return The const reference to the accessor to the Sensing field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::Sensing& getSensing() const override;

  /** Returns the accessor to the Sensing field contained in this message fragment
    *
    * @return The reference to the accessor to the Sensing field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::Sensing& getSensing() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setSensing(const uci::type::ReferenceCapabilityTaxonomyType::Sensing& accessor) override;

  /** Returns the accessor to the Weapon field contained in this message fragment
    *
    * @return The const reference to the accessor to the Weapon field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::Weapon& getWeapon() const override;

  /** Returns the accessor to the Weapon field contained in this message fragment
    *
    * @return The reference to the accessor to the Weapon field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::Weapon& getWeapon() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setWeapon(const uci::type::ReferenceCapabilityTaxonomyType::Weapon& accessor) override;

  /** Returns the accessor to the Communications field contained in this message fragment
    *
    * @return The const reference to the accessor to the Communications field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::Communications& getCommunications() const override;

  /** Returns the accessor to the Communications field contained in this message fragment
    *
    * @return The reference to the accessor to the Communications field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::Communications& getCommunications() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setCommunications(const uci::type::ReferenceCapabilityTaxonomyType::Communications& accessor) override;

  /** Returns the accessor to the Identification field contained in this message fragment
    *
    * @return The const reference to the accessor to the Identification field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::Identification& getIdentification() const override;

  /** Returns the accessor to the Identification field contained in this message fragment
    *
    * @return The reference to the accessor to the Identification field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::Identification& getIdentification() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setIdentification(const uci::type::ReferenceCapabilityTaxonomyType::Identification& accessor) override;

  /** Returns the accessor to the Cyber field contained in this message fragment
    *
    * @return The const reference to the accessor to the Cyber field.
    */
  const uci::type::ReferenceCapabilityTaxonomyType::Cyber& getCyber() const override;

  /** Returns the accessor to the Cyber field contained in this message fragment
    *
    * @return The reference to the accessor to the Cyber field.
    */
  uci::type::ReferenceCapabilityTaxonomyType::Cyber& getCyber() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReferenceCapabilityTaxonomyType& setCyber(const uci::type::ReferenceCapabilityTaxonomyType::Cyber& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ReferenceCapabilityTaxonomyType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ReferenceCapabilityTaxonomyType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ReferenceCapabilityTaxonomyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<DomainPairing> domainPairing_Accessor;
  std::unique_ptr<Effect> effect_Accessor;
  std::unique_ptr<Action> action_Accessor;
  std::unique_ptr<Sensing> sensing_Accessor;
  std::unique_ptr<Weapon> weapon_Accessor;
  std::unique_ptr<Communications> communications_Accessor;
  std::unique_ptr<Identification> identification_Accessor;
  std::unique_ptr<Cyber> cyber_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_REFERENCECAPABILITYTAXONOMYTYPE_H
