/** @file COMINT_InteractiveType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMINT_INTERACTIVETYPE_H
#define ASB_UCI_TYPE_COMINT_INTERACTIVETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/FrequencyType.h"
#include "../../../include/asb_uci/type/GainControlMethodEnum.h"
#include "../../../include/asb_uci/type/MilliwattPowerRatioType.h"
#include "../../../include/asb_uci/type/NoiseAdaptiveThresholdStatusEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_InteractiveType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class COMINT_AcquisitionTargetType;
class ForeignKeyType;
class FrequencyRangeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class COMINT_InteractiveType : public virtual uci::type::COMINT_InteractiveType {
public:
  /** Define a center frequency or a list of center frequencies to be scanned. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using CenterFrequency = asb_uci::base::BoundedList<uci::type::FrequencyType, uci::type::accessorType::frequencyType, asb_uci::type::FrequencyType>;

  /** The list of frequency ranges that form the scan list. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ScanRange = asb_uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType, asb_uci::type::FrequencyRangeType>;

  /** The list of frequencies that the subsystem should not scan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ScanLockout = asb_uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType, asb_uci::type::FrequencyRangeType>;

  /** Defines targets to be ignored. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using IgnoreTarget = asb_uci::base::BoundedList<uci::type::COMINT_AcquisitionTargetType, uci::type::accessorType::cOMINT_AcquisitionTargetType, asb_uci::type::COMINT_AcquisitionTargetType>;

  /** The Technique ID to be used by the application. This represents a technique selectable within an application, and is
    * separate from the ApplicationID index. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using TechniqueInUse = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** Application-specific parameters for the technique in use. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using TechniqueParameters = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** The constructor */
  COMINT_InteractiveType();

  /** The copy constructor
    *
    * @param rhs The COMINT_InteractiveType to copy from
    */
  COMINT_InteractiveType(const COMINT_InteractiveType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The COMINT_InteractiveType to move from
    */
  COMINT_InteractiveType(COMINT_InteractiveType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The COMINT_InteractiveType to copy from
    * @return The COMINT_InteractiveType that was assigned
    */
  COMINT_InteractiveType& operator=(const COMINT_InteractiveType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The COMINT_InteractiveType to move from
    * @return The COMINT_InteractiveType that was assigned
    */
  COMINT_InteractiveType& operator=(COMINT_InteractiveType&& rhs) = delete;

  /** The destructor */
  virtual ~COMINT_InteractiveType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::COMINT_InteractiveType whose contents are to be used to set this
    *      uci::type::COMINT_InteractiveType's contents.
    */
  void copy(const uci::type::COMINT_InteractiveType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::COMINT_InteractiveType whose contents are to be used to set this
    *      uci::type::COMINT_InteractiveType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::COMINT_InteractiveType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getThreshold() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setThreshold(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field Thresholdis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasThreshold() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& clearThreshold() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NoiseAdaptiveThresholdStatusEnum& getNoiseAdaptiveThresholdStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NoiseAdaptiveThresholdStatusEnum& getNoiseAdaptiveThresholdStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NoiseAdaptiveThresholdStatusEnum& getNoiseAdaptiveThresholdStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setNoiseAdaptiveThresholdStatus(const uci::type::NoiseAdaptiveThresholdStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setNoiseAdaptiveThresholdStatus(uci::type::NoiseAdaptiveThresholdStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field NoiseAdaptiveThresholdStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNoiseAdaptiveThresholdStatus() const noexcept override;

  /** Enables the optional field such that getNoiseAdaptiveThresholdStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NoiseAdaptiveThresholdStatusEnum& enableNoiseAdaptiveThresholdStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& clearNoiseAdaptiveThresholdStatus() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GainControlMethodEnum& getGainControlMethod_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::GainControlMethodEnum& getGainControlMethod() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GainControlMethodEnum& getGainControlMethod() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setGainControlMethod(const uci::type::GainControlMethodEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setGainControlMethod(uci::type::GainControlMethodEnum::EnumerationItem value) override;

  /** Returns whether this optional field GainControlMethodis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGainControlMethod() const noexcept override;

  /** Enables the optional field such that getGainControlMethod will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GainControlMethodEnum& enableGainControlMethod(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& clearGainControlMethod() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getGain() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setGain(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field Gainis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGain() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& clearGain() noexcept override;

  /** Returns the accessor to the CenterFrequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the CenterFrequency field.
    */
  const uci::type::COMINT_InteractiveType::CenterFrequency& getCenterFrequency() const override;

  /** Returns the accessor to the CenterFrequency field contained in this message fragment
    *
    * @return The reference to the accessor to the CenterFrequency field.
    */
  uci::type::COMINT_InteractiveType::CenterFrequency& getCenterFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setCenterFrequency(const uci::type::COMINT_InteractiveType::CenterFrequency& accessor) override;

  /** Returns the accessor to the ScanRange field contained in this message fragment
    *
    * @return The const reference to the accessor to the ScanRange field.
    */
  const uci::type::COMINT_InteractiveType::ScanRange& getScanRange() const override;

  /** Returns the accessor to the ScanRange field contained in this message fragment
    *
    * @return The reference to the accessor to the ScanRange field.
    */
  uci::type::COMINT_InteractiveType::ScanRange& getScanRange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setScanRange(const uci::type::COMINT_InteractiveType::ScanRange& accessor) override;

  /** Returns the accessor to the ScanLockout field contained in this message fragment
    *
    * @return The const reference to the accessor to the ScanLockout field.
    */
  const uci::type::COMINT_InteractiveType::ScanLockout& getScanLockout() const override;

  /** Returns the accessor to the ScanLockout field contained in this message fragment
    *
    * @return The reference to the accessor to the ScanLockout field.
    */
  uci::type::COMINT_InteractiveType::ScanLockout& getScanLockout() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setScanLockout(const uci::type::COMINT_InteractiveType::ScanLockout& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::COMINT_AcquisitionTargetType& getDwellTarget_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::COMINT_AcquisitionTargetType& getDwellTarget() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::COMINT_AcquisitionTargetType& getDwellTarget() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setDwellTarget(const uci::type::COMINT_AcquisitionTargetType& accessor) override;

  /** Returns whether this optional field DwellTargetis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDwellTarget() const noexcept override;

  /** Enables the optional field such that getDwellTarget will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::COMINT_AcquisitionTargetType& enableDwellTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& clearDwellTarget() noexcept override;

  /** Returns the accessor to the IgnoreTarget field contained in this message fragment
    *
    * @return The const reference to the accessor to the IgnoreTarget field.
    */
  const uci::type::COMINT_InteractiveType::IgnoreTarget& getIgnoreTarget() const override;

  /** Returns the accessor to the IgnoreTarget field contained in this message fragment
    *
    * @return The reference to the accessor to the IgnoreTarget field.
    */
  uci::type::COMINT_InteractiveType::IgnoreTarget& getIgnoreTarget() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setIgnoreTarget(const uci::type::COMINT_InteractiveType::IgnoreTarget& accessor) override;

  /** Returns the accessor to the TechniqueInUse field contained in this message fragment
    *
    * @return The const reference to the accessor to the TechniqueInUse field.
    */
  const uci::type::COMINT_InteractiveType::TechniqueInUse& getTechniqueInUse() const override;

  /** Returns the accessor to the TechniqueInUse field contained in this message fragment
    *
    * @return The reference to the accessor to the TechniqueInUse field.
    */
  uci::type::COMINT_InteractiveType::TechniqueInUse& getTechniqueInUse() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setTechniqueInUse(const uci::type::COMINT_InteractiveType::TechniqueInUse& accessor) override;

  /** Returns the accessor to the TechniqueParameters field contained in this message fragment
    *
    * @return The const reference to the accessor to the TechniqueParameters field.
    */
  const uci::type::COMINT_InteractiveType::TechniqueParameters& getTechniqueParameters() const override;

  /** Returns the accessor to the TechniqueParameters field contained in this message fragment
    *
    * @return The reference to the accessor to the TechniqueParameters field.
    */
  uci::type::COMINT_InteractiveType::TechniqueParameters& getTechniqueParameters() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setTechniqueParameters(const uci::type::COMINT_InteractiveType::TechniqueParameters& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getAudioEnable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setAudioEnable(xs::Boolean value) override;

  /** Returns whether this optional field AudioEnableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAudioEnable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& clearAudioEnable() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getIQ_Enable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& setIQ_Enable(xs::Boolean value) override;

  /** Returns whether this optional field IQ_Enableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIQ_Enable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_InteractiveType& clearIQ_Enable() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<COMINT_InteractiveType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_InteractiveType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::COMINT_InteractiveType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<MilliwattPowerRatioTypeValue> threshold_Accessor;
  std::unique_ptr<NoiseAdaptiveThresholdStatusEnum> noiseAdaptiveThresholdStatus_Accessor;
  std::unique_ptr<GainControlMethodEnum> gainControlMethod_Accessor;
  boost::optional<MilliwattPowerRatioTypeValue> gain_Accessor;
  std::unique_ptr<CenterFrequency> centerFrequency_Accessor;
  std::unique_ptr<ScanRange> scanRange_Accessor;
  std::unique_ptr<ScanLockout> scanLockout_Accessor;
  std::unique_ptr<COMINT_AcquisitionTargetType> dwellTarget_Accessor;
  std::unique_ptr<IgnoreTarget> ignoreTarget_Accessor;
  std::unique_ptr<TechniqueInUse> techniqueInUse_Accessor;
  std::unique_ptr<TechniqueParameters> techniqueParameters_Accessor;
  boost::optional<asb_xs::Boolean> audioEnable_Accessor;
  boost::optional<asb_xs::Boolean> iQ_Enable_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMINT_INTERACTIVETYPE_H
