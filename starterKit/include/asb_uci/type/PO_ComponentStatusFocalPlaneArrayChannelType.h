/** @file PO_ComponentStatusFocalPlaneArrayChannelType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_COMPONENTSTATUSFOCALPLANEARRAYCHANNELTYPE_H
#define ASB_UCI_TYPE_PO_COMPONENTSTATUSFOCALPLANEARRAYCHANNELTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "uci/type/PO_ComponentStatusFocalPlaneArrayChannelType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentControlsStatusType;
class PO_ComponentStatusFocalPlaneArrayCollectionTimeType;
class PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType;
class PO_ComponentStatusFocalPlaneArrayOpticalBandType;
class PO_ComponentStatusFocalPlaneArrayPixelAggregationType;
class PO_ComponentStatusFocalPlaneArrayPixelPolarityType;
class PO_ComponentStatusFocalPlaneArrayPixelScalingType;
class PO_ComponentStatusFocalPlaneArrayScanDirectionType;
class PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType;
class PO_FPA_ChannelID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentStatusFocalPlaneArrayChannelType : public virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType {
public:
  /** The constructor */
  PO_ComponentStatusFocalPlaneArrayChannelType();

  /** The copy constructor
    *
    * @param rhs The PO_ComponentStatusFocalPlaneArrayChannelType to copy from
    */
  PO_ComponentStatusFocalPlaneArrayChannelType(const PO_ComponentStatusFocalPlaneArrayChannelType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_ComponentStatusFocalPlaneArrayChannelType to move from
    */
  PO_ComponentStatusFocalPlaneArrayChannelType(PO_ComponentStatusFocalPlaneArrayChannelType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_ComponentStatusFocalPlaneArrayChannelType to copy from
    * @return The PO_ComponentStatusFocalPlaneArrayChannelType that was assigned
    */
  PO_ComponentStatusFocalPlaneArrayChannelType& operator=(const PO_ComponentStatusFocalPlaneArrayChannelType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_ComponentStatusFocalPlaneArrayChannelType to move from
    * @return The PO_ComponentStatusFocalPlaneArrayChannelType that was assigned
    */
  PO_ComponentStatusFocalPlaneArrayChannelType& operator=(PO_ComponentStatusFocalPlaneArrayChannelType&& rhs) = delete;

  /** The destructor */
  virtual ~PO_ComponentStatusFocalPlaneArrayChannelType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ComponentStatusFocalPlaneArrayChannelType whose contents are to be used to set this
    *      uci::type::PO_ComponentStatusFocalPlaneArrayChannelType's contents.
    */
  void copy(const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ComponentStatusFocalPlaneArrayChannelType whose contents are to be used to set this
    *      uci::type::PO_ComponentStatusFocalPlaneArrayChannelType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ChannelID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ChannelID field.
    */
  const uci::type::PO_FPA_ChannelID_Type& getChannelID() const override;

  /** Returns the accessor to the ChannelID field contained in this message fragment
    *
    * @return The reference to the accessor to the ChannelID field.
    */
  uci::type::PO_FPA_ChannelID_Type& getChannelID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setChannelID(const uci::type::PO_FPA_ChannelID_Type& accessor) override;

  /** Returns the accessor to the ChannelControlsStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the ChannelControlsStatus field.
    */
  const uci::type::ComponentControlsStatusType& getChannelControlsStatus() const override;

  /** Returns the accessor to the ChannelControlsStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the ChannelControlsStatus field.
    */
  uci::type::ComponentControlsStatusType& getChannelControlsStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setChannelControlsStatus(const uci::type::ComponentControlsStatusType& accessor) override;

  /** Returns the accessor to the OpticalBand field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpticalBand field.
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& getOpticalBand() const override;

  /** Returns the accessor to the OpticalBand field contained in this message fragment
    *
    * @return The reference to the accessor to the OpticalBand field.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& getOpticalBand() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setOpticalBand(const uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& getPixelAggregation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& getPixelAggregation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& getPixelAggregation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setPixelAggregation(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& accessor) override;

  /** Returns whether this optional field PixelAggregationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPixelAggregation() const noexcept override;

  /** Enables the optional field such that getPixelAggregation will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& enablePixelAggregation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearPixelAggregation() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& getTimeDelayIntegration_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& getTimeDelayIntegration() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& getTimeDelayIntegration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setTimeDelayIntegration(const uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& accessor) override;

  /** Returns whether this optional field TimeDelayIntegrationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeDelayIntegration() const noexcept override;

  /** Enables the optional field such that getTimeDelayIntegration will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& enableTimeDelayIntegration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearTimeDelayIntegration() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& getPixelScaling_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& getPixelScaling() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& getPixelScaling() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setPixelScaling(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& accessor) override;

  /** Returns whether this optional field PixelScalingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPixelScaling() const noexcept override;

  /** Enables the optional field such that getPixelScaling will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& enablePixelScaling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearPixelScaling() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& getPixelPolarity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& getPixelPolarity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& getPixelPolarity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setPixelPolarity(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& accessor) override;

  /** Returns whether this optional field PixelPolarityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPixelPolarity() const noexcept override;

  /** Enables the optional field such that getPixelPolarity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& enablePixelPolarity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearPixelPolarity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& getCollectionTime_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& getCollectionTime() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& getCollectionTime() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setCollectionTime(const uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& accessor) override;

  /** Returns whether this optional field CollectionTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionTime() const noexcept override;

  /** Enables the optional field such that getCollectionTime will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& enableCollectionTime(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearCollectionTime() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& getNonUniformityCorrection_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& getNonUniformityCorrection() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& getNonUniformityCorrection() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setNonUniformityCorrection(const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& accessor) override;

  /** Returns whether this optional field NonUniformityCorrectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNonUniformityCorrection() const noexcept override;

  /** Enables the optional field such that getNonUniformityCorrection will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& enableNonUniformityCorrection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearNonUniformityCorrection() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& getScanDirection_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& getScanDirection() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& getScanDirection() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setScanDirection(const uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& accessor) override;

  /** Returns whether this optional field ScanDirectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasScanDirection() const noexcept override;

  /** Enables the optional field such that getScanDirection will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& enableScanDirection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearScanDirection() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_ComponentStatusFocalPlaneArrayChannelType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PO_FPA_ChannelID_Type> channelID_Accessor;
  std::unique_ptr<ComponentControlsStatusType> channelControlsStatus_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayOpticalBandType> opticalBand_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayPixelAggregationType> pixelAggregation_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType> timeDelayIntegration_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayPixelScalingType> pixelScaling_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayPixelPolarityType> pixelPolarity_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayCollectionTimeType> collectionTime_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType> nonUniformityCorrection_Accessor;
  std::unique_ptr<PO_ComponentStatusFocalPlaneArrayScanDirectionType> scanDirection_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_COMPONENTSTATUSFOCALPLANEARRAYCHANNELTYPE_H
