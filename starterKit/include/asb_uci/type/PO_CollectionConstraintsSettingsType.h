/** @file PO_CollectionConstraintsSettingsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_COLLECTIONCONSTRAINTSSETTINGSTYPE_H
#define ASB_UCI_TYPE_PO_COLLECTIONCONSTRAINTSSETTINGSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CollectionConstraintsSettingsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class PO_AngleConstraintControlsType;
class PO_CollectionPatternConstraintControlsType;
class PO_GimbalOrientationConstraintType;
class PO_SlantRangeConstraintControlsType;
class PO_SweepSpeedConstraintControlsType;

/** This type is used to specify a set of constraints that constrain when a PO or AO sensor can start collecting the
  * requested image data.
  */
class PO_CollectionConstraintsSettingsType : public virtual uci::type::PO_CollectionConstraintsSettingsType {
public:
  /** The constructor */
  PO_CollectionConstraintsSettingsType();

  /** The copy constructor
    *
    * @param rhs The PO_CollectionConstraintsSettingsType to copy from
    */
  PO_CollectionConstraintsSettingsType(const PO_CollectionConstraintsSettingsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_CollectionConstraintsSettingsType to move from
    */
  PO_CollectionConstraintsSettingsType(PO_CollectionConstraintsSettingsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_CollectionConstraintsSettingsType to copy from
    * @return The PO_CollectionConstraintsSettingsType that was assigned
    */
  PO_CollectionConstraintsSettingsType& operator=(const PO_CollectionConstraintsSettingsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_CollectionConstraintsSettingsType to move from
    * @return The PO_CollectionConstraintsSettingsType that was assigned
    */
  PO_CollectionConstraintsSettingsType& operator=(PO_CollectionConstraintsSettingsType&& rhs) = delete;

  /** The destructor */
  virtual ~PO_CollectionConstraintsSettingsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CollectionConstraintsSettingsType whose contents are to be used to set this
    *      uci::type::PO_CollectionConstraintsSettingsType's contents.
    */
  void copy(const uci::type::PO_CollectionConstraintsSettingsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CollectionConstraintsSettingsType whose contents are to be used to set this
    *      uci::type::PO_CollectionConstraintsSettingsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_CollectionConstraintsSettingsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getMapAngle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsType& getMapAngle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getMapAngle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setMapAngle(const uci::type::PO_AngleConstraintControlsType& accessor) override;

  /** Returns whether this optional field MapAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMapAngle() const noexcept override;

  /** Enables the optional field such that getMapAngle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& enableMapAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearMapAngle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getGrazingAngle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsType& getGrazingAngle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getGrazingAngle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setGrazingAngle(const uci::type::PO_AngleConstraintControlsType& accessor) override;

  /** Returns whether this optional field GrazingAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGrazingAngle() const noexcept override;

  /** Enables the optional field such that getGrazingAngle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& enableGrazingAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearGrazingAngle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getLookAngle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsType& getLookAngle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getLookAngle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setLookAngle(const uci::type::PO_AngleConstraintControlsType& accessor) override;

  /** Returns whether this optional field LookAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLookAngle() const noexcept override;

  /** Enables the optional field such that getLookAngle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& enableLookAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearLookAngle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getElevationAngle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsType& getElevationAngle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getElevationAngle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setElevationAngle(const uci::type::PO_AngleConstraintControlsType& accessor) override;

  /** Returns whether this optional field ElevationAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasElevationAngle() const noexcept override;

  /** Enables the optional field such that getElevationAngle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& enableElevationAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearElevationAngle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SlantRangeConstraintControlsType& getSlantRange_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_SlantRangeConstraintControlsType& getSlantRange() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SlantRangeConstraintControlsType& getSlantRange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setSlantRange(const uci::type::PO_SlantRangeConstraintControlsType& accessor) override;

  /** Returns whether this optional field SlantRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSlantRange() const noexcept override;

  /** Enables the optional field such that getSlantRange will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SlantRangeConstraintControlsType& enableSlantRange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearSlantRange() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionPatternConstraintControlsType& getCollectionPattern_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_CollectionPatternConstraintControlsType& getCollectionPattern() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionPatternConstraintControlsType& getCollectionPattern() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setCollectionPattern(const uci::type::PO_CollectionPatternConstraintControlsType& accessor) override;

  /** Returns whether this optional field CollectionPatternis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionPattern() const noexcept override;

  /** Enables the optional field such that getCollectionPattern will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionPatternConstraintControlsType& enableCollectionPattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearCollectionPattern() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getSunElevAngles_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsType& getSunElevAngles() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getSunElevAngles() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setSunElevAngles(const uci::type::PO_AngleConstraintControlsType& accessor) override;

  /** Returns whether this optional field SunElevAnglesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSunElevAngles() const noexcept override;

  /** Enables the optional field such that getSunElevAngles will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& enableSunElevAngles(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearSunElevAngles() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getSunAzimuthAngles_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsType& getSunAzimuthAngles() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& getSunAzimuthAngles() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setSunAzimuthAngles(const uci::type::PO_AngleConstraintControlsType& accessor) override;

  /** Returns whether this optional field SunAzimuthAnglesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSunAzimuthAngles() const noexcept override;

  /** Enables the optional field such that getSunAzimuthAngles will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsType& enableSunAzimuthAngles(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearSunAzimuthAngles() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SweepSpeedConstraintControlsType& getSweepSpeed_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_SweepSpeedConstraintControlsType& getSweepSpeed() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SweepSpeedConstraintControlsType& getSweepSpeed() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setSweepSpeed(const uci::type::PO_SweepSpeedConstraintControlsType& accessor) override;

  /** Returns whether this optional field SweepSpeedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSweepSpeed() const noexcept override;

  /** Enables the optional field such that getSweepSpeed will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_SweepSpeedConstraintControlsType& enableSweepSpeed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearSweepSpeed() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_GimbalOrientationConstraintType& getGimbalOrientation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_GimbalOrientationConstraintType& getGimbalOrientation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_GimbalOrientationConstraintType& getGimbalOrientation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& setGimbalOrientation(const uci::type::PO_GimbalOrientationConstraintType& accessor) override;

  /** Returns whether this optional field GimbalOrientationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGimbalOrientation() const noexcept override;

  /** Enables the optional field such that getGimbalOrientation will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_GimbalOrientationConstraintType& enableGimbalOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CollectionConstraintsSettingsType& clearGimbalOrientation() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_CollectionConstraintsSettingsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CollectionConstraintsSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_CollectionConstraintsSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PO_AngleConstraintControlsType> mapAngle_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsType> grazingAngle_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsType> lookAngle_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsType> elevationAngle_Accessor;
  std::unique_ptr<PO_SlantRangeConstraintControlsType> slantRange_Accessor;
  std::unique_ptr<PO_CollectionPatternConstraintControlsType> collectionPattern_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsType> sunElevAngles_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsType> sunAzimuthAngles_Accessor;
  std::unique_ptr<PO_SweepSpeedConstraintControlsType> sweepSpeed_Accessor;
  std::unique_ptr<PO_GimbalOrientationConstraintType> gimbalOrientation_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_COLLECTIONCONSTRAINTSSETTINGSTYPE_H
