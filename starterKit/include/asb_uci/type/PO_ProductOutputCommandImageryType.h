/** @file PO_ProductOutputCommandImageryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_PRODUCTOUTPUTCOMMANDIMAGERYTYPE_H
#define ASB_UCI_TYPE_PO_PRODUCTOUTPUTCOMMANDIMAGERYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ProductOutputCommandBasicType.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProductOutputCommandImageryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class JPEG_SettingsType;
class MISP_PackingPlanType;
class NITF_PackingPlanPET;
class PO_ProductGeneratorOutputID_Type;
class ProductResolutionType;
class VideoOutputSettingsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ProductOutputCommandImageryType : public virtual uci::type::PO_ProductOutputCommandImageryType, public virtual ProductOutputCommandBasicType {
public:
  /** Settings for the video encoder for generating video streams. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using VideoOutput = asb_uci::base::BoundedList<uci::type::VideoOutputSettingsType, uci::type::accessorType::videoOutputSettingsType, asb_uci::type::VideoOutputSettingsType>;

  /** The constructor */
  PO_ProductOutputCommandImageryType();

  /** The copy constructor
    *
    * @param rhs The PO_ProductOutputCommandImageryType to copy from
    */
  PO_ProductOutputCommandImageryType(const PO_ProductOutputCommandImageryType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_ProductOutputCommandImageryType to move from
    */
  PO_ProductOutputCommandImageryType(PO_ProductOutputCommandImageryType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_ProductOutputCommandImageryType to copy from
    * @return The PO_ProductOutputCommandImageryType that was assigned
    */
  PO_ProductOutputCommandImageryType& operator=(const PO_ProductOutputCommandImageryType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_ProductOutputCommandImageryType to move from
    * @return The PO_ProductOutputCommandImageryType that was assigned
    */
  PO_ProductOutputCommandImageryType& operator=(PO_ProductOutputCommandImageryType&& rhs) = delete;

  /** The destructor */
  ~PO_ProductOutputCommandImageryType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ProductOutputCommandImageryType whose contents are to be used to set this
    *      uci::type::PO_ProductOutputCommandImageryType's contents.
    */
  void copy(const uci::type::PO_ProductOutputCommandImageryType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ProductOutputCommandImageryType whose contents are to be used to set this
    *      uci::type::PO_ProductOutputCommandImageryType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_ProductOutputCommandImageryType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ProductOutputID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductOutputID field.
    */
  const uci::type::PO_ProductGeneratorOutputID_Type& getProductOutputID() const override;

  /** Returns the accessor to the ProductOutputID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductOutputID field.
    */
  uci::type::PO_ProductGeneratorOutputID_Type& getProductOutputID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setProductOutputID(const uci::type::PO_ProductGeneratorOutputID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::JPEG_SettingsType& getJPEG_Settings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::JPEG_SettingsType& getJPEG_Settings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::JPEG_SettingsType& getJPEG_Settings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setJPEG_Settings(const uci::type::JPEG_SettingsType& accessor) override;

  /** Returns whether this optional field JPEG_Settingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasJPEG_Settings() const noexcept override;

  /** Enables the optional field such that getJPEG_Settings will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::JPEG_SettingsType& enableJPEG_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearJPEG_Settings() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NITF_PackingPlanPET& getNITF_PackingPlan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NITF_PackingPlanPET& getNITF_PackingPlan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NITF_PackingPlanPET& getNITF_PackingPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setNITF_PackingPlan(const uci::type::NITF_PackingPlanPET& accessor) override;

  /** Returns whether this optional field NITF_PackingPlanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNITF_PackingPlan() const noexcept override;

  /** Enables the optional field such that getNITF_PackingPlan will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NITF_PackingPlanPET& enableNITF_PackingPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearNITF_PackingPlan() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Float getCompressionRatio() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setCompressionRatio(xs::Float value) override;

  /** Returns whether this optional field CompressionRatiois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCompressionRatio() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearCompressionRatio() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MISP_PackingPlanType& getMISP_Settings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MISP_PackingPlanType& getMISP_Settings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MISP_PackingPlanType& getMISP_Settings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setMISP_Settings(const uci::type::MISP_PackingPlanType& accessor) override;

  /** Returns whether this optional field MISP_Settingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMISP_Settings() const noexcept override;

  /** Enables the optional field such that getMISP_Settings will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MISP_PackingPlanType& enableMISP_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearMISP_Settings() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getProductRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setProductRate(xs::UnsignedInt value) override;

  /** Returns whether this optional field ProductRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProductRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearProductRate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getInterlaced() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setInterlaced(xs::Boolean value) override;

  /** Returns whether this optional field Interlacedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInterlaced() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearInterlaced() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getProductSize() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setProductSize(xs::UnsignedInt value) override;

  /** Returns whether this optional field ProductSizeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProductSize() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearProductSize() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductResolutionType& getProductResolution_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ProductResolutionType& getProductResolution() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductResolutionType& getProductResolution() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setProductResolution(const uci::type::ProductResolutionType& accessor) override;

  /** Returns whether this optional field ProductResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProductResolution() const noexcept override;

  /** Enables the optional field such that getProductResolution will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProductResolutionType& enableProductResolution(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& clearProductResolution() noexcept override;

  /** Returns the accessor to the VideoOutput field contained in this message fragment
    *
    * @return The const reference to the accessor to the VideoOutput field.
    */
  const uci::type::PO_ProductOutputCommandImageryType::VideoOutput& getVideoOutput() const override;

  /** Returns the accessor to the VideoOutput field contained in this message fragment
    *
    * @return The reference to the accessor to the VideoOutput field.
    */
  uci::type::PO_ProductOutputCommandImageryType::VideoOutput& getVideoOutput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ProductOutputCommandImageryType& setVideoOutput(const uci::type::PO_ProductOutputCommandImageryType::VideoOutput& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_ProductOutputCommandImageryType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ProductOutputCommandImageryType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_ProductOutputCommandImageryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PO_ProductGeneratorOutputID_Type> productOutputID_Accessor;
  std::unique_ptr<JPEG_SettingsType> jPEG_Settings_Accessor;
  std::unique_ptr<NITF_PackingPlanPET> nITF_PackingPlan_Accessor;
  boost::optional<asb_xs::Float> compressionRatio_Accessor;
  std::unique_ptr<MISP_PackingPlanType> mISP_Settings_Accessor;
  boost::optional<asb_xs::UnsignedInt> productRate_Accessor;
  boost::optional<asb_xs::Boolean> interlaced_Accessor;
  boost::optional<asb_xs::UnsignedInt> productSize_Accessor;
  std::unique_ptr<ProductResolutionType> productResolution_Accessor;
  std::unique_ptr<VideoOutput> videoOutput_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_PRODUCTOUTPUTCOMMANDIMAGERYTYPE_H
