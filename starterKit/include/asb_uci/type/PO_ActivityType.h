/** @file PO_ActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_ACTIVITYTYPE_H
#define ASB_UCI_TYPE_PO_ACTIVITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/FOR_Enum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ActivityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class FOV_ActivityType;
class PO_CollectionConstraintsStatusType;
class PO_ComponentStatusType;
class PO_SubCapabilitySettingsType;
class PO_TargetType;
class PO_TrackActivityType;
class PO_TrackDetailsType;
class ProductOutputCapabilityStatusImageryType;
class RepetitionType;
class SearchTrackActivityDetailsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ActivityType : public virtual uci::type::PO_ActivityType, public virtual ActivityBaseType {
public:
  /** Indicates detailed PO sensor Subcapabilities settings that will be used for this Activity. If the Activity is
    * interactive and the Component controls and settings support manual interaction, these settings can be changed via
    * PO_Command. Activity to optimize the captured imagery and tracks. If omitted, the Activity is subject to the
    * default/current settings when the Activity starts. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SubCapabilityStatus = asb_uci::base::BoundedList<uci::type::PO_SubCapabilitySettingsType, uci::type::accessorType::pO_SubCapabilitySettingsType, asb_uci::type::PO_SubCapabilitySettingsType>;

  /** Indicates detailed PO sensor control states and settings that will be used for this Activity. If the Activity is
    * interactive and the Component controls and settings support manual interaction, these settings can be changed via
    * PO_Command. Activity to optimize the captured imagery. If omitted, the Activity is subject to the default/current
    * Component state when the Activity starts. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ComponentStatus = asb_uci::base::BoundedList<uci::type::PO_ComponentStatusType, uci::type::accessorType::pO_ComponentStatusType, asb_uci::type::PO_ComponentStatusType>;

  /** Indicates the current status of the product output associated with this Activity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using ProductOutputStatus = asb_uci::base::BoundedList<uci::type::ProductOutputCapabilityStatusImageryType, uci::type::accessorType::productOutputCapabilityStatusImageryType, asb_uci::type::ProductOutputCapabilityStatusImageryType>;

  /** The constructor */
  PO_ActivityType();

  /** The copy constructor
    *
    * @param rhs The PO_ActivityType to copy from
    */
  PO_ActivityType(const PO_ActivityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_ActivityType to move from
    */
  PO_ActivityType(PO_ActivityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_ActivityType to copy from
    * @return The PO_ActivityType that was assigned
    */
  PO_ActivityType& operator=(const PO_ActivityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_ActivityType to move from
    * @return The PO_ActivityType that was assigned
    */
  PO_ActivityType& operator=(PO_ActivityType&& rhs) = delete;

  /** The destructor */
  ~PO_ActivityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ActivityType whose contents are to be used to set this uci::type::PO_ActivityType's
    *      contents.
    */
  void copy(const uci::type::PO_ActivityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ActivityType whose contents are to be used to set this uci::type::PO_ActivityType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_ActivityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getActualStartTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setActualStartTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field ActualStartTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActualStartTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearActualStartTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getActualCompletionTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setActualCompletionTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field ActualCompletionTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActualCompletionTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearActualCompletionTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getAllProductsAndMessagesProduced() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setAllProductsAndMessagesProduced(xs::Boolean value) override;

  /** Returns whether this optional field AllProductsAndMessagesProducedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAllProductsAndMessagesProduced() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearAllProductsAndMessagesProduced() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ActivityType& getFOV_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOV_ActivityType& getFOV() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ActivityType& getFOV() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setFOV(const uci::type::FOV_ActivityType& accessor) override;

  /** Returns whether this optional field FOVis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFOV() const noexcept override;

  /** Enables the optional field such that getFOV will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ActivityType& enableFOV(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearFOV() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TargetType& getPointingActivityReport_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_TargetType& getPointingActivityReport() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TargetType& getPointingActivityReport() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setPointingActivityReport(const uci::type::PO_TargetType& accessor) override;

  /** Returns whether this optional field PointingActivityReportis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPointingActivityReport() const noexcept override;

  /** Enables the optional field such that getPointingActivityReport will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TargetType& enablePointingActivityReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearPointingActivityReport() noexcept override;

  /** Returns the accessor to the SubCapabilityStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCapabilityStatus field.
    */
  const uci::type::PO_ActivityType::SubCapabilityStatus& getSubCapabilityStatus() const override;

  /** Returns the accessor to the SubCapabilityStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCapabilityStatus field.
    */
  uci::type::PO_ActivityType::SubCapabilityStatus& getSubCapabilityStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setSubCapabilityStatus(const uci::type::PO_ActivityType::SubCapabilityStatus& accessor) override;

  /** Returns the accessor to the ComponentStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentStatus field.
    */
  const uci::type::PO_ActivityType::ComponentStatus& getComponentStatus() const override;

  /** Returns the accessor to the ComponentStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentStatus field.
    */
  uci::type::PO_ActivityType::ComponentStatus& getComponentStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setComponentStatus(const uci::type::PO_ActivityType::ComponentStatus& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionConstraintsStatusType& getCollectionConstraintsStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_CollectionConstraintsStatusType& getCollectionConstraintsStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionConstraintsStatusType& getCollectionConstraintsStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setCollectionConstraintsStatus(const uci::type::PO_CollectionConstraintsStatusType& accessor) override;

  /** Returns whether this optional field CollectionConstraintsStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionConstraintsStatus() const noexcept override;

  /** Enables the optional field such that getCollectionConstraintsStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_CollectionConstraintsStatusType& enableCollectionConstraintsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearCollectionConstraintsStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TrackDetailsType& getTrackOptionsStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_TrackDetailsType& getTrackOptionsStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TrackDetailsType& getTrackOptionsStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setTrackOptionsStatus(const uci::type::PO_TrackDetailsType& accessor) override;

  /** Returns whether this optional field TrackOptionsStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTrackOptionsStatus() const noexcept override;

  /** Enables the optional field such that getTrackOptionsStatus will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TrackDetailsType& enableTrackOptionsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearTrackOptionsStatus() noexcept override;

  /** Returns the accessor to the ProductOutputStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductOutputStatus field.
    */
  const uci::type::PO_ActivityType::ProductOutputStatus& getProductOutputStatus() const override;

  /** Returns the accessor to the ProductOutputStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductOutputStatus field.
    */
  uci::type::PO_ActivityType::ProductOutputStatus& getProductOutputStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setProductOutputStatus(const uci::type::PO_ActivityType::ProductOutputStatus& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SearchTrackActivityDetailsType& getSearchActivity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SearchTrackActivityDetailsType& getSearchActivity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SearchTrackActivityDetailsType& getSearchActivity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setSearchActivity(const uci::type::SearchTrackActivityDetailsType& accessor) override;

  /** Returns whether this optional field SearchActivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSearchActivity() const noexcept override;

  /** Enables the optional field such that getSearchActivity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SearchTrackActivityDetailsType& enableSearchActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearSearchActivity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TrackActivityType& getTrackActivity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_TrackActivityType& getTrackActivity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TrackActivityType& getTrackActivity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setTrackActivity(const uci::type::PO_TrackActivityType& accessor) override;

  /** Returns whether this optional field TrackActivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTrackActivity() const noexcept override;

  /** Enables the optional field such that getTrackActivity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_TrackActivityType& enableTrackActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearTrackActivity() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Enum& getFOR_State_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOR_Enum& getFOR_State() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Enum& getFOR_State() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setFOR_State(const uci::type::FOR_Enum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setFOR_State(uci::type::FOR_Enum::EnumerationItem value) override;

  /** Returns whether this optional field FOR_Stateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFOR_State() const noexcept override;

  /** Enables the optional field such that getFOR_State will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Enum& enableFOR_State(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearFOR_State() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Enum& getThermalBlankingFOR_State_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOR_Enum& getThermalBlankingFOR_State() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Enum& getThermalBlankingFOR_State() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setThermalBlankingFOR_State(const uci::type::FOR_Enum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setThermalBlankingFOR_State(uci::type::FOR_Enum::EnumerationItem value) override;

  /** Returns whether this optional field ThermalBlankingFOR_Stateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasThermalBlankingFOR_State() const noexcept override;

  /** Enables the optional field such that getThermalBlankingFOR_State will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOR_Enum& enableThermalBlankingFOR_State(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearThermalBlankingFOR_State() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& getRepetition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RepetitionType& getRepetition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& getRepetition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& setRepetition(const uci::type::RepetitionType& accessor) override;

  /** Returns whether this optional field Repetitionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRepetition() const noexcept override;

  /** Enables the optional field such that getRepetition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ActivityType& clearRepetition() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_ActivityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ActivityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_ActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<DateTimeTypeValue> actualStartTime_Accessor;
  boost::optional<DateTimeTypeValue> actualCompletionTime_Accessor;
  boost::optional<asb_xs::Boolean> allProductsAndMessagesProduced_Accessor;
  std::unique_ptr<FOV_ActivityType> fOV_Accessor;
  std::unique_ptr<PO_TargetType> pointingActivityReport_Accessor;
  std::unique_ptr<SubCapabilityStatus> subCapabilityStatus_Accessor;
  std::unique_ptr<ComponentStatus> componentStatus_Accessor;
  std::unique_ptr<PO_CollectionConstraintsStatusType> collectionConstraintsStatus_Accessor;
  std::unique_ptr<PO_TrackDetailsType> trackOptionsStatus_Accessor;
  std::unique_ptr<ProductOutputStatus> productOutputStatus_Accessor;
  std::unique_ptr<SearchTrackActivityDetailsType> searchActivity_Accessor;
  std::unique_ptr<PO_TrackActivityType> trackActivity_Accessor;
  std::unique_ptr<FOR_Enum> fOR_State_Accessor;
  std::unique_ptr<FOR_Enum> thermalBlankingFOR_State_Accessor;
  std::unique_ptr<RepetitionType> repetition_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_ACTIVITYTYPE_H
