/** @file SystemStatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SYSTEMSTATUSMDT_H
#define ASB_UCI_TYPE_SYSTEMSTATUSMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/EntityFusionEligibilityEnum.h"
#include "../../../include/asb_uci/type/SystemSourceEnum.h"
#include "../../../include/asb_uci/type/SystemStateEnum.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemStatusMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityByType;
class CapabilityID_Type;
class OperatorID_Type;
class PlatformStatusType;
class ServiceID_Type;
class StrengthType;
class SubsystemID_Type;
class SystemCommunicationsType;
class SystemID_Type;
class SystemIdentityType;
class VoiceControlType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SystemStatusMDT : public virtual uci::type::SystemStatusMDT {
public:
  /** The UUID of the operator associated with this system. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using OperatorID = asb_uci::base::BoundedList<uci::type::OperatorID_Type, uci::type::accessorType::operatorID_Type, asb_uci::type::OperatorID_Type>;

  /** Indicates a C2 relevant Subsystem of the System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using SubsystemID = asb_uci::base::BoundedList<uci::type::SubsystemID_Type, uci::type::accessorType::subsystemID_Type, asb_uci::type::SubsystemID_Type>;

  /** Indicates a C2 relevant Capability of the System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CapabilityID = asb_uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type, asb_uci::type::CapabilityID_Type>;

  /** Indicates a Service that is implemented by the System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ServiceID = asb_uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type, asb_uci::type::ServiceID_Type>;

  /** This element indicates an activity, that isn't otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed by the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActivityBy = asb_uci::base::BoundedList<uci::type::ActivityByType, uci::type::accessorType::activityByType, asb_uci::type::ActivityByType>;

  /** The constructor */
  SystemStatusMDT();

  /** The copy constructor
    *
    * @param rhs The SystemStatusMDT to copy from
    */
  SystemStatusMDT(const SystemStatusMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SystemStatusMDT to move from
    */
  SystemStatusMDT(SystemStatusMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SystemStatusMDT to copy from
    * @return The SystemStatusMDT that was assigned
    */
  SystemStatusMDT& operator=(const SystemStatusMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SystemStatusMDT to move from
    * @return The SystemStatusMDT that was assigned
    */
  SystemStatusMDT& operator=(SystemStatusMDT&& rhs) = delete;

  /** The destructor */
  virtual ~SystemStatusMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SystemStatusMDT whose contents are to be used to set this uci::type::SystemStatusMDT's
    *      contents.
    */
  void copy(const uci::type::SystemStatusMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SystemStatusMDT whose contents are to be used to set this uci::type::SystemStatusMDT's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SystemStatusMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemID field.
    */
  const uci::type::SystemID_Type& getSystemID() const override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemID field.
    */
  uci::type::SystemID_Type& getSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setSystemID(const uci::type::SystemID_Type& accessor) override;

  /** Returns the contents of the message's SystemState field
    *
    * @return The contents of the SystemState field
    */
  const uci::type::SystemStateEnum& getSystemState() const override;

  /** Returns the contents of the message's SystemState field
    *
    * @return The contents of the SystemState field
    */
  uci::type::SystemStateEnum& getSystemState() override;

  /** Sets the contents of the message's SystemState field
    *
    * @param accessor The accessor to use to set the SystemState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setSystemState(const uci::type::SystemStateEnum& accessor) override;

  /** Sets the contents of the message's SystemState field
    *
    * @param value The new value to set the SystemState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setSystemState(uci::type::SystemStateEnum::EnumerationItem value) override;

  /** Returns the contents of the message's Source field
    *
    * @return The contents of the Source field
    */
  const uci::type::SystemSourceEnum& getSource() const override;

  /** Returns the contents of the message's Source field
    *
    * @return The contents of the Source field
    */
  uci::type::SystemSourceEnum& getSource() override;

  /** Sets the contents of the message's Source field
    *
    * @param accessor The accessor to use to set the Source field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setSource(const uci::type::SystemSourceEnum& accessor) override;

  /** Sets the contents of the message's Source field
    *
    * @param value The new value to set the Source field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setSource(uci::type::SystemSourceEnum::EnumerationItem value) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityFusionEligibilityEnum& getFusionEligibility_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EntityFusionEligibilityEnum& getFusionEligibility() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityFusionEligibilityEnum& getFusionEligibility() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setFusionEligibility(const uci::type::EntityFusionEligibilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setFusionEligibility(uci::type::EntityFusionEligibilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field FusionEligibilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFusionEligibility() const noexcept override;

  /** Enables the optional field such that getFusionEligibility will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityFusionEligibilityEnum& enableFusionEligibility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& clearFusionEligibility() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getModel_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString32Type& getModel() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getModel() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setModel(const uci::type::VisibleString32Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setModel(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setModel(const char* value) override;

  /** Returns whether this optional field model_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasModel() const noexcept override;

  /** Enables the optional field such that getModel will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& enableModel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& clearModel() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemIdentityType& getIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemIdentityType& getIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemIdentityType& getIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setIdentity(const uci::type::SystemIdentityType& accessor) override;

  /** Returns whether this optional field Identityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIdentity() const noexcept override;

  /** Enables the optional field such that getIdentity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& clearIdentity() noexcept override;

  /** Returns the accessor to the Communications field contained in this message fragment
    *
    * @return The const reference to the accessor to the Communications field.
    */
  const uci::type::SystemCommunicationsType& getCommunications() const override;

  /** Returns the accessor to the Communications field contained in this message fragment
    *
    * @return The reference to the accessor to the Communications field.
    */
  uci::type::SystemCommunicationsType& getCommunications() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setCommunications(const uci::type::SystemCommunicationsType& accessor) override;

  /** Returns the accessor to the OperatorID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OperatorID field.
    */
  const uci::type::SystemStatusMDT::OperatorID& getOperatorID() const override;

  /** Returns the accessor to the OperatorID field contained in this message fragment
    *
    * @return The reference to the accessor to the OperatorID field.
    */
  uci::type::SystemStatusMDT::OperatorID& getOperatorID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setOperatorID(const uci::type::SystemStatusMDT::OperatorID& accessor) override;

  /** Returns the accessor to the SubsystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubsystemID field.
    */
  const uci::type::SystemStatusMDT::SubsystemID& getSubsystemID() const override;

  /** Returns the accessor to the SubsystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SubsystemID field.
    */
  uci::type::SystemStatusMDT::SubsystemID& getSubsystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setSubsystemID(const uci::type::SystemStatusMDT::SubsystemID& accessor) override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityID field.
    */
  const uci::type::SystemStatusMDT::CapabilityID& getCapabilityID() const override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityID field.
    */
  uci::type::SystemStatusMDT::CapabilityID& getCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setCapabilityID(const uci::type::SystemStatusMDT::CapabilityID& accessor) override;

  /** Returns the accessor to the ServiceID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ServiceID field.
    */
  const uci::type::SystemStatusMDT::ServiceID& getServiceID() const override;

  /** Returns the accessor to the ServiceID field contained in this message fragment
    *
    * @return The reference to the accessor to the ServiceID field.
    */
  uci::type::SystemStatusMDT::ServiceID& getServiceID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setServiceID(const uci::type::SystemStatusMDT::ServiceID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformStatusType& getPlatformStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PlatformStatusType& getPlatformStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformStatusType& getPlatformStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setPlatformStatus(const uci::type::PlatformStatusType& accessor) override;

  /** Returns whether this optional field PlatformStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlatformStatus() const noexcept override;

  /** Enables the optional field such that getPlatformStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformStatusType& enablePlatformStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& clearPlatformStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VoiceControlType& getVoiceControl_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VoiceControlType& getVoiceControl() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VoiceControlType& getVoiceControl() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setVoiceControl(const uci::type::VoiceControlType& accessor) override;

  /** Returns whether this optional field VoiceControlis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVoiceControl() const noexcept override;

  /** Enables the optional field such that getVoiceControl will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VoiceControlType& enableVoiceControl(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& clearVoiceControl() noexcept override;

  /** Returns the accessor to the ActivityBy field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityBy field.
    */
  const uci::type::SystemStatusMDT::ActivityBy& getActivityBy() const override;

  /** Returns the accessor to the ActivityBy field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityBy field.
    */
  uci::type::SystemStatusMDT::ActivityBy& getActivityBy() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setActivityBy(const uci::type::SystemStatusMDT::ActivityBy& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StrengthType& getStrength_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::StrengthType& getStrength() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StrengthType& getStrength() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& setStrength(const uci::type::StrengthType& accessor) override;

  /** Returns whether this optional field Strengthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStrength() const noexcept override;

  /** Enables the optional field such that getStrength will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StrengthType& enableStrength(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SystemStatusMDT& clearStrength() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SystemStatusMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SystemStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SystemID_Type> systemID_Accessor;
  std::unique_ptr<SystemStateEnum> systemState_Accessor;
  std::unique_ptr<SystemSourceEnum> source_Accessor;
  std::unique_ptr<EntityFusionEligibilityEnum> fusionEligibility_Accessor;
  std::unique_ptr<VisibleString32Type> model_Accessor;
  std::unique_ptr<SystemIdentityType> identity_Accessor;
  std::unique_ptr<SystemCommunicationsType> communications_Accessor;
  std::unique_ptr<OperatorID> operatorID_Accessor;
  std::unique_ptr<SubsystemID> subsystemID_Accessor;
  std::unique_ptr<CapabilityID> capabilityID_Accessor;
  std::unique_ptr<ServiceID> serviceID_Accessor;
  std::unique_ptr<PlatformStatusType> platformStatus_Accessor;
  std::unique_ptr<VoiceControlType> voiceControl_Accessor;
  std::unique_ptr<ActivityBy> activityBy_Accessor;
  std::unique_ptr<StrengthType> strength_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SYSTEMSTATUSMDT_H
