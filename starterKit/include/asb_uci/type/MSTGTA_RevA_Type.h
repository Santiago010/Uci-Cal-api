/** @file MSTGTA_RevA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MSTGTA_REVA_TYPE_H
#define ASB_UCI_TYPE_MSTGTA_REVA_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/ElevationType.h"
#include "asb_uci/type/MSTGTA_TGT_LOC_Type.h"
#include "asb_uci/type/MSTGTA_TGT_LTIOV_Type.h"
#include "asb_uci/type/MeterUnitLetterStringType.h"
#include "asb_uci/type/NITF_TargetCategoryCodeType.h"
#include "asb_uci/type/NITF_TargetNumberType.h"
#include "asb_uci/type/NITF_TargetPriorityType.h"
#include "asb_uci/type/SingleDigitStringType.h"
#include "asb_uci/type/TGT_UTCStringType.h"
#include "asb_uci/type/VisibleString12Type.h"
#include "asb_uci/type/VisibleString15Type.h"
#include "uci/type/MSTGTA_RevA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MSTGTA_RevA_Type : public virtual uci::type::MSTGTA_RevA_Type {
public:
  /** The constructor */
  MSTGTA_RevA_Type();

  /** The copy constructor
    *
    * @param rhs The MSTGTA_RevA_Type to copy from
    */
  MSTGTA_RevA_Type(const MSTGTA_RevA_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MSTGTA_RevA_Type to move from
    */
  MSTGTA_RevA_Type(MSTGTA_RevA_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MSTGTA_RevA_Type to copy from
    * @return The MSTGTA_RevA_Type that was assigned
    */
  MSTGTA_RevA_Type& operator=(const MSTGTA_RevA_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MSTGTA_RevA_Type to move from
    * @return The MSTGTA_RevA_Type that was assigned
    */
  MSTGTA_RevA_Type& operator=(MSTGTA_RevA_Type&& rhs) = delete;

  /** The destructor */
  virtual ~MSTGTA_RevA_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MSTGTA_RevA_Type whose contents are to be used to set this
    *      uci::type::MSTGTA_RevA_Type's contents.
    */
  void copy(const uci::type::MSTGTA_RevA_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MSTGTA_RevA_Type whose contents are to be used to set this
    *      uci::type::MSTGTA_RevA_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MSTGTA_RevA_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_TargetNumberTypeValue getTGT_NUM() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_NUM(uci::type::NITF_TargetNumberTypeValue value) override;

  /** Returns whether this optional field TGT_NUMis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_NUM() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_NUM() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString12Type& getTGT_Identifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString12Type& getTGT_Identifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString12Type& getTGT_Identifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_Identifier(const uci::type::VisibleString12Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_Identifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_Identifier(const char* value) override;

  /** Returns whether this optional field tGT_Identifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_Identifier() const noexcept override;

  /** Enables the optional field such that getTGT_Identifier will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString12Type& enableTGT_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_Identifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString15Type& getTGT_BE_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString15Type& getTGT_BE() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString15Type& getTGT_BE() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_BE(const uci::type::VisibleString15Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_BE(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_BE(const char* value) override;

  /** Returns whether this optional field tGT_BE_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_BE() const noexcept override;

  /** Enables the optional field such that getTGT_BE will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString15Type& enableTGT_BE(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_BE() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_TargetPriorityTypeValue getTGT_PRI() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_PRI(uci::type::NITF_TargetPriorityTypeValue value) override;

  /** Returns whether this optional field TGT_PRIis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_PRI() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_PRI() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString12Type& getTGT_REQ_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString12Type& getTGT_REQ() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString12Type& getTGT_REQ() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_REQ(const uci::type::VisibleString12Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_REQ(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_REQ(const char* value) override;

  /** Returns whether this optional field tGT_REQ_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_REQ() const noexcept override;

  /** Enables the optional field such that getTGT_REQ will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString12Type& enableTGT_REQ(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_REQ() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_LTIOV_Type& getTGT_LTIOV_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::MSTGTA_TGT_LTIOV_Type& getTGT_LTIOV() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_LTIOV_Type& getTGT_LTIOV() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_LTIOV(const uci::type::MSTGTA_TGT_LTIOV_Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_LTIOV(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_LTIOV(const char* value) override;

  /** Returns whether this optional field tGT_LTIOV_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_LTIOV() const noexcept override;

  /** Enables the optional field such that getTGT_LTIOV will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_LTIOV_Type& enableTGT_LTIOV(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_LTIOV() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::SingleDigitStringType& getTGT_TYPE_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::SingleDigitStringType& getTGT_TYPE() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::SingleDigitStringType& getTGT_TYPE() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_TYPE(const uci::type::SingleDigitStringType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_TYPE(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_TYPE(const char* value) override;

  /** Returns whether this optional field tGT_TYPE_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_TYPE() const noexcept override;

  /** Enables the optional field such that getTGT_TYPE will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::SingleDigitStringType& enableTGT_TYPE(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_TYPE() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::SingleDigitStringType& getTGT_COLL_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::SingleDigitStringType& getTGT_COLL() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::SingleDigitStringType& getTGT_COLL() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_COLL(const uci::type::SingleDigitStringType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_COLL(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_COLL(const char* value) override;

  /** Returns whether this optional field tGT_COLL_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_COLL() const noexcept override;

  /** Enables the optional field such that getTGT_COLL will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::SingleDigitStringType& enableTGT_COLL(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_COLL() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_TargetCategoryCodeTypeValue getTGT_CAT() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_CAT(uci::type::NITF_TargetCategoryCodeTypeValue value) override;

  /** Returns whether this optional field TGT_CATis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_CAT() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_CAT() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TGT_UTCStringType& getTGT_UTC_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::TGT_UTCStringType& getTGT_UTC() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TGT_UTCStringType& getTGT_UTC() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_UTC(const uci::type::TGT_UTCStringType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_UTC(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_UTC(const char* value) override;

  /** Returns whether this optional field tGT_UTC_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_UTC() const noexcept override;

  /** Enables the optional field such that getTGT_UTC will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::TGT_UTCStringType& enableTGT_UTC(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_UTC() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::ElevationTypeValue getTGT_ELEV() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_ELEV(uci::type::ElevationTypeValue value) override;

  /** Returns whether this optional field TGT_ELEVis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_ELEV() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_ELEV() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MeterUnitLetterStringType& getTGT_ELEV_UNIT_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::MeterUnitLetterStringType& getTGT_ELEV_UNIT() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MeterUnitLetterStringType& getTGT_ELEV_UNIT() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_ELEV_UNIT(const uci::type::MeterUnitLetterStringType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_ELEV_UNIT(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_ELEV_UNIT(const char* value) override;

  /** Returns whether this optional field tGT_ELEV_UNIT_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_ELEV_UNIT() const noexcept override;

  /** Enables the optional field such that getTGT_ELEV_UNIT will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::MeterUnitLetterStringType& enableTGT_ELEV_UNIT(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& clearTGT_ELEV_UNIT() noexcept override;

  /** Returns the contents of the message's TGT_LOC field
    *
    * @return The contents of the TGT_LOC field
    */
  const uci::type::MSTGTA_TGT_LOC_Type& getTGT_LOC() const noexcept override;

  /** Returns the contents of the message's TGT_LOC field
    *
    * @return The contents of the TGT_LOC field
    */
  uci::type::MSTGTA_TGT_LOC_Type& getTGT_LOC() noexcept override;

  /** Sets the contents of the message's TGT_LOC field
    *
    * @param value The new value to set the TGT_LOC field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_LOC(const uci::type::MSTGTA_TGT_LOC_Type& value) override;

  /** Sets the contents of the message's TGT_LOC field
    *
    * @param value The new value to set the TGT_LOC field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_LOC(const std::string& value) override;

  /** Sets the contents of the message's TGT_LOC field
    *
    * @param value The new value to set the TGT_LOC field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_RevA_Type& setTGT_LOC(const char* value) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MSTGTA_RevA_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MSTGTA_RevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MSTGTA_RevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<NITF_TargetNumberTypeValue> tGT_NUM_Accessor;
  std::unique_ptr<VisibleString12Type> tGT_Identifier_Accessor;
  std::unique_ptr<VisibleString15Type> tGT_BE_Accessor;
  boost::optional<NITF_TargetPriorityTypeValue> tGT_PRI_Accessor;
  std::unique_ptr<VisibleString12Type> tGT_REQ_Accessor;
  std::unique_ptr<MSTGTA_TGT_LTIOV_Type> tGT_LTIOV_Accessor;
  std::unique_ptr<SingleDigitStringType> tGT_TYPE_Accessor;
  std::unique_ptr<SingleDigitStringType> tGT_COLL_Accessor;
  boost::optional<NITF_TargetCategoryCodeTypeValue> tGT_CAT_Accessor;
  std::unique_ptr<TGT_UTCStringType> tGT_UTC_Accessor;
  boost::optional<ElevationTypeValue> tGT_ELEV_Accessor;
  std::unique_ptr<MeterUnitLetterStringType> tGT_ELEV_UNIT_Accessor;
  std::unique_ptr<MSTGTA_TGT_LOC_Type> tGT_LOC_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MSTGTA_REVA_TYPE_H
