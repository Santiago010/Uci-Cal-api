/** @file SourceResolutionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SOURCERESOLUTIONTYPE_H
#define ASB_UCI_TYPE_SOURCERESOLUTIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AnglePositiveType.h"
#include "asb_uci/type/DistanceType.h"
#include "asb_uci/type/SpeedType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/SourceResolutionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Characterizes the resolution of the sensor. */
class SourceResolutionType : public virtual uci::type::SourceResolutionType {
public:
  /** The constructor */
  SourceResolutionType();

  /** The copy constructor
    *
    * @param rhs The SourceResolutionType to copy from
    */
  SourceResolutionType(const SourceResolutionType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SourceResolutionType to move from
    */
  SourceResolutionType(SourceResolutionType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SourceResolutionType to copy from
    * @return The SourceResolutionType that was assigned
    */
  SourceResolutionType& operator=(const SourceResolutionType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SourceResolutionType to move from
    * @return The SourceResolutionType that was assigned
    */
  SourceResolutionType& operator=(SourceResolutionType&& rhs) = delete;

  /** The destructor */
  virtual ~SourceResolutionType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SourceResolutionType whose contents are to be used to set this
    *      uci::type::SourceResolutionType's contents.
    */
  void copy(const uci::type::SourceResolutionType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SourceResolutionType whose contents are to be used to set this
    *      uci::type::SourceResolutionType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SourceResolutionType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getRangeResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setRangeResolution(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field RangeResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRangeResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearRangeResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::SpeedTypeValue getRangeRateResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setRangeRateResolution(uci::type::SpeedTypeValue value) override;

  /** Returns whether this optional field RangeRateResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRangeRateResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearRangeRateResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getAzimuthResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setAzimuthResolution(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field AzimuthResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAzimuthResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearAzimuthResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getElevationResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setElevationResolution(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field ElevationResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasElevationResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearElevationResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getAzimuthRateResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setAzimuthRateResolution(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field AzimuthRateResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAzimuthRateResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearAzimuthRateResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getElevationRateResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setElevationRateResolution(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field ElevationRateResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasElevationRateResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearElevationRateResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getCosconeY_Resolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setCosconeY_Resolution(xs::Double value) override;

  /** Returns whether this optional field CosconeY_Resolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeY_Resolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearCosconeY_Resolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getCosconeZ_Resolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setCosconeZ_Resolution(xs::Double value) override;

  /** Returns whether this optional field CosconeZ_Resolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeZ_Resolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearCosconeZ_Resolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getCosconeY_RateResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setCosconeY_RateResolution(xs::Double value) override;

  /** Returns whether this optional field CosconeY_RateResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeY_RateResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearCosconeY_RateResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getCosconeZ_RateResolution() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& setCosconeZ_RateResolution(xs::Double value) override;

  /** Returns whether this optional field CosconeZ_RateResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeZ_RateResolution() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceResolutionType& clearCosconeZ_RateResolution() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SourceResolutionType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SourceResolutionType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SourceResolutionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<DistanceTypeValue> rangeResolution_Accessor;
  boost::optional<SpeedTypeValue> rangeRateResolution_Accessor;
  boost::optional<AnglePositiveTypeValue> azimuthResolution_Accessor;
  boost::optional<AnglePositiveTypeValue> elevationResolution_Accessor;
  boost::optional<AnglePositiveTypeValue> azimuthRateResolution_Accessor;
  boost::optional<AnglePositiveTypeValue> elevationRateResolution_Accessor;
  boost::optional<asb_xs::Double> cosconeY_Resolution_Accessor;
  boost::optional<asb_xs::Double> cosconeZ_Resolution_Accessor;
  boost::optional<asb_xs::Double> cosconeY_RateResolution_Accessor;
  boost::optional<asb_xs::Double> cosconeZ_RateResolution_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SOURCERESOLUTIONTYPE_H
