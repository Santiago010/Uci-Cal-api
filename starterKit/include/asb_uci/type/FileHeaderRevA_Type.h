/** @file FileHeaderRevA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_FILEHEADERREVA_TYPE_H
#define ASB_UCI_TYPE_FILEHEADERREVA_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/CharOrSpacePairsType.h"
#include "../../../include/asb_uci/type/NITF_ClassificationAuthorityType.h"
#include "../../../include/asb_uci/type/NITF_ClassificationReasonType.h"
#include "../../../include/asb_uci/type/NITF_CodewordsType.h"
#include "../../../include/asb_uci/type/NITF_ControlAndHandlingType.h"
#include "../../../include/asb_uci/type/NITF_DateType.h"
#include "../../../include/asb_uci/type/NITF_DeclassificationExemptionType.h"
#include "../../../include/asb_uci/type/NITF_DeclassificationType.h"
#include "../../../include/asb_uci/type/NITF_DowngradeType.h"
#include "../../../include/asb_uci/type/NITF_FileSecurityClassificationType.h"
#include "../../../include/asb_uci/type/NITF_ReleasingInstructionsType.h"
#include "../../../include/asb_uci/type/VisibleLatin1String15Type.h"
#include "../../../include/asb_uci/type/VisibleLatin1String18Type.h"
#include "../../../include/asb_uci/type/VisibleLatin1String24Type.h"
#include "../../../include/asb_uci/type/VisibleLatin1String40Type.h"
#include "../../../include/asb_uci/type/VisibleLatin1String43Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileHeaderRevA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class FileHeaderRevA_Type : public virtual uci::type::FileHeaderRevA_Type {
public:
  /** The constructor */
  FileHeaderRevA_Type();

  /** The copy constructor
    *
    * @param rhs The FileHeaderRevA_Type to copy from
    */
  FileHeaderRevA_Type(const FileHeaderRevA_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The FileHeaderRevA_Type to move from
    */
  FileHeaderRevA_Type(FileHeaderRevA_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The FileHeaderRevA_Type to copy from
    * @return The FileHeaderRevA_Type that was assigned
    */
  FileHeaderRevA_Type& operator=(const FileHeaderRevA_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The FileHeaderRevA_Type to move from
    * @return The FileHeaderRevA_Type that was assigned
    */
  FileHeaderRevA_Type& operator=(FileHeaderRevA_Type&& rhs) = delete;

  /** The destructor */
  virtual ~FileHeaderRevA_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::FileHeaderRevA_Type whose contents are to be used to set this
    *      uci::type::FileHeaderRevA_Type's contents.
    */
  void copy(const uci::type::FileHeaderRevA_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::FileHeaderRevA_Type whose contents are to be used to set this
    *      uci::type::FileHeaderRevA_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::FileHeaderRevA_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's FileSecurityClassification field
    *
    * @return The contents of the FileSecurityClassification field
    */
  const uci::type::NITF_FileSecurityClassificationType& getFileSecurityClassification() const noexcept override;

  /** Returns the contents of the message's FileSecurityClassification field
    *
    * @return The contents of the FileSecurityClassification field
    */
  uci::type::NITF_FileSecurityClassificationType& getFileSecurityClassification() noexcept override;

  /** Sets the contents of the message's FileSecurityClassification field
    *
    * @param value The new value to set the FileSecurityClassification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecurityClassification(const uci::type::NITF_FileSecurityClassificationType& value) override;

  /** Sets the contents of the message's FileSecurityClassification field
    *
    * @param value The new value to set the FileSecurityClassification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecurityClassification(const std::string& value) override;

  /** Sets the contents of the message's FileSecurityClassification field
    *
    * @param value The new value to set the FileSecurityClassification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecurityClassification(const char* value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::CharOrSpacePairsType& getFileClassificationSystem_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::CharOrSpacePairsType& getFileClassificationSystem() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::CharOrSpacePairsType& getFileClassificationSystem() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationSystem(const uci::type::CharOrSpacePairsType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationSystem(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationSystem(const char* value) override;

  /** Returns whether this optional field fileClassificationSystem_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileClassificationSystem() const noexcept override;

  /** Enables the optional field such that getFileClassificationSystem will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::CharOrSpacePairsType& enableFileClassificationSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileClassificationSystem() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_CodewordsType& getFileCodewords_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_CodewordsType& getFileCodewords() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_CodewordsType& getFileCodewords() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileCodewords(const uci::type::NITF_CodewordsType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileCodewords(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileCodewords(const char* value) override;

  /** Returns whether this optional field fileCodewords_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileCodewords() const noexcept override;

  /** Enables the optional field such that getFileCodewords will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_CodewordsType& enableFileCodewords(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileCodewords() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ControlAndHandlingType& getFileControlAndHandling_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ControlAndHandlingType& getFileControlAndHandling() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ControlAndHandlingType& getFileControlAndHandling() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileControlAndHandling(const uci::type::NITF_ControlAndHandlingType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileControlAndHandling(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileControlAndHandling(const char* value) override;

  /** Returns whether this optional field fileControlAndHandling_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileControlAndHandling() const noexcept override;

  /** Enables the optional field such that getFileControlAndHandling will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ControlAndHandlingType& enableFileControlAndHandling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileControlAndHandling() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ReleasingInstructionsType& getFileReleasingInstructions_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ReleasingInstructionsType& getFileReleasingInstructions() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ReleasingInstructionsType& getFileReleasingInstructions() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileReleasingInstructions(const uci::type::NITF_ReleasingInstructionsType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileReleasingInstructions(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileReleasingInstructions(const char* value) override;

  /** Returns whether this optional field fileReleasingInstructions_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileReleasingInstructions() const noexcept override;

  /** Enables the optional field such that getFileReleasingInstructions will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ReleasingInstructionsType& enableFileReleasingInstructions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileReleasingInstructions() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationType& getFileDeclassificationType_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DeclassificationType& getFileDeclassificationType() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationType& getFileDeclassificationType() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationType(const uci::type::NITF_DeclassificationType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationType(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationType(const char* value) override;

  /** Returns whether this optional field fileDeclassificationType_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileDeclassificationType() const noexcept override;

  /** Enables the optional field such that getFileDeclassificationType will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationType& enableFileDeclassificationType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileDeclassificationType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getFileDeclassificationDate_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DateType& getFileDeclassificationDate() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getFileDeclassificationDate() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationDate(const uci::type::NITF_DateType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationDate(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationDate(const char* value) override;

  /** Returns whether this optional field fileDeclassificationDate_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileDeclassificationDate() const noexcept override;

  /** Enables the optional field such that getFileDeclassificationDate will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& enableFileDeclassificationDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileDeclassificationDate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationExemptionType& getFileDeclassificationExemption_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DeclassificationExemptionType& getFileDeclassificationExemption() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationExemptionType& getFileDeclassificationExemption() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationExemption(const uci::type::NITF_DeclassificationExemptionType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationExemption(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDeclassificationExemption(const char* value) override;

  /** Returns whether this optional field fileDeclassificationExemption_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileDeclassificationExemption() const noexcept override;

  /** Enables the optional field such that getFileDeclassificationExemption will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DeclassificationExemptionType& enableFileDeclassificationExemption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileDeclassificationExemption() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DowngradeType& getFileDowngrade_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DowngradeType& getFileDowngrade() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DowngradeType& getFileDowngrade() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDowngrade(const uci::type::NITF_DowngradeType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDowngrade(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDowngrade(const char* value) override;

  /** Returns whether this optional field fileDowngrade_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileDowngrade() const noexcept override;

  /** Enables the optional field such that getFileDowngrade will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DowngradeType& enableFileDowngrade(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileDowngrade() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getFileDowngradeDate_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DateType& getFileDowngradeDate() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getFileDowngradeDate() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDowngradeDate(const uci::type::NITF_DateType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDowngradeDate(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileDowngradeDate(const char* value) override;

  /** Returns whether this optional field fileDowngradeDate_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileDowngradeDate() const noexcept override;

  /** Enables the optional field such that getFileDowngradeDate will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& enableFileDowngradeDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileDowngradeDate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String43Type& getFileClassificationText_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String43Type& getFileClassificationText() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String43Type& getFileClassificationText() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationText(const uci::type::VisibleLatin1String43Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationText(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationText(const char* value) override;

  /** Returns whether this optional field fileClassificationText_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileClassificationText() const noexcept override;

  /** Enables the optional field such that getFileClassificationText will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String43Type& enableFileClassificationText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileClassificationText() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationAuthorityType& getFileClassificationAuthorityType_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ClassificationAuthorityType& getFileClassificationAuthorityType() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationAuthorityType& getFileClassificationAuthorityType() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationAuthorityType(const uci::type::NITF_ClassificationAuthorityType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationAuthorityType(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationAuthorityType(const char* value) override;

  /** Returns whether this optional field fileClassificationAuthorityType_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileClassificationAuthorityType() const noexcept override;

  /** Enables the optional field such that getFileClassificationAuthorityType will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationAuthorityType& enableFileClassificationAuthorityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileClassificationAuthorityType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String40Type& getFileClassificationAuthority_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String40Type& getFileClassificationAuthority() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String40Type& getFileClassificationAuthority() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationAuthority(const uci::type::VisibleLatin1String40Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationAuthority(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationAuthority(const char* value) override;

  /** Returns whether this optional field fileClassificationAuthority_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileClassificationAuthority() const noexcept override;

  /** Enables the optional field such that getFileClassificationAuthority will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String40Type& enableFileClassificationAuthority(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileClassificationAuthority() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationReasonType& getFileClassificationReason_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_ClassificationReasonType& getFileClassificationReason() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationReasonType& getFileClassificationReason() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationReason(const uci::type::NITF_ClassificationReasonType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationReason(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileClassificationReason(const char* value) override;

  /** Returns whether this optional field fileClassificationReason_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileClassificationReason() const noexcept override;

  /** Enables the optional field such that getFileClassificationReason will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_ClassificationReasonType& enableFileClassificationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileClassificationReason() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getFileSecuritySourceDate_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NITF_DateType& getFileSecuritySourceDate() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& getFileSecuritySourceDate() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecuritySourceDate(const uci::type::NITF_DateType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecuritySourceDate(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecuritySourceDate(const char* value) override;

  /** Returns whether this optional field fileSecuritySourceDate_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileSecuritySourceDate() const noexcept override;

  /** Enables the optional field such that getFileSecuritySourceDate will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NITF_DateType& enableFileSecuritySourceDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileSecuritySourceDate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String15Type& getFileSecurityControlNumber_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String15Type& getFileSecurityControlNumber() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String15Type& getFileSecurityControlNumber() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecurityControlNumber(const uci::type::VisibleLatin1String15Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecurityControlNumber(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setFileSecurityControlNumber(const char* value) override;

  /** Returns whether this optional field fileSecurityControlNumber_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFileSecurityControlNumber() const noexcept override;

  /** Enables the optional field such that getFileSecurityControlNumber will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String15Type& enableFileSecurityControlNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearFileSecurityControlNumber() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String24Type& getOriginatorsName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String24Type& getOriginatorsName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String24Type& getOriginatorsName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setOriginatorsName(const uci::type::VisibleLatin1String24Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setOriginatorsName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setOriginatorsName(const char* value) override;

  /** Returns whether this optional field originatorsName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOriginatorsName() const noexcept override;

  /** Enables the optional field such that getOriginatorsName will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String24Type& enableOriginatorsName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearOriginatorsName() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String18Type& getOriginatorsPhone_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleLatin1String18Type& getOriginatorsPhone() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String18Type& getOriginatorsPhone() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setOriginatorsPhone(const uci::type::VisibleLatin1String18Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setOriginatorsPhone(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& setOriginatorsPhone(const char* value) override;

  /** Returns whether this optional field originatorsPhone_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOriginatorsPhone() const noexcept override;

  /** Enables the optional field such that getOriginatorsPhone will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleLatin1String18Type& enableOriginatorsPhone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::FileHeaderRevA_Type& clearOriginatorsPhone() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<FileHeaderRevA_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::FileHeaderRevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::FileHeaderRevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<NITF_FileSecurityClassificationType> fileSecurityClassification_Accessor;
  std::unique_ptr<CharOrSpacePairsType> fileClassificationSystem_Accessor;
  std::unique_ptr<NITF_CodewordsType> fileCodewords_Accessor;
  std::unique_ptr<NITF_ControlAndHandlingType> fileControlAndHandling_Accessor;
  std::unique_ptr<NITF_ReleasingInstructionsType> fileReleasingInstructions_Accessor;
  std::unique_ptr<NITF_DeclassificationType> fileDeclassificationType_Accessor;
  std::unique_ptr<NITF_DateType> fileDeclassificationDate_Accessor;
  std::unique_ptr<NITF_DeclassificationExemptionType> fileDeclassificationExemption_Accessor;
  std::unique_ptr<NITF_DowngradeType> fileDowngrade_Accessor;
  std::unique_ptr<NITF_DateType> fileDowngradeDate_Accessor;
  std::unique_ptr<VisibleLatin1String43Type> fileClassificationText_Accessor;
  std::unique_ptr<NITF_ClassificationAuthorityType> fileClassificationAuthorityType_Accessor;
  std::unique_ptr<VisibleLatin1String40Type> fileClassificationAuthority_Accessor;
  std::unique_ptr<NITF_ClassificationReasonType> fileClassificationReason_Accessor;
  std::unique_ptr<NITF_DateType> fileSecuritySourceDate_Accessor;
  std::unique_ptr<VisibleLatin1String15Type> fileSecurityControlNumber_Accessor;
  std::unique_ptr<VisibleLatin1String24Type> originatorsName_Accessor;
  std::unique_ptr<VisibleLatin1String18Type> originatorsPhone_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_FILEHEADERREVA_TYPE_H
