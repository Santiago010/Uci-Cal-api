/** @file WeatherAreaDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_WEATHERAREADATATYPE_H
#define ASB_UCI_TYPE_WEATHERAREADATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DistanceType.h"
#include "../../../include/asb_uci/type/PercentType.h"
#include "../../../include/asb_uci/type/PrecipitationAmountType.h"
#include "../../../include/asb_uci/type/TemperatureType.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_uci/type/WeatherDescriptionEnum.h"
#include "../../../include/asb_uci/type/WeatherKindEnum.h"
#include "../../../include/asb_uci/type/WeatherPrecipitationAmplificationEnum.h"
#include "../../../include/asb_uci/type/WeatherPrecipitationEnum.h"
#include "../../../include/asb_uci/type/WeatherSeverityEnum.h"
#include "../../../include/asb_uci/type/WeatherSourceEnum.h"
#include "../../../include/asb_uci/type/WeatherVisibilityEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherAreaDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CloudsType;
class WeatherEffectsType;
class WindDataType;

/** See annotations in child elements and messages/elements that use this type for details. */
class WeatherAreaDataType : public virtual uci::type::WeatherAreaDataType {
public:
  /** Indicates existence and characteristics of clouds. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using Clouds = asb_uci::base::BoundedList<uci::type::CloudsType, uci::type::accessorType::cloudsType, asb_uci::type::CloudsType>;

  /** The constructor */
  WeatherAreaDataType();

  /** The copy constructor
    *
    * @param rhs The WeatherAreaDataType to copy from
    */
  WeatherAreaDataType(const WeatherAreaDataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The WeatherAreaDataType to move from
    */
  WeatherAreaDataType(WeatherAreaDataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The WeatherAreaDataType to copy from
    * @return The WeatherAreaDataType that was assigned
    */
  WeatherAreaDataType& operator=(const WeatherAreaDataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The WeatherAreaDataType to move from
    * @return The WeatherAreaDataType that was assigned
    */
  WeatherAreaDataType& operator=(WeatherAreaDataType&& rhs) = delete;

  /** The destructor */
  virtual ~WeatherAreaDataType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::WeatherAreaDataType whose contents are to be used to set this
    *      uci::type::WeatherAreaDataType's contents.
    */
  void copy(const uci::type::WeatherAreaDataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::WeatherAreaDataType whose contents are to be used to set this
    *      uci::type::WeatherAreaDataType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::WeatherAreaDataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's Source field
    *
    * @return The contents of the Source field
    */
  const uci::type::WeatherSourceEnum& getSource() const override;

  /** Returns the contents of the message's Source field
    *
    * @return The contents of the Source field
    */
  uci::type::WeatherSourceEnum& getSource() override;

  /** Sets the contents of the message's Source field
    *
    * @param accessor The accessor to use to set the Source field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setSource(const uci::type::WeatherSourceEnum& accessor) override;

  /** Sets the contents of the message's Source field
    *
    * @param value The new value to set the Source field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setSource(uci::type::WeatherSourceEnum::EnumerationItem value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getStationCode_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString32Type& getStationCode() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getStationCode() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setStationCode(const uci::type::VisibleString32Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setStationCode(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setStationCode(const char* value) override;

  /** Returns whether this optional field stationCode_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStationCode() const noexcept override;

  /** Enables the optional field such that getStationCode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& enableStationCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearStationCode() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TemperatureTypeValue getTemperature() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setTemperature(uci::type::TemperatureTypeValue value) override;

  /** Returns whether this optional field Temperatureis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTemperature() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearTemperature() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPrecipitationPotential() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setPrecipitationPotential(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PrecipitationPotentialis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPrecipitationPotential() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearPrecipitationPotential() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PrecipitationAmountTypeValue getPrecipitationAmount() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setPrecipitationAmount(uci::type::PrecipitationAmountTypeValue value) override;

  /** Returns whether this optional field PrecipitationAmountis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPrecipitationAmount() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearPrecipitationAmount() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherPrecipitationEnum& getTypeOfPrecipitation_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherPrecipitationEnum& getTypeOfPrecipitation() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherPrecipitationEnum& getTypeOfPrecipitation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setTypeOfPrecipitation(const uci::type::WeatherPrecipitationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setTypeOfPrecipitation(uci::type::WeatherPrecipitationEnum::EnumerationItem value) override;

  /** Returns whether this optional field TypeOfPrecipitationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTypeOfPrecipitation() const noexcept override;

  /** Enables the optional field such that getTypeOfPrecipitation will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherPrecipitationEnum& enableTypeOfPrecipitation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearTypeOfPrecipitation() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherPrecipitationAmplificationEnum& getPrecipitationAmplification_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherPrecipitationAmplificationEnum& getPrecipitationAmplification() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherPrecipitationAmplificationEnum& getPrecipitationAmplification() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setPrecipitationAmplification(const uci::type::WeatherPrecipitationAmplificationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setPrecipitationAmplification(uci::type::WeatherPrecipitationAmplificationEnum::EnumerationItem value) override;

  /** Returns whether this optional field PrecipitationAmplificationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPrecipitationAmplification() const noexcept override;

  /** Enables the optional field such that getPrecipitationAmplification will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherPrecipitationAmplificationEnum& enablePrecipitationAmplification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearPrecipitationAmplification() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getVisibility() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setVisibility(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field Visibilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVisibility() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearVisibility() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherVisibilityEnum& getVisibilityStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherVisibilityEnum& getVisibilityStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherVisibilityEnum& getVisibilityStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setVisibilityStatus(const uci::type::WeatherVisibilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setVisibilityStatus(uci::type::WeatherVisibilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field VisibilityStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVisibilityStatus() const noexcept override;

  /** Enables the optional field such that getVisibilityStatus will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherVisibilityEnum& enableVisibilityStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearVisibilityStatus() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::TemperatureTypeValue getDewPoint() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setDewPoint(uci::type::TemperatureTypeValue value) override;

  /** Returns whether this optional field DewPointis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDewPoint() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearDewPoint() noexcept override;

  /** Returns the accessor to the Clouds field contained in this message fragment
    *
    * @return The const reference to the accessor to the Clouds field.
    */
  const uci::type::WeatherAreaDataType::Clouds& getClouds() const override;

  /** Returns the accessor to the Clouds field contained in this message fragment
    *
    * @return The reference to the accessor to the Clouds field.
    */
  uci::type::WeatherAreaDataType::Clouds& getClouds() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setClouds(const uci::type::WeatherAreaDataType::Clouds& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherEffectsType& getWeatherEffects_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherEffectsType& getWeatherEffects() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherEffectsType& getWeatherEffects() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setWeatherEffects(const uci::type::WeatherEffectsType& accessor) override;

  /** Returns whether this optional field WeatherEffectsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWeatherEffects() const noexcept override;

  /** Enables the optional field such that getWeatherEffects will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherEffectsType& enableWeatherEffects(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearWeatherEffects() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Float getBarometricPressure() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setBarometricPressure(xs::Float value) override;

  /** Returns whether this optional field BarometricPressureis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBarometricPressure() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearBarometricPressure() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Float getKollsmanSetting() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setKollsmanSetting(xs::Float value) override;

  /** Returns whether this optional field KollsmanSettingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasKollsmanSetting() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearKollsmanSetting() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& getIcing_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherSeverityEnum& getIcing() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& getIcing() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setIcing(const uci::type::WeatherSeverityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setIcing(uci::type::WeatherSeverityEnum::EnumerationItem value) override;

  /** Returns whether this optional field Icingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIcing() const noexcept override;

  /** Enables the optional field such that getIcing will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& enableIcing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearIcing() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& getTurbulence_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherSeverityEnum& getTurbulence() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& getTurbulence() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setTurbulence(const uci::type::WeatherSeverityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setTurbulence(uci::type::WeatherSeverityEnum::EnumerationItem value) override;

  /** Returns whether this optional field Turbulenceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTurbulence() const noexcept override;

  /** Enables the optional field such that getTurbulence will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& enableTurbulence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearTurbulence() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getThunderstormPotential() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setThunderstormPotential(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field ThunderstormPotentialis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasThunderstormPotential() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearThunderstormPotential() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getRemarks_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString1024Type& getRemarks() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getRemarks() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setRemarks(const uci::type::VisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setRemarks(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setRemarks(const char* value) override;

  /** Returns whether this optional field remarks_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemarks() const noexcept override;

  /** Enables the optional field such that getRemarks will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& enableRemarks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearRemarks() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherKindEnum& getKind_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherKindEnum& getKind() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherKindEnum& getKind() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setKind(const uci::type::WeatherKindEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setKind(uci::type::WeatherKindEnum::EnumerationItem value) override;

  /** Returns whether this optional field Kindis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasKind() const noexcept override;

  /** Enables the optional field such that getKind will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherKindEnum& enableKind(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearKind() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherDescriptionEnum& getDescription_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherDescriptionEnum& getDescription() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherDescriptionEnum& getDescription() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setDescription(const uci::type::WeatherDescriptionEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setDescription(uci::type::WeatherDescriptionEnum::EnumerationItem value) override;

  /** Returns whether this optional field Descriptionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDescription() const noexcept override;

  /** Enables the optional field such that getDescription will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherDescriptionEnum& enableDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearDescription() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& getQualifier_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherSeverityEnum& getQualifier() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& getQualifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setQualifier(const uci::type::WeatherSeverityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setQualifier(uci::type::WeatherSeverityEnum::EnumerationItem value) override;

  /** Returns whether this optional field Qualifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasQualifier() const noexcept override;

  /** Enables the optional field such that getQualifier will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeverityEnum& enableQualifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearQualifier() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WindDataType& getWindData_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WindDataType& getWindData() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WindDataType& getWindData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setWindData(const uci::type::WindDataType& accessor) override;

  /** Returns whether this optional field WindDatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWindData() const noexcept override;

  /** Enables the optional field such that getWindData will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WindDataType& enableWindData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearWindData() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getRelativeHumidity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& setRelativeHumidity(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field RelativeHumidityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRelativeHumidity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherAreaDataType& clearRelativeHumidity() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<WeatherAreaDataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherAreaDataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::WeatherAreaDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<WeatherSourceEnum> source_Accessor;
  std::unique_ptr<VisibleString32Type> stationCode_Accessor;
  boost::optional<TemperatureTypeValue> temperature_Accessor;
  boost::optional<PercentTypeValue> precipitationPotential_Accessor;
  boost::optional<PrecipitationAmountTypeValue> precipitationAmount_Accessor;
  std::unique_ptr<WeatherPrecipitationEnum> typeOfPrecipitation_Accessor;
  std::unique_ptr<WeatherPrecipitationAmplificationEnum> precipitationAmplification_Accessor;
  boost::optional<DistanceTypeValue> visibility_Accessor;
  std::unique_ptr<WeatherVisibilityEnum> visibilityStatus_Accessor;
  boost::optional<TemperatureTypeValue> dewPoint_Accessor;
  std::unique_ptr<Clouds> clouds_Accessor;
  std::unique_ptr<WeatherEffectsType> weatherEffects_Accessor;
  boost::optional<asb_xs::Float> barometricPressure_Accessor;
  boost::optional<asb_xs::Float> kollsmanSetting_Accessor;
  std::unique_ptr<WeatherSeverityEnum> icing_Accessor;
  std::unique_ptr<WeatherSeverityEnum> turbulence_Accessor;
  boost::optional<PercentTypeValue> thunderstormPotential_Accessor;
  std::unique_ptr<VisibleString1024Type> remarks_Accessor;
  std::unique_ptr<WeatherKindEnum> kind_Accessor;
  std::unique_ptr<WeatherDescriptionEnum> description_Accessor;
  std::unique_ptr<WeatherSeverityEnum> qualifier_Accessor;
  std::unique_ptr<WindDataType> windData_Accessor;
  boost::optional<PercentTypeValue> relativeHumidity_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_WEATHERAREADATATYPE_H
