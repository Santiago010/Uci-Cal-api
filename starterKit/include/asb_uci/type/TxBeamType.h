/** @file TxBeamType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_TXBEAMTYPE_H
#define ASB_UCI_TYPE_TXBEAMTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/AnglePositiveType.h"
#include "../../../include/asb_uci/type/EA_PointingEnum.h"
#include "../../../include/asb_uci/type/MilliwattPowerRatioType.h"
#include "../../../include/asb_uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TxBeamType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class BeamID_Type;
class BeamPointingReferenceType;
class DateTimeRangeBeginType;
class EA_EmissionType;
class Point3D_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class TxBeamType : public virtual uci::type::TxBeamType {
public:
  /** Indicates a jamming emission of the Beam. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using Emission = asb_uci::base::BoundedList<uci::type::EA_EmissionType, uci::type::accessorType::eA_EmissionType, asb_uci::type::EA_EmissionType>;

  /** The constructor */
  TxBeamType();

  /** The copy constructor
    *
    * @param rhs The TxBeamType to copy from
    */
  TxBeamType(const TxBeamType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The TxBeamType to move from
    */
  TxBeamType(TxBeamType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The TxBeamType to copy from
    * @return The TxBeamType that was assigned
    */
  TxBeamType& operator=(const TxBeamType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The TxBeamType to move from
    * @return The TxBeamType that was assigned
    */
  TxBeamType& operator=(TxBeamType&& rhs) = delete;

  /** The destructor */
  virtual ~TxBeamType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::TxBeamType whose contents are to be used to set this uci::type::TxBeamType's contents.
    */
  void copy(const uci::type::TxBeamType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::TxBeamType whose contents are to be used to set this uci::type::TxBeamType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::TxBeamType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the BeamID field contained in this message fragment
    *
    * @return The const reference to the accessor to the BeamID field.
    */
  const uci::type::BeamID_Type& getBeamID() const override;

  /** Returns the accessor to the BeamID field contained in this message fragment
    *
    * @return The reference to the accessor to the BeamID field.
    */
  uci::type::BeamID_Type& getBeamID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setBeamID(const uci::type::BeamID_Type& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getDutyCycle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setDutyCycle(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field DutyCycleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDutyCycle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& clearDutyCycle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getEffectiveRadiatedPower() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setEffectiveRadiatedPower(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field EffectiveRadiatedPoweris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEffectiveRadiatedPower() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& clearEffectiveRadiatedPower() noexcept override;

  /** Returns the contents of the message's AzimuthWidth field
    *
    * @return The contents of the AzimuthWidth field
    */
  uci::type::AnglePositiveTypeValue getAzimuthWidth() const override;

  /** Sets the contents of the message's AzimuthWidth field
    *
    * @param value The new value to set the AzimuthWidth field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setAzimuthWidth(uci::type::AnglePositiveTypeValue value) override;

  /** Returns the contents of the message's ElevationWidth field
    *
    * @return The contents of the ElevationWidth field
    */
  uci::type::AnglePositiveTypeValue getElevationWidth() const override;

  /** Sets the contents of the message's ElevationWidth field
    *
    * @param value The new value to set the ElevationWidth field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setElevationWidth(uci::type::AnglePositiveTypeValue value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getStartPosition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point3D_Type& getStartPosition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getStartPosition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setStartPosition(const uci::type::Point3D_Type& accessor) override;

  /** Returns whether this optional field StartPositionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStartPosition() const noexcept override;

  /** Enables the optional field such that getStartPosition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& enableStartPosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& clearStartPosition() noexcept override;

  /** Returns the accessor to the Time field contained in this message fragment
    *
    * @return The const reference to the accessor to the Time field.
    */
  const uci::type::DateTimeRangeBeginType& getTime() const override;

  /** Returns the accessor to the Time field contained in this message fragment
    *
    * @return The reference to the accessor to the Time field.
    */
  uci::type::DateTimeRangeBeginType& getTime() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setTime(const uci::type::DateTimeRangeBeginType& accessor) override;

  /** Returns the contents of the message's TrackingMode field
    *
    * @return The contents of the TrackingMode field
    */
  const uci::type::EA_PointingEnum& getTrackingMode() const override;

  /** Returns the contents of the message's TrackingMode field
    *
    * @return The contents of the TrackingMode field
    */
  uci::type::EA_PointingEnum& getTrackingMode() override;

  /** Sets the contents of the message's TrackingMode field
    *
    * @param accessor The accessor to use to set the TrackingMode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setTrackingMode(const uci::type::EA_PointingEnum& accessor) override;

  /** Sets the contents of the message's TrackingMode field
    *
    * @param value The new value to set the TrackingMode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setTrackingMode(uci::type::EA_PointingEnum::EnumerationItem value) override;

  /** Returns the accessor to the Emission field contained in this message fragment
    *
    * @return The const reference to the accessor to the Emission field.
    */
  const uci::type::TxBeamType::Emission& getEmission() const override;

  /** Returns the accessor to the Emission field contained in this message fragment
    *
    * @return The reference to the accessor to the Emission field.
    */
  uci::type::TxBeamType::Emission& getEmission() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setEmission(const uci::type::TxBeamType::Emission& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BeamPointingReferenceType& getBeamPointingReference_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::BeamPointingReferenceType& getBeamPointingReference() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BeamPointingReferenceType& getBeamPointingReference() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& setBeamPointingReference(const uci::type::BeamPointingReferenceType& accessor) override;

  /** Returns whether this optional field BeamPointingReferenceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBeamPointingReference() const noexcept override;

  /** Enables the optional field such that getBeamPointingReference will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BeamPointingReferenceType& enableBeamPointingReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::TxBeamType& clearBeamPointingReference() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<TxBeamType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::TxBeamType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::TxBeamType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<BeamID_Type> beamID_Accessor;
  boost::optional<PercentTypeValue> dutyCycle_Accessor;
  boost::optional<MilliwattPowerRatioTypeValue> effectiveRadiatedPower_Accessor;
  AnglePositiveTypeValue azimuthWidth_Accessor{0.0};
  AnglePositiveTypeValue elevationWidth_Accessor{0.0};
  std::unique_ptr<Point3D_Type> startPosition_Accessor;
  std::unique_ptr<DateTimeRangeBeginType> time_Accessor;
  std::unique_ptr<EA_PointingEnum> trackingMode_Accessor;
  std::unique_ptr<Emission> emission_Accessor;
  std::unique_ptr<BeamPointingReferenceType> beamPointingReference_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_TXBEAMTYPE_H
