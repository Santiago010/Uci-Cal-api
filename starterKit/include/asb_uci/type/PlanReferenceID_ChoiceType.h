/** @file PlanReferenceID_ChoiceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANREFERENCEID_CHOICETYPE_H
#define ASB_UCI_TYPE_PLANREFERENCEID_CHOICETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "uci/base/Accessor.h"
#include "uci/type/PlanReferenceID_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActionPlanID_Type;
class ActivityPlanID_Type;
class CommScheduleAllocationID_Type;
class EffectPlanID_Type;
class MissionPlanID_Type;
class OrbitActivityPlanID_Type;
class OrbitPlanID_Type;
class ResponsePlanID_Type;
class RouteActivityPlanID_Type;
class RoutePlanID_Type;
class TaskPlanID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanReferenceID_ChoiceType : public virtual uci::type::PlanReferenceID_ChoiceType {
public:
  /** The constructor */
  PlanReferenceID_ChoiceType();

  /** The copy constructor
    *
    * @param rhs The PlanReferenceID_ChoiceType to copy from
    */
  PlanReferenceID_ChoiceType(const PlanReferenceID_ChoiceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlanReferenceID_ChoiceType to move from
    */
  PlanReferenceID_ChoiceType(PlanReferenceID_ChoiceType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The PlanReferenceID_ChoiceType to copy from
    * @return The PlanReferenceID_ChoiceType that was assigned
    */
  PlanReferenceID_ChoiceType& operator=(const PlanReferenceID_ChoiceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlanReferenceID_ChoiceType to move from
    * @return The PlanReferenceID_ChoiceType that was assigned
    */
  PlanReferenceID_ChoiceType& operator=(PlanReferenceID_ChoiceType&& rhs) = delete;

  /** The destructor */
  virtual ~PlanReferenceID_ChoiceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanReferenceID_ChoiceType whose contents are to be used to set this
    *      uci::type::PlanReferenceID_ChoiceType's contents.
    */
  void copy(const uci::type::PlanReferenceID_ChoiceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanReferenceID_ChoiceType whose contents are to be used to set this
    *      uci::type::PlanReferenceID_ChoiceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlanReferenceID_ChoiceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::PlanReferenceID_ChoiceType::PlanReferenceID_ChoiceTypeChoice getPlanReferenceID_ChoiceTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getPlanReferenceID_ChoiceTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setPlanReferenceID_ChoiceTypeChoiceOrdinal(uci::type::PlanReferenceID_ChoiceType::PlanReferenceID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the MissionPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissionPlanID field.
    */
  uci::type::MissionPlanID_Type& getMissionPlanID_() const;

  /** Returns the accessor to the MissionPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionPlanID field.
    */
  const uci::type::MissionPlanID_Type& getMissionPlanID() const override;

  /** Returns the accessor to the MissionPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionPlanID field.
    */
  uci::type::MissionPlanID_Type& getMissionPlanID() override;

  /** Sets this choice's choice to be missionPlanID and initializes missionPlanID to be the specified value. A deep copy
    * will be used by this method to set missionPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setMissionPlanID(const uci::type::MissionPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MissionPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MissionPlanID, false otherwise.
    */
  bool isMissionPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by MissionPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MissionPlanID.
    */
  uci::type::MissionPlanID_Type& chooseMissionPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by MissionPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MissionPlanID.
    */
  uci::type::MissionPlanID_Type& chooseMissionPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the TaskPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the TaskPlanID field.
    */
  uci::type::TaskPlanID_Type& getTaskPlanID_() const;

  /** Returns the accessor to the TaskPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskPlanID field.
    */
  const uci::type::TaskPlanID_Type& getTaskPlanID() const override;

  /** Returns the accessor to the TaskPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskPlanID field.
    */
  uci::type::TaskPlanID_Type& getTaskPlanID() override;

  /** Sets this choice's choice to be taskPlanID and initializes taskPlanID to be the specified value. A deep copy will be
    * used by this method to set taskPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setTaskPlanID(const uci::type::TaskPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TaskPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TaskPlanID, false otherwise.
    */
  bool isTaskPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by TaskPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TaskPlanID.
    */
  uci::type::TaskPlanID_Type& chooseTaskPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by TaskPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TaskPlanID.
    */
  uci::type::TaskPlanID_Type& chooseTaskPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OrbitPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitPlanID field.
    */
  uci::type::OrbitPlanID_Type& getOrbitPlanID_() const;

  /** Returns the accessor to the OrbitPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitPlanID field.
    */
  const uci::type::OrbitPlanID_Type& getOrbitPlanID() const override;

  /** Returns the accessor to the OrbitPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitPlanID field.
    */
  uci::type::OrbitPlanID_Type& getOrbitPlanID() override;

  /** Sets this choice's choice to be orbitPlanID and initializes orbitPlanID to be the specified value. A deep copy will
    * be used by this method to set orbitPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setOrbitPlanID(const uci::type::OrbitPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitPlanID, false otherwise.
    */
  bool isOrbitPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitPlanID.
    */
  uci::type::OrbitPlanID_Type& chooseOrbitPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitPlanID.
    */
  uci::type::OrbitPlanID_Type& chooseOrbitPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OrbitActivityPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitActivityPlanID field.
    */
  uci::type::OrbitActivityPlanID_Type& getOrbitActivityPlanID_() const;

  /** Returns the accessor to the OrbitActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitActivityPlanID field.
    */
  const uci::type::OrbitActivityPlanID_Type& getOrbitActivityPlanID() const override;

  /** Returns the accessor to the OrbitActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitActivityPlanID field.
    */
  uci::type::OrbitActivityPlanID_Type& getOrbitActivityPlanID() override;

  /** Sets this choice's choice to be orbitActivityPlanID and initializes orbitActivityPlanID to be the specified value. A
    * deep copy will be used by this method to set orbitActivityPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setOrbitActivityPlanID(const uci::type::OrbitActivityPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitActivityPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitActivityPlanID, false
    *      otherwise.
    */
  bool isOrbitActivityPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitActivityPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitActivityPlanID.
    */
  uci::type::OrbitActivityPlanID_Type& chooseOrbitActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitActivityPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitActivityPlanID.
    */
  uci::type::OrbitActivityPlanID_Type& chooseOrbitActivityPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RoutePlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RoutePlanID field.
    */
  uci::type::RoutePlanID_Type& getRoutePlanID_() const;

  /** Returns the accessor to the RoutePlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the RoutePlanID field.
    */
  const uci::type::RoutePlanID_Type& getRoutePlanID() const override;

  /** Returns the accessor to the RoutePlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the RoutePlanID field.
    */
  uci::type::RoutePlanID_Type& getRoutePlanID() override;

  /** Sets this choice's choice to be routePlanID and initializes routePlanID to be the specified value. A deep copy will
    * be used by this method to set routePlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setRoutePlanID(const uci::type::RoutePlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RoutePlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RoutePlanID, false otherwise.
    */
  bool isRoutePlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RoutePlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RoutePlanID.
    */
  uci::type::RoutePlanID_Type& chooseRoutePlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RoutePlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RoutePlanID.
    */
  uci::type::RoutePlanID_Type& chooseRoutePlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RouteActivityPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteActivityPlanID field.
    */
  uci::type::RouteActivityPlanID_Type& getRouteActivityPlanID_() const;

  /** Returns the accessor to the RouteActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteActivityPlanID field.
    */
  const uci::type::RouteActivityPlanID_Type& getRouteActivityPlanID() const override;

  /** Returns the accessor to the RouteActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteActivityPlanID field.
    */
  uci::type::RouteActivityPlanID_Type& getRouteActivityPlanID() override;

  /** Sets this choice's choice to be routeActivityPlanID and initializes routeActivityPlanID to be the specified value. A
    * deep copy will be used by this method to set routeActivityPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setRouteActivityPlanID(const uci::type::RouteActivityPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteActivityPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteActivityPlanID, false
    *      otherwise.
    */
  bool isRouteActivityPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteActivityPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteActivityPlanID.
    */
  uci::type::RouteActivityPlanID_Type& chooseRouteActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RouteActivityPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteActivityPlanID.
    */
  uci::type::RouteActivityPlanID_Type& chooseRouteActivityPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CommScheduleAllocationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommScheduleAllocationID field.
    */
  uci::type::CommScheduleAllocationID_Type& getCommScheduleAllocationID_() const;

  /** Returns the accessor to the CommScheduleAllocationID field contained in this message fragment
    *
    * @return The reference to the accessor to the CommScheduleAllocationID field.
    */
  const uci::type::CommScheduleAllocationID_Type& getCommScheduleAllocationID() const override;

  /** Returns the accessor to the CommScheduleAllocationID field contained in this message fragment
    *
    * @return The reference to the accessor to the CommScheduleAllocationID field.
    */
  uci::type::CommScheduleAllocationID_Type& getCommScheduleAllocationID() override;

  /** Sets this choice's choice to be commScheduleAllocationID and initializes commScheduleAllocationID to be the specified
    * value. A deep copy will be used by this method to set commScheduleAllocationID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setCommScheduleAllocationID(const uci::type::CommScheduleAllocationID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommScheduleAllocationID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommScheduleAllocationID, false
    *      otherwise.
    */
  bool isCommScheduleAllocationID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CommScheduleAllocationID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommScheduleAllocationID.
    */
  uci::type::CommScheduleAllocationID_Type& chooseCommScheduleAllocationID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CommScheduleAllocationID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommScheduleAllocationID.
    */
  uci::type::CommScheduleAllocationID_Type& chooseCommScheduleAllocationID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ActivityPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityPlanID field.
    */
  uci::type::ActivityPlanID_Type& getActivityPlanID_() const;

  /** Returns the accessor to the ActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityPlanID field.
    */
  const uci::type::ActivityPlanID_Type& getActivityPlanID() const override;

  /** Returns the accessor to the ActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityPlanID field.
    */
  uci::type::ActivityPlanID_Type& getActivityPlanID() override;

  /** Sets this choice's choice to be activityPlanID and initializes activityPlanID to be the specified value. A deep copy
    * will be used by this method to set activityPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setActivityPlanID(const uci::type::ActivityPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ActivityPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ActivityPlanID, false otherwise.
    */
  bool isActivityPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ActivityPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActivityPlanID.
    */
  uci::type::ActivityPlanID_Type& chooseActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ActivityPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActivityPlanID.
    */
  uci::type::ActivityPlanID_Type& chooseActivityPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EffectPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EffectPlanID field.
    */
  uci::type::EffectPlanID_Type& getEffectPlanID_() const;

  /** Returns the accessor to the EffectPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the EffectPlanID field.
    */
  const uci::type::EffectPlanID_Type& getEffectPlanID() const override;

  /** Returns the accessor to the EffectPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the EffectPlanID field.
    */
  uci::type::EffectPlanID_Type& getEffectPlanID() override;

  /** Sets this choice's choice to be effectPlanID and initializes effectPlanID to be the specified value. A deep copy will
    * be used by this method to set effectPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setEffectPlanID(const uci::type::EffectPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EffectPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EffectPlanID, false otherwise.
    */
  bool isEffectPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EffectPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EffectPlanID.
    */
  uci::type::EffectPlanID_Type& chooseEffectPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EffectPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EffectPlanID.
    */
  uci::type::EffectPlanID_Type& chooseEffectPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ActionPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActionPlanID field.
    */
  uci::type::ActionPlanID_Type& getActionPlanID_() const;

  /** Returns the accessor to the ActionPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActionPlanID field.
    */
  const uci::type::ActionPlanID_Type& getActionPlanID() const override;

  /** Returns the accessor to the ActionPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActionPlanID field.
    */
  uci::type::ActionPlanID_Type& getActionPlanID() override;

  /** Sets this choice's choice to be actionPlanID and initializes actionPlanID to be the specified value. A deep copy will
    * be used by this method to set actionPlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setActionPlanID(const uci::type::ActionPlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ActionPlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ActionPlanID, false otherwise.
    */
  bool isActionPlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ActionPlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActionPlanID.
    */
  uci::type::ActionPlanID_Type& chooseActionPlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ActionPlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActionPlanID.
    */
  uci::type::ActionPlanID_Type& chooseActionPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ResponsePlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResponsePlanID field.
    */
  uci::type::ResponsePlanID_Type& getResponsePlanID_() const;

  /** Returns the accessor to the ResponsePlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponsePlanID field.
    */
  const uci::type::ResponsePlanID_Type& getResponsePlanID() const override;

  /** Returns the accessor to the ResponsePlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponsePlanID field.
    */
  uci::type::ResponsePlanID_Type& getResponsePlanID() override;

  /** Sets this choice's choice to be responsePlanID and initializes responsePlanID to be the specified value. A deep copy
    * will be used by this method to set responsePlanID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanReferenceID_ChoiceType& setResponsePlanID(const uci::type::ResponsePlanID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ResponsePlanID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ResponsePlanID, false otherwise.
    */
  bool isResponsePlanID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ResponsePlanID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ResponsePlanID.
    */
  uci::type::ResponsePlanID_Type& chooseResponsePlanID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ResponsePlanID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ResponsePlanID.
    */
  uci::type::ResponsePlanID_Type& chooseResponsePlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlanReferenceID_ChoiceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanReferenceID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlanReferenceID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MissionPlanID_Type> missionPlanID_Accessor;
  std::unique_ptr<TaskPlanID_Type> taskPlanID_Accessor;
  std::unique_ptr<OrbitPlanID_Type> orbitPlanID_Accessor;
  std::unique_ptr<OrbitActivityPlanID_Type> orbitActivityPlanID_Accessor;
  std::unique_ptr<RoutePlanID_Type> routePlanID_Accessor;
  std::unique_ptr<RouteActivityPlanID_Type> routeActivityPlanID_Accessor;
  std::unique_ptr<CommScheduleAllocationID_Type> commScheduleAllocationID_Accessor;
  std::unique_ptr<ActivityPlanID_Type> activityPlanID_Accessor;
  std::unique_ptr<EffectPlanID_Type> effectPlanID_Accessor;
  std::unique_ptr<ActionPlanID_Type> actionPlanID_Accessor;
  std::unique_ptr<ResponsePlanID_Type> responsePlanID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANREFERENCEID_CHOICETYPE_H
