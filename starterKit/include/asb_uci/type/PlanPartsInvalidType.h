/** @file PlanPartsInvalidType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANPARTSINVALIDTYPE_H
#define ASB_UCI_TYPE_PLANPARTSINVALIDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "uci/type/PlanPartsInvalidType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActionPlanInvalidType;
class ActivityPlanInvalidType;
class EffectPlanInvalidType;
class OrbitActivityPlanInvalidType;
class OrbitPlanInvalidType;
class ResponsePlanInvalidType;
class RouteActivityPlanInvalidType;
class RoutePlanInvalidType;
class TaskPlanInvalidType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanPartsInvalidType : public virtual uci::type::PlanPartsInvalidType {
public:
  /** Indicates a TaskPlan or Plans which have been found to be invalid, along with the accompanying details. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using TaskPlan = asb_uci::base::BoundedList<uci::type::TaskPlanInvalidType, uci::type::accessorType::taskPlanInvalidType, asb_uci::type::TaskPlanInvalidType>;

  /** Indicates a RoutePlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using RoutePlan = asb_uci::base::BoundedList<uci::type::RoutePlanInvalidType, uci::type::accessorType::routePlanInvalidType, asb_uci::type::RoutePlanInvalidType>;

  /** Indicates an OrbitPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OrbitPlan = asb_uci::base::BoundedList<uci::type::OrbitPlanInvalidType, uci::type::accessorType::orbitPlanInvalidType, asb_uci::type::OrbitPlanInvalidType>;

  /** Indicates a RouteActivityPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using RouteActivityPlan = asb_uci::base::BoundedList<uci::type::RouteActivityPlanInvalidType, uci::type::accessorType::routeActivityPlanInvalidType, asb_uci::type::RouteActivityPlanInvalidType>;

  /** Indicates an OrbitActivityPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OrbitActivityPlan = asb_uci::base::BoundedList<uci::type::OrbitActivityPlanInvalidType, uci::type::accessorType::orbitActivityPlanInvalidType, asb_uci::type::OrbitActivityPlanInvalidType>;

  /** Indicates an ActivityPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActivityPlan = asb_uci::base::BoundedList<uci::type::ActivityPlanInvalidType, uci::type::accessorType::activityPlanInvalidType, asb_uci::type::ActivityPlanInvalidType>;

  /** Indicates an EffectPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using EffectPlan = asb_uci::base::BoundedList<uci::type::EffectPlanInvalidType, uci::type::accessorType::effectPlanInvalidType, asb_uci::type::EffectPlanInvalidType>;

  /** Indicates an ActionPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActionPlan = asb_uci::base::BoundedList<uci::type::ActionPlanInvalidType, uci::type::accessorType::actionPlanInvalidType, asb_uci::type::ActionPlanInvalidType>;

  /** Indicates a ResponsePlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ResponsePlan = asb_uci::base::BoundedList<uci::type::ResponsePlanInvalidType, uci::type::accessorType::responsePlanInvalidType, asb_uci::type::ResponsePlanInvalidType>;

  /** The constructor */
  PlanPartsInvalidType();

  /** The copy constructor
    *
    * @param rhs The PlanPartsInvalidType to copy from
    */
  PlanPartsInvalidType(const PlanPartsInvalidType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlanPartsInvalidType to move from
    */
  PlanPartsInvalidType(PlanPartsInvalidType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlanPartsInvalidType to copy from
    * @return The PlanPartsInvalidType that was assigned
    */
  PlanPartsInvalidType& operator=(const PlanPartsInvalidType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlanPartsInvalidType to move from
    * @return The PlanPartsInvalidType that was assigned
    */
  PlanPartsInvalidType& operator=(PlanPartsInvalidType&& rhs) = delete;

  /** The destructor */
  virtual ~PlanPartsInvalidType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanPartsInvalidType whose contents are to be used to set this
    *      uci::type::PlanPartsInvalidType's contents.
    */
  void copy(const uci::type::PlanPartsInvalidType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanPartsInvalidType whose contents are to be used to set this
    *      uci::type::PlanPartsInvalidType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlanPartsInvalidType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the TaskPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the TaskPlan field.
    */
  const uci::type::PlanPartsInvalidType::TaskPlan& getTaskPlan() const override;

  /** Returns the accessor to the TaskPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskPlan field.
    */
  uci::type::PlanPartsInvalidType::TaskPlan& getTaskPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setTaskPlan(const uci::type::PlanPartsInvalidType::TaskPlan& accessor) override;

  /** Returns the accessor to the RoutePlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the RoutePlan field.
    */
  const uci::type::PlanPartsInvalidType::RoutePlan& getRoutePlan() const override;

  /** Returns the accessor to the RoutePlan field contained in this message fragment
    *
    * @return The reference to the accessor to the RoutePlan field.
    */
  uci::type::PlanPartsInvalidType::RoutePlan& getRoutePlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setRoutePlan(const uci::type::PlanPartsInvalidType::RoutePlan& accessor) override;

  /** Returns the accessor to the OrbitPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitPlan field.
    */
  const uci::type::PlanPartsInvalidType::OrbitPlan& getOrbitPlan() const override;

  /** Returns the accessor to the OrbitPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitPlan field.
    */
  uci::type::PlanPartsInvalidType::OrbitPlan& getOrbitPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setOrbitPlan(const uci::type::PlanPartsInvalidType::OrbitPlan& accessor) override;

  /** Returns the accessor to the RouteActivityPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteActivityPlan field.
    */
  const uci::type::PlanPartsInvalidType::RouteActivityPlan& getRouteActivityPlan() const override;

  /** Returns the accessor to the RouteActivityPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteActivityPlan field.
    */
  uci::type::PlanPartsInvalidType::RouteActivityPlan& getRouteActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setRouteActivityPlan(const uci::type::PlanPartsInvalidType::RouteActivityPlan& accessor) override;

  /** Returns the accessor to the OrbitActivityPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitActivityPlan field.
    */
  const uci::type::PlanPartsInvalidType::OrbitActivityPlan& getOrbitActivityPlan() const override;

  /** Returns the accessor to the OrbitActivityPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitActivityPlan field.
    */
  uci::type::PlanPartsInvalidType::OrbitActivityPlan& getOrbitActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setOrbitActivityPlan(const uci::type::PlanPartsInvalidType::OrbitActivityPlan& accessor) override;

  /** Returns the accessor to the ActivityPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityPlan field.
    */
  const uci::type::PlanPartsInvalidType::ActivityPlan& getActivityPlan() const override;

  /** Returns the accessor to the ActivityPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityPlan field.
    */
  uci::type::PlanPartsInvalidType::ActivityPlan& getActivityPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setActivityPlan(const uci::type::PlanPartsInvalidType::ActivityPlan& accessor) override;

  /** Returns the accessor to the EffectPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the EffectPlan field.
    */
  const uci::type::PlanPartsInvalidType::EffectPlan& getEffectPlan() const override;

  /** Returns the accessor to the EffectPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the EffectPlan field.
    */
  uci::type::PlanPartsInvalidType::EffectPlan& getEffectPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setEffectPlan(const uci::type::PlanPartsInvalidType::EffectPlan& accessor) override;

  /** Returns the accessor to the ActionPlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActionPlan field.
    */
  const uci::type::PlanPartsInvalidType::ActionPlan& getActionPlan() const override;

  /** Returns the accessor to the ActionPlan field contained in this message fragment
    *
    * @return The reference to the accessor to the ActionPlan field.
    */
  uci::type::PlanPartsInvalidType::ActionPlan& getActionPlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setActionPlan(const uci::type::PlanPartsInvalidType::ActionPlan& accessor) override;

  /** Returns the accessor to the ResponsePlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResponsePlan field.
    */
  const uci::type::PlanPartsInvalidType::ResponsePlan& getResponsePlan() const override;

  /** Returns the accessor to the ResponsePlan field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponsePlan field.
    */
  uci::type::PlanPartsInvalidType::ResponsePlan& getResponsePlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanPartsInvalidType& setResponsePlan(const uci::type::PlanPartsInvalidType::ResponsePlan& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlanPartsInvalidType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanPartsInvalidType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlanPartsInvalidType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<TaskPlan> taskPlan_Accessor;
  std::unique_ptr<RoutePlan> routePlan_Accessor;
  std::unique_ptr<OrbitPlan> orbitPlan_Accessor;
  std::unique_ptr<RouteActivityPlan> routeActivityPlan_Accessor;
  std::unique_ptr<OrbitActivityPlan> orbitActivityPlan_Accessor;
  std::unique_ptr<ActivityPlan> activityPlan_Accessor;
  std::unique_ptr<EffectPlan> effectPlan_Accessor;
  std::unique_ptr<ActionPlan> actionPlan_Accessor;
  std::unique_ptr<ResponsePlan> responsePlan_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANPARTSINVALIDTYPE_H
