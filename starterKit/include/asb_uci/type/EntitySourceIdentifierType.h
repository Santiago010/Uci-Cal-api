/** @file EntitySourceIdentifierType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ENTITYSOURCEIDENTIFIERTYPE_H
#define ASB_UCI_TYPE_ENTITYSOURCEIDENTIFIERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "uci/base/Accessor.h"
#include "uci/type/EntitySourceIdentifierType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_RecordID_Type;
class EntityCapabilitySourceType;
class EntityExternalType;
class EntityFusionSourceType;
class ID_Type;
class OperatorID_Type;
class ProductMetadataID_Type;
class SOB_C2_RecordID_Type;
class SOB_SatelliteRecordID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class EntitySourceIdentifierType : public virtual uci::type::EntitySourceIdentifierType {
public:
  /** Indicates the Entity is an output of a fusion service and provides references to a fusion input Entity that
    * fused/contributed to it. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using Fusion = asb_uci::base::BoundedList<uci::type::EntityFusionSourceType, uci::type::accessorType::entityFusionSourceType, asb_uci::type::EntityFusionSourceType>;

  /** Indicates the unique ID of the Product from which the Entity was derived. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  using ProductMetadataID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** The constructor */
  EntitySourceIdentifierType();

  /** The copy constructor
    *
    * @param rhs The EntitySourceIdentifierType to copy from
    */
  EntitySourceIdentifierType(const EntitySourceIdentifierType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EntitySourceIdentifierType to move from
    */
  EntitySourceIdentifierType(EntitySourceIdentifierType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The EntitySourceIdentifierType to copy from
    * @return The EntitySourceIdentifierType that was assigned
    */
  EntitySourceIdentifierType& operator=(const EntitySourceIdentifierType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EntitySourceIdentifierType to move from
    * @return The EntitySourceIdentifierType that was assigned
    */
  EntitySourceIdentifierType& operator=(EntitySourceIdentifierType&& rhs) = delete;

  /** The destructor */
  virtual ~EntitySourceIdentifierType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntitySourceIdentifierType whose contents are to be used to set this
    *      uci::type::EntitySourceIdentifierType's contents.
    */
  void copy(const uci::type::EntitySourceIdentifierType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntitySourceIdentifierType whose contents are to be used to set this
    *      uci::type::EntitySourceIdentifierType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EntitySourceIdentifierType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::EntitySourceIdentifierType::EntitySourceIdentifierTypeChoice getEntitySourceIdentifierTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getEntitySourceIdentifierTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setEntitySourceIdentifierTypeChoiceOrdinal(uci::type::EntitySourceIdentifierType::EntitySourceIdentifierTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EOB_RecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EOB_RecordID field.
    */
  uci::type::EOB_RecordID_Type& getEOB_RecordID_() const;

  /** Returns the accessor to the EOB_RecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the EOB_RecordID field.
    */
  const uci::type::EOB_RecordID_Type& getEOB_RecordID() const override;

  /** Returns the accessor to the EOB_RecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the EOB_RecordID field.
    */
  uci::type::EOB_RecordID_Type& getEOB_RecordID() override;

  /** Sets this choice's choice to be eOB_RecordID and initializes eOB_RecordID to be the specified value. A deep copy will
    * be used by this method to set eOB_RecordID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EOB_RecordID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EOB_RecordID, false otherwise.
    */
  bool isEOB_RecordID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EOB_RecordID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EOB_RecordID.
    */
  uci::type::EOB_RecordID_Type& chooseEOB_RecordID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EOB_RecordID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EOB_RecordID.
    */
  uci::type::EOB_RecordID_Type& chooseEOB_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ExternalIdentifier field contained in this message fragment
    *
    * @return The const reference to the accessor to the ExternalIdentifier field.
    */
  uci::type::EntityExternalType& getExternalIdentifier_() const;

  /** Returns the accessor to the ExternalIdentifier field contained in this message fragment
    *
    * @return The reference to the accessor to the ExternalIdentifier field.
    */
  const uci::type::EntityExternalType& getExternalIdentifier() const override;

  /** Returns the accessor to the ExternalIdentifier field contained in this message fragment
    *
    * @return The reference to the accessor to the ExternalIdentifier field.
    */
  uci::type::EntityExternalType& getExternalIdentifier() override;

  /** Sets this choice's choice to be externalIdentifier and initializes externalIdentifier to be the specified value. A
    * deep copy will be used by this method to set externalIdentifier
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setExternalIdentifier(const uci::type::EntityExternalType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ExternalIdentifier.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ExternalIdentifier, false
    *      otherwise.
    */
  bool isExternalIdentifier() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ExternalIdentifier.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ExternalIdentifier.
    */
  uci::type::EntityExternalType& chooseExternalIdentifier(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ExternalIdentifier.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ExternalIdentifier.
    */
  uci::type::EntityExternalType& chooseExternalIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Fusion item contained in this message fragment
    *
    * @return The const reference to the accessor to the Fusion item.
    */
  uci::type::EntitySourceIdentifierType::Fusion& getFusion_() const;

  /** Returns the accessor to the Fusion item contained in this message fragment
    *
    * @return The const reference to the accessor to the Fusion item.
    */
  const uci::type::EntitySourceIdentifierType::Fusion& getFusion() const override;

  /** Returns the accessor to the Fusion item contained in this message fragment
    *
    * @return The reference to the accessor to the Fusion item.
    */
  uci::type::EntitySourceIdentifierType::Fusion& getFusion() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setFusion(const uci::type::EntitySourceIdentifierType::Fusion& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Fusion.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Fusion, false otherwise.
    */
  bool isFusion() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Fusion.
    *
    * @return A reference to the accessor that provides access to the choice identified by Fusion.
    */
  uci::type::EntitySourceIdentifierType::Fusion& chooseFusion() override;

  /** Returns the accessor to the InternallyDerivedID field contained in this message fragment
    *
    * @return The const reference to the accessor to the InternallyDerivedID field.
    */
  uci::type::ID_Type& getInternallyDerivedID_() const;

  /** Returns the accessor to the InternallyDerivedID field contained in this message fragment
    *
    * @return The reference to the accessor to the InternallyDerivedID field.
    */
  const uci::type::ID_Type& getInternallyDerivedID() const override;

  /** Returns the accessor to the InternallyDerivedID field contained in this message fragment
    *
    * @return The reference to the accessor to the InternallyDerivedID field.
    */
  uci::type::ID_Type& getInternallyDerivedID() override;

  /** Sets this choice's choice to be internallyDerivedID and initializes internallyDerivedID to be the specified value. A
    * deep copy will be used by this method to set internallyDerivedID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setInternallyDerivedID(const uci::type::ID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by InternallyDerivedID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by InternallyDerivedID, false
    *      otherwise.
    */
  bool isInternallyDerivedID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by InternallyDerivedID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by InternallyDerivedID.
    */
  uci::type::ID_Type& chooseInternallyDerivedID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by InternallyDerivedID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by InternallyDerivedID.
    */
  uci::type::ID_Type& chooseInternallyDerivedID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Capability field contained in this message fragment
    *
    * @return The const reference to the accessor to the Capability field.
    */
  uci::type::EntityCapabilitySourceType& getCapability_() const;

  /** Returns the accessor to the Capability field contained in this message fragment
    *
    * @return The reference to the accessor to the Capability field.
    */
  const uci::type::EntityCapabilitySourceType& getCapability() const override;

  /** Returns the accessor to the Capability field contained in this message fragment
    *
    * @return The reference to the accessor to the Capability field.
    */
  uci::type::EntityCapabilitySourceType& getCapability() override;

  /** Sets this choice's choice to be capability and initializes capability to be the specified value. A deep copy will be
    * used by this method to set capability
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setCapability(const uci::type::EntityCapabilitySourceType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Capability.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Capability, false otherwise.
    */
  bool isCapability() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Capability.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Capability.
    */
  uci::type::EntityCapabilitySourceType& chooseCapability(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Capability.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Capability.
    */
  uci::type::EntityCapabilitySourceType& chooseCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ProductMetadataID item contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductMetadataID item.
    */
  uci::type::EntitySourceIdentifierType::ProductMetadataID& getProductMetadataID_() const;

  /** Returns the accessor to the ProductMetadataID item contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductMetadataID item.
    */
  const uci::type::EntitySourceIdentifierType::ProductMetadataID& getProductMetadataID() const override;

  /** Returns the accessor to the ProductMetadataID item contained in this message fragment
    *
    * @return The reference to the accessor to the ProductMetadataID item.
    */
  uci::type::EntitySourceIdentifierType::ProductMetadataID& getProductMetadataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setProductMetadataID(const uci::type::EntitySourceIdentifierType::ProductMetadataID& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProductMetadataID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProductMetadataID, false
    *      otherwise.
    */
  bool isProductMetadataID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ProductMetadataID.
    *
    * @return A reference to the accessor that provides access to the choice identified by ProductMetadataID.
    */
  uci::type::EntitySourceIdentifierType::ProductMetadataID& chooseProductMetadataID() override;

  /** Returns the accessor to the OperatorID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OperatorID field.
    */
  uci::type::OperatorID_Type& getOperatorID_() const;

  /** Returns the accessor to the OperatorID field contained in this message fragment
    *
    * @return The reference to the accessor to the OperatorID field.
    */
  const uci::type::OperatorID_Type& getOperatorID() const override;

  /** Returns the accessor to the OperatorID field contained in this message fragment
    *
    * @return The reference to the accessor to the OperatorID field.
    */
  uci::type::OperatorID_Type& getOperatorID() override;

  /** Sets this choice's choice to be operatorID and initializes operatorID to be the specified value. A deep copy will be
    * used by this method to set operatorID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setOperatorID(const uci::type::OperatorID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OperatorID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OperatorID, false otherwise.
    */
  bool isOperatorID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OperatorID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OperatorID.
    */
  uci::type::OperatorID_Type& chooseOperatorID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OperatorID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OperatorID.
    */
  uci::type::OperatorID_Type& chooseOperatorID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SOB_SatelliteRecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SOB_SatelliteRecordID field.
    */
  uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID_() const;

  /** Returns the accessor to the SOB_SatelliteRecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the SOB_SatelliteRecordID field.
    */
  const uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() const override;

  /** Returns the accessor to the SOB_SatelliteRecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the SOB_SatelliteRecordID field.
    */
  uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() override;

  /** Sets this choice's choice to be sOB_SatelliteRecordID and initializes sOB_SatelliteRecordID to be the specified
    * value. A deep copy will be used by this method to set sOB_SatelliteRecordID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SOB_SatelliteRecordID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SOB_SatelliteRecordID, false
    *      otherwise.
    */
  bool isSOB_SatelliteRecordID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SOB_SatelliteRecordID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SOB_SatelliteRecordID.
    */
  uci::type::SOB_SatelliteRecordID_Type& chooseSOB_SatelliteRecordID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SOB_SatelliteRecordID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SOB_SatelliteRecordID.
    */
  uci::type::SOB_SatelliteRecordID_Type& chooseSOB_SatelliteRecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SOB_C2_RecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SOB_C2_RecordID field.
    */
  uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID_() const;

  /** Returns the accessor to the SOB_C2_RecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the SOB_C2_RecordID field.
    */
  const uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() const override;

  /** Returns the accessor to the SOB_C2_RecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the SOB_C2_RecordID field.
    */
  uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() override;

  /** Sets this choice's choice to be sOB_C2_RecordID and initializes sOB_C2_RecordID to be the specified value. A deep
    * copy will be used by this method to set sOB_C2_RecordID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceIdentifierType& setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SOB_C2_RecordID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SOB_C2_RecordID, false
    *      otherwise.
    */
  bool isSOB_C2_RecordID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SOB_C2_RecordID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SOB_C2_RecordID.
    */
  uci::type::SOB_C2_RecordID_Type& chooseSOB_C2_RecordID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SOB_C2_RecordID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SOB_C2_RecordID.
    */
  uci::type::SOB_C2_RecordID_Type& chooseSOB_C2_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EntitySourceIdentifierType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EntitySourceIdentifierType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EntitySourceIdentifierType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EOB_RecordID_Type> eOB_RecordID_Accessor;
  std::unique_ptr<EntityExternalType> externalIdentifier_Accessor;
  std::unique_ptr<Fusion> fusion_Accessor;
  std::unique_ptr<ID_Type> internallyDerivedID_Accessor;
  std::unique_ptr<EntityCapabilitySourceType> capability_Accessor;
  std::unique_ptr<ProductMetadataID> productMetadataID_Accessor;
  std::unique_ptr<OperatorID_Type> operatorID_Accessor;
  std::unique_ptr<SOB_SatelliteRecordID_Type> sOB_SatelliteRecordID_Accessor;
  std::unique_ptr<SOB_C2_RecordID_Type> sOB_C2_RecordID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ENTITYSOURCEIDENTIFIERTYPE_H
