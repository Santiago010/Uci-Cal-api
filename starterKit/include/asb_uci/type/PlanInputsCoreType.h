/** @file PlanInputsCoreType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANINPUTSCORETYPE_H
#define ASB_UCI_TYPE_PLANINPUTSCORETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/PlanInitiationSourceEnum.h"
#include "../../../include/asb_uci/type/PlanningDataSourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanInputsCoreType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class FileLocationID_Type;
class MissionEnvironmentConstraintType;
class OpConstraintWeightingType;
class PlanningProcessID_Type;
class ReplanReasonType;

/** Indicates input data used to create different types of *Plans. */
class PlanInputsCoreType : public virtual uci::type::PlanInputsCoreType {
public:
  /** Indicates a selective override of an item in the mission environment world state to use/used in the Plan.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using EnvironmentOverride = asb_uci::base::BoundedList<uci::type::MissionEnvironmentConstraintType, uci::type::accessorType::missionEnvironmentConstraintType, asb_uci::type::MissionEnvironmentConstraintType>;

  /** Further constrain a Mission Plan to an operational constraint that indicates how much the constraint should play a
    * role in the planning process. The multiplicity is based on the list of available OpConstraintEnums. [Occurrences:
    * Minimum: 0; Maximum: 15]
    */
  using OpConstraint = asb_uci::base::BoundedList<uci::type::OpConstraintWeightingType, uci::type::accessorType::opConstraintWeightingType, asb_uci::type::OpConstraintWeightingType>;

  /** The constructor */
  PlanInputsCoreType();

  /** The copy constructor
    *
    * @param rhs The PlanInputsCoreType to copy from
    */
  PlanInputsCoreType(const PlanInputsCoreType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlanInputsCoreType to move from
    */
  PlanInputsCoreType(PlanInputsCoreType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlanInputsCoreType to copy from
    * @return The PlanInputsCoreType that was assigned
    */
  PlanInputsCoreType& operator=(const PlanInputsCoreType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlanInputsCoreType to move from
    * @return The PlanInputsCoreType that was assigned
    */
  PlanInputsCoreType& operator=(PlanInputsCoreType&& rhs) = delete;

  /** The destructor */
  virtual ~PlanInputsCoreType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanInputsCoreType whose contents are to be used to set this
    *      uci::type::PlanInputsCoreType's contents.
    */
  void copy(const uci::type::PlanInputsCoreType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlanInputsCoreType whose contents are to be used to set this
    *      uci::type::PlanInputsCoreType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlanInputsCoreType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the PlanningProcessID field contained in this message fragment
    *
    * @return The const reference to the accessor to the PlanningProcessID field.
    */
  const uci::type::PlanningProcessID_Type& getPlanningProcessID() const override;

  /** Returns the accessor to the PlanningProcessID field contained in this message fragment
    *
    * @return The reference to the accessor to the PlanningProcessID field.
    */
  uci::type::PlanningProcessID_Type& getPlanningProcessID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setPlanningProcessID(const uci::type::PlanningProcessID_Type& accessor) override;

  /** Returns the contents of the message's PlanInitiation field
    *
    * @return The contents of the PlanInitiation field
    */
  const uci::type::PlanInitiationSourceEnum& getPlanInitiation() const override;

  /** Returns the contents of the message's PlanInitiation field
    *
    * @return The contents of the PlanInitiation field
    */
  uci::type::PlanInitiationSourceEnum& getPlanInitiation() override;

  /** Sets the contents of the message's PlanInitiation field
    *
    * @param accessor The accessor to use to set the PlanInitiation field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setPlanInitiation(const uci::type::PlanInitiationSourceEnum& accessor) override;

  /** Sets the contents of the message's PlanInitiation field
    *
    * @param value The new value to set the PlanInitiation field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setPlanInitiation(uci::type::PlanInitiationSourceEnum::EnumerationItem value) override;

  /** Returns the contents of the message's PlanningDataSource field
    *
    * @return The contents of the PlanningDataSource field
    */
  const uci::type::PlanningDataSourceEnum& getPlanningDataSource() const override;

  /** Returns the contents of the message's PlanningDataSource field
    *
    * @return The contents of the PlanningDataSource field
    */
  uci::type::PlanningDataSourceEnum& getPlanningDataSource() override;

  /** Sets the contents of the message's PlanningDataSource field
    *
    * @param accessor The accessor to use to set the PlanningDataSource field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setPlanningDataSource(const uci::type::PlanningDataSourceEnum& accessor) override;

  /** Sets the contents of the message's PlanningDataSource field
    *
    * @param value The new value to set the PlanningDataSource field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setPlanningDataSource(uci::type::PlanningDataSourceEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReplanReasonType& getReplanReason_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ReplanReasonType& getReplanReason() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReplanReasonType& getReplanReason() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setReplanReason(const uci::type::ReplanReasonType& accessor) override;

  /** Returns whether this optional field ReplanReasonis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReplanReason() const noexcept override;

  /** Enables the optional field such that getReplanReason will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReplanReasonType& enableReplanReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& clearReplanReason() noexcept override;

  /** Returns the accessor to the EnvironmentOverride field contained in this message fragment
    *
    * @return The const reference to the accessor to the EnvironmentOverride field.
    */
  const uci::type::PlanInputsCoreType::EnvironmentOverride& getEnvironmentOverride() const override;

  /** Returns the accessor to the EnvironmentOverride field contained in this message fragment
    *
    * @return The reference to the accessor to the EnvironmentOverride field.
    */
  uci::type::PlanInputsCoreType::EnvironmentOverride& getEnvironmentOverride() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setEnvironmentOverride(const uci::type::PlanInputsCoreType::EnvironmentOverride& accessor) override;

  /** Returns the accessor to the OpConstraint field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpConstraint field.
    */
  const uci::type::PlanInputsCoreType::OpConstraint& getOpConstraint() const override;

  /** Returns the accessor to the OpConstraint field contained in this message fragment
    *
    * @return The reference to the accessor to the OpConstraint field.
    */
  uci::type::PlanInputsCoreType::OpConstraint& getOpConstraint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setOpConstraint(const uci::type::PlanInputsCoreType::OpConstraint& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileLocationID_Type& getSpecialInstructionsID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FileLocationID_Type& getSpecialInstructionsID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileLocationID_Type& getSpecialInstructionsID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& setSpecialInstructionsID(const uci::type::FileLocationID_Type& accessor) override;

  /** Returns whether this optional field SpecialInstructionsIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSpecialInstructionsID() const noexcept override;

  /** Enables the optional field such that getSpecialInstructionsID will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FileLocationID_Type& enableSpecialInstructionsID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlanInputsCoreType& clearSpecialInstructionsID() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlanInputsCoreType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanInputsCoreType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlanInputsCoreType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PlanningProcessID_Type> planningProcessID_Accessor;
  std::unique_ptr<PlanInitiationSourceEnum> planInitiation_Accessor;
  std::unique_ptr<PlanningDataSourceEnum> planningDataSource_Accessor;
  std::unique_ptr<ReplanReasonType> replanReason_Accessor;
  std::unique_ptr<EnvironmentOverride> environmentOverride_Accessor;
  std::unique_ptr<OpConstraint> opConstraint_Accessor;
  std::unique_ptr<FileLocationID_Type> specialInstructionsID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANINPUTSCORETYPE_H
