/** @file EntityFilterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ENTITYFILTERTYPE_H
#define ASB_UCI_TYPE_ENTITYFILTERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/EntitySourceEnum.h"
#include "uci/type/EntityFilterType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class DesignationFilterType;
class EntityComparativeType;
class EntityID_Type;
class GeoFiltersQueryType;
class OrbitalFiltersQueryType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityFilterType : public virtual uci::type::EntityFilterType {
public:
  /** This element indicates an Entity filter requiring a variable logical comparator test between a value in an
    * Entity-associated message and the value given here. Multiple instances are logically ANDed. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using Characteristics = asb_uci::base::BoundedList<uci::type::EntityComparativeType, uci::type::accessorType::entityComparativeType, asb_uci::type::EntityComparativeType>;

  /** Indicates a specific EntityID that is required to match the filter. If omitted, any EntityID satisfies the filter.
    * Multiple instances are logically ORed. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using EntityID = asb_uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type, asb_uci::type::EntityID_Type>;

  /** Indicates an Entity source that is required to match the filter. If omitted, any Entity source satisfies the filter.
    * Multiple instances are logically ORed. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 28]
    */
  using Source = asb_uci::base::BoundedList<uci::type::EntitySourceEnum, uci::type::accessorType::entitySourceEnum, asb_uci::type::EntitySourceEnum>;

  /** Indicates a zone the Entity must fall within to satisfy the filter. Multiple instances are logically ORed.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using GeoFilter = asb_uci::base::BoundedList<uci::type::GeoFiltersQueryType, uci::type::accessorType::geoFiltersQueryType, asb_uci::type::GeoFiltersQueryType>;

  /** Indicates a zone the Entity must fall within to satisfy the filter. Multiple instances are logically ORed.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OrbitalFilter = asb_uci::base::BoundedList<uci::type::OrbitalFiltersQueryType, uci::type::accessorType::orbitalFiltersQueryType, asb_uci::type::OrbitalFiltersQueryType>;

  /** The constructor */
  EntityFilterType();

  /** The copy constructor
    *
    * @param rhs The EntityFilterType to copy from
    */
  EntityFilterType(const EntityFilterType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EntityFilterType to move from
    */
  EntityFilterType(EntityFilterType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EntityFilterType to copy from
    * @return The EntityFilterType that was assigned
    */
  EntityFilterType& operator=(const EntityFilterType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EntityFilterType to move from
    * @return The EntityFilterType that was assigned
    */
  EntityFilterType& operator=(EntityFilterType&& rhs) = delete;

  /** The destructor */
  virtual ~EntityFilterType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityFilterType whose contents are to be used to set this
    *      uci::type::EntityFilterType's contents.
    */
  void copy(const uci::type::EntityFilterType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityFilterType whose contents are to be used to set this
    *      uci::type::EntityFilterType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EntityFilterType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DesignationFilterType& getDesignation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DesignationFilterType& getDesignation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DesignationFilterType& getDesignation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityFilterType& setDesignation(const uci::type::DesignationFilterType& accessor) override;

  /** Returns whether this optional field Designationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDesignation() const noexcept override;

  /** Enables the optional field such that getDesignation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DesignationFilterType& enableDesignation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityFilterType& clearDesignation() noexcept override;

  /** Returns the accessor to the Characteristics field contained in this message fragment
    *
    * @return The const reference to the accessor to the Characteristics field.
    */
  const uci::type::EntityFilterType::Characteristics& getCharacteristics() const override;

  /** Returns the accessor to the Characteristics field contained in this message fragment
    *
    * @return The reference to the accessor to the Characteristics field.
    */
  uci::type::EntityFilterType::Characteristics& getCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityFilterType& setCharacteristics(const uci::type::EntityFilterType::Characteristics& accessor) override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityID field.
    */
  const uci::type::EntityFilterType::EntityID& getEntityID() const override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the EntityID field.
    */
  uci::type::EntityFilterType::EntityID& getEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityFilterType& setEntityID(const uci::type::EntityFilterType::EntityID& accessor) override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The const reference to the accessor to the Source field.
    */
  const uci::type::EntityFilterType::Source& getSource() const override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The reference to the accessor to the Source field.
    */
  uci::type::EntityFilterType::Source& getSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityFilterType& setSource(const uci::type::EntityFilterType::Source& accessor) override;

  /** Returns the accessor to the GeoFilter field contained in this message fragment
    *
    * @return The const reference to the accessor to the GeoFilter field.
    */
  const uci::type::EntityFilterType::GeoFilter& getGeoFilter() const override;

  /** Returns the accessor to the GeoFilter field contained in this message fragment
    *
    * @return The reference to the accessor to the GeoFilter field.
    */
  uci::type::EntityFilterType::GeoFilter& getGeoFilter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityFilterType& setGeoFilter(const uci::type::EntityFilterType::GeoFilter& accessor) override;

  /** Returns the accessor to the OrbitalFilter field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitalFilter field.
    */
  const uci::type::EntityFilterType::OrbitalFilter& getOrbitalFilter() const override;

  /** Returns the accessor to the OrbitalFilter field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitalFilter field.
    */
  uci::type::EntityFilterType::OrbitalFilter& getOrbitalFilter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityFilterType& setOrbitalFilter(const uci::type::EntityFilterType::OrbitalFilter& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EntityFilterType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityFilterType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EntityFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<DesignationFilterType> designation_Accessor;
  std::unique_ptr<Characteristics> characteristics_Accessor;
  std::unique_ptr<EntityID> entityID_Accessor;
  std::unique_ptr<Source> source_Accessor;
  std::unique_ptr<GeoFilter> geoFilter_Accessor;
  std::unique_ptr<OrbitalFilter> orbitalFilter_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ENTITYFILTERTYPE_H
