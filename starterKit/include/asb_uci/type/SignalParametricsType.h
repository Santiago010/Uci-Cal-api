/** @file SignalParametricsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SIGNALPARAMETRICSTYPE_H
#define ASB_UCI_TYPE_SIGNALPARAMETRICSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/AnglePositiveType.h"
#include "../../../include/asb_uci/type/DecibelType.h"
#include "../../../include/asb_uci/type/DoubleNonNegativeType.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/FrequencyModulationVariationEnum.h"
#include "../../../include/asb_uci/type/FrequencyType.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SignalParametricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class FrequencyDataType;
class LongBaselineInterferometerInfoType;
class ModulationOnPulseDataType;
class PRI_PW_Type;
class PolarizationType;
class ScanDataType;
class SignalAmplitudeType;

/** The parametrics data for the Signal, including frequencies, PRIs, pulse width data, etc. */
class SignalParametricsType : public virtual uci::type::SignalParametricsType {
public:
  /** Indicates the measured frequency data for the Signal. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using Frequency = asb_uci::base::BoundedList<uci::type::FrequencyDataType, uci::type::accessorType::frequencyDataType, asb_uci::type::FrequencyDataType>;

  /** Indicates Pulse Repetition Interval (PRI) and Pulse Width (PW) data for the Signal. When both are given, they are a
    * "paired" set of PRI and PW. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using PRI_PW = asb_uci::base::BoundedList<uci::type::PRI_PW_Type, uci::type::accessorType::pRI_PW_Type, asb_uci::type::PRI_PW_Type>;

  /** The constructor */
  SignalParametricsType();

  /** The copy constructor
    *
    * @param rhs The SignalParametricsType to copy from
    */
  SignalParametricsType(const SignalParametricsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SignalParametricsType to move from
    */
  SignalParametricsType(SignalParametricsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SignalParametricsType to copy from
    * @return The SignalParametricsType that was assigned
    */
  SignalParametricsType& operator=(const SignalParametricsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SignalParametricsType to move from
    * @return The SignalParametricsType that was assigned
    */
  SignalParametricsType& operator=(SignalParametricsType&& rhs) = delete;

  /** The destructor */
  virtual ~SignalParametricsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalParametricsType whose contents are to be used to set this
    *      uci::type::SignalParametricsType's contents.
    */
  void copy(const uci::type::SignalParametricsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalParametricsType whose contents are to be used to set this
    *      uci::type::SignalParametricsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SignalParametricsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the Frequency field.
    */
  const uci::type::SignalParametricsType::Frequency& getFrequency() const override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The reference to the accessor to the Frequency field.
    */
  uci::type::SignalParametricsType::Frequency& getFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setFrequency(const uci::type::SignalParametricsType::Frequency& accessor) override;

  /** Returns the accessor to the PRI_PW field contained in this message fragment
    *
    * @return The const reference to the accessor to the PRI_PW field.
    */
  const uci::type::SignalParametricsType::PRI_PW& getPRI_PW() const override;

  /** Returns the accessor to the PRI_PW field contained in this message fragment
    *
    * @return The reference to the accessor to the PRI_PW field.
    */
  uci::type::SignalParametricsType::PRI_PW& getPRI_PW() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPRI_PW(const uci::type::SignalParametricsType::PRI_PW& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalAmplitudeType& getAmplitude_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalAmplitudeType& getAmplitude() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalAmplitudeType& getAmplitude() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setAmplitude(const uci::type::SignalAmplitudeType& accessor) override;

  /** Returns whether this optional field Amplitudeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAmplitude() const noexcept override;

  /** Enables the optional field such that getAmplitude will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalAmplitudeType& enableAmplitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearAmplitude() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PolarizationType& getPolarization_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PolarizationType& getPolarization() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PolarizationType& getPolarization() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPolarization(const uci::type::PolarizationType& accessor) override;

  /** Returns whether this optional field Polarizationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPolarization() const noexcept override;

  /** Enables the optional field such that getPolarization will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PolarizationType& enablePolarization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPolarization() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationOnPulseDataType& getModulationOnPulse_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ModulationOnPulseDataType& getModulationOnPulse() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationOnPulseDataType& getModulationOnPulse() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setModulationOnPulse(const uci::type::ModulationOnPulseDataType& accessor) override;

  /** Returns whether this optional field ModulationOnPulseis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasModulationOnPulse() const noexcept override;

  /** Enables the optional field such that getModulationOnPulse will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationOnPulseDataType& enableModulationOnPulse(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearModulationOnPulse() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanDataType& getScan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ScanDataType& getScan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanDataType& getScan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setScan(const uci::type::ScanDataType& accessor) override;

  /** Returns whether this optional field Scanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasScan() const noexcept override;

  /** Enables the optional field such that getScan will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScanDataType& enableScan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearScan() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getSignalNoiseRatio() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setSignalNoiseRatio(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field SignalNoiseRatiois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSignalNoiseRatio() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearSignalNoiseRatio() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getPulseRepetitionFrequency() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPulseRepetitionFrequency(xs::Double value) override;

  /** Returns whether this optional field PulseRepetitionFrequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseRepetitionFrequency() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPulseRepetitionFrequency() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPulseRepetitionFrequencyCalculated() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPulseRepetitionFrequencyCalculated(xs::Boolean value) override;

  /** Returns whether this optional field PulseRepetitionFrequencyCalculatedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseRepetitionFrequencyCalculated() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPulseRepetitionFrequencyCalculated() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseDeviation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPulseDeviation(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseDeviationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseDeviation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPulseDeviation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getBurstDeviation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setBurstDeviation(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field BurstDeviationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBurstDeviation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearBurstDeviation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getIlluminationRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setIlluminationRate(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field IlluminationRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIlluminationRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearIlluminationRate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getIlluminationRateDeviation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setIlluminationRateDeviation(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field IlluminationRateDeviationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIlluminationRateDeviation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearIlluminationRateDeviation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getPulseCount() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPulseCount(xs::UnsignedInt value) override;

  /** Returns whether this optional field PulseCountis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseCount() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPulseCount() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getPulsesPerGroup() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPulsesPerGroup(xs::UnsignedInt value) override;

  /** Returns whether this optional field PulsesPerGroupis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulsesPerGroup() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPulsesPerGroup() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getBeamWidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setBeamWidth(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field BeamWidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBeamWidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearBeamWidth() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setFrequencyModulationVariation(const uci::type::FrequencyModulationVariationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setFrequencyModulationVariation(uci::type::FrequencyModulationVariationEnum::EnumerationItem value) override;

  /** Returns whether this optional field FrequencyModulationVariationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyModulationVariation() const noexcept override;

  /** Enables the optional field such that getFrequencyModulationVariation will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyModulationVariationEnum& enableFrequencyModulationVariation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearFrequencyModulationVariation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrequencyExcursion() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setFrequencyExcursion(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field FrequencyExcursionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyExcursion() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearFrequencyExcursion() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrequencyExcursionAverage() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setFrequencyExcursionAverage(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field FrequencyExcursionAverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyExcursionAverage() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearFrequencyExcursionAverage() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getFrequencyExcursionAverageReportCount() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setFrequencyExcursionAverageReportCount(xs::UnsignedInt value) override;

  /** Returns whether this optional field FrequencyExcursionAverageReportCountis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyExcursionAverageReportCount() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearFrequencyExcursionAverageReportCount() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getPilotFrequency() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPilotFrequency(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field PilotFrequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPilotFrequency() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPilotFrequency() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getPilotFrequencyAverage() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPilotFrequencyAverage(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field PilotFrequencyAverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPilotFrequencyAverage() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPilotFrequencyAverage() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getPilotFrequencyAverageReportCount() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setPilotFrequencyAverageReportCount(xs::UnsignedInt value) override;

  /** Returns whether this optional field PilotFrequencyAverageReportCountis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPilotFrequencyAverageReportCount() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearPilotFrequencyAverageReportCount() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getAverageBasebandedPulseRepetitionInterval() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setAverageBasebandedPulseRepetitionInterval(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field AverageBasebandedPulseRepetitionIntervalis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAverageBasebandedPulseRepetitionInterval() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearAverageBasebandedPulseRepetitionInterval() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedShort getAverageBasebandedPulseRepetitionIntervalReportCount() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setAverageBasebandedPulseRepetitionIntervalReportCount(xs::UnsignedShort value) override;

  /** Returns whether this optional field AverageBasebandedPulseRepetitionIntervalReportCountis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAverageBasebandedPulseRepetitionIntervalReportCount() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearAverageBasebandedPulseRepetitionIntervalReportCount() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DoubleNonNegativeTypeValue getBasebandedPulseRepetitionIntervalDeviation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setBasebandedPulseRepetitionIntervalDeviation(uci::type::DoubleNonNegativeTypeValue value) override;

  /** Returns whether this optional field BasebandedPulseRepetitionIntervalDeviationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBasebandedPulseRepetitionIntervalDeviation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearBasebandedPulseRepetitionIntervalDeviation() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LongBaselineInterferometerInfoType& getLongBaselineInterferometerInfo_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LongBaselineInterferometerInfoType& getLongBaselineInterferometerInfo() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LongBaselineInterferometerInfoType& getLongBaselineInterferometerInfo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& setLongBaselineInterferometerInfo(const uci::type::LongBaselineInterferometerInfoType& accessor) override;

  /** Returns whether this optional field LongBaselineInterferometerInfois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLongBaselineInterferometerInfo() const noexcept override;

  /** Enables the optional field such that getLongBaselineInterferometerInfo will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LongBaselineInterferometerInfoType& enableLongBaselineInterferometerInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalParametricsType& clearLongBaselineInterferometerInfo() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SignalParametricsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalParametricsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SignalParametricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Frequency> frequency_Accessor;
  std::unique_ptr<PRI_PW> pRI_PW_Accessor;
  std::unique_ptr<SignalAmplitudeType> amplitude_Accessor;
  std::unique_ptr<PolarizationType> polarization_Accessor;
  std::unique_ptr<ModulationOnPulseDataType> modulationOnPulse_Accessor;
  std::unique_ptr<ScanDataType> scan_Accessor;
  boost::optional<DecibelTypeValue> signalNoiseRatio_Accessor;
  boost::optional<asb_xs::Double> pulseRepetitionFrequency_Accessor;
  boost::optional<asb_xs::Boolean> pulseRepetitionFrequencyCalculated_Accessor;
  boost::optional<DurationTypeValue> pulseDeviation_Accessor;
  boost::optional<DurationTypeValue> burstDeviation_Accessor;
  boost::optional<FrequencyTypeValue> illuminationRate_Accessor;
  boost::optional<FrequencyTypeValue> illuminationRateDeviation_Accessor;
  boost::optional<asb_xs::UnsignedInt> pulseCount_Accessor;
  boost::optional<asb_xs::UnsignedInt> pulsesPerGroup_Accessor;
  boost::optional<AnglePositiveTypeValue> beamWidth_Accessor;
  std::unique_ptr<FrequencyModulationVariationEnum> frequencyModulationVariation_Accessor;
  boost::optional<FrequencyTypeValue> frequencyExcursion_Accessor;
  boost::optional<FrequencyTypeValue> frequencyExcursionAverage_Accessor;
  boost::optional<asb_xs::UnsignedInt> frequencyExcursionAverageReportCount_Accessor;
  boost::optional<FrequencyTypeValue> pilotFrequency_Accessor;
  boost::optional<FrequencyTypeValue> pilotFrequencyAverage_Accessor;
  boost::optional<asb_xs::UnsignedInt> pilotFrequencyAverageReportCount_Accessor;
  boost::optional<DurationTypeValue> averageBasebandedPulseRepetitionInterval_Accessor;
  boost::optional<asb_xs::UnsignedShort> averageBasebandedPulseRepetitionIntervalReportCount_Accessor;
  boost::optional<DoubleNonNegativeTypeValue> basebandedPulseRepetitionIntervalDeviation_Accessor;
  std::unique_ptr<LongBaselineInterferometerInfoType> longBaselineInterferometerInfo_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SIGNALPARAMETRICSTYPE_H
