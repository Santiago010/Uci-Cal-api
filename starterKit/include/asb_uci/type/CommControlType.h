/** @file CommControlType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMCONTROLTYPE_H
#define ASB_UCI_TYPE_COMMCONTROLTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommReceiverStateEnum.h"
#include "asb_uci/type/CommTransmitterStateEnum.h"
#include "asb_uci/type/DataRateType.h"
#include "asb_uci/type/MilliwattPowerRatioType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/CommControlType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommConnectionType;
class ComponentID_Type;
class RemoteDestinationType;

/** Utilized to control the waveform setup, modification, and status for a capability. */
class CommControlType : public virtual uci::type::CommControlType {
public:
  /** Sets / Indicates the Antenna Component associated with this waveform capability. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using AntennaID = asb_uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type, asb_uci::type::ComponentID_Type>;

  /** The constructor */
  CommControlType();

  /** The copy constructor
    *
    * @param rhs The CommControlType to copy from
    */
  CommControlType(const CommControlType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommControlType to move from
    */
  CommControlType(CommControlType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommControlType to copy from
    * @return The CommControlType that was assigned
    */
  CommControlType& operator=(const CommControlType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommControlType to move from
    * @return The CommControlType that was assigned
    */
  CommControlType& operator=(CommControlType&& rhs) = delete;

  /** The destructor */
  virtual ~CommControlType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommControlType whose contents are to be used to set this uci::type::CommControlType's
    *      contents.
    */
  void copy(const uci::type::CommControlType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommControlType whose contents are to be used to set this uci::type::CommControlType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommControlType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getInhibitTransmit() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setInhibitTransmit(xs::Boolean value) override;

  /** Returns whether this optional field InhibitTransmitis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInhibitTransmit() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearInhibitTransmit() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getInhibitReceive() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setInhibitReceive(xs::Boolean value) override;

  /** Returns whether this optional field InhibitReceiveis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInhibitReceive() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearInhibitReceive() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getInhibitRelay() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setInhibitRelay(xs::Boolean value) override;

  /** Returns whether this optional field InhibitRelayis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInhibitRelay() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearInhibitRelay() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionType& getConnectionSettings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommConnectionType& getConnectionSettings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionType& getConnectionSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setConnectionSettings(const uci::type::CommConnectionType& accessor) override;

  /** Returns whether this optional field ConnectionSettingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConnectionSettings() const noexcept override;

  /** Enables the optional field such that getConnectionSettings will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionType& enableConnectionSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearConnectionSettings() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommReceiverStateEnum& getReceiverState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommReceiverStateEnum& getReceiverState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommReceiverStateEnum& getReceiverState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setReceiverState(const uci::type::CommReceiverStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setReceiverState(uci::type::CommReceiverStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field ReceiverStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReceiverState() const noexcept override;

  /** Enables the optional field such that getReceiverState will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommReceiverStateEnum& enableReceiverState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearReceiverState() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getRxPowerLevel() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setRxPowerLevel(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field RxPowerLevelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRxPowerLevel() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearRxPowerLevel() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getSquelchLevel() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setSquelchLevel(xs::UnsignedByte value) override;

  /** Returns whether this optional field SquelchLevelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSquelchLevel() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearSquelchLevel() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommTransmitterStateEnum& getTransmitterState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommTransmitterStateEnum& getTransmitterState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommTransmitterStateEnum& getTransmitterState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setTransmitterState(const uci::type::CommTransmitterStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setTransmitterState(uci::type::CommTransmitterStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field TransmitterStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTransmitterState() const noexcept override;

  /** Enables the optional field such that getTransmitterState will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommTransmitterStateEnum& enableTransmitterState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearTransmitterState() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getTxPowerLevel() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setTxPowerLevel(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field TxPowerLevelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTxPowerLevel() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearTxPowerLevel() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getVolumeLevel() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setVolumeLevel(xs::UnsignedByte value) override;

  /** Returns whether this optional field VolumeLevelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVolumeLevel() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearVolumeLevel() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DataRateTypeValue getRF_DataRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setRF_DataRate(uci::type::DataRateTypeValue value) override;

  /** Returns whether this optional field RF_DataRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRF_DataRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearRF_DataRate() noexcept override;

  /** Returns the accessor to the AntennaID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AntennaID field.
    */
  const uci::type::CommControlType::AntennaID& getAntennaID() const override;

  /** Returns the accessor to the AntennaID field contained in this message fragment
    *
    * @return The reference to the accessor to the AntennaID field.
    */
  uci::type::CommControlType::AntennaID& getAntennaID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setAntennaID(const uci::type::CommControlType::AntennaID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RemoteDestinationType& getRemoteDestination_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RemoteDestinationType& getRemoteDestination() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RemoteDestinationType& getRemoteDestination() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& setRemoteDestination(const uci::type::RemoteDestinationType& accessor) override;

  /** Returns whether this optional field RemoteDestinationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemoteDestination() const noexcept override;

  /** Enables the optional field such that getRemoteDestination will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RemoteDestinationType& enableRemoteDestination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommControlType& clearRemoteDestination() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommControlType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommControlType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::Boolean> inhibitTransmit_Accessor;
  boost::optional<asb_xs::Boolean> inhibitReceive_Accessor;
  boost::optional<asb_xs::Boolean> inhibitRelay_Accessor;
  std::unique_ptr<CommConnectionType> connectionSettings_Accessor;
  std::unique_ptr<CommReceiverStateEnum> receiverState_Accessor;
  boost::optional<MilliwattPowerRatioTypeValue> rxPowerLevel_Accessor;
  boost::optional<asb_xs::UnsignedByte> squelchLevel_Accessor;
  std::unique_ptr<CommTransmitterStateEnum> transmitterState_Accessor;
  boost::optional<MilliwattPowerRatioTypeValue> txPowerLevel_Accessor;
  boost::optional<asb_xs::UnsignedByte> volumeLevel_Accessor;
  boost::optional<DataRateTypeValue> rF_DataRate_Accessor;
  std::unique_ptr<AntennaID> antennaID_Accessor;
  std::unique_ptr<RemoteDestinationType> remoteDestination_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMCONTROLTYPE_H
