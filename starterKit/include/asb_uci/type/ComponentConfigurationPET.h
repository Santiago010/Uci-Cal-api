/** @file ComponentConfigurationPET.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMPONENTCONFIGURATIONPET_H
#define ASB_UCI_TYPE_COMPONENTCONFIGURATIONPET_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ComponentTypeEnum.h"
#include "../../../include/asb_uci/type/MassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentConfigurationPET.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AboutType;
class CapabilityCrossReferenceType;
class ComponentConfigurationID_Type;
class ComponentID_Type;
class ForeignKeyType;
class InstallationDetailsType;
class ServiceID_Type;

/** Contains component configuration data. See individual field annotations for more details. */
class ComponentConfigurationPET : public virtual uci::type::ComponentConfigurationPET {
public:
  /** Indicates a Capability that is dependent upon this component. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CapabilityCrossReference = asb_uci::base::BoundedList<uci::type::CapabilityCrossReferenceType, uci::type::accessorType::capabilityCrossReferenceType, asb_uci::type::CapabilityCrossReferenceType>;

  /** List of service IDs of services that are related to or tied to the component. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using ServiceID = asb_uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type, asb_uci::type::ServiceID_Type>;

  /** The constructor */
  ComponentConfigurationPET();

  /** The copy constructor
    *
    * @param rhs The ComponentConfigurationPET to copy from
    */
  ComponentConfigurationPET(const ComponentConfigurationPET& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ComponentConfigurationPET to move from
    */
  ComponentConfigurationPET(ComponentConfigurationPET&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ComponentConfigurationPET to copy from
    * @return The ComponentConfigurationPET that was assigned
    */
  ComponentConfigurationPET& operator=(const ComponentConfigurationPET& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ComponentConfigurationPET to move from
    * @return The ComponentConfigurationPET that was assigned
    */
  ComponentConfigurationPET& operator=(ComponentConfigurationPET&& rhs) = delete;

  /** The destructor */
  virtual ~ComponentConfigurationPET();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ComponentConfigurationPET whose contents are to be used to set this
    *      uci::type::ComponentConfigurationPET's contents.
    */
  void copy(const uci::type::ComponentConfigurationPET& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ComponentConfigurationPET whose contents are to be used to set this
    *      uci::type::ComponentConfigurationPET's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ComponentConfigurationPET& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ComponentConfigurationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentConfigurationID field.
    */
  const uci::type::ComponentConfigurationID_Type& getComponentConfigurationID() const override;

  /** Returns the accessor to the ComponentConfigurationID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentConfigurationID field.
    */
  uci::type::ComponentConfigurationID_Type& getComponentConfigurationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setComponentConfigurationID(const uci::type::ComponentConfigurationID_Type& accessor) override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentID field.
    */
  const uci::type::ComponentID_Type& getComponentID() const override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentID field.
    */
  uci::type::ComponentID_Type& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setComponentID(const uci::type::ComponentID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AboutType& getAbout_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AboutType& getAbout() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AboutType& getAbout() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setAbout(const uci::type::AboutType& accessor) override;

  /** Returns whether this optional field Aboutis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAbout() const noexcept override;

  /** Enables the optional field such that getAbout will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AboutType& enableAbout(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& clearAbout() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MassTypeValue getMass() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setMass(uci::type::MassTypeValue value) override;

  /** Returns whether this optional field Massis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMass() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& clearMass() noexcept override;

  /** Returns the accessor to the CapabilityCrossReference field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityCrossReference field.
    */
  const uci::type::ComponentConfigurationPET::CapabilityCrossReference& getCapabilityCrossReference() const override;

  /** Returns the accessor to the CapabilityCrossReference field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityCrossReference field.
    */
  uci::type::ComponentConfigurationPET::CapabilityCrossReference& getCapabilityCrossReference() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setCapabilityCrossReference(const uci::type::ComponentConfigurationPET::CapabilityCrossReference& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getInstallationLocationKey_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getInstallationLocationKey() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getInstallationLocationKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setInstallationLocationKey(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field InstallationLocationKeyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInstallationLocationKey() const noexcept override;

  /** Enables the optional field such that getInstallationLocationKey will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableInstallationLocationKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& clearInstallationLocationKey() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::InstallationDetailsType& getInstallationDetails_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::InstallationDetailsType& getInstallationDetails() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::InstallationDetailsType& getInstallationDetails() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setInstallationDetails(const uci::type::InstallationDetailsType& accessor) override;

  /** Returns whether this optional field InstallationDetailsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInstallationDetails() const noexcept override;

  /** Enables the optional field such that getInstallationDetails will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::InstallationDetailsType& enableInstallationDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& clearInstallationDetails() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentTypeEnum& getComponentType_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ComponentTypeEnum& getComponentType() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentTypeEnum& getComponentType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setComponentType(const uci::type::ComponentTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setComponentType(uci::type::ComponentTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field ComponentTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasComponentType() const noexcept override;

  /** Enables the optional field such that getComponentType will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentTypeEnum& enableComponentType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& clearComponentType() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getComponentCode_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getComponentCode() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getComponentCode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setComponentCode(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field ComponentCodeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasComponentCode() const noexcept override;

  /** Enables the optional field such that getComponentCode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableComponentCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& clearComponentCode() noexcept override;

  /** Returns the accessor to the ServiceID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ServiceID field.
    */
  const uci::type::ComponentConfigurationPET::ServiceID& getServiceID() const override;

  /** Returns the accessor to the ServiceID field contained in this message fragment
    *
    * @return The reference to the accessor to the ServiceID field.
    */
  uci::type::ComponentConfigurationPET::ServiceID& getServiceID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentConfigurationPET& setServiceID(const uci::type::ComponentConfigurationPET::ServiceID& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ComponentConfigurationPET> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentConfigurationPET& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ComponentConfigurationPET& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ComponentConfigurationID_Type> componentConfigurationID_Accessor;
  std::unique_ptr<ComponentID_Type> componentID_Accessor;
  std::unique_ptr<AboutType> about_Accessor;
  boost::optional<MassTypeValue> mass_Accessor;
  std::unique_ptr<CapabilityCrossReference> capabilityCrossReference_Accessor;
  std::unique_ptr<ForeignKeyType> installationLocationKey_Accessor;
  std::unique_ptr<InstallationDetailsType> installationDetails_Accessor;
  std::unique_ptr<ComponentTypeEnum> componentType_Accessor;
  std::unique_ptr<ForeignKeyType> componentCode_Accessor;
  std::unique_ptr<ServiceID> serviceID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMPONENTCONFIGURATIONPET_H
