/** @file ComponentType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMPONENTTYPE_H
#define ASB_UCI_TYPE_COMPONENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/ComponentStateEnum.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/ComponentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class BIT_ID_Type;
class ComponentDetailedStatusType;
class ComponentExtendedStatusPET;
class ComponentID_Type;
class SubsystemMaintenanceID_Type;
class TemperatureStatusType;

/** Contains component status information. See individual field annotations for more information. */
class ComponentType : public virtual uci::type::ComponentType {
public:
  /** Indicates the temperature of the Subsystem Component corresponding to this message. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using Temperature = asb_uci::base::BoundedList<uci::type::TemperatureStatusType, uci::type::accessorType::temperatureStatusType, asb_uci::type::TemperatureStatusType>;

  /** This element is only applicable when the sibling ComponentState indicates a fault, in which case it specifies the BIT
    * or BITs in which failure was identified. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using BIT_ID = asb_uci::base::BoundedList<uci::type::BIT_ID_Type, uci::type::accessorType::bIT_ID_Type, asb_uci::type::BIT_ID_Type>;

  /** This element is only applicable when the sibling ComponentState indicates a fault, in which case it identifies the
    * additional diagnostic BIT or BITs that can be run to verify the fault has been repaired. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using DiagnosticTestID = asb_uci::base::BoundedList<uci::type::BIT_ID_Type, uci::type::accessorType::bIT_ID_Type, asb_uci::type::BIT_ID_Type>;

  /** This element provides a generic way of reporting specific or unique component status information. For example, it
    * could be used to report status for items in electrical equipment or hydraulic equipment that are documented outside
    * of UCI in an ICD or to report engine specific status information such as throttle. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using SpecificStatus = asb_uci::base::BoundedList<uci::type::ComponentDetailedStatusType, uci::type::accessorType::componentDetailedStatusType, asb_uci::type::ComponentDetailedStatusType>;

  /** The constructor */
  ComponentType();

  /** The copy constructor
    *
    * @param rhs The ComponentType to copy from
    */
  ComponentType(const ComponentType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ComponentType to move from
    */
  ComponentType(ComponentType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ComponentType to copy from
    * @return The ComponentType that was assigned
    */
  ComponentType& operator=(const ComponentType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ComponentType to move from
    * @return The ComponentType that was assigned
    */
  ComponentType& operator=(ComponentType&& rhs) = delete;

  /** The destructor */
  virtual ~ComponentType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ComponentType whose contents are to be used to set this uci::type::ComponentType's
    *      contents.
    */
  void copy(const uci::type::ComponentType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ComponentType whose contents are to be used to set this uci::type::ComponentType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ComponentType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentID field.
    */
  const uci::type::ComponentID_Type& getComponentID() const override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentID field.
    */
  uci::type::ComponentID_Type& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setComponentID(const uci::type::ComponentID_Type& accessor) override;

  /** Returns the contents of the message's ComponentState field
    *
    * @return The contents of the ComponentState field
    */
  const uci::type::ComponentStateEnum& getComponentState() const override;

  /** Returns the contents of the message's ComponentState field
    *
    * @return The contents of the ComponentState field
    */
  uci::type::ComponentStateEnum& getComponentState() override;

  /** Sets the contents of the message's ComponentState field
    *
    * @param accessor The accessor to use to set the ComponentState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setComponentState(const uci::type::ComponentStateEnum& accessor) override;

  /** Sets the contents of the message's ComponentState field
    *
    * @param value The new value to set the ComponentState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setComponentState(uci::type::ComponentStateEnum::EnumerationItem value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getDataTimestamp() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setDataTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field DataTimestampis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDataTimestamp() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& clearDataTimestamp() noexcept override;

  /** Returns the accessor to the Temperature field contained in this message fragment
    *
    * @return The const reference to the accessor to the Temperature field.
    */
  const uci::type::ComponentType::Temperature& getTemperature() const override;

  /** Returns the accessor to the Temperature field contained in this message fragment
    *
    * @return The reference to the accessor to the Temperature field.
    */
  uci::type::ComponentType::Temperature& getTemperature() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setTemperature(const uci::type::ComponentType::Temperature& accessor) override;

  /** Returns the accessor to the BIT_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the BIT_ID field.
    */
  const uci::type::ComponentType::BIT_ID& getBIT_ID() const override;

  /** Returns the accessor to the BIT_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the BIT_ID field.
    */
  uci::type::ComponentType::BIT_ID& getBIT_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setBIT_ID(const uci::type::ComponentType::BIT_ID& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getSubsystemCritical() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setSubsystemCritical(xs::Boolean value) override;

  /** Returns whether this optional field SubsystemCriticalis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubsystemCritical() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& clearSubsystemCritical() noexcept override;

  /** Returns the accessor to the DiagnosticTestID field contained in this message fragment
    *
    * @return The const reference to the accessor to the DiagnosticTestID field.
    */
  const uci::type::ComponentType::DiagnosticTestID& getDiagnosticTestID() const override;

  /** Returns the accessor to the DiagnosticTestID field contained in this message fragment
    *
    * @return The reference to the accessor to the DiagnosticTestID field.
    */
  uci::type::ComponentType::DiagnosticTestID& getDiagnosticTestID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setDiagnosticTestID(const uci::type::ComponentType::DiagnosticTestID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentExtendedStatusPET& getExtendedStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ComponentExtendedStatusPET& getExtendedStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentExtendedStatusPET& getExtendedStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setExtendedStatus(const uci::type::ComponentExtendedStatusPET& accessor) override;

  /** Returns whether this optional field ExtendedStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasExtendedStatus() const noexcept override;

  /** Enables the optional field such that getExtendedStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentExtendedStatusPET& enableExtendedStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& clearExtendedStatus() noexcept override;

  /** Returns the accessor to the SpecificStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificStatus field.
    */
  const uci::type::ComponentType::SpecificStatus& getSpecificStatus() const override;

  /** Returns the accessor to the SpecificStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificStatus field.
    */
  uci::type::ComponentType::SpecificStatus& getSpecificStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setSpecificStatus(const uci::type::ComponentType::SpecificStatus& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemMaintenanceID_Type& getSubsystemMaintenanceTestID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SubsystemMaintenanceID_Type& getSubsystemMaintenanceTestID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemMaintenanceID_Type& getSubsystemMaintenanceTestID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& setSubsystemMaintenanceTestID(const uci::type::SubsystemMaintenanceID_Type& accessor) override;

  /** Returns whether this optional field SubsystemMaintenanceTestIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubsystemMaintenanceTestID() const noexcept override;

  /** Enables the optional field such that getSubsystemMaintenanceTestID will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemMaintenanceID_Type& enableSubsystemMaintenanceTestID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ComponentType& clearSubsystemMaintenanceTestID() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ComponentType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ComponentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ComponentID_Type> componentID_Accessor;
  std::unique_ptr<ComponentStateEnum> componentState_Accessor;
  boost::optional<DateTimeTypeValue> dataTimestamp_Accessor;
  std::unique_ptr<Temperature> temperature_Accessor;
  std::unique_ptr<BIT_ID> bIT_ID_Accessor;
  boost::optional<asb_xs::Boolean> subsystemCritical_Accessor;
  std::unique_ptr<DiagnosticTestID> diagnosticTestID_Accessor;
  std::unique_ptr<ComponentExtendedStatusPET> extendedStatus_Accessor;
  std::unique_ptr<SpecificStatus> specificStatus_Accessor;
  std::unique_ptr<SubsystemMaintenanceID_Type> subsystemMaintenanceTestID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMPONENTTYPE_H
