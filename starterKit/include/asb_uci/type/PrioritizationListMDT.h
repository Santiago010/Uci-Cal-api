/** @file PrioritizationListMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PRIORITIZATIONLISTMDT_H
#define ASB_UCI_TYPE_PRIORITIZATIONLISTMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/PrioritizationListEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PrioritizationListMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class OpDescriptionType;
class OrderTraceabilityType;
class PrioritizationListID_Type;
class PrioritizationListItemType;
class ScheduleType;
class ServiceID_Type;
class SystemID_Type;
class ZoneType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PrioritizationListMDT : public virtual uci::type::PrioritizationListMDT, public virtual DataRecordBaseType {
public:
  /** Indicates an item in a prioritization list of the sibling ListType. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using ListItem = asb_uci::base::BoundedList<uci::type::PrioritizationListItemType, uci::type::accessorType::prioritizationListItemType, asb_uci::type::PrioritizationListItemType>;

  /** Indicates an operational order which this PrioritizationList is traceable to. This does not mean ranking. This
    * element refers to a Planning Order, Commander's Intent, or other Order that came from a higher echelon. The higher
    * echelon is identified by the OrderSourceID. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OpOrderTraceability = asb_uci::base::BoundedList<uci::type::OrderTraceabilityType, uci::type::accessorType::orderTraceabilityType, asb_uci::type::OrderTraceabilityType>;

  /** One or more Systems to which the prioritization applies. If omitted, the prioritization applies to all Systems.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ApplicableSystemID = asb_uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type, asb_uci::type::SystemID_Type>;

  /** One or more Services to which the mission response list applies. If omitted, the settings apply to all Services of
    * the Systems given in the sibling ApplicableSystemID. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ApplicableServiceID = asb_uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type, asb_uci::type::ServiceID_Type>;

  /** The constructor */
  PrioritizationListMDT();

  /** The copy constructor
    *
    * @param rhs The PrioritizationListMDT to copy from
    */
  PrioritizationListMDT(const PrioritizationListMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PrioritizationListMDT to move from
    */
  PrioritizationListMDT(PrioritizationListMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PrioritizationListMDT to copy from
    * @return The PrioritizationListMDT that was assigned
    */
  PrioritizationListMDT& operator=(const PrioritizationListMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PrioritizationListMDT to move from
    * @return The PrioritizationListMDT that was assigned
    */
  PrioritizationListMDT& operator=(PrioritizationListMDT&& rhs) = delete;

  /** The destructor */
  ~PrioritizationListMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PrioritizationListMDT whose contents are to be used to set this
    *      uci::type::PrioritizationListMDT's contents.
    */
  void copy(const uci::type::PrioritizationListMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PrioritizationListMDT whose contents are to be used to set this
    *      uci::type::PrioritizationListMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PrioritizationListMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the PrioritizationListID field contained in this message fragment
    *
    * @return The const reference to the accessor to the PrioritizationListID field.
    */
  const uci::type::PrioritizationListID_Type& getPrioritizationListID() const override;

  /** Returns the accessor to the PrioritizationListID field contained in this message fragment
    *
    * @return The reference to the accessor to the PrioritizationListID field.
    */
  uci::type::PrioritizationListID_Type& getPrioritizationListID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setPrioritizationListID(const uci::type::PrioritizationListID_Type& accessor) override;

  /** Returns the contents of the message's ListType field
    *
    * @return The contents of the ListType field
    */
  const uci::type::PrioritizationListEnum& getListType() const override;

  /** Returns the contents of the message's ListType field
    *
    * @return The contents of the ListType field
    */
  uci::type::PrioritizationListEnum& getListType() override;

  /** Sets the contents of the message's ListType field
    *
    * @param accessor The accessor to use to set the ListType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setListType(const uci::type::PrioritizationListEnum& accessor) override;

  /** Sets the contents of the message's ListType field
    *
    * @param value The new value to set the ListType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setListType(uci::type::PrioritizationListEnum::EnumerationItem value) override;

  /** Returns the accessor to the ListItem field contained in this message fragment
    *
    * @return The const reference to the accessor to the ListItem field.
    */
  const uci::type::PrioritizationListMDT::ListItem& getListItem() const override;

  /** Returns the accessor to the ListItem field contained in this message fragment
    *
    * @return The reference to the accessor to the ListItem field.
    */
  uci::type::PrioritizationListMDT::ListItem& getListItem() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setListItem(const uci::type::PrioritizationListMDT::ListItem& accessor) override;

  /** Returns the accessor to the OpOrderTraceability field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpOrderTraceability field.
    */
  const uci::type::PrioritizationListMDT::OpOrderTraceability& getOpOrderTraceability() const override;

  /** Returns the accessor to the OpOrderTraceability field contained in this message fragment
    *
    * @return The reference to the accessor to the OpOrderTraceability field.
    */
  uci::type::PrioritizationListMDT::OpOrderTraceability& getOpOrderTraceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setOpOrderTraceability(const uci::type::PrioritizationListMDT::OpOrderTraceability& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OpDescriptionType& getOpDescription_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OpDescriptionType& getOpDescription() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OpDescriptionType& getOpDescription() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setOpDescription(const uci::type::OpDescriptionType& accessor) override;

  /** Returns whether this optional field OpDescriptionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOpDescription() const noexcept override;

  /** Enables the optional field such that getOpDescription will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OpDescriptionType& enableOpDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& clearOpDescription() noexcept override;

  /** Returns the accessor to the ApplicableSystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ApplicableSystemID field.
    */
  const uci::type::PrioritizationListMDT::ApplicableSystemID& getApplicableSystemID() const override;

  /** Returns the accessor to the ApplicableSystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the ApplicableSystemID field.
    */
  uci::type::PrioritizationListMDT::ApplicableSystemID& getApplicableSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setApplicableSystemID(const uci::type::PrioritizationListMDT::ApplicableSystemID& accessor) override;

  /** Returns the accessor to the ApplicableServiceID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ApplicableServiceID field.
    */
  const uci::type::PrioritizationListMDT::ApplicableServiceID& getApplicableServiceID() const override;

  /** Returns the accessor to the ApplicableServiceID field contained in this message fragment
    *
    * @return The reference to the accessor to the ApplicableServiceID field.
    */
  uci::type::PrioritizationListMDT::ApplicableServiceID& getApplicableServiceID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setApplicableServiceID(const uci::type::PrioritizationListMDT::ApplicableServiceID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& getApplicableZone_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ZoneType& getApplicableZone() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& getApplicableZone() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setApplicableZone(const uci::type::ZoneType& accessor) override;

  /** Returns whether this optional field ApplicableZoneis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasApplicableZone() const noexcept override;

  /** Enables the optional field such that getApplicableZone will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& enableApplicableZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& clearApplicableZone() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& getSchedule_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ScheduleType& getSchedule() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& getSchedule() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& setSchedule(const uci::type::ScheduleType& accessor) override;

  /** Returns whether this optional field Scheduleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSchedule() const noexcept override;

  /** Enables the optional field such that getSchedule will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& enableSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PrioritizationListMDT& clearSchedule() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PrioritizationListMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PrioritizationListMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PrioritizationListMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PrioritizationListID_Type> prioritizationListID_Accessor;
  std::unique_ptr<PrioritizationListEnum> listType_Accessor;
  std::unique_ptr<ListItem> listItem_Accessor;
  std::unique_ptr<OpOrderTraceability> opOrderTraceability_Accessor;
  std::unique_ptr<OpDescriptionType> opDescription_Accessor;
  std::unique_ptr<ApplicableSystemID> applicableSystemID_Accessor;
  std::unique_ptr<ApplicableServiceID> applicableServiceID_Accessor;
  std::unique_ptr<ZoneType> applicableZone_Accessor;
  std::unique_ptr<ScheduleType> schedule_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PRIORITIZATIONLISTMDT_H
