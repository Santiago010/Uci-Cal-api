/** @file RF_TransmissionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_RF_TRANSMISSIONTYPE_H
#define ASB_UCI_TYPE_RF_TRANSMISSIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/base/UnsignedIntAccessor.h"
#include "asb_uci/type/DecibelType.h"
#include "asb_uci/type/PercentType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/RF_TransmissionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AntennaAndResourceInstanceType;
class BlankingLimitType;
class FrequencyRangeType;
class PolarizationControlType;

/** See annotations in child elements and messages/elements that use this type for details. */
class RF_TransmissionType : public virtual uci::type::RF_TransmissionType {
public:
  /** This grouping of RF_ThreadInstanceIndexs must be of equivalent ResourceAccessPriority. This set of RF_ThreadInstances
    * cannot represent multiple resource allocations. ResourceAllocator generates the index in a an incrementing fashion 1,
    * 2, 3... at resource allocation time, assuring that identifiers are unique across resource allocations.
    * RF_ThreadInstanceIndices may be re-used after an allocation has been de-allocated. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using RF_ThreadInstanceIndex = asb_uci::base::BoundedList<uci::base::UnsignedIntAccessor, uci::base::accessorType::unsignedIntAccessor, asb_uci::base::UnsignedIntAccessor>;

  /** A set of antenna resource that will be used for RF transmit. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using AntennaResource = asb_uci::base::BoundedList<uci::type::AntennaAndResourceInstanceType, uci::type::accessorType::antennaAndResourceInstanceType, asb_uci::type::AntennaAndResourceInstanceType>;

  /** Indicates finer granularity of frequency chunks that this CIR Index is associated with. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using Frequency = asb_uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType, asb_uci::type::FrequencyRangeType>;

  /** Polarization of the transmission. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using Polarization = asb_uci::base::BoundedList<uci::type::PolarizationControlType, uci::type::accessorType::polarizationControlType, asb_uci::type::PolarizationControlType>;

  /** Transmit function report of acceptable amount of blanking. Subsystems that blank are expected not to exceed the
    * TxPercentBlankLimit allocated to their subsystem. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using BlankingLimit = asb_uci::base::BoundedList<uci::type::BlankingLimitType, uci::type::accessorType::blankingLimitType, asb_uci::type::BlankingLimitType>;

  /** The constructor */
  RF_TransmissionType();

  /** The copy constructor
    *
    * @param rhs The RF_TransmissionType to copy from
    */
  RF_TransmissionType(const RF_TransmissionType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The RF_TransmissionType to move from
    */
  RF_TransmissionType(RF_TransmissionType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The RF_TransmissionType to copy from
    * @return The RF_TransmissionType that was assigned
    */
  RF_TransmissionType& operator=(const RF_TransmissionType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The RF_TransmissionType to move from
    * @return The RF_TransmissionType that was assigned
    */
  RF_TransmissionType& operator=(RF_TransmissionType&& rhs) = delete;

  /** The destructor */
  virtual ~RF_TransmissionType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RF_TransmissionType whose contents are to be used to set this
    *      uci::type::RF_TransmissionType's contents.
    */
  void copy(const uci::type::RF_TransmissionType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RF_TransmissionType whose contents are to be used to set this
    *      uci::type::RF_TransmissionType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::RF_TransmissionType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the RF_ThreadInstanceIndex field contained in this message fragment
    *
    * @return The const reference to the accessor to the RF_ThreadInstanceIndex field.
    */
  const uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& getRF_ThreadInstanceIndex() const override;

  /** Returns the accessor to the RF_ThreadInstanceIndex field contained in this message fragment
    *
    * @return The reference to the accessor to the RF_ThreadInstanceIndex field.
    */
  uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& getRF_ThreadInstanceIndex() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setRF_ThreadInstanceIndex(const uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& accessor) override;

  /** Returns the accessor to the AntennaResource field contained in this message fragment
    *
    * @return The const reference to the accessor to the AntennaResource field.
    */
  const uci::type::RF_TransmissionType::AntennaResource& getAntennaResource() const override;

  /** Returns the accessor to the AntennaResource field contained in this message fragment
    *
    * @return The reference to the accessor to the AntennaResource field.
    */
  uci::type::RF_TransmissionType::AntennaResource& getAntennaResource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setAntennaResource(const uci::type::RF_TransmissionType::AntennaResource& accessor) override;

  /** Returns the contents of the message's ResourceAccessPriority field
    *
    * @return The contents of the ResourceAccessPriority field
    */
  xs::UnsignedInt getResourceAccessPriority() const override;

  /** Sets the contents of the message's ResourceAccessPriority field
    *
    * @param value The new value to set the ResourceAccessPriority field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setResourceAccessPriority(xs::UnsignedInt value) override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the Frequency field.
    */
  const uci::type::RF_TransmissionType::Frequency& getFrequency() const override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The reference to the accessor to the Frequency field.
    */
  uci::type::RF_TransmissionType::Frequency& getFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setFrequency(const uci::type::RF_TransmissionType::Frequency& accessor) override;

  /** Returns the accessor to the Polarization field contained in this message fragment
    *
    * @return The const reference to the accessor to the Polarization field.
    */
  const uci::type::RF_TransmissionType::Polarization& getPolarization() const override;

  /** Returns the accessor to the Polarization field contained in this message fragment
    *
    * @return The reference to the accessor to the Polarization field.
    */
  uci::type::RF_TransmissionType::Polarization& getPolarization() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setPolarization(const uci::type::RF_TransmissionType::Polarization& accessor) override;

  /** Returns the contents of the message's MaximumTransmitERP field
    *
    * @return The contents of the MaximumTransmitERP field
    */
  uci::type::DecibelTypeValue getMaximumTransmitERP() const override;

  /** Sets the contents of the message's MaximumTransmitERP field
    *
    * @param value The new value to set the MaximumTransmitERP field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setMaximumTransmitERP(uci::type::DecibelTypeValue value) override;

  /** Returns the accessor to the BlankingLimit field contained in this message fragment
    *
    * @return The const reference to the accessor to the BlankingLimit field.
    */
  const uci::type::RF_TransmissionType::BlankingLimit& getBlankingLimit() const override;

  /** Returns the accessor to the BlankingLimit field contained in this message fragment
    *
    * @return The reference to the accessor to the BlankingLimit field.
    */
  uci::type::RF_TransmissionType::BlankingLimit& getBlankingLimit() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setBlankingLimit(const uci::type::RF_TransmissionType::BlankingLimit& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getMinimumReceiveSensitivity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setMinimumReceiveSensitivity(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field MinimumReceiveSensitivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinimumReceiveSensitivity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& clearMinimumReceiveSensitivity() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentInterruptable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& setPercentInterruptable(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentInterruptableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentInterruptable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_TransmissionType& clearPercentInterruptable() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<RF_TransmissionType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_TransmissionType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::RF_TransmissionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<RF_ThreadInstanceIndex> rF_ThreadInstanceIndex_Accessor;
  std::unique_ptr<AntennaResource> antennaResource_Accessor;
  asb_xs::UnsignedInt resourceAccessPriority_Accessor{0};
  std::unique_ptr<Frequency> frequency_Accessor;
  std::unique_ptr<Polarization> polarization_Accessor;
  DecibelTypeValue maximumTransmitERP_Accessor{0.0};
  std::unique_ptr<BlankingLimit> blankingLimit_Accessor;
  boost::optional<DecibelTypeValue> minimumReceiveSensitivity_Accessor;
  boost::optional<PercentTypeValue> percentInterruptable_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_RF_TRANSMISSIONTYPE_H
