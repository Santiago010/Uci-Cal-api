/** @file TraceabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_TRACEABILITYTYPE_H
#define ASB_UCI_TYPE_TRACEABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "uci/type/TraceabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ACTDF_TraceabilityType;
class AOCO_TraceabilityType;
class ATO_TraceabilityType;
class CS_STO_TraceabilityType;
class CollectionDeckTraceabilityType;
class EEI_ID_Type;
class RequirementInstanceID_ChoiceType;

/** Tasking sources work at different levels of detail and abstraction, progressing from what to do to how specifically
  * to do it. Inputs from abstract tasking sources and Tasks can be decomposed into discrete, actionable Tasks. This type
  * provides traceability to the external tasking or Task from which this Task was derived.
  */
class TraceabilityType : public virtual uci::type::TraceabilityType {
public:
  /** Indicates a Requirement (Effect, Action, Task, [Capability]Command or Response) which the subject traces/originates
    * from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Requirement = asb_uci::base::BoundedList<uci::type::RequirementInstanceID_ChoiceType, uci::type::accessorType::requirementInstanceID_ChoiceType, asb_uci::type::RequirementInstanceID_ChoiceType>;

  /** Indicates a reference to an external (non-UCI) tasking source, the collection deck, which the subject
    * traces/originates from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CollectionDeckTraceability = asb_uci::base::BoundedList<uci::type::CollectionDeckTraceabilityType, uci::type::accessorType::collectionDeckTraceabilityType, asb_uci::type::CollectionDeckTraceabilityType>;

  /** Indicates a reference to an external (non-UCI) tasking source, Airborne Collection Tasking Message, the subject
    * traces/originates from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ACTDF_Traceability = asb_uci::base::BoundedList<uci::type::ACTDF_TraceabilityType, uci::type::accessorType::aCTDF_TraceabilityType, asb_uci::type::ACTDF_TraceabilityType>;

  /** Indicates a reference to an external (non-UCI) tasking source, Essential Element of Information, the subject
    * traces/originates from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using EEI_ID = asb_uci::base::BoundedList<uci::type::EEI_ID_Type, uci::type::accessorType::eEI_ID_Type, asb_uci::type::EEI_ID_Type>;

  /** Indicates a reference to an external (non-UCI) tasking source, the Air Tasking Order, the subject traces/originates
    * from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ATO_Traceability = asb_uci::base::BoundedList<uci::type::ATO_TraceabilityType, uci::type::accessorType::aTO_TraceabilityType, asb_uci::type::ATO_TraceabilityType>;

  /** The constructor */
  TraceabilityType();

  /** The copy constructor
    *
    * @param rhs The TraceabilityType to copy from
    */
  TraceabilityType(const TraceabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The TraceabilityType to move from
    */
  TraceabilityType(TraceabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The TraceabilityType to copy from
    * @return The TraceabilityType that was assigned
    */
  TraceabilityType& operator=(const TraceabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The TraceabilityType to move from
    * @return The TraceabilityType that was assigned
    */
  TraceabilityType& operator=(TraceabilityType&& rhs) = delete;

  /** The destructor */
  virtual ~TraceabilityType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::TraceabilityType whose contents are to be used to set this
    *      uci::type::TraceabilityType's contents.
    */
  void copy(const uci::type::TraceabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::TraceabilityType whose contents are to be used to set this
    *      uci::type::TraceabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::TraceabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the Requirement field contained in this message fragment
    *
    * @return The const reference to the accessor to the Requirement field.
    */
  const uci::type::TraceabilityType::Requirement& getRequirement() const override;

  /** Returns the accessor to the Requirement field contained in this message fragment
    *
    * @return The reference to the accessor to the Requirement field.
    */
  uci::type::TraceabilityType::Requirement& getRequirement() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& setRequirement(const uci::type::TraceabilityType::Requirement& accessor) override;

  /** Returns the accessor to the CollectionDeckTraceability field contained in this message fragment
    *
    * @return The const reference to the accessor to the CollectionDeckTraceability field.
    */
  const uci::type::TraceabilityType::CollectionDeckTraceability& getCollectionDeckTraceability() const override;

  /** Returns the accessor to the CollectionDeckTraceability field contained in this message fragment
    *
    * @return The reference to the accessor to the CollectionDeckTraceability field.
    */
  uci::type::TraceabilityType::CollectionDeckTraceability& getCollectionDeckTraceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& setCollectionDeckTraceability(const uci::type::TraceabilityType::CollectionDeckTraceability& accessor) override;

  /** Returns the accessor to the ACTDF_Traceability field contained in this message fragment
    *
    * @return The const reference to the accessor to the ACTDF_Traceability field.
    */
  const uci::type::TraceabilityType::ACTDF_Traceability& getACTDF_Traceability() const override;

  /** Returns the accessor to the ACTDF_Traceability field contained in this message fragment
    *
    * @return The reference to the accessor to the ACTDF_Traceability field.
    */
  uci::type::TraceabilityType::ACTDF_Traceability& getACTDF_Traceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& setACTDF_Traceability(const uci::type::TraceabilityType::ACTDF_Traceability& accessor) override;

  /** Returns the accessor to the EEI_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EEI_ID field.
    */
  const uci::type::TraceabilityType::EEI_ID& getEEI_ID() const override;

  /** Returns the accessor to the EEI_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the EEI_ID field.
    */
  uci::type::TraceabilityType::EEI_ID& getEEI_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& setEEI_ID(const uci::type::TraceabilityType::EEI_ID& accessor) override;

  /** Returns the accessor to the ATO_Traceability field contained in this message fragment
    *
    * @return The const reference to the accessor to the ATO_Traceability field.
    */
  const uci::type::TraceabilityType::ATO_Traceability& getATO_Traceability() const override;

  /** Returns the accessor to the ATO_Traceability field contained in this message fragment
    *
    * @return The reference to the accessor to the ATO_Traceability field.
    */
  uci::type::TraceabilityType::ATO_Traceability& getATO_Traceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& setATO_Traceability(const uci::type::TraceabilityType::ATO_Traceability& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AOCO_TraceabilityType& getAOCO_Traceability_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AOCO_TraceabilityType& getAOCO_Traceability() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AOCO_TraceabilityType& getAOCO_Traceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& setAOCO_Traceability(const uci::type::AOCO_TraceabilityType& accessor) override;

  /** Returns whether this optional field AOCO_Traceabilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAOCO_Traceability() const noexcept override;

  /** Enables the optional field such that getAOCO_Traceability will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AOCO_TraceabilityType& enableAOCO_Traceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& clearAOCO_Traceability() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_STO_TraceabilityType& getSTO_Traceability_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CS_STO_TraceabilityType& getSTO_Traceability() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_STO_TraceabilityType& getSTO_Traceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& setSTO_Traceability(const uci::type::CS_STO_TraceabilityType& accessor) override;

  /** Returns whether this optional field STO_Traceabilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSTO_Traceability() const noexcept override;

  /** Enables the optional field such that getSTO_Traceability will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_STO_TraceabilityType& enableSTO_Traceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::TraceabilityType& clearSTO_Traceability() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<TraceabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::TraceabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::TraceabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Requirement> requirement_Accessor;
  std::unique_ptr<CollectionDeckTraceability> collectionDeckTraceability_Accessor;
  std::unique_ptr<ACTDF_Traceability> aCTDF_Traceability_Accessor;
  std::unique_ptr<EEI_ID> eEI_ID_Accessor;
  std::unique_ptr<ATO_Traceability> aTO_Traceability_Accessor;
  std::unique_ptr<AOCO_TraceabilityType> aOCO_Traceability_Accessor;
  std::unique_ptr<CS_STO_TraceabilityType> sTO_Traceability_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_TRACEABILITYTYPE_H
