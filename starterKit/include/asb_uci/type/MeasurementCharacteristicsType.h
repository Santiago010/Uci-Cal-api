/** @file MeasurementCharacteristicsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MEASUREMENTCHARACTERISTICSTYPE_H
#define ASB_UCI_TYPE_MEASUREMENTCHARACTERISTICSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DecibelType.h"
#include "asb_uci/type/FrequencyType.h"
#include "asb_uci/type/IrradianceType.h"
#include "asb_uci/type/PassiveActiveEnum.h"
#include "asb_uci/type/PathIdentificationEnum.h"
#include "asb_uci/type/PercentType.h"
#include "uci/type/MeasurementCharacteristicsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AltitudeReferenceUncertaintyType;
class FOV_ExtentType;
class FrequencyRangeType;
class MeasurementDurationType;
class NameValuePairType;
class RCS_MedianType;
class SourceCharacteristicsType;
class SourceCoverageType;
class SourceResolutionType;
class SpaceObjectVisualDataType;

/** See annotations in child elements and messages/elements that use this type for details. */
class MeasurementCharacteristicsType : public virtual uci::type::MeasurementCharacteristicsType {
public:
  /** Indicates the measured radar cross section of the object being observed which is the median of the RCS hits that
    * participated in the formation of the observation. If sensor supports dual polarizations, then collection can provide
    * output for two RCS median values, one per polarization. [Occurrences: Minimum: 0; Maximum: 2]
    */
  using RadarCrossSection = asb_uci::base::BoundedList<uci::type::RCS_MedianType, uci::type::accessorType::rCS_MedianType, asb_uci::type::RCS_MedianType>;

  /** These supplemental characteristics are measurement specific and may not be relevant to all producers. Reference the
    * data provider's interface control document or service specification to determine if this data will be provided.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CustomCharacteristics = asb_uci::base::BoundedList<uci::type::NameValuePairType, uci::type::accessorType::nameValuePairType, asb_uci::type::NameValuePairType>;

  /** The constructor */
  MeasurementCharacteristicsType();

  /** The copy constructor
    *
    * @param rhs The MeasurementCharacteristicsType to copy from
    */
  MeasurementCharacteristicsType(const MeasurementCharacteristicsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MeasurementCharacteristicsType to move from
    */
  MeasurementCharacteristicsType(MeasurementCharacteristicsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MeasurementCharacteristicsType to copy from
    * @return The MeasurementCharacteristicsType that was assigned
    */
  MeasurementCharacteristicsType& operator=(const MeasurementCharacteristicsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MeasurementCharacteristicsType to move from
    * @return The MeasurementCharacteristicsType that was assigned
    */
  MeasurementCharacteristicsType& operator=(MeasurementCharacteristicsType&& rhs) = delete;

  /** The destructor */
  virtual ~MeasurementCharacteristicsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MeasurementCharacteristicsType whose contents are to be used to set this
    *      uci::type::MeasurementCharacteristicsType's contents.
    */
  void copy(const uci::type::MeasurementCharacteristicsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MeasurementCharacteristicsType whose contents are to be used to set this
    *      uci::type::MeasurementCharacteristicsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MeasurementCharacteristicsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PassiveActiveEnum& getPassiveActiveIndicator_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PassiveActiveEnum& getPassiveActiveIndicator() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PassiveActiveEnum& getPassiveActiveIndicator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setPassiveActiveIndicator(const uci::type::PassiveActiveEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setPassiveActiveIndicator(uci::type::PassiveActiveEnum::EnumerationItem value) override;

  /** Returns whether this optional field PassiveActiveIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPassiveActiveIndicator() const noexcept override;

  /** Enables the optional field such that getPassiveActiveIndicator will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PassiveActiveEnum& enablePassiveActiveIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearPassiveActiveIndicator() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementDurationType& getMeasurementDuration_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementDurationType& getMeasurementDuration() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementDurationType& getMeasurementDuration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setMeasurementDuration(const uci::type::MeasurementDurationType& accessor) override;

  /** Returns whether this optional field MeasurementDurationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMeasurementDuration() const noexcept override;

  /** Enables the optional field such that getMeasurementDuration will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementDurationType& enableMeasurementDuration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearMeasurementDuration() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PathIdentificationEnum& getPathIdentification_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PathIdentificationEnum& getPathIdentification() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PathIdentificationEnum& getPathIdentification() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setPathIdentification(const uci::type::PathIdentificationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setPathIdentification(uci::type::PathIdentificationEnum::EnumerationItem value) override;

  /** Returns whether this optional field PathIdentificationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPathIdentification() const noexcept override;

  /** Enables the optional field such that getPathIdentification will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PathIdentificationEnum& enablePathIdentification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearPathIdentification() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCoverageType& getSourceCoverage_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SourceCoverageType& getSourceCoverage() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCoverageType& getSourceCoverage() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setSourceCoverage(const uci::type::SourceCoverageType& accessor) override;

  /** Returns whether this optional field SourceCoverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceCoverage() const noexcept override;

  /** Enables the optional field such that getSourceCoverage will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCoverageType& enableSourceCoverage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearSourceCoverage() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AltitudeReferenceUncertaintyType& getAltitudeReported_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AltitudeReferenceUncertaintyType& getAltitudeReported() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AltitudeReferenceUncertaintyType& getAltitudeReported() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setAltitudeReported(const uci::type::AltitudeReferenceUncertaintyType& accessor) override;

  /** Returns whether this optional field AltitudeReportedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAltitudeReported() const noexcept override;

  /** Enables the optional field such that getAltitudeReported will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AltitudeReferenceUncertaintyType& enableAltitudeReported(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearAltitudeReported() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ExtentType& getSourceAngularExtent_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOV_ExtentType& getSourceAngularExtent() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ExtentType& getSourceAngularExtent() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setSourceAngularExtent(const uci::type::FOV_ExtentType& accessor) override;

  /** Returns whether this optional field SourceAngularExtentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceAngularExtent() const noexcept override;

  /** Enables the optional field such that getSourceAngularExtent will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_ExtentType& enableSourceAngularExtent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearSourceAngularExtent() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceResolutionType& getSourceResolution_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SourceResolutionType& getSourceResolution() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceResolutionType& getSourceResolution() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setSourceResolution(const uci::type::SourceResolutionType& accessor) override;

  /** Returns whether this optional field SourceResolutionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceResolution() const noexcept override;

  /** Enables the optional field such that getSourceResolution will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceResolutionType& enableSourceResolution(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearSourceResolution() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getCenterFrequency() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setCenterFrequency(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field CenterFrequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCenterFrequency() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearCenterFrequency() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getBandwidth_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FrequencyRangeType& getBandwidth() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getBandwidth() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setBandwidth(const uci::type::FrequencyRangeType& accessor) override;

  /** Returns whether this optional field Bandwidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBandwidth() const noexcept override;

  /** Enables the optional field such that getBandwidth will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& enableBandwidth(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearBandwidth() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setSourceSpecifiedCharacteristics(const uci::type::SourceCharacteristicsType& accessor) override;

  /** Returns whether this optional field SourceSpecifiedCharacteristicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceSpecifiedCharacteristics() const noexcept override;

  /** Enables the optional field such that getSourceSpecifiedCharacteristics will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SourceCharacteristicsType& enableSourceSpecifiedCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearSourceSpecifiedCharacteristics() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::IrradianceTypeValue getTargetIrradiance() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setTargetIrradiance(uci::type::IrradianceTypeValue value) override;

  /** Returns whether this optional field TargetIrradianceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTargetIrradiance() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearTargetIrradiance() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getProbabilityOfDetection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setProbabilityOfDetection(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field ProbabilityOfDetectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProbabilityOfDetection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearProbabilityOfDetection() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getProbabilityOfFalseAlarm() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setProbabilityOfFalseAlarm(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field ProbabilityOfFalseAlarmis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProbabilityOfFalseAlarm() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearProbabilityOfFalseAlarm() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getSNR() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setSNR(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field SNRis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSNR() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearSNR() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getSBR() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setSBR(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field SBRis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSBR() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearSBR() noexcept override;

  /** Returns the accessor to the RadarCrossSection field contained in this message fragment
    *
    * @return The const reference to the accessor to the RadarCrossSection field.
    */
  const uci::type::MeasurementCharacteristicsType::RadarCrossSection& getRadarCrossSection() const override;

  /** Returns the accessor to the RadarCrossSection field contained in this message fragment
    *
    * @return The reference to the accessor to the RadarCrossSection field.
    */
  uci::type::MeasurementCharacteristicsType::RadarCrossSection& getRadarCrossSection() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setRadarCrossSection(const uci::type::MeasurementCharacteristicsType::RadarCrossSection& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpaceObjectVisualDataType& getSpaceObjectVisualData_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SpaceObjectVisualDataType& getSpaceObjectVisualData() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpaceObjectVisualDataType& getSpaceObjectVisualData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setSpaceObjectVisualData(const uci::type::SpaceObjectVisualDataType& accessor) override;

  /** Returns whether this optional field SpaceObjectVisualDatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSpaceObjectVisualData() const noexcept override;

  /** Enables the optional field such that getSpaceObjectVisualData will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpaceObjectVisualDataType& enableSpaceObjectVisualData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& clearSpaceObjectVisualData() noexcept override;

  /** Returns the accessor to the CustomCharacteristics field contained in this message fragment
    *
    * @return The const reference to the accessor to the CustomCharacteristics field.
    */
  const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& getCustomCharacteristics() const override;

  /** Returns the accessor to the CustomCharacteristics field contained in this message fragment
    *
    * @return The reference to the accessor to the CustomCharacteristics field.
    */
  uci::type::MeasurementCharacteristicsType::CustomCharacteristics& getCustomCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementCharacteristicsType& setCustomCharacteristics(const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MeasurementCharacteristicsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MeasurementCharacteristicsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MeasurementCharacteristicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PassiveActiveEnum> passiveActiveIndicator_Accessor;
  std::unique_ptr<MeasurementDurationType> measurementDuration_Accessor;
  std::unique_ptr<PathIdentificationEnum> pathIdentification_Accessor;
  std::unique_ptr<SourceCoverageType> sourceCoverage_Accessor;
  std::unique_ptr<AltitudeReferenceUncertaintyType> altitudeReported_Accessor;
  std::unique_ptr<FOV_ExtentType> sourceAngularExtent_Accessor;
  std::unique_ptr<SourceResolutionType> sourceResolution_Accessor;
  boost::optional<FrequencyTypeValue> centerFrequency_Accessor;
  std::unique_ptr<FrequencyRangeType> bandwidth_Accessor;
  std::unique_ptr<SourceCharacteristicsType> sourceSpecifiedCharacteristics_Accessor;
  boost::optional<IrradianceTypeValue> targetIrradiance_Accessor;
  boost::optional<PercentTypeValue> probabilityOfDetection_Accessor;
  boost::optional<PercentTypeValue> probabilityOfFalseAlarm_Accessor;
  boost::optional<DecibelTypeValue> sNR_Accessor;
  boost::optional<DecibelTypeValue> sBR_Accessor;
  std::unique_ptr<RadarCrossSection> radarCrossSection_Accessor;
  std::unique_ptr<SpaceObjectVisualDataType> spaceObjectVisualData_Accessor;
  std::unique_ptr<CustomCharacteristics> customCharacteristics_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MEASUREMENTCHARACTERISTICSTYPE_H
