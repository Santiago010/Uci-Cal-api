/** @file SubsystemStatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SUBSYSTEMSTATUSMDT_H
#define ASB_UCI_TYPE_SUBSYSTEMSTATUSMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ProcessingStatusEnum.h"
#include "../../../include/asb_uci/type/StateTransitionStatusEnum.h"
#include "../../../include/asb_uci/type/SubsystemStateEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemStatusMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AboutType;
class ComponentType;
class SubsystemEnabledSettingType;
class SubsystemExtendedStatusPET;
class SubsystemID_Type;
class SubsystemSupportedSettingType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SubsystemStatusMDT : public virtual uci::type::SubsystemStatusMDT {
public:
  /** Indicates a Subsystem setting that is currently enabled. Settings are enabled/disabled via the
    * SubsystemSettingsCommand. See SubsystemSettingEnum for further details. If multiple instances are given, each should
    * be of a different setting type as indicated by the child element. [Occurrences: Minimum: 0; Maximum: 8]
    */
  using EnabledSetting = asb_uci::base::BoundedList<uci::type::SubsystemEnabledSettingType, uci::type::accessorType::subsystemEnabledSettingType, asb_uci::type::SubsystemEnabledSettingType>;

  /** SettingParameters identified here indicate the SettingParameters specified in the SubsystemConfiguration message that
    * are commandable at this point in time. [Occurrences: Minimum: 0; Maximum: 8]
    */
  using CommandableSubsystemSettingParameters = asb_uci::base::BoundedList<uci::type::SubsystemSupportedSettingType, uci::type::accessorType::subsystemSupportedSettingType, asb_uci::type::SubsystemSupportedSettingType>;

  /** Indicates the possible state or states the Subsystem can be commanded to transition into from its current state. This
    * is not intended to replace the service contract but is intended to be used to advertise state transitions that change
    * depending on things such as the altitude an aircraft is at. For example, a subsystem on an aircraft is not able to
    * transition to state X until it reaches 30K ft., something that is difficult/impossible to do with a service contract.
    * List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 14]
    */
  using CommandableSubsystemState = asb_uci::base::BoundedList<uci::type::SubsystemStateEnum, uci::type::accessorType::subsystemStateEnum, asb_uci::type::SubsystemStateEnum>;

  /** Indicates an auxiliary or subordinate Component of this Subsystem. Components can be physical or functional. Any
    * Component that is relevant to the state, health and/or C2 of the Subsystem can be reported. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SubsystemComponent = asb_uci::base::BoundedList<uci::type::ComponentType, uci::type::accessorType::componentType, asb_uci::type::ComponentType>;

  /** The constructor */
  SubsystemStatusMDT();

  /** The copy constructor
    *
    * @param rhs The SubsystemStatusMDT to copy from
    */
  SubsystemStatusMDT(const SubsystemStatusMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SubsystemStatusMDT to move from
    */
  SubsystemStatusMDT(SubsystemStatusMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SubsystemStatusMDT to copy from
    * @return The SubsystemStatusMDT that was assigned
    */
  SubsystemStatusMDT& operator=(const SubsystemStatusMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SubsystemStatusMDT to move from
    * @return The SubsystemStatusMDT that was assigned
    */
  SubsystemStatusMDT& operator=(SubsystemStatusMDT&& rhs) = delete;

  /** The destructor */
  virtual ~SubsystemStatusMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SubsystemStatusMDT whose contents are to be used to set this
    *      uci::type::SubsystemStatusMDT's contents.
    */
  void copy(const uci::type::SubsystemStatusMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SubsystemStatusMDT whose contents are to be used to set this
    *      uci::type::SubsystemStatusMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SubsystemStatusMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SubsystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubsystemID field.
    */
  const uci::type::SubsystemID_Type& getSubsystemID() const override;

  /** Returns the accessor to the SubsystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SubsystemID field.
    */
  uci::type::SubsystemID_Type& getSubsystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setSubsystemID(const uci::type::SubsystemID_Type& accessor) override;

  /** Returns the contents of the message's SubsystemState field
    *
    * @return The contents of the SubsystemState field
    */
  const uci::type::SubsystemStateEnum& getSubsystemState() const override;

  /** Returns the contents of the message's SubsystemState field
    *
    * @return The contents of the SubsystemState field
    */
  uci::type::SubsystemStateEnum& getSubsystemState() override;

  /** Sets the contents of the message's SubsystemState field
    *
    * @param accessor The accessor to use to set the SubsystemState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setSubsystemState(const uci::type::SubsystemStateEnum& accessor) override;

  /** Sets the contents of the message's SubsystemState field
    *
    * @param value The new value to set the SubsystemState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setSubsystemState(uci::type::SubsystemStateEnum::EnumerationItem value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  std::string& getSubsystemStateDescription_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const std::string& getSubsystemStateDescription() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  std::string& getSubsystemStateDescription() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setSubsystemStateDescription(const uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setSubsystemStateDescription(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setSubsystemStateDescription(const char* value) override;

  /** Returns whether this optional field subsystemStateDescription_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubsystemStateDescription() const noexcept override;

  /** Enables the optional field such that getSubsystemStateDescription will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  std::string& enableSubsystemStateDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& clearSubsystemStateDescription() noexcept override;

  /** Returns the accessor to the EnabledSetting field contained in this message fragment
    *
    * @return The const reference to the accessor to the EnabledSetting field.
    */
  const uci::type::SubsystemStatusMDT::EnabledSetting& getEnabledSetting() const override;

  /** Returns the accessor to the EnabledSetting field contained in this message fragment
    *
    * @return The reference to the accessor to the EnabledSetting field.
    */
  uci::type::SubsystemStatusMDT::EnabledSetting& getEnabledSetting() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setEnabledSetting(const uci::type::SubsystemStatusMDT::EnabledSetting& accessor) override;

  /** Returns the accessor to the CommandableSubsystemSettingParameters field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommandableSubsystemSettingParameters field.
    */
  const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& getCommandableSubsystemSettingParameters() const override;

  /** Returns the accessor to the CommandableSubsystemSettingParameters field contained in this message fragment
    *
    * @return The reference to the accessor to the CommandableSubsystemSettingParameters field.
    */
  uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& getCommandableSubsystemSettingParameters() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setCommandableSubsystemSettingParameters(const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProcessingStatusEnum& getEraseStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ProcessingStatusEnum& getEraseStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProcessingStatusEnum& getEraseStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setEraseStatus(const uci::type::ProcessingStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setEraseStatus(uci::type::ProcessingStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field EraseStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEraseStatus() const noexcept override;

  /** Enables the optional field such that getEraseStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ProcessingStatusEnum& enableEraseStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& clearEraseStatus() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StateTransitionStatusEnum& getStateTransitionStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::StateTransitionStatusEnum& getStateTransitionStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StateTransitionStatusEnum& getStateTransitionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setStateTransitionStatus(const uci::type::StateTransitionStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setStateTransitionStatus(uci::type::StateTransitionStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field StateTransitionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStateTransitionStatus() const noexcept override;

  /** Enables the optional field such that getStateTransitionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StateTransitionStatusEnum& enableStateTransitionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& clearStateTransitionStatus() noexcept override;

  /** Returns the accessor to the CommandableSubsystemState field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommandableSubsystemState field.
    */
  const uci::type::SubsystemStatusMDT::CommandableSubsystemState& getCommandableSubsystemState() const override;

  /** Returns the accessor to the CommandableSubsystemState field contained in this message fragment
    *
    * @return The reference to the accessor to the CommandableSubsystemState field.
    */
  uci::type::SubsystemStatusMDT::CommandableSubsystemState& getCommandableSubsystemState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setCommandableSubsystemState(const uci::type::SubsystemStatusMDT::CommandableSubsystemState& accessor) override;

  /** Returns the accessor to the About field contained in this message fragment
    *
    * @return The const reference to the accessor to the About field.
    */
  const uci::type::AboutType& getAbout() const override;

  /** Returns the accessor to the About field contained in this message fragment
    *
    * @return The reference to the accessor to the About field.
    */
  uci::type::AboutType& getAbout() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setAbout(const uci::type::AboutType& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemExtendedStatusPET& getExtendedStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SubsystemExtendedStatusPET& getExtendedStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemExtendedStatusPET& getExtendedStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setExtendedStatus(const uci::type::SubsystemExtendedStatusPET& accessor) override;

  /** Returns whether this optional field ExtendedStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasExtendedStatus() const noexcept override;

  /** Enables the optional field such that getExtendedStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemExtendedStatusPET& enableExtendedStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& clearExtendedStatus() noexcept override;

  /** Returns the accessor to the SubsystemComponent field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubsystemComponent field.
    */
  const uci::type::SubsystemStatusMDT::SubsystemComponent& getSubsystemComponent() const override;

  /** Returns the accessor to the SubsystemComponent field contained in this message fragment
    *
    * @return The reference to the accessor to the SubsystemComponent field.
    */
  uci::type::SubsystemStatusMDT::SubsystemComponent& getSubsystemComponent() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SubsystemStatusMDT& setSubsystemComponent(const uci::type::SubsystemStatusMDT::SubsystemComponent& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SubsystemStatusMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SubsystemStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SubsystemID_Type> subsystemID_Accessor;
  std::unique_ptr<SubsystemStateEnum> subsystemState_Accessor;
  std::unique_ptr<std::string> subsystemStateDescription_Accessor;
  std::unique_ptr<EnabledSetting> enabledSetting_Accessor;
  std::unique_ptr<CommandableSubsystemSettingParameters> commandableSubsystemSettingParameters_Accessor;
  std::unique_ptr<ProcessingStatusEnum> eraseStatus_Accessor;
  std::unique_ptr<StateTransitionStatusEnum> stateTransitionStatus_Accessor;
  std::unique_ptr<CommandableSubsystemState> commandableSubsystemState_Accessor;
  std::unique_ptr<AboutType> about_Accessor;
  std::unique_ptr<SubsystemExtendedStatusPET> extendedStatus_Accessor;
  std::unique_ptr<SubsystemComponent> subsystemComponent_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SUBSYSTEMSTATUSMDT_H
