/** @file ESM_ReceiveDwellType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ESM_RECEIVEDWELLTYPE_H
#define ASB_UCI_TYPE_ESM_RECEIVEDWELLTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_uci/type/DecibelType.h"
#include "asb_uci/type/DurationType.h"
#include "asb_uci/type/ESM_DwellStateEnum.h"
#include "asb_uci/type/ESM_DwellTypeEnum.h"
#include "asb_uci/type/FrequencyType.h"
#include "asb_uci/type/MilliwattPowerRatioType.h"
#include "uci/type/ESM_ReceiveDwellType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentID_Type;
class DwellID_Type;
class ESM_AcquisitionTargetType;
class FrequencyRangeType;
class NED_ConeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ESM_ReceiveDwellType : public virtual uci::type::ESM_ReceiveDwellType {
public:
  /** Indicates an ESM component with the dwell is assigned to use. Required if the dwell is assigned/active. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ComponentID = asb_uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type, asb_uci::type::ComponentID_Type>;

  /** Indicates the frequency coverage of the dwell, including all RF_ControlCommand, ESM_Command, MDF and other
    * restrictions. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Frequency = asb_uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType, asb_uci::type::FrequencyRangeType>;

  /** Indicates a target of the Dwell. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using DwellTarget = asb_uci::base::BoundedList<uci::type::ESM_AcquisitionTargetType, uci::type::accessorType::eSM_AcquisitionTargetType, asb_uci::type::ESM_AcquisitionTargetType>;

  /** The constructor */
  ESM_ReceiveDwellType();

  /** The copy constructor
    *
    * @param rhs The ESM_ReceiveDwellType to copy from
    */
  ESM_ReceiveDwellType(const ESM_ReceiveDwellType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ESM_ReceiveDwellType to move from
    */
  ESM_ReceiveDwellType(ESM_ReceiveDwellType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ESM_ReceiveDwellType to copy from
    * @return The ESM_ReceiveDwellType that was assigned
    */
  ESM_ReceiveDwellType& operator=(const ESM_ReceiveDwellType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ESM_ReceiveDwellType to move from
    * @return The ESM_ReceiveDwellType that was assigned
    */
  ESM_ReceiveDwellType& operator=(ESM_ReceiveDwellType&& rhs) = delete;

  /** The destructor */
  virtual ~ESM_ReceiveDwellType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ESM_ReceiveDwellType whose contents are to be used to set this
    *      uci::type::ESM_ReceiveDwellType's contents.
    */
  void copy(const uci::type::ESM_ReceiveDwellType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ESM_ReceiveDwellType whose contents are to be used to set this
    *      uci::type::ESM_ReceiveDwellType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ESM_ReceiveDwellType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the DwellID field contained in this message fragment
    *
    * @return The const reference to the accessor to the DwellID field.
    */
  const uci::type::DwellID_Type& getDwellID() const override;

  /** Returns the accessor to the DwellID field contained in this message fragment
    *
    * @return The reference to the accessor to the DwellID field.
    */
  uci::type::DwellID_Type& getDwellID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellID(const uci::type::DwellID_Type& accessor) override;

  /** Returns the contents of the message's DwellState field
    *
    * @return The contents of the DwellState field
    */
  const uci::type::ESM_DwellStateEnum& getDwellState() const override;

  /** Returns the contents of the message's DwellState field
    *
    * @return The contents of the DwellState field
    */
  uci::type::ESM_DwellStateEnum& getDwellState() override;

  /** Sets the contents of the message's DwellState field
    *
    * @param accessor The accessor to use to set the DwellState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellState(const uci::type::ESM_DwellStateEnum& accessor) override;

  /** Sets the contents of the message's DwellState field
    *
    * @param value The new value to set the DwellState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellState(uci::type::ESM_DwellStateEnum::EnumerationItem value) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ESM_DwellTypeEnum& getDwellType_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ESM_DwellTypeEnum& getDwellType() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ESM_DwellTypeEnum& getDwellType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellType(const uci::type::ESM_DwellTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellType(uci::type::ESM_DwellTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field DwellTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDwellType() const noexcept override;

  /** Enables the optional field such that getDwellType will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ESM_DwellTypeEnum& enableDwellType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearDwellType() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NED_ConeType& getDwellFOV_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NED_ConeType& getDwellFOV() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NED_ConeType& getDwellFOV() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellFOV(const uci::type::NED_ConeType& accessor) override;

  /** Returns whether this optional field DwellFOVis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDwellFOV() const noexcept override;

  /** Enables the optional field such that getDwellFOV will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NED_ConeType& enableDwellFOV(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearDwellFOV() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getStartTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setStartTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field StartTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStartTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearStartTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getCumulativeDwellTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setCumulativeDwellTime(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field CumulativeDwellTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCumulativeDwellTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearCumulativeDwellTime() noexcept override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentID field.
    */
  const uci::type::ESM_ReceiveDwellType::ComponentID& getComponentID() const override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentID field.
    */
  uci::type::ESM_ReceiveDwellType::ComponentID& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setComponentID(const uci::type::ESM_ReceiveDwellType::ComponentID& accessor) override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the Frequency field.
    */
  const uci::type::ESM_ReceiveDwellType::Frequency& getFrequency() const override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The reference to the accessor to the Frequency field.
    */
  uci::type::ESM_ReceiveDwellType::Frequency& getFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setFrequency(const uci::type::ESM_ReceiveDwellType::Frequency& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getDwellRevisitInterval() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellRevisitInterval(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field DwellRevisitIntervalis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDwellRevisitInterval() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearDwellRevisitInterval() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidthLow() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setPulseWidthLow(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthLowis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthLow() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearPulseWidthLow() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidthHigh() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setPulseWidthHigh(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthHighis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthHigh() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearPulseWidthHigh() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPRI_High() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setPRI_High(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PRI_Highis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_High() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearPRI_High() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getNativeSensitivity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setNativeSensitivity(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field NativeSensitivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNativeSensitivity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearNativeSensitivity() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getDesensitization() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDesensitization(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field Desensitizationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDesensitization() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearDesensitization() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getVideoBandwidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setVideoBandwidth(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field VideoBandwidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVideoBandwidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& clearVideoBandwidth() noexcept override;

  /** Returns the accessor to the DwellTarget field contained in this message fragment
    *
    * @return The const reference to the accessor to the DwellTarget field.
    */
  const uci::type::ESM_ReceiveDwellType::DwellTarget& getDwellTarget() const override;

  /** Returns the accessor to the DwellTarget field contained in this message fragment
    *
    * @return The reference to the accessor to the DwellTarget field.
    */
  uci::type::ESM_ReceiveDwellType::DwellTarget& getDwellTarget() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ESM_ReceiveDwellType& setDwellTarget(const uci::type::ESM_ReceiveDwellType::DwellTarget& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ESM_ReceiveDwellType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_ReceiveDwellType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ESM_ReceiveDwellType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<DwellID_Type> dwellID_Accessor;
  std::unique_ptr<ESM_DwellStateEnum> dwellState_Accessor;
  std::unique_ptr<ESM_DwellTypeEnum> dwellType_Accessor;
  std::unique_ptr<NED_ConeType> dwellFOV_Accessor;
  boost::optional<DateTimeTypeValue> startTime_Accessor;
  boost::optional<DurationTypeValue> cumulativeDwellTime_Accessor;
  std::unique_ptr<ComponentID> componentID_Accessor;
  std::unique_ptr<Frequency> frequency_Accessor;
  boost::optional<DurationTypeValue> dwellRevisitInterval_Accessor;
  boost::optional<DurationTypeValue> pulseWidthLow_Accessor;
  boost::optional<DurationTypeValue> pulseWidthHigh_Accessor;
  boost::optional<DurationTypeValue> pRI_High_Accessor;
  boost::optional<DecibelTypeValue> nativeSensitivity_Accessor;
  boost::optional<MilliwattPowerRatioTypeValue> desensitization_Accessor;
  boost::optional<FrequencyTypeValue> videoBandwidth_Accessor;
  std::unique_ptr<DwellTarget> dwellTarget_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ESM_RECEIVEDWELLTYPE_H
