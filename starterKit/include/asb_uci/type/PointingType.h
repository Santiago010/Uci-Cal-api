/** @file PointingType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_POINTINGTYPE_H
#define ASB_UCI_TYPE_POINTINGTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/FixedPointingEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PointingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityID_Type;
class LOS_D_Type;
class PO_AirTargetVolumeCommandType;
class TargetType;

/** Indicates the position or location to point the XX Subsystem to do a XX collection, track, or search as part of an XX
  * Activity. If the XX Subsystem cannot point itself, then the TurretSlaved Type is used. If the system wants to allow
  * the subsystem to control its own LOS then the ActivitySlavedID is used. FixedPointing is used to point to a
  * predetermined location defined by its Enum values.
  */
class PointingType : public virtual uci::type::PointingType {
public:
  /** Indicates the source of or explicit values for geospatial characteristics of the target of the Command. When multiple
    * points/targets are given, a best-fit, multi-track or similar behavior is expected. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  using Geospatial = asb_uci::base::BoundedList<uci::type::TargetType, uci::type::accessorType::targetType, asb_uci::type::TargetType>;

  /** Indicates the volume or specific Entity that defines the extents of the spatial region covered by the command. For
    * non-cued Capabilities, one air volume instance of this element is expected. For cued Capabilities, two instances of
    * this element are allowed: one with an Entity specified and a second with an air volume that define the extents of the
    * cue volume around the Entity. For cued Capabilities, a single instance is allowed if it is an Entity in which case
    * the Entity location uncertainty defines the extents of the cue volume. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using Volume = asb_uci::base::BoundedList<uci::type::PO_AirTargetVolumeCommandType, uci::type::accessorType::pO_AirTargetVolumeCommandType, asb_uci::type::PO_AirTargetVolumeCommandType>;

  /** The constructor */
  PointingType();

  /** The copy constructor
    *
    * @param rhs The PointingType to copy from
    */
  PointingType(const PointingType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PointingType to move from
    */
  PointingType(PointingType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The PointingType to copy from
    * @return The PointingType that was assigned
    */
  PointingType& operator=(const PointingType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PointingType to move from
    * @return The PointingType that was assigned
    */
  PointingType& operator=(PointingType&& rhs) = delete;

  /** The destructor */
  virtual ~PointingType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PointingType whose contents are to be used to set this uci::type::PointingType's
    *      contents.
    */
  void copy(const uci::type::PointingType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PointingType whose contents are to be used to set this uci::type::PointingType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PointingType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::PointingType::PointingTypeChoice getPointingTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getPointingTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setPointingTypeChoiceOrdinal(uci::type::PointingType::PointingTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Geospatial item contained in this message fragment
    *
    * @return The const reference to the accessor to the Geospatial item.
    */
  uci::type::PointingType::Geospatial& getGeospatial_() const;

  /** Returns the accessor to the Geospatial item contained in this message fragment
    *
    * @return The const reference to the accessor to the Geospatial item.
    */
  const uci::type::PointingType::Geospatial& getGeospatial() const override;

  /** Returns the accessor to the Geospatial item contained in this message fragment
    *
    * @return The reference to the accessor to the Geospatial item.
    */
  uci::type::PointingType::Geospatial& getGeospatial() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setGeospatial(const uci::type::PointingType::Geospatial& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Geospatial.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Geospatial, false otherwise.
    */
  bool isGeospatial() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Geospatial.
    *
    * @return A reference to the accessor that provides access to the choice identified by Geospatial.
    */
  uci::type::PointingType::Geospatial& chooseGeospatial() override;

  /** Returns the accessor to the LOS_Option field contained in this message fragment
    *
    * @return The const reference to the accessor to the LOS_Option field.
    */
  uci::type::LOS_D_Type& getLOS_Option_() const;

  /** Returns the accessor to the LOS_Option field contained in this message fragment
    *
    * @return The const reference to the accessor to the LOS_Option field.
    */
  const uci::type::LOS_D_Type& getLOS_Option() const override;

  /** Returns the accessor to the LOS_Option field contained in this message fragment
    *
    * @return The reference to the accessor to the LOS_Option field.
    */
  uci::type::LOS_D_Type& getLOS_Option() override;

  /** Sets this choice's choice to be LOS_Option and initializes LOS_Option to be the specified value. A deep copy will be
    * used by this method to set LOS_Option
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setLOS_Option(const uci::type::LOS_D_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LOS_Option.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LOS_Option, false otherwise.
    */
  bool isLOS_Option() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by LOS_Option.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LOS_Option.
    */
  uci::type::LOS_D_Type& chooseLOS_Option(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by LOS_Option.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LOS_Option.
    */
  uci::type::LOS_D_Type& chooseLOS_Option(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Volume item contained in this message fragment
    *
    * @return The const reference to the accessor to the Volume item.
    */
  uci::type::PointingType::Volume& getVolume_() const;

  /** Returns the accessor to the Volume item contained in this message fragment
    *
    * @return The const reference to the accessor to the Volume item.
    */
  const uci::type::PointingType::Volume& getVolume() const override;

  /** Returns the accessor to the Volume item contained in this message fragment
    *
    * @return The reference to the accessor to the Volume item.
    */
  uci::type::PointingType::Volume& getVolume() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setVolume(const uci::type::PointingType::Volume& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Volume.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Volume, false otherwise.
    */
  bool isVolume() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Volume.
    *
    * @return A reference to the accessor that provides access to the choice identified by Volume.
    */
  uci::type::PointingType::Volume& chooseVolume() override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getTurretSlaved_() const;

  /** Returns the contents of the message's TurretSlaved item
    *
    * @return The contents of the TurretSlaved field
    */
  const uci::type::EmptyType& getTurretSlaved() const override;

  /** Returns the contents of the message's TurretSlaved item
    *
    * @return The contents of the TurretSlaved field
    */
  uci::type::EmptyType& getTurretSlaved() override;

  /** Sets this choice's choice to be TurretSlaved and initializes TurretSlaved to be the specified value
    *
    * @param value The new value to set TurretSlaved to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setTurretSlaved(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be TurretSlaved and initializes TurretSlaved to be the specified value
    *
    * @param value The new value to set TurretSlaved to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setTurretSlaved(const std::string& value) override;

  /** Sets this choice's choice to be TurretSlaved and initializes TurretSlaved to be the specified value
    *
    * @param value The new value to set TurretSlaved to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setTurretSlaved(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TurretSlaved.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TurretSlaved, false otherwise.
    */
  bool isTurretSlaved() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by TurretSlaved.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TurretSlaved.
    */
  uci::type::EmptyType& chooseTurretSlaved(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by TurretSlaved.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TurretSlaved.
    */
  uci::type::EmptyType& chooseTurretSlaved(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ActivitySlavedID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivitySlavedID field.
    */
  uci::type::ActivityID_Type& getActivitySlavedID_() const;

  /** Returns the accessor to the ActivitySlavedID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivitySlavedID field.
    */
  const uci::type::ActivityID_Type& getActivitySlavedID() const override;

  /** Returns the accessor to the ActivitySlavedID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivitySlavedID field.
    */
  uci::type::ActivityID_Type& getActivitySlavedID() override;

  /** Sets this choice's choice to be activitySlavedID and initializes activitySlavedID to be the specified value. A deep
    * copy will be used by this method to set activitySlavedID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setActivitySlavedID(const uci::type::ActivityID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ActivitySlavedID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ActivitySlavedID, false
    *      otherwise.
    */
  bool isActivitySlavedID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ActivitySlavedID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActivitySlavedID.
    */
  uci::type::ActivityID_Type& chooseActivitySlavedID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ActivitySlavedID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActivitySlavedID.
    */
  uci::type::ActivityID_Type& chooseActivitySlavedID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's FixedPointing item
    *
    * @return The contents of the FixedPointing item
    */
  uci::type::FixedPointingEnum& getFixedPointing_() const;

  /** Returns the contents of the message's FixedPointing item
    *
    * @return The contents of the FixedPointing item
    */
  const uci::type::FixedPointingEnum& getFixedPointing() const override;

  /** Returns the contents of the message's FixedPointing item
    *
    * @return The contents of the FixedPointing item
    */
  uci::type::FixedPointingEnum& getFixedPointing() override;

  /** Sets this choice's choice to be FixedPointing and initializes FixedPointing to be the specified value
    *
    * @param accessor The new value to set the FixedPointing item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setFixedPointing(const uci::type::FixedPointingEnum& accessor) override;

  /** Sets this choice's choice to be FixedPointing and initializes FixedPointing to be the specified value
    *
    * @param value The new value to set the FixedPointing item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PointingType& setFixedPointing(uci::type::FixedPointingEnum::EnumerationItem value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FixedPointing.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FixedPointing, false otherwise.
    */
  bool isFixedPointing() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FixedPointing.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FixedPointing.
    */
  uci::type::FixedPointingEnum& chooseFixedPointing(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by FixedPointing.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FixedPointing.
    */
  uci::type::FixedPointingEnum& chooseFixedPointing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PointingType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PointingType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PointingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Geospatial> geospatial_Accessor;
  std::unique_ptr<LOS_D_Type> lOS_Option_Accessor;
  std::unique_ptr<Volume> volume_Accessor;
  std::unique_ptr<EmptyType> turretSlaved_Accessor;
  std::unique_ptr<ActivityID_Type> activitySlavedID_Accessor;
  std::unique_ptr<FixedPointingEnum> fixedPointing_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_POINTINGTYPE_H
