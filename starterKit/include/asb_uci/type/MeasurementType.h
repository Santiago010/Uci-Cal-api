/** @file MeasurementType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MEASUREMENTTYPE_H
#define ASB_UCI_TYPE_MEASUREMENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/MeasurementType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EntityID_Type;
class ForeignKeyType;
class IdentityConfidenceType;
class MeasurementCharacteristicsType;
class MeasurementGroupID_Type;
class MeasurementID_Type;
class MeasurementKinematicsChoiceType;
class ObjectKinematicsChoiceType;
class PulseDataID_Type;
class SensorKinematicsChoiceType;
class SignalID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class MeasurementType : public virtual uci::type::MeasurementType {
public:
  /** Indicates which measurements correspond to same object(s) (multipath processing). [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using MeasurementGroupID = asb_uci::base::BoundedList<uci::type::MeasurementGroupID_Type, uci::type::accessorType::measurementGroupID_Type, asb_uci::type::MeasurementGroupID_Type>;

  /** This element represents the unique identifier(s) of the PulseData message(s) associated with the sibling
    * MeasurementID. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using PulseDataID = asb_uci::base::BoundedList<uci::type::PulseDataID_Type, uci::type::accessorType::pulseDataID_Type, asb_uci::type::PulseDataID_Type>;

  /** This element represents the unique identifier(s) associated with the sibling MeasurementID. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SignalID = asb_uci::base::BoundedList<uci::type::SignalID_Type, uci::type::accessorType::signalID_Type, asb_uci::type::SignalID_Type>;

  /** The constructor */
  MeasurementType();

  /** The copy constructor
    *
    * @param rhs The MeasurementType to copy from
    */
  MeasurementType(const MeasurementType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MeasurementType to move from
    */
  MeasurementType(MeasurementType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MeasurementType to copy from
    * @return The MeasurementType that was assigned
    */
  MeasurementType& operator=(const MeasurementType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MeasurementType to move from
    * @return The MeasurementType that was assigned
    */
  MeasurementType& operator=(MeasurementType&& rhs) = delete;

  /** The destructor */
  virtual ~MeasurementType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MeasurementType whose contents are to be used to set this uci::type::MeasurementType's
    *      contents.
    */
  void copy(const uci::type::MeasurementType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MeasurementType whose contents are to be used to set this uci::type::MeasurementType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MeasurementType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the MeasurementID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MeasurementID field.
    */
  const uci::type::MeasurementID_Type& getMeasurementID() const override;

  /** Returns the accessor to the MeasurementID field contained in this message fragment
    *
    * @return The reference to the accessor to the MeasurementID field.
    */
  uci::type::MeasurementID_Type& getMeasurementID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setMeasurementID(const uci::type::MeasurementID_Type& accessor) override;

  /** Returns the contents of the message's IndependentMeasurement field
    *
    * @return The contents of the IndependentMeasurement field
    */
  xs::Boolean getIndependentMeasurement() const override;

  /** Sets the contents of the message's IndependentMeasurement field
    *
    * @param value The new value to set the IndependentMeasurement field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setIndependentMeasurement(xs::Boolean value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getUncorrelatedMeasurement() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setUncorrelatedMeasurement(xs::Boolean value) override;

  /** Returns whether this optional field UncorrelatedMeasurementis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUncorrelatedMeasurement() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearUncorrelatedMeasurement() noexcept override;

  /** Returns the contents of the message's Timestamp field
    *
    * @return The contents of the Timestamp field
    */
  uci::type::DateTimeTypeValue getTimestamp() const override;

  /** Sets the contents of the message's Timestamp field
    *
    * @param value The new value to set the Timestamp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns the accessor to the MeasurementGroupID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MeasurementGroupID field.
    */
  const uci::type::MeasurementType::MeasurementGroupID& getMeasurementGroupID() const override;

  /** Returns the accessor to the MeasurementGroupID field contained in this message fragment
    *
    * @return The reference to the accessor to the MeasurementGroupID field.
    */
  uci::type::MeasurementType::MeasurementGroupID& getMeasurementGroupID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setMeasurementGroupID(const uci::type::MeasurementType::MeasurementGroupID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getLocalTrackIdentifier_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getLocalTrackIdentifier() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getLocalTrackIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setLocalTrackIdentifier(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field LocalTrackIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocalTrackIdentifier() const noexcept override;

  /** Enables the optional field such that getLocalTrackIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableLocalTrackIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearLocalTrackIdentifier() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityID_Type& getEntityID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EntityID_Type& getEntityID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityID_Type& getEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setEntityID(const uci::type::EntityID_Type& accessor) override;

  /** Returns whether this optional field EntityIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEntityID() const noexcept override;

  /** Enables the optional field such that getEntityID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityID_Type& enableEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearEntityID() noexcept override;

  /** Returns the accessor to the PulseDataID field contained in this message fragment
    *
    * @return The const reference to the accessor to the PulseDataID field.
    */
  const uci::type::MeasurementType::PulseDataID& getPulseDataID() const override;

  /** Returns the accessor to the PulseDataID field contained in this message fragment
    *
    * @return The reference to the accessor to the PulseDataID field.
    */
  uci::type::MeasurementType::PulseDataID& getPulseDataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setPulseDataID(const uci::type::MeasurementType::PulseDataID& accessor) override;

  /** Returns the accessor to the SignalID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SignalID field.
    */
  const uci::type::MeasurementType::SignalID& getSignalID() const override;

  /** Returns the accessor to the SignalID field contained in this message fragment
    *
    * @return The reference to the accessor to the SignalID field.
    */
  uci::type::MeasurementType::SignalID& getSignalID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setSignalID(const uci::type::MeasurementType::SignalID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityConfidenceType& getObjectIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::IdentityConfidenceType& getObjectIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityConfidenceType& getObjectIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setObjectIdentity(const uci::type::IdentityConfidenceType& accessor) override;

  /** Returns whether this optional field ObjectIdentityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObjectIdentity() const noexcept override;

  /** Enables the optional field such that getObjectIdentity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityConfidenceType& enableObjectIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearObjectIdentity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ObjectKinematicsChoiceType& getPredictedObjectKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ObjectKinematicsChoiceType& getPredictedObjectKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ObjectKinematicsChoiceType& getPredictedObjectKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setPredictedObjectKinematics(const uci::type::ObjectKinematicsChoiceType& accessor) override;

  /** Returns whether this optional field PredictedObjectKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPredictedObjectKinematics() const noexcept override;

  /** Enables the optional field such that getPredictedObjectKinematics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ObjectKinematicsChoiceType& enablePredictedObjectKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearPredictedObjectKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementCharacteristicsType& getMeasurementCharacteristics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementCharacteristicsType& getMeasurementCharacteristics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementCharacteristicsType& getMeasurementCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setMeasurementCharacteristics(const uci::type::MeasurementCharacteristicsType& accessor) override;

  /** Returns whether this optional field MeasurementCharacteristicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMeasurementCharacteristics() const noexcept override;

  /** Enables the optional field such that getMeasurementCharacteristics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementCharacteristicsType& enableMeasurementCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearMeasurementCharacteristics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setMeasurementKinematics(const uci::type::MeasurementKinematicsChoiceType& accessor) override;

  /** Returns whether this optional field MeasurementKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMeasurementKinematics() const noexcept override;

  /** Enables the optional field such that getMeasurementKinematics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementKinematicsChoiceType& enableMeasurementKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearMeasurementKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SensorKinematicsChoiceType& getReferenceKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SensorKinematicsChoiceType& getReferenceKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SensorKinematicsChoiceType& getReferenceKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& setReferenceKinematics(const uci::type::SensorKinematicsChoiceType& accessor) override;

  /** Returns whether this optional field ReferenceKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReferenceKinematics() const noexcept override;

  /** Enables the optional field such that getReferenceKinematics will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SensorKinematicsChoiceType& enableReferenceKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MeasurementType& clearReferenceKinematics() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MeasurementType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MeasurementType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MeasurementType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MeasurementID_Type> measurementID_Accessor;
  asb_xs::Boolean independentMeasurement_Accessor{false};
  boost::optional<asb_xs::Boolean> uncorrelatedMeasurement_Accessor;
  DateTimeTypeValue timestamp_Accessor{0};
  std::unique_ptr<MeasurementGroupID> measurementGroupID_Accessor;
  std::unique_ptr<ForeignKeyType> localTrackIdentifier_Accessor;
  std::unique_ptr<EntityID_Type> entityID_Accessor;
  std::unique_ptr<PulseDataID> pulseDataID_Accessor;
  std::unique_ptr<SignalID> signalID_Accessor;
  std::unique_ptr<IdentityConfidenceType> objectIdentity_Accessor;
  std::unique_ptr<ObjectKinematicsChoiceType> predictedObjectKinematics_Accessor;
  std::unique_ptr<MeasurementCharacteristicsType> measurementCharacteristics_Accessor;
  std::unique_ptr<MeasurementKinematicsChoiceType> measurementKinematics_Accessor;
  std::unique_ptr<SensorKinematicsChoiceType> referenceKinematics_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MEASUREMENTTYPE_H
