/** @file MDF_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MDF_TYPE_H
#define ASB_UCI_TYPE_MDF_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/MDF_StatusEnum.h"
#include "uci/type/MDF_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class MDF_ID_Type;
class MDF_SubCategoryType;

/** Indicates a Mission Data File (MDF) and its status. A MDF is a collection of data, organized into files, that is used
  * to tailor, configure or otherwise affect the behavior of a Capability. MDFs can vary from mission to mission or even
  * by phases of a single mission. They are generally developed in pre-mission planning and are unique for each Subsystem
  * model. Their content is not standardized by UCI, but the mechanism for advertising their availability and activating
  * them is. Their content is abstracted by the UCI concept of Capability.
  */
class MDF_Type : public virtual uci::type::MDF_Type {
public:
  /** Indicates a subcategory of files that make up the MDF. When an MDF is "active", at most one file from each
    * subcategory can be active. The subcategory concept allows a variety of MDF structures across Capability types and
    * manufacturers. For an ESM Capability, example subcategories could be "scan files" and "emitter ID files". For an EA
    * Capability, an example is "jam files". This element is optional to support Capabilities or Subsystems whose MDF isn't
    * decomposed into individually selectable categories and files. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SubCategory = asb_uci::base::BoundedList<uci::type::MDF_SubCategoryType, uci::type::accessorType::mDF_SubCategoryType, asb_uci::type::MDF_SubCategoryType>;

  /** The constructor */
  MDF_Type();

  /** The copy constructor
    *
    * @param rhs The MDF_Type to copy from
    */
  MDF_Type(const MDF_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MDF_Type to move from
    */
  MDF_Type(MDF_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MDF_Type to copy from
    * @return The MDF_Type that was assigned
    */
  MDF_Type& operator=(const MDF_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MDF_Type to move from
    * @return The MDF_Type that was assigned
    */
  MDF_Type& operator=(MDF_Type&& rhs) = delete;

  /** The destructor */
  virtual ~MDF_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MDF_Type whose contents are to be used to set this uci::type::MDF_Type's contents.
    */
  void copy(const uci::type::MDF_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MDF_Type whose contents are to be used to set this uci::type::MDF_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MDF_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the MDF_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MDF_ID field.
    */
  const uci::type::MDF_ID_Type& getMDF_ID() const override;

  /** Returns the accessor to the MDF_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the MDF_ID field.
    */
  uci::type::MDF_ID_Type& getMDF_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MDF_Type& setMDF_ID(const uci::type::MDF_ID_Type& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MDF_StatusEnum& getMDF_Status_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MDF_StatusEnum& getMDF_Status() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MDF_StatusEnum& getMDF_Status() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MDF_Type& setMDF_Status(const uci::type::MDF_StatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MDF_Type& setMDF_Status(uci::type::MDF_StatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field MDF_Statusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMDF_Status() const noexcept override;

  /** Enables the optional field such that getMDF_Status will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MDF_StatusEnum& enableMDF_Status(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MDF_Type& clearMDF_Status() noexcept override;

  /** Returns the accessor to the SubCategory field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCategory field.
    */
  const uci::type::MDF_Type::SubCategory& getSubCategory() const override;

  /** Returns the accessor to the SubCategory field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCategory field.
    */
  uci::type::MDF_Type::SubCategory& getSubCategory() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MDF_Type& setSubCategory(const uci::type::MDF_Type::SubCategory& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MDF_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MDF_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MDF_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MDF_ID_Type> mDF_ID_Accessor;
  std::unique_ptr<MDF_StatusEnum> mDF_Status_Accessor;
  std::unique_ptr<SubCategory> subCategory_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MDF_TYPE_H
