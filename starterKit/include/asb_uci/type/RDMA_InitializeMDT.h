/** @file RDMA_InitializeMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_RDMA_INITIALIZEMDT_H
#define ASB_UCI_TYPE_RDMA_INITIALIZEMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/RDMA_DataTransferServiceEnum.h"
#include "asb_uci/type/RDMA_EndpointTypeEnum.h"
#include "asb_uci/type/RDMA_ProviderEnum.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/RDMA_InitializeMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class NetworkEndpointType;
class RDMA_InitializeID_Type;
class RDMA_InitializeSetupID_Type;
class ServiceID_Type;
class SubsystemID_Type;
class SystemID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class RDMA_InitializeMDT : public virtual uci::type::RDMA_InitializeMDT {
public:
  /** Indicates the network endpoints (IP addresses) available for data transfers. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Endpoint = asb_uci::base::BoundedList<uci::type::NetworkEndpointType, uci::type::accessorType::networkEndpointType, asb_uci::type::NetworkEndpointType>;

  /** The constructor */
  RDMA_InitializeMDT();

  /** The copy constructor
    *
    * @param rhs The RDMA_InitializeMDT to copy from
    */
  RDMA_InitializeMDT(const RDMA_InitializeMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The RDMA_InitializeMDT to move from
    */
  RDMA_InitializeMDT(RDMA_InitializeMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The RDMA_InitializeMDT to copy from
    * @return The RDMA_InitializeMDT that was assigned
    */
  RDMA_InitializeMDT& operator=(const RDMA_InitializeMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The RDMA_InitializeMDT to move from
    * @return The RDMA_InitializeMDT that was assigned
    */
  RDMA_InitializeMDT& operator=(RDMA_InitializeMDT&& rhs) = delete;

  /** The destructor */
  virtual ~RDMA_InitializeMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RDMA_InitializeMDT whose contents are to be used to set this
    *      uci::type::RDMA_InitializeMDT's contents.
    */
  void copy(const uci::type::RDMA_InitializeMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RDMA_InitializeMDT whose contents are to be used to set this
    *      uci::type::RDMA_InitializeMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::RDMA_InitializeMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the RDMA_InitializeID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RDMA_InitializeID field.
    */
  const uci::type::RDMA_InitializeID_Type& getRDMA_InitializeID() const override;

  /** Returns the accessor to the RDMA_InitializeID field contained in this message fragment
    *
    * @return The reference to the accessor to the RDMA_InitializeID field.
    */
  uci::type::RDMA_InitializeID_Type& getRDMA_InitializeID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_InitializeID(const uci::type::RDMA_InitializeID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RDMA_InitializeSetupID_Type& getRDMA_InitializeSetupID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RDMA_InitializeSetupID_Type& getRDMA_InitializeSetupID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RDMA_InitializeSetupID_Type& getRDMA_InitializeSetupID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_InitializeSetupID(const uci::type::RDMA_InitializeSetupID_Type& accessor) override;

  /** Returns whether this optional field RDMA_InitializeSetupIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRDMA_InitializeSetupID() const noexcept override;

  /** Enables the optional field such that getRDMA_InitializeSetupID will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RDMA_InitializeSetupID_Type& enableRDMA_InitializeSetupID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& clearRDMA_InitializeSetupID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemID_Type& getSystemID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemID_Type& getSystemID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemID_Type& getSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setSystemID(const uci::type::SystemID_Type& accessor) override;

  /** Returns whether this optional field SystemIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSystemID() const noexcept override;

  /** Enables the optional field such that getSystemID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemID_Type& enableSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& clearSystemID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& getSubsystemID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SubsystemID_Type& getSubsystemID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& getSubsystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setSubsystemID(const uci::type::SubsystemID_Type& accessor) override;

  /** Returns whether this optional field SubsystemIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubsystemID() const noexcept override;

  /** Enables the optional field such that getSubsystemID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& enableSubsystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& clearSubsystemID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ServiceID_Type& getServiceID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ServiceID_Type& getServiceID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ServiceID_Type& getServiceID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setServiceID(const uci::type::ServiceID_Type& accessor) override;

  /** Returns whether this optional field ServiceIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasServiceID() const noexcept override;

  /** Enables the optional field such that getServiceID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ServiceID_Type& enableServiceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& clearServiceID() noexcept override;

  /** Returns the contents of the message's MemoryRegionSize field
    *
    * @return The contents of the MemoryRegionSize field
    */
  xs::UnsignedInt getMemoryRegionSize() const override;

  /** Sets the contents of the message's MemoryRegionSize field
    *
    * @param value The new value to set the MemoryRegionSize field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setMemoryRegionSize(xs::UnsignedInt value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getMaximumMessageSize() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setMaximumMessageSize(xs::UnsignedInt value) override;

  /** Returns whether this optional field MaximumMessageSizeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMaximumMessageSize() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& clearMaximumMessageSize() noexcept override;

  /** Returns the accessor to the Endpoint field contained in this message fragment
    *
    * @return The const reference to the accessor to the Endpoint field.
    */
  const uci::type::RDMA_InitializeMDT::Endpoint& getEndpoint() const override;

  /** Returns the accessor to the Endpoint field contained in this message fragment
    *
    * @return The reference to the accessor to the Endpoint field.
    */
  uci::type::RDMA_InitializeMDT::Endpoint& getEndpoint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setEndpoint(const uci::type::RDMA_InitializeMDT::Endpoint& accessor) override;

  /** Returns the contents of the message's RDMA_Provider field
    *
    * @return The contents of the RDMA_Provider field
    */
  const uci::type::RDMA_ProviderEnum& getRDMA_Provider() const override;

  /** Returns the contents of the message's RDMA_Provider field
    *
    * @return The contents of the RDMA_Provider field
    */
  uci::type::RDMA_ProviderEnum& getRDMA_Provider() override;

  /** Sets the contents of the message's RDMA_Provider field
    *
    * @param accessor The accessor to use to set the RDMA_Provider field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_Provider(const uci::type::RDMA_ProviderEnum& accessor) override;

  /** Sets the contents of the message's RDMA_Provider field
    *
    * @param value The new value to set the RDMA_Provider field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_Provider(uci::type::RDMA_ProviderEnum::EnumerationItem value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getEndpointName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString1024Type& getEndpointName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getEndpointName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setEndpointName(const uci::type::VisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setEndpointName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setEndpointName(const char* value) override;

  /** Returns whether this optional field endpointName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEndpointName() const noexcept override;

  /** Enables the optional field such that getEndpointName will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& enableEndpointName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& clearEndpointName() noexcept override;

  /** Returns the contents of the message's RDMA_EndpointType field
    *
    * @return The contents of the RDMA_EndpointType field
    */
  const uci::type::RDMA_EndpointTypeEnum& getRDMA_EndpointType() const override;

  /** Returns the contents of the message's RDMA_EndpointType field
    *
    * @return The contents of the RDMA_EndpointType field
    */
  uci::type::RDMA_EndpointTypeEnum& getRDMA_EndpointType() override;

  /** Sets the contents of the message's RDMA_EndpointType field
    *
    * @param accessor The accessor to use to set the RDMA_EndpointType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_EndpointType(const uci::type::RDMA_EndpointTypeEnum& accessor) override;

  /** Sets the contents of the message's RDMA_EndpointType field
    *
    * @param value The new value to set the RDMA_EndpointType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_EndpointType(uci::type::RDMA_EndpointTypeEnum::EnumerationItem value) override;

  /** Returns the contents of the message's RDMA_DataTransferService field
    *
    * @return The contents of the RDMA_DataTransferService field
    */
  const uci::type::RDMA_DataTransferServiceEnum& getRDMA_DataTransferService() const override;

  /** Returns the contents of the message's RDMA_DataTransferService field
    *
    * @return The contents of the RDMA_DataTransferService field
    */
  uci::type::RDMA_DataTransferServiceEnum& getRDMA_DataTransferService() override;

  /** Sets the contents of the message's RDMA_DataTransferService field
    *
    * @param accessor The accessor to use to set the RDMA_DataTransferService field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_DataTransferService(const uci::type::RDMA_DataTransferServiceEnum& accessor) override;

  /** Sets the contents of the message's RDMA_DataTransferService field
    *
    * @param value The new value to set the RDMA_DataTransferService field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_DataTransferService(uci::type::RDMA_DataTransferServiceEnum::EnumerationItem value) override;

  /** Returns the contents of the message's RDMA_MemoryProtectionLocalRead field
    *
    * @return The contents of the RDMA_MemoryProtectionLocalRead field
    */
  xs::Boolean getRDMA_MemoryProtectionLocalRead() const override;

  /** Sets the contents of the message's RDMA_MemoryProtectionLocalRead field
    *
    * @param value The new value to set the RDMA_MemoryProtectionLocalRead field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_MemoryProtectionLocalRead(xs::Boolean value) override;

  /** Returns the contents of the message's RDMA_MemoryProtectionLocalWrite field
    *
    * @return The contents of the RDMA_MemoryProtectionLocalWrite field
    */
  xs::Boolean getRDMA_MemoryProtectionLocalWrite() const override;

  /** Sets the contents of the message's RDMA_MemoryProtectionLocalWrite field
    *
    * @param value The new value to set the RDMA_MemoryProtectionLocalWrite field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_MemoryProtectionLocalWrite(xs::Boolean value) override;

  /** Returns the contents of the message's RDMA_MemoryProtectionRemoteRead field
    *
    * @return The contents of the RDMA_MemoryProtectionRemoteRead field
    */
  xs::Boolean getRDMA_MemoryProtectionRemoteRead() const override;

  /** Sets the contents of the message's RDMA_MemoryProtectionRemoteRead field
    *
    * @param value The new value to set the RDMA_MemoryProtectionRemoteRead field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_MemoryProtectionRemoteRead(xs::Boolean value) override;

  /** Returns the contents of the message's RDMA_MemoryProtectionRemoteWrite field
    *
    * @return The contents of the RDMA_MemoryProtectionRemoteWrite field
    */
  xs::Boolean getRDMA_MemoryProtectionRemoteWrite() const override;

  /** Sets the contents of the message's RDMA_MemoryProtectionRemoteWrite field
    *
    * @param value The new value to set the RDMA_MemoryProtectionRemoteWrite field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RDMA_InitializeMDT& setRDMA_MemoryProtectionRemoteWrite(xs::Boolean value) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<RDMA_InitializeMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::RDMA_InitializeMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::RDMA_InitializeMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<RDMA_InitializeID_Type> rDMA_InitializeID_Accessor;
  std::unique_ptr<RDMA_InitializeSetupID_Type> rDMA_InitializeSetupID_Accessor;
  std::unique_ptr<SystemID_Type> systemID_Accessor;
  std::unique_ptr<SubsystemID_Type> subsystemID_Accessor;
  std::unique_ptr<ServiceID_Type> serviceID_Accessor;
  asb_xs::UnsignedInt memoryRegionSize_Accessor{0};
  boost::optional<asb_xs::UnsignedInt> maximumMessageSize_Accessor;
  std::unique_ptr<Endpoint> endpoint_Accessor;
  std::unique_ptr<RDMA_ProviderEnum> rDMA_Provider_Accessor;
  std::unique_ptr<VisibleString1024Type> endpointName_Accessor;
  std::unique_ptr<RDMA_EndpointTypeEnum> rDMA_EndpointType_Accessor;
  std::unique_ptr<RDMA_DataTransferServiceEnum> rDMA_DataTransferService_Accessor;
  asb_xs::Boolean rDMA_MemoryProtectionLocalRead_Accessor{false};
  asb_xs::Boolean rDMA_MemoryProtectionLocalWrite_Accessor{false};
  asb_xs::Boolean rDMA_MemoryProtectionRemoteRead_Accessor{false};
  asb_xs::Boolean rDMA_MemoryProtectionRemoteWrite_Accessor{false};

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_RDMA_INITIALIZEMDT_H
