/** @file PO_CapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_CAPABILITYTYPE_H
#define ASB_UCI_TYPE_PO_CAPABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "asb_uci/type/PO_CapabilityEnum.h"
#include "asb_uci/type/PO_MessageOutputsEnum.h"
#include "uci/type/PO_CapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentID_Type;
class PO_CapabilityOptionsType;
class SubCapabilityID_Type;
class TrackOptionsID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_CapabilityType : public virtual uci::type::PO_CapabilityType, public virtual CommandableCapabilityDeclarationType {
public:
  /** Indicates a command and control relevant Subsystem SubCapability associated with the Capability. A subcapability
    * unique ID can: 1.Associate with Multiple Capabilities. In this case, a change to a subcapability with this unique ID
    * will impact all associated capabilities. 2.Associated with a single capability. In this case, a change to a
    * subcapability with this unique ID will impact only the associated capability. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using AssociatedSubCapabilityID = asb_uci::base::BoundedList<uci::type::SubCapabilityID_Type, uci::type::accessorType::subCapabilityID_Type, asb_uci::type::SubCapabilityID_Type>;

  /** Indicates a command and control relevant Subsystem Component associated with the Capability. A component unique ID
    * can: 1.Associate with Multiple Capabilities. In this case, a change to a component with this unique ID will impact
    * all associated capabilities. 2.Associated with a single capability. In this case, a change to a component with this
    * unique ID will impact only the associated capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssociatedComponentID = asb_uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type, asb_uci::type::ComponentID_Type>;

  /** Indicates a command and control relevant Subsystem Track Options associated with the Capability. A track option
    * unique ID can: 1.Associate with Multiple Capabilities. In this case, a change to a track option with this unique ID
    * will impact all associated capabilities. 2.Associated with a single capability. In this case, a change to a track
    * option with this unique ID will impact only the associated capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssociatedTrackOptionID = asb_uci::base::BoundedList<uci::type::TrackOptionsID_Type, uci::type::accessorType::trackOptionsID_Type, asb_uci::type::TrackOptionsID_Type>;

  /** Indicates a message that is an output of the Capability. See enumerated type annotations for details. List size for
    * this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 4]
    */
  using MessageOutput = asb_uci::base::BoundedList<uci::type::PO_MessageOutputsEnum, uci::type::accessorType::pO_MessageOutputsEnum, asb_uci::type::PO_MessageOutputsEnum>;

  /** The constructor */
  PO_CapabilityType();

  /** The copy constructor
    *
    * @param rhs The PO_CapabilityType to copy from
    */
  PO_CapabilityType(const PO_CapabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_CapabilityType to move from
    */
  PO_CapabilityType(PO_CapabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_CapabilityType to copy from
    * @return The PO_CapabilityType that was assigned
    */
  PO_CapabilityType& operator=(const PO_CapabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_CapabilityType to move from
    * @return The PO_CapabilityType that was assigned
    */
  PO_CapabilityType& operator=(PO_CapabilityType&& rhs) = delete;

  /** The destructor */
  ~PO_CapabilityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CapabilityType whose contents are to be used to set this
    *      uci::type::PO_CapabilityType's contents.
    */
  void copy(const uci::type::PO_CapabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_CapabilityType whose contents are to be used to set this
    *      uci::type::PO_CapabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_CapabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  const uci::type::PO_CapabilityEnum& getCapabilityType() const override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  uci::type::PO_CapabilityEnum& getCapabilityType() override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param accessor The accessor to use to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityType& setCapabilityType(const uci::type::PO_CapabilityEnum& accessor) override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param value The new value to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityType& setCapabilityType(uci::type::PO_CapabilityEnum::EnumerationItem value) override;

  /** Returns the accessor to the AssociatedSubCapabilityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedSubCapabilityID field.
    */
  const uci::type::PO_CapabilityType::AssociatedSubCapabilityID& getAssociatedSubCapabilityID() const override;

  /** Returns the accessor to the AssociatedSubCapabilityID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedSubCapabilityID field.
    */
  uci::type::PO_CapabilityType::AssociatedSubCapabilityID& getAssociatedSubCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityType& setAssociatedSubCapabilityID(const uci::type::PO_CapabilityType::AssociatedSubCapabilityID& accessor) override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityOptions field.
    */
  const uci::type::PO_CapabilityOptionsType& getCapabilityOptions() const override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityOptions field.
    */
  uci::type::PO_CapabilityOptionsType& getCapabilityOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityType& setCapabilityOptions(const uci::type::PO_CapabilityOptionsType& accessor) override;

  /** Returns the accessor to the AssociatedComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedComponentID field.
    */
  const uci::type::PO_CapabilityType::AssociatedComponentID& getAssociatedComponentID() const override;

  /** Returns the accessor to the AssociatedComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedComponentID field.
    */
  uci::type::PO_CapabilityType::AssociatedComponentID& getAssociatedComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityType& setAssociatedComponentID(const uci::type::PO_CapabilityType::AssociatedComponentID& accessor) override;

  /** Returns the accessor to the AssociatedTrackOptionID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedTrackOptionID field.
    */
  const uci::type::PO_CapabilityType::AssociatedTrackOptionID& getAssociatedTrackOptionID() const override;

  /** Returns the accessor to the AssociatedTrackOptionID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedTrackOptionID field.
    */
  uci::type::PO_CapabilityType::AssociatedTrackOptionID& getAssociatedTrackOptionID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityType& setAssociatedTrackOptionID(const uci::type::PO_CapabilityType::AssociatedTrackOptionID& accessor) override;

  /** Returns the accessor to the MessageOutput field contained in this message fragment
    *
    * @return The const reference to the accessor to the MessageOutput field.
    */
  const uci::type::PO_CapabilityType::MessageOutput& getMessageOutput() const override;

  /** Returns the accessor to the MessageOutput field contained in this message fragment
    *
    * @return The reference to the accessor to the MessageOutput field.
    */
  uci::type::PO_CapabilityType::MessageOutput& getMessageOutput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_CapabilityType& setMessageOutput(const uci::type::PO_CapabilityType::MessageOutput& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_CapabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_CapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PO_CapabilityEnum> capabilityType_Accessor;
  std::unique_ptr<AssociatedSubCapabilityID> associatedSubCapabilityID_Accessor;
  std::unique_ptr<PO_CapabilityOptionsType> capabilityOptions_Accessor;
  std::unique_ptr<AssociatedComponentID> associatedComponentID_Accessor;
  std::unique_ptr<AssociatedTrackOptionID> associatedTrackOptionID_Accessor;
  std::unique_ptr<MessageOutput> messageOutput_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_CAPABILITYTYPE_H
