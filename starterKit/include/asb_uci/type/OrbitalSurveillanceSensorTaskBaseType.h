/** @file OrbitalSurveillanceSensorTaskBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ORBITALSURVEILLANCESENSORTASKBASETYPE_H
#define ASB_UCI_TYPE_ORBITALSURVEILLANCESENSORTASKBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSubCapabilityEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSensorTaskBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class OrbitalSurveillanceCollectionRequirementsType;
class OrbitalSurveillanceSensorReportingCategoriesType;
class OrbitalSurveillanceSensorSensitivityConstraintType;

/** The base type for an Orbital Surveillance Sensor Task. */
class OrbitalSurveillanceSensorTaskBaseType : public virtual uci::type::OrbitalSurveillanceSensorTaskBaseType {
public:
  /** Provides Capability-specific instructions and information to the sensor to enable appropriate sensor set-up and data
    * collection to meet the orbital surveillance collection need. Examples include minimum and maximum number of metric
    * observations per collection interval for a metric collection task, requirement for an imagery collection and desired
    * imagery resolution for a characterization task, and minimum separation distance for a multi-object task.
    * [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using CollectionRequirements = asb_uci::base::BoundedList<uci::type::OrbitalSurveillanceCollectionRequirementsType, uci::type::accessorType::orbitalSurveillanceCollectionRequirementsType, asb_uci::type::OrbitalSurveillanceCollectionRequirementsType>;

  /** This provides additional context for the sensor units to inform the decisions on which sensors are appropriate and
    * how best to set up collections. This context can help to compensate for shortfalls in the fidelity of the sensor
    * models. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 20]
    */
  using InformationObjective = asb_uci::base::BoundedList<uci::type::OrbitalSurveillanceSubCapabilityEnum, uci::type::accessorType::orbitalSurveillanceSubCapabilityEnum, asb_uci::type::OrbitalSurveillanceSubCapabilityEnum>;

  /** Indicates the SDA special reporting requirements, to include the product, priority, need by date, and/or entity for
    * which the product or products are to be reported. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ReportingRequirements = asb_uci::base::BoundedList<uci::type::OrbitalSurveillanceSensorReportingCategoriesType, uci::type::accessorType::orbitalSurveillanceSensorReportingCategoriesType, asb_uci::type::OrbitalSurveillanceSensorReportingCategoriesType>;

  /** The constructor */
  OrbitalSurveillanceSensorTaskBaseType();

  /** The copy constructor
    *
    * @param rhs The OrbitalSurveillanceSensorTaskBaseType to copy from
    */
  OrbitalSurveillanceSensorTaskBaseType(const OrbitalSurveillanceSensorTaskBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OrbitalSurveillanceSensorTaskBaseType to move from
    */
  OrbitalSurveillanceSensorTaskBaseType(OrbitalSurveillanceSensorTaskBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The OrbitalSurveillanceSensorTaskBaseType to copy from
    * @return The OrbitalSurveillanceSensorTaskBaseType that was assigned
    */
  OrbitalSurveillanceSensorTaskBaseType& operator=(const OrbitalSurveillanceSensorTaskBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OrbitalSurveillanceSensorTaskBaseType to move from
    * @return The OrbitalSurveillanceSensorTaskBaseType that was assigned
    */
  OrbitalSurveillanceSensorTaskBaseType& operator=(OrbitalSurveillanceSensorTaskBaseType&& rhs) = delete;

  /** The destructor */
  virtual ~OrbitalSurveillanceSensorTaskBaseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalSurveillanceSensorTaskBaseType whose contents are to be used to set this
    *      uci::type::OrbitalSurveillanceSensorTaskBaseType's contents.
    */
  void copy(const uci::type::OrbitalSurveillanceSensorTaskBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalSurveillanceSensorTaskBaseType whose contents are to be used to set this
    *      uci::type::OrbitalSurveillanceSensorTaskBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OrbitalSurveillanceSensorTaskBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  const uci::type::OrbitalSurveillanceSensorCapabilityEnum& getCapabilityType() const override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  uci::type::OrbitalSurveillanceSensorCapabilityEnum& getCapabilityType() override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param accessor The accessor to use to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setCapabilityType(const uci::type::OrbitalSurveillanceSensorCapabilityEnum& accessor) override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param value The new value to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setCapabilityType(uci::type::OrbitalSurveillanceSensorCapabilityEnum::EnumerationItem value) override;

  /** Returns the accessor to the CollectionRequirements field contained in this message fragment
    *
    * @return The const reference to the accessor to the CollectionRequirements field.
    */
  const uci::type::OrbitalSurveillanceSensorTaskBaseType::CollectionRequirements& getCollectionRequirements() const override;

  /** Returns the accessor to the CollectionRequirements field contained in this message fragment
    *
    * @return The reference to the accessor to the CollectionRequirements field.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType::CollectionRequirements& getCollectionRequirements() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setCollectionRequirements(const uci::type::OrbitalSurveillanceSensorTaskBaseType::CollectionRequirements& accessor) override;

  /** Returns the contents of the message's ConfirmObjectAcquisition field
    *
    * @return The contents of the ConfirmObjectAcquisition field
    */
  xs::Boolean getConfirmObjectAcquisition() const override;

  /** Sets the contents of the message's ConfirmObjectAcquisition field
    *
    * @param value The new value to set the ConfirmObjectAcquisition field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setConfirmObjectAcquisition(xs::Boolean value) override;

  /** Returns the accessor to the InformationObjective field contained in this message fragment
    *
    * @return The const reference to the accessor to the InformationObjective field.
    */
  const uci::type::OrbitalSurveillanceSensorTaskBaseType::InformationObjective& getInformationObjective() const override;

  /** Returns the accessor to the InformationObjective field contained in this message fragment
    *
    * @return The reference to the accessor to the InformationObjective field.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType::InformationObjective& getInformationObjective() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setInformationObjective(const uci::type::OrbitalSurveillanceSensorTaskBaseType::InformationObjective& accessor) override;

  /** Returns the accessor to the ReportingRequirements field contained in this message fragment
    *
    * @return The const reference to the accessor to the ReportingRequirements field.
    */
  const uci::type::OrbitalSurveillanceSensorTaskBaseType::ReportingRequirements& getReportingRequirements() const override;

  /** Returns the accessor to the ReportingRequirements field contained in this message fragment
    *
    * @return The reference to the accessor to the ReportingRequirements field.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType::ReportingRequirements& getReportingRequirements() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setReportingRequirements(const uci::type::OrbitalSurveillanceSensorTaskBaseType::ReportingRequirements& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getSetUpStartTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setSetUpStartTime(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field SetUpStartTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSetUpStartTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& clearSetUpStartTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPostCollectionWrapUp() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setPostCollectionWrapUp(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PostCollectionWrapUpis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPostCollectionWrapUp() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& clearPostCollectionWrapUp() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& getSensitivityConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& getSensitivityConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& getSensitivityConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& setSensitivityConstraints(const uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& accessor) override;

  /** Returns whether this optional field SensitivityConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSensitivityConstraints() const noexcept override;

  /** Enables the optional field such that getSensitivityConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& enableSensitivityConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorTaskBaseType& clearSensitivityConstraints() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OrbitalSurveillanceSensorTaskBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceSensorTaskBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OrbitalSurveillanceSensorTaskBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<OrbitalSurveillanceSensorCapabilityEnum> capabilityType_Accessor;
  std::unique_ptr<CollectionRequirements> collectionRequirements_Accessor;
  asb_xs::Boolean confirmObjectAcquisition_Accessor{false};
  std::unique_ptr<InformationObjective> informationObjective_Accessor;
  std::unique_ptr<ReportingRequirements> reportingRequirements_Accessor;
  boost::optional<DurationTypeValue> setUpStartTime_Accessor;
  boost::optional<DurationTypeValue> postCollectionWrapUp_Accessor;
  std::unique_ptr<OrbitalSurveillanceSensorSensitivityConstraintType> sensitivityConstraints_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ORBITALSURVEILLANCESENSORTASKBASETYPE_H
