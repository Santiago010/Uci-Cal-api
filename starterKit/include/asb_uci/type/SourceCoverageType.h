/** @file SourceCoverageType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SOURCECOVERAGETYPE_H
#define ASB_UCI_TYPE_SOURCECOVERAGETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/LOS_MeasurementEnum.h"
#include "uci/type/SourceCoverageType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AngleHalfPairType;
class AnglePairType;
class AngleRateRangeType;
class CapabilityCoverageAreaID_Type;
class DoubleMinMaxType;
class SlantRangeConstraintsType;
class SpeedRangeType;

/** Characterizes the size of the sensor measurement extent. */
class SourceCoverageType : public virtual uci::type::SourceCoverageType {
public:
  /** Identifies the unique ID of a Capability Coverage Area that is the source of an item. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using CapabilityCoverageAreaID = asb_uci::base::BoundedList<uci::type::CapabilityCoverageAreaID_Type, uci::type::accessorType::capabilityCoverageAreaID_Type, asb_uci::type::CapabilityCoverageAreaID_Type>;

  /** The constructor */
  SourceCoverageType();

  /** The copy constructor
    *
    * @param rhs The SourceCoverageType to copy from
    */
  SourceCoverageType(const SourceCoverageType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SourceCoverageType to move from
    */
  SourceCoverageType(SourceCoverageType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SourceCoverageType to copy from
    * @return The SourceCoverageType that was assigned
    */
  SourceCoverageType& operator=(const SourceCoverageType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SourceCoverageType to move from
    * @return The SourceCoverageType that was assigned
    */
  SourceCoverageType& operator=(SourceCoverageType&& rhs) = delete;

  /** The destructor */
  virtual ~SourceCoverageType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SourceCoverageType whose contents are to be used to set this
    *      uci::type::SourceCoverageType's contents.
    */
  void copy(const uci::type::SourceCoverageType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SourceCoverageType whose contents are to be used to set this
    *      uci::type::SourceCoverageType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SourceCoverageType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_MeasurementEnum& getFOV_ReferenceFrame_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LOS_MeasurementEnum& getFOV_ReferenceFrame() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_MeasurementEnum& getFOV_ReferenceFrame() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setFOV_ReferenceFrame(const uci::type::LOS_MeasurementEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setFOV_ReferenceFrame(uci::type::LOS_MeasurementEnum::EnumerationItem value) override;

  /** Returns whether this optional field FOV_ReferenceFrameis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFOV_ReferenceFrame() const noexcept override;

  /** Enables the optional field such that getFOV_ReferenceFrame will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LOS_MeasurementEnum& enableFOV_ReferenceFrame(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearFOV_ReferenceFrame() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SlantRangeConstraintsType& getRangeLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SlantRangeConstraintsType& getRangeLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SlantRangeConstraintsType& getRangeLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setRangeLimits(const uci::type::SlantRangeConstraintsType& accessor) override;

  /** Returns whether this optional field RangeLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRangeLimits() const noexcept override;

  /** Enables the optional field such that getRangeLimits will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SlantRangeConstraintsType& enableRangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearRangeLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpeedRangeType& getRangeRateLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SpeedRangeType& getRangeRateLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpeedRangeType& getRangeRateLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setRangeRateLimits(const uci::type::SpeedRangeType& accessor) override;

  /** Returns whether this optional field RangeRateLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRangeRateLimits() const noexcept override;

  /** Enables the optional field such that getRangeRateLimits will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpeedRangeType& enableRangeRateLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearRangeRateLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AnglePairType& getAzimuthLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AnglePairType& getAzimuthLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AnglePairType& getAzimuthLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setAzimuthLimits(const uci::type::AnglePairType& accessor) override;

  /** Returns whether this optional field AzimuthLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAzimuthLimits() const noexcept override;

  /** Enables the optional field such that getAzimuthLimits will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AnglePairType& enableAzimuthLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearAzimuthLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleHalfPairType& getElevationLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AngleHalfPairType& getElevationLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleHalfPairType& getElevationLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setElevationLimits(const uci::type::AngleHalfPairType& accessor) override;

  /** Returns whether this optional field ElevationLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasElevationLimits() const noexcept override;

  /** Enables the optional field such that getElevationLimits will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleHalfPairType& enableElevationLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearElevationLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleRateRangeType& getAzimuthAngleRateLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AngleRateRangeType& getAzimuthAngleRateLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleRateRangeType& getAzimuthAngleRateLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setAzimuthAngleRateLimits(const uci::type::AngleRateRangeType& accessor) override;

  /** Returns whether this optional field AzimuthAngleRateLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAzimuthAngleRateLimits() const noexcept override;

  /** Enables the optional field such that getAzimuthAngleRateLimits will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleRateRangeType& enableAzimuthAngleRateLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearAzimuthAngleRateLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleRateRangeType& getElevationAngleRateLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AngleRateRangeType& getElevationAngleRateLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleRateRangeType& getElevationAngleRateLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setElevationAngleRateLimits(const uci::type::AngleRateRangeType& accessor) override;

  /** Returns whether this optional field ElevationAngleRateLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasElevationAngleRateLimits() const noexcept override;

  /** Enables the optional field such that getElevationAngleRateLimits will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AngleRateRangeType& enableElevationAngleRateLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearElevationAngleRateLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeY_RangeLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DoubleMinMaxType& getCosconeY_RangeLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeY_RangeLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setCosconeY_RangeLimits(const uci::type::DoubleMinMaxType& accessor) override;

  /** Returns whether this optional field CosconeY_RangeLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeY_RangeLimits() const noexcept override;

  /** Enables the optional field such that getCosconeY_RangeLimits will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& enableCosconeY_RangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearCosconeY_RangeLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeZ_RangeLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DoubleMinMaxType& getCosconeZ_RangeLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeZ_RangeLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setCosconeZ_RangeLimits(const uci::type::DoubleMinMaxType& accessor) override;

  /** Returns whether this optional field CosconeZ_RangeLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeZ_RangeLimits() const noexcept override;

  /** Enables the optional field such that getCosconeZ_RangeLimits will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& enableCosconeZ_RangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearCosconeZ_RangeLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeY_RateRangeLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DoubleMinMaxType& getCosconeY_RateRangeLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeY_RateRangeLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setCosconeY_RateRangeLimits(const uci::type::DoubleMinMaxType& accessor) override;

  /** Returns whether this optional field CosconeY_RateRangeLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeY_RateRangeLimits() const noexcept override;

  /** Enables the optional field such that getCosconeY_RateRangeLimits will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& enableCosconeY_RateRangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearCosconeY_RateRangeLimits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeZ_RateRangeLimits_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DoubleMinMaxType& getCosconeZ_RateRangeLimits() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getCosconeZ_RateRangeLimits() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setCosconeZ_RateRangeLimits(const uci::type::DoubleMinMaxType& accessor) override;

  /** Returns whether this optional field CosconeZ_RateRangeLimitsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCosconeZ_RateRangeLimits() const noexcept override;

  /** Enables the optional field such that getCosconeZ_RateRangeLimits will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& enableCosconeZ_RateRangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& clearCosconeZ_RateRangeLimits() noexcept override;

  /** Returns the accessor to the CapabilityCoverageAreaID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityCoverageAreaID field.
    */
  const uci::type::SourceCoverageType::CapabilityCoverageAreaID& getCapabilityCoverageAreaID() const override;

  /** Returns the accessor to the CapabilityCoverageAreaID field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityCoverageAreaID field.
    */
  uci::type::SourceCoverageType::CapabilityCoverageAreaID& getCapabilityCoverageAreaID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SourceCoverageType& setCapabilityCoverageAreaID(const uci::type::SourceCoverageType::CapabilityCoverageAreaID& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SourceCoverageType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SourceCoverageType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SourceCoverageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<LOS_MeasurementEnum> fOV_ReferenceFrame_Accessor;
  std::unique_ptr<SlantRangeConstraintsType> rangeLimits_Accessor;
  std::unique_ptr<SpeedRangeType> rangeRateLimits_Accessor;
  std::unique_ptr<AnglePairType> azimuthLimits_Accessor;
  std::unique_ptr<AngleHalfPairType> elevationLimits_Accessor;
  std::unique_ptr<AngleRateRangeType> azimuthAngleRateLimits_Accessor;
  std::unique_ptr<AngleRateRangeType> elevationAngleRateLimits_Accessor;
  std::unique_ptr<DoubleMinMaxType> cosconeY_RangeLimits_Accessor;
  std::unique_ptr<DoubleMinMaxType> cosconeZ_RangeLimits_Accessor;
  std::unique_ptr<DoubleMinMaxType> cosconeY_RateRangeLimits_Accessor;
  std::unique_ptr<DoubleMinMaxType> cosconeZ_RateRangeLimits_Accessor;
  std::unique_ptr<CapabilityCoverageAreaID> capabilityCoverageAreaID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SOURCECOVERAGETYPE_H
