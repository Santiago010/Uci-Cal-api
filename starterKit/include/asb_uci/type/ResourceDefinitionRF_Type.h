/** @file ResourceDefinitionRF_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_RESOURCEDEFINITIONRF_TYPE_H
#define ASB_UCI_TYPE_RESOURCEDEFINITIONRF_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/base/UnsignedIntAccessor.h"
#include "../../../include/asb_uci/type/RF_TypeEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceDefinitionRF_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AntennaAllocationAndBeamConfigurationsType;
class BlankingLimitType;
class ResourceAllocationPeriodRF_Type;
class UnsignedIntegerMinMaxType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ResourceDefinitionRF_Type : public virtual uci::type::ResourceDefinitionRF_Type {
public:
  /** This element contains the value of the RFTI Indices. If number of RFTI == 2, the value of RF_ThreadInstanceIndex[0]is
    * used to access resources with the sibling ResourceAccessPriority == Min; the value of the RF_ThreadInstanceIndex[1]
    * is used to access resources with the sibling ResourceAccessPriority == Max. ResourceAllocator generates the index in
    * a an incrementing fashion 1, 2, 3... at resource allocation time, assuring that identifiers are unique across
    * resource allocations. RF_ThreadInstanceIndices may be re-used after an allocation has been deallocated. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  using RF_ThreadInstanceIndex = asb_uci::base::BoundedList<uci::base::UnsignedIntAccessor, uci::base::accessorType::unsignedIntAccessor, asb_uci::base::UnsignedIntAccessor>;

  /** Indicates allocated Antenna ID and the associated Beam Configuration Indices. Specific AntennaResourceInstances are
    * also allocated. Shared Antennas are not taxonomically described in UCI. It is left to external actors to organize,
    * uniquely describe and identify them. AntennaID is the same as the Antenna SupportCapabilityID. [Occurrences: Minimum:
    * 1; Maximum: MAX_LENGTH]
    */
  using AntennaID_AndBeamConfigurations = asb_uci::base::BoundedList<uci::type::AntennaAllocationAndBeamConfigurationsType, uci::type::accessorType::antennaAllocationAndBeamConfigurationsType, asb_uci::type::AntennaAllocationAndBeamConfigurationsType>;

  /** Duty cycle allocations for each AccessPeriodIndex requested in the RF_ResourceAllocationRequest. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  using PeriodAccessAllocations = asb_uci::base::BoundedList<uci::type::ResourceAllocationPeriodRF_Type, uci::type::accessorType::resourceAllocationPeriodRF_Type, asb_uci::type::ResourceAllocationPeriodRF_Type>;

  /** Required for allocations of Tx resources. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using BlankingLimit = asb_uci::base::BoundedList<uci::type::BlankingLimitType, uci::type::accessorType::blankingLimitType, asb_uci::type::BlankingLimitType>;

  /** The constructor */
  ResourceDefinitionRF_Type();

  /** The copy constructor
    *
    * @param rhs The ResourceDefinitionRF_Type to copy from
    */
  ResourceDefinitionRF_Type(const ResourceDefinitionRF_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ResourceDefinitionRF_Type to move from
    */
  ResourceDefinitionRF_Type(ResourceDefinitionRF_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ResourceDefinitionRF_Type to copy from
    * @return The ResourceDefinitionRF_Type that was assigned
    */
  ResourceDefinitionRF_Type& operator=(const ResourceDefinitionRF_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ResourceDefinitionRF_Type to move from
    * @return The ResourceDefinitionRF_Type that was assigned
    */
  ResourceDefinitionRF_Type& operator=(ResourceDefinitionRF_Type&& rhs) = delete;

  /** The destructor */
  virtual ~ResourceDefinitionRF_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ResourceDefinitionRF_Type whose contents are to be used to set this
    *      uci::type::ResourceDefinitionRF_Type's contents.
    */
  void copy(const uci::type::ResourceDefinitionRF_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ResourceDefinitionRF_Type whose contents are to be used to set this
    *      uci::type::ResourceDefinitionRF_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ResourceDefinitionRF_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's ResourceRequestOptionIndex field
    *
    * @return The contents of the ResourceRequestOptionIndex field
    */
  xs::UnsignedInt getResourceRequestOptionIndex() const override;

  /** Sets the contents of the message's ResourceRequestOptionIndex field
    *
    * @param value The new value to set the ResourceRequestOptionIndex field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setResourceRequestOptionIndex(xs::UnsignedInt value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getSystemThreadIndex() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setSystemThreadIndex(xs::UnsignedInt value) override;

  /** Returns whether this optional field SystemThreadIndexis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSystemThreadIndex() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& clearSystemThreadIndex() noexcept override;

  /** Returns the accessor to the RF_ThreadInstanceIndex field contained in this message fragment
    *
    * @return The const reference to the accessor to the RF_ThreadInstanceIndex field.
    */
  const uci::type::ResourceDefinitionRF_Type::RF_ThreadInstanceIndex& getRF_ThreadInstanceIndex() const override;

  /** Returns the accessor to the RF_ThreadInstanceIndex field contained in this message fragment
    *
    * @return The reference to the accessor to the RF_ThreadInstanceIndex field.
    */
  uci::type::ResourceDefinitionRF_Type::RF_ThreadInstanceIndex& getRF_ThreadInstanceIndex() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setRF_ThreadInstanceIndex(const uci::type::ResourceDefinitionRF_Type::RF_ThreadInstanceIndex& accessor) override;

  /** Returns the accessor to the AntennaID_AndBeamConfigurations field contained in this message fragment
    *
    * @return The const reference to the accessor to the AntennaID_AndBeamConfigurations field.
    */
  const uci::type::ResourceDefinitionRF_Type::AntennaID_AndBeamConfigurations& getAntennaID_AndBeamConfigurations() const override;

  /** Returns the accessor to the AntennaID_AndBeamConfigurations field contained in this message fragment
    *
    * @return The reference to the accessor to the AntennaID_AndBeamConfigurations field.
    */
  uci::type::ResourceDefinitionRF_Type::AntennaID_AndBeamConfigurations& getAntennaID_AndBeamConfigurations() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setAntennaID_AndBeamConfigurations(const uci::type::ResourceDefinitionRF_Type::AntennaID_AndBeamConfigurations& accessor) override;

  /** Returns the accessor to the PeriodAccessAllocations field contained in this message fragment
    *
    * @return The const reference to the accessor to the PeriodAccessAllocations field.
    */
  const uci::type::ResourceDefinitionRF_Type::PeriodAccessAllocations& getPeriodAccessAllocations() const override;

  /** Returns the accessor to the PeriodAccessAllocations field contained in this message fragment
    *
    * @return The reference to the accessor to the PeriodAccessAllocations field.
    */
  uci::type::ResourceDefinitionRF_Type::PeriodAccessAllocations& getPeriodAccessAllocations() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setPeriodAccessAllocations(const uci::type::ResourceDefinitionRF_Type::PeriodAccessAllocations& accessor) override;

  /** Returns the accessor to the BlankingLimit field contained in this message fragment
    *
    * @return The const reference to the accessor to the BlankingLimit field.
    */
  const uci::type::ResourceDefinitionRF_Type::BlankingLimit& getBlankingLimit() const override;

  /** Returns the accessor to the BlankingLimit field contained in this message fragment
    *
    * @return The reference to the accessor to the BlankingLimit field.
    */
  uci::type::ResourceDefinitionRF_Type::BlankingLimit& getBlankingLimit() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setBlankingLimit(const uci::type::ResourceDefinitionRF_Type::BlankingLimit& accessor) override;

  /** Returns the contents of the message's RF_Mode field
    *
    * @return The contents of the RF_Mode field
    */
  const uci::type::RF_TypeEnum& getRF_Mode() const override;

  /** Returns the contents of the message's RF_Mode field
    *
    * @return The contents of the RF_Mode field
    */
  uci::type::RF_TypeEnum& getRF_Mode() override;

  /** Sets the contents of the message's RF_Mode field
    *
    * @param accessor The accessor to use to set the RF_Mode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setRF_Mode(const uci::type::RF_TypeEnum& accessor) override;

  /** Sets the contents of the message's RF_Mode field
    *
    * @param value The new value to set the RF_Mode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setRF_Mode(uci::type::RF_TypeEnum::EnumerationItem value) override;

  /** Returns the accessor to the ResourceAccessPriority field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResourceAccessPriority field.
    */
  const uci::type::UnsignedIntegerMinMaxType& getResourceAccessPriority() const override;

  /** Returns the accessor to the ResourceAccessPriority field contained in this message fragment
    *
    * @return The reference to the accessor to the ResourceAccessPriority field.
    */
  uci::type::UnsignedIntegerMinMaxType& getResourceAccessPriority() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResourceDefinitionRF_Type& setResourceAccessPriority(const uci::type::UnsignedIntegerMinMaxType& accessor) override;

  /** Enables the optional field such that getResourceAccessPriority will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UnsignedIntegerMinMaxType& enableResourceAccessPriority(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ResourceDefinitionRF_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceDefinitionRF_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ResourceDefinitionRF_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  asb_xs::UnsignedInt resourceRequestOptionIndex_Accessor{0};
  boost::optional<asb_xs::UnsignedInt> systemThreadIndex_Accessor;
  std::unique_ptr<RF_ThreadInstanceIndex> rF_ThreadInstanceIndex_Accessor;
  std::unique_ptr<AntennaID_AndBeamConfigurations> antennaID_AndBeamConfigurations_Accessor;
  std::unique_ptr<PeriodAccessAllocations> periodAccessAllocations_Accessor;
  std::unique_ptr<BlankingLimit> blankingLimit_Accessor;
  std::unique_ptr<RF_TypeEnum> rF_Mode_Accessor;
  std::unique_ptr<UnsignedIntegerMinMaxType> resourceAccessPriority_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_RESOURCEDEFINITIONRF_TYPE_H
