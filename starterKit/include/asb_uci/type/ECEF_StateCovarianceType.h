/** @file ECEF_StateCovarianceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ECEF_STATECOVARIANCETYPE_H
#define ASB_UCI_TYPE_ECEF_STATECOVARIANCETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_StateCovarianceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ECEF_AccelerationAccelerationCovarianceType;
class ECEF_PositionAccelerationCovarianceType;
class ECEF_PositionOrientationCovarianceType;
class ECEF_PositionPositionCovarianceType;
class ECEF_PositionVelocityCovarianceType;
class ECEF_VelocityAccelerationCovarianceType;
class ECEF_VelocityOrientationCovarianceType;
class ECEF_VelocityVelocityCovarianceType;
class OrientationCovarianceType;

/** The 1-sigma covariance terms for kinematics in the Earth-Centered-Earth-Fixed (ECEF) coordinate system. The
  * covariances are symmetric and therefore the covariance values expressed here are the minimum set.
  */
class ECEF_StateCovarianceType : public virtual uci::type::ECEF_StateCovarianceType {
public:
  /** The constructor */
  ECEF_StateCovarianceType();

  /** The copy constructor
    *
    * @param rhs The ECEF_StateCovarianceType to copy from
    */
  ECEF_StateCovarianceType(const ECEF_StateCovarianceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ECEF_StateCovarianceType to move from
    */
  ECEF_StateCovarianceType(ECEF_StateCovarianceType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ECEF_StateCovarianceType to copy from
    * @return The ECEF_StateCovarianceType that was assigned
    */
  ECEF_StateCovarianceType& operator=(const ECEF_StateCovarianceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ECEF_StateCovarianceType to move from
    * @return The ECEF_StateCovarianceType that was assigned
    */
  ECEF_StateCovarianceType& operator=(ECEF_StateCovarianceType&& rhs) = delete;

  /** The destructor */
  virtual ~ECEF_StateCovarianceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ECEF_StateCovarianceType whose contents are to be used to set this
    *      uci::type::ECEF_StateCovarianceType's contents.
    */
  void copy(const uci::type::ECEF_StateCovarianceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ECEF_StateCovarianceType whose contents are to be used to set this
    *      uci::type::ECEF_StateCovarianceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ECEF_StateCovarianceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Double getTimeBiasError() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setTimeBiasError(xs::Double value) override;

  /** Returns whether this optional field TimeBiasErroris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeBiasError() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearTimeBiasError() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionPositionCovarianceType& getPositionPosition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_PositionPositionCovarianceType& getPositionPosition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionPositionCovarianceType& getPositionPosition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setPositionPosition(const uci::type::ECEF_PositionPositionCovarianceType& accessor) override;

  /** Returns whether this optional field PositionPositionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPositionPosition() const noexcept override;

  /** Enables the optional field such that getPositionPosition will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionPositionCovarianceType& enablePositionPosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearPositionPosition() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionVelocityCovarianceType& getPositionVelocity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_PositionVelocityCovarianceType& getPositionVelocity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionVelocityCovarianceType& getPositionVelocity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setPositionVelocity(const uci::type::ECEF_PositionVelocityCovarianceType& accessor) override;

  /** Returns whether this optional field PositionVelocityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPositionVelocity() const noexcept override;

  /** Enables the optional field such that getPositionVelocity will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionVelocityCovarianceType& enablePositionVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearPositionVelocity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityVelocityCovarianceType& getVelocityVelocity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_VelocityVelocityCovarianceType& getVelocityVelocity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityVelocityCovarianceType& getVelocityVelocity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setVelocityVelocity(const uci::type::ECEF_VelocityVelocityCovarianceType& accessor) override;

  /** Returns whether this optional field VelocityVelocityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVelocityVelocity() const noexcept override;

  /** Enables the optional field such that getVelocityVelocity will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityVelocityCovarianceType& enableVelocityVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearVelocityVelocity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_AccelerationAccelerationCovarianceType& getAccelerationAcceleration_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_AccelerationAccelerationCovarianceType& getAccelerationAcceleration() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_AccelerationAccelerationCovarianceType& getAccelerationAcceleration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setAccelerationAcceleration(const uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor) override;

  /** Returns whether this optional field AccelerationAccelerationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAccelerationAcceleration() const noexcept override;

  /** Enables the optional field such that getAccelerationAcceleration will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_AccelerationAccelerationCovarianceType& enableAccelerationAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearAccelerationAcceleration() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionAccelerationCovarianceType& getPositionAcceleration_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_PositionAccelerationCovarianceType& getPositionAcceleration() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionAccelerationCovarianceType& getPositionAcceleration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setPositionAcceleration(const uci::type::ECEF_PositionAccelerationCovarianceType& accessor) override;

  /** Returns whether this optional field PositionAccelerationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPositionAcceleration() const noexcept override;

  /** Enables the optional field such that getPositionAcceleration will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionAccelerationCovarianceType& enablePositionAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearPositionAcceleration() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityAccelerationCovarianceType& getVelocityAcceleration_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_VelocityAccelerationCovarianceType& getVelocityAcceleration() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityAccelerationCovarianceType& getVelocityAcceleration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setVelocityAcceleration(const uci::type::ECEF_VelocityAccelerationCovarianceType& accessor) override;

  /** Returns whether this optional field VelocityAccelerationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVelocityAcceleration() const noexcept override;

  /** Enables the optional field such that getVelocityAcceleration will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityAccelerationCovarianceType& enableVelocityAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearVelocityAcceleration() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrientationCovarianceType& getOrientationCovariance_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrientationCovarianceType& getOrientationCovariance() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrientationCovarianceType& getOrientationCovariance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setOrientationCovariance(const uci::type::OrientationCovarianceType& accessor) override;

  /** Returns whether this optional field OrientationCovarianceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrientationCovariance() const noexcept override;

  /** Enables the optional field such that getOrientationCovariance will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrientationCovarianceType& enableOrientationCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearOrientationCovariance() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionOrientationCovarianceType& getPositionOrientationCovariance_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_PositionOrientationCovarianceType& getPositionOrientationCovariance() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionOrientationCovarianceType& getPositionOrientationCovariance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setPositionOrientationCovariance(const uci::type::ECEF_PositionOrientationCovarianceType& accessor) override;

  /** Returns whether this optional field PositionOrientationCovarianceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPositionOrientationCovariance() const noexcept override;

  /** Enables the optional field such that getPositionOrientationCovariance will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_PositionOrientationCovarianceType& enablePositionOrientationCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearPositionOrientationCovariance() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& getVelocityOrientationCovariance_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ECEF_VelocityOrientationCovarianceType& getVelocityOrientationCovariance() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& getVelocityOrientationCovariance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& setVelocityOrientationCovariance(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor) override;

  /** Returns whether this optional field VelocityOrientationCovarianceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVelocityOrientationCovariance() const noexcept override;

  /** Enables the optional field such that getVelocityOrientationCovariance will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ECEF_VelocityOrientationCovarianceType& enableVelocityOrientationCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_StateCovarianceType& clearVelocityOrientationCovariance() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ECEF_StateCovarianceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_StateCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ECEF_StateCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::Double> timeBiasError_Accessor;
  std::unique_ptr<ECEF_PositionPositionCovarianceType> positionPosition_Accessor;
  std::unique_ptr<ECEF_PositionVelocityCovarianceType> positionVelocity_Accessor;
  std::unique_ptr<ECEF_VelocityVelocityCovarianceType> velocityVelocity_Accessor;
  std::unique_ptr<ECEF_AccelerationAccelerationCovarianceType> accelerationAcceleration_Accessor;
  std::unique_ptr<ECEF_PositionAccelerationCovarianceType> positionAcceleration_Accessor;
  std::unique_ptr<ECEF_VelocityAccelerationCovarianceType> velocityAcceleration_Accessor;
  std::unique_ptr<OrientationCovarianceType> orientationCovariance_Accessor;
  std::unique_ptr<ECEF_PositionOrientationCovarianceType> positionOrientationCovariance_Accessor;
  std::unique_ptr<ECEF_VelocityOrientationCovarianceType> velocityOrientationCovariance_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ECEF_STATECOVARIANCETYPE_H
