/** @file CommPointingPlanRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMPOINTINGPLANREQUESTTYPE_H
#define ASB_UCI_TYPE_COMMPOINTINGPLANREQUESTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommPointingAssessmentEnum.h"
#include "uci/type/CommPointingPlanRequestType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommCoverageUserDataType;
class CommScheduleAllocationID_Type;
class CommSchedulingRequirementID_Type;
class ForeignKeyType;
class RoutePlanReferencesType;

/** The inputs used in generating and/or requesting a Comm Pointing Assessment. */
class CommPointingPlanRequestType : public virtual uci::type::CommPointingPlanRequestType {
public:
  /** Indicates a RoutePlan or parts of a RoutePlan to assess for communications support and pointing. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  using RoutePlan = asb_uci::base::BoundedList<uci::type::RoutePlanReferencesType, uci::type::accessorType::routePlanReferencesType, asb_uci::type::RoutePlanReferencesType>;

  /** This element constrains the assessment to the use of all unscheduled, unpurchased, available comm. When Assessment
    * Constraint Level is set to COMM_SCHEDULE_AVAILABILITY, this element is populated concurrently with communication
    * scheduling Requirements Constraints and communication schedule allocation Constraints. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using CommScheduleAvailabilityConstraints = asb_uci::base::BoundedList<uci::type::CommCoverageUserDataType, uci::type::accessorType::commCoverageUserDataType, asb_uci::type::CommCoverageUserDataType>;

  /** This element constrains the assessment to the use of communication requirements that may or may not have been
    * submitted in a CommSchedulingRequest. This assessment type allows communication to be analyzed based on any pending
    * communication purchases or prior to purchase. When Assessment Constraint Level is set to COMM_SCHEDULE_REQUIREMENTS,
    * this element may be populated concurrently with communicationSchedule Allocation Constraints. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using CommSchedulingRequirementConstraintsID = asb_uci::base::BoundedList<uci::type::CommSchedulingRequirementID_Type, uci::type::accessorType::commSchedulingRequirementID_Type, asb_uci::type::CommSchedulingRequirementID_Type>;

  /** List of external communications resources that have been allocated to Missions. When Assessment Constraint Level is
    * set to COMM_SCHEDULE_ALLOCATIONS, this element is populated by itself in absence of the other constraint types.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CommScheduleAllocationConstraintsID = asb_uci::base::BoundedList<uci::type::CommScheduleAllocationID_Type, uci::type::accessorType::commScheduleAllocationID_Type, asb_uci::type::CommScheduleAllocationID_Type>;

  /** Identifies the foreign key or keys associated with the assessment resources. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using AssessmentResourceList = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** The constructor */
  CommPointingPlanRequestType();

  /** The copy constructor
    *
    * @param rhs The CommPointingPlanRequestType to copy from
    */
  CommPointingPlanRequestType(const CommPointingPlanRequestType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommPointingPlanRequestType to move from
    */
  CommPointingPlanRequestType(CommPointingPlanRequestType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommPointingPlanRequestType to copy from
    * @return The CommPointingPlanRequestType that was assigned
    */
  CommPointingPlanRequestType& operator=(const CommPointingPlanRequestType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommPointingPlanRequestType to move from
    * @return The CommPointingPlanRequestType that was assigned
    */
  CommPointingPlanRequestType& operator=(CommPointingPlanRequestType&& rhs) = delete;

  /** The destructor */
  virtual ~CommPointingPlanRequestType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommPointingPlanRequestType whose contents are to be used to set this
    *      uci::type::CommPointingPlanRequestType's contents.
    */
  void copy(const uci::type::CommPointingPlanRequestType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommPointingPlanRequestType whose contents are to be used to set this
    *      uci::type::CommPointingPlanRequestType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommPointingPlanRequestType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the RoutePlan field contained in this message fragment
    *
    * @return The const reference to the accessor to the RoutePlan field.
    */
  const uci::type::CommPointingPlanRequestType::RoutePlan& getRoutePlan() const override;

  /** Returns the accessor to the RoutePlan field contained in this message fragment
    *
    * @return The reference to the accessor to the RoutePlan field.
    */
  uci::type::CommPointingPlanRequestType::RoutePlan& getRoutePlan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommPointingPlanRequestType& setRoutePlan(const uci::type::CommPointingPlanRequestType::RoutePlan& accessor) override;

  /** Returns the contents of the message's AssessmentConstraintLevel field
    *
    * @return The contents of the AssessmentConstraintLevel field
    */
  const uci::type::CommPointingAssessmentEnum& getAssessmentConstraintLevel() const override;

  /** Returns the contents of the message's AssessmentConstraintLevel field
    *
    * @return The contents of the AssessmentConstraintLevel field
    */
  uci::type::CommPointingAssessmentEnum& getAssessmentConstraintLevel() override;

  /** Sets the contents of the message's AssessmentConstraintLevel field
    *
    * @param accessor The accessor to use to set the AssessmentConstraintLevel field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommPointingPlanRequestType& setAssessmentConstraintLevel(const uci::type::CommPointingAssessmentEnum& accessor) override;

  /** Sets the contents of the message's AssessmentConstraintLevel field
    *
    * @param value The new value to set the AssessmentConstraintLevel field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommPointingPlanRequestType& setAssessmentConstraintLevel(uci::type::CommPointingAssessmentEnum::EnumerationItem value) override;

  /** Returns the accessor to the CommScheduleAvailabilityConstraints field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommScheduleAvailabilityConstraints field.
    */
  const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& getCommScheduleAvailabilityConstraints() const override;

  /** Returns the accessor to the CommScheduleAvailabilityConstraints field contained in this message fragment
    *
    * @return The reference to the accessor to the CommScheduleAvailabilityConstraints field.
    */
  uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& getCommScheduleAvailabilityConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommPointingPlanRequestType& setCommScheduleAvailabilityConstraints(const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& accessor) override;

  /** Returns the accessor to the CommSchedulingRequirementConstraintsID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommSchedulingRequirementConstraintsID field.
    */
  const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& getCommSchedulingRequirementConstraintsID() const override;

  /** Returns the accessor to the CommSchedulingRequirementConstraintsID field contained in this message fragment
    *
    * @return The reference to the accessor to the CommSchedulingRequirementConstraintsID field.
    */
  uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& getCommSchedulingRequirementConstraintsID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommPointingPlanRequestType& setCommSchedulingRequirementConstraintsID(const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& accessor) override;

  /** Returns the accessor to the CommScheduleAllocationConstraintsID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommScheduleAllocationConstraintsID field.
    */
  const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& getCommScheduleAllocationConstraintsID() const override;

  /** Returns the accessor to the CommScheduleAllocationConstraintsID field contained in this message fragment
    *
    * @return The reference to the accessor to the CommScheduleAllocationConstraintsID field.
    */
  uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& getCommScheduleAllocationConstraintsID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommPointingPlanRequestType& setCommScheduleAllocationConstraintsID(const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& accessor) override;

  /** Returns the accessor to the AssessmentResourceList field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssessmentResourceList field.
    */
  const uci::type::CommPointingPlanRequestType::AssessmentResourceList& getAssessmentResourceList() const override;

  /** Returns the accessor to the AssessmentResourceList field contained in this message fragment
    *
    * @return The reference to the accessor to the AssessmentResourceList field.
    */
  uci::type::CommPointingPlanRequestType::AssessmentResourceList& getAssessmentResourceList() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommPointingPlanRequestType& setAssessmentResourceList(const uci::type::CommPointingPlanRequestType::AssessmentResourceList& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommPointingPlanRequestType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommPointingPlanRequestType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommPointingPlanRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<RoutePlan> routePlan_Accessor;
  std::unique_ptr<CommPointingAssessmentEnum> assessmentConstraintLevel_Accessor;
  std::unique_ptr<CommScheduleAvailabilityConstraints> commScheduleAvailabilityConstraints_Accessor;
  std::unique_ptr<CommSchedulingRequirementConstraintsID> commSchedulingRequirementConstraintsID_Accessor;
  std::unique_ptr<CommScheduleAllocationConstraintsID> commScheduleAllocationConstraintsID_Accessor;
  std::unique_ptr<AssessmentResourceList> assessmentResourceList_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMPOINTINGPLANREQUESTTYPE_H
