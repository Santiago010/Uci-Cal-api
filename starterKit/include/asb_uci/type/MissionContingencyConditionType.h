/** @file MissionContingencyConditionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MISSIONCONTINGENCYCONDITIONTYPE_H
#define ASB_UCI_TYPE_MISSIONCONTINGENCYCONDITIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ConflictStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionContingencyConditionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AutonomousActionStatusChoiceType;
class ConflictType;
class OperatorRecommendationType;
class PlanningTriggerType;
class SystemID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class MissionContingencyConditionType : public virtual uci::type::MissionContingencyConditionType {
public:
  /** This element provides details of the contingency condition. Most elements within are optional because of the many
    * different cases that this element is intended to represent. However, the requirements for describing a conflict are
    * the following: 1. ConflictingObject is required if known. 2. AffectedRequirements are required if and only if it is
    * known that a task can no longer be performed. 3. ConflictLocation primarily applies to route conflicts. This data is
    * primarily for operator SA. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using Conflict = asb_uci::base::BoundedList<uci::type::ConflictType, uci::type::accessorType::conflictType, asb_uci::type::ConflictType>;

  /** This element can be provided when autonomy settings dictate that autonomous correction of a problem is not allowed or
    * when a system does not have autonomous contingency correction capability. Multiple instances allow a series of
    * actions to be specified to address the contingency condition. Order is implied by the order in which elements are
    * included in the message. For example, to resolve a contingency associated with a failed Capability, the series of
    * actions might be: 0. Drop Tasks 1. Reallocate Dropped Tasks. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OperatorRecommendation = asb_uci::base::BoundedList<uci::type::OperatorRecommendationType, uci::type::accessorType::operatorRecommendationType, asb_uci::type::OperatorRecommendationType>;

  /** The constructor */
  MissionContingencyConditionType();

  /** The copy constructor
    *
    * @param rhs The MissionContingencyConditionType to copy from
    */
  MissionContingencyConditionType(const MissionContingencyConditionType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MissionContingencyConditionType to move from
    */
  MissionContingencyConditionType(MissionContingencyConditionType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MissionContingencyConditionType to copy from
    * @return The MissionContingencyConditionType that was assigned
    */
  MissionContingencyConditionType& operator=(const MissionContingencyConditionType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MissionContingencyConditionType to move from
    * @return The MissionContingencyConditionType that was assigned
    */
  MissionContingencyConditionType& operator=(MissionContingencyConditionType&& rhs) = delete;

  /** The destructor */
  virtual ~MissionContingencyConditionType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MissionContingencyConditionType whose contents are to be used to set this
    *      uci::type::MissionContingencyConditionType's contents.
    */
  void copy(const uci::type::MissionContingencyConditionType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MissionContingencyConditionType whose contents are to be used to set this
    *      uci::type::MissionContingencyConditionType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MissionContingencyConditionType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ConflictedSystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ConflictedSystemID field.
    */
  const uci::type::SystemID_Type& getConflictedSystemID() const override;

  /** Returns the accessor to the ConflictedSystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the ConflictedSystemID field.
    */
  uci::type::SystemID_Type& getConflictedSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& setConflictedSystemID(const uci::type::SystemID_Type& accessor) override;

  /** Returns the contents of the message's ConflictState field
    *
    * @return The contents of the ConflictState field
    */
  const uci::type::ConflictStateEnum& getConflictState() const override;

  /** Returns the contents of the message's ConflictState field
    *
    * @return The contents of the ConflictState field
    */
  uci::type::ConflictStateEnum& getConflictState() override;

  /** Sets the contents of the message's ConflictState field
    *
    * @param accessor The accessor to use to set the ConflictState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& setConflictState(const uci::type::ConflictStateEnum& accessor) override;

  /** Sets the contents of the message's ConflictState field
    *
    * @param value The new value to set the ConflictState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& setConflictState(uci::type::ConflictStateEnum::EnumerationItem value) override;

  /** Returns the accessor to the Conflict field contained in this message fragment
    *
    * @return The const reference to the accessor to the Conflict field.
    */
  const uci::type::MissionContingencyConditionType::Conflict& getConflict() const override;

  /** Returns the accessor to the Conflict field contained in this message fragment
    *
    * @return The reference to the accessor to the Conflict field.
    */
  uci::type::MissionContingencyConditionType::Conflict& getConflict() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& setConflict(const uci::type::MissionContingencyConditionType::Conflict& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningTriggerType& getTrigger_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PlanningTriggerType& getTrigger() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningTriggerType& getTrigger() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& setTrigger(const uci::type::PlanningTriggerType& accessor) override;

  /** Returns whether this optional field Triggeris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTrigger() const noexcept override;

  /** Enables the optional field such that getTrigger will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningTriggerType& enableTrigger(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& clearTrigger() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AutonomousActionStatusChoiceType& getAutonomousActionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AutonomousActionStatusChoiceType& getAutonomousActionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AutonomousActionStatusChoiceType& getAutonomousActionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& setAutonomousActionStatus(const uci::type::AutonomousActionStatusChoiceType& accessor) override;

  /** Returns whether this optional field AutonomousActionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAutonomousActionStatus() const noexcept override;

  /** Enables the optional field such that getAutonomousActionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AutonomousActionStatusChoiceType& enableAutonomousActionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& clearAutonomousActionStatus() noexcept override;

  /** Returns the accessor to the OperatorRecommendation field contained in this message fragment
    *
    * @return The const reference to the accessor to the OperatorRecommendation field.
    */
  const uci::type::MissionContingencyConditionType::OperatorRecommendation& getOperatorRecommendation() const override;

  /** Returns the accessor to the OperatorRecommendation field contained in this message fragment
    *
    * @return The reference to the accessor to the OperatorRecommendation field.
    */
  uci::type::MissionContingencyConditionType::OperatorRecommendation& getOperatorRecommendation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionContingencyConditionType& setOperatorRecommendation(const uci::type::MissionContingencyConditionType::OperatorRecommendation& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MissionContingencyConditionType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionContingencyConditionType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MissionContingencyConditionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SystemID_Type> conflictedSystemID_Accessor;
  std::unique_ptr<ConflictStateEnum> conflictState_Accessor;
  std::unique_ptr<Conflict> conflict_Accessor;
  std::unique_ptr<PlanningTriggerType> trigger_Accessor;
  std::unique_ptr<AutonomousActionStatusChoiceType> autonomousActionStatus_Accessor;
  std::unique_ptr<OperatorRecommendation> operatorRecommendation_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MISSIONCONTINGENCYCONDITIONTYPE_H
