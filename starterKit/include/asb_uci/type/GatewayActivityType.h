/** @file GatewayActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_GATEWAYACTIVITYTYPE_H
#define ASB_UCI_TYPE_GATEWAYACTIVITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/CommConnectionStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayActivityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommProfileID_Type;
class DataDeliveryType;
class GatewayConfigurationType;
class GatewayControlType;
class GatewayLinkStatisticsType;
class VerboseStatusType;

/** See annotations in child elements and messages/elements that use this type for details. */
class GatewayActivityType : public virtual uci::type::GatewayActivityType, public virtual ActivityBaseType {
public:
  /** Provides a mechanism for a gateway to status its Gateway configuration. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using GatewayConfiguration = asb_uci::base::BoundedList<uci::type::GatewayConfigurationType, uci::type::accessorType::gatewayConfigurationType, asb_uci::type::GatewayConfigurationType>;

  /** Provides a mechanism for a gateway to provide assurance that it has transmitted tactical and or message data within
    * the time-span this activity message covers. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssuredTransmission = asb_uci::base::BoundedList<uci::type::DataDeliveryType, uci::type::accessorType::dataDeliveryType, asb_uci::type::DataDeliveryType>;

  /** Provides a mechanism for a gateway to provide assurance that it has delivered tactical and or message data within the
    * time-span this activity message covers. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssuredDelivery = asb_uci::base::BoundedList<uci::type::DataDeliveryType, uci::type::accessorType::dataDeliveryType, asb_uci::type::DataDeliveryType>;

  /** For the periodicity of this message this is a report of the statistics provided by this capability and its links. If
    * a NetworkLinkID is specified then the granularity is that specific link. If not, It is assumed to be for the gateway
    * as a whole. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using LinkStatistics = asb_uci::base::BoundedList<uci::type::GatewayLinkStatisticsType, uci::type::accessorType::gatewayLinkStatisticsType, asb_uci::type::GatewayLinkStatisticsType>;

  /** The constructor */
  GatewayActivityType();

  /** The copy constructor
    *
    * @param rhs The GatewayActivityType to copy from
    */
  GatewayActivityType(const GatewayActivityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The GatewayActivityType to move from
    */
  GatewayActivityType(GatewayActivityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The GatewayActivityType to copy from
    * @return The GatewayActivityType that was assigned
    */
  GatewayActivityType& operator=(const GatewayActivityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The GatewayActivityType to move from
    * @return The GatewayActivityType that was assigned
    */
  GatewayActivityType& operator=(GatewayActivityType&& rhs) = delete;

  /** The destructor */
  ~GatewayActivityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::GatewayActivityType whose contents are to be used to set this
    *      uci::type::GatewayActivityType's contents.
    */
  void copy(const uci::type::GatewayActivityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::GatewayActivityType whose contents are to be used to set this
    *      uci::type::GatewayActivityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::GatewayActivityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionStateEnum& getConnectionStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommConnectionStateEnum& getConnectionStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionStateEnum& getConnectionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setConnectionStatus(const uci::type::CommConnectionStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setConnectionStatus(uci::type::CommConnectionStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field ConnectionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConnectionStatus() const noexcept override;

  /** Enables the optional field such that getConnectionStatus will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionStateEnum& enableConnectionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& clearConnectionStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GatewayControlType& getCommonSettingsStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::GatewayControlType& getCommonSettingsStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GatewayControlType& getCommonSettingsStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setCommonSettingsStatus(const uci::type::GatewayControlType& accessor) override;

  /** Returns whether this optional field CommonSettingsStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCommonSettingsStatus() const noexcept override;

  /** Enables the optional field such that getCommonSettingsStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GatewayControlType& enableCommonSettingsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& clearCommonSettingsStatus() noexcept override;

  /** Returns the accessor to the GatewayConfiguration field contained in this message fragment
    *
    * @return The const reference to the accessor to the GatewayConfiguration field.
    */
  const uci::type::GatewayActivityType::GatewayConfiguration& getGatewayConfiguration() const override;

  /** Returns the accessor to the GatewayConfiguration field contained in this message fragment
    *
    * @return The reference to the accessor to the GatewayConfiguration field.
    */
  uci::type::GatewayActivityType::GatewayConfiguration& getGatewayConfiguration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setGatewayConfiguration(const uci::type::GatewayActivityType::GatewayConfiguration& accessor) override;

  /** Returns the accessor to the AssuredTransmission field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssuredTransmission field.
    */
  const uci::type::GatewayActivityType::AssuredTransmission& getAssuredTransmission() const override;

  /** Returns the accessor to the AssuredTransmission field contained in this message fragment
    *
    * @return The reference to the accessor to the AssuredTransmission field.
    */
  uci::type::GatewayActivityType::AssuredTransmission& getAssuredTransmission() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setAssuredTransmission(const uci::type::GatewayActivityType::AssuredTransmission& accessor) override;

  /** Returns the accessor to the AssuredDelivery field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssuredDelivery field.
    */
  const uci::type::GatewayActivityType::AssuredDelivery& getAssuredDelivery() const override;

  /** Returns the accessor to the AssuredDelivery field contained in this message fragment
    *
    * @return The reference to the accessor to the AssuredDelivery field.
    */
  uci::type::GatewayActivityType::AssuredDelivery& getAssuredDelivery() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setAssuredDelivery(const uci::type::GatewayActivityType::AssuredDelivery& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getCurrentProfileID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommProfileID_Type& getCurrentProfileID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getCurrentProfileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setCurrentProfileID(const uci::type::CommProfileID_Type& accessor) override;

  /** Returns whether this optional field CurrentProfileIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCurrentProfileID() const noexcept override;

  /** Enables the optional field such that getCurrentProfileID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& enableCurrentProfileID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& clearCurrentProfileID() noexcept override;

  /** Returns the accessor to the LinkStatistics field contained in this message fragment
    *
    * @return The const reference to the accessor to the LinkStatistics field.
    */
  const uci::type::GatewayActivityType::LinkStatistics& getLinkStatistics() const override;

  /** Returns the accessor to the LinkStatistics field contained in this message fragment
    *
    * @return The reference to the accessor to the LinkStatistics field.
    */
  uci::type::GatewayActivityType::LinkStatistics& getLinkStatistics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setLinkStatistics(const uci::type::GatewayActivityType::LinkStatistics& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& getVerboseStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VerboseStatusType& getVerboseStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& getVerboseStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& setVerboseStatus(const uci::type::VerboseStatusType& accessor) override;

  /** Returns whether this optional field VerboseStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVerboseStatus() const noexcept override;

  /** Enables the optional field such that getVerboseStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& enableVerboseStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::GatewayActivityType& clearVerboseStatus() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<GatewayActivityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayActivityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::GatewayActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CommConnectionStateEnum> connectionStatus_Accessor;
  std::unique_ptr<GatewayControlType> commonSettingsStatus_Accessor;
  std::unique_ptr<GatewayConfiguration> gatewayConfiguration_Accessor;
  std::unique_ptr<AssuredTransmission> assuredTransmission_Accessor;
  std::unique_ptr<AssuredDelivery> assuredDelivery_Accessor;
  std::unique_ptr<CommProfileID_Type> currentProfileID_Accessor;
  std::unique_ptr<LinkStatistics> linkStatistics_Accessor;
  std::unique_ptr<VerboseStatusType> verboseStatus_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_GATEWAYACTIVITYTYPE_H
