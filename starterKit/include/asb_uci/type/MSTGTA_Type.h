/** @file MSTGTA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MSTGTA_TYPE_H
#define ASB_UCI_TYPE_MSTGTA_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/MSTGTA_TGT_CAT_String_Type.h"
#include "asb_uci/type/MSTGTA_TGT_UTC_Type.h"
#include "asb_uci/type/NumericSpaceString13OnlyType.h"
#include "asb_uci/type/NumericSpaceString2OnlyType.h"
#include "asb_uci/type/NumericSpaceString4OnlyType.h"
#include "asb_uci/type/NumericSpaceString6OnlyType.h"
#include "uci/type/MSTGTA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MSTGTA_Type : public virtual uci::type::MSTGTA_Type {
public:
  /** The constructor */
  MSTGTA_Type();

  /** The copy constructor
    *
    * @param rhs The MSTGTA_Type to copy from
    */
  MSTGTA_Type(const MSTGTA_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MSTGTA_Type to move from
    */
  MSTGTA_Type(MSTGTA_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MSTGTA_Type to copy from
    * @return The MSTGTA_Type that was assigned
    */
  MSTGTA_Type& operator=(const MSTGTA_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MSTGTA_Type to move from
    * @return The MSTGTA_Type that was assigned
    */
  MSTGTA_Type& operator=(MSTGTA_Type&& rhs) = delete;

  /** The destructor */
  virtual ~MSTGTA_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MSTGTA_Type whose contents are to be used to set this uci::type::MSTGTA_Type's
    *      contents.
    */
  void copy(const uci::type::MSTGTA_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MSTGTA_Type whose contents are to be used to set this uci::type::MSTGTA_Type's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MSTGTA_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString6OnlyType& getTGT_NUM_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString6OnlyType& getTGT_NUM() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString6OnlyType& getTGT_NUM() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_NUM(const uci::type::NumericSpaceString6OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_NUM(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_NUM(const char* value) override;

  /** Returns whether this optional field tGT_NUM_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_NUM() const noexcept override;

  /** Enables the optional field such that getTGT_NUM will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString6OnlyType& enableTGT_NUM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& clearTGT_NUM() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString4OnlyType& getTGT_PRI_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString4OnlyType& getTGT_PRI() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString4OnlyType& getTGT_PRI() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_PRI(const uci::type::NumericSpaceString4OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_PRI(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_PRI(const char* value) override;

  /** Returns whether this optional field tGT_PRI_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_PRI() const noexcept override;

  /** Enables the optional field such that getTGT_PRI will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString4OnlyType& enableTGT_PRI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& clearTGT_PRI() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString13OnlyType& getTGT_LTIOV_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString13OnlyType& getTGT_LTIOV() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString13OnlyType& getTGT_LTIOV() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_LTIOV(const uci::type::NumericSpaceString13OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_LTIOV(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_LTIOV(const char* value) override;

  /** Returns whether this optional field tGT_LTIOV_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_LTIOV() const noexcept override;

  /** Enables the optional field such that getTGT_LTIOV will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString13OnlyType& enableTGT_LTIOV(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& clearTGT_LTIOV() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString2OnlyType& getTGT_COLL_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NumericSpaceString2OnlyType& getTGT_COLL() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString2OnlyType& getTGT_COLL() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_COLL(const uci::type::NumericSpaceString2OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_COLL(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_COLL(const char* value) override;

  /** Returns whether this optional field tGT_COLL_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_COLL() const noexcept override;

  /** Enables the optional field such that getTGT_COLL will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NumericSpaceString2OnlyType& enableTGT_COLL(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& clearTGT_COLL() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_CAT_String_Type& getTGT_CAT_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::MSTGTA_TGT_CAT_String_Type& getTGT_CAT() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_CAT_String_Type& getTGT_CAT() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_CAT(const uci::type::MSTGTA_TGT_CAT_String_Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_CAT(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_CAT(const char* value) override;

  /** Returns whether this optional field tGT_CAT_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_CAT() const noexcept override;

  /** Enables the optional field such that getTGT_CAT will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_CAT_String_Type& enableTGT_CAT(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& clearTGT_CAT() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_UTC_Type& getTGT_UTC_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::MSTGTA_TGT_UTC_Type& getTGT_UTC() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_UTC_Type& getTGT_UTC() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_UTC(const uci::type::MSTGTA_TGT_UTC_Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_UTC(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& setTGT_UTC(const char* value) override;

  /** Returns whether this optional field tGT_UTC_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTGT_UTC() const noexcept override;

  /** Enables the optional field such that getTGT_UTC will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::MSTGTA_TGT_UTC_Type& enableTGT_UTC(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MSTGTA_Type& clearTGT_UTC() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MSTGTA_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MSTGTA_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MSTGTA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<NumericSpaceString6OnlyType> tGT_NUM_Accessor;
  std::unique_ptr<NumericSpaceString4OnlyType> tGT_PRI_Accessor;
  std::unique_ptr<NumericSpaceString13OnlyType> tGT_LTIOV_Accessor;
  std::unique_ptr<NumericSpaceString2OnlyType> tGT_COLL_Accessor;
  std::unique_ptr<MSTGTA_TGT_CAT_String_Type> tGT_CAT_Accessor;
  std::unique_ptr<MSTGTA_TGT_UTC_Type> tGT_UTC_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MSTGTA_TYPE_H
