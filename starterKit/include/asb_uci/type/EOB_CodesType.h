/** @file EOB_CodesType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_EOB_CODESTYPE_H
#define ASB_UCI_TYPE_EOB_CODESTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/EOB_ActivityCodeType.h"
#include "../../../include/asb_uci/type/MIDB_EvaluationCodeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_CodesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CountryCodeType;
class EmitterFunctionType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EOB_CodesType : public virtual uci::type::EOB_CodesType {
public:
  /** The constructor */
  EOB_CodesType();

  /** The copy constructor
    *
    * @param rhs The EOB_CodesType to copy from
    */
  EOB_CodesType(const EOB_CodesType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EOB_CodesType to move from
    */
  EOB_CodesType(EOB_CodesType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EOB_CodesType to copy from
    * @return The EOB_CodesType that was assigned
    */
  EOB_CodesType& operator=(const EOB_CodesType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EOB_CodesType to move from
    * @return The EOB_CodesType that was assigned
    */
  EOB_CodesType& operator=(EOB_CodesType&& rhs) = delete;

  /** The destructor */
  virtual ~EOB_CodesType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EOB_CodesType whose contents are to be used to set this uci::type::EOB_CodesType's
    *      contents.
    */
  void copy(const uci::type::EOB_CodesType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EOB_CodesType whose contents are to be used to set this uci::type::EOB_CodesType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EOB_CodesType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MIDB_EvaluationCodeTypeValue getEvaluationCode() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& setEvaluationCode(uci::type::MIDB_EvaluationCodeTypeValue value) override;

  /** Returns whether this optional field EvaluationCodeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEvaluationCode() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& clearEvaluationCode() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterFunctionType& getFunctionCode_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EmitterFunctionType& getFunctionCode() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterFunctionType& getFunctionCode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& setFunctionCode(const uci::type::EmitterFunctionType& accessor) override;

  /** Returns whether this optional field FunctionCodeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFunctionCode() const noexcept override;

  /** Enables the optional field such that getFunctionCode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterFunctionType& enableFunctionCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& clearFunctionCode() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EOB_ActivityCodeType& getActivityCode_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EOB_ActivityCodeType& getActivityCode() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EOB_ActivityCodeType& getActivityCode() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& setActivityCode(const uci::type::EOB_ActivityCodeType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& setActivityCode(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& setActivityCode(const char* value) override;

  /** Returns whether this optional field activityCode_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivityCode() const noexcept override;

  /** Enables the optional field such that getActivityCode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EOB_ActivityCodeType& enableActivityCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& clearActivityCode() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getCountryCode_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CountryCodeType& getCountryCode() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getCountryCode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& setCountryCode(const uci::type::CountryCodeType& accessor) override;

  /** Returns whether this optional field CountryCodeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCountryCode() const noexcept override;

  /** Enables the optional field such that getCountryCode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& enableCountryCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CodesType& clearCountryCode() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EOB_CodesType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_CodesType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EOB_CodesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<MIDB_EvaluationCodeTypeValue> evaluationCode_Accessor;
  std::unique_ptr<EmitterFunctionType> functionCode_Accessor;
  std::unique_ptr<EOB_ActivityCodeType> activityCode_Accessor;
  std::unique_ptr<CountryCodeType> countryCode_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_EOB_CODESTYPE_H
