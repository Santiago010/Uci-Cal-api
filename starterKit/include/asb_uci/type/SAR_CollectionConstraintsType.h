/** @file SAR_CollectionConstraintsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SAR_COLLECTIONCONSTRAINTSTYPE_H
#define ASB_UCI_TYPE_SAR_COLLECTIONCONSTRAINTSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AnglePositiveType.h"
#include "asb_uci/type/AngleQuarterType.h"
#include "asb_uci/type/AngleType.h"
#include "asb_uci/type/CollectionConstraintsType.h"
#include "asb_uci/type/DecibelType.h"
#include "asb_uci/type/DistanceType.h"
#include "asb_uci/type/DurationType.h"
#include "asb_uci/type/PercentType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/SAR_CollectionConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AltitudeRangeType;
class EmconConstraintType;
class PositionLocationUncertaintyType;
class SAR_CollectionConstraintsQualityType;

/** Indicates a set of bounding requirements for the particular collection associated with this command. The subsystem
  * should attempt to satisfy all specified constraints.
  */
class SAR_CollectionConstraintsType : public virtual uci::type::SAR_CollectionConstraintsType, public virtual CollectionConstraintsType {
public:
  /** The constructor */
  SAR_CollectionConstraintsType();

  /** The copy constructor
    *
    * @param rhs The SAR_CollectionConstraintsType to copy from
    */
  SAR_CollectionConstraintsType(const SAR_CollectionConstraintsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SAR_CollectionConstraintsType to move from
    */
  SAR_CollectionConstraintsType(SAR_CollectionConstraintsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SAR_CollectionConstraintsType to copy from
    * @return The SAR_CollectionConstraintsType that was assigned
    */
  SAR_CollectionConstraintsType& operator=(const SAR_CollectionConstraintsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SAR_CollectionConstraintsType to move from
    * @return The SAR_CollectionConstraintsType that was assigned
    */
  SAR_CollectionConstraintsType& operator=(SAR_CollectionConstraintsType&& rhs) = delete;

  /** The destructor */
  ~SAR_CollectionConstraintsType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SAR_CollectionConstraintsType whose contents are to be used to set this
    *      uci::type::SAR_CollectionConstraintsType's contents.
    */
  void copy(const uci::type::SAR_CollectionConstraintsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SAR_CollectionConstraintsType whose contents are to be used to set this
    *      uci::type::SAR_CollectionConstraintsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SAR_CollectionConstraintsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionConstraintsQualityType& getQuality_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SAR_CollectionConstraintsQualityType& getQuality() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionConstraintsQualityType& getQuality() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setQuality(const uci::type::SAR_CollectionConstraintsQualityType& accessor) override;

  /** Returns whether this optional field Qualityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasQuality() const noexcept override;

  /** Enables the optional field such that getQuality will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAR_CollectionConstraintsQualityType& enableQuality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearQuality() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleQuarterTypeValue getContinuousSpotAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setContinuousSpotAngle(uci::type::AngleQuarterTypeValue value) override;

  /** Returns whether this optional field ContinuousSpotAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasContinuousSpotAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearContinuousSpotAngle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AltitudeRangeType& getAltitudeConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AltitudeRangeType& getAltitudeConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AltitudeRangeType& getAltitudeConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setAltitudeConstraints(const uci::type::AltitudeRangeType& accessor) override;

  /** Returns whether this optional field AltitudeConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAltitudeConstraints() const noexcept override;

  /** Enables the optional field such that getAltitudeConstraints will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AltitudeRangeType& enableAltitudeConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearAltitudeConstraints() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getMaximumMappingTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setMaximumMappingTime(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field MaximumMappingTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMaximumMappingTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearMaximumMappingTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleTypeValue getAzSubsetFraction() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setAzSubsetFraction(uci::type::AngleTypeValue value) override;

  /** Returns whether this optional field AzSubsetFractionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAzSubsetFraction() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearAzSubsetFraction() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getLOS_BufferAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setLOS_BufferAngle(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field LOS_BufferAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLOS_BufferAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearLOS_BufferAngle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getNumImagesAzimuth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setNumImagesAzimuth(xs::UnsignedInt value) override;

  /** Returns whether this optional field NumImagesAzimuthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNumImagesAzimuth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearNumImagesAzimuth() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getNumImagesRange() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setNumImagesRange(xs::UnsignedInt value) override;

  /** Returns whether this optional field NumImagesRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNumImagesRange() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearNumImagesRange() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentAzimuthCollection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setPercentAzimuthCollection(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentAzimuthCollectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentAzimuthCollection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearPercentAzimuthCollection() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getHeadingDeviationTolerance() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setHeadingDeviationTolerance(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field HeadingDeviationToleranceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasHeadingDeviationTolerance() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearHeadingDeviationTolerance() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getCrossTrackDeviationTolerance() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setCrossTrackDeviationTolerance(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field CrossTrackDeviationToleranceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCrossTrackDeviationTolerance() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearCrossTrackDeviationTolerance() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmconConstraintType& getEmcon_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EmconConstraintType& getEmcon() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmconConstraintType& getEmcon() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setEmcon(const uci::type::EmconConstraintType& accessor) override;

  /** Returns whether this optional field Emconis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEmcon() const noexcept override;

  /** Enables the optional field such that getEmcon will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmconConstraintType& enableEmcon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearEmcon() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getMapGainAdjustment() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setMapGainAdjustment(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field MapGainAdjustmentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMapGainAdjustment() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearMapGainAdjustment() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& setOwnshipLocationConstraint(const uci::type::PositionLocationUncertaintyType& accessor) override;

  /** Returns whether this optional field OwnshipLocationConstraintis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOwnshipLocationConstraint() const noexcept override;

  /** Enables the optional field such that getOwnshipLocationConstraint will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionLocationUncertaintyType& enableOwnshipLocationConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SAR_CollectionConstraintsType& clearOwnshipLocationConstraint() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SAR_CollectionConstraintsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SAR_CollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SAR_CollectionConstraintsQualityType> quality_Accessor;
  boost::optional<AngleQuarterTypeValue> continuousSpotAngle_Accessor;
  std::unique_ptr<AltitudeRangeType> altitudeConstraints_Accessor;
  boost::optional<DurationTypeValue> maximumMappingTime_Accessor;
  boost::optional<AngleTypeValue> azSubsetFraction_Accessor;
  boost::optional<AnglePositiveTypeValue> lOS_BufferAngle_Accessor;
  boost::optional<asb_xs::UnsignedInt> numImagesAzimuth_Accessor;
  boost::optional<asb_xs::UnsignedInt> numImagesRange_Accessor;
  boost::optional<PercentTypeValue> percentAzimuthCollection_Accessor;
  boost::optional<AnglePositiveTypeValue> headingDeviationTolerance_Accessor;
  boost::optional<DistanceTypeValue> crossTrackDeviationTolerance_Accessor;
  std::unique_ptr<EmconConstraintType> emcon_Accessor;
  boost::optional<DecibelTypeValue> mapGainAdjustment_Accessor;
  std::unique_ptr<PositionLocationUncertaintyType> ownshipLocationConstraint_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SAR_COLLECTIONCONSTRAINTSTYPE_H
