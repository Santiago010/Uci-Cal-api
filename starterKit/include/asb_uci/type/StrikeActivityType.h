/** @file StrikeActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_STRIKEACTIVITYTYPE_H
#define ASB_UCI_TYPE_STRIKEACTIVITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/ActivityBaseType.h"
#include "asb_uci/type/ConsentEnum.h"
#include "asb_uci/type/DurationType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/StrikeActivityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AO_CodeType;
class EnduranceFootprintType;
class GeoLocatedObjectType;
class LAR_ID_Type;
class MunitionInFlightType;

/** See annotations in child elements and messages/elements that use this type for details. */
class StrikeActivityType : public virtual uci::type::StrikeActivityType, public virtual ActivityBaseType {
public:
  /** The constructor */
  StrikeActivityType();

  /** The copy constructor
    *
    * @param rhs The StrikeActivityType to copy from
    */
  StrikeActivityType(const StrikeActivityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The StrikeActivityType to move from
    */
  StrikeActivityType(StrikeActivityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The StrikeActivityType to copy from
    * @return The StrikeActivityType that was assigned
    */
  StrikeActivityType& operator=(const StrikeActivityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The StrikeActivityType to move from
    * @return The StrikeActivityType that was assigned
    */
  StrikeActivityType& operator=(StrikeActivityType&& rhs) = delete;

  /** The destructor */
  ~StrikeActivityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::StrikeActivityType whose contents are to be used to set this
    *      uci::type::StrikeActivityType's contents.
    */
  void copy(const uci::type::StrikeActivityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::StrikeActivityType whose contents are to be used to set this
    *      uci::type::StrikeActivityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::StrikeActivityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's SelectedForKeyLoad field
    *
    * @return The contents of the SelectedForKeyLoad field
    */
  xs::Boolean getSelectedForKeyLoad() const override;

  /** Sets the contents of the message's SelectedForKeyLoad field
    *
    * @param value The new value to set the SelectedForKeyLoad field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setSelectedForKeyLoad(xs::Boolean value) override;

  /** Returns the contents of the message's WeaponArmed field
    *
    * @return The contents of the WeaponArmed field
    */
  xs::Boolean getWeaponArmed() const override;

  /** Sets the contents of the message's WeaponArmed field
    *
    * @param value The new value to set the WeaponArmed field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setWeaponArmed(xs::Boolean value) override;

  /** Returns the contents of the message's ReadyForRelease field
    *
    * @return The contents of the ReadyForRelease field
    */
  xs::Boolean getReadyForRelease() const override;

  /** Sets the contents of the message's ReadyForRelease field
    *
    * @param value The new value to set the ReadyForRelease field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setReadyForRelease(xs::Boolean value) override;

  /** Returns the contents of the message's SelectedForRelease field
    *
    * @return The contents of the SelectedForRelease field
    */
  xs::Boolean getSelectedForRelease() const override;

  /** Sets the contents of the message's SelectedForRelease field
    *
    * @param value The new value to set the SelectedForRelease field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setSelectedForRelease(xs::Boolean value) override;

  /** Returns the contents of the message's SelectedForJettison field
    *
    * @return The contents of the SelectedForJettison field
    */
  xs::Boolean getSelectedForJettison() const override;

  /** Sets the contents of the message's SelectedForJettison field
    *
    * @param value The new value to set the SelectedForJettison field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setSelectedForJettison(xs::Boolean value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GeoLocatedObjectType& getAssignedTarget_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::GeoLocatedObjectType& getAssignedTarget() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GeoLocatedObjectType& getAssignedTarget() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setAssignedTarget(const uci::type::GeoLocatedObjectType& accessor) override;

  /** Returns whether this optional field AssignedTargetis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssignedTarget() const noexcept override;

  /** Enables the optional field such that getAssignedTarget will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GeoLocatedObjectType& enableAssignedTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearAssignedTarget() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AO_CodeType& getAO_Code_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AO_CodeType& getAO_Code() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AO_CodeType& getAO_Code() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setAO_Code(const uci::type::AO_CodeType& accessor) override;

  /** Returns whether this optional field AO_Codeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAO_Code() const noexcept override;

  /** Enables the optional field such that getAO_Code will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AO_CodeType& enableAO_Code(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearAO_Code() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LAR_ID_Type& getLAR_ID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LAR_ID_Type& getLAR_ID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LAR_ID_Type& getLAR_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setLAR_ID(const uci::type::LAR_ID_Type& accessor) override;

  /** Returns whether this optional field LAR_IDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLAR_ID() const noexcept override;

  /** Enables the optional field such that getLAR_ID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LAR_ID_Type& enableLAR_ID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearLAR_ID() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getConsentRequired() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setConsentRequired(xs::Boolean value) override;

  /** Returns whether this optional field ConsentRequiredis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConsentRequired() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearConsentRequired() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConsentEnum& getConsentState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ConsentEnum& getConsentState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConsentEnum& getConsentState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setConsentState(const uci::type::ConsentEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setConsentState(uci::type::ConsentEnum::EnumerationItem value) override;

  /** Returns whether this optional field ConsentStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConsentState() const noexcept override;

  /** Enables the optional field such that getConsentState will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConsentEnum& enableConsentState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearConsentState() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceFootprintType& getKineticFootprint_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EnduranceFootprintType& getKineticFootprint() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceFootprintType& getKineticFootprint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setKineticFootprint(const uci::type::EnduranceFootprintType& accessor) override;

  /** Returns whether this optional field KineticFootprintis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasKineticFootprint() const noexcept override;

  /** Enables the optional field such that getKineticFootprint will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceFootprintType& enableKineticFootprint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearKineticFootprint() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getTargetLockAcquired() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setTargetLockAcquired(xs::Boolean value) override;

  /** Returns whether this optional field TargetLockAcquiredis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTargetLockAcquired() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearTargetLockAcquired() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MunitionInFlightType& getMunitionInFlight_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MunitionInFlightType& getMunitionInFlight() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MunitionInFlightType& getMunitionInFlight() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setMunitionInFlight(const uci::type::MunitionInFlightType& accessor) override;

  /** Returns whether this optional field MunitionInFlightis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMunitionInFlight() const noexcept override;

  /** Enables the optional field such that getMunitionInFlight will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MunitionInFlightType& enableMunitionInFlight(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearMunitionInFlight() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getTimeToRelease() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& setTimeToRelease(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field TimeToReleaseis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeToRelease() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::StrikeActivityType& clearTimeToRelease() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<StrikeActivityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeActivityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::StrikeActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  asb_xs::Boolean selectedForKeyLoad_Accessor{false};
  asb_xs::Boolean weaponArmed_Accessor{false};
  asb_xs::Boolean readyForRelease_Accessor{false};
  asb_xs::Boolean selectedForRelease_Accessor{false};
  asb_xs::Boolean selectedForJettison_Accessor{false};
  std::unique_ptr<GeoLocatedObjectType> assignedTarget_Accessor;
  std::unique_ptr<AO_CodeType> aO_Code_Accessor;
  std::unique_ptr<LAR_ID_Type> lAR_ID_Accessor;
  boost::optional<asb_xs::Boolean> consentRequired_Accessor;
  std::unique_ptr<ConsentEnum> consentState_Accessor;
  std::unique_ptr<EnduranceFootprintType> kineticFootprint_Accessor;
  boost::optional<asb_xs::Boolean> targetLockAcquired_Accessor;
  std::unique_ptr<MunitionInFlightType> munitionInFlight_Accessor;
  boost::optional<DurationTypeValue> timeToRelease_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_STRIKEACTIVITYTYPE_H
