/** @file ActivityCommandBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ACTIVITYCOMMANDBASETYPE_H
#define ASB_UCI_TYPE_ACTIVITYCOMMANDBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/CapabilityCommandStateEnum.h"
#include "asb_uci/type/CommandBaseType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/ActivityCommandBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityID_Type;
class ComparableRankingType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ActivityCommandBaseType : public virtual uci::type::ActivityCommandBaseType, public virtual CommandBaseType {
public:
  /** The constructor */
  ActivityCommandBaseType();

  /** The copy constructor
    *
    * @param rhs The ActivityCommandBaseType to copy from
    */
  ActivityCommandBaseType(const ActivityCommandBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ActivityCommandBaseType to move from
    */
  ActivityCommandBaseType(ActivityCommandBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ActivityCommandBaseType to copy from
    * @return The ActivityCommandBaseType that was assigned
    */
  ActivityCommandBaseType& operator=(const ActivityCommandBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ActivityCommandBaseType to move from
    * @return The ActivityCommandBaseType that was assigned
    */
  ActivityCommandBaseType& operator=(ActivityCommandBaseType&& rhs) = delete;

  /** The destructor */
  ~ActivityCommandBaseType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ActivityCommandBaseType whose contents are to be used to set this
    *      uci::type::ActivityCommandBaseType's contents.
    */
  void copy(const uci::type::ActivityCommandBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ActivityCommandBaseType whose contents are to be used to set this
    *      uci::type::ActivityCommandBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ActivityCommandBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ActivityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityID field.
    */
  const uci::type::ActivityID_Type& getActivityID() const override;

  /** Returns the accessor to the ActivityID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityID field.
    */
  uci::type::ActivityID_Type& getActivityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& setActivityID(const uci::type::ActivityID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& getChangeActivityRank_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ComparableRankingType& getChangeActivityRank() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& getChangeActivityRank() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& setChangeActivityRank(const uci::type::ComparableRankingType& accessor) override;

  /** Returns whether this optional field ChangeActivityRankis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChangeActivityRank() const noexcept override;

  /** Enables the optional field such that getChangeActivityRank will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& enableChangeActivityRank(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& clearChangeActivityRank() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandStateEnum& getChangeActivityState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandStateEnum& getChangeActivityState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandStateEnum& getChangeActivityState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& setChangeActivityState(const uci::type::CapabilityCommandStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& setChangeActivityState(uci::type::CapabilityCommandStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field ChangeActivityStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChangeActivityState() const noexcept override;

  /** Enables the optional field such that getChangeActivityState will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandStateEnum& enableChangeActivityState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& clearChangeActivityState() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getDeleteActivity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& setDeleteActivity(xs::Boolean value) override;

  /** Returns whether this optional field DeleteActivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDeleteActivity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& clearDeleteActivity() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getUnassignActivity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& setUnassignActivity(xs::Boolean value) override;

  /** Returns whether this optional field UnassignActivityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUnassignActivity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ActivityCommandBaseType& clearUnassignActivity() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ActivityCommandBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityCommandBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ActivityCommandBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ActivityID_Type> activityID_Accessor;
  std::unique_ptr<ComparableRankingType> changeActivityRank_Accessor;
  std::unique_ptr<CapabilityCommandStateEnum> changeActivityState_Accessor;
  boost::optional<asb_xs::Boolean> deleteActivity_Accessor;
  boost::optional<asb_xs::Boolean> unassignActivity_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ACTIVITYCOMMANDBASETYPE_H
