/** @file VideoEncoderSettingsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_VIDEOENCODERSETTINGSTYPE_H
#define ASB_UCI_TYPE_VIDEOENCODERSETTINGSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/FrequencyType.h"
#include "../../../include/asb_uci/type/PercentType.h"
#include "../../../include/asb_uci/type/VideoBlockSizeEnum.h"
#include "../../../include/asb_uci/type/VideoChromaSubsampleEnum.h"
#include "../../../include/asb_uci/type/VideoEncoderCompressionModeEnum.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VideoEncoderSettingsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CropType;
class ForeignKeyType;
class UnsignedIntegerMinMaxType;

/** See annotations in child elements and messages/elements that use this type for details. */
class VideoEncoderSettingsType : public virtual uci::type::VideoEncoderSettingsType {
public:
  /** The constructor */
  VideoEncoderSettingsType();

  /** The copy constructor
    *
    * @param rhs The VideoEncoderSettingsType to copy from
    */
  VideoEncoderSettingsType(const VideoEncoderSettingsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The VideoEncoderSettingsType to move from
    */
  VideoEncoderSettingsType(VideoEncoderSettingsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The VideoEncoderSettingsType to copy from
    * @return The VideoEncoderSettingsType that was assigned
    */
  VideoEncoderSettingsType& operator=(const VideoEncoderSettingsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The VideoEncoderSettingsType to move from
    * @return The VideoEncoderSettingsType that was assigned
    */
  VideoEncoderSettingsType& operator=(VideoEncoderSettingsType&& rhs) = delete;

  /** The destructor */
  virtual ~VideoEncoderSettingsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::VideoEncoderSettingsType whose contents are to be used to set this
    *      uci::type::VideoEncoderSettingsType's contents.
    */
  void copy(const uci::type::VideoEncoderSettingsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::VideoEncoderSettingsType whose contents are to be used to set this
    *      uci::type::VideoEncoderSettingsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::VideoEncoderSettingsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getEncodingType_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getEncodingType() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getEncodingType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setEncodingType(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field EncodingTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEncodingType() const noexcept override;

  /** Enables the optional field such that getEncodingType will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableEncodingType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearEncodingType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getProfile_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString32Type& getProfile() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getProfile() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setProfile(const uci::type::VisibleString32Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setProfile(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setProfile(const char* value) override;

  /** Returns whether this optional field profile_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProfile() const noexcept override;

  /** Enables the optional field such that getProfile will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& enableProfile(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearProfile() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoBlockSizeEnum& getEncodingBlocks_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VideoBlockSizeEnum& getEncodingBlocks() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoBlockSizeEnum& getEncodingBlocks() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setEncodingBlocks(const uci::type::VideoBlockSizeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setEncodingBlocks(uci::type::VideoBlockSizeEnum::EnumerationItem value) override;

  /** Returns whether this optional field EncodingBlocksis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEncodingBlocks() const noexcept override;

  /** Enables the optional field such that getEncodingBlocks will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoBlockSizeEnum& enableEncodingBlocks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearEncodingBlocks() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoChromaSubsampleEnum& getChromaSubsample_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VideoChromaSubsampleEnum& getChromaSubsample() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoChromaSubsampleEnum& getChromaSubsample() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setChromaSubsample(const uci::type::VideoChromaSubsampleEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setChromaSubsample(uci::type::VideoChromaSubsampleEnum::EnumerationItem value) override;

  /** Returns whether this optional field ChromaSubsampleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasChromaSubsample() const noexcept override;

  /** Enables the optional field such that getChromaSubsample will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoChromaSubsampleEnum& enableChromaSubsample(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearChromaSubsample() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrameRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setFrameRate(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field FrameRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrameRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearFrameRate() noexcept override;

  /** Returns the contents of the message's HDR field
    *
    * @return The contents of the HDR field
    */
  xs::Boolean getHDR() const override;

  /** Sets the contents of the message's HDR field
    *
    * @param value The new value to set the HDR field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setHDR(xs::Boolean value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getBitRate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setBitRate(xs::UnsignedInt value) override;

  /** Returns whether this optional field BitRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBitRate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearBitRate() noexcept override;

  /** Returns the contents of the message's EmbedKLV_Metadata field
    *
    * @return The contents of the EmbedKLV_Metadata field
    */
  xs::Boolean getEmbedKLV_Metadata() const override;

  /** Sets the contents of the message's EmbedKLV_Metadata field
    *
    * @param value The new value to set the EmbedKLV_Metadata field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setEmbedKLV_Metadata(xs::Boolean value) override;

  /** Returns the contents of the message's EmbedPlatformMetadata field
    *
    * @return The contents of the EmbedPlatformMetadata field
    */
  xs::Boolean getEmbedPlatformMetadata() const override;

  /** Sets the contents of the message's EmbedPlatformMetadata field
    *
    * @param value The new value to set the EmbedPlatformMetadata field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setEmbedPlatformMetadata(xs::Boolean value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getSkipFrames() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setSkipFrames(xs::UnsignedByte value) override;

  /** Returns whether this optional field SkipFramesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSkipFrames() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearSkipFrames() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UnsignedIntegerMinMaxType& getQuantMinMax_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::UnsignedIntegerMinMaxType& getQuantMinMax() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UnsignedIntegerMinMaxType& getQuantMinMax() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setQuantMinMax(const uci::type::UnsignedIntegerMinMaxType& accessor) override;

  /** Returns whether this optional field QuantMinMaxis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasQuantMinMax() const noexcept override;

  /** Enables the optional field such that getQuantMinMax will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::UnsignedIntegerMinMaxType& enableQuantMinMax(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearQuantMinMax() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoEncoderCompressionModeEnum& getCompressionMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VideoEncoderCompressionModeEnum& getCompressionMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoEncoderCompressionModeEnum& getCompressionMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setCompressionMode(const uci::type::VideoEncoderCompressionModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setCompressionMode(uci::type::VideoEncoderCompressionModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field CompressionModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCompressionMode() const noexcept override;

  /** Enables the optional field such that getCompressionMode will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VideoEncoderCompressionModeEnum& enableCompressionMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearCompressionMode() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getB_Frames() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setB_Frames(xs::UnsignedByte value) override;

  /** Returns whether this optional field B_Framesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasB_Frames() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearB_Frames() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedShort getGOP_Size() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setGOP_Size(xs::UnsignedShort value) override;

  /** Returns whether this optional field GOP_Sizeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGOP_Size() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearGOP_Size() noexcept override;

  /** Returns the contents of the message's IntraRefreshMode field
    *
    * @return The contents of the IntraRefreshMode field
    */
  xs::Boolean getIntraRefreshMode() const override;

  /** Sets the contents of the message's IntraRefreshMode field
    *
    * @param value The new value to set the IntraRefreshMode field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setIntraRefreshMode(xs::Boolean value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getIntraRefreshPercentage() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setIntraRefreshPercentage(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field IntraRefreshPercentageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIntraRefreshPercentage() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearIntraRefreshPercentage() noexcept override;

  /** Returns the contents of the message's ColorBitDepth field
    *
    * @return The contents of the ColorBitDepth field
    */
  xs::UnsignedByte getColorBitDepth() const override;

  /** Sets the contents of the message's ColorBitDepth field
    *
    * @param value The new value to set the ColorBitDepth field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setColorBitDepth(xs::UnsignedByte value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CropType& getCrop_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CropType& getCrop() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CropType& getCrop() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setCrop(const uci::type::CropType& accessor) override;

  /** Returns whether this optional field Cropis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCrop() const noexcept override;

  /** Enables the optional field such that getCrop will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CropType& enableCrop(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearCrop() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getScaling() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& setScaling(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field Scalingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasScaling() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::VideoEncoderSettingsType& clearScaling() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<VideoEncoderSettingsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::VideoEncoderSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::VideoEncoderSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ForeignKeyType> encodingType_Accessor;
  std::unique_ptr<VisibleString32Type> profile_Accessor;
  std::unique_ptr<VideoBlockSizeEnum> encodingBlocks_Accessor;
  std::unique_ptr<VideoChromaSubsampleEnum> chromaSubsample_Accessor;
  boost::optional<FrequencyTypeValue> frameRate_Accessor;
  asb_xs::Boolean hDR_Accessor{false};
  boost::optional<asb_xs::UnsignedInt> bitRate_Accessor;
  asb_xs::Boolean embedKLV_Metadata_Accessor{false};
  asb_xs::Boolean embedPlatformMetadata_Accessor{false};
  boost::optional<asb_xs::UnsignedByte> skipFrames_Accessor;
  std::unique_ptr<UnsignedIntegerMinMaxType> quantMinMax_Accessor;
  std::unique_ptr<VideoEncoderCompressionModeEnum> compressionMode_Accessor;
  boost::optional<asb_xs::UnsignedByte> b_Frames_Accessor;
  boost::optional<asb_xs::UnsignedShort> gOP_Size_Accessor;
  asb_xs::Boolean intraRefreshMode_Accessor{false};
  boost::optional<PercentTypeValue> intraRefreshPercentage_Accessor;
  asb_xs::UnsignedByte colorBitDepth_Accessor{0};
  std::unique_ptr<CropType> crop_Accessor;
  boost::optional<PercentTypeValue> scaling_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_VIDEOENCODERSETTINGSTYPE_H
