/** @file SignalRelativeType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SIGNALRELATIVETYPE_H
#define ASB_UCI_TYPE_SIGNALRELATIVETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/EW_MeasurementEnum.h"
#include "asb_uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "asb_uci/type/MeasurementStatusEnum.h"
#include "asb_uci/type/SignalMeasurementFlagEnum.h"
#include "asb_uci/type/SignalMeasurementMethodEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/SignalRelativeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ReferenceObjectType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SignalRelativeType : public virtual uci::type::SignalRelativeType, public virtual LOS_MeasurementWithUncertaintyType {
public:
  /** The constructor */
  SignalRelativeType();

  /** The copy constructor
    *
    * @param rhs The SignalRelativeType to copy from
    */
  SignalRelativeType(const SignalRelativeType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SignalRelativeType to move from
    */
  SignalRelativeType(SignalRelativeType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SignalRelativeType to copy from
    * @return The SignalRelativeType that was assigned
    */
  SignalRelativeType& operator=(const SignalRelativeType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SignalRelativeType to move from
    * @return The SignalRelativeType that was assigned
    */
  SignalRelativeType& operator=(SignalRelativeType&& rhs) = delete;

  /** The destructor */
  ~SignalRelativeType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalRelativeType whose contents are to be used to set this
    *      uci::type::SignalRelativeType's contents.
    */
  void copy(const uci::type::SignalRelativeType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalRelativeType whose contents are to be used to set this
    *      uci::type::SignalRelativeType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SignalRelativeType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReferenceObjectType& getReferenceIdentifier_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ReferenceObjectType& getReferenceIdentifier() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReferenceObjectType& getReferenceIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setReferenceIdentifier(const uci::type::ReferenceObjectType& accessor) override;

  /** Returns whether this optional field ReferenceIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReferenceIdentifier() const noexcept override;

  /** Enables the optional field such that getReferenceIdentifier will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReferenceObjectType& enableReferenceIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearReferenceIdentifier() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalMeasurementMethodEnum& getMeasurement_Method_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalMeasurementMethodEnum& getMeasurement_Method() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalMeasurementMethodEnum& getMeasurement_Method() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setMeasurement_Method(const uci::type::SignalMeasurementMethodEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setMeasurement_Method(uci::type::SignalMeasurementMethodEnum::EnumerationItem value) override;

  /** Returns whether this optional field Measurement_Methodis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMeasurement_Method() const noexcept override;

  /** Enables the optional field such that getMeasurement_Method will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalMeasurementMethodEnum& enableMeasurement_Method(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearMeasurement_Method() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementStatusEnum& getMeasurement_Status_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MeasurementStatusEnum& getMeasurement_Status() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementStatusEnum& getMeasurement_Status() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setMeasurement_Status(const uci::type::MeasurementStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setMeasurement_Status(uci::type::MeasurementStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field Measurement_Statusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMeasurement_Status() const noexcept override;

  /** Enables the optional field such that getMeasurement_Status will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MeasurementStatusEnum& enableMeasurement_Status(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearMeasurement_Status() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalMeasurementFlagEnum& getMeasurement_Flag_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalMeasurementFlagEnum& getMeasurement_Flag() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalMeasurementFlagEnum& getMeasurement_Flag() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setMeasurement_Flag(const uci::type::SignalMeasurementFlagEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setMeasurement_Flag(uci::type::SignalMeasurementFlagEnum::EnumerationItem value) override;

  /** Returns whether this optional field Measurement_Flagis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMeasurement_Flag() const noexcept override;

  /** Enables the optional field such that getMeasurement_Flag will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalMeasurementFlagEnum& enableMeasurement_Flag(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearMeasurement_Flag() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getSuspect() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setSuspect(xs::Boolean value) override;

  /** Returns whether this optional field Suspectis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSuspect() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearSuspect() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getExcessiveAttitude() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setExcessiveAttitude(xs::Boolean value) override;

  /** Returns whether this optional field ExcessiveAttitudeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasExcessiveAttitude() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearExcessiveAttitude() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getFringeDetection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setFringeDetection(xs::Boolean value) override;

  /** Returns whether this optional field FringeDetectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFringeDetection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearFringeDetection() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EW_MeasurementEnum& getEW_MeasurementType_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EW_MeasurementEnum& getEW_MeasurementType() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EW_MeasurementEnum& getEW_MeasurementType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setEW_MeasurementType(const uci::type::EW_MeasurementEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& setEW_MeasurementType(uci::type::EW_MeasurementEnum::EnumerationItem value) override;

  /** Returns whether this optional field EW_MeasurementTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEW_MeasurementType() const noexcept override;

  /** Enables the optional field such that getEW_MeasurementType will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EW_MeasurementEnum& enableEW_MeasurementType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalRelativeType& clearEW_MeasurementType() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SignalRelativeType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalRelativeType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SignalRelativeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ReferenceObjectType> referenceIdentifier_Accessor;
  std::unique_ptr<SignalMeasurementMethodEnum> measurement_Method_Accessor;
  std::unique_ptr<MeasurementStatusEnum> measurement_Status_Accessor;
  std::unique_ptr<SignalMeasurementFlagEnum> measurement_Flag_Accessor;
  boost::optional<asb_xs::Boolean> suspect_Accessor;
  boost::optional<asb_xs::Boolean> excessiveAttitude_Accessor;
  boost::optional<asb_xs::Boolean> fringeDetection_Accessor;
  std::unique_ptr<EW_MeasurementEnum> eW_MeasurementType_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SIGNALRELATIVETYPE_H
