/** @file SOB_SatelliteRecordBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SOB_SATELLITERECORDBASETYPE_H
#define ASB_UCI_TYPE_SOB_SATELLITERECORDBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/MassType.h"
#include "../../../include/asb_uci/type/OB_OperationalStatusEnum.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/VisibleString512Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_SatelliteRecordBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_RecordID_Type;
class FileMetadataID_Type;
class LaunchObservationID_Type;
class LaunchStaticDetailsType;
class OrbitKinematicsParametersType;
class OrbitRegimeType;
class OrderOfBattleEmitterType;
class OrderOfBattleTimestampsType;
class ProductMetadataID_Type;
class SOB_EquipmentType;
class SOB_SatelliteRecordID_Type;
class SOB_SatelliteRecordRemoveInfoType;
class SatelliteCharacteristicsOverrideType;
class SatelliteEnduranceType;
class SatelliteIdentityType;

/** Contains satellite or launch vehicle information similar to a space catalog record. */
class SOB_SatelliteRecordBaseType : public virtual uci::type::SOB_SatelliteRecordBaseType {
public:
  /** Describes the pieces of equipment on the satellite, or the eqiupment that make up the launch vehicle. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Equipment = asb_uci::base::BoundedList<uci::type::SOB_EquipmentType, uci::type::accessorType::sOB_EquipmentType, asb_uci::type::SOB_EquipmentType>;

  /** Degree to which the item is ready to perform the overall mission. Default value is 'OPR'. List size for this element
    * is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 24]
    */
  using OperationalStatus = asb_uci::base::BoundedList<uci::type::OB_OperationalStatusEnum, uci::type::accessorType::oB_OperationalStatusEnum, asb_uci::type::OB_OperationalStatusEnum>;

  /** Specifies satellite records associated with this SOB Satellite Record. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using RelatedSatelliteRecordID = asb_uci::base::BoundedList<uci::type::SOB_SatelliteRecordID_Type, uci::type::accessorType::sOB_SatelliteRecordID_Type, asb_uci::type::SOB_SatelliteRecordID_Type>;

  /** A reference to metadata for a product associated with the record. For example, an image of the satellite collected by
    * a tactical sensor. Products meant to convey generally static physical or performance characteristics should be given
    * in the sibling Characteristics element. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ProductID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** A reference to metadata for a file associated with the record. Files meant to convey generally static physical or
    * performance characteristics should be given in the sibling Characteristics element. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using FileID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates modes and parametrics of an emitter associated with the record. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Emitter = asb_uci::base::BoundedList<uci::type::OrderOfBattleEmitterType, uci::type::accessorType::orderOfBattleEmitterType, asb_uci::type::OrderOfBattleEmitterType>;

  /** The constructor */
  SOB_SatelliteRecordBaseType();

  /** The copy constructor
    *
    * @param rhs The SOB_SatelliteRecordBaseType to copy from
    */
  SOB_SatelliteRecordBaseType(const SOB_SatelliteRecordBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SOB_SatelliteRecordBaseType to move from
    */
  SOB_SatelliteRecordBaseType(SOB_SatelliteRecordBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SOB_SatelliteRecordBaseType to copy from
    * @return The SOB_SatelliteRecordBaseType that was assigned
    */
  SOB_SatelliteRecordBaseType& operator=(const SOB_SatelliteRecordBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SOB_SatelliteRecordBaseType to move from
    * @return The SOB_SatelliteRecordBaseType that was assigned
    */
  SOB_SatelliteRecordBaseType& operator=(SOB_SatelliteRecordBaseType&& rhs) = delete;

  /** The destructor */
  virtual ~SOB_SatelliteRecordBaseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SOB_SatelliteRecordBaseType whose contents are to be used to set this
    *      uci::type::SOB_SatelliteRecordBaseType's contents.
    */
  void copy(const uci::type::SOB_SatelliteRecordBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SOB_SatelliteRecordBaseType whose contents are to be used to set this
    *      uci::type::SOB_SatelliteRecordBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SOB_SatelliteRecordBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SOB_SatelliteRecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SOB_SatelliteRecordID field.
    */
  const uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() const override;

  /** Returns the accessor to the SOB_SatelliteRecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the SOB_SatelliteRecordID field.
    */
  uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_RecordID_Type& getEOB_RecordID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EOB_RecordID_Type& getEOB_RecordID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_RecordID_Type& getEOB_RecordID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) override;

  /** Returns whether this optional field EOB_RecordIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEOB_RecordID() const noexcept override;

  /** Enables the optional field such that getEOB_RecordID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_RecordID_Type& enableEOB_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearEOB_RecordID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteIdentityType& getIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SatelliteIdentityType& getIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteIdentityType& getIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setIdentity(const uci::type::SatelliteIdentityType& accessor) override;

  /** Returns whether this optional field Identityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIdentity() const noexcept override;

  /** Enables the optional field such that getIdentity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearIdentity() noexcept override;

  /** Returns the accessor to the Equipment field contained in this message fragment
    *
    * @return The const reference to the accessor to the Equipment field.
    */
  const uci::type::SOB_SatelliteRecordBaseType::Equipment& getEquipment() const override;

  /** Returns the accessor to the Equipment field contained in this message fragment
    *
    * @return The reference to the accessor to the Equipment field.
    */
  uci::type::SOB_SatelliteRecordBaseType::Equipment& getEquipment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setEquipment(const uci::type::SOB_SatelliteRecordBaseType::Equipment& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitRegimeType& getOrbit_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitRegimeType& getOrbit() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitRegimeType& getOrbit() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setOrbit(const uci::type::OrbitRegimeType& accessor) override;

  /** Returns whether this optional field Orbitis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrbit() const noexcept override;

  /** Enables the optional field such that getOrbit will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitRegimeType& enableOrbit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearOrbit() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrderOfBattleTimestampsType& getTimestamps() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) override;

  /** Returns whether this optional field Timestampsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimestamps() const noexcept override;

  /** Enables the optional field such that getTimestamps will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& enableTimestamps(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearTimestamps() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getDecayDate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setDecayDate(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field DecayDateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDecayDate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearDecayDate() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchObservationID_Type& getRelatedLaunchObservationID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LaunchObservationID_Type& getRelatedLaunchObservationID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchObservationID_Type& getRelatedLaunchObservationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setRelatedLaunchObservationID(const uci::type::LaunchObservationID_Type& accessor) override;

  /** Returns whether this optional field RelatedLaunchObservationIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRelatedLaunchObservationID() const noexcept override;

  /** Enables the optional field such that getRelatedLaunchObservationID will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchObservationID_Type& enableRelatedLaunchObservationID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearRelatedLaunchObservationID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchStaticDetailsType& getHistoricalLaunchData_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LaunchStaticDetailsType& getHistoricalLaunchData() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchStaticDetailsType& getHistoricalLaunchData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setHistoricalLaunchData(const uci::type::LaunchStaticDetailsType& accessor) override;

  /** Returns whether this optional field HistoricalLaunchDatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasHistoricalLaunchData() const noexcept override;

  /** Enables the optional field such that getHistoricalLaunchData will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchStaticDetailsType& enableHistoricalLaunchData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearHistoricalLaunchData() noexcept override;

  /** Returns the accessor to the OperationalStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the OperationalStatus field.
    */
  const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& getOperationalStatus() const override;

  /** Returns the accessor to the OperationalStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the OperationalStatus field.
    */
  uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& getOperationalStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setOperationalStatus(const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitKinematicsParametersType& getKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitKinematicsParametersType& getKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitKinematicsParametersType& getKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setKinematics(const uci::type::OrbitKinematicsParametersType& accessor) override;

  /** Returns whether this optional field Kinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasKinematics() const noexcept override;

  /** Enables the optional field such that getKinematics will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitKinematicsParametersType& enableKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearKinematics() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MassTypeValue getMass() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setMass(uci::type::MassTypeValue value) override;

  /** Returns whether this optional field Massis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMass() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearMass() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteEnduranceType& getEndurance_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SatelliteEnduranceType& getEndurance() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteEnduranceType& getEndurance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setEndurance(const uci::type::SatelliteEnduranceType& accessor) override;

  /** Returns whether this optional field Enduranceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEndurance() const noexcept override;

  /** Enables the optional field such that getEndurance will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteEnduranceType& enableEndurance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearEndurance() noexcept override;

  /** Returns the accessor to the RelatedSatelliteRecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RelatedSatelliteRecordID field.
    */
  const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& getRelatedSatelliteRecordID() const override;

  /** Returns the accessor to the RelatedSatelliteRecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the RelatedSatelliteRecordID field.
    */
  uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& getRelatedSatelliteRecordID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setRelatedSatelliteRecordID(const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getPatternOfLife_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString1024Type& getPatternOfLife() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getPatternOfLife() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setPatternOfLife(const uci::type::VisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setPatternOfLife(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setPatternOfLife(const char* value) override;

  /** Returns whether this optional field patternOfLife_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPatternOfLife() const noexcept override;

  /** Enables the optional field such that getPatternOfLife will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& enablePatternOfLife(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearPatternOfLife() noexcept override;

  /** Returns the accessor to the ProductID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductID field.
    */
  const uci::type::SOB_SatelliteRecordBaseType::ProductID& getProductID() const override;

  /** Returns the accessor to the ProductID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductID field.
    */
  uci::type::SOB_SatelliteRecordBaseType::ProductID& getProductID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setProductID(const uci::type::SOB_SatelliteRecordBaseType::ProductID& accessor) override;

  /** Returns the accessor to the FileID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FileID field.
    */
  const uci::type::SOB_SatelliteRecordBaseType::FileID& getFileID() const override;

  /** Returns the accessor to the FileID field contained in this message fragment
    *
    * @return The reference to the accessor to the FileID field.
    */
  uci::type::SOB_SatelliteRecordBaseType::FileID& getFileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setFileID(const uci::type::SOB_SatelliteRecordBaseType::FileID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteCharacteristicsOverrideType& getCharacteristics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SatelliteCharacteristicsOverrideType& getCharacteristics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteCharacteristicsOverrideType& getCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setCharacteristics(const uci::type::SatelliteCharacteristicsOverrideType& accessor) override;

  /** Returns whether this optional field Characteristicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCharacteristics() const noexcept override;

  /** Enables the optional field such that getCharacteristics will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SatelliteCharacteristicsOverrideType& enableCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearCharacteristics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SOB_SatelliteRecordRemoveInfoType& getRemoveInfo_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SOB_SatelliteRecordRemoveInfoType& getRemoveInfo() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SOB_SatelliteRecordRemoveInfoType& getRemoveInfo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setRemoveInfo(const uci::type::SOB_SatelliteRecordRemoveInfoType& accessor) override;

  /** Returns whether this optional field RemoveInfois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemoveInfo() const noexcept override;

  /** Enables the optional field such that getRemoveInfo will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SOB_SatelliteRecordRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearRemoveInfo() noexcept override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Emitter field.
    */
  const uci::type::SOB_SatelliteRecordBaseType::Emitter& getEmitter() const override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The reference to the accessor to the Emitter field.
    */
  uci::type::SOB_SatelliteRecordBaseType::Emitter& getEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setEmitter(const uci::type::SOB_SatelliteRecordBaseType::Emitter& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& getRemarksText_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString512Type& getRemarksText() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& getRemarksText() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setRemarksText(const uci::type::VisibleString512Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setRemarksText(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& setRemarksText(const char* value) override;

  /** Returns whether this optional field remarksText_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemarksText() const noexcept override;

  /** Enables the optional field such that getRemarksText will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString512Type& enableRemarksText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SOB_SatelliteRecordBaseType& clearRemarksText() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SOB_SatelliteRecordBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_SatelliteRecordBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SOB_SatelliteRecordBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SOB_SatelliteRecordID_Type> sOB_SatelliteRecordID_Accessor;
  std::unique_ptr<EOB_RecordID_Type> eOB_RecordID_Accessor;
  std::unique_ptr<SatelliteIdentityType> identity_Accessor;
  std::unique_ptr<Equipment> equipment_Accessor;
  std::unique_ptr<OrbitRegimeType> orbit_Accessor;
  std::unique_ptr<OrderOfBattleTimestampsType> timestamps_Accessor;
  boost::optional<DateTimeTypeValue> decayDate_Accessor;
  std::unique_ptr<LaunchObservationID_Type> relatedLaunchObservationID_Accessor;
  std::unique_ptr<LaunchStaticDetailsType> historicalLaunchData_Accessor;
  std::unique_ptr<OperationalStatus> operationalStatus_Accessor;
  std::unique_ptr<OrbitKinematicsParametersType> kinematics_Accessor;
  boost::optional<MassTypeValue> mass_Accessor;
  std::unique_ptr<SatelliteEnduranceType> endurance_Accessor;
  std::unique_ptr<RelatedSatelliteRecordID> relatedSatelliteRecordID_Accessor;
  std::unique_ptr<VisibleString1024Type> patternOfLife_Accessor;
  std::unique_ptr<ProductID> productID_Accessor;
  std::unique_ptr<FileID> fileID_Accessor;
  std::unique_ptr<SatelliteCharacteristicsOverrideType> characteristics_Accessor;
  std::unique_ptr<SOB_SatelliteRecordRemoveInfoType> removeInfo_Accessor;
  std::unique_ptr<Emitter> emitter_Accessor;
  std::unique_ptr<VisibleString512Type> remarksText_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SOB_SATELLITERECORDBASETYPE_H
