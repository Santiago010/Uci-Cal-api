/** @file OrbitalRendezvousEventType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ORBITALRENDEZVOUSEVENTTYPE_H
#define ASB_UCI_TYPE_ORBITALRENDEZVOUSEVENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AngleHalfPositiveType.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_uci/type/DistanceType.h"
#include "asb_uci/type/PercentType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/OrbitalRendezvousEventType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class OrbitalDeltaVelocity_A_Type;
class OrbitalObjectComparisonDeltaType;
class OrbitalToleranceValuesType;

/** This type specifies details for a Rendezvous Operational Proximity Analysis Event. */
class OrbitalRendezvousEventType : public virtual uci::type::OrbitalRendezvousEventType {
public:
  /** The constructor */
  OrbitalRendezvousEventType();

  /** The copy constructor
    *
    * @param rhs The OrbitalRendezvousEventType to copy from
    */
  OrbitalRendezvousEventType(const OrbitalRendezvousEventType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OrbitalRendezvousEventType to move from
    */
  OrbitalRendezvousEventType(OrbitalRendezvousEventType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The OrbitalRendezvousEventType to copy from
    * @return The OrbitalRendezvousEventType that was assigned
    */
  OrbitalRendezvousEventType& operator=(const OrbitalRendezvousEventType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OrbitalRendezvousEventType to move from
    * @return The OrbitalRendezvousEventType that was assigned
    */
  OrbitalRendezvousEventType& operator=(OrbitalRendezvousEventType&& rhs) = delete;

  /** The destructor */
  virtual ~OrbitalRendezvousEventType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalRendezvousEventType whose contents are to be used to set this
    *      uci::type::OrbitalRendezvousEventType's contents.
    */
  void copy(const uci::type::OrbitalRendezvousEventType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalRendezvousEventType whose contents are to be used to set this
    *      uci::type::OrbitalRendezvousEventType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OrbitalRendezvousEventType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's ActorStateEpoch field
    *
    * @return The contents of the ActorStateEpoch field
    */
  uci::type::DateTimeTypeValue getActorStateEpoch() const override;

  /** Sets the contents of the message's ActorStateEpoch field
    *
    * @param value The new value to set the ActorStateEpoch field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setActorStateEpoch(uci::type::DateTimeTypeValue value) override;

  /** Returns the contents of the message's TargetStateEpoch field
    *
    * @return The contents of the TargetStateEpoch field
    */
  uci::type::DateTimeTypeValue getTargetStateEpoch() const override;

  /** Sets the contents of the message's TargetStateEpoch field
    *
    * @param value The new value to set the TargetStateEpoch field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setTargetStateEpoch(uci::type::DateTimeTypeValue value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getAnalysisEpoch() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setAnalysisEpoch(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field AnalysisEpochis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAnalysisEpoch() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearAnalysisEpoch() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Duration getAnalysisDuration() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setAnalysisDuration(xs::Duration value) override;

  /** Returns whether this optional field AnalysisDurationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAnalysisDuration() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearAnalysisDuration() noexcept override;

  /** Returns the contents of the message's EventIntervalCoverage field
    *
    * @return The contents of the EventIntervalCoverage field
    */
  uci::type::PercentTypeValue getEventIntervalCoverage() const override;

  /** Sets the contents of the message's EventIntervalCoverage field
    *
    * @param value The new value to set the EventIntervalCoverage field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setEventIntervalCoverage(uci::type::PercentTypeValue value) override;

  /** Returns the contents of the message's NumberSubIntervals field
    *
    * @return The contents of the NumberSubIntervals field
    */
  xs::Int getNumberSubIntervals() const override;

  /** Sets the contents of the message's NumberSubIntervals field
    *
    * @param value The new value to set the NumberSubIntervals field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setNumberSubIntervals(xs::Int value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getMinimumRange() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setMinimumRange(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field MinimumRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinimumRange() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearMinimumRange() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getMinimumRangeEpoch() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setMinimumRangeEpoch(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field MinimumRangeEpochis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinimumRangeEpoch() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearMinimumRangeEpoch() noexcept override;

  /** Returns the contents of the message's MinimumRangeAnalysisDuration field
    *
    * @return The contents of the MinimumRangeAnalysisDuration field
    */
  xs::Duration getMinimumRangeAnalysisDuration() const override;

  /** Sets the contents of the message's MinimumRangeAnalysisDuration field
    *
    * @param value The new value to set the MinimumRangeAnalysisDuration field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setMinimumRangeAnalysisDuration(xs::Duration value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleHalfPositiveTypeValue getMinimumInPlaneSeparationAngle() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setMinimumInPlaneSeparationAngle(uci::type::AngleHalfPositiveTypeValue value) override;

  /** Returns whether this optional field MinimumInPlaneSeparationAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinimumInPlaneSeparationAngle() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearMinimumInPlaneSeparationAngle() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getMinimumInPlaneSeparationEpoch() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setMinimumInPlaneSeparationEpoch(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field MinimumInPlaneSeparationEpochis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMinimumInPlaneSeparationEpoch() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearMinimumInPlaneSeparationEpoch() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventStart_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventStart() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventStart() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setObjectComparisonAtEventStart(const uci::type::OrbitalObjectComparisonDeltaType& accessor) override;

  /** Returns whether this optional field ObjectComparisonAtEventStartis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObjectComparisonAtEventStart() const noexcept override;

  /** Enables the optional field such that getObjectComparisonAtEventStart will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& enableObjectComparisonAtEventStart(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearObjectComparisonAtEventStart() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventEnd_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventEnd() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventEnd() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setObjectComparisonAtEventEnd(const uci::type::OrbitalObjectComparisonDeltaType& accessor) override;

  /** Returns whether this optional field ObjectComparisonAtEventEndis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObjectComparisonAtEventEnd() const noexcept override;

  /** Enables the optional field such that getObjectComparisonAtEventEnd will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& enableObjectComparisonAtEventEnd(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearObjectComparisonAtEventEnd() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonMeans_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonMeans() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonMeans() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setObjectComparisonMeans(const uci::type::OrbitalObjectComparisonDeltaType& accessor) override;

  /** Returns whether this optional field ObjectComparisonMeansis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObjectComparisonMeans() const noexcept override;

  /** Enables the optional field such that getObjectComparisonMeans will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalObjectComparisonDeltaType& enableObjectComparisonMeans(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& clearObjectComparisonMeans() noexcept override;

  /** Returns the accessor to the DeltaV field contained in this message fragment
    *
    * @return The const reference to the accessor to the DeltaV field.
    */
  const uci::type::OrbitalDeltaVelocity_A_Type& getDeltaV() const override;

  /** Returns the accessor to the DeltaV field contained in this message fragment
    *
    * @return The reference to the accessor to the DeltaV field.
    */
  uci::type::OrbitalDeltaVelocity_A_Type& getDeltaV() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setDeltaV(const uci::type::OrbitalDeltaVelocity_A_Type& accessor) override;

  /** Returns the accessor to the ToleranceValues field contained in this message fragment
    *
    * @return The const reference to the accessor to the ToleranceValues field.
    */
  const uci::type::OrbitalToleranceValuesType& getToleranceValues() const override;

  /** Returns the accessor to the ToleranceValues field contained in this message fragment
    *
    * @return The reference to the accessor to the ToleranceValues field.
    */
  uci::type::OrbitalToleranceValuesType& getToleranceValues() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalRendezvousEventType& setToleranceValues(const uci::type::OrbitalToleranceValuesType& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OrbitalRendezvousEventType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalRendezvousEventType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OrbitalRendezvousEventType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  DateTimeTypeValue actorStateEpoch_Accessor{0};
  DateTimeTypeValue targetStateEpoch_Accessor{0};
  boost::optional<DateTimeTypeValue> analysisEpoch_Accessor;
  boost::optional<asb_xs::Duration> analysisDuration_Accessor;
  PercentTypeValue eventIntervalCoverage_Accessor{0.0};
  asb_xs::Int numberSubIntervals_Accessor{0};
  boost::optional<DistanceTypeValue> minimumRange_Accessor;
  boost::optional<DateTimeTypeValue> minimumRangeEpoch_Accessor;
  asb_xs::Duration minimumRangeAnalysisDuration_Accessor{0};
  boost::optional<AngleHalfPositiveTypeValue> minimumInPlaneSeparationAngle_Accessor;
  boost::optional<DateTimeTypeValue> minimumInPlaneSeparationEpoch_Accessor;
  std::unique_ptr<OrbitalObjectComparisonDeltaType> objectComparisonAtEventStart_Accessor;
  std::unique_ptr<OrbitalObjectComparisonDeltaType> objectComparisonAtEventEnd_Accessor;
  std::unique_ptr<OrbitalObjectComparisonDeltaType> objectComparisonMeans_Accessor;
  std::unique_ptr<OrbitalDeltaVelocity_A_Type> deltaV_Accessor;
  std::unique_ptr<OrbitalToleranceValuesType> toleranceValues_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ORBITALRENDEZVOUSEVENTTYPE_H
