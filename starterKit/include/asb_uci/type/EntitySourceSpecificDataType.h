/** @file EntitySourceSpecificDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ENTITYSOURCESPECIFICDATATYPE_H
#define ASB_UCI_TYPE_ENTITYSOURCESPECIFICDATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/EntityFusionEligibilityEnum.h"
#include "../../../include/asb_uci/type/Link16_TrackQualityType.h"
#include "../../../include/asb_uci/type/PassiveActiveEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntitySourceSpecificDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComparableRankingType;
class CorrelatedEntityID_Type;
class DropRestrictionType;
class EntityID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class EntitySourceSpecificDataType : public virtual uci::type::EntitySourceSpecificDataType {
public:
  /** Indicates the unique ID of an Entity which is eligible for or excluded from future automated fusion operations with
    * the Entity represented by this Entity message. This element is required when the sibling FusionEligibility element
    * indicates SELECTIVE_EXCLUSION or SELECTIVE_INCLUSION and should be omitted otherwise. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using CorrelatedEntityID = asb_uci::base::BoundedList<uci::type::CorrelatedEntityID_Type, uci::type::accessorType::correlatedEntityID_Type, asb_uci::type::CorrelatedEntityID_Type>;

  /** Indicates the drop restriction on an Entity. These restrictions can be applied by operator action or by other
    * services due to dependencies on other messages. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using DropRestriction = asb_uci::base::BoundedList<uci::type::DropRestrictionType, uci::type::accessorType::dropRestrictionType, asb_uci::type::DropRestrictionType>;

  /** Indicates the unique ID of an Entity that for at least a singular point in time was kinematically uncertain with this
    * Entity. An example of this is when two vehicles come to a common intersection, stop, and then depart together.
    * Tracking algorithms have to make a decision on which track goes with which target and are not guaranteed to make the
    * correct decision unless there are outside sources (FBCB2, High Range Resolution Profiles, etc.) that allow the
    * tracker to either confirm the decision, or determine that a swap is necessary at a later time. At the time of the
    * intersection, the uncertainties of the tracks make them kinematically ambiguous so that information should be carried
    * on with the fused Entity. If the tracker makes the correct decision, than the other Entity will not be a
    * ContributorID, since it will have never contributed to the overall fused picture. Likewise, the Identity of the fused
    * Entity will not be modified since the other Entity never made a contribution. If the tracker makes an incorrect
    * decision than the other Entity will be a ContributorID and will possibly contribute to the Identity of the Fused
    * Entity. Regardless of the decision, the Ambiguous ID must be updated to reflect the ambiguous state that occurred.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AmbiguousEntityID = asb_uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type, asb_uci::type::EntityID_Type>;

  /** The constructor */
  EntitySourceSpecificDataType();

  /** The copy constructor
    *
    * @param rhs The EntitySourceSpecificDataType to copy from
    */
  EntitySourceSpecificDataType(const EntitySourceSpecificDataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EntitySourceSpecificDataType to move from
    */
  EntitySourceSpecificDataType(EntitySourceSpecificDataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EntitySourceSpecificDataType to copy from
    * @return The EntitySourceSpecificDataType that was assigned
    */
  EntitySourceSpecificDataType& operator=(const EntitySourceSpecificDataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EntitySourceSpecificDataType to move from
    * @return The EntitySourceSpecificDataType that was assigned
    */
  EntitySourceSpecificDataType& operator=(EntitySourceSpecificDataType&& rhs) = delete;

  /** The destructor */
  virtual ~EntitySourceSpecificDataType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntitySourceSpecificDataType whose contents are to be used to set this
    *      uci::type::EntitySourceSpecificDataType's contents.
    */
  void copy(const uci::type::EntitySourceSpecificDataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntitySourceSpecificDataType whose contents are to be used to set this
    *      uci::type::EntitySourceSpecificDataType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EntitySourceSpecificDataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityFusionEligibilityEnum& getFusionEligibility_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EntityFusionEligibilityEnum& getFusionEligibility() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityFusionEligibilityEnum& getFusionEligibility() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setFusionEligibility(const uci::type::EntityFusionEligibilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setFusionEligibility(uci::type::EntityFusionEligibilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field FusionEligibilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFusionEligibility() const noexcept override;

  /** Enables the optional field such that getFusionEligibility will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityFusionEligibilityEnum& enableFusionEligibility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& clearFusionEligibility() noexcept override;

  /** Returns the accessor to the CorrelatedEntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CorrelatedEntityID field.
    */
  const uci::type::EntitySourceSpecificDataType::CorrelatedEntityID& getCorrelatedEntityID() const override;

  /** Returns the accessor to the CorrelatedEntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the CorrelatedEntityID field.
    */
  uci::type::EntitySourceSpecificDataType::CorrelatedEntityID& getCorrelatedEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setCorrelatedEntityID(const uci::type::EntitySourceSpecificDataType::CorrelatedEntityID& accessor) override;

  /** Returns the accessor to the DropRestriction field contained in this message fragment
    *
    * @return The const reference to the accessor to the DropRestriction field.
    */
  const uci::type::EntitySourceSpecificDataType::DropRestriction& getDropRestriction() const override;

  /** Returns the accessor to the DropRestriction field contained in this message fragment
    *
    * @return The reference to the accessor to the DropRestriction field.
    */
  uci::type::EntitySourceSpecificDataType::DropRestriction& getDropRestriction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setDropRestriction(const uci::type::EntitySourceSpecificDataType::DropRestriction& accessor) override;

  /** Returns the accessor to the AmbiguousEntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AmbiguousEntityID field.
    */
  const uci::type::EntitySourceSpecificDataType::AmbiguousEntityID& getAmbiguousEntityID() const override;

  /** Returns the accessor to the AmbiguousEntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the AmbiguousEntityID field.
    */
  uci::type::EntitySourceSpecificDataType::AmbiguousEntityID& getAmbiguousEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setAmbiguousEntityID(const uci::type::EntitySourceSpecificDataType::AmbiguousEntityID& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16_TrackQualityTypeValue getTrackQuality() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setTrackQuality(uci::type::Link16_TrackQualityTypeValue value) override;

  /** Returns whether this optional field TrackQualityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTrackQuality() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& clearTrackQuality() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& getPriority_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ComparableRankingType& getPriority() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& getPriority() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setPriority(const uci::type::ComparableRankingType& accessor) override;

  /** Returns whether this optional field Priorityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPriority() const noexcept override;

  /** Enables the optional field such that getPriority will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& enablePriority(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& clearPriority() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PassiveActiveEnum& getPassiveActiveIndicator_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PassiveActiveEnum& getPassiveActiveIndicator() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PassiveActiveEnum& getPassiveActiveIndicator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setPassiveActiveIndicator(const uci::type::PassiveActiveEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& setPassiveActiveIndicator(uci::type::PassiveActiveEnum::EnumerationItem value) override;

  /** Returns whether this optional field PassiveActiveIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPassiveActiveIndicator() const noexcept override;

  /** Enables the optional field such that getPassiveActiveIndicator will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PassiveActiveEnum& enablePassiveActiveIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntitySourceSpecificDataType& clearPassiveActiveIndicator() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EntitySourceSpecificDataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EntitySourceSpecificDataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EntitySourceSpecificDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EntityFusionEligibilityEnum> fusionEligibility_Accessor;
  std::unique_ptr<CorrelatedEntityID> correlatedEntityID_Accessor;
  std::unique_ptr<DropRestriction> dropRestriction_Accessor;
  std::unique_ptr<AmbiguousEntityID> ambiguousEntityID_Accessor;
  boost::optional<Link16_TrackQualityTypeValue> trackQuality_Accessor;
  std::unique_ptr<ComparableRankingType> priority_Accessor;
  std::unique_ptr<PassiveActiveEnum> passiveActiveIndicator_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ENTITYSOURCESPECIFICDATATYPE_H
