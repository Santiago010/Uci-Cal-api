/** @file EA_TechniqueType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_EA_TECHNIQUETYPE_H
#define ASB_UCI_TYPE_EA_TECHNIQUETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/EA_ActivationEnum.h"
#include "asb_uci/type/EA_PointingEnum.h"
#include "uci/type/EA_TechniqueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentID_Type;
class EA_TechniqueIdentifierType;
class EmitterIdentityType;
class FrequencyRangeType;
class SpecificEmitterIdentityType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EA_TechniqueType : public virtual uci::type::EA_TechniqueType {
public:
  /** Indicates how the technique is activated. See annotated type enumerations for further details. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 1; Maximum: 2]
    */
  using Activation = asb_uci::base::BoundedList<uci::type::EA_ActivationEnum, uci::type::accessorType::eA_ActivationEnum, asb_uci::type::EA_ActivationEnum>;

  /** Indicates the bandwidth of the Technique. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using Band = asb_uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType, asb_uci::type::FrequencyRangeType>;

  /** Indicates an EA Component the Technique can be assigned to. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using ComponentID = asb_uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type, asb_uci::type::ComponentID_Type>;

  /** Indicates an emitter type which the Technique might be effective against. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Emitter = asb_uci::base::BoundedList<uci::type::EmitterIdentityType, uci::type::accessorType::emitterIdentityType, asb_uci::type::EmitterIdentityType>;

  /** Indicates the specific emitter type ***instance*** which the Technique might be effective against. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SpecificEmitter = asb_uci::base::BoundedList<uci::type::SpecificEmitterIdentityType, uci::type::accessorType::specificEmitterIdentityType, asb_uci::type::SpecificEmitterIdentityType>;

  /** The constructor */
  EA_TechniqueType();

  /** The copy constructor
    *
    * @param rhs The EA_TechniqueType to copy from
    */
  EA_TechniqueType(const EA_TechniqueType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EA_TechniqueType to move from
    */
  EA_TechniqueType(EA_TechniqueType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EA_TechniqueType to copy from
    * @return The EA_TechniqueType that was assigned
    */
  EA_TechniqueType& operator=(const EA_TechniqueType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EA_TechniqueType to move from
    * @return The EA_TechniqueType that was assigned
    */
  EA_TechniqueType& operator=(EA_TechniqueType&& rhs) = delete;

  /** The destructor */
  virtual ~EA_TechniqueType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EA_TechniqueType whose contents are to be used to set this
    *      uci::type::EA_TechniqueType's contents.
    */
  void copy(const uci::type::EA_TechniqueType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EA_TechniqueType whose contents are to be used to set this
    *      uci::type::EA_TechniqueType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EA_TechniqueType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the TechniqueIdentifier field contained in this message fragment
    *
    * @return The const reference to the accessor to the TechniqueIdentifier field.
    */
  const uci::type::EA_TechniqueIdentifierType& getTechniqueIdentifier() const override;

  /** Returns the accessor to the TechniqueIdentifier field contained in this message fragment
    *
    * @return The reference to the accessor to the TechniqueIdentifier field.
    */
  uci::type::EA_TechniqueIdentifierType& getTechniqueIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setTechniqueIdentifier(const uci::type::EA_TechniqueIdentifierType& accessor) override;

  /** Returns the accessor to the Activation field contained in this message fragment
    *
    * @return The const reference to the accessor to the Activation field.
    */
  const uci::type::EA_TechniqueType::Activation& getActivation() const override;

  /** Returns the accessor to the Activation field contained in this message fragment
    *
    * @return The reference to the accessor to the Activation field.
    */
  uci::type::EA_TechniqueType::Activation& getActivation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setActivation(const uci::type::EA_TechniqueType::Activation& accessor) override;

  /** Returns the contents of the message's Pointing field
    *
    * @return The contents of the Pointing field
    */
  const uci::type::EA_PointingEnum& getPointing() const override;

  /** Returns the contents of the message's Pointing field
    *
    * @return The contents of the Pointing field
    */
  uci::type::EA_PointingEnum& getPointing() override;

  /** Sets the contents of the message's Pointing field
    *
    * @param accessor The accessor to use to set the Pointing field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setPointing(const uci::type::EA_PointingEnum& accessor) override;

  /** Sets the contents of the message's Pointing field
    *
    * @param value The new value to set the Pointing field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setPointing(uci::type::EA_PointingEnum::EnumerationItem value) override;

  /** Returns the accessor to the Band field contained in this message fragment
    *
    * @return The const reference to the accessor to the Band field.
    */
  const uci::type::EA_TechniqueType::Band& getBand() const override;

  /** Returns the accessor to the Band field contained in this message fragment
    *
    * @return The reference to the accessor to the Band field.
    */
  uci::type::EA_TechniqueType::Band& getBand() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setBand(const uci::type::EA_TechniqueType::Band& accessor) override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentID field.
    */
  const uci::type::EA_TechniqueType::ComponentID& getComponentID() const override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentID field.
    */
  uci::type::EA_TechniqueType::ComponentID& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setComponentID(const uci::type::EA_TechniqueType::ComponentID& accessor) override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Emitter field.
    */
  const uci::type::EA_TechniqueType::Emitter& getEmitter() const override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The reference to the accessor to the Emitter field.
    */
  uci::type::EA_TechniqueType::Emitter& getEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setEmitter(const uci::type::EA_TechniqueType::Emitter& accessor) override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificEmitter field.
    */
  const uci::type::EA_TechniqueType::SpecificEmitter& getSpecificEmitter() const override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificEmitter field.
    */
  uci::type::EA_TechniqueType::SpecificEmitter& getSpecificEmitter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EA_TechniqueType& setSpecificEmitter(const uci::type::EA_TechniqueType::SpecificEmitter& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EA_TechniqueType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_TechniqueType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EA_TechniqueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EA_TechniqueIdentifierType> techniqueIdentifier_Accessor;
  std::unique_ptr<Activation> activation_Accessor;
  std::unique_ptr<EA_PointingEnum> pointing_Accessor;
  std::unique_ptr<Band> band_Accessor;
  std::unique_ptr<ComponentID> componentID_Accessor;
  std::unique_ptr<Emitter> emitter_Accessor;
  std::unique_ptr<SpecificEmitter> specificEmitter_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_EA_TECHNIQUETYPE_H
