/** @file Link16MetadataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_LINK16METADATATYPE_H
#define ASB_UCI_TYPE_LINK16METADATATYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CommCountermeasureSetEnum.h"
#include "../../../include/asb_uci/type/ConnectionStatusEnum.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/GenericUnitTypeEnum.h"
#include "../../../include/asb_uci/type/Link16TrackNumberType.h"
#include "../../../include/asb_uci/type/Link16_ControlChannelType.h"
#include "../../../include/asb_uci/type/Link16_MissileChannelType.h"
#include "../../../include/asb_uci/type/Link16_RadarChannelType.h"
#include "../../../include/asb_uci/type/NPSI_Enum.h"
#include "../../../include/asb_uci/type/OperationalCapabilityEnum.h"
#include "../../../include/asb_uci/type/PositionTimeQualityEnum.h"
#include "../../../include/asb_uci/type/RadarChannelIndicatorEnum.h"
#include "../../../include/asb_uci/type/SiteEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16MetadataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class DefensiveJammerSystemInfoType;
class JammerStationType;
class Link16ActiveRelayIndicatorsType;
class NetworkLinkID_Type;
class ReconnaissanceStatusType;
class SystemID_Type;
class TrackNumberOrEntityType;

/** See annotations in child elements and messages/elements that use this type for details. */
class Link16MetadataType : public virtual uci::type::Link16MetadataType {
public:
  /** Indicates the type and status of a defensive jammer. [Occurrences: Minimum: 0; Maximum: 2] */
  using DefensiveJammerSystemInfo = asb_uci::base::BoundedList<uci::type::DefensiveJammerSystemInfoType, uci::type::accessorType::defensiveJammerSystemInfoType, asb_uci::type::DefensiveJammerSystemInfoType>;

  /** Indicates the type of an external offensive jammer. Multiplicity size of 10 based on MIL-STD-6016. [Occurrences:
    * Minimum: 0; Maximum: 10]
    */
  using JammerStation = asb_uci::base::BoundedList<uci::type::JammerStationType, uci::type::accessorType::jammerStationType, asb_uci::type::JammerStationType>;

  /** The constructor */
  Link16MetadataType();

  /** The copy constructor
    *
    * @param rhs The Link16MetadataType to copy from
    */
  Link16MetadataType(const Link16MetadataType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The Link16MetadataType to move from
    */
  Link16MetadataType(Link16MetadataType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The Link16MetadataType to copy from
    * @return The Link16MetadataType that was assigned
    */
  Link16MetadataType& operator=(const Link16MetadataType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The Link16MetadataType to move from
    * @return The Link16MetadataType that was assigned
    */
  Link16MetadataType& operator=(Link16MetadataType&& rhs) = delete;

  /** The destructor */
  virtual ~Link16MetadataType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::Link16MetadataType whose contents are to be used to set this
    *      uci::type::Link16MetadataType's contents.
    */
  void copy(const uci::type::Link16MetadataType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::Link16MetadataType whose contents are to be used to set this
    *      uci::type::Link16MetadataType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::Link16MetadataType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& getNetworkLinkID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NetworkLinkID_Type& getNetworkLinkID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& getNetworkLinkID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) override;

  /** Returns whether this optional field NetworkLinkIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkLinkID() const noexcept override;

  /** Enables the optional field such that getNetworkLinkID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& enableNetworkLinkID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearNetworkLinkID() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16TrackNumberType& getSourceTrack_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::Link16TrackNumberType& getSourceTrack() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16TrackNumberType& getSourceTrack() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setSourceTrack(const uci::type::Link16TrackNumberType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setSourceTrack(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setSourceTrack(const char* value) override;

  /** Returns whether this optional field sourceTrack_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSourceTrack() const noexcept override;

  /** Enables the optional field such that getSourceTrack will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::Link16TrackNumberType& enableSourceTrack(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearSourceTrack() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemID_Type& getReportingSystemID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemID_Type& getReportingSystemID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemID_Type& getReportingSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setReportingSystemID(const uci::type::SystemID_Type& accessor) override;

  /** Returns whether this optional field ReportingSystemIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReportingSystemID() const noexcept override;

  /** Enables the optional field such that getReportingSystemID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemID_Type& enableReportingSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearReportingSystemID() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getAirborne() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setAirborne(xs::Boolean value) override;

  /** Returns whether this optional field Airborneis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAirborne() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearAirborne() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16_ControlChannelTypeValue getControlChannel() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setControlChannel(uci::type::Link16_ControlChannelTypeValue value) override;

  /** Returns whether this optional field ControlChannelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasControlChannel() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearControlChannel() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getFlightLeadIndicator() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setFlightLeadIndicator(xs::Boolean value) override;

  /** Returns whether this optional field FlightLeadIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFlightLeadIndicator() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearFlightLeadIndicator() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackNumberOrEntityType& getFlightLead_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::TrackNumberOrEntityType& getFlightLead() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackNumberOrEntityType& getFlightLead() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setFlightLead(const uci::type::TrackNumberOrEntityType& accessor) override;

  /** Returns whether this optional field FlightLeadis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFlightLead() const noexcept override;

  /** Enables the optional field such that getFlightLead will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackNumberOrEntityType& enableFlightLead(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearFlightLead() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GenericUnitTypeEnum& getGenericUnitType_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::GenericUnitTypeEnum& getGenericUnitType() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GenericUnitTypeEnum& getGenericUnitType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setGenericUnitType(const uci::type::GenericUnitTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setGenericUnitType(uci::type::GenericUnitTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field GenericUnitTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGenericUnitType() const noexcept override;

  /** Enables the optional field such that getGenericUnitType will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GenericUnitTypeEnum& enableGenericUnitType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearGenericUnitType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getMissionCommanderIndicator() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setMissionCommanderIndicator(xs::Boolean value) override;

  /** Returns whether this optional field MissionCommanderIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionCommanderIndicator() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearMissionCommanderIndicator() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getPrecisionTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setPrecisionTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field PrecisionTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPrecisionTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearPrecisionTime() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionTimeQualityEnum& getPositionTimeQuality_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PositionTimeQualityEnum& getPositionTimeQuality() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionTimeQualityEnum& getPositionTimeQuality() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setPositionTimeQuality(const uci::type::PositionTimeQualityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setPositionTimeQuality(uci::type::PositionTimeQualityEnum::EnumerationItem value) override;

  /** Returns whether this optional field PositionTimeQualityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPositionTimeQuality() const noexcept override;

  /** Enables the optional field such that getPositionTimeQuality will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionTimeQualityEnum& enablePositionTimeQuality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearPositionTimeQuality() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SiteEnum& getSite_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SiteEnum& getSite() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SiteEnum& getSite() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setSite(const uci::type::SiteEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setSite(uci::type::SiteEnum::EnumerationItem value) override;

  /** Returns whether this optional field Siteis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSite() const noexcept override;

  /** Enables the optional field such that getSite will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SiteEnum& enableSite(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearSite() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperationalCapabilityEnum& getOperationalCapability_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OperationalCapabilityEnum& getOperationalCapability() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperationalCapabilityEnum& getOperationalCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setOperationalCapability(const uci::type::OperationalCapabilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setOperationalCapability(uci::type::OperationalCapabilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field OperationalCapabilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOperationalCapability() const noexcept override;

  /** Enables the optional field such that getOperationalCapability will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperationalCapabilityEnum& enableOperationalCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearOperationalCapability() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConnectionStatusEnum& getLink16_Status_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ConnectionStatusEnum& getLink16_Status() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConnectionStatusEnum& getLink16_Status() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setLink16_Status(const uci::type::ConnectionStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setLink16_Status(uci::type::ConnectionStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field Link16_Statusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLink16_Status() const noexcept override;

  /** Enables the optional field such that getLink16_Status will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConnectionStatusEnum& enableLink16_Status(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearLink16_Status() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReconnaissanceStatusType& getReconnaissanceStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ReconnaissanceStatusType& getReconnaissanceStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReconnaissanceStatusType& getReconnaissanceStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setReconnaissanceStatus(const uci::type::ReconnaissanceStatusType& accessor) override;

  /** Returns whether this optional field ReconnaissanceStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReconnaissanceStatus() const noexcept override;

  /** Enables the optional field such that getReconnaissanceStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ReconnaissanceStatusType& enableReconnaissanceStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearReconnaissanceStatus() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NPSI_Enum& getNetworkParticipationStatusIndicator_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NPSI_Enum& getNetworkParticipationStatusIndicator() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NPSI_Enum& getNetworkParticipationStatusIndicator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setNetworkParticipationStatusIndicator(const uci::type::NPSI_Enum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setNetworkParticipationStatusIndicator(uci::type::NPSI_Enum::EnumerationItem value) override;

  /** Returns whether this optional field NetworkParticipationStatusIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkParticipationStatusIndicator() const noexcept override;

  /** Enables the optional field such that getNetworkParticipationStatusIndicator will return the optional field and not
    * throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NPSI_Enum& enableNetworkParticipationStatusIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearNetworkParticipationStatusIndicator() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarChannelIndicatorEnum& getRadarChannelIndicator_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadarChannelIndicatorEnum& getRadarChannelIndicator() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarChannelIndicatorEnum& getRadarChannelIndicator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setRadarChannelIndicator(const uci::type::RadarChannelIndicatorEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setRadarChannelIndicator(uci::type::RadarChannelIndicatorEnum::EnumerationItem value) override;

  /** Returns whether this optional field RadarChannelIndicatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRadarChannelIndicator() const noexcept override;

  /** Enables the optional field such that getRadarChannelIndicator will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarChannelIndicatorEnum& enableRadarChannelIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearRadarChannelIndicator() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16_RadarChannelTypeValue getRadarChannel() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setRadarChannel(uci::type::Link16_RadarChannelTypeValue value) override;

  /** Returns whether this optional field RadarChannelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRadarChannel() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearRadarChannel() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::Link16_MissileChannelTypeValue getMissileChannel() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setMissileChannel(uci::type::Link16_MissileChannelTypeValue value) override;

  /** Returns whether this optional field MissileChannelis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissileChannel() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearMissileChannel() noexcept override;

  /** Returns the accessor to the DefensiveJammerSystemInfo field contained in this message fragment
    *
    * @return The const reference to the accessor to the DefensiveJammerSystemInfo field.
    */
  const uci::type::Link16MetadataType::DefensiveJammerSystemInfo& getDefensiveJammerSystemInfo() const override;

  /** Returns the accessor to the DefensiveJammerSystemInfo field contained in this message fragment
    *
    * @return The reference to the accessor to the DefensiveJammerSystemInfo field.
    */
  uci::type::Link16MetadataType::DefensiveJammerSystemInfo& getDefensiveJammerSystemInfo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setDefensiveJammerSystemInfo(const uci::type::Link16MetadataType::DefensiveJammerSystemInfo& accessor) override;

  /** Returns the accessor to the JammerStation field contained in this message fragment
    *
    * @return The const reference to the accessor to the JammerStation field.
    */
  const uci::type::Link16MetadataType::JammerStation& getJammerStation() const override;

  /** Returns the accessor to the JammerStation field contained in this message fragment
    *
    * @return The reference to the accessor to the JammerStation field.
    */
  uci::type::Link16MetadataType::JammerStation& getJammerStation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setJammerStation(const uci::type::Link16MetadataType::JammerStation& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommCountermeasureSetEnum& getCommCountermeasureSet_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommCountermeasureSetEnum& getCommCountermeasureSet() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommCountermeasureSetEnum& getCommCountermeasureSet() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setCommCountermeasureSet(const uci::type::CommCountermeasureSetEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setCommCountermeasureSet(uci::type::CommCountermeasureSetEnum::EnumerationItem value) override;

  /** Returns whether this optional field CommCountermeasureSetis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCommCountermeasureSet() const noexcept override;

  /** Enables the optional field such that getCommCountermeasureSet will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommCountermeasureSetEnum& enableCommCountermeasureSet(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearCommCountermeasureSet() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Link16ActiveRelayIndicatorsType& getActiveRelayIndicators_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Link16ActiveRelayIndicatorsType& getActiveRelayIndicators() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Link16ActiveRelayIndicatorsType& getActiveRelayIndicators() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setActiveRelayIndicators(const uci::type::Link16ActiveRelayIndicatorsType& accessor) override;

  /** Returns whether this optional field ActiveRelayIndicatorsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActiveRelayIndicators() const noexcept override;

  /** Enables the optional field such that getActiveRelayIndicators will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Link16ActiveRelayIndicatorsType& enableActiveRelayIndicators(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearActiveRelayIndicators() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackNumberOrEntityType& getMissionCommander_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::TrackNumberOrEntityType& getMissionCommander() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackNumberOrEntityType& getMissionCommander() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& setMissionCommander(const uci::type::TrackNumberOrEntityType& accessor) override;

  /** Returns whether this optional field MissionCommanderis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionCommander() const noexcept override;

  /** Enables the optional field such that getMissionCommander will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackNumberOrEntityType& enableMissionCommander(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16MetadataType& clearMissionCommander() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<Link16MetadataType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16MetadataType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::Link16MetadataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<NetworkLinkID_Type> networkLinkID_Accessor;
  std::unique_ptr<Link16TrackNumberType> sourceTrack_Accessor;
  std::unique_ptr<SystemID_Type> reportingSystemID_Accessor;
  boost::optional<asb_xs::Boolean> airborne_Accessor;
  boost::optional<Link16_ControlChannelTypeValue> controlChannel_Accessor;
  boost::optional<asb_xs::Boolean> flightLeadIndicator_Accessor;
  std::unique_ptr<TrackNumberOrEntityType> flightLead_Accessor;
  std::unique_ptr<GenericUnitTypeEnum> genericUnitType_Accessor;
  boost::optional<asb_xs::Boolean> missionCommanderIndicator_Accessor;
  boost::optional<DateTimeTypeValue> precisionTime_Accessor;
  std::unique_ptr<PositionTimeQualityEnum> positionTimeQuality_Accessor;
  std::unique_ptr<SiteEnum> site_Accessor;
  std::unique_ptr<OperationalCapabilityEnum> operationalCapability_Accessor;
  std::unique_ptr<ConnectionStatusEnum> link16_Status_Accessor;
  std::unique_ptr<ReconnaissanceStatusType> reconnaissanceStatus_Accessor;
  std::unique_ptr<NPSI_Enum> networkParticipationStatusIndicator_Accessor;
  std::unique_ptr<RadarChannelIndicatorEnum> radarChannelIndicator_Accessor;
  boost::optional<Link16_RadarChannelTypeValue> radarChannel_Accessor;
  boost::optional<Link16_MissileChannelTypeValue> missileChannel_Accessor;
  std::unique_ptr<DefensiveJammerSystemInfo> defensiveJammerSystemInfo_Accessor;
  std::unique_ptr<JammerStation> jammerStation_Accessor;
  std::unique_ptr<CommCountermeasureSetEnum> commCountermeasureSet_Accessor;
  std::unique_ptr<Link16ActiveRelayIndicatorsType> activeRelayIndicators_Accessor;
  std::unique_ptr<TrackNumberOrEntityType> missionCommander_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_LINK16METADATATYPE_H
