/** @file ConfigurationParameterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CONFIGURATIONPARAMETERTYPE_H
#define ASB_UCI_TYPE_CONFIGURATIONPARAMETERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/MessageElementDataTypeEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ConfigurationParameterType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ConfigurationParameterValueRestrictionsType;
class MissionEnvironmentObjectClassType;
class ParameterID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class ConfigurationParameterType : public virtual uci::type::ConfigurationParameterType {
public:
  /** The constructor */
  ConfigurationParameterType();

  /** The copy constructor
    *
    * @param rhs The ConfigurationParameterType to copy from
    */
  ConfigurationParameterType(const ConfigurationParameterType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ConfigurationParameterType to move from
    */
  ConfigurationParameterType(ConfigurationParameterType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ConfigurationParameterType to copy from
    * @return The ConfigurationParameterType that was assigned
    */
  ConfigurationParameterType& operator=(const ConfigurationParameterType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ConfigurationParameterType to move from
    * @return The ConfigurationParameterType that was assigned
    */
  ConfigurationParameterType& operator=(ConfigurationParameterType&& rhs) = delete;

  /** The destructor */
  virtual ~ConfigurationParameterType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ConfigurationParameterType whose contents are to be used to set this
    *      uci::type::ConfigurationParameterType's contents.
    */
  void copy(const uci::type::ConfigurationParameterType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ConfigurationParameterType whose contents are to be used to set this
    *      uci::type::ConfigurationParameterType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ConfigurationParameterType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ParameterID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ParameterID field.
    */
  const uci::type::ParameterID_Type& getParameterID() const override;

  /** Returns the accessor to the ParameterID field contained in this message fragment
    *
    * @return The reference to the accessor to the ParameterID field.
    */
  uci::type::ParameterID_Type& getParameterID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setParameterID(const uci::type::ParameterID_Type& accessor) override;

  /** Returns the contents of the message's Name field
    *
    * @return The contents of the Name field
    */
  const asb_uci::type::VisibleString256Type& getName() const noexcept override;

  /** Returns the contents of the message's Name field
    *
    * @return The contents of the Name field
    */
  asb_uci::type::VisibleString256Type& getName() noexcept override;

  /** Sets the contents of the message's Name field
    *
    * @param value The new value to set the Name field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setName(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the contents of the message's Name field
    *
    * @param value The new value to set the Name field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setName(const std::string& value) override;

  /** Sets the contents of the message's Name field
    *
    * @param value The new value to set the Name field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setName(const char* value) override;

  /** Returns the contents of the message's Value field
    *
    * @return The contents of the Value field
    */
  const asb_uci::type::VisibleString256Type& getValue() const noexcept override;

  /** Returns the contents of the message's Value field
    *
    * @return The contents of the Value field
    */
  asb_uci::type::VisibleString256Type& getValue() noexcept override;

  /** Sets the contents of the message's Value field
    *
    * @param value The new value to set the Value field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setValue(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the contents of the message's Value field
    *
    * @param value The new value to set the Value field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setValue(const std::string& value) override;

  /** Sets the contents of the message's Value field
    *
    * @param value The new value to set the Value field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setValue(const char* value) override;

  /** Returns the contents of the message's DefaultValue field
    *
    * @return The contents of the DefaultValue field
    */
  const asb_uci::type::VisibleString256Type& getDefaultValue() const noexcept override;

  /** Returns the contents of the message's DefaultValue field
    *
    * @return The contents of the DefaultValue field
    */
  asb_uci::type::VisibleString256Type& getDefaultValue() noexcept override;

  /** Sets the contents of the message's DefaultValue field
    *
    * @param value The new value to set the DefaultValue field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setDefaultValue(const asb_uci::type::VisibleString256Type& value) override;

  /** Sets the contents of the message's DefaultValue field
    *
    * @param value The new value to set the DefaultValue field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setDefaultValue(const std::string& value) override;

  /** Sets the contents of the message's DefaultValue field
    *
    * @param value The new value to set the DefaultValue field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setDefaultValue(const char* value) override;

  /** Returns the contents of the message's UserModifiable field
    *
    * @return The contents of the UserModifiable field
    */
  xs::Boolean getUserModifiable() const override;

  /** Sets the contents of the message's UserModifiable field
    *
    * @param value The new value to set the UserModifiable field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setUserModifiable(xs::Boolean value) override;

  /** Returns the contents of the message's Type field
    *
    * @return The contents of the Type field
    */
  const uci::type::MessageElementDataTypeEnum& getType() const override;

  /** Returns the contents of the message's Type field
    *
    * @return The contents of the Type field
    */
  uci::type::MessageElementDataTypeEnum& getType() override;

  /** Sets the contents of the message's Type field
    *
    * @param accessor The accessor to use to set the Type field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setType(const uci::type::MessageElementDataTypeEnum& accessor) override;

  /** Sets the contents of the message's Type field
    *
    * @param value The new value to set the Type field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setType(uci::type::MessageElementDataTypeEnum::EnumerationItem value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getUnits_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString32Type& getUnits() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getUnits() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setUnits(const uci::type::VisibleString32Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setUnits(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setUnits(const char* value) override;

  /** Returns whether this optional field units_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUnits() const noexcept override;

  /** Enables the optional field such that getUnits will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& enableUnits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& clearUnits() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConfigurationParameterValueRestrictionsType& getTypeSpecificRestrictions_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ConfigurationParameterValueRestrictionsType& getTypeSpecificRestrictions() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConfigurationParameterValueRestrictionsType& getTypeSpecificRestrictions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setTypeSpecificRestrictions(const uci::type::ConfigurationParameterValueRestrictionsType& accessor) override;

  /** Returns whether this optional field TypeSpecificRestrictionsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTypeSpecificRestrictions() const noexcept override;

  /** Enables the optional field such that getTypeSpecificRestrictions will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConfigurationParameterValueRestrictionsType& enableTypeSpecificRestrictions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& clearTypeSpecificRestrictions() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionEnvironmentObjectClassType& getObjectClass_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MissionEnvironmentObjectClassType& getObjectClass() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionEnvironmentObjectClassType& getObjectClass() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setObjectClass(const uci::type::MissionEnvironmentObjectClassType& accessor) override;

  /** Returns whether this optional field ObjectClassis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObjectClass() const noexcept override;

  /** Enables the optional field such that getObjectClass will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MissionEnvironmentObjectClassType& enableObjectClass(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& clearObjectClass() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getMissionEnvironment_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getMissionEnvironment() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getMissionEnvironment() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setMissionEnvironment(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setMissionEnvironment(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& setMissionEnvironment(const char* value) override;

  /** Returns whether this optional field missionEnvironment_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionEnvironment() const noexcept override;

  /** Enables the optional field such that getMissionEnvironment will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableMissionEnvironment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ConfigurationParameterType& clearMissionEnvironment() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ConfigurationParameterType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ConfigurationParameterType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ConfigurationParameterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ParameterID_Type> parameterID_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> name_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> value_Accessor;
  std::unique_ptr<asb_uci::type::VisibleString256Type> defaultValue_Accessor;
  asb_xs::Boolean userModifiable_Accessor{false};
  std::unique_ptr<MessageElementDataTypeEnum> type_Accessor;
  std::unique_ptr<VisibleString32Type> units_Accessor;
  std::unique_ptr<ConfigurationParameterValueRestrictionsType> typeSpecificRestrictions_Accessor;
  std::unique_ptr<MissionEnvironmentObjectClassType> objectClass_Accessor;
  std::unique_ptr<EmptyType> missionEnvironment_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CONFIGURATIONPARAMETERTYPE_H
