/** @file ResponseMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_RESPONSEMDT_H
#define ASB_UCI_TYPE_RESPONSEMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/ResponseTypeEnum.h"
#include "uci/type/ResponseMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class RequirementConstraintsType;
class RequirementGuidanceType;
class RequirementMetadataType;
class RequirementsTemplateType;
class ResponseID_Type;
class ResponseOptionDetailsType;

/** See annotations in child elements and messages/elements that use this type for details. */
class ResponseMDT : public virtual uci::type::ResponseMDT {
public:
  /** Indicates the types of Response options included in the message. List size for this element is based on "Select All
    * That Apply" condition. [Occurrences: Minimum: 1; Maximum: 4]
    */
  using ResponseType = asb_uci::base::BoundedList<uci::type::ResponseTypeEnum, uci::type::accessorType::responseTypeEnum, asb_uci::type::ResponseTypeEnum>;

  /** Indicates an Option of the Response. Responses are designed to be flexible. A Response is a set of prioritized
    * Options to address an anticipated triggering event, events or event sequence in the battlespace. Responses are
    * allocated to Systems via a ResponsePlan. When a ResponsePlan is activated, monitoring for the triggering events in
    * the Options begins. When a triggering event happens, the applicable Option(s) are evaluated. For example, a Response
    * for "airborne fighter threat" might include a series of prioritized Options corresponding to different events from
    * initial detection to full escalation of the threat. One Option might be to track far away unknown Entities by
    * creating (via a Requirements template) and dynamically planning an AMTI Task. Another Option might be to activate a
    * retreat contingency RoutePlan for vulnerable Systems near the maximum kinetic weapons range of the threat. Another
    * Option might be to aggressively intervene by creating and planning an Attack Action as Systems approach a state of
    * unacceptable vulnerability. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using Option = asb_uci::base::BoundedList<uci::type::ResponseOptionDetailsType, uci::type::accessorType::responseOptionDetailsType, asb_uci::type::ResponseOptionDetailsType>;

  /** The sibling Option element associates triggering events with a desired Response one of which is to use this element,
    * a Requirements template, to generate or change one or more Requirements messages/objects (Effect, Action, Task,
    * [Capability]Command). An instance of this element is a RequirementsTemplate; it indicates the types of Requirements
    * to generate or update and their details. Each RequirementsTemplate has a unique ID and therefore can be used for
    * multiple Options. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using RequirementsTemplate = asb_uci::base::BoundedList<uci::type::RequirementsTemplateType, uci::type::accessorType::requirementsTemplateType, asb_uci::type::RequirementsTemplateType>;

  /** The constructor */
  ResponseMDT();

  /** The copy constructor
    *
    * @param rhs The ResponseMDT to copy from
    */
  ResponseMDT(const ResponseMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ResponseMDT to move from
    */
  ResponseMDT(ResponseMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ResponseMDT to copy from
    * @return The ResponseMDT that was assigned
    */
  ResponseMDT& operator=(const ResponseMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ResponseMDT to move from
    * @return The ResponseMDT that was assigned
    */
  ResponseMDT& operator=(ResponseMDT&& rhs) = delete;

  /** The destructor */
  virtual ~ResponseMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ResponseMDT whose contents are to be used to set this uci::type::ResponseMDT's
    *      contents.
    */
  void copy(const uci::type::ResponseMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ResponseMDT whose contents are to be used to set this uci::type::ResponseMDT's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ResponseMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ResponseID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResponseID field.
    */
  const uci::type::ResponseID_Type& getResponseID() const override;

  /** Returns the accessor to the ResponseID field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponseID field.
    */
  uci::type::ResponseID_Type& getResponseID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& setResponseID(const uci::type::ResponseID_Type& accessor) override;

  /** Returns the accessor to the ResponseType field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResponseType field.
    */
  const uci::type::ResponseMDT::ResponseType& getResponseType() const override;

  /** Returns the accessor to the ResponseType field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponseType field.
    */
  uci::type::ResponseMDT::ResponseType& getResponseType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& setResponseType(const uci::type::ResponseMDT::ResponseType& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& getResponseManagementConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementConstraintsType& getResponseManagementConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& getResponseManagementConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& setResponseManagementConstraints(const uci::type::RequirementConstraintsType& accessor) override;

  /** Returns whether this optional field ResponseManagementConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasResponseManagementConstraints() const noexcept override;

  /** Enables the optional field such that getResponseManagementConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementConstraintsType& enableResponseManagementConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& clearResponseManagementConstraints() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementGuidanceType& getResponseManagementGuidance_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementGuidanceType& getResponseManagementGuidance() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementGuidanceType& getResponseManagementGuidance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& setResponseManagementGuidance(const uci::type::RequirementGuidanceType& accessor) override;

  /** Returns whether this optional field ResponseManagementGuidanceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasResponseManagementGuidance() const noexcept override;

  /** Enables the optional field such that getResponseManagementGuidance will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementGuidanceType& enableResponseManagementGuidance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& clearResponseManagementGuidance() noexcept override;

  /** Returns the accessor to the Option field contained in this message fragment
    *
    * @return The const reference to the accessor to the Option field.
    */
  const uci::type::ResponseMDT::Option& getOption() const override;

  /** Returns the accessor to the Option field contained in this message fragment
    *
    * @return The reference to the accessor to the Option field.
    */
  uci::type::ResponseMDT::Option& getOption() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& setOption(const uci::type::ResponseMDT::Option& accessor) override;

  /** Returns the accessor to the RequirementsTemplate field contained in this message fragment
    *
    * @return The const reference to the accessor to the RequirementsTemplate field.
    */
  const uci::type::ResponseMDT::RequirementsTemplate& getRequirementsTemplate() const override;

  /** Returns the accessor to the RequirementsTemplate field contained in this message fragment
    *
    * @return The reference to the accessor to the RequirementsTemplate field.
    */
  uci::type::ResponseMDT::RequirementsTemplate& getRequirementsTemplate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& setRequirementsTemplate(const uci::type::ResponseMDT::RequirementsTemplate& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementMetadataType& getMetadata_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementMetadataType& getMetadata() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementMetadataType& getMetadata() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& setMetadata(const uci::type::RequirementMetadataType& accessor) override;

  /** Returns whether this optional field Metadatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMetadata() const noexcept override;

  /** Enables the optional field such that getMetadata will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementMetadataType& enableMetadata(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ResponseMDT& clearMetadata() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ResponseMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponseMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ResponseMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ResponseID_Type> responseID_Accessor;
  std::unique_ptr<ResponseType> responseType_Accessor;
  std::unique_ptr<RequirementConstraintsType> responseManagementConstraints_Accessor;
  std::unique_ptr<RequirementGuidanceType> responseManagementGuidance_Accessor;
  std::unique_ptr<Option> option_Accessor;
  std::unique_ptr<RequirementsTemplate> requirementsTemplate_Accessor;
  std::unique_ptr<RequirementMetadataType> metadata_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_RESPONSEMDT_H
