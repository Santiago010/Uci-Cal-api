/** @file RadarAltimeterActivityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_RADARALTIMETERACTIVITYCOMMANDTYPE_H
#define ASB_UCI_TYPE_RADARALTIMETERACTIVITYCOMMANDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DecibelType.h"
#include "../../../include/asb_uci/type/GroundTerrainTypeEnum.h"
#include "../../../include/asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "../../../include/asb_uci/type/WeatherSeaStateEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterActivityCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AtmosphericPropagationLossType;
class CapabilityCommandFrequencyType;
class CapabilityCommandTemporalConstraintsType;
class RadarAltimeterCollectionConstraintsType;
class RadarAltimeterCollectionOptionsType;
class RepetitionType;

/** See annotations in child elements and messages/elements that use this type for details. */
class RadarAltimeterActivityCommandType : public virtual uci::type::RadarAltimeterActivityCommandType, public virtual SharedRF_ApertureActivityCommandBaseType {
public:
  /** Atmospheric propagation information to be used when determining SNR or range/power levels. If multiple instances are
    * given, each should be of a different band as indicated by the child element. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using AtmosphericPropagation = asb_uci::base::BoundedList<uci::type::AtmosphericPropagationLossType, uci::type::accessorType::atmosphericPropagationLossType, asb_uci::type::AtmosphericPropagationLossType>;

  /** The constructor */
  RadarAltimeterActivityCommandType();

  /** The copy constructor
    *
    * @param rhs The RadarAltimeterActivityCommandType to copy from
    */
  RadarAltimeterActivityCommandType(const RadarAltimeterActivityCommandType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The RadarAltimeterActivityCommandType to move from
    */
  RadarAltimeterActivityCommandType(RadarAltimeterActivityCommandType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The RadarAltimeterActivityCommandType to copy from
    * @return The RadarAltimeterActivityCommandType that was assigned
    */
  RadarAltimeterActivityCommandType& operator=(const RadarAltimeterActivityCommandType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The RadarAltimeterActivityCommandType to move from
    * @return The RadarAltimeterActivityCommandType that was assigned
    */
  RadarAltimeterActivityCommandType& operator=(RadarAltimeterActivityCommandType&& rhs) = delete;

  /** The destructor */
  ~RadarAltimeterActivityCommandType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RadarAltimeterActivityCommandType whose contents are to be used to set this
    *      uci::type::RadarAltimeterActivityCommandType's contents.
    */
  void copy(const uci::type::RadarAltimeterActivityCommandType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RadarAltimeterActivityCommandType whose contents are to be used to set this
    *      uci::type::RadarAltimeterActivityCommandType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::RadarAltimeterActivityCommandType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getAttempt() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setAttempt(xs::UnsignedInt value) override;

  /** Returns whether this optional field Attemptis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAttempt() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearAttempt() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setTemporalConstraints(const uci::type::CapabilityCommandTemporalConstraintsType& accessor) override;

  /** Returns whether this optional field TemporalConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTemporalConstraints() const noexcept override;

  /** Enables the optional field such that getTemporalConstraints will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandTemporalConstraintsType& enableTemporalConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearTemporalConstraints() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getOverrideRejection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setOverrideRejection(xs::Boolean value) override;

  /** Returns whether this optional field OverrideRejectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOverrideRejection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearOverrideRejection() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandFrequencyType& getFrequency() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& getFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) override;

  /** Returns whether this optional field Frequencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequency() const noexcept override;

  /** Enables the optional field such that getFrequency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearFrequency() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarAltimeterCollectionOptionsType& getCollectionOptions_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadarAltimeterCollectionOptionsType& getCollectionOptions() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarAltimeterCollectionOptionsType& getCollectionOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setCollectionOptions(const uci::type::RadarAltimeterCollectionOptionsType& accessor) override;

  /** Returns whether this optional field CollectionOptionsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionOptions() const noexcept override;

  /** Enables the optional field such that getCollectionOptions will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarAltimeterCollectionOptionsType& enableCollectionOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearCollectionOptions() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarAltimeterCollectionConstraintsType& getCollectionConstraints_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadarAltimeterCollectionConstraintsType& getCollectionConstraints() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarAltimeterCollectionConstraintsType& getCollectionConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setCollectionConstraints(const uci::type::RadarAltimeterCollectionConstraintsType& accessor) override;

  /** Returns whether this optional field CollectionConstraintsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCollectionConstraints() const noexcept override;

  /** Enables the optional field such that getCollectionConstraints will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarAltimeterCollectionConstraintsType& enableCollectionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearCollectionConstraints() noexcept override;

  /** Returns the accessor to the AtmosphericPropagation field contained in this message fragment
    *
    * @return The const reference to the accessor to the AtmosphericPropagation field.
    */
  const uci::type::RadarAltimeterActivityCommandType::AtmosphericPropagation& getAtmosphericPropagation() const override;

  /** Returns the accessor to the AtmosphericPropagation field contained in this message fragment
    *
    * @return The reference to the accessor to the AtmosphericPropagation field.
    */
  uci::type::RadarAltimeterActivityCommandType::AtmosphericPropagation& getAtmosphericPropagation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setAtmosphericPropagation(const uci::type::RadarAltimeterActivityCommandType::AtmosphericPropagation& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeaStateEnum& getSeaState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherSeaStateEnum& getSeaState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeaStateEnum& getSeaState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setSeaState(const uci::type::WeatherSeaStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setSeaState(uci::type::WeatherSeaStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field SeaStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSeaState() const noexcept override;

  /** Enables the optional field such that getSeaState will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherSeaStateEnum& enableSeaState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearSeaState() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GroundTerrainTypeEnum& getTerrainType_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::GroundTerrainTypeEnum& getTerrainType() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GroundTerrainTypeEnum& getTerrainType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setTerrainType(const uci::type::GroundTerrainTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setTerrainType(uci::type::GroundTerrainTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field TerrainTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTerrainType() const noexcept override;

  /** Enables the optional field such that getTerrainType will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GroundTerrainTypeEnum& enableTerrainType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearTerrainType() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getBackScatterCoefficient() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setBackScatterCoefficient(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field BackScatterCoefficientis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBackScatterCoefficient() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearBackScatterCoefficient() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& getRepetition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RepetitionType& getRepetition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& getRepetition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& setRepetition(const uci::type::RepetitionType& accessor) override;

  /** Returns whether this optional field Repetitionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRepetition() const noexcept override;

  /** Enables the optional field such that getRepetition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RadarAltimeterActivityCommandType& clearRepetition() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<RadarAltimeterActivityCommandType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::RadarAltimeterActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::UnsignedInt> attempt_Accessor;
  std::unique_ptr<CapabilityCommandTemporalConstraintsType> temporalConstraints_Accessor;
  boost::optional<asb_xs::Boolean> overrideRejection_Accessor;
  std::unique_ptr<CapabilityCommandFrequencyType> frequency_Accessor;
  std::unique_ptr<RadarAltimeterCollectionOptionsType> collectionOptions_Accessor;
  std::unique_ptr<RadarAltimeterCollectionConstraintsType> collectionConstraints_Accessor;
  std::unique_ptr<AtmosphericPropagation> atmosphericPropagation_Accessor;
  std::unique_ptr<WeatherSeaStateEnum> seaState_Accessor;
  std::unique_ptr<GroundTerrainTypeEnum> terrainType_Accessor;
  boost::optional<DecibelTypeValue> backScatterCoefficient_Accessor;
  std::unique_ptr<RepetitionType> repetition_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_RADARALTIMETERACTIVITYCOMMANDTYPE_H
