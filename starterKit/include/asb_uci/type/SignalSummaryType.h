/** @file SignalSummaryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SIGNALSUMMARYTYPE_H
#define ASB_UCI_TYPE_SIGNALSUMMARYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CoverageEffortEnum.h"
#include "asb_uci/type/DurationType.h"
#include "asb_uci/type/EmitterUrgencyEnum.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/FrequencyModulationVariationEnum.h"
#include "asb_uci/type/FrequencyType.h"
#include "asb_uci/type/MilliwattPowerRatioType.h"
#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/type/PRI_TypeEnum.h"
#include "asb_uci/type/RadarBeamPersistenceEnum.h"
#include "asb_uci/type/RadarBeamTypeEnum.h"
#include "asb_uci/type/SignalLocationEnum.h"
#include "asb_uci/type/TrackModeEnum.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "uci/type/SignalSummaryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class FrequencyControlType;
class FrequencyRangeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SignalSummaryType : public virtual uci::type::SignalSummaryType {
public:
  /** Indicates detected modulation in the Signal. See enumeration annotations for further details. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 62]
    */
  using Modulation = asb_uci::base::BoundedList<uci::type::ModulationEnum, uci::type::accessorType::modulationEnum, asb_uci::type::ModulationEnum>;

  /** Indicates a specific frequency to be used for the signal description. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using FrequencyCoverage = asb_uci::base::BoundedList<uci::type::FrequencyControlType, uci::type::accessorType::frequencyControlType, asb_uci::type::FrequencyControlType>;

  /** The constructor */
  SignalSummaryType();

  /** The copy constructor
    *
    * @param rhs The SignalSummaryType to copy from
    */
  SignalSummaryType(const SignalSummaryType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SignalSummaryType to move from
    */
  SignalSummaryType(SignalSummaryType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SignalSummaryType to copy from
    * @return The SignalSummaryType that was assigned
    */
  SignalSummaryType& operator=(const SignalSummaryType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SignalSummaryType to move from
    * @return The SignalSummaryType that was assigned
    */
  SignalSummaryType& operator=(SignalSummaryType&& rhs) = delete;

  /** The destructor */
  virtual ~SignalSummaryType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalSummaryType whose contents are to be used to set this
    *      uci::type::SignalSummaryType's contents.
    */
  void copy(const uci::type::SignalSummaryType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SignalSummaryType whose contents are to be used to set this
    *      uci::type::SignalSummaryType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SignalSummaryType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the Modulation field contained in this message fragment
    *
    * @return The const reference to the accessor to the Modulation field.
    */
  const uci::type::SignalSummaryType::Modulation& getModulation() const override;

  /** Returns the accessor to the Modulation field contained in this message fragment
    *
    * @return The reference to the accessor to the Modulation field.
    */
  uci::type::SignalSummaryType::Modulation& getModulation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setModulation(const uci::type::SignalSummaryType::Modulation& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString64Type& getVendorSpecificModulation_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString64Type& getVendorSpecificModulation() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString64Type& getVendorSpecificModulation() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setVendorSpecificModulation(const uci::type::VisibleString64Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setVendorSpecificModulation(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setVendorSpecificModulation(const char* value) override;

  /** Returns whether this optional field vendorSpecificModulation_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVendorSpecificModulation() const noexcept override;

  /** Enables the optional field such that getVendorSpecificModulation will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString64Type& enableVendorSpecificModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearVendorSpecificModulation() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyModulationVariation(const uci::type::FrequencyModulationVariationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyModulationVariation(uci::type::FrequencyModulationVariationEnum::EnumerationItem value) override;

  /** Returns whether this optional field FrequencyModulationVariationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyModulationVariation() const noexcept override;

  /** Enables the optional field such that getFrequencyModulationVariation will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyModulationVariationEnum& enableFrequencyModulationVariation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearFrequencyModulationVariation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrequencyAverage() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyAverage(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field FrequencyAverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyAverage() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearFrequencyAverage() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrequencyMin() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyMin(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field FrequencyMinis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyMin() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearFrequencyMin() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrequencyMax() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyMax(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field FrequencyMaxis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyMax() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearFrequencyMax() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CoverageEffortEnum& getFrequencyRangeControlOptions_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CoverageEffortEnum& getFrequencyRangeControlOptions() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CoverageEffortEnum& getFrequencyRangeControlOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyRangeControlOptions(const uci::type::CoverageEffortEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyRangeControlOptions(uci::type::CoverageEffortEnum::EnumerationItem value) override;

  /** Returns whether this optional field FrequencyRangeControlOptionsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyRangeControlOptions() const noexcept override;

  /** Enables the optional field such that getFrequencyRangeControlOptions will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CoverageEffortEnum& enableFrequencyRangeControlOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearFrequencyRangeControlOptions() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_TypeEnum& getPRI_Type_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PRI_TypeEnum& getPRI_Type() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_TypeEnum& getPRI_Type() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPRI_Type(const uci::type::PRI_TypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPRI_Type(uci::type::PRI_TypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field PRI_Typeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_Type() const noexcept override;

  /** Enables the optional field such that getPRI_Type will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PRI_TypeEnum& enablePRI_Type(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearPRI_Type() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPRI_Average() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPRI_Average(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PRI_Averageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_Average() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearPRI_Average() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPRI_Min() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPRI_Min(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PRI_Minis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_Min() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearPRI_Min() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPRI_Max() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPRI_Max(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PRI_Maxis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI_Max() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearPRI_Max() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidthAverage() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPulseWidthAverage(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthAverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthAverage() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearPulseWidthAverage() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidthMin() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPulseWidthMin(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthMinis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthMin() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearPulseWidthMin() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidthMax() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setPulseWidthMax(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthMaxis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthMax() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearPulseWidthMax() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getSignalBandwidth_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FrequencyRangeType& getSignalBandwidth() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& getSignalBandwidth() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setSignalBandwidth(const uci::type::FrequencyRangeType& accessor) override;

  /** Returns whether this optional field SignalBandwidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSignalBandwidth() const noexcept override;

  /** Enables the optional field such that getSignalBandwidth will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FrequencyRangeType& enableSignalBandwidth(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearSignalBandwidth() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getAmplitudeAverage() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setAmplitudeAverage(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field AmplitudeAverageis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAmplitudeAverage() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearAmplitudeAverage() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackModeEnum& getTrackMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::TrackModeEnum& getTrackMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackModeEnum& getTrackMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setTrackMode(const uci::type::TrackModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setTrackMode(uci::type::TrackModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field TrackModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTrackMode() const noexcept override;

  /** Enables the optional field such that getTrackMode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TrackModeEnum& enableTrackMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearTrackMode() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterUrgencyEnum& getUrgency_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EmitterUrgencyEnum& getUrgency() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterUrgencyEnum& getUrgency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setUrgency(const uci::type::EmitterUrgencyEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setUrgency(uci::type::EmitterUrgencyEnum::EnumerationItem value) override;

  /** Returns whether this optional field Urgencyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUrgency() const noexcept override;

  /** Enables the optional field such that getUrgency will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmitterUrgencyEnum& enableUrgency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearUrgency() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getWartimeReserve_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getWartimeReserve() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getWartimeReserve() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setWartimeReserve(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setWartimeReserve(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setWartimeReserve(const char* value) override;

  /** Returns whether this optional field wartimeReserve_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWartimeReserve() const noexcept override;

  /** Enables the optional field such that getWartimeReserve will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableWartimeReserve(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearWartimeReserve() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalLocationEnum& getLocationCategory_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SignalLocationEnum& getLocationCategory() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalLocationEnum& getLocationCategory() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setLocationCategory(const uci::type::SignalLocationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setLocationCategory(uci::type::SignalLocationEnum::EnumerationItem value) override;

  /** Returns whether this optional field LocationCategoryis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocationCategory() const noexcept override;

  /** Enables the optional field such that getLocationCategory will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SignalLocationEnum& enableLocationCategory(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearLocationCategory() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamTypeEnum& getTypeOfBeam_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadarBeamTypeEnum& getTypeOfBeam() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamTypeEnum& getTypeOfBeam() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setTypeOfBeam(const uci::type::RadarBeamTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setTypeOfBeam(uci::type::RadarBeamTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field TypeOfBeamis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTypeOfBeam() const noexcept override;

  /** Enables the optional field such that getTypeOfBeam will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamTypeEnum& enableTypeOfBeam(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearTypeOfBeam() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamPersistenceEnum& getBeamPersistence_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadarBeamPersistenceEnum& getBeamPersistence() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamPersistenceEnum& getBeamPersistence() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setBeamPersistence(const uci::type::RadarBeamPersistenceEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setBeamPersistence(uci::type::RadarBeamPersistenceEnum::EnumerationItem value) override;

  /** Returns whether this optional field BeamPersistenceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBeamPersistence() const noexcept override;

  /** Enables the optional field such that getBeamPersistence will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadarBeamPersistenceEnum& enableBeamPersistence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& clearBeamPersistence() noexcept override;

  /** Returns the accessor to the FrequencyCoverage field contained in this message fragment
    *
    * @return The const reference to the accessor to the FrequencyCoverage field.
    */
  const uci::type::SignalSummaryType::FrequencyCoverage& getFrequencyCoverage() const override;

  /** Returns the accessor to the FrequencyCoverage field contained in this message fragment
    *
    * @return The reference to the accessor to the FrequencyCoverage field.
    */
  uci::type::SignalSummaryType::FrequencyCoverage& getFrequencyCoverage() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SignalSummaryType& setFrequencyCoverage(const uci::type::SignalSummaryType::FrequencyCoverage& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SignalSummaryType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalSummaryType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SignalSummaryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Modulation> modulation_Accessor;
  std::unique_ptr<VisibleString64Type> vendorSpecificModulation_Accessor;
  std::unique_ptr<FrequencyModulationVariationEnum> frequencyModulationVariation_Accessor;
  boost::optional<FrequencyTypeValue> frequencyAverage_Accessor;
  boost::optional<FrequencyTypeValue> frequencyMin_Accessor;
  boost::optional<FrequencyTypeValue> frequencyMax_Accessor;
  std::unique_ptr<CoverageEffortEnum> frequencyRangeControlOptions_Accessor;
  std::unique_ptr<PRI_TypeEnum> pRI_Type_Accessor;
  boost::optional<DurationTypeValue> pRI_Average_Accessor;
  boost::optional<DurationTypeValue> pRI_Min_Accessor;
  boost::optional<DurationTypeValue> pRI_Max_Accessor;
  boost::optional<DurationTypeValue> pulseWidthAverage_Accessor;
  boost::optional<DurationTypeValue> pulseWidthMin_Accessor;
  boost::optional<DurationTypeValue> pulseWidthMax_Accessor;
  std::unique_ptr<FrequencyRangeType> signalBandwidth_Accessor;
  boost::optional<MilliwattPowerRatioTypeValue> amplitudeAverage_Accessor;
  std::unique_ptr<TrackModeEnum> trackMode_Accessor;
  std::unique_ptr<EmitterUrgencyEnum> urgency_Accessor;
  std::unique_ptr<EmptyType> wartimeReserve_Accessor;
  std::unique_ptr<SignalLocationEnum> locationCategory_Accessor;
  std::unique_ptr<RadarBeamTypeEnum> typeOfBeam_Accessor;
  std::unique_ptr<RadarBeamPersistenceEnum> beamPersistence_Accessor;
  std::unique_ptr<FrequencyCoverage> frequencyCoverage_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SIGNALSUMMARYTYPE_H
