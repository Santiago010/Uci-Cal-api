/** @file ECEF_PositionOrientationCovarianceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ECEF_POSITIONORIENTATIONCOVARIANCETYPE_H
#define ASB_UCI_TYPE_ECEF_POSITIONORIENTATIONCOVARIANCETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_PositionOrientationCovarianceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The 1-sigma position-orientation covariance terms in the Earth-Centered-Earth-Fixed (ECEF) coordinate system. The
  * covariances are symmetric and therefore the covariance values expressed here are the minimum set.
  */
class ECEF_PositionOrientationCovarianceType : public virtual uci::type::ECEF_PositionOrientationCovarianceType {
public:
  /** The constructor */
  ECEF_PositionOrientationCovarianceType();

  /** The copy constructor
    *
    * @param rhs The ECEF_PositionOrientationCovarianceType to copy from
    */
  ECEF_PositionOrientationCovarianceType(const ECEF_PositionOrientationCovarianceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ECEF_PositionOrientationCovarianceType to move from
    */
  ECEF_PositionOrientationCovarianceType(ECEF_PositionOrientationCovarianceType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ECEF_PositionOrientationCovarianceType to copy from
    * @return The ECEF_PositionOrientationCovarianceType that was assigned
    */
  ECEF_PositionOrientationCovarianceType& operator=(const ECEF_PositionOrientationCovarianceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ECEF_PositionOrientationCovarianceType to move from
    * @return The ECEF_PositionOrientationCovarianceType that was assigned
    */
  ECEF_PositionOrientationCovarianceType& operator=(ECEF_PositionOrientationCovarianceType&& rhs) = delete;

  /** The destructor */
  virtual ~ECEF_PositionOrientationCovarianceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ECEF_PositionOrientationCovarianceType whose contents are to be used to set this
    *      uci::type::ECEF_PositionOrientationCovarianceType's contents.
    */
  void copy(const uci::type::ECEF_PositionOrientationCovarianceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ECEF_PositionOrientationCovarianceType whose contents are to be used to set this
    *      uci::type::ECEF_PositionOrientationCovarianceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ECEF_PositionOrientationCovarianceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's PxRr field
    *
    * @return The contents of the PxRr field
    */
  xs::Double getPxRr() const override;

  /** Sets the contents of the message's PxRr field
    *
    * @param value The new value to set the PxRr field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPxRr(xs::Double value) override;

  /** Returns the contents of the message's PxRp field
    *
    * @return The contents of the PxRp field
    */
  xs::Double getPxRp() const override;

  /** Sets the contents of the message's PxRp field
    *
    * @param value The new value to set the PxRp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPxRp(xs::Double value) override;

  /** Returns the contents of the message's PxRy field
    *
    * @return The contents of the PxRy field
    */
  xs::Double getPxRy() const override;

  /** Sets the contents of the message's PxRy field
    *
    * @param value The new value to set the PxRy field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPxRy(xs::Double value) override;

  /** Returns the contents of the message's PyRr field
    *
    * @return The contents of the PyRr field
    */
  xs::Double getPyRr() const override;

  /** Sets the contents of the message's PyRr field
    *
    * @param value The new value to set the PyRr field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPyRr(xs::Double value) override;

  /** Returns the contents of the message's PyRp field
    *
    * @return The contents of the PyRp field
    */
  xs::Double getPyRp() const override;

  /** Sets the contents of the message's PyRp field
    *
    * @param value The new value to set the PyRp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPyRp(xs::Double value) override;

  /** Returns the contents of the message's PyRy field
    *
    * @return The contents of the PyRy field
    */
  xs::Double getPyRy() const override;

  /** Sets the contents of the message's PyRy field
    *
    * @param value The new value to set the PyRy field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPyRy(xs::Double value) override;

  /** Returns the contents of the message's PzRr field
    *
    * @return The contents of the PzRr field
    */
  xs::Double getPzRr() const override;

  /** Sets the contents of the message's PzRr field
    *
    * @param value The new value to set the PzRr field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPzRr(xs::Double value) override;

  /** Returns the contents of the message's PzRp field
    *
    * @return The contents of the PzRp field
    */
  xs::Double getPzRp() const override;

  /** Sets the contents of the message's PzRp field
    *
    * @param value The new value to set the PzRp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPzRp(xs::Double value) override;

  /** Returns the contents of the message's PzRy field
    *
    * @return The contents of the PzRy field
    */
  xs::Double getPzRy() const override;

  /** Sets the contents of the message's PzRy field
    *
    * @param value The new value to set the PzRy field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ECEF_PositionOrientationCovarianceType& setPzRy(xs::Double value) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ECEF_PositionOrientationCovarianceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_PositionOrientationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ECEF_PositionOrientationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  asb_xs::Double pxRr_Accessor{0.0};
  asb_xs::Double pxRp_Accessor{0.0};
  asb_xs::Double pxRy_Accessor{0.0};
  asb_xs::Double pyRr_Accessor{0.0};
  asb_xs::Double pyRp_Accessor{0.0};
  asb_xs::Double pyRy_Accessor{0.0};
  asb_xs::Double pzRr_Accessor{0.0};
  asb_xs::Double pzRp_Accessor{0.0};
  asb_xs::Double pzRy_Accessor{0.0};

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ECEF_POSITIONORIENTATIONCOVARIANCETYPE_H
