/** @file StoreLoadoutItemType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_STORELOADOUTITEMTYPE_H
#define ASB_UCI_TYPE_STORELOADOUTITEMTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../base/BoundedList.h"
#include "StoreLoadoutItemPET.h"
#include "../../asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreLoadoutItemType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class StoreItemType;

/** An item in a loadout. Each item can have siblings in the tree, as well as hold other items. This type contains
  * recursion.
  */
class StoreLoadoutItemType : public virtual uci::type::StoreLoadoutItemType, public virtual StoreLoadoutItemPET {
public:
  /** The Mission or Carriage representations of the items that may be held at this location. An empty PossibleStore list
    * means the location is empty. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using PossibleStore = asb_uci::base::BoundedList<uci::type::StoreItemType, uci::type::accessorType::storeItemType, asb_uci::type::StoreItemType>;

  /** The constructor */
  StoreLoadoutItemType();

  /** The copy constructor
    *
    * @param rhs The StoreLoadoutItemType to copy from
    */
  StoreLoadoutItemType(const StoreLoadoutItemType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The StoreLoadoutItemType to move from
    */
  StoreLoadoutItemType(StoreLoadoutItemType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The StoreLoadoutItemType to copy from
    * @return The StoreLoadoutItemType that was assigned
    */
  StoreLoadoutItemType& operator=(const StoreLoadoutItemType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The StoreLoadoutItemType to move from
    * @return The StoreLoadoutItemType that was assigned
    */
  StoreLoadoutItemType& operator=(StoreLoadoutItemType&& rhs) = delete;

  /** The destructor */
  ~StoreLoadoutItemType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::StoreLoadoutItemType whose contents are to be used to set this
    *      uci::type::StoreLoadoutItemType's contents.
    */
  void copy(const uci::type::StoreLoadoutItemType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::StoreLoadoutItemType whose contents are to be used to set this
    *      uci::type::StoreLoadoutItemType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::StoreLoadoutItemType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's Location field
    *
    * @return The contents of the Location field
    */
  xs::Int getLocation() const override;

  /** Sets the contents of the message's Location field
    *
    * @param value The new value to set the Location field to
    * @return A reference to the object on which this method was called.
    */
  StoreLoadoutItemType& setLocation(xs::Int value) override;

  /** Returns the accessor to the PossibleStore field contained in this message fragment
    *
    * @return The const reference to the accessor to the PossibleStore field.
    */
  const uci::type::StoreLoadoutItemType::PossibleStore& getPossibleStore() const override;

  /** Returns the accessor to the PossibleStore field contained in this message fragment
    *
    * @return The reference to the accessor to the PossibleStore field.
    */
  uci::type::StoreLoadoutItemType::PossibleStore& getPossibleStore() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::StoreLoadoutItemType& setPossibleStore(const uci::type::StoreLoadoutItemType::PossibleStore& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<StoreLoadoutItemType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::StoreLoadoutItemType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::StoreLoadoutItemType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  asb_xs::Int location_Accessor{0};
  std::unique_ptr<PossibleStore> possibleStore_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_STORELOADOUTITEMTYPE_H
