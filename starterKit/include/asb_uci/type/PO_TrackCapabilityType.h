/** @file PO_TrackCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_TRACKCAPABILITYTYPE_H
#define ASB_UCI_TYPE_PO_TRACKCAPABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/PO_TrackCapabilityTypeEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/PO_TrackCapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class DoubleMinMaxType;
class DurationRangeType;
class IdentityBasicType;
class PO_CoastSettingOptionsType;
class PO_OffsetTrackSettingsType;
class TrackOptionsID_Type;

/** Allowable range of values for track parameters that can be used to customize target detections. */
class PO_TrackCapabilityType : public virtual uci::type::PO_TrackCapabilityType {
public:
  /** These are the additional features that the PO_Command can support and are not specifically settable (i.e., not
    * available in PO_SettingsCommand). List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 3]
    */
  using TrackControlOptions = asb_uci::base::BoundedList<uci::type::PO_TrackCapabilityTypeEnum, uci::type::accessorType::pO_TrackCapabilityTypeEnum, asb_uci::type::PO_TrackCapabilityTypeEnum>;

  /** This is the allowed range of coast time settings associated with an environment setting for coasting a track before
    * dropping it. List size is based on allowing one per environment option available. [Occurrences: Minimum: 0; Maximum:
    * 6]
    */
  using CoastSettingOptions = asb_uci::base::BoundedList<uci::type::PO_CoastSettingOptionsType, uci::type::accessorType::pO_CoastSettingOptionsType, asb_uci::type::PO_CoastSettingOptionsType>;

  /** The constructor */
  PO_TrackCapabilityType();

  /** The copy constructor
    *
    * @param rhs The PO_TrackCapabilityType to copy from
    */
  PO_TrackCapabilityType(const PO_TrackCapabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_TrackCapabilityType to move from
    */
  PO_TrackCapabilityType(PO_TrackCapabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_TrackCapabilityType to copy from
    * @return The PO_TrackCapabilityType that was assigned
    */
  PO_TrackCapabilityType& operator=(const PO_TrackCapabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_TrackCapabilityType to move from
    * @return The PO_TrackCapabilityType that was assigned
    */
  PO_TrackCapabilityType& operator=(PO_TrackCapabilityType&& rhs) = delete;

  /** The destructor */
  virtual ~PO_TrackCapabilityType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_TrackCapabilityType whose contents are to be used to set this
    *      uci::type::PO_TrackCapabilityType's contents.
    */
  void copy(const uci::type::PO_TrackCapabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_TrackCapabilityType whose contents are to be used to set this
    *      uci::type::PO_TrackCapabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_TrackCapabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the TrackOptionID field contained in this message fragment
    *
    * @return The const reference to the accessor to the TrackOptionID field.
    */
  const uci::type::TrackOptionsID_Type& getTrackOptionID() const override;

  /** Returns the accessor to the TrackOptionID field contained in this message fragment
    *
    * @return The reference to the accessor to the TrackOptionID field.
    */
  uci::type::TrackOptionsID_Type& getTrackOptionID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setTrackOptionID(const uci::type::TrackOptionsID_Type& accessor) override;

  /** Returns the accessor to the TrackControlOptions field contained in this message fragment
    *
    * @return The const reference to the accessor to the TrackControlOptions field.
    */
  const uci::type::PO_TrackCapabilityType::TrackControlOptions& getTrackControlOptions() const override;

  /** Returns the accessor to the TrackControlOptions field contained in this message fragment
    *
    * @return The reference to the accessor to the TrackControlOptions field.
    */
  uci::type::PO_TrackCapabilityType::TrackControlOptions& getTrackControlOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setTrackControlOptions(const uci::type::PO_TrackCapabilityType::TrackControlOptions& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityBasicType& getATR_Filter_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::IdentityBasicType& getATR_Filter() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityBasicType& getATR_Filter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setATR_Filter(const uci::type::IdentityBasicType& accessor) override;

  /** Returns whether this optional field ATR_Filteris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasATR_Filter() const noexcept override;

  /** Enables the optional field such that getATR_Filter will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityBasicType& enableATR_Filter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& clearATR_Filter() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_OffsetTrackSettingsType& getOffsetTrackSettings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_OffsetTrackSettingsType& getOffsetTrackSettings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_OffsetTrackSettingsType& getOffsetTrackSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setOffsetTrackSettings(const uci::type::PO_OffsetTrackSettingsType& accessor) override;

  /** Returns whether this optional field OffsetTrackSettingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOffsetTrackSettings() const noexcept override;

  /** Enables the optional field such that getOffsetTrackSettings will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_OffsetTrackSettingsType& enableOffsetTrackSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& clearOffsetTrackSettings() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DurationRangeType& getObservedEntityThresholdSettings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DurationRangeType& getObservedEntityThresholdSettings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DurationRangeType& getObservedEntityThresholdSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setObservedEntityThresholdSettings(const uci::type::DurationRangeType& accessor) override;

  /** Returns whether this optional field ObservedEntityThresholdSettingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObservedEntityThresholdSettings() const noexcept override;

  /** Enables the optional field such that getObservedEntityThresholdSettings will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DurationRangeType& enableObservedEntityThresholdSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& clearObservedEntityThresholdSettings() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getTrackingRange_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DoubleMinMaxType& getTrackingRange() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& getTrackingRange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setTrackingRange(const uci::type::DoubleMinMaxType& accessor) override;

  /** Returns whether this optional field TrackingRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTrackingRange() const noexcept override;

  /** Enables the optional field such that getTrackingRange will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DoubleMinMaxType& enableTrackingRange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& clearTrackingRange() noexcept override;

  /** Returns the accessor to the CoastSettingOptions field contained in this message fragment
    *
    * @return The const reference to the accessor to the CoastSettingOptions field.
    */
  const uci::type::PO_TrackCapabilityType::CoastSettingOptions& getCoastSettingOptions() const override;

  /** Returns the accessor to the CoastSettingOptions field contained in this message fragment
    *
    * @return The reference to the accessor to the CoastSettingOptions field.
    */
  uci::type::PO_TrackCapabilityType::CoastSettingOptions& getCoastSettingOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setCoastSettingOptions(const uci::type::PO_TrackCapabilityType::CoastSettingOptions& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getBlankingVolumeSupported() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& setBlankingVolumeSupported(xs::Boolean value) override;

  /** Returns whether this optional field BlankingVolumeSupportedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBlankingVolumeSupported() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_TrackCapabilityType& clearBlankingVolumeSupported() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_TrackCapabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TrackCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_TrackCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<TrackOptionsID_Type> trackOptionID_Accessor;
  std::unique_ptr<TrackControlOptions> trackControlOptions_Accessor;
  std::unique_ptr<IdentityBasicType> aTR_Filter_Accessor;
  std::unique_ptr<PO_OffsetTrackSettingsType> offsetTrackSettings_Accessor;
  std::unique_ptr<DurationRangeType> observedEntityThresholdSettings_Accessor;
  std::unique_ptr<DoubleMinMaxType> trackingRange_Accessor;
  std::unique_ptr<CoastSettingOptions> coastSettingOptions_Accessor;
  boost::optional<asb_xs::Boolean> blankingVolumeSupported_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_TRACKCAPABILITYTYPE_H
