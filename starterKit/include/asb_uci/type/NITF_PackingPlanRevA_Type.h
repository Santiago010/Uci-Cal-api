/** @file NITF_PackingPlanRevA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_NITF_PACKINGPLANREVA_TYPE_H
#define ASB_UCI_TYPE_NITF_PACKINGPLANREVA_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/NITF_PackingPlanPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NITF_PackingPlanRevA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ACFTB_RevA_Type;
class FileHeaderRevA_Type;
class ImageSubheaderRevA_Type;
class MSTGTA_RevA_Type;

/** This is a revised NITF_PackingPlan rectifying the problems identified in NITF_PackingPlanType. It is a tailored
  * reproduction of data definitions included in NITF 2.1 as described in MIL-STD-2500C, MIL-STD-2500B Notice 2, and
  * companion appendices STDI-0002 Compendium Nov 2000 and IPON v1.0_01 August 2007. These data must flow from Task or
  * Command source to recipient so that the recipient can populate the resulting Products with this data to enable PED
  * and other functions. Under most circumstances, UCI doesn't reproduce other standards "in-band", in UCI messages. An
  * exception is made in this case because to do otherwise would disrupt C2 and PED. NOTES: 1) Annotations for these
  * fields specify where the source data can be obtained from an ACTDF message from AOC Cougar system. But note that
  * tasking can come in other forms such as target deck spreadsheets, email, chat, CMCC operator GUIs, etc. 2) The NITF
  * Basic Character Set - Alphanumeric (BCS-A) is all ASCII characters between SPACE and TILDE show as patterns herein as
  * "[ -~]", 2) The NITF Extended Character Set - Alphanumeric (ECS-A), is a subset of the Extended Character Set (ECS).
  * Valid ECS-A character codes range from 0x20 to 0x7E, and 0xA0 to 0xFF but Line Feed (0x0A), Form Feed (0x0C) and
  * Carriage Return (0x0D) are not valid ECS-A characters. This range is expressed herein in patterns as "[ -~ -ÿ]".
  * Because of inconsistencies between standards, it is strongly advised that character codes ranging from 0xA0 to 0xFF
  * should never be used. Therefore, the use of ECS-A characters should be restricted to its BCS-A Subset.
  */
class NITF_PackingPlanRevA_Type : public virtual uci::type::NITF_PackingPlanRevA_Type, public virtual NITF_PackingPlanPET {
public:
  /** The constructor */
  NITF_PackingPlanRevA_Type();

  /** The copy constructor
    *
    * @param rhs The NITF_PackingPlanRevA_Type to copy from
    */
  NITF_PackingPlanRevA_Type(const NITF_PackingPlanRevA_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The NITF_PackingPlanRevA_Type to move from
    */
  NITF_PackingPlanRevA_Type(NITF_PackingPlanRevA_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The NITF_PackingPlanRevA_Type to copy from
    * @return The NITF_PackingPlanRevA_Type that was assigned
    */
  NITF_PackingPlanRevA_Type& operator=(const NITF_PackingPlanRevA_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The NITF_PackingPlanRevA_Type to move from
    * @return The NITF_PackingPlanRevA_Type that was assigned
    */
  NITF_PackingPlanRevA_Type& operator=(NITF_PackingPlanRevA_Type&& rhs) = delete;

  /** The destructor */
  ~NITF_PackingPlanRevA_Type() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::NITF_PackingPlanRevA_Type whose contents are to be used to set this
    *      uci::type::NITF_PackingPlanRevA_Type's contents.
    */
  void copy(const uci::type::NITF_PackingPlanRevA_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::NITF_PackingPlanRevA_Type whose contents are to be used to set this
    *      uci::type::NITF_PackingPlanRevA_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::NITF_PackingPlanRevA_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the FileHeader field contained in this message fragment
    *
    * @return The const reference to the accessor to the FileHeader field.
    */
  const uci::type::FileHeaderRevA_Type& getFileHeader() const override;

  /** Returns the accessor to the FileHeader field contained in this message fragment
    *
    * @return The reference to the accessor to the FileHeader field.
    */
  uci::type::FileHeaderRevA_Type& getFileHeader() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanRevA_Type& setFileHeader(const uci::type::FileHeaderRevA_Type& accessor) override;

  /** Returns the accessor to the ImageSubheader field contained in this message fragment
    *
    * @return The const reference to the accessor to the ImageSubheader field.
    */
  const uci::type::ImageSubheaderRevA_Type& getImageSubheader() const override;

  /** Returns the accessor to the ImageSubheader field contained in this message fragment
    *
    * @return The reference to the accessor to the ImageSubheader field.
    */
  uci::type::ImageSubheaderRevA_Type& getImageSubheader() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanRevA_Type& setImageSubheader(const uci::type::ImageSubheaderRevA_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ACFTB_RevA_Type& getACFTB_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ACFTB_RevA_Type& getACFTB() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ACFTB_RevA_Type& getACFTB() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanRevA_Type& setACFTB(const uci::type::ACFTB_RevA_Type& accessor) override;

  /** Returns whether this optional field ACFTBis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasACFTB() const noexcept override;

  /** Enables the optional field such that getACFTB will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ACFTB_RevA_Type& enableACFTB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanRevA_Type& clearACFTB() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MSTGTA_RevA_Type& getMSTGTA_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MSTGTA_RevA_Type& getMSTGTA() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MSTGTA_RevA_Type& getMSTGTA() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanRevA_Type& setMSTGTA(const uci::type::MSTGTA_RevA_Type& accessor) override;

  /** Returns whether this optional field MSTGTAis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMSTGTA() const noexcept override;

  /** Enables the optional field such that getMSTGTA will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MSTGTA_RevA_Type& enableMSTGTA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::NITF_PackingPlanRevA_Type& clearMSTGTA() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<NITF_PackingPlanRevA_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::NITF_PackingPlanRevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::NITF_PackingPlanRevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<FileHeaderRevA_Type> fileHeader_Accessor;
  std::unique_ptr<ImageSubheaderRevA_Type> imageSubheader_Accessor;
  std::unique_ptr<ACFTB_RevA_Type> aCFTB_Accessor;
  std::unique_ptr<MSTGTA_RevA_Type> mSTGTA_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_NITF_PACKINGPLANREVA_TYPE_H
