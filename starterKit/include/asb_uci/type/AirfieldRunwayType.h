/** @file AirfieldRunwayType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_AIRFIELDRUNWAYTYPE_H
#define ASB_UCI_TYPE_AIRFIELDRUNWAYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/AnglePositiveType.h"
#include "../../../include/asb_uci/type/ApproachLightingEnum.h"
#include "../../../include/asb_uci/type/ArresterWiresEnum.h"
#include "../../../include/asb_uci/type/BrakingActionEnum.h"
#include "../../../include/asb_uci/type/DistanceType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/RunwayStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldRunwayType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ForeignKeyType;
class RunwayCoordinatesType;
class RunwayID_Type;
class RunwayUsageDetailsType;
class SafeAltitudeType;

/** See the annotation in the associated message airfield runway data. */
class AirfieldRunwayType : public virtual uci::type::AirfieldRunwayType {
public:
  /** The constructor */
  AirfieldRunwayType();

  /** The copy constructor
    *
    * @param rhs The AirfieldRunwayType to copy from
    */
  AirfieldRunwayType(const AirfieldRunwayType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The AirfieldRunwayType to move from
    */
  AirfieldRunwayType(AirfieldRunwayType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The AirfieldRunwayType to copy from
    * @return The AirfieldRunwayType that was assigned
    */
  AirfieldRunwayType& operator=(const AirfieldRunwayType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The AirfieldRunwayType to move from
    * @return The AirfieldRunwayType that was assigned
    */
  AirfieldRunwayType& operator=(AirfieldRunwayType&& rhs) = delete;

  /** The destructor */
  virtual ~AirfieldRunwayType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AirfieldRunwayType whose contents are to be used to set this
    *      uci::type::AirfieldRunwayType's contents.
    */
  void copy(const uci::type::AirfieldRunwayType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AirfieldRunwayType whose contents are to be used to set this
    *      uci::type::AirfieldRunwayType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::AirfieldRunwayType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the RunwayID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RunwayID field.
    */
  const uci::type::RunwayID_Type& getRunwayID() const override;

  /** Returns the accessor to the RunwayID field contained in this message fragment
    *
    * @return The reference to the accessor to the RunwayID field.
    */
  uci::type::RunwayID_Type& getRunwayID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setRunwayID(const uci::type::RunwayID_Type& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getSecondaryIndicator_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getSecondaryIndicator() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getSecondaryIndicator() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setSecondaryIndicator(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setSecondaryIndicator(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setSecondaryIndicator(const char* value) override;

  /** Returns whether this optional field secondaryIndicator_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSecondaryIndicator() const noexcept override;

  /** Enables the optional field such that getSecondaryIndicator will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableSecondaryIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearSecondaryIndicator() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayStatusEnum& getStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RunwayStatusEnum& getStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayStatusEnum& getStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setStatus(const uci::type::RunwayStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setStatus(uci::type::RunwayStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field Statusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStatus() const noexcept override;

  /** Enables the optional field such that getStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayStatusEnum& enableStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearStatus() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getDirection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setDirection(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field Directionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDirection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearDirection() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getAvailableLength() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setAvailableLength(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field AvailableLengthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAvailableLength() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearAvailableLength() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getGCA_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getGCA() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getGCA() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setGCA(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setGCA(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setGCA(const char* value) override;

  /** Returns whether this optional field gCA_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGCA() const noexcept override;

  /** Enables the optional field such that getGCA will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableGCA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearGCA() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getILS_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getILS() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getILS() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setILS(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setILS(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setILS(const char* value) override;

  /** Returns whether this optional field iLS_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasILS() const noexcept override;

  /** Enables the optional field such that getILS will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableILS(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearILS() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ApproachLightingEnum& getApproachLighting_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ApproachLightingEnum& getApproachLighting() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ApproachLightingEnum& getApproachLighting() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setApproachLighting(const uci::type::ApproachLightingEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setApproachLighting(uci::type::ApproachLightingEnum::EnumerationItem value) override;

  /** Returns whether this optional field ApproachLightingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasApproachLighting() const noexcept override;

  /** Enables the optional field such that getApproachLighting will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ApproachLightingEnum& enableApproachLighting(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearApproachLighting() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArresterWiresEnum& getArresterWires_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ArresterWiresEnum& getArresterWires() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArresterWiresEnum& getArresterWires() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setArresterWires(const uci::type::ArresterWiresEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setArresterWires(uci::type::ArresterWiresEnum::EnumerationItem value) override;

  /** Returns whether this optional field ArresterWiresis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasArresterWires() const noexcept override;

  /** Enables the optional field such that getArresterWires will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArresterWiresEnum& enableArresterWires(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearArresterWires() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getArresterBarrier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::EmptyType& getArresterBarrier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getArresterBarrier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setArresterBarrier(const uci::type::EmptyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setArresterBarrier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setArresterBarrier(const char* value) override;

  /** Returns whether this optional field arresterBarrier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasArresterBarrier() const noexcept override;

  /** Enables the optional field such that getArresterBarrier will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::EmptyType& enableArresterBarrier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearArresterBarrier() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BrakingActionEnum& getBrakingAction_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::BrakingActionEnum& getBrakingAction() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BrakingActionEnum& getBrakingAction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setBrakingAction(const uci::type::BrakingActionEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setBrakingAction(uci::type::BrakingActionEnum::EnumerationItem value) override;

  /** Returns whether this optional field BrakingActionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBrakingAction() const noexcept override;

  /** Enables the optional field such that getBrakingAction will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::BrakingActionEnum& enableBrakingAction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearBrakingAction() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getVisualRange() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setVisualRange(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field VisualRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVisualRange() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearVisualRange() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayCoordinatesType& getTakeoffCoordinates_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RunwayCoordinatesType& getTakeoffCoordinates() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayCoordinatesType& getTakeoffCoordinates() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setTakeoffCoordinates(const uci::type::RunwayCoordinatesType& accessor) override;

  /** Returns whether this optional field TakeoffCoordinatesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTakeoffCoordinates() const noexcept override;

  /** Enables the optional field such that getTakeoffCoordinates will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayCoordinatesType& enableTakeoffCoordinates(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearTakeoffCoordinates() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayCoordinatesType& getLandingCoordinates_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RunwayCoordinatesType& getLandingCoordinates() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayCoordinatesType& getLandingCoordinates() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setLandingCoordinates(const uci::type::RunwayCoordinatesType& accessor) override;

  /** Returns whether this optional field LandingCoordinatesis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLandingCoordinates() const noexcept override;

  /** Enables the optional field such that getLandingCoordinates will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayCoordinatesType& enableLandingCoordinates(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearLandingCoordinates() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayUsageDetailsType& getDefaultRunwayUsageDetails_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RunwayUsageDetailsType& getDefaultRunwayUsageDetails() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayUsageDetailsType& getDefaultRunwayUsageDetails() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setDefaultRunwayUsageDetails(const uci::type::RunwayUsageDetailsType& accessor) override;

  /** Returns whether this optional field DefaultRunwayUsageDetailsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDefaultRunwayUsageDetails() const noexcept override;

  /** Enables the optional field such that getDefaultRunwayUsageDetails will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RunwayUsageDetailsType& enableDefaultRunwayUsageDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearDefaultRunwayUsageDetails() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SafeAltitudeType& getSafeAltitude_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SafeAltitudeType& getSafeAltitude() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SafeAltitudeType& getSafeAltitude() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setSafeAltitude(const uci::type::SafeAltitudeType& accessor) override;

  /** Returns whether this optional field SafeAltitudeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSafeAltitude() const noexcept override;

  /** Enables the optional field such that getSafeAltitude will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SafeAltitudeType& enableSafeAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearSafeAltitude() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getDAFIF_RunwayIdentifier_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getDAFIF_RunwayIdentifier() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getDAFIF_RunwayIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& setDAFIF_RunwayIdentifier(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field DAFIF_RunwayIdentifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDAFIF_RunwayIdentifier() const noexcept override;

  /** Enables the optional field such that getDAFIF_RunwayIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableDAFIF_RunwayIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AirfieldRunwayType& clearDAFIF_RunwayIdentifier() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<AirfieldRunwayType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::AirfieldRunwayType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::AirfieldRunwayType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<RunwayID_Type> runwayID_Accessor;
  std::unique_ptr<EmptyType> secondaryIndicator_Accessor;
  std::unique_ptr<RunwayStatusEnum> status_Accessor;
  boost::optional<AnglePositiveTypeValue> direction_Accessor;
  boost::optional<DistanceTypeValue> availableLength_Accessor;
  std::unique_ptr<EmptyType> gCA_Accessor;
  std::unique_ptr<EmptyType> iLS_Accessor;
  std::unique_ptr<ApproachLightingEnum> approachLighting_Accessor;
  std::unique_ptr<ArresterWiresEnum> arresterWires_Accessor;
  std::unique_ptr<EmptyType> arresterBarrier_Accessor;
  std::unique_ptr<BrakingActionEnum> brakingAction_Accessor;
  boost::optional<DistanceTypeValue> visualRange_Accessor;
  std::unique_ptr<RunwayCoordinatesType> takeoffCoordinates_Accessor;
  std::unique_ptr<RunwayCoordinatesType> landingCoordinates_Accessor;
  std::unique_ptr<RunwayUsageDetailsType> defaultRunwayUsageDetails_Accessor;
  std::unique_ptr<SafeAltitudeType> safeAltitude_Accessor;
  std::unique_ptr<ForeignKeyType> dAFIF_RunwayIdentifier_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_AIRFIELDRUNWAYTYPE_H
