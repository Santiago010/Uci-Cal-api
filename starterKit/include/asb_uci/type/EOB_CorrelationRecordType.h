/** @file EOB_CorrelationRecordType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_EOB_CORRELATIONRECORDTYPE_H
#define ASB_UCI_TYPE_EOB_CORRELATIONRECORDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/EOB_CorrelationTypeEnum.h"
#include "../../../include/asb_uci/type/NotationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_CorrelationRecordType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_CorrelatedToType;
class EOB_CorrelationRecordID_Type;
class EOB_SignalType;
class FixedPositionType;
class IdentityConfidenceType;
class KinematicsFixedType;
class OB_CorrelationInputType;
class SecurityInformationType;

/** This represents results of previous attempts to correlate SignalReports, Entities or other inputs to the EOB. */
class EOB_CorrelationRecordType : public virtual uci::type::EOB_CorrelationRecordType {
public:
  /** The constructor */
  EOB_CorrelationRecordType();

  /** The copy constructor
    *
    * @param rhs The EOB_CorrelationRecordType to copy from
    */
  EOB_CorrelationRecordType(const EOB_CorrelationRecordType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EOB_CorrelationRecordType to move from
    */
  EOB_CorrelationRecordType(EOB_CorrelationRecordType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EOB_CorrelationRecordType to copy from
    * @return The EOB_CorrelationRecordType that was assigned
    */
  EOB_CorrelationRecordType& operator=(const EOB_CorrelationRecordType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EOB_CorrelationRecordType to move from
    * @return The EOB_CorrelationRecordType that was assigned
    */
  EOB_CorrelationRecordType& operator=(EOB_CorrelationRecordType&& rhs) = delete;

  /** The destructor */
  virtual ~EOB_CorrelationRecordType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EOB_CorrelationRecordType whose contents are to be used to set this
    *      uci::type::EOB_CorrelationRecordType's contents.
    */
  void copy(const uci::type::EOB_CorrelationRecordType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EOB_CorrelationRecordType whose contents are to be used to set this
    *      uci::type::EOB_CorrelationRecordType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EOB_CorrelationRecordType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecurityInformation field.
    */
  const uci::type::SecurityInformationType& getSecurityInformation() const override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityInformation field.
    */
  uci::type::SecurityInformationType& getSecurityInformation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setSecurityInformation(const uci::type::SecurityInformationType& accessor) override;

  /** Returns the accessor to the EOB_CorrelationRecordID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EOB_CorrelationRecordID field.
    */
  const uci::type::EOB_CorrelationRecordID_Type& getEOB_CorrelationRecordID() const override;

  /** Returns the accessor to the EOB_CorrelationRecordID field contained in this message fragment
    *
    * @return The reference to the accessor to the EOB_CorrelationRecordID field.
    */
  uci::type::EOB_CorrelationRecordID_Type& getEOB_CorrelationRecordID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setEOB_CorrelationRecordID(const uci::type::EOB_CorrelationRecordID_Type& accessor) override;

  /** Returns the contents of the message's CorrelationType field
    *
    * @return The contents of the CorrelationType field
    */
  const uci::type::EOB_CorrelationTypeEnum& getCorrelationType() const override;

  /** Returns the contents of the message's CorrelationType field
    *
    * @return The contents of the CorrelationType field
    */
  uci::type::EOB_CorrelationTypeEnum& getCorrelationType() override;

  /** Sets the contents of the message's CorrelationType field
    *
    * @param accessor The accessor to use to set the CorrelationType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setCorrelationType(const uci::type::EOB_CorrelationTypeEnum& accessor) override;

  /** Sets the contents of the message's CorrelationType field
    *
    * @param value The new value to set the CorrelationType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setCorrelationType(uci::type::EOB_CorrelationTypeEnum::EnumerationItem value) override;

  /** Returns the contents of the message's CorrelationTimestamp field
    *
    * @return The contents of the CorrelationTimestamp field
    */
  uci::type::DateTimeTypeValue getCorrelationTimestamp() const override;

  /** Sets the contents of the message's CorrelationTimestamp field
    *
    * @param value The new value to set the CorrelationTimestamp field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setCorrelationTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_CorrelatedToType& getCorrelatedTo_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EOB_CorrelatedToType& getCorrelatedTo() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_CorrelatedToType& getCorrelatedTo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setCorrelatedTo(const uci::type::EOB_CorrelatedToType& accessor) override;

  /** Returns whether this optional field CorrelatedTois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCorrelatedTo() const noexcept override;

  /** Enables the optional field such that getCorrelatedTo will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_CorrelatedToType& enableCorrelatedTo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearCorrelatedTo() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_CorrelationInputType& getCorrelationInput_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OB_CorrelationInputType& getCorrelationInput() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_CorrelationInputType& getCorrelationInput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setCorrelationInput(const uci::type::OB_CorrelationInputType& accessor) override;

  /** Returns whether this optional field CorrelationInputis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCorrelationInput() const noexcept override;

  /** Enables the optional field such that getCorrelationInput will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_CorrelationInputType& enableCorrelationInput(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearCorrelationInput() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_SignalType& getSignal_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EOB_SignalType& getSignal() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_SignalType& getSignal() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setSignal(const uci::type::EOB_SignalType& accessor) override;

  /** Returns whether this optional field Signalis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSignal() const noexcept override;

  /** Enables the optional field such that getSignal will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_SignalType& enableSignal(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearSignal() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityConfidenceType& getIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::IdentityConfidenceType& getIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityConfidenceType& getIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setIdentity(const uci::type::IdentityConfidenceType& accessor) override;

  /** Returns whether this optional field Identityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIdentity() const noexcept override;

  /** Enables the optional field such that getIdentity will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::IdentityConfidenceType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearIdentity() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NotationType& getReportedNotation2_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NotationType& getReportedNotation2() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NotationType& getReportedNotation2() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setReportedNotation2(const uci::type::NotationType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setReportedNotation2(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setReportedNotation2(const char* value) override;

  /** Returns whether this optional field reportedNotation2_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReportedNotation2() const noexcept override;

  /** Enables the optional field such that getReportedNotation2 will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NotationType& enableReportedNotation2(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearReportedNotation2() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NotationType& getReportedNotation1_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::NotationType& getReportedNotation1() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::NotationType& getReportedNotation1() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setReportedNotation1(const uci::type::NotationType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setReportedNotation1(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setReportedNotation1(const char* value) override;

  /** Returns whether this optional field reportedNotation1_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReportedNotation1() const noexcept override;

  /** Enables the optional field such that getReportedNotation1 will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::NotationType& enableReportedNotation1(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearReportedNotation1() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FixedPositionType& getPosition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FixedPositionType& getPosition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FixedPositionType& getPosition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setPosition(const uci::type::FixedPositionType& accessor) override;

  /** Returns whether this optional field Positionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPosition() const noexcept override;

  /** Enables the optional field such that getPosition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FixedPositionType& enablePosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearPosition() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsFixedType& getPlatformKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::KinematicsFixedType& getPlatformKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsFixedType& getPlatformKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& setPlatformKinematics(const uci::type::KinematicsFixedType& accessor) override;

  /** Returns whether this optional field PlatformKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlatformKinematics() const noexcept override;

  /** Enables the optional field such that getPlatformKinematics will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsFixedType& enablePlatformKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EOB_CorrelationRecordType& clearPlatformKinematics() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EOB_CorrelationRecordType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_CorrelationRecordType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EOB_CorrelationRecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SecurityInformationType> securityInformation_Accessor;
  std::unique_ptr<EOB_CorrelationRecordID_Type> eOB_CorrelationRecordID_Accessor;
  std::unique_ptr<EOB_CorrelationTypeEnum> correlationType_Accessor;
  DateTimeTypeValue correlationTimestamp_Accessor{0};
  std::unique_ptr<EOB_CorrelatedToType> correlatedTo_Accessor;
  std::unique_ptr<OB_CorrelationInputType> correlationInput_Accessor;
  std::unique_ptr<EOB_SignalType> signal_Accessor;
  std::unique_ptr<IdentityConfidenceType> identity_Accessor;
  std::unique_ptr<NotationType> reportedNotation2_Accessor;
  std::unique_ptr<NotationType> reportedNotation1_Accessor;
  std::unique_ptr<FixedPositionType> position_Accessor;
  std::unique_ptr<KinematicsFixedType> platformKinematics_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_EOB_CORRELATIONRECORDTYPE_H
