/** @file RequirementExecutionStatusDetailsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_REQUIREMENTEXECUTIONSTATUSDETAILSTYPE_H
#define ASB_UCI_TYPE_REQUIREMENTEXECUTIONSTATUSDETAILSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/PercentType.h"
#include "asb_uci/type/RequirementExecutionStateEnum.h"
#include "uci/type/RequirementExecutionStatusDetailsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CannotComplyType;
class MetricsType;
class RequirementStatusTraceabilityType;
class RequirementTimingType;
class SystemID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class RequirementExecutionStatusDetailsType : public virtual uci::type::RequirementExecutionStatusDetailsType {
public:
  /** Indicates actual timing status for the Requirement. Allows for defining for each timing type (RequirementTimingEnum).
    * [Occurrences: Minimum: 0; Maximum: 4]
    */
  using ActualTiming = asb_uci::base::BoundedList<uci::type::RequirementTimingType, uci::type::accessorType::requirementTimingType, asb_uci::type::RequirementTimingType>;

  /** The constructor */
  RequirementExecutionStatusDetailsType();

  /** The copy constructor
    *
    * @param rhs The RequirementExecutionStatusDetailsType to copy from
    */
  RequirementExecutionStatusDetailsType(const RequirementExecutionStatusDetailsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The RequirementExecutionStatusDetailsType to move from
    */
  RequirementExecutionStatusDetailsType(RequirementExecutionStatusDetailsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The RequirementExecutionStatusDetailsType to copy from
    * @return The RequirementExecutionStatusDetailsType that was assigned
    */
  RequirementExecutionStatusDetailsType& operator=(const RequirementExecutionStatusDetailsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The RequirementExecutionStatusDetailsType to move from
    * @return The RequirementExecutionStatusDetailsType that was assigned
    */
  RequirementExecutionStatusDetailsType& operator=(RequirementExecutionStatusDetailsType&& rhs) = delete;

  /** The destructor */
  virtual ~RequirementExecutionStatusDetailsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RequirementExecutionStatusDetailsType whose contents are to be used to set this
    *      uci::type::RequirementExecutionStatusDetailsType's contents.
    */
  void copy(const uci::type::RequirementExecutionStatusDetailsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RequirementExecutionStatusDetailsType whose contents are to be used to set this
    *      uci::type::RequirementExecutionStatusDetailsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::RequirementExecutionStatusDetailsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ExecutingSystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ExecutingSystemID field.
    */
  const uci::type::SystemID_Type& getExecutingSystemID() const override;

  /** Returns the accessor to the ExecutingSystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the ExecutingSystemID field.
    */
  uci::type::SystemID_Type& getExecutingSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setExecutingSystemID(const uci::type::SystemID_Type& accessor) override;

  /** Returns the contents of the message's ExecutionState field
    *
    * @return The contents of the ExecutionState field
    */
  const uci::type::RequirementExecutionStateEnum& getExecutionState() const override;

  /** Returns the contents of the message's ExecutionState field
    *
    * @return The contents of the ExecutionState field
    */
  uci::type::RequirementExecutionStateEnum& getExecutionState() override;

  /** Sets the contents of the message's ExecutionState field
    *
    * @param accessor The accessor to use to set the ExecutionState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setExecutionState(const uci::type::RequirementExecutionStateEnum& accessor) override;

  /** Sets the contents of the message's ExecutionState field
    *
    * @param value The new value to set the ExecutionState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setExecutionState(uci::type::RequirementExecutionStateEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& getExecutionStateReason_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CannotComplyType& getExecutionStateReason() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& getExecutionStateReason() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setExecutionStateReason(const uci::type::CannotComplyType& accessor) override;

  /** Returns whether this optional field ExecutionStateReasonis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasExecutionStateReason() const noexcept override;

  /** Enables the optional field such that getExecutionStateReason will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& enableExecutionStateReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& clearExecutionStateReason() noexcept override;

  /** Returns the accessor to the ActualTiming field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActualTiming field.
    */
  const uci::type::RequirementExecutionStatusDetailsType::ActualTiming& getActualTiming() const override;

  /** Returns the accessor to the ActualTiming field contained in this message fragment
    *
    * @return The reference to the accessor to the ActualTiming field.
    */
  uci::type::RequirementExecutionStatusDetailsType::ActualTiming& getActualTiming() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setActualTiming(const uci::type::RequirementExecutionStatusDetailsType::ActualTiming& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getPercentCompleted() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setPercentCompleted(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field PercentCompletedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPercentCompleted() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& clearPercentCompleted() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementStatusTraceabilityType& getTraceability_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RequirementStatusTraceabilityType& getTraceability() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementStatusTraceabilityType& getTraceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setTraceability(const uci::type::RequirementStatusTraceabilityType& accessor) override;

  /** Returns whether this optional field Traceabilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTraceability() const noexcept override;

  /** Enables the optional field such that getTraceability will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RequirementStatusTraceabilityType& enableTraceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& clearTraceability() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MetricsType& getMetrics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MetricsType& getMetrics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MetricsType& getMetrics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& setMetrics(const uci::type::MetricsType& accessor) override;

  /** Returns whether this optional field Metricsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMetrics() const noexcept override;

  /** Enables the optional field such that getMetrics will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MetricsType& enableMetrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RequirementExecutionStatusDetailsType& clearMetrics() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<RequirementExecutionStatusDetailsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementExecutionStatusDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::RequirementExecutionStatusDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SystemID_Type> executingSystemID_Accessor;
  std::unique_ptr<RequirementExecutionStateEnum> executionState_Accessor;
  std::unique_ptr<CannotComplyType> executionStateReason_Accessor;
  std::unique_ptr<ActualTiming> actualTiming_Accessor;
  boost::optional<PercentTypeValue> percentCompleted_Accessor;
  std::unique_ptr<RequirementStatusTraceabilityType> traceability_Accessor;
  std::unique_ptr<MetricsType> metrics_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_REQUIREMENTEXECUTIONSTATUSDETAILSTYPE_H
