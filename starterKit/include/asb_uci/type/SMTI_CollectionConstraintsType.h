/** @file SMTI_CollectionConstraintsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSTYPE_H
#define ASB_UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/CollectionConstraintsType.h"
#include "asb_uci/type/DecibelType.h"
#include "asb_uci/type/PercentType.h"
#include "uci/type/SMTI_CollectionConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EmconConstraintType;
class FalseAlarmType;
class PositionLocationUncertaintyType;
class SMTI_CollectionConstraintsQualityType;
class SpeedRangeType;

/** Indicates a set of bounding requirements for the particular collection associated with this command. The subsystem
  * should attempt to satisfy all specified constraints.
  */
class SMTI_CollectionConstraintsType : public virtual uci::type::SMTI_CollectionConstraintsType, public virtual CollectionConstraintsType {
public:
  /** The constructor */
  SMTI_CollectionConstraintsType();

  /** The copy constructor
    *
    * @param rhs The SMTI_CollectionConstraintsType to copy from
    */
  SMTI_CollectionConstraintsType(const SMTI_CollectionConstraintsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SMTI_CollectionConstraintsType to move from
    */
  SMTI_CollectionConstraintsType(SMTI_CollectionConstraintsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SMTI_CollectionConstraintsType to copy from
    * @return The SMTI_CollectionConstraintsType that was assigned
    */
  SMTI_CollectionConstraintsType& operator=(const SMTI_CollectionConstraintsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SMTI_CollectionConstraintsType to move from
    * @return The SMTI_CollectionConstraintsType that was assigned
    */
  SMTI_CollectionConstraintsType& operator=(SMTI_CollectionConstraintsType&& rhs) = delete;

  /** The destructor */
  ~SMTI_CollectionConstraintsType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SMTI_CollectionConstraintsType whose contents are to be used to set this
    *      uci::type::SMTI_CollectionConstraintsType's contents.
    */
  void copy(const uci::type::SMTI_CollectionConstraintsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SMTI_CollectionConstraintsType whose contents are to be used to set this
    *      uci::type::SMTI_CollectionConstraintsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SMTI_CollectionConstraintsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SMTI_CollectionConstraintsQualityType& getQuality_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SMTI_CollectionConstraintsQualityType& getQuality() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SMTI_CollectionConstraintsQualityType& getQuality() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& setQuality(const uci::type::SMTI_CollectionConstraintsQualityType& accessor) override;

  /** Returns whether this optional field Qualityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasQuality() const noexcept override;

  /** Enables the optional field such that getQuality will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SMTI_CollectionConstraintsQualityType& enableQuality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& clearQuality() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpeedRangeType& getTargetSpeed_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SpeedRangeType& getTargetSpeed() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpeedRangeType& getTargetSpeed() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& setTargetSpeed(const uci::type::SpeedRangeType& accessor) override;

  /** Returns whether this optional field TargetSpeedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTargetSpeed() const noexcept override;

  /** Enables the optional field such that getTargetSpeed will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SpeedRangeType& enableTargetSpeed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& clearTargetSpeed() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getTargetRCS() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& setTargetRCS(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field TargetRCSis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTargetRCS() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& clearTargetRCS() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FalseAlarmType& getFalseAlarm_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FalseAlarmType& getFalseAlarm() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FalseAlarmType& getFalseAlarm() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& setFalseAlarm(const uci::type::FalseAlarmType& accessor) override;

  /** Returns whether this optional field FalseAlarmis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFalseAlarm() const noexcept override;

  /** Enables the optional field such that getFalseAlarm will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FalseAlarmType& enableFalseAlarm(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& clearFalseAlarm() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getProbabilityOfDetection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& setProbabilityOfDetection(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field ProbabilityOfDetectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasProbabilityOfDetection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& clearProbabilityOfDetection() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmconConstraintType& getEmcon_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EmconConstraintType& getEmcon() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmconConstraintType& getEmcon() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& setEmcon(const uci::type::EmconConstraintType& accessor) override;

  /** Returns whether this optional field Emconis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEmcon() const noexcept override;

  /** Enables the optional field such that getEmcon will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EmconConstraintType& enableEmcon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& clearEmcon() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& setOwnshipLocationConstraint(const uci::type::PositionLocationUncertaintyType& accessor) override;

  /** Returns whether this optional field OwnshipLocationConstraintis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOwnshipLocationConstraint() const noexcept override;

  /** Enables the optional field such that getOwnshipLocationConstraint will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PositionLocationUncertaintyType& enableOwnshipLocationConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CollectionConstraintsType& clearOwnshipLocationConstraint() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SMTI_CollectionConstraintsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_CollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SMTI_CollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SMTI_CollectionConstraintsQualityType> quality_Accessor;
  std::unique_ptr<SpeedRangeType> targetSpeed_Accessor;
  boost::optional<DecibelTypeValue> targetRCS_Accessor;
  std::unique_ptr<FalseAlarmType> falseAlarm_Accessor;
  boost::optional<PercentTypeValue> probabilityOfDetection_Accessor;
  std::unique_ptr<EmconConstraintType> emcon_Accessor;
  std::unique_ptr<PositionLocationUncertaintyType> ownshipLocationConstraint_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSTYPE_H
