/** @file ReadinessItemStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_READINESSITEMSTATUSTYPE_H
#define ASB_UCI_TYPE_READINESSITEMSTATUSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/OperationalStatusEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReadinessItemStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityBaseType;
class CapabilityStatusBaseType;
class ControlStatusMDT;
class PackageStatusMDT;
class PlanningFunctionMDT;
class PlanningFunctionStatusMDT;
class StoreManagementStatusMDT;
class SubsystemConfigurationMDT;
class SubsystemStatusMDT;
class SystemStatusMDT;

/** Indicates the readiness of various "items". Item is an intentionally vague term to include any UCI concept that is
  * first-person or first-person surrogate reported that describes operational availability.
  */
class ReadinessItemStatusType : public virtual uci::type::ReadinessItemStatusType {
public:
  /** Indicates an instance of a Subsystem Status of the vehicle reporting its readiness. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SubsystemStatus = asb_uci::base::BoundedList<uci::type::SubsystemStatusMDT, uci::type::accessorType::subsystemStatusMDT, asb_uci::type::SubsystemStatusMDT>;

  /** Indicates an instance of a Subsystem Configuration of the vehicle reporting its readiness. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SubsystemConfiguration = asb_uci::base::BoundedList<uci::type::SubsystemConfigurationMDT, uci::type::accessorType::subsystemConfigurationMDT, asb_uci::type::SubsystemConfigurationMDT>;

  /** Indicates an instance of a Capability. The CapabilityBaseType used here is abstract and must be replaced by a
    * concrete child of the type such as EA_CapabilityMDT. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Capability = asb_uci::base::BoundedList<uci::type::CapabilityBaseType, uci::type::accessorType::capabilityBaseType, asb_uci::type::CapabilityBaseType>;

  /** Indicates readiness of a Capability. The CapabilityStatusBaseType used here is abstract and must be replaced by a
    * concrete child of the type such as EA_CapabilityStatusMDT. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CapabilityStatus = asb_uci::base::BoundedList<uci::type::CapabilityStatusBaseType, uci::type::accessorType::capabilityStatusBaseType, asb_uci::type::CapabilityStatusBaseType>;

  /** Indicates an instance of a Store Management Status of the vehicle reporting its readiness. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using StoreManagementStatus = asb_uci::base::BoundedList<uci::type::StoreManagementStatusMDT, uci::type::accessorType::storeManagementStatusMDT, asb_uci::type::StoreManagementStatusMDT>;

  /** Indicates an instance of a Control Status of the vehicle reporting its readiness. This should be the expected Control
    * Status of the vehicle and its capabilities during the reported time frame. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using ControlStatus = asb_uci::base::BoundedList<uci::type::ControlStatusMDT, uci::type::accessorType::controlStatusMDT, asb_uci::type::ControlStatusMDT>;

  /** Indicates an instance of a Package Status. Readiness of a Package should be reported along with the Readiness of the
    * lead System in the Package. This element is unbounded because a single lead System could be the leader of multiple
    * Packages each of which has different partner Systems. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using PackageStatus = asb_uci::base::BoundedList<uci::type::PackageStatusMDT, uci::type::accessorType::packageStatusMDT, asb_uci::type::PackageStatusMDT>;

  /** The constructor */
  ReadinessItemStatusType();

  /** The copy constructor
    *
    * @param rhs The ReadinessItemStatusType to copy from
    */
  ReadinessItemStatusType(const ReadinessItemStatusType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ReadinessItemStatusType to move from
    */
  ReadinessItemStatusType(ReadinessItemStatusType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ReadinessItemStatusType to copy from
    * @return The ReadinessItemStatusType that was assigned
    */
  ReadinessItemStatusType& operator=(const ReadinessItemStatusType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ReadinessItemStatusType to move from
    * @return The ReadinessItemStatusType that was assigned
    */
  ReadinessItemStatusType& operator=(ReadinessItemStatusType&& rhs) = delete;

  /** The destructor */
  virtual ~ReadinessItemStatusType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ReadinessItemStatusType whose contents are to be used to set this
    *      uci::type::ReadinessItemStatusType's contents.
    */
  void copy(const uci::type::ReadinessItemStatusType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ReadinessItemStatusType whose contents are to be used to set this
    *      uci::type::ReadinessItemStatusType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ReadinessItemStatusType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's OperationalStatus field
    *
    * @return The contents of the OperationalStatus field
    */
  const uci::type::OperationalStatusEnum& getOperationalStatus() const override;

  /** Returns the contents of the message's OperationalStatus field
    *
    * @return The contents of the OperationalStatus field
    */
  uci::type::OperationalStatusEnum& getOperationalStatus() override;

  /** Sets the contents of the message's OperationalStatus field
    *
    * @param accessor The accessor to use to set the OperationalStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setOperationalStatus(const uci::type::OperationalStatusEnum& accessor) override;

  /** Sets the contents of the message's OperationalStatus field
    *
    * @param value The new value to set the OperationalStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setOperationalStatus(uci::type::OperationalStatusEnum::EnumerationItem value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getReason_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString256Type& getReason() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getReason() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setReason(const uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setReason(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setReason(const char* value) override;

  /** Returns whether this optional field reason_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReason() const noexcept override;

  /** Enables the optional field such that getReason will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& enableReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& clearReason() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemStatusMDT& getSystemStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SystemStatusMDT& getSystemStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemStatusMDT& getSystemStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setSystemStatus(const uci::type::SystemStatusMDT& accessor) override;

  /** Returns whether this optional field SystemStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSystemStatus() const noexcept override;

  /** Enables the optional field such that getSystemStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SystemStatusMDT& enableSystemStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& clearSystemStatus() noexcept override;

  /** Returns the accessor to the SubsystemStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubsystemStatus field.
    */
  const uci::type::ReadinessItemStatusType::SubsystemStatus& getSubsystemStatus() const override;

  /** Returns the accessor to the SubsystemStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the SubsystemStatus field.
    */
  uci::type::ReadinessItemStatusType::SubsystemStatus& getSubsystemStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setSubsystemStatus(const uci::type::ReadinessItemStatusType::SubsystemStatus& accessor) override;

  /** Returns the accessor to the SubsystemConfiguration field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubsystemConfiguration field.
    */
  const uci::type::ReadinessItemStatusType::SubsystemConfiguration& getSubsystemConfiguration() const override;

  /** Returns the accessor to the SubsystemConfiguration field contained in this message fragment
    *
    * @return The reference to the accessor to the SubsystemConfiguration field.
    */
  uci::type::ReadinessItemStatusType::SubsystemConfiguration& getSubsystemConfiguration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setSubsystemConfiguration(const uci::type::ReadinessItemStatusType::SubsystemConfiguration& accessor) override;

  /** Returns the accessor to the Capability field contained in this message fragment
    *
    * @return The const reference to the accessor to the Capability field.
    */
  const uci::type::ReadinessItemStatusType::Capability& getCapability() const override;

  /** Returns the accessor to the Capability field contained in this message fragment
    *
    * @return The reference to the accessor to the Capability field.
    */
  uci::type::ReadinessItemStatusType::Capability& getCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setCapability(const uci::type::ReadinessItemStatusType::Capability& accessor) override;

  /** Returns the accessor to the CapabilityStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityStatus field.
    */
  const uci::type::ReadinessItemStatusType::CapabilityStatus& getCapabilityStatus() const override;

  /** Returns the accessor to the CapabilityStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityStatus field.
    */
  uci::type::ReadinessItemStatusType::CapabilityStatus& getCapabilityStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setCapabilityStatus(const uci::type::ReadinessItemStatusType::CapabilityStatus& accessor) override;

  /** Returns the accessor to the StoreManagementStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the StoreManagementStatus field.
    */
  const uci::type::ReadinessItemStatusType::StoreManagementStatus& getStoreManagementStatus() const override;

  /** Returns the accessor to the StoreManagementStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the StoreManagementStatus field.
    */
  uci::type::ReadinessItemStatusType::StoreManagementStatus& getStoreManagementStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setStoreManagementStatus(const uci::type::ReadinessItemStatusType::StoreManagementStatus& accessor) override;

  /** Returns the accessor to the ControlStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the ControlStatus field.
    */
  const uci::type::ReadinessItemStatusType::ControlStatus& getControlStatus() const override;

  /** Returns the accessor to the ControlStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the ControlStatus field.
    */
  uci::type::ReadinessItemStatusType::ControlStatus& getControlStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setControlStatus(const uci::type::ReadinessItemStatusType::ControlStatus& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningFunctionMDT& getPlanningFunction_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PlanningFunctionMDT& getPlanningFunction() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningFunctionMDT& getPlanningFunction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setPlanningFunction(const uci::type::PlanningFunctionMDT& accessor) override;

  /** Returns whether this optional field PlanningFunctionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlanningFunction() const noexcept override;

  /** Enables the optional field such that getPlanningFunction will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningFunctionMDT& enablePlanningFunction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& clearPlanningFunction() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningFunctionStatusMDT& getPlanningFunctionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PlanningFunctionStatusMDT& getPlanningFunctionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningFunctionStatusMDT& getPlanningFunctionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setPlanningFunctionStatus(const uci::type::PlanningFunctionStatusMDT& accessor) override;

  /** Returns whether this optional field PlanningFunctionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlanningFunctionStatus() const noexcept override;

  /** Enables the optional field such that getPlanningFunctionStatus will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlanningFunctionStatusMDT& enablePlanningFunctionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& clearPlanningFunctionStatus() noexcept override;

  /** Returns the accessor to the PackageStatus field contained in this message fragment
    *
    * @return The const reference to the accessor to the PackageStatus field.
    */
  const uci::type::ReadinessItemStatusType::PackageStatus& getPackageStatus() const override;

  /** Returns the accessor to the PackageStatus field contained in this message fragment
    *
    * @return The reference to the accessor to the PackageStatus field.
    */
  uci::type::ReadinessItemStatusType::PackageStatus& getPackageStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ReadinessItemStatusType& setPackageStatus(const uci::type::ReadinessItemStatusType::PackageStatus& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ReadinessItemStatusType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ReadinessItemStatusType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ReadinessItemStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<OperationalStatusEnum> operationalStatus_Accessor;
  std::unique_ptr<VisibleString256Type> reason_Accessor;
  std::unique_ptr<SystemStatusMDT> systemStatus_Accessor;
  std::unique_ptr<SubsystemStatus> subsystemStatus_Accessor;
  std::unique_ptr<SubsystemConfiguration> subsystemConfiguration_Accessor;
  std::unique_ptr<Capability> capability_Accessor;
  std::unique_ptr<CapabilityStatus> capabilityStatus_Accessor;
  std::unique_ptr<StoreManagementStatus> storeManagementStatus_Accessor;
  std::unique_ptr<ControlStatus> controlStatus_Accessor;
  std::unique_ptr<PlanningFunctionMDT> planningFunction_Accessor;
  std::unique_ptr<PlanningFunctionStatusMDT> planningFunctionStatus_Accessor;
  std::unique_ptr<PackageStatus> packageStatus_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_READINESSITEMSTATUSTYPE_H
