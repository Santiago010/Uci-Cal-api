/** @file PlansReferenceBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANSREFERENCEBASETYPE_H
#define ASB_UCI_TYPE_PLANSREFERENCEBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlansReferenceBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActionPlanID_Type;
class ActivityPlanID_Type;
class EffectPlanID_Type;
class OrbitActivityPlanID_Type;
class OrbitPlanID_Type;
class ResponsePlanID_Type;
class RouteActivityPlanID_Type;
class RoutePlanID_Type;
class TaskPlanID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class PlansReferenceBaseType : public virtual uci::type::PlansReferenceBaseType {
public:
  /** Indicates a reference to a TaskPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using TaskPlanID = asb_uci::base::BoundedList<uci::type::TaskPlanID_Type, uci::type::accessorType::taskPlanID_Type, asb_uci::type::TaskPlanID_Type>;

  /** Indicates a reference to an OrbitPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using OrbitPlanID = asb_uci::base::BoundedList<uci::type::OrbitPlanID_Type, uci::type::accessorType::orbitPlanID_Type, asb_uci::type::OrbitPlanID_Type>;

  /** Indicates a reference to an OrbitActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using OrbitActivityPlanID = asb_uci::base::BoundedList<uci::type::OrbitActivityPlanID_Type, uci::type::accessorType::orbitActivityPlanID_Type, asb_uci::type::OrbitActivityPlanID_Type>;

  /** Indicates a reference to a RoutePlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using RoutePlanID = asb_uci::base::BoundedList<uci::type::RoutePlanID_Type, uci::type::accessorType::routePlanID_Type, asb_uci::type::RoutePlanID_Type>;

  /** Indicates a reference to a RouteActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using RouteActivityPlanID = asb_uci::base::BoundedList<uci::type::RouteActivityPlanID_Type, uci::type::accessorType::routeActivityPlanID_Type, asb_uci::type::RouteActivityPlanID_Type>;

  /** Indicates a reference to an ActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ActivityPlanID = asb_uci::base::BoundedList<uci::type::ActivityPlanID_Type, uci::type::accessorType::activityPlanID_Type, asb_uci::type::ActivityPlanID_Type>;

  /** Indicates a reference to an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using EffectPlanID = asb_uci::base::BoundedList<uci::type::EffectPlanID_Type, uci::type::accessorType::effectPlanID_Type, asb_uci::type::EffectPlanID_Type>;

  /** Indicates a reference to an ActionPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ActionPlanID = asb_uci::base::BoundedList<uci::type::ActionPlanID_Type, uci::type::accessorType::actionPlanID_Type, asb_uci::type::ActionPlanID_Type>;

  /** Indicates a reference to an ResponsePlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ResponsePlanID = asb_uci::base::BoundedList<uci::type::ResponsePlanID_Type, uci::type::accessorType::responsePlanID_Type, asb_uci::type::ResponsePlanID_Type>;

  /** The constructor */
  PlansReferenceBaseType();

  /** The copy constructor
    *
    * @param rhs The PlansReferenceBaseType to copy from
    */
  PlansReferenceBaseType(const PlansReferenceBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlansReferenceBaseType to move from
    */
  PlansReferenceBaseType(PlansReferenceBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlansReferenceBaseType to copy from
    * @return The PlansReferenceBaseType that was assigned
    */
  PlansReferenceBaseType& operator=(const PlansReferenceBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlansReferenceBaseType to move from
    * @return The PlansReferenceBaseType that was assigned
    */
  PlansReferenceBaseType& operator=(PlansReferenceBaseType&& rhs) = delete;

  /** The destructor */
  virtual ~PlansReferenceBaseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlansReferenceBaseType whose contents are to be used to set this
    *      uci::type::PlansReferenceBaseType's contents.
    */
  void copy(const uci::type::PlansReferenceBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlansReferenceBaseType whose contents are to be used to set this
    *      uci::type::PlansReferenceBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlansReferenceBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the TaskPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the TaskPlanID field.
    */
  const uci::type::PlansReferenceBaseType::TaskPlanID& getTaskPlanID() const override;

  /** Returns the accessor to the TaskPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskPlanID field.
    */
  uci::type::PlansReferenceBaseType::TaskPlanID& getTaskPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setTaskPlanID(const uci::type::PlansReferenceBaseType::TaskPlanID& accessor) override;

  /** Returns the accessor to the OrbitPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitPlanID field.
    */
  const uci::type::PlansReferenceBaseType::OrbitPlanID& getOrbitPlanID() const override;

  /** Returns the accessor to the OrbitPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitPlanID field.
    */
  uci::type::PlansReferenceBaseType::OrbitPlanID& getOrbitPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setOrbitPlanID(const uci::type::PlansReferenceBaseType::OrbitPlanID& accessor) override;

  /** Returns the accessor to the OrbitActivityPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitActivityPlanID field.
    */
  const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& getOrbitActivityPlanID() const override;

  /** Returns the accessor to the OrbitActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitActivityPlanID field.
    */
  uci::type::PlansReferenceBaseType::OrbitActivityPlanID& getOrbitActivityPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setOrbitActivityPlanID(const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& accessor) override;

  /** Returns the accessor to the RoutePlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RoutePlanID field.
    */
  const uci::type::PlansReferenceBaseType::RoutePlanID& getRoutePlanID() const override;

  /** Returns the accessor to the RoutePlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the RoutePlanID field.
    */
  uci::type::PlansReferenceBaseType::RoutePlanID& getRoutePlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setRoutePlanID(const uci::type::PlansReferenceBaseType::RoutePlanID& accessor) override;

  /** Returns the accessor to the RouteActivityPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RouteActivityPlanID field.
    */
  const uci::type::PlansReferenceBaseType::RouteActivityPlanID& getRouteActivityPlanID() const override;

  /** Returns the accessor to the RouteActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the RouteActivityPlanID field.
    */
  uci::type::PlansReferenceBaseType::RouteActivityPlanID& getRouteActivityPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setRouteActivityPlanID(const uci::type::PlansReferenceBaseType::RouteActivityPlanID& accessor) override;

  /** Returns the accessor to the ActivityPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityPlanID field.
    */
  const uci::type::PlansReferenceBaseType::ActivityPlanID& getActivityPlanID() const override;

  /** Returns the accessor to the ActivityPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityPlanID field.
    */
  uci::type::PlansReferenceBaseType::ActivityPlanID& getActivityPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setActivityPlanID(const uci::type::PlansReferenceBaseType::ActivityPlanID& accessor) override;

  /** Returns the accessor to the EffectPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EffectPlanID field.
    */
  const uci::type::PlansReferenceBaseType::EffectPlanID& getEffectPlanID() const override;

  /** Returns the accessor to the EffectPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the EffectPlanID field.
    */
  uci::type::PlansReferenceBaseType::EffectPlanID& getEffectPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setEffectPlanID(const uci::type::PlansReferenceBaseType::EffectPlanID& accessor) override;

  /** Returns the accessor to the ActionPlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActionPlanID field.
    */
  const uci::type::PlansReferenceBaseType::ActionPlanID& getActionPlanID() const override;

  /** Returns the accessor to the ActionPlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActionPlanID field.
    */
  uci::type::PlansReferenceBaseType::ActionPlanID& getActionPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setActionPlanID(const uci::type::PlansReferenceBaseType::ActionPlanID& accessor) override;

  /** Returns the accessor to the ResponsePlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ResponsePlanID field.
    */
  const uci::type::PlansReferenceBaseType::ResponsePlanID& getResponsePlanID() const override;

  /** Returns the accessor to the ResponsePlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the ResponsePlanID field.
    */
  uci::type::PlansReferenceBaseType::ResponsePlanID& getResponsePlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlansReferenceBaseType& setResponsePlanID(const uci::type::PlansReferenceBaseType::ResponsePlanID& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlansReferenceBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlansReferenceBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlansReferenceBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<TaskPlanID> taskPlanID_Accessor;
  std::unique_ptr<OrbitPlanID> orbitPlanID_Accessor;
  std::unique_ptr<OrbitActivityPlanID> orbitActivityPlanID_Accessor;
  std::unique_ptr<RoutePlanID> routePlanID_Accessor;
  std::unique_ptr<RouteActivityPlanID> routeActivityPlanID_Accessor;
  std::unique_ptr<ActivityPlanID> activityPlanID_Accessor;
  std::unique_ptr<EffectPlanID> effectPlanID_Accessor;
  std::unique_ptr<ActionPlanID> actionPlanID_Accessor;
  std::unique_ptr<ResponsePlanID> responsePlanID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANSREFERENCEBASETYPE_H
