/** @file RoutePlanValidationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ROUTEPLANVALIDATIONMDT_H
#define ASB_UCI_TYPE_ROUTEPLANVALIDATIONMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/PlanValidationStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanValidationMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActionPlanID_Type;
class AnalysisRouteID_Type;
class CompletionStatusType;
class IncompleteProcessingType;
class LAR_MDT;
class RoutePlanID_Type;
class RoutePlanValidationID_Type;
class RouteValidationInvalidPathType;
class ValidatorType;

/** See annotations in child elements and messages/elements that use this type for details. */
class RoutePlanValidationMDT : public virtual uci::type::RoutePlanValidationMDT {
public:
  /** Indicates items associated with command processing that failed to complete. For example if a particular required
    * Capability wasn't available, it could be referenced here. This element/type is highly flexible. It can reference
    * almost any message/concept in UCI as a planning issue. The wide range of messages/concepts it can reference makes it
    * 1) difficult to use as a basis for software/services to resolve the issue but 2) an excellent general method for
    * processing algorithms to convey issues to operators. This element shouldn't be used to report processing
    * issues/results that are more directly indicated by other processing status elements. For example, for planning
    * processing, other elements focus specifically on per-Requirement allocation results therefore this element shouldn't
    * be used for per-Requirement allocation results. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using IncompleteItem = asb_uci::base::BoundedList<uci::type::IncompleteProcessingType, uci::type::accessorType::incompleteProcessingType, asb_uci::type::IncompleteProcessingType>;

  /** If RoutePlan is invalid, indicates which paths have invalid segments in it. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using InvalidPath = asb_uci::base::BoundedList<uci::type::RouteValidationInvalidPathType, uci::type::accessorType::routeValidationInvalidPathType, asb_uci::type::RouteValidationInvalidPathType>;

  /** The constructor */
  RoutePlanValidationMDT();

  /** The copy constructor
    *
    * @param rhs The RoutePlanValidationMDT to copy from
    */
  RoutePlanValidationMDT(const RoutePlanValidationMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The RoutePlanValidationMDT to move from
    */
  RoutePlanValidationMDT(RoutePlanValidationMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The RoutePlanValidationMDT to copy from
    * @return The RoutePlanValidationMDT that was assigned
    */
  RoutePlanValidationMDT& operator=(const RoutePlanValidationMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The RoutePlanValidationMDT to move from
    * @return The RoutePlanValidationMDT that was assigned
    */
  RoutePlanValidationMDT& operator=(RoutePlanValidationMDT&& rhs) = delete;

  /** The destructor */
  virtual ~RoutePlanValidationMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RoutePlanValidationMDT whose contents are to be used to set this
    *      uci::type::RoutePlanValidationMDT's contents.
    */
  void copy(const uci::type::RoutePlanValidationMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RoutePlanValidationMDT whose contents are to be used to set this
    *      uci::type::RoutePlanValidationMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::RoutePlanValidationMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the RoutePlanValidationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RoutePlanValidationID field.
    */
  const uci::type::RoutePlanValidationID_Type& getRoutePlanValidationID() const override;

  /** Returns the accessor to the RoutePlanValidationID field contained in this message fragment
    *
    * @return The reference to the accessor to the RoutePlanValidationID field.
    */
  uci::type::RoutePlanValidationID_Type& getRoutePlanValidationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setRoutePlanValidationID(const uci::type::RoutePlanValidationID_Type& accessor) override;

  /** Returns the accessor to the PlanID field contained in this message fragment
    *
    * @return The const reference to the accessor to the PlanID field.
    */
  const uci::type::ActionPlanID_Type& getPlanID() const override;

  /** Returns the accessor to the PlanID field contained in this message fragment
    *
    * @return The reference to the accessor to the PlanID field.
    */
  uci::type::ActionPlanID_Type& getPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setPlanID(const uci::type::ActionPlanID_Type& accessor) override;

  /** Returns the accessor to the Validator field contained in this message fragment
    *
    * @return The const reference to the accessor to the Validator field.
    */
  const uci::type::ValidatorType& getValidator() const override;

  /** Returns the accessor to the Validator field contained in this message fragment
    *
    * @return The reference to the accessor to the Validator field.
    */
  uci::type::ValidatorType& getValidator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setValidator(const uci::type::ValidatorType& accessor) override;

  /** Returns the contents of the message's ValidationState field
    *
    * @return The contents of the ValidationState field
    */
  const uci::type::PlanValidationStateEnum& getValidationState() const override;

  /** Returns the contents of the message's ValidationState field
    *
    * @return The contents of the ValidationState field
    */
  uci::type::PlanValidationStateEnum& getValidationState() override;

  /** Sets the contents of the message's ValidationState field
    *
    * @param accessor The accessor to use to set the ValidationState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setValidationState(const uci::type::PlanValidationStateEnum& accessor) override;

  /** Sets the contents of the message's ValidationState field
    *
    * @param value The new value to set the ValidationState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setValidationState(uci::type::PlanValidationStateEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CompletionStatusType& getCompletionStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CompletionStatusType& getCompletionStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CompletionStatusType& getCompletionStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setCompletionStatus(const uci::type::CompletionStatusType& accessor) override;

  /** Returns whether this optional field CompletionStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCompletionStatus() const noexcept override;

  /** Enables the optional field such that getCompletionStatus will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CompletionStatusType& enableCompletionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& clearCompletionStatus() noexcept override;

  /** Returns the accessor to the IncompleteItem field contained in this message fragment
    *
    * @return The const reference to the accessor to the IncompleteItem field.
    */
  const uci::type::RoutePlanValidationMDT::IncompleteItem& getIncompleteItem() const override;

  /** Returns the accessor to the IncompleteItem field contained in this message fragment
    *
    * @return The reference to the accessor to the IncompleteItem field.
    */
  uci::type::RoutePlanValidationMDT::IncompleteItem& getIncompleteItem() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setIncompleteItem(const uci::type::RoutePlanValidationMDT::IncompleteItem& accessor) override;

  /** Returns the accessor to the InvalidPath field contained in this message fragment
    *
    * @return The const reference to the accessor to the InvalidPath field.
    */
  const uci::type::RoutePlanValidationMDT::InvalidPath& getInvalidPath() const override;

  /** Returns the accessor to the InvalidPath field contained in this message fragment
    *
    * @return The reference to the accessor to the InvalidPath field.
    */
  uci::type::RoutePlanValidationMDT::InvalidPath& getInvalidPath() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setInvalidPath(const uci::type::RoutePlanValidationMDT::InvalidPath& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LAR_MDT& getValidLAR_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LAR_MDT& getValidLAR() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LAR_MDT& getValidLAR() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setValidLAR(const uci::type::LAR_MDT& accessor) override;

  /** Returns whether this optional field ValidLARis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasValidLAR() const noexcept override;

  /** Enables the optional field such that getValidLAR will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LAR_MDT& enableValidLAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& clearValidLAR() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanID_Type& getModifiedPlanID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RoutePlanID_Type& getModifiedPlanID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanID_Type& getModifiedPlanID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setModifiedPlanID(const uci::type::RoutePlanID_Type& accessor) override;

  /** Returns whether this optional field ModifiedPlanIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasModifiedPlanID() const noexcept override;

  /** Enables the optional field such that getModifiedPlanID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RoutePlanID_Type& enableModifiedPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& clearModifiedPlanID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AnalysisRouteID_Type& getAnalysisRouteID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AnalysisRouteID_Type& getAnalysisRouteID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AnalysisRouteID_Type& getAnalysisRouteID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& setAnalysisRouteID(const uci::type::AnalysisRouteID_Type& accessor) override;

  /** Returns whether this optional field AnalysisRouteIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAnalysisRouteID() const noexcept override;

  /** Enables the optional field such that getAnalysisRouteID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AnalysisRouteID_Type& enableAnalysisRouteID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RoutePlanValidationMDT& clearAnalysisRouteID() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<RoutePlanValidationMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::RoutePlanValidationMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::RoutePlanValidationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<RoutePlanValidationID_Type> routePlanValidationID_Accessor;
  std::unique_ptr<ActionPlanID_Type> planID_Accessor;
  std::unique_ptr<ValidatorType> validator_Accessor;
  std::unique_ptr<PlanValidationStateEnum> validationState_Accessor;
  std::unique_ptr<CompletionStatusType> completionStatus_Accessor;
  std::unique_ptr<IncompleteItem> incompleteItem_Accessor;
  std::unique_ptr<InvalidPath> invalidPath_Accessor;
  std::unique_ptr<LAR_MDT> validLAR_Accessor;
  std::unique_ptr<RoutePlanID_Type> modifiedPlanID_Accessor;
  std::unique_ptr<AnalysisRouteID_Type> analysisRouteID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ROUTEPLANVALIDATIONMDT_H
