/** @file MessageConfigurationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MESSAGECONFIGURATIONTYPE_H
#define ASB_UCI_TYPE_MESSAGECONFIGURATIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommConfigurationStateEnum.h"
#include "asb_uci/type/CommDataDirectionFiltrationEnum.h"
#include "asb_uci/type/DurationType.h"
#include "asb_uci/type/InclusionEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/MessageConfigurationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComparableRankingType;
class DataLinkNativeFilterPET;
class FilterID_Type;
class ForeignKeyType;
class MessageConfigurationID_Type;
class QueryMessageType;
class SystemID_Type;

/** A filter for messages. Each component has an 'and' relationship with the others. */
class MessageConfigurationType : public virtual uci::type::MessageConfigurationType {
public:
  /** Specifies an implementation specific Connection ID. This allows this message configuration to be applied to a
    * specific Connection therefore only applying to message traffic on that connection. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using ConnectionKey = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** System ID of a remote System. If System ID is empty, It is assumed this is a broadcast. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using RemoteSystemID = asb_uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type, asb_uci::type::SystemID_Type>;

  /** The constructor */
  MessageConfigurationType();

  /** The copy constructor
    *
    * @param rhs The MessageConfigurationType to copy from
    */
  MessageConfigurationType(const MessageConfigurationType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MessageConfigurationType to move from
    */
  MessageConfigurationType(MessageConfigurationType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MessageConfigurationType to copy from
    * @return The MessageConfigurationType that was assigned
    */
  MessageConfigurationType& operator=(const MessageConfigurationType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MessageConfigurationType to move from
    * @return The MessageConfigurationType that was assigned
    */
  MessageConfigurationType& operator=(MessageConfigurationType&& rhs) = delete;

  /** The destructor */
  virtual ~MessageConfigurationType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MessageConfigurationType whose contents are to be used to set this
    *      uci::type::MessageConfigurationType's contents.
    */
  void copy(const uci::type::MessageConfigurationType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MessageConfigurationType whose contents are to be used to set this
    *      uci::type::MessageConfigurationType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MessageConfigurationType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MessageConfigurationID_Type& getMessageConfigurationID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MessageConfigurationID_Type& getMessageConfigurationID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MessageConfigurationID_Type& getMessageConfigurationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setMessageConfigurationID(const uci::type::MessageConfigurationID_Type& accessor) override;

  /** Returns whether this optional field MessageConfigurationIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMessageConfigurationID() const noexcept override;

  /** Enables the optional field such that getMessageConfigurationID will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MessageConfigurationID_Type& enableMessageConfigurationID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& clearMessageConfigurationID() noexcept override;

  /** Returns the accessor to the FilterID field contained in this message fragment
    *
    * @return The const reference to the accessor to the FilterID field.
    */
  const uci::type::FilterID_Type& getFilterID() const override;

  /** Returns the accessor to the FilterID field contained in this message fragment
    *
    * @return The reference to the accessor to the FilterID field.
    */
  uci::type::FilterID_Type& getFilterID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setFilterID(const uci::type::FilterID_Type& accessor) override;

  /** Returns the accessor to the Filter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Filter field.
    */
  const uci::type::QueryMessageType& getFilter() const override;

  /** Returns the accessor to the Filter field contained in this message fragment
    *
    * @return The reference to the accessor to the Filter field.
    */
  uci::type::QueryMessageType& getFilter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setFilter(const uci::type::QueryMessageType& accessor) override;

  /** Returns the contents of the message's FilterStatus field
    *
    * @return The contents of the FilterStatus field
    */
  xs::Boolean getFilterStatus() const override;

  /** Sets the contents of the message's FilterStatus field
    *
    * @param value The new value to set the FilterStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setFilterStatus(xs::Boolean value) override;

  /** Returns the contents of the message's FilterDirection field
    *
    * @return The contents of the FilterDirection field
    */
  const uci::type::CommDataDirectionFiltrationEnum& getFilterDirection() const override;

  /** Returns the contents of the message's FilterDirection field
    *
    * @return The contents of the FilterDirection field
    */
  uci::type::CommDataDirectionFiltrationEnum& getFilterDirection() override;

  /** Sets the contents of the message's FilterDirection field
    *
    * @param accessor The accessor to use to set the FilterDirection field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setFilterDirection(const uci::type::CommDataDirectionFiltrationEnum& accessor) override;

  /** Sets the contents of the message's FilterDirection field
    *
    * @param value The new value to set the FilterDirection field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setFilterDirection(uci::type::CommDataDirectionFiltrationEnum::EnumerationItem value) override;

  /** Returns the contents of the message's FilterInclusionType field
    *
    * @return The contents of the FilterInclusionType field
    */
  const uci::type::InclusionEnum& getFilterInclusionType() const override;

  /** Returns the contents of the message's FilterInclusionType field
    *
    * @return The contents of the FilterInclusionType field
    */
  uci::type::InclusionEnum& getFilterInclusionType() override;

  /** Sets the contents of the message's FilterInclusionType field
    *
    * @param accessor The accessor to use to set the FilterInclusionType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setFilterInclusionType(const uci::type::InclusionEnum& accessor) override;

  /** Sets the contents of the message's FilterInclusionType field
    *
    * @param value The new value to set the FilterInclusionType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setFilterInclusionType(uci::type::InclusionEnum::EnumerationItem value) override;

  /** Returns the accessor to the ConnectionKey field contained in this message fragment
    *
    * @return The const reference to the accessor to the ConnectionKey field.
    */
  const uci::type::MessageConfigurationType::ConnectionKey& getConnectionKey() const override;

  /** Returns the accessor to the ConnectionKey field contained in this message fragment
    *
    * @return The reference to the accessor to the ConnectionKey field.
    */
  uci::type::MessageConfigurationType::ConnectionKey& getConnectionKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setConnectionKey(const uci::type::MessageConfigurationType::ConnectionKey& accessor) override;

  /** Returns the accessor to the RemoteSystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RemoteSystemID field.
    */
  const uci::type::MessageConfigurationType::RemoteSystemID& getRemoteSystemID() const override;

  /** Returns the accessor to the RemoteSystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the RemoteSystemID field.
    */
  uci::type::MessageConfigurationType::RemoteSystemID& getRemoteSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setRemoteSystemID(const uci::type::MessageConfigurationType::RemoteSystemID& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getTransmitPeriodicity() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setTransmitPeriodicity(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field TransmitPeriodicityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTransmitPeriodicity() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& clearTransmitPeriodicity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DataLinkNativeFilterPET& getDataLinkNativeFilter_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DataLinkNativeFilterPET& getDataLinkNativeFilter() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DataLinkNativeFilterPET& getDataLinkNativeFilter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setDataLinkNativeFilter(const uci::type::DataLinkNativeFilterPET& accessor) override;

  /** Returns whether this optional field DataLinkNativeFilteris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDataLinkNativeFilter() const noexcept override;

  /** Enables the optional field such that getDataLinkNativeFilter will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DataLinkNativeFilterPET& enableDataLinkNativeFilter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& clearDataLinkNativeFilter() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& getRank_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ComparableRankingType& getRank() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& getRank() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setRank(const uci::type::ComparableRankingType& accessor) override;

  /** Returns whether this optional field Rankis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRank() const noexcept override;

  /** Enables the optional field such that getRank will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComparableRankingType& enableRank(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& clearRank() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConfigurationStateEnum& getConfigurationState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommConfigurationStateEnum& getConfigurationState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConfigurationStateEnum& getConfigurationState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setConfigurationState(const uci::type::CommConfigurationStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& setConfigurationState(uci::type::CommConfigurationStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field ConfigurationStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConfigurationState() const noexcept override;

  /** Enables the optional field such that getConfigurationState will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConfigurationStateEnum& enableConfigurationState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MessageConfigurationType& clearConfigurationState() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MessageConfigurationType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MessageConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MessageConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MessageConfigurationID_Type> messageConfigurationID_Accessor;
  std::unique_ptr<FilterID_Type> filterID_Accessor;
  std::unique_ptr<QueryMessageType> filter_Accessor;
  asb_xs::Boolean filterStatus_Accessor{false};
  std::unique_ptr<CommDataDirectionFiltrationEnum> filterDirection_Accessor;
  std::unique_ptr<InclusionEnum> filterInclusionType_Accessor;
  std::unique_ptr<ConnectionKey> connectionKey_Accessor;
  std::unique_ptr<RemoteSystemID> remoteSystemID_Accessor;
  boost::optional<DurationTypeValue> transmitPeriodicity_Accessor;
  std::unique_ptr<DataLinkNativeFilterPET> dataLinkNativeFilter_Accessor;
  std::unique_ptr<ComparableRankingType> rank_Accessor;
  std::unique_ptr<CommConfigurationStateEnum> configurationState_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MESSAGECONFIGURATIONTYPE_H
