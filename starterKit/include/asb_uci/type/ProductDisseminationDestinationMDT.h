/** @file ProductDisseminationDestinationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PRODUCTDISSEMINATIONDESTINATIONMDT_H
#define ASB_UCI_TYPE_PRODUCTDISSEMINATIONDESTINATIONMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/DestinationCategoryEnum.h"
#include "../../../include/asb_uci/type/MIME_Type.h"
#include "../../../include/asb_uci/type/ProductTypeEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductDisseminationDestinationMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ProductDisseminationDestinationID_Type;
class ProductDisseminationGatewayType;
class SecurityInformationType;

/** This type defines all the fields required to represent a destination for purposes of dissemination. */
class ProductDisseminationDestinationMDT : public virtual uci::type::ProductDisseminationDestinationMDT, public virtual DataRecordBaseType {
public:
  /** This field allows for logical names to be used in place of an ID to reference a configured Destination. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Handle = asb_uci::base::BoundedList<uci::type::VisibleString256Type, uci::type::accessorType::visibleString256Type, asb_uci::type::VisibleString256Type>;

  /** This field is used to list the product types that this destination supports for dissemination. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 81]
    */
  using SupportedProductType = asb_uci::base::BoundedList<uci::type::ProductTypeEnum, uci::type::accessorType::productTypeEnum, asb_uci::type::ProductTypeEnum>;

  /** This field is used to list the product formats that this destination supports for dissemination. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SupportedFormat = asb_uci::base::BoundedList<uci::type::MIME_Type, uci::type::accessorType::mIME_Type, asb_uci::type::MIME_Type>;

  /** The constructor */
  ProductDisseminationDestinationMDT();

  /** The copy constructor
    *
    * @param rhs The ProductDisseminationDestinationMDT to copy from
    */
  ProductDisseminationDestinationMDT(const ProductDisseminationDestinationMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ProductDisseminationDestinationMDT to move from
    */
  ProductDisseminationDestinationMDT(ProductDisseminationDestinationMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ProductDisseminationDestinationMDT to copy from
    * @return The ProductDisseminationDestinationMDT that was assigned
    */
  ProductDisseminationDestinationMDT& operator=(const ProductDisseminationDestinationMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ProductDisseminationDestinationMDT to move from
    * @return The ProductDisseminationDestinationMDT that was assigned
    */
  ProductDisseminationDestinationMDT& operator=(ProductDisseminationDestinationMDT&& rhs) = delete;

  /** The destructor */
  ~ProductDisseminationDestinationMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ProductDisseminationDestinationMDT whose contents are to be used to set this
    *      uci::type::ProductDisseminationDestinationMDT's contents.
    */
  void copy(const uci::type::ProductDisseminationDestinationMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ProductDisseminationDestinationMDT whose contents are to be used to set this
    *      uci::type::ProductDisseminationDestinationMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ProductDisseminationDestinationMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ProductDisseminationDestinationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductDisseminationDestinationID field.
    */
  const uci::type::ProductDisseminationDestinationID_Type& getProductDisseminationDestinationID() const override;

  /** Returns the accessor to the ProductDisseminationDestinationID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductDisseminationDestinationID field.
    */
  uci::type::ProductDisseminationDestinationID_Type& getProductDisseminationDestinationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setProductDisseminationDestinationID(const uci::type::ProductDisseminationDestinationID_Type& accessor) override;

  /** Returns the accessor to the Handle field contained in this message fragment
    *
    * @return The const reference to the accessor to the Handle field.
    */
  const uci::type::ProductDisseminationDestinationMDT::Handle& getHandle() const override;

  /** Returns the accessor to the Handle field contained in this message fragment
    *
    * @return The reference to the accessor to the Handle field.
    */
  uci::type::ProductDisseminationDestinationMDT::Handle& getHandle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setHandle(const uci::type::ProductDisseminationDestinationMDT::Handle& accessor) override;

  /** Returns the accessor to the Endpoint field contained in this message fragment
    *
    * @return The const reference to the accessor to the Endpoint field.
    */
  const uci::type::ProductDisseminationGatewayType& getEndpoint() const override;

  /** Returns the accessor to the Endpoint field contained in this message fragment
    *
    * @return The reference to the accessor to the Endpoint field.
    */
  uci::type::ProductDisseminationGatewayType& getEndpoint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setEndpoint(const uci::type::ProductDisseminationGatewayType& accessor) override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecurityInformation field.
    */
  const uci::type::SecurityInformationType& getSecurityInformation() const override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityInformation field.
    */
  uci::type::SecurityInformationType& getSecurityInformation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setSecurityInformation(const uci::type::SecurityInformationType& accessor) override;

  /** Returns the contents of the message's DestinationType field
    *
    * @return The contents of the DestinationType field
    */
  const uci::type::DestinationCategoryEnum& getDestinationType() const override;

  /** Returns the contents of the message's DestinationType field
    *
    * @return The contents of the DestinationType field
    */
  uci::type::DestinationCategoryEnum& getDestinationType() override;

  /** Sets the contents of the message's DestinationType field
    *
    * @param accessor The accessor to use to set the DestinationType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setDestinationType(const uci::type::DestinationCategoryEnum& accessor) override;

  /** Sets the contents of the message's DestinationType field
    *
    * @param value The new value to set the DestinationType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setDestinationType(uci::type::DestinationCategoryEnum::EnumerationItem value) override;

  /** Returns the contents of the message's Enabled field
    *
    * @return The contents of the Enabled field
    */
  xs::Boolean getEnabled() const override;

  /** Sets the contents of the message's Enabled field
    *
    * @param value The new value to set the Enabled field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setEnabled(xs::Boolean value) override;

  /** Returns the accessor to the SupportedProductType field contained in this message fragment
    *
    * @return The const reference to the accessor to the SupportedProductType field.
    */
  const uci::type::ProductDisseminationDestinationMDT::SupportedProductType& getSupportedProductType() const override;

  /** Returns the accessor to the SupportedProductType field contained in this message fragment
    *
    * @return The reference to the accessor to the SupportedProductType field.
    */
  uci::type::ProductDisseminationDestinationMDT::SupportedProductType& getSupportedProductType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setSupportedProductType(const uci::type::ProductDisseminationDestinationMDT::SupportedProductType& accessor) override;

  /** Returns the accessor to the SupportedFormat field contained in this message fragment
    *
    * @return The const reference to the accessor to the SupportedFormat field.
    */
  const uci::type::ProductDisseminationDestinationMDT::SupportedFormat& getSupportedFormat() const override;

  /** Returns the accessor to the SupportedFormat field contained in this message fragment
    *
    * @return The reference to the accessor to the SupportedFormat field.
    */
  uci::type::ProductDisseminationDestinationMDT::SupportedFormat& getSupportedFormat() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::ProductDisseminationDestinationMDT& setSupportedFormat(const uci::type::ProductDisseminationDestinationMDT::SupportedFormat& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ProductDisseminationDestinationMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductDisseminationDestinationMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ProductDisseminationDestinationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ProductDisseminationDestinationID_Type> productDisseminationDestinationID_Accessor;
  std::unique_ptr<Handle> handle_Accessor;
  std::unique_ptr<ProductDisseminationGatewayType> endpoint_Accessor;
  std::unique_ptr<SecurityInformationType> securityInformation_Accessor;
  std::unique_ptr<DestinationCategoryEnum> destinationType_Accessor;
  asb_xs::Boolean enabled_Accessor{false};
  std::unique_ptr<SupportedProductType> supportedProductType_Accessor;
  std::unique_ptr<SupportedFormat> supportedFormat_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PRODUCTDISSEMINATIONDESTINATIONMDT_H
