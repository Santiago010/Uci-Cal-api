/** @file SelectDigitalComponentResourceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SELECTDIGITALCOMPONENTRESOURCETYPE_H
#define ASB_UCI_TYPE_SELECTDIGITALCOMPONENTRESOURCETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SelectDigitalComponentResourceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class BeamBandWidthAndSampleRateType;
class MFA_AddressType;
class MFP_AddressType;
class NetworkDataRateRangeType;

/** Used to select digital array (multi-function aperture) and digital payload (multi-function processor) resources. */
class SelectDigitalComponentResourceType : public virtual uci::type::SelectDigitalComponentResourceType {
public:
  /** For a "digital back end," the MFP_Address defines the processing, data path, and network port information used by the
    * Activity requesting resource access. The service allocating resources considers the other MFP_Addresses in use at the
    * same time and manages not only aperture resources but also back end and network resources, considering also the
    * overall throughput in use, defined by the sibling BeamBandWidthAndDataRate. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using MFP_Address = asb_uci::base::BoundedList<uci::type::MFP_AddressType, uci::type::accessorType::mFP_AddressType, asb_uci::type::MFP_AddressType>;

  /** If present, the number of instances identifies how many beams will be set up simultaneously on the single allocated
    * AntennaResourceInstance (or Type). The BeamBandWidth provides the maximum Instantaneous Band Width of the beam, and
    * the SampleDataRate controls the max data rate the Digital Payload plans to accept in the aperture access times it is
    * allocated. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using BeamBandWidthAndSampleRate = asb_uci::base::BoundedList<uci::type::BeamBandWidthAndSampleRateType, uci::type::accessorType::beamBandWidthAndSampleRateType, asb_uci::type::BeamBandWidthAndSampleRateType>;

  /** The constructor */
  SelectDigitalComponentResourceType();

  /** The copy constructor
    *
    * @param rhs The SelectDigitalComponentResourceType to copy from
    */
  SelectDigitalComponentResourceType(const SelectDigitalComponentResourceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SelectDigitalComponentResourceType to move from
    */
  SelectDigitalComponentResourceType(SelectDigitalComponentResourceType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SelectDigitalComponentResourceType to copy from
    * @return The SelectDigitalComponentResourceType that was assigned
    */
  SelectDigitalComponentResourceType& operator=(const SelectDigitalComponentResourceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SelectDigitalComponentResourceType to move from
    * @return The SelectDigitalComponentResourceType that was assigned
    */
  SelectDigitalComponentResourceType& operator=(SelectDigitalComponentResourceType&& rhs) = delete;

  /** The destructor */
  virtual ~SelectDigitalComponentResourceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SelectDigitalComponentResourceType whose contents are to be used to set this
    *      uci::type::SelectDigitalComponentResourceType's contents.
    */
  void copy(const uci::type::SelectDigitalComponentResourceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SelectDigitalComponentResourceType whose contents are to be used to set this
    *      uci::type::SelectDigitalComponentResourceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SelectDigitalComponentResourceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MFA_AddressType& getMFA_Address_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MFA_AddressType& getMFA_Address() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MFA_AddressType& getMFA_Address() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SelectDigitalComponentResourceType& setMFA_Address(const uci::type::MFA_AddressType& accessor) override;

  /** Returns whether this optional field MFA_Addressis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMFA_Address() const noexcept override;

  /** Enables the optional field such that getMFA_Address will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MFA_AddressType& enableMFA_Address(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SelectDigitalComponentResourceType& clearMFA_Address() noexcept override;

  /** Returns the accessor to the MFP_Address field contained in this message fragment
    *
    * @return The const reference to the accessor to the MFP_Address field.
    */
  const uci::type::SelectDigitalComponentResourceType::MFP_Address& getMFP_Address() const override;

  /** Returns the accessor to the MFP_Address field contained in this message fragment
    *
    * @return The reference to the accessor to the MFP_Address field.
    */
  uci::type::SelectDigitalComponentResourceType::MFP_Address& getMFP_Address() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SelectDigitalComponentResourceType& setMFP_Address(const uci::type::SelectDigitalComponentResourceType::MFP_Address& accessor) override;

  /** Returns the accessor to the BeamBandWidthAndSampleRate field contained in this message fragment
    *
    * @return The const reference to the accessor to the BeamBandWidthAndSampleRate field.
    */
  const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& getBeamBandWidthAndSampleRate() const override;

  /** Returns the accessor to the BeamBandWidthAndSampleRate field contained in this message fragment
    *
    * @return The reference to the accessor to the BeamBandWidthAndSampleRate field.
    */
  uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& getBeamBandWidthAndSampleRate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SelectDigitalComponentResourceType& setBeamBandWidthAndSampleRate(const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkDataRateRangeType& getNetworkDataRate_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NetworkDataRateRangeType& getNetworkDataRate() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkDataRateRangeType& getNetworkDataRate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SelectDigitalComponentResourceType& setNetworkDataRate(const uci::type::NetworkDataRateRangeType& accessor) override;

  /** Returns whether this optional field NetworkDataRateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkDataRate() const noexcept override;

  /** Enables the optional field such that getNetworkDataRate will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkDataRateRangeType& enableNetworkDataRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SelectDigitalComponentResourceType& clearNetworkDataRate() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SelectDigitalComponentResourceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SelectDigitalComponentResourceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SelectDigitalComponentResourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MFA_AddressType> mFA_Address_Accessor;
  std::unique_ptr<MFP_Address> mFP_Address_Accessor;
  std::unique_ptr<BeamBandWidthAndSampleRate> beamBandWidthAndSampleRate_Accessor;
  std::unique_ptr<NetworkDataRateRangeType> networkDataRate_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SELECTDIGITALCOMPONENTRESOURCETYPE_H
