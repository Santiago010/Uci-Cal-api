/** @file CommConnectionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMCONNECTIONTYPE_H
#define ASB_UCI_TYPE_COMMCONNECTIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CommModulationTypeEnum.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/FrequencyType.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConnectionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ForeignKeyType;

/** Utilized to perform the tuning of a communications capability. */
class CommConnectionType : public virtual uci::type::CommConnectionType {
public:
  /** This element represents a potential list of transmit channels to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using TransmitChannel = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** This element represents a potential list of transmit frequencies to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using TransmitFrequency = asb_uci::base::BoundedList<uci::type::FrequencyType, uci::type::accessorType::frequencyType, asb_uci::type::FrequencyType>;

  /** This element represents a potential list of receive channels to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ReceiveChannel = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** This element represents a potential list of receive frequencies to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using ReceiveFrequency = asb_uci::base::BoundedList<uci::type::FrequencyType, uci::type::accessorType::frequencyType, asb_uci::type::FrequencyType>;

  /** This element represents a key to a configuration containing the network ID / Name. This is specifically an ID to aid
    * a waveform to ID its own terminal, a waveform network, or IP Address. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using NetworkKey = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** The constructor */
  CommConnectionType();

  /** The copy constructor
    *
    * @param rhs The CommConnectionType to copy from
    */
  CommConnectionType(const CommConnectionType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommConnectionType to move from
    */
  CommConnectionType(CommConnectionType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommConnectionType to copy from
    * @return The CommConnectionType that was assigned
    */
  CommConnectionType& operator=(const CommConnectionType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommConnectionType to move from
    * @return The CommConnectionType that was assigned
    */
  CommConnectionType& operator=(CommConnectionType&& rhs) = delete;

  /** The destructor */
  virtual ~CommConnectionType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommConnectionType whose contents are to be used to set this
    *      uci::type::CommConnectionType's contents.
    */
  void copy(const uci::type::CommConnectionType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommConnectionType whose contents are to be used to set this
    *      uci::type::CommConnectionType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommConnectionType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the TransmitChannel field contained in this message fragment
    *
    * @return The const reference to the accessor to the TransmitChannel field.
    */
  const uci::type::CommConnectionType::TransmitChannel& getTransmitChannel() const override;

  /** Returns the accessor to the TransmitChannel field contained in this message fragment
    *
    * @return The reference to the accessor to the TransmitChannel field.
    */
  uci::type::CommConnectionType::TransmitChannel& getTransmitChannel() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setTransmitChannel(const uci::type::CommConnectionType::TransmitChannel& accessor) override;

  /** Returns the accessor to the TransmitFrequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the TransmitFrequency field.
    */
  const uci::type::CommConnectionType::TransmitFrequency& getTransmitFrequency() const override;

  /** Returns the accessor to the TransmitFrequency field contained in this message fragment
    *
    * @return The reference to the accessor to the TransmitFrequency field.
    */
  uci::type::CommConnectionType::TransmitFrequency& getTransmitFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setTransmitFrequency(const uci::type::CommConnectionType::TransmitFrequency& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getInstantaneousTransmitBandwidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setInstantaneousTransmitBandwidth(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field InstantaneousTransmitBandwidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInstantaneousTransmitBandwidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearInstantaneousTransmitBandwidth() noexcept override;

  /** Returns the accessor to the ReceiveChannel field contained in this message fragment
    *
    * @return The const reference to the accessor to the ReceiveChannel field.
    */
  const uci::type::CommConnectionType::ReceiveChannel& getReceiveChannel() const override;

  /** Returns the accessor to the ReceiveChannel field contained in this message fragment
    *
    * @return The reference to the accessor to the ReceiveChannel field.
    */
  uci::type::CommConnectionType::ReceiveChannel& getReceiveChannel() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setReceiveChannel(const uci::type::CommConnectionType::ReceiveChannel& accessor) override;

  /** Returns the accessor to the ReceiveFrequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the ReceiveFrequency field.
    */
  const uci::type::CommConnectionType::ReceiveFrequency& getReceiveFrequency() const override;

  /** Returns the accessor to the ReceiveFrequency field contained in this message fragment
    *
    * @return The reference to the accessor to the ReceiveFrequency field.
    */
  uci::type::CommConnectionType::ReceiveFrequency& getReceiveFrequency() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setReceiveFrequency(const uci::type::CommConnectionType::ReceiveFrequency& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getInstantaneousReceiveBandwidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setInstantaneousReceiveBandwidth(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field InstantaneousReceiveBandwidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInstantaneousReceiveBandwidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearInstantaneousReceiveBandwidth() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommModulationTypeEnum& getModulation_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommModulationTypeEnum& getModulation() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommModulationTypeEnum& getModulation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setModulation(const uci::type::CommModulationTypeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setModulation(uci::type::CommModulationTypeEnum::EnumerationItem value) override;

  /** Returns whether this optional field Modulationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasModulation() const noexcept override;

  /** Enables the optional field such that getModulation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommModulationTypeEnum& enableModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearModulation() noexcept override;

  /** Returns the accessor to the NetworkKey field contained in this message fragment
    *
    * @return The const reference to the accessor to the NetworkKey field.
    */
  const uci::type::CommConnectionType::NetworkKey& getNetworkKey() const override;

  /** Returns the accessor to the NetworkKey field contained in this message fragment
    *
    * @return The reference to the accessor to the NetworkKey field.
    */
  uci::type::CommConnectionType::NetworkKey& getNetworkKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setNetworkKey(const uci::type::CommConnectionType::NetworkKey& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getNetworkTimeRef() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setNetworkTimeRef(xs::Boolean value) override;

  /** Returns whether this optional field NetworkTimeRefis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkTimeRef() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearNetworkTimeRef() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getExternalTimeRef() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setExternalTimeRef(xs::Boolean value) override;

  /** Returns whether this optional field ExternalTimeRefis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasExternalTimeRef() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearExternalTimeRef() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getNetworkTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setNetworkTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field NetworkTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearNetworkTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Float getNetworkTimeUncertaintyRange() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setNetworkTimeUncertaintyRange(xs::Float value) override;

  /** Returns whether this optional field NetworkTimeUncertaintyRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkTimeUncertaintyRange() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearNetworkTimeUncertaintyRange() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getNetworkTimeOffset() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& setNetworkTimeOffset(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field NetworkTimeOffsetis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkTimeOffset() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommConnectionType& clearNetworkTimeOffset() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommConnectionType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommConnectionType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommConnectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<TransmitChannel> transmitChannel_Accessor;
  std::unique_ptr<TransmitFrequency> transmitFrequency_Accessor;
  boost::optional<FrequencyTypeValue> instantaneousTransmitBandwidth_Accessor;
  std::unique_ptr<ReceiveChannel> receiveChannel_Accessor;
  std::unique_ptr<ReceiveFrequency> receiveFrequency_Accessor;
  boost::optional<FrequencyTypeValue> instantaneousReceiveBandwidth_Accessor;
  std::unique_ptr<CommModulationTypeEnum> modulation_Accessor;
  std::unique_ptr<NetworkKey> networkKey_Accessor;
  boost::optional<asb_xs::Boolean> networkTimeRef_Accessor;
  boost::optional<asb_xs::Boolean> externalTimeRef_Accessor;
  boost::optional<DateTimeTypeValue> networkTime_Accessor;
  boost::optional<asb_xs::Float> networkTimeUncertaintyRange_Accessor;
  boost::optional<DurationTypeValue> networkTimeOffset_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMCONNECTIONTYPE_H
