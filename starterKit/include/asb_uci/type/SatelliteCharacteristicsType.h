/** @file SatelliteCharacteristicsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SATELLITECHARACTERISTICSTYPE_H
#define ASB_UCI_TYPE_SATELLITECHARACTERISTICSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/MassType.h"
#include "asb_uci/type/SOB_MissionTypeEnum.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "uci/type/SatelliteCharacteristicsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommFrequencyType;
class FileMetadataID_Type;
class ProductMetadataID_Type;
class SatellitePhysicalConfigurationType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SatelliteCharacteristicsType : public virtual uci::type::SatelliteCharacteristicsType {
public:
  /** The intended mission or missions of the satellite. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 24]
    */
  using MissionType = asb_uci::base::BoundedList<uci::type::SOB_MissionTypeEnum, uci::type::accessorType::sOB_MissionTypeEnum, asb_uci::type::SOB_MissionTypeEnum>;

  /** Indicates the physical configuration and appearance of the satellite. When more than one is given, the satellite has
    * multiple configurations with different sizes and appearances. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using PhysicalConfiguration = asb_uci::base::BoundedList<uci::type::SatellitePhysicalConfigurationType, uci::type::accessorType::satellitePhysicalConfigurationType, asb_uci::type::SatellitePhysicalConfigurationType>;

  /** A reference to metadata for a product which conveys characteristics of the satellite. For example, a reference image
    * of the satellite type. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CharacteristicsProductID = asb_uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type, asb_uci::type::ProductMetadataID_Type>;

  /** A reference to metadata for a file which conveys characteristics of the satellite. For example, a non-Product image
    * or a CAD model of the satellite's physical characteristics. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CharacteristicsFileID = asb_uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type, asb_uci::type::FileMetadataID_Type>;

  /** Indicates a comms link of the satellite. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CommLink = asb_uci::base::BoundedList<uci::type::CommFrequencyType, uci::type::accessorType::commFrequencyType, asb_uci::type::CommFrequencyType>;

  /** The constructor */
  SatelliteCharacteristicsType();

  /** The copy constructor
    *
    * @param rhs The SatelliteCharacteristicsType to copy from
    */
  SatelliteCharacteristicsType(const SatelliteCharacteristicsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SatelliteCharacteristicsType to move from
    */
  SatelliteCharacteristicsType(SatelliteCharacteristicsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SatelliteCharacteristicsType to copy from
    * @return The SatelliteCharacteristicsType that was assigned
    */
  SatelliteCharacteristicsType& operator=(const SatelliteCharacteristicsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SatelliteCharacteristicsType to move from
    * @return The SatelliteCharacteristicsType that was assigned
    */
  SatelliteCharacteristicsType& operator=(SatelliteCharacteristicsType&& rhs) = delete;

  /** The destructor */
  virtual ~SatelliteCharacteristicsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SatelliteCharacteristicsType whose contents are to be used to set this
    *      uci::type::SatelliteCharacteristicsType's contents.
    */
  void copy(const uci::type::SatelliteCharacteristicsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SatelliteCharacteristicsType whose contents are to be used to set this
    *      uci::type::SatelliteCharacteristicsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SatelliteCharacteristicsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getBusType_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString256Type& getBusType() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getBusType() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setBusType(const uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setBusType(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setBusType(const char* value) override;

  /** Returns whether this optional field busType_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasBusType() const noexcept override;

  /** Enables the optional field such that getBusType will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& enableBusType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& clearBusType() noexcept override;

  /** Returns the accessor to the MissionType field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissionType field.
    */
  const uci::type::SatelliteCharacteristicsType::MissionType& getMissionType() const override;

  /** Returns the accessor to the MissionType field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionType field.
    */
  uci::type::SatelliteCharacteristicsType::MissionType& getMissionType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setMissionType(const uci::type::SatelliteCharacteristicsType::MissionType& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MassTypeValue getMass() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setMass(uci::type::MassTypeValue value) override;

  /** Returns whether this optional field Massis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMass() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& clearMass() noexcept override;

  /** Returns the accessor to the PhysicalConfiguration field contained in this message fragment
    *
    * @return The const reference to the accessor to the PhysicalConfiguration field.
    */
  const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& getPhysicalConfiguration() const override;

  /** Returns the accessor to the PhysicalConfiguration field contained in this message fragment
    *
    * @return The reference to the accessor to the PhysicalConfiguration field.
    */
  uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& getPhysicalConfiguration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setPhysicalConfiguration(const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& accessor) override;

  /** Returns the accessor to the CharacteristicsProductID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CharacteristicsProductID field.
    */
  const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& getCharacteristicsProductID() const override;

  /** Returns the accessor to the CharacteristicsProductID field contained in this message fragment
    *
    * @return The reference to the accessor to the CharacteristicsProductID field.
    */
  uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& getCharacteristicsProductID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setCharacteristicsProductID(const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& accessor) override;

  /** Returns the accessor to the CharacteristicsFileID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CharacteristicsFileID field.
    */
  const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& getCharacteristicsFileID() const override;

  /** Returns the accessor to the CharacteristicsFileID field contained in this message fragment
    *
    * @return The reference to the accessor to the CharacteristicsFileID field.
    */
  uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& getCharacteristicsFileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setCharacteristicsFileID(const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& accessor) override;

  /** Returns the accessor to the CommLink field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommLink field.
    */
  const uci::type::SatelliteCharacteristicsType::CommLink& getCommLink() const override;

  /** Returns the accessor to the CommLink field contained in this message fragment
    *
    * @return The reference to the accessor to the CommLink field.
    */
  uci::type::SatelliteCharacteristicsType::CommLink& getCommLink() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SatelliteCharacteristicsType& setCommLink(const uci::type::SatelliteCharacteristicsType::CommLink& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SatelliteCharacteristicsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SatelliteCharacteristicsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SatelliteCharacteristicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<VisibleString256Type> busType_Accessor;
  std::unique_ptr<MissionType> missionType_Accessor;
  boost::optional<MassTypeValue> mass_Accessor;
  std::unique_ptr<PhysicalConfiguration> physicalConfiguration_Accessor;
  std::unique_ptr<CharacteristicsProductID> characteristicsProductID_Accessor;
  std::unique_ptr<CharacteristicsFileID> characteristicsFileID_Accessor;
  std::unique_ptr<CommLink> commLink_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SATELLITECHARACTERISTICSTYPE_H
