/** @file AtomicValueType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ATOMICVALUETYPE_H
#define ASB_UCI_TYPE_ATOMICVALUETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/QueryString4096Type.h"
#include "../../../include/asb_uci/type/SchemaComponentNameType.h"
#include "../../../include/asb_uci/type/TimeType.h"
#include "../../../include/asb_xs/type/binaryXmlSchemaPrimitives.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AtomicValueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** An atomic primitive value. */
class AtomicValueType : public virtual uci::type::AtomicValueType {
public:
  /** The constructor */
  AtomicValueType();

  /** The copy constructor
    *
    * @param rhs The AtomicValueType to copy from
    */
  AtomicValueType(const AtomicValueType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The AtomicValueType to move from
    */
  AtomicValueType(AtomicValueType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The AtomicValueType to copy from
    * @return The AtomicValueType that was assigned
    */
  AtomicValueType& operator=(const AtomicValueType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The AtomicValueType to move from
    * @return The AtomicValueType that was assigned
    */
  AtomicValueType& operator=(AtomicValueType&& rhs) = delete;

  /** The destructor */
  virtual ~AtomicValueType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AtomicValueType whose contents are to be used to set this uci::type::AtomicValueType's
    *      contents.
    */
  void copy(const uci::type::AtomicValueType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AtomicValueType whose contents are to be used to set this uci::type::AtomicValueType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::AtomicValueType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::AtomicValueType::AtomicValueTypeChoice getAtomicValueTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getAtomicValueTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setAtomicValueTypeChoiceOrdinal(uci::type::AtomicValueType::AtomicValueTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's BooleanValue item
    *
    * @return The contents of the BooleanValue field
    */
  xs::Boolean getBooleanValue() const override;

  /** Sets this choice's choice to be BooleanValue and initializes BooleanValue to be the specified value
    *
    * @param value The new value to set BooleanValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setBooleanValue(xs::Boolean value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by BooleanValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by BooleanValue, false otherwise.
    */
  bool isBooleanValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by BooleanValue. */
  void chooseBooleanValue();

  /** Returns the contents of the message's ByteValue item
    *
    * @return The contents of the ByteValue field
    */
  xs::Byte getByteValue() const override;

  /** Sets this choice's choice to be ByteValue and initializes ByteValue to be the specified value
    *
    * @param value The new value to set ByteValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setByteValue(xs::Byte value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ByteValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ByteValue, false otherwise.
    */
  bool isByteValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ByteValue. */
  void chooseByteValue();

  /** Returns the contents of the message's UnsignedByteValue item
    *
    * @return The contents of the UnsignedByteValue field
    */
  xs::UnsignedByte getUnsignedByteValue() const override;

  /** Sets this choice's choice to be UnsignedByteValue and initializes UnsignedByteValue to be the specified value
    *
    * @param value The new value to set UnsignedByteValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setUnsignedByteValue(xs::UnsignedByte value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UnsignedByteValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UnsignedByteValue, false
    *      otherwise.
    */
  bool isUnsignedByteValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by UnsignedByteValue. */
  void chooseUnsignedByteValue();

  /** Returns the contents of the message's ShortValue item
    *
    * @return The contents of the ShortValue field
    */
  xs::Short getShortValue() const override;

  /** Sets this choice's choice to be ShortValue and initializes ShortValue to be the specified value
    *
    * @param value The new value to set ShortValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setShortValue(xs::Short value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ShortValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ShortValue, false otherwise.
    */
  bool isShortValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ShortValue. */
  void chooseShortValue();

  /** Returns the contents of the message's UnsignedShortValue item
    *
    * @return The contents of the UnsignedShortValue field
    */
  xs::UnsignedShort getUnsignedShortValue() const override;

  /** Sets this choice's choice to be UnsignedShortValue and initializes UnsignedShortValue to be the specified value
    *
    * @param value The new value to set UnsignedShortValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setUnsignedShortValue(xs::UnsignedShort value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UnsignedShortValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UnsignedShortValue, false
    *      otherwise.
    */
  bool isUnsignedShortValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by UnsignedShortValue. */
  void chooseUnsignedShortValue();

  /** Returns the contents of the message's IntValue item
    *
    * @return The contents of the IntValue field
    */
  xs::Int getIntValue() const override;

  /** Sets this choice's choice to be IntValue and initializes IntValue to be the specified value
    *
    * @param value The new value to set IntValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setIntValue(xs::Int value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by IntValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by IntValue, false otherwise.
    */
  bool isIntValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by IntValue. */
  void chooseIntValue();

  /** Returns the contents of the message's UnsignedIntValue item
    *
    * @return The contents of the UnsignedIntValue field
    */
  xs::UnsignedInt getUnsignedIntValue() const override;

  /** Sets this choice's choice to be UnsignedIntValue and initializes UnsignedIntValue to be the specified value
    *
    * @param value The new value to set UnsignedIntValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setUnsignedIntValue(xs::UnsignedInt value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UnsignedIntValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UnsignedIntValue, false
    *      otherwise.
    */
  bool isUnsignedIntValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by UnsignedIntValue. */
  void chooseUnsignedIntValue();

  /** Returns the contents of the message's LongValue item
    *
    * @return The contents of the LongValue field
    */
  xs::Long getLongValue() const override;

  /** Sets this choice's choice to be LongValue and initializes LongValue to be the specified value
    *
    * @param value The new value to set LongValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setLongValue(xs::Long value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LongValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LongValue, false otherwise.
    */
  bool isLongValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by LongValue. */
  void chooseLongValue();

  /** Returns the contents of the message's FloatValue item
    *
    * @return The contents of the FloatValue field
    */
  xs::Float getFloatValue() const override;

  /** Sets this choice's choice to be FloatValue and initializes FloatValue to be the specified value
    *
    * @param value The new value to set FloatValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setFloatValue(xs::Float value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FloatValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FloatValue, false otherwise.
    */
  bool isFloatValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by FloatValue. */
  void chooseFloatValue();

  /** Returns the contents of the message's DoubleValue item
    *
    * @return The contents of the DoubleValue field
    */
  xs::Double getDoubleValue() const override;

  /** Sets this choice's choice to be DoubleValue and initializes DoubleValue to be the specified value
    *
    * @param value The new value to set DoubleValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setDoubleValue(xs::Double value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DoubleValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DoubleValue, false otherwise.
    */
  bool isDoubleValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by DoubleValue. */
  void chooseDoubleValue();

  /** Returns the contents of the message's DateTimeValue item
    *
    * @return The contents of the DateTimeValue field
    */
  uci::type::DateTimeTypeValue getDateTimeValue() const override;

  /** Sets this choice's choice to be DateTimeValue and initializes DateTimeValue to be the specified value
    *
    * @param value The new value to set DateTimeValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setDateTimeValue(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DateTimeValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DateTimeValue, false otherwise.
    */
  bool isDateTimeValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by DateTimeValue. */
  void chooseDateTimeValue();

  /** Returns the contents of the message's DurationValue item
    *
    * @return The contents of the DurationValue field
    */
  uci::type::DurationTypeValue getDurationValue() const override;

  /** Sets this choice's choice to be DurationValue and initializes DurationValue to be the specified value
    *
    * @param value The new value to set DurationValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setDurationValue(uci::type::DurationTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DurationValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DurationValue, false otherwise.
    */
  bool isDurationValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by DurationValue. */
  void chooseDurationValue();

  /** Returns the contents of the message's TimeValue item
    *
    * @return The contents of the TimeValue field
    */
  uci::type::TimeTypeValue getTimeValue() const override;

  /** Sets this choice's choice to be TimeValue and initializes TimeValue to be the specified value
    *
    * @param value The new value to set TimeValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setTimeValue(uci::type::TimeTypeValue value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TimeValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TimeValue, false otherwise.
    */
  bool isTimeValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by TimeValue. */
  void chooseTimeValue();

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::QueryString4096Type& getStringValueCaseSensitive_() const;

  /** Returns the contents of the message's StringValueCaseSensitive item
    *
    * @return The contents of the StringValueCaseSensitive field
    */
  const uci::type::QueryString4096Type& getStringValueCaseSensitive() const override;

  /** Returns the contents of the message's StringValueCaseSensitive item
    *
    * @return The contents of the StringValueCaseSensitive field
    */
  uci::type::QueryString4096Type& getStringValueCaseSensitive() override;

  /** Sets this choice's choice to be StringValueCaseSensitive and initializes StringValueCaseSensitive to be the specified
    * value
    *
    * @param value The new value to set StringValueCaseSensitive to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setStringValueCaseSensitive(const uci::type::QueryString4096Type& value) override;

  /** Sets this choice's choice to be StringValueCaseSensitive and initializes StringValueCaseSensitive to be the specified
    * value
    *
    * @param value The new value to set StringValueCaseSensitive to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setStringValueCaseSensitive(const std::string& value) override;

  /** Sets this choice's choice to be StringValueCaseSensitive and initializes StringValueCaseSensitive to be the specified
    * value
    *
    * @param value The new value to set StringValueCaseSensitive to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setStringValueCaseSensitive(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by StringValueCaseSensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by StringValueCaseSensitive, false
    *      otherwise.
    */
  bool isStringValueCaseSensitive() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by StringValueCaseSensitive.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by StringValueCaseSensitive.
    */
  uci::type::QueryString4096Type& chooseStringValueCaseSensitive(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by StringValueCaseSensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by StringValueCaseSensitive.
    */
  uci::type::QueryString4096Type& chooseStringValueCaseSensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::QueryString4096Type& getStringValueCaseInsensitive_() const;

  /** Returns the contents of the message's StringValueCaseInsensitive item
    *
    * @return The contents of the StringValueCaseInsensitive field
    */
  const uci::type::QueryString4096Type& getStringValueCaseInsensitive() const override;

  /** Returns the contents of the message's StringValueCaseInsensitive item
    *
    * @return The contents of the StringValueCaseInsensitive field
    */
  uci::type::QueryString4096Type& getStringValueCaseInsensitive() override;

  /** Sets this choice's choice to be StringValueCaseInsensitive and initializes StringValueCaseInsensitive to be the
    * specified value
    *
    * @param value The new value to set StringValueCaseInsensitive to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setStringValueCaseInsensitive(const uci::type::QueryString4096Type& value) override;

  /** Sets this choice's choice to be StringValueCaseInsensitive and initializes StringValueCaseInsensitive to be the
    * specified value
    *
    * @param value The new value to set StringValueCaseInsensitive to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setStringValueCaseInsensitive(const std::string& value) override;

  /** Sets this choice's choice to be StringValueCaseInsensitive and initializes StringValueCaseInsensitive to be the
    * specified value
    *
    * @param value The new value to set StringValueCaseInsensitive to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setStringValueCaseInsensitive(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by StringValueCaseInsensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by StringValueCaseInsensitive,
    *      false otherwise.
    */
  bool isStringValueCaseInsensitive() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by StringValueCaseInsensitive.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by StringValueCaseInsensitive.
    */
  uci::type::QueryString4096Type& chooseStringValueCaseInsensitive(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by StringValueCaseInsensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by StringValueCaseInsensitive.
    */
  uci::type::QueryString4096Type& chooseStringValueCaseInsensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::SchemaComponentNameType& getEnumValue_() const;

  /** Returns the contents of the message's EnumValue item
    *
    * @return The contents of the EnumValue field
    */
  const uci::type::SchemaComponentNameType& getEnumValue() const override;

  /** Returns the contents of the message's EnumValue item
    *
    * @return The contents of the EnumValue field
    */
  uci::type::SchemaComponentNameType& getEnumValue() override;

  /** Sets this choice's choice to be EnumValue and initializes EnumValue to be the specified value
    *
    * @param value The new value to set EnumValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setEnumValue(const uci::type::SchemaComponentNameType& value) override;

  /** Sets this choice's choice to be EnumValue and initializes EnumValue to be the specified value
    *
    * @param value The new value to set EnumValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setEnumValue(const std::string& value) override;

  /** Sets this choice's choice to be EnumValue and initializes EnumValue to be the specified value
    *
    * @param value The new value to set EnumValue to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setEnumValue(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EnumValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EnumValue, false otherwise.
    */
  bool isEnumValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EnumValue.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EnumValue.
    */
  uci::type::SchemaComponentNameType& chooseEnumValue(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EnumValue.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EnumValue.
    */
  uci::type::SchemaComponentNameType& chooseEnumValue(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the HexBinaryValue field contained in this message fragment
    *
    * @return The const reference to the accessor to the HexBinaryValue field.
    */
  xs::HexBinary& getHexBinaryValue_() const;

  /** Returns the accessor to the HexBinaryValue field contained in this message fragment
    *
    * @return The reference to the accessor to the HexBinaryValue field.
    */
  const xs::HexBinary& getHexBinaryValue() const override;

  /** Returns the accessor to the HexBinaryValue field contained in this message fragment
    *
    * @return The reference to the accessor to the HexBinaryValue field.
    */
  xs::HexBinary& getHexBinaryValue() override;

  /** Sets this choice's choice to be hexBinaryValue and initializes hexBinaryValue to be the specified value. A deep copy
    * will be used by this method to set hexBinaryValue
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setHexBinaryValue(const xs::HexBinary& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by HexBinaryValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by HexBinaryValue, false otherwise.
    */
  bool isHexBinaryValue() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by HexBinaryValue.
    *
    * @return A reference to the accessor that provides access to the choice identified by HexBinaryValue.
    */
  xs::HexBinary& chooseHexBinaryValue() override;

  /** Returns the contents of the message's UUID_Value item
    *
    * @return The contents of the UUID_Value field
    */
  uci::base::UUID getUUID_Value() const override;

  /** Sets this choice's choice to be UUID_Value and initializes UUID_Value to be the specified value
    *
    * @param value The new value to set UUID_Value to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AtomicValueType& setUUID_Value(const uci::base::UUID& value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UUID_Value.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UUID_Value, false otherwise.
    */
  bool isUUID_Value() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by UUID_Value. */
  void chooseUUID_Value();

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<AtomicValueType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::AtomicValueType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::AtomicValueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::Boolean> booleanValue_Accessor;
  boost::optional<asb_xs::Byte> byteValue_Accessor;
  boost::optional<asb_xs::UnsignedByte> unsignedByteValue_Accessor;
  boost::optional<asb_xs::Short> shortValue_Accessor;
  boost::optional<asb_xs::UnsignedShort> unsignedShortValue_Accessor;
  boost::optional<asb_xs::Int> intValue_Accessor;
  boost::optional<asb_xs::UnsignedInt> unsignedIntValue_Accessor;
  boost::optional<asb_xs::Long> longValue_Accessor;
  boost::optional<asb_xs::Float> floatValue_Accessor;
  boost::optional<asb_xs::Double> doubleValue_Accessor;
  boost::optional<asb_xs::DateTime> dateTimeValue_Accessor;
  boost::optional<asb_xs::Duration> durationValue_Accessor;
  boost::optional<asb_xs::Time> timeValue_Accessor;
  std::unique_ptr<QueryString4096Type> stringValueCaseSensitive_Accessor;
  std::unique_ptr<QueryString4096Type> stringValueCaseInsensitive_Accessor;
  std::unique_ptr<SchemaComponentNameType> enumValue_Accessor;
  std::unique_ptr<asb_xs::HexBinary> hexBinaryValue_Accessor;
  boost::optional<uci::base::UUID> uUID_Value_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ATOMICVALUETYPE_H
