/** @file PlatformStatusSAM_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLATFORMSTATUSSAM_TYPE_H
#define ASB_UCI_TYPE_PLATFORMSTATUSSAM_TYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/CommunicationsImpairmentEnum.h"
#include "asb_uci/type/OperationalImpairmentEnum.h"
#include "asb_uci/type/RadiationModeEnum.h"
#include "asb_uci/type/SAM_ModeEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/PlatformStatusSAM_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Platform status details for SAM launch sites. */
class PlatformStatusSAM_Type : public virtual uci::type::PlatformStatusSAM_Type {
public:
  /** The constructor */
  PlatformStatusSAM_Type();

  /** The copy constructor
    *
    * @param rhs The PlatformStatusSAM_Type to copy from
    */
  PlatformStatusSAM_Type(const PlatformStatusSAM_Type& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlatformStatusSAM_Type to move from
    */
  PlatformStatusSAM_Type(PlatformStatusSAM_Type&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlatformStatusSAM_Type to copy from
    * @return The PlatformStatusSAM_Type that was assigned
    */
  PlatformStatusSAM_Type& operator=(const PlatformStatusSAM_Type& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlatformStatusSAM_Type to move from
    * @return The PlatformStatusSAM_Type that was assigned
    */
  PlatformStatusSAM_Type& operator=(PlatformStatusSAM_Type&& rhs) = delete;

  /** The destructor */
  virtual ~PlatformStatusSAM_Type();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlatformStatusSAM_Type whose contents are to be used to set this
    *      uci::type::PlatformStatusSAM_Type's contents.
    */
  void copy(const uci::type::PlatformStatusSAM_Type& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlatformStatusSAM_Type whose contents are to be used to set this
    *      uci::type::PlatformStatusSAM_Type's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlatformStatusSAM_Type& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getHotInventory() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setHotInventory(xs::UnsignedInt value) override;

  /** Returns whether this optional field HotInventoryis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasHotInventory() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& clearHotInventory() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getColdInventory() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setColdInventory(xs::UnsignedInt value) override;

  /** Returns whether this optional field ColdInventoryis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasColdInventory() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& clearColdInventory() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAM_ModeEnum& getSAM_Mode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SAM_ModeEnum& getSAM_Mode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAM_ModeEnum& getSAM_Mode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setSAM_Mode(const uci::type::SAM_ModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setSAM_Mode(uci::type::SAM_ModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field SAM_Modeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSAM_Mode() const noexcept override;

  /** Enables the optional field such that getSAM_Mode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SAM_ModeEnum& enableSAM_Mode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& clearSAM_Mode() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperationalImpairmentEnum& getOperationalImpairment_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OperationalImpairmentEnum& getOperationalImpairment() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperationalImpairmentEnum& getOperationalImpairment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setOperationalImpairment(const uci::type::OperationalImpairmentEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setOperationalImpairment(uci::type::OperationalImpairmentEnum::EnumerationItem value) override;

  /** Returns whether this optional field OperationalImpairmentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOperationalImpairment() const noexcept override;

  /** Enables the optional field such that getOperationalImpairment will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperationalImpairmentEnum& enableOperationalImpairment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& clearOperationalImpairment() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommunicationsImpairmentEnum& getCommunicationsImpairment_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommunicationsImpairmentEnum& getCommunicationsImpairment() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommunicationsImpairmentEnum& getCommunicationsImpairment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setCommunicationsImpairment(const uci::type::CommunicationsImpairmentEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setCommunicationsImpairment(uci::type::CommunicationsImpairmentEnum::EnumerationItem value) override;

  /** Returns whether this optional field CommunicationsImpairmentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCommunicationsImpairment() const noexcept override;

  /** Enables the optional field such that getCommunicationsImpairment will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommunicationsImpairmentEnum& enableCommunicationsImpairment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& clearCommunicationsImpairment() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getControlPositions() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setControlPositions(xs::UnsignedInt value) override;

  /** Returns whether this optional field ControlPositionsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasControlPositions() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& clearControlPositions() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadiationModeEnum& getRadiationMode_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RadiationModeEnum& getRadiationMode() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadiationModeEnum& getRadiationMode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setRadiationMode(const uci::type::RadiationModeEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& setRadiationMode(uci::type::RadiationModeEnum::EnumerationItem value) override;

  /** Returns whether this optional field RadiationModeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRadiationMode() const noexcept override;

  /** Enables the optional field such that getRadiationMode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RadiationModeEnum& enableRadiationMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlatformStatusSAM_Type& clearRadiationMode() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlatformStatusSAM_Type> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlatformStatusSAM_Type& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlatformStatusSAM_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::UnsignedInt> hotInventory_Accessor;
  boost::optional<asb_xs::UnsignedInt> coldInventory_Accessor;
  std::unique_ptr<SAM_ModeEnum> sAM_Mode_Accessor;
  std::unique_ptr<OperationalImpairmentEnum> operationalImpairment_Accessor;
  std::unique_ptr<CommunicationsImpairmentEnum> communicationsImpairment_Accessor;
  boost::optional<asb_xs::UnsignedInt> controlPositions_Accessor;
  std::unique_ptr<RadiationModeEnum> radiationMode_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLATFORMSTATUSSAM_TYPE_H
