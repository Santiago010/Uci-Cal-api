/** @file AccessAssessmentRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ACCESSASSESSMENTREQUESTMDT_H
#define ASB_UCI_TYPE_ACCESSASSESSMENTREQUESTMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/AccessEffortEnum.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/RepeatEnum.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessAssessmentRequestMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityTaxonomyUniversalType;
class DateTimeRangeType;
class IdentityKindAssetType;

/** See annotations in child elements and messages/elements that use this type for details. */
class AccessAssessmentRequestMDT : public virtual uci::type::AccessAssessmentRequestMDT, public virtual RequestBaseType {
public:
  /** Indicates a subject of the AccessAssessment; a column to include in the access assessment table result. See
    * AccessAssessment message for more insight into table structure. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using SubjectObject = asb_uci::base::BoundedList<uci::type::IdentityKindAssetType, uci::type::accessorType::identityKindAssetType, asb_uci::type::IdentityKindAssetType>;

  /** Indicates an object to assess for each sibling SubjectObject; a row to include in the access assessment table result.
    * See AccessAssessment message for more insight into table structure. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using ObjectToAssess = asb_uci::base::BoundedList<uci::type::IdentityKindAssetType, uci::type::accessorType::identityKindAssetType, asb_uci::type::IdentityKindAssetType>;

  /** Indicates a modeled "level of effort" to assess per capability per Object. Each Subject-Object pair is a cell in the
    * resulting access assessment table. Each cell can include an access assessment dimension per modeled level of effort
    * indicated here. See AccessAssessment message for more insight into table structure. List size for this element is
    * based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 5]
    */
  using EffortToAssess = asb_uci::base::BoundedList<uci::type::AccessEffortEnum, uci::type::accessorType::accessEffortEnum, asb_uci::type::AccessEffortEnum>;

  /** The constructor */
  AccessAssessmentRequestMDT();

  /** The copy constructor
    *
    * @param rhs The AccessAssessmentRequestMDT to copy from
    */
  AccessAssessmentRequestMDT(const AccessAssessmentRequestMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The AccessAssessmentRequestMDT to move from
    */
  AccessAssessmentRequestMDT(AccessAssessmentRequestMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The AccessAssessmentRequestMDT to copy from
    * @return The AccessAssessmentRequestMDT that was assigned
    */
  AccessAssessmentRequestMDT& operator=(const AccessAssessmentRequestMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The AccessAssessmentRequestMDT to move from
    * @return The AccessAssessmentRequestMDT that was assigned
    */
  AccessAssessmentRequestMDT& operator=(AccessAssessmentRequestMDT&& rhs) = delete;

  /** The destructor */
  ~AccessAssessmentRequestMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AccessAssessmentRequestMDT whose contents are to be used to set this
    *      uci::type::AccessAssessmentRequestMDT's contents.
    */
  void copy(const uci::type::AccessAssessmentRequestMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::AccessAssessmentRequestMDT whose contents are to be used to set this
    *      uci::type::AccessAssessmentRequestMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::AccessAssessmentRequestMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's RequestFrequency field
    *
    * @return The contents of the RequestFrequency field
    */
  const uci::type::RepeatEnum& getRequestFrequency() const override;

  /** Returns the contents of the message's RequestFrequency field
    *
    * @return The contents of the RequestFrequency field
    */
  uci::type::RepeatEnum& getRequestFrequency() override;

  /** Sets the contents of the message's RequestFrequency field
    *
    * @param accessor The accessor to use to set the RequestFrequency field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setRequestFrequency(const uci::type::RepeatEnum& accessor) override;

  /** Sets the contents of the message's RequestFrequency field
    *
    * @param value The new value to set the RequestFrequency field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setRequestFrequency(uci::type::RepeatEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DateTimeRangeType& getAssessmentPeriod_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DateTimeRangeType& getAssessmentPeriod() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DateTimeRangeType& getAssessmentPeriod() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setAssessmentPeriod(const uci::type::DateTimeRangeType& accessor) override;

  /** Returns whether this optional field AssessmentPeriodis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssessmentPeriod() const noexcept override;

  /** Enables the optional field such that getAssessmentPeriod will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DateTimeRangeType& enableAssessmentPeriod(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& clearAssessmentPeriod() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getAssessmentInterval() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setAssessmentInterval(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field AssessmentIntervalis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssessmentInterval() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& clearAssessmentInterval() noexcept override;

  /** Returns the accessor to the SubjectObject field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubjectObject field.
    */
  const uci::type::AccessAssessmentRequestMDT::SubjectObject& getSubjectObject() const override;

  /** Returns the accessor to the SubjectObject field contained in this message fragment
    *
    * @return The reference to the accessor to the SubjectObject field.
    */
  uci::type::AccessAssessmentRequestMDT::SubjectObject& getSubjectObject() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setSubjectObject(const uci::type::AccessAssessmentRequestMDT::SubjectObject& accessor) override;

  /** Returns the accessor to the ObjectToAssess field contained in this message fragment
    *
    * @return The const reference to the accessor to the ObjectToAssess field.
    */
  const uci::type::AccessAssessmentRequestMDT::ObjectToAssess& getObjectToAssess() const override;

  /** Returns the accessor to the ObjectToAssess field contained in this message fragment
    *
    * @return The reference to the accessor to the ObjectToAssess field.
    */
  uci::type::AccessAssessmentRequestMDT::ObjectToAssess& getObjectToAssess() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setObjectToAssess(const uci::type::AccessAssessmentRequestMDT::ObjectToAssess& accessor) override;

  /** Returns the accessor to the EffortToAssess field contained in this message fragment
    *
    * @return The const reference to the accessor to the EffortToAssess field.
    */
  const uci::type::AccessAssessmentRequestMDT::EffortToAssess& getEffortToAssess() const override;

  /** Returns the accessor to the EffortToAssess field contained in this message fragment
    *
    * @return The reference to the accessor to the EffortToAssess field.
    */
  uci::type::AccessAssessmentRequestMDT::EffortToAssess& getEffortToAssess() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setEffortToAssess(const uci::type::AccessAssessmentRequestMDT::EffortToAssess& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityTaxonomyUniversalType& getCapabilitiesToAssess_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityTaxonomyUniversalType& getCapabilitiesToAssess() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityTaxonomyUniversalType& getCapabilitiesToAssess() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setCapabilitiesToAssess(const uci::type::CapabilityTaxonomyUniversalType& accessor) override;

  /** Returns whether this optional field CapabilitiesToAssessis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCapabilitiesToAssess() const noexcept override;

  /** Enables the optional field such that getCapabilitiesToAssess will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityTaxonomyUniversalType& enableCapabilitiesToAssess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& clearCapabilitiesToAssess() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getAssessmentName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString32Type& getAssessmentName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getAssessmentName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setAssessmentName(const uci::type::VisibleString32Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setAssessmentName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setAssessmentName(const char* value) override;

  /** Returns whether this optional field assessmentName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAssessmentName() const noexcept override;

  /** Enables the optional field such that getAssessmentName will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& enableAssessmentName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& clearAssessmentName() noexcept override;

  /** Returns the contents of the message's ResultsInAccessAssessmentMessage field
    *
    * @return The contents of the ResultsInAccessAssessmentMessage field
    */
  xs::Boolean getResultsInAccessAssessmentMessage() const override;

  /** Sets the contents of the message's ResultsInAccessAssessmentMessage field
    *
    * @param value The new value to set the ResultsInAccessAssessmentMessage field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::AccessAssessmentRequestMDT& setResultsInAccessAssessmentMessage(xs::Boolean value) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<AccessAssessmentRequestMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::AccessAssessmentRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::AccessAssessmentRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<RepeatEnum> requestFrequency_Accessor;
  std::unique_ptr<DateTimeRangeType> assessmentPeriod_Accessor;
  boost::optional<DurationTypeValue> assessmentInterval_Accessor;
  std::unique_ptr<SubjectObject> subjectObject_Accessor;
  std::unique_ptr<ObjectToAssess> objectToAssess_Accessor;
  std::unique_ptr<EffortToAssess> effortToAssess_Accessor;
  std::unique_ptr<CapabilityTaxonomyUniversalType> capabilitiesToAssess_Accessor;
  std::unique_ptr<VisibleString32Type> assessmentName_Accessor;
  asb_xs::Boolean resultsInAccessAssessmentMessage_Accessor{false};

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ACCESSASSESSMENTREQUESTMDT_H
