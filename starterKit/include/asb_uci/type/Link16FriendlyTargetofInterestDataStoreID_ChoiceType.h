/** @file Link16FriendlyTargetofInterestDataStoreID_ChoiceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_LINK16FRIENDLYTARGETOFINTERESTDATASTOREID_CHOICETYPE_H
#define ASB_UCI_TYPE_LINK16FRIENDLYTARGETOFINTERESTDATASTOREID_CHOICETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16FriendlyTargetofInterestDataStoreID_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EntityID_Type;
class OpLineID_Type;
class OpPointID_Type;
class OpVolumeID_Type;
class OpZoneID_Type;
class SystemID_Type;

/** Stores the ID of a Friendly Target of Interest in a Link16 setting. */
class Link16FriendlyTargetofInterestDataStoreID_ChoiceType : public virtual uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType {
public:
  /** Stores the UCI IDs of entities. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using EntityID = asb_uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type, asb_uci::type::EntityID_Type>;

  /** Stores the UCI IDs of OpLines. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using OpLineID = asb_uci::base::BoundedList<uci::type::OpLineID_Type, uci::type::accessorType::opLineID_Type, asb_uci::type::OpLineID_Type>;

  /** Stores the UCI IDs of OpPoints. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using OpPointID = asb_uci::base::BoundedList<uci::type::OpPointID_Type, uci::type::accessorType::opPointID_Type, asb_uci::type::OpPointID_Type>;

  /** Stores the UCI IDs of OpZones. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using OpZoneID = asb_uci::base::BoundedList<uci::type::OpZoneID_Type, uci::type::accessorType::opZoneID_Type, asb_uci::type::OpZoneID_Type>;

  /** Stores the UCI IDs of OpVolumes. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using OpVolumeID = asb_uci::base::BoundedList<uci::type::OpVolumeID_Type, uci::type::accessorType::opVolumeID_Type, asb_uci::type::OpVolumeID_Type>;

  /** Stores the UCI IDs of subsystems. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using SystemID = asb_uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type, asb_uci::type::SystemID_Type>;

  /** The constructor */
  Link16FriendlyTargetofInterestDataStoreID_ChoiceType();

  /** The copy constructor
    *
    * @param rhs The Link16FriendlyTargetofInterestDataStoreID_ChoiceType to copy from
    */
  Link16FriendlyTargetofInterestDataStoreID_ChoiceType(const Link16FriendlyTargetofInterestDataStoreID_ChoiceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The Link16FriendlyTargetofInterestDataStoreID_ChoiceType to move from
    */
  Link16FriendlyTargetofInterestDataStoreID_ChoiceType(Link16FriendlyTargetofInterestDataStoreID_ChoiceType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The Link16FriendlyTargetofInterestDataStoreID_ChoiceType to copy from
    * @return The Link16FriendlyTargetofInterestDataStoreID_ChoiceType that was assigned
    */
  Link16FriendlyTargetofInterestDataStoreID_ChoiceType& operator=(const Link16FriendlyTargetofInterestDataStoreID_ChoiceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The Link16FriendlyTargetofInterestDataStoreID_ChoiceType to move from
    * @return The Link16FriendlyTargetofInterestDataStoreID_ChoiceType that was assigned
    */
  Link16FriendlyTargetofInterestDataStoreID_ChoiceType& operator=(Link16FriendlyTargetofInterestDataStoreID_ChoiceType&& rhs) = delete;

  /** The destructor */
  virtual ~Link16FriendlyTargetofInterestDataStoreID_ChoiceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType whose contents are to be used to
    *      set this uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType's contents.
    */
  void copy(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType whose contents are to be used to
    *      set this uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::Link16FriendlyTargetofInterestDataStoreID_ChoiceTypeChoice getLink16FriendlyTargetofInterestDataStoreID_ChoiceTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getLink16FriendlyTargetofInterestDataStoreID_ChoiceTypeChoiceOrdinal() will be the ordinal specified when this method
    * was invoked. In addition, the access methods associated with the chosen element will be enabled and will provide
    * access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& setLink16FriendlyTargetofInterestDataStoreID_ChoiceTypeChoiceOrdinal(uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::Link16FriendlyTargetofInterestDataStoreID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EntityID item contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::EntityID& getEntityID_() const;

  /** Returns the accessor to the EntityID item contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityID item.
    */
  const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::EntityID& getEntityID() const override;

  /** Returns the accessor to the EntityID item contained in this message fragment
    *
    * @return The reference to the accessor to the EntityID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::EntityID& getEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& setEntityID(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::EntityID& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EntityID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EntityID, false otherwise.
    */
  bool isEntityID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EntityID.
    *
    * @return A reference to the accessor that provides access to the choice identified by EntityID.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::EntityID& chooseEntityID() override;

  /** Returns the accessor to the OpLineID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpLineID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpLineID& getOpLineID_() const;

  /** Returns the accessor to the OpLineID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpLineID item.
    */
  const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpLineID& getOpLineID() const override;

  /** Returns the accessor to the OpLineID item contained in this message fragment
    *
    * @return The reference to the accessor to the OpLineID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpLineID& getOpLineID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& setOpLineID(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpLineID& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpLineID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpLineID, false otherwise.
    */
  bool isOpLineID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpLineID.
    *
    * @return A reference to the accessor that provides access to the choice identified by OpLineID.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpLineID& chooseOpLineID() override;

  /** Returns the accessor to the OpPointID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpPointID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpPointID& getOpPointID_() const;

  /** Returns the accessor to the OpPointID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpPointID item.
    */
  const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpPointID& getOpPointID() const override;

  /** Returns the accessor to the OpPointID item contained in this message fragment
    *
    * @return The reference to the accessor to the OpPointID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpPointID& getOpPointID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& setOpPointID(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpPointID& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpPointID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpPointID, false otherwise.
    */
  bool isOpPointID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpPointID.
    *
    * @return A reference to the accessor that provides access to the choice identified by OpPointID.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpPointID& chooseOpPointID() override;

  /** Returns the accessor to the OpZoneID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpZoneID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpZoneID& getOpZoneID_() const;

  /** Returns the accessor to the OpZoneID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpZoneID item.
    */
  const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpZoneID& getOpZoneID() const override;

  /** Returns the accessor to the OpZoneID item contained in this message fragment
    *
    * @return The reference to the accessor to the OpZoneID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpZoneID& getOpZoneID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& setOpZoneID(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpZoneID& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpZoneID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpZoneID, false otherwise.
    */
  bool isOpZoneID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpZoneID.
    *
    * @return A reference to the accessor that provides access to the choice identified by OpZoneID.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpZoneID& chooseOpZoneID() override;

  /** Returns the accessor to the OpVolumeID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpVolumeID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpVolumeID& getOpVolumeID_() const;

  /** Returns the accessor to the OpVolumeID item contained in this message fragment
    *
    * @return The const reference to the accessor to the OpVolumeID item.
    */
  const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpVolumeID& getOpVolumeID() const override;

  /** Returns the accessor to the OpVolumeID item contained in this message fragment
    *
    * @return The reference to the accessor to the OpVolumeID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpVolumeID& getOpVolumeID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& setOpVolumeID(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpVolumeID& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpVolumeID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpVolumeID, false otherwise.
    */
  bool isOpVolumeID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpVolumeID.
    *
    * @return A reference to the accessor that provides access to the choice identified by OpVolumeID.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::OpVolumeID& chooseOpVolumeID() override;

  /** Returns the accessor to the SystemID item contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::SystemID& getSystemID_() const;

  /** Returns the accessor to the SystemID item contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemID item.
    */
  const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::SystemID& getSystemID() const override;

  /** Returns the accessor to the SystemID item contained in this message fragment
    *
    * @return The reference to the accessor to the SystemID item.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::SystemID& getSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& setSystemID(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::SystemID& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SystemID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SystemID, false otherwise.
    */
  bool isSystemID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the choice identified by SystemID.
    */
  uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::SystemID& chooseSystemID() override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<Link16FriendlyTargetofInterestDataStoreID_ChoiceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EntityID> entityID_Accessor;
  std::unique_ptr<OpLineID> opLineID_Accessor;
  std::unique_ptr<OpPointID> opPointID_Accessor;
  std::unique_ptr<OpZoneID> opZoneID_Accessor;
  std::unique_ptr<OpVolumeID> opVolumeID_Accessor;
  std::unique_ptr<SystemID> systemID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_LINK16FRIENDLYTARGETOFINTERESTDATASTOREID_CHOICETYPE_H
