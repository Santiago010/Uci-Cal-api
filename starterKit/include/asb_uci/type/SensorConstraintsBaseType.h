/** @file SensorConstraintsBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SENSORCONSTRAINTSBASETYPE_H
#define ASB_UCI_TYPE_SENSORCONSTRAINTSBASETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/base/UnsignedShortAccessor.h"
#include "asb_uci/type/EntityBasingEnum.h"
#include "asb_uci/type/IEEE_FrequencyBandEnum.h"
#include "asb_uci/type/SensorCategoryEnum.h"
#include "asb_uci/type/SensorSpectrumEnum.h"
#include "asb_uci/type/SensorTypeEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/SensorConstraintsBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CountryCodeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SensorConstraintsBaseType : public virtual uci::type::SensorConstraintsBaseType {
public:
  /** Indicates a type of sensor. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 8]
    */
  using SensorType = asb_uci::base::BoundedList<uci::type::SensorTypeEnum, uci::type::accessorType::sensorTypeEnum, asb_uci::type::SensorTypeEnum>;

  /** Indicates an EOIR spectrum of a sensor. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 14]
    */
  using EOIR_Spectrum = asb_uci::base::BoundedList<uci::type::SensorSpectrumEnum, uci::type::accessorType::sensorSpectrumEnum, asb_uci::type::SensorSpectrumEnum>;

  /** Indicates the radio frequency of a sensor. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 12]
    */
  using RF_Spectrum = asb_uci::base::BoundedList<uci::type::IEEE_FrequencyBandEnum, uci::type::accessorType::iEEE_FrequencyBandEnum, asb_uci::type::IEEE_FrequencyBandEnum>;

  /** Indicates a logical grouping of sensors with certain owner/operator or sensor characteristics. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 10]
    */
  using SensorCategory = asb_uci::base::BoundedList<uci::type::SensorCategoryEnum, uci::type::accessorType::sensorCategoryEnum, asb_uci::type::SensorCategoryEnum>;

  /** Indicates the Air Force Space Command ID of a sensor system. The unique identifier of a sensor or site as assigned by
    * Air Force Space Command's AFSPC/A3Z and 614th AOC personnel as the authoritative source for sensor numbers and site
    * identifiers. A common range is [0,999]. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SensorSystemIdentity = asb_uci::base::BoundedList<uci::base::UnsignedShortAccessor, uci::base::accessorType::unsignedShortAccessor, asb_uci::base::UnsignedShortAccessor>;

  /** Indicates the geographic/orbital domain of operations of a sensor system. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 11]
    */
  using SensorBasing = asb_uci::base::BoundedList<uci::type::EntityBasingEnum, uci::type::accessorType::entityBasingEnum, asb_uci::type::EntityBasingEnum>;

  /** The constructor */
  SensorConstraintsBaseType();

  /** The copy constructor
    *
    * @param rhs The SensorConstraintsBaseType to copy from
    */
  SensorConstraintsBaseType(const SensorConstraintsBaseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SensorConstraintsBaseType to move from
    */
  SensorConstraintsBaseType(SensorConstraintsBaseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SensorConstraintsBaseType to copy from
    * @return The SensorConstraintsBaseType that was assigned
    */
  SensorConstraintsBaseType& operator=(const SensorConstraintsBaseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SensorConstraintsBaseType to move from
    * @return The SensorConstraintsBaseType that was assigned
    */
  SensorConstraintsBaseType& operator=(SensorConstraintsBaseType&& rhs) = delete;

  /** The destructor */
  virtual ~SensorConstraintsBaseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SensorConstraintsBaseType whose contents are to be used to set this
    *      uci::type::SensorConstraintsBaseType's contents.
    */
  void copy(const uci::type::SensorConstraintsBaseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SensorConstraintsBaseType whose contents are to be used to set this
    *      uci::type::SensorConstraintsBaseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SensorConstraintsBaseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SensorType field contained in this message fragment
    *
    * @return The const reference to the accessor to the SensorType field.
    */
  const uci::type::SensorConstraintsBaseType::SensorType& getSensorType() const override;

  /** Returns the accessor to the SensorType field contained in this message fragment
    *
    * @return The reference to the accessor to the SensorType field.
    */
  uci::type::SensorConstraintsBaseType::SensorType& getSensorType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& setSensorType(const uci::type::SensorConstraintsBaseType::SensorType& accessor) override;

  /** Returns the accessor to the EOIR_Spectrum field contained in this message fragment
    *
    * @return The const reference to the accessor to the EOIR_Spectrum field.
    */
  const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& getEOIR_Spectrum() const override;

  /** Returns the accessor to the EOIR_Spectrum field contained in this message fragment
    *
    * @return The reference to the accessor to the EOIR_Spectrum field.
    */
  uci::type::SensorConstraintsBaseType::EOIR_Spectrum& getEOIR_Spectrum() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& setEOIR_Spectrum(const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& accessor) override;

  /** Returns the accessor to the RF_Spectrum field contained in this message fragment
    *
    * @return The const reference to the accessor to the RF_Spectrum field.
    */
  const uci::type::SensorConstraintsBaseType::RF_Spectrum& getRF_Spectrum() const override;

  /** Returns the accessor to the RF_Spectrum field contained in this message fragment
    *
    * @return The reference to the accessor to the RF_Spectrum field.
    */
  uci::type::SensorConstraintsBaseType::RF_Spectrum& getRF_Spectrum() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& setRF_Spectrum(const uci::type::SensorConstraintsBaseType::RF_Spectrum& accessor) override;

  /** Returns the accessor to the SensorCategory field contained in this message fragment
    *
    * @return The const reference to the accessor to the SensorCategory field.
    */
  const uci::type::SensorConstraintsBaseType::SensorCategory& getSensorCategory() const override;

  /** Returns the accessor to the SensorCategory field contained in this message fragment
    *
    * @return The reference to the accessor to the SensorCategory field.
    */
  uci::type::SensorConstraintsBaseType::SensorCategory& getSensorCategory() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& setSensorCategory(const uci::type::SensorConstraintsBaseType::SensorCategory& accessor) override;

  /** Returns the accessor to the SensorSystemIdentity field contained in this message fragment
    *
    * @return The const reference to the accessor to the SensorSystemIdentity field.
    */
  const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& getSensorSystemIdentity() const override;

  /** Returns the accessor to the SensorSystemIdentity field contained in this message fragment
    *
    * @return The reference to the accessor to the SensorSystemIdentity field.
    */
  uci::type::SensorConstraintsBaseType::SensorSystemIdentity& getSensorSystemIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& setSensorSystemIdentity(const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& accessor) override;

  /** Returns the accessor to the SensorBasing field contained in this message fragment
    *
    * @return The const reference to the accessor to the SensorBasing field.
    */
  const uci::type::SensorConstraintsBaseType::SensorBasing& getSensorBasing() const override;

  /** Returns the accessor to the SensorBasing field contained in this message fragment
    *
    * @return The reference to the accessor to the SensorBasing field.
    */
  uci::type::SensorConstraintsBaseType::SensorBasing& getSensorBasing() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& setSensorBasing(const uci::type::SensorConstraintsBaseType::SensorBasing& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getOwnerOperatorCountry_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CountryCodeType& getOwnerOperatorCountry() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getOwnerOperatorCountry() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& setOwnerOperatorCountry(const uci::type::CountryCodeType& accessor) override;

  /** Returns whether this optional field OwnerOperatorCountryis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOwnerOperatorCountry() const noexcept override;

  /** Enables the optional field such that getOwnerOperatorCountry will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& enableOwnerOperatorCountry(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SensorConstraintsBaseType& clearOwnerOperatorCountry() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SensorConstraintsBaseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorConstraintsBaseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SensorConstraintsBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SensorType> sensorType_Accessor;
  std::unique_ptr<EOIR_Spectrum> eOIR_Spectrum_Accessor;
  std::unique_ptr<RF_Spectrum> rF_Spectrum_Accessor;
  std::unique_ptr<SensorCategory> sensorCategory_Accessor;
  std::unique_ptr<SensorSystemIdentity> sensorSystemIdentity_Accessor;
  std::unique_ptr<SensorBasing> sensorBasing_Accessor;
  std::unique_ptr<CountryCodeType> ownerOperatorCountry_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SENSORCONSTRAINTSBASETYPE_H
