/** @file CommCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMCAPABILITYTYPE_H
#define ASB_UCI_TYPE_COMMCAPABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommConnectionCommandEnum.h"
#include "asb_uci/type/NetworkLinkActionTypeEnum.h"
#include "uci/type/CommCapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CapabilityCommandRankingType;
class CapabilityID_Type;
class CommControlType;
class CommLinkPortMapType;
class CommProfileID_Type;
class CommWaveformCapabilityCommandPET;
class CryptoLocationType;
class CryptoRolloverCommandType;
class LinkConnectionRequestType;
class NetworkLinkID_Type;
class SecurityInformationType;
class SubsystemID_Type;
class VerboseStatusType;

/** See annotations in child elements and messages/elements that use this type for details. */
class CommCapabilityType : public virtual uci::type::CommCapabilityType {
public:
  /** Indicates a Capability instance which the communication effectivity has been allocated to. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  using CapabilityID = asb_uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type, asb_uci::type::CapabilityID_Type>;

  /** Allows the Communication Planner to apply the key at a specified slot. Such as selecting the appropriate VINSON Key.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CryptoKey = asb_uci::base::BoundedList<uci::type::CryptoLocationType, uci::type::accessorType::cryptoLocationType, asb_uci::type::CryptoLocationType>;

  /** Allows the Communication Planner to Zeroize crypto slots. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CryptoZeroize = asb_uci::base::BoundedList<uci::type::CryptoLocationType, uci::type::accessorType::cryptoLocationType, asb_uci::type::CryptoLocationType>;

  /** Indicates a command to change the connection status of the individual data links managed by the waveform. Generally,
    * a link's connection status must be CONNECTED for the waveform to transmit payload data over the communication medium
    * or for the waveform to receive transmissions from the communication medium. Note that this parameter is not available
    * until after a CommActivity is created and may not be available until the waveform has joined the network.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using LinkConnectionRequest = asb_uci::base::BoundedList<uci::type::LinkConnectionRequestType, uci::type::accessorType::linkConnectionRequestType, asb_uci::type::LinkConnectionRequestType>;

  /** The constructor */
  CommCapabilityType();

  /** The copy constructor
    *
    * @param rhs The CommCapabilityType to copy from
    */
  CommCapabilityType(const CommCapabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommCapabilityType to move from
    */
  CommCapabilityType(CommCapabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommCapabilityType to copy from
    * @return The CommCapabilityType that was assigned
    */
  CommCapabilityType& operator=(const CommCapabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommCapabilityType to move from
    * @return The CommCapabilityType that was assigned
    */
  CommCapabilityType& operator=(CommCapabilityType&& rhs) = delete;

  /** The destructor */
  virtual ~CommCapabilityType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommCapabilityType whose contents are to be used to set this
    *      uci::type::CommCapabilityType's contents.
    */
  void copy(const uci::type::CommCapabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommCapabilityType whose contents are to be used to set this
    *      uci::type::CommCapabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommCapabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's Action field
    *
    * @return The contents of the Action field
    */
  const uci::type::NetworkLinkActionTypeEnum& getAction() const override;

  /** Returns the contents of the message's Action field
    *
    * @return The contents of the Action field
    */
  uci::type::NetworkLinkActionTypeEnum& getAction() override;

  /** Sets the contents of the message's Action field
    *
    * @param accessor The accessor to use to set the Action field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setAction(const uci::type::NetworkLinkActionTypeEnum& accessor) override;

  /** Sets the contents of the message's Action field
    *
    * @param value The new value to set the Action field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setAction(uci::type::NetworkLinkActionTypeEnum::EnumerationItem value) override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityID field.
    */
  const uci::type::CommCapabilityType::CapabilityID& getCapabilityID() const override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityID field.
    */
  uci::type::CommCapabilityType::CapabilityID& getCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setCapabilityID(const uci::type::CommCapabilityType::CapabilityID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& getSubsystemID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SubsystemID_Type& getSubsystemID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& getSubsystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setSubsystemID(const uci::type::SubsystemID_Type& accessor) override;

  /** Returns whether this optional field SubsystemIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubsystemID() const noexcept override;

  /** Enables the optional field such that getSubsystemID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SubsystemID_Type& enableSubsystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearSubsystemID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandRankingType& getRanking_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityCommandRankingType& getRanking() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandRankingType& getRanking() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setRanking(const uci::type::CapabilityCommandRankingType& accessor) override;

  /** Returns whether this optional field Rankingis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRanking() const noexcept override;

  /** Enables the optional field such that getRanking will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityCommandRankingType& enableRanking(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearRanking() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SecurityInformationType& getClassification_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::SecurityInformationType& getClassification() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SecurityInformationType& getClassification() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setClassification(const uci::type::SecurityInformationType& accessor) override;

  /** Returns whether this optional field Classificationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasClassification() const noexcept override;

  /** Enables the optional field such that getClassification will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::SecurityInformationType& enableClassification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearClassification() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionCommandEnum& getConnectionRequest_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommConnectionCommandEnum& getConnectionRequest() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionCommandEnum& getConnectionRequest() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setConnectionRequest(const uci::type::CommConnectionCommandEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setConnectionRequest(uci::type::CommConnectionCommandEnum::EnumerationItem value) override;

  /** Returns whether this optional field ConnectionRequestis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConnectionRequest() const noexcept override;

  /** Enables the optional field such that getConnectionRequest will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommConnectionCommandEnum& enableConnectionRequest(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearConnectionRequest() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getActivateProfileID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommProfileID_Type& getActivateProfileID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getActivateProfileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setActivateProfileID(const uci::type::CommProfileID_Type& accessor) override;

  /** Returns whether this optional field ActivateProfileIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivateProfileID() const noexcept override;

  /** Enables the optional field such that getActivateProfileID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& enableActivateProfileID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearActivateProfileID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& getNetworkLinkID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NetworkLinkID_Type& getNetworkLinkID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& getNetworkLinkID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) override;

  /** Returns whether this optional field NetworkLinkIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNetworkLinkID() const noexcept override;

  /** Enables the optional field such that getNetworkLinkID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NetworkLinkID_Type& enableNetworkLinkID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearNetworkLinkID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommControlType& getCommonSettings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommControlType& getCommonSettings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommControlType& getCommonSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setCommonSettings(const uci::type::CommControlType& accessor) override;

  /** Returns whether this optional field CommonSettingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCommonSettings() const noexcept override;

  /** Enables the optional field such that getCommonSettings will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommControlType& enableCommonSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearCommonSettings() noexcept override;

  /** Returns the accessor to the CryptoKey field contained in this message fragment
    *
    * @return The const reference to the accessor to the CryptoKey field.
    */
  const uci::type::CommCapabilityType::CryptoKey& getCryptoKey() const override;

  /** Returns the accessor to the CryptoKey field contained in this message fragment
    *
    * @return The reference to the accessor to the CryptoKey field.
    */
  uci::type::CommCapabilityType::CryptoKey& getCryptoKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setCryptoKey(const uci::type::CommCapabilityType::CryptoKey& accessor) override;

  /** Returns the accessor to the CryptoZeroize field contained in this message fragment
    *
    * @return The const reference to the accessor to the CryptoZeroize field.
    */
  const uci::type::CommCapabilityType::CryptoZeroize& getCryptoZeroize() const override;

  /** Returns the accessor to the CryptoZeroize field contained in this message fragment
    *
    * @return The reference to the accessor to the CryptoZeroize field.
    */
  uci::type::CommCapabilityType::CryptoZeroize& getCryptoZeroize() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setCryptoZeroize(const uci::type::CommCapabilityType::CryptoZeroize& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CryptoRolloverCommandType& getCryptoRollover_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CryptoRolloverCommandType& getCryptoRollover() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CryptoRolloverCommandType& getCryptoRollover() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setCryptoRollover(const uci::type::CryptoRolloverCommandType& accessor) override;

  /** Returns whether this optional field CryptoRolloveris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCryptoRollover() const noexcept override;

  /** Enables the optional field such that getCryptoRollover will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CryptoRolloverCommandType& enableCryptoRollover(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearCryptoRollover() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLinkPortMapType& getLinkPortAssignments_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommLinkPortMapType& getLinkPortAssignments() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLinkPortMapType& getLinkPortAssignments() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setLinkPortAssignments(const uci::type::CommLinkPortMapType& accessor) override;

  /** Returns whether this optional field LinkPortAssignmentsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLinkPortAssignments() const noexcept override;

  /** Enables the optional field such that getLinkPortAssignments will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommLinkPortMapType& enableLinkPortAssignments(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearLinkPortAssignments() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& getVerboseStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VerboseStatusType& getVerboseStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& getVerboseStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setVerboseStatus(const uci::type::VerboseStatusType& accessor) override;

  /** Returns whether this optional field VerboseStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVerboseStatus() const noexcept override;

  /** Enables the optional field such that getVerboseStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VerboseStatusType& enableVerboseStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearVerboseStatus() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommWaveformCapabilityCommandPET& getWaveformSpecificSettings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommWaveformCapabilityCommandPET& getWaveformSpecificSettings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommWaveformCapabilityCommandPET& getWaveformSpecificSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setWaveformSpecificSettings(const uci::type::CommWaveformCapabilityCommandPET& accessor) override;

  /** Returns whether this optional field WaveformSpecificSettingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWaveformSpecificSettings() const noexcept override;

  /** Enables the optional field such that getWaveformSpecificSettings will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommWaveformCapabilityCommandPET& enableWaveformSpecificSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& clearWaveformSpecificSettings() noexcept override;

  /** Returns the accessor to the LinkConnectionRequest field contained in this message fragment
    *
    * @return The const reference to the accessor to the LinkConnectionRequest field.
    */
  const uci::type::CommCapabilityType::LinkConnectionRequest& getLinkConnectionRequest() const override;

  /** Returns the accessor to the LinkConnectionRequest field contained in this message fragment
    *
    * @return The reference to the accessor to the LinkConnectionRequest field.
    */
  uci::type::CommCapabilityType::LinkConnectionRequest& getLinkConnectionRequest() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommCapabilityType& setLinkConnectionRequest(const uci::type::CommCapabilityType::LinkConnectionRequest& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommCapabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<NetworkLinkActionTypeEnum> action_Accessor;
  std::unique_ptr<CapabilityID> capabilityID_Accessor;
  std::unique_ptr<SubsystemID_Type> subsystemID_Accessor;
  std::unique_ptr<CapabilityCommandRankingType> ranking_Accessor;
  std::unique_ptr<SecurityInformationType> classification_Accessor;
  std::unique_ptr<CommConnectionCommandEnum> connectionRequest_Accessor;
  std::unique_ptr<CommProfileID_Type> activateProfileID_Accessor;
  std::unique_ptr<NetworkLinkID_Type> networkLinkID_Accessor;
  std::unique_ptr<CommControlType> commonSettings_Accessor;
  std::unique_ptr<CryptoKey> cryptoKey_Accessor;
  std::unique_ptr<CryptoZeroize> cryptoZeroize_Accessor;
  std::unique_ptr<CryptoRolloverCommandType> cryptoRollover_Accessor;
  std::unique_ptr<CommLinkPortMapType> linkPortAssignments_Accessor;
  std::unique_ptr<VerboseStatusType> verboseStatus_Accessor;
  std::unique_ptr<CommWaveformCapabilityCommandPET> waveformSpecificSettings_Accessor;
  std::unique_ptr<LinkConnectionRequest> linkConnectionRequest_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMCAPABILITYTYPE_H
