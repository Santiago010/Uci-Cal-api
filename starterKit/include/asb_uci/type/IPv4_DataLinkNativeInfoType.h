/** @file IPv4_DataLinkNativeInfoType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_IPV4_DATALINKNATIVEINFOTYPE_H
#define ASB_UCI_TYPE_IPV4_DATALINKNATIVEINFOTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/DataLinkNativeInfoPET.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/IPv4_DataLinkNativeInfoType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base DataLinkNativeInfoPET for IPV4. */
class IPv4_DataLinkNativeInfoType : public virtual uci::type::IPv4_DataLinkNativeInfoType, public virtual DataLinkNativeInfoPET {
public:
  /** The constructor */
  IPv4_DataLinkNativeInfoType();

  /** The copy constructor
    *
    * @param rhs The IPv4_DataLinkNativeInfoType to copy from
    */
  IPv4_DataLinkNativeInfoType(const IPv4_DataLinkNativeInfoType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The IPv4_DataLinkNativeInfoType to move from
    */
  IPv4_DataLinkNativeInfoType(IPv4_DataLinkNativeInfoType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The IPv4_DataLinkNativeInfoType to copy from
    * @return The IPv4_DataLinkNativeInfoType that was assigned
    */
  IPv4_DataLinkNativeInfoType& operator=(const IPv4_DataLinkNativeInfoType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The IPv4_DataLinkNativeInfoType to move from
    * @return The IPv4_DataLinkNativeInfoType that was assigned
    */
  IPv4_DataLinkNativeInfoType& operator=(IPv4_DataLinkNativeInfoType&& rhs) = delete;

  /** The destructor */
  ~IPv4_DataLinkNativeInfoType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::IPv4_DataLinkNativeInfoType whose contents are to be used to set this
    *      uci::type::IPv4_DataLinkNativeInfoType's contents.
    */
  void copy(const uci::type::IPv4_DataLinkNativeInfoType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::IPv4_DataLinkNativeInfoType whose contents are to be used to set this
    *      uci::type::IPv4_DataLinkNativeInfoType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::IPv4_DataLinkNativeInfoType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_SourceAddress() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourceAddress(xs::Int value) override;

  /** Returns whether this optional field IPv4_SourceAddressis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_SourceAddress() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourceAddress() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_SourceCIDR_Mask() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourceCIDR_Mask(xs::Int value) override;

  /** Returns whether this optional field IPv4_SourceCIDR_Maskis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_SourceCIDR_Mask() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourceCIDR_Mask() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_DestinationAddress() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationAddress(xs::Int value) override;

  /** Returns whether this optional field IPv4_DestinationAddressis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_DestinationAddress() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationAddress() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_DestinationCIDR_Mask() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationCIDR_Mask(xs::Int value) override;

  /** Returns whether this optional field IPv4_DestinationCIDR_Maskis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_DestinationCIDR_Mask() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationCIDR_Mask() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_ProtocolHeader() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_ProtocolHeader(xs::Int value) override;

  /** Returns whether this optional field IPv4_ProtocolHeaderis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_ProtocolHeader() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_ProtocolHeader() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_SourcePortRangeStart() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourcePortRangeStart(xs::Int value) override;

  /** Returns whether this optional field IPv4_SourcePortRangeStartis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_SourcePortRangeStart() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourcePortRangeStart() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_SourcePortRangeEnd() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourcePortRangeEnd(xs::Int value) override;

  /** Returns whether this optional field IPv4_SourcePortRangeEndis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_SourcePortRangeEnd() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourcePortRangeEnd() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_DestinationPortRangeStart() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationPortRangeStart(xs::Int value) override;

  /** Returns whether this optional field IPv4_DestinationPortRangeStartis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_DestinationPortRangeStart() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationPortRangeStart() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_DestinationPortRangeEnd() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationPortRangeEnd(xs::Int value) override;

  /** Returns whether this optional field IPv4_DestinationPortRangeEndis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_DestinationPortRangeEnd() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationPortRangeEnd() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_DS_Field() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DS_Field(xs::Int value) override;

  /** Returns whether this optional field IPv4_DS_Fieldis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_DS_Field() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DS_Field() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Int getIPv4_MTU_Size() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& setIPv4_MTU_Size(xs::Int value) override;

  /** Returns whether this optional field IPv4_MTU_Sizeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasIPv4_MTU_Size() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_MTU_Size() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<IPv4_DataLinkNativeInfoType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::IPv4_DataLinkNativeInfoType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::IPv4_DataLinkNativeInfoType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::Int> iPv4_SourceAddress_Accessor;
  boost::optional<asb_xs::Int> iPv4_SourceCIDR_Mask_Accessor;
  boost::optional<asb_xs::Int> iPv4_DestinationAddress_Accessor;
  boost::optional<asb_xs::Int> iPv4_DestinationCIDR_Mask_Accessor;
  boost::optional<asb_xs::Int> iPv4_ProtocolHeader_Accessor;
  boost::optional<asb_xs::Int> iPv4_SourcePortRangeStart_Accessor;
  boost::optional<asb_xs::Int> iPv4_SourcePortRangeEnd_Accessor;
  boost::optional<asb_xs::Int> iPv4_DestinationPortRangeStart_Accessor;
  boost::optional<asb_xs::Int> iPv4_DestinationPortRangeEnd_Accessor;
  boost::optional<asb_xs::Int> iPv4_DS_Field_Accessor;
  boost::optional<asb_xs::Int> iPv4_MTU_Size_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_IPV4_DATALINKNATIVEINFOTYPE_H
