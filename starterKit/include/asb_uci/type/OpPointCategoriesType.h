/** @file OpPointCategoriesType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_OPPOINTCATEGORIESTYPE_H
#define ASB_UCI_TYPE_OPPOINTCATEGORIESTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/OpPointEmergencyEnum.h"
#include "asb_uci/type/OpPointGeneralEnum.h"
#include "asb_uci/type/OpPointHazardEnum.h"
#include "asb_uci/type/OpPointReferenceEnum.h"
#include "asb_uci/type/OpPointStationEnum.h"
#include "uci/base/Accessor.h"
#include "uci/type/OpPointCategoriesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Container object for the different types of OpPoint*Enums. A separate enum applies to each of the choice types. */
class OpPointCategoriesType : public virtual uci::type::OpPointCategoriesType {
public:
  /** The constructor */
  OpPointCategoriesType();

  /** The copy constructor
    *
    * @param rhs The OpPointCategoriesType to copy from
    */
  OpPointCategoriesType(const OpPointCategoriesType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OpPointCategoriesType to move from
    */
  OpPointCategoriesType(OpPointCategoriesType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The OpPointCategoriesType to copy from
    * @return The OpPointCategoriesType that was assigned
    */
  OpPointCategoriesType& operator=(const OpPointCategoriesType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OpPointCategoriesType to move from
    * @return The OpPointCategoriesType that was assigned
    */
  OpPointCategoriesType& operator=(OpPointCategoriesType&& rhs) = delete;

  /** The destructor */
  virtual ~OpPointCategoriesType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OpPointCategoriesType whose contents are to be used to set this
    *      uci::type::OpPointCategoriesType's contents.
    */
  void copy(const uci::type::OpPointCategoriesType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OpPointCategoriesType whose contents are to be used to set this
    *      uci::type::OpPointCategoriesType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OpPointCategoriesType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::OpPointCategoriesType::OpPointCategoriesTypeChoice getOpPointCategoriesTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getOpPointCategoriesTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setOpPointCategoriesTypeChoiceOrdinal(uci::type::OpPointCategoriesType::OpPointCategoriesTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's General item
    *
    * @return The contents of the General item
    */
  uci::type::OpPointGeneralEnum& getGeneral_() const;

  /** Returns the contents of the message's General item
    *
    * @return The contents of the General item
    */
  const uci::type::OpPointGeneralEnum& getGeneral() const override;

  /** Returns the contents of the message's General item
    *
    * @return The contents of the General item
    */
  uci::type::OpPointGeneralEnum& getGeneral() override;

  /** Sets this choice's choice to be General and initializes General to be the specified value
    *
    * @param accessor The new value to set the General item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setGeneral(const uci::type::OpPointGeneralEnum& accessor) override;

  /** Sets this choice's choice to be General and initializes General to be the specified value
    *
    * @param value The new value to set the General item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setGeneral(uci::type::OpPointGeneralEnum::EnumerationItem value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by General.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by General, false otherwise.
    */
  bool isGeneral() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by General.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by General.
    */
  uci::type::OpPointGeneralEnum& chooseGeneral(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by General.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by General.
    */
  uci::type::OpPointGeneralEnum& chooseGeneral(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's Hazard item
    *
    * @return The contents of the Hazard item
    */
  uci::type::OpPointHazardEnum& getHazard_() const;

  /** Returns the contents of the message's Hazard item
    *
    * @return The contents of the Hazard item
    */
  const uci::type::OpPointHazardEnum& getHazard() const override;

  /** Returns the contents of the message's Hazard item
    *
    * @return The contents of the Hazard item
    */
  uci::type::OpPointHazardEnum& getHazard() override;

  /** Sets this choice's choice to be Hazard and initializes Hazard to be the specified value
    *
    * @param accessor The new value to set the Hazard item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setHazard(const uci::type::OpPointHazardEnum& accessor) override;

  /** Sets this choice's choice to be Hazard and initializes Hazard to be the specified value
    *
    * @param value The new value to set the Hazard item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setHazard(uci::type::OpPointHazardEnum::EnumerationItem value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Hazard.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Hazard, false otherwise.
    */
  bool isHazard() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Hazard.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Hazard.
    */
  uci::type::OpPointHazardEnum& chooseHazard(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Hazard.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Hazard.
    */
  uci::type::OpPointHazardEnum& chooseHazard(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's Reference item
    *
    * @return The contents of the Reference item
    */
  uci::type::OpPointReferenceEnum& getReference_() const;

  /** Returns the contents of the message's Reference item
    *
    * @return The contents of the Reference item
    */
  const uci::type::OpPointReferenceEnum& getReference() const override;

  /** Returns the contents of the message's Reference item
    *
    * @return The contents of the Reference item
    */
  uci::type::OpPointReferenceEnum& getReference() override;

  /** Sets this choice's choice to be Reference and initializes Reference to be the specified value
    *
    * @param accessor The new value to set the Reference item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setReference(const uci::type::OpPointReferenceEnum& accessor) override;

  /** Sets this choice's choice to be Reference and initializes Reference to be the specified value
    *
    * @param value The new value to set the Reference item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setReference(uci::type::OpPointReferenceEnum::EnumerationItem value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Reference.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Reference, false otherwise.
    */
  bool isReference() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Reference.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Reference.
    */
  uci::type::OpPointReferenceEnum& chooseReference(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Reference.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Reference.
    */
  uci::type::OpPointReferenceEnum& chooseReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's Station item
    *
    * @return The contents of the Station item
    */
  uci::type::OpPointStationEnum& getStation_() const;

  /** Returns the contents of the message's Station item
    *
    * @return The contents of the Station item
    */
  const uci::type::OpPointStationEnum& getStation() const override;

  /** Returns the contents of the message's Station item
    *
    * @return The contents of the Station item
    */
  uci::type::OpPointStationEnum& getStation() override;

  /** Sets this choice's choice to be Station and initializes Station to be the specified value
    *
    * @param accessor The new value to set the Station item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setStation(const uci::type::OpPointStationEnum& accessor) override;

  /** Sets this choice's choice to be Station and initializes Station to be the specified value
    *
    * @param value The new value to set the Station item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setStation(uci::type::OpPointStationEnum::EnumerationItem value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Station.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Station, false otherwise.
    */
  bool isStation() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Station.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Station.
    */
  uci::type::OpPointStationEnum& chooseStation(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Station.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Station.
    */
  uci::type::OpPointStationEnum& chooseStation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's Emergency item
    *
    * @return The contents of the Emergency item
    */
  uci::type::OpPointEmergencyEnum& getEmergency_() const;

  /** Returns the contents of the message's Emergency item
    *
    * @return The contents of the Emergency item
    */
  const uci::type::OpPointEmergencyEnum& getEmergency() const override;

  /** Returns the contents of the message's Emergency item
    *
    * @return The contents of the Emergency item
    */
  uci::type::OpPointEmergencyEnum& getEmergency() override;

  /** Sets this choice's choice to be Emergency and initializes Emergency to be the specified value
    *
    * @param accessor The new value to set the Emergency item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setEmergency(const uci::type::OpPointEmergencyEnum& accessor) override;

  /** Sets this choice's choice to be Emergency and initializes Emergency to be the specified value
    *
    * @param value The new value to set the Emergency item to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OpPointCategoriesType& setEmergency(uci::type::OpPointEmergencyEnum::EnumerationItem value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Emergency.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Emergency, false otherwise.
    */
  bool isEmergency() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Emergency.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Emergency.
    */
  uci::type::OpPointEmergencyEnum& chooseEmergency(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Emergency.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Emergency.
    */
  uci::type::OpPointEmergencyEnum& chooseEmergency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OpPointCategoriesType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OpPointCategoriesType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OpPointCategoriesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<OpPointGeneralEnum> general_Accessor;
  std::unique_ptr<OpPointHazardEnum> hazard_Accessor;
  std::unique_ptr<OpPointReferenceEnum> reference_Accessor;
  std::unique_ptr<OpPointStationEnum> station_Accessor;
  std::unique_ptr<OpPointEmergencyEnum> emergency_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_OPPOINTCATEGORIESTYPE_H
