/** @file CharacterizationChoiceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CHARACTERIZATIONCHOICETYPE_H
#define ASB_UCI_TYPE_CHARACTERIZATIONCHOICETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CharacterizationChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ColorPhotometryParamsType;
class FrequencyParamsType;
class IR_ImageParamsType;
class MetricParamsType;
class Narrowband_SOI_ParamsType;
class OpticalImageParamsType;
class PhotometryParamsType;
class RCS_ParamsType;
class VisMagParamsType;
class Wideband_SOI_ParamsType;

/** The CharacterizationChoiceType is a choice type that allows the user to select a specific type of characterization of
  * the object.
  */
class CharacterizationChoiceType : public virtual uci::type::CharacterizationChoiceType {
public:
  /** The constructor */
  CharacterizationChoiceType();

  /** The copy constructor
    *
    * @param rhs The CharacterizationChoiceType to copy from
    */
  CharacterizationChoiceType(const CharacterizationChoiceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CharacterizationChoiceType to move from
    */
  CharacterizationChoiceType(CharacterizationChoiceType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The CharacterizationChoiceType to copy from
    * @return The CharacterizationChoiceType that was assigned
    */
  CharacterizationChoiceType& operator=(const CharacterizationChoiceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CharacterizationChoiceType to move from
    * @return The CharacterizationChoiceType that was assigned
    */
  CharacterizationChoiceType& operator=(CharacterizationChoiceType&& rhs) = delete;

  /** The destructor */
  virtual ~CharacterizationChoiceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CharacterizationChoiceType whose contents are to be used to set this
    *      uci::type::CharacterizationChoiceType's contents.
    */
  void copy(const uci::type::CharacterizationChoiceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CharacterizationChoiceType whose contents are to be used to set this
    *      uci::type::CharacterizationChoiceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CharacterizationChoiceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::CharacterizationChoiceType::CharacterizationChoiceTypeChoice getCharacterizationChoiceTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getCharacterizationChoiceTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setCharacterizationChoiceTypeChoiceOrdinal(uci::type::CharacterizationChoiceType::CharacterizationChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The const reference to the accessor to the Frequency field.
    */
  uci::type::FrequencyParamsType& getFrequency_() const;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The reference to the accessor to the Frequency field.
    */
  const uci::type::FrequencyParamsType& getFrequency() const override;

  /** Returns the accessor to the Frequency field contained in this message fragment
    *
    * @return The reference to the accessor to the Frequency field.
    */
  uci::type::FrequencyParamsType& getFrequency() override;

  /** Sets this choice's choice to be frequency and initializes frequency to be the specified value. A deep copy will be
    * used by this method to set frequency
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setFrequency(const uci::type::FrequencyParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Frequency.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Frequency, false otherwise.
    */
  bool isFrequency() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Frequency.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Frequency.
    */
  uci::type::FrequencyParamsType& chooseFrequency(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Frequency.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Frequency.
    */
  uci::type::FrequencyParamsType& chooseFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the IR_Image field contained in this message fragment
    *
    * @return The const reference to the accessor to the IR_Image field.
    */
  uci::type::IR_ImageParamsType& getIR_Image_() const;

  /** Returns the accessor to the IR_Image field contained in this message fragment
    *
    * @return The reference to the accessor to the IR_Image field.
    */
  const uci::type::IR_ImageParamsType& getIR_Image() const override;

  /** Returns the accessor to the IR_Image field contained in this message fragment
    *
    * @return The reference to the accessor to the IR_Image field.
    */
  uci::type::IR_ImageParamsType& getIR_Image() override;

  /** Sets this choice's choice to be iR_Image and initializes iR_Image to be the specified value. A deep copy will be used
    * by this method to set iR_Image
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setIR_Image(const uci::type::IR_ImageParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by IR_Image.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by IR_Image, false otherwise.
    */
  bool isIR_Image() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by IR_Image.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by IR_Image.
    */
  uci::type::IR_ImageParamsType& chooseIR_Image(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by IR_Image.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by IR_Image.
    */
  uci::type::IR_ImageParamsType& chooseIR_Image(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the MetricObservations field contained in this message fragment
    *
    * @return The const reference to the accessor to the MetricObservations field.
    */
  uci::type::MetricParamsType& getMetricObservations_() const;

  /** Returns the accessor to the MetricObservations field contained in this message fragment
    *
    * @return The reference to the accessor to the MetricObservations field.
    */
  const uci::type::MetricParamsType& getMetricObservations() const override;

  /** Returns the accessor to the MetricObservations field contained in this message fragment
    *
    * @return The reference to the accessor to the MetricObservations field.
    */
  uci::type::MetricParamsType& getMetricObservations() override;

  /** Sets this choice's choice to be metricObservations and initializes metricObservations to be the specified value. A
    * deep copy will be used by this method to set metricObservations
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setMetricObservations(const uci::type::MetricParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MetricObservations.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MetricObservations, false
    *      otherwise.
    */
  bool isMetricObservations() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by MetricObservations.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MetricObservations.
    */
  uci::type::MetricParamsType& chooseMetricObservations(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by MetricObservations.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MetricObservations.
    */
  uci::type::MetricParamsType& chooseMetricObservations(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Narrowband_SOI field contained in this message fragment
    *
    * @return The const reference to the accessor to the Narrowband_SOI field.
    */
  uci::type::Narrowband_SOI_ParamsType& getNarrowband_SOI_() const;

  /** Returns the accessor to the Narrowband_SOI field contained in this message fragment
    *
    * @return The reference to the accessor to the Narrowband_SOI field.
    */
  const uci::type::Narrowband_SOI_ParamsType& getNarrowband_SOI() const override;

  /** Returns the accessor to the Narrowband_SOI field contained in this message fragment
    *
    * @return The reference to the accessor to the Narrowband_SOI field.
    */
  uci::type::Narrowband_SOI_ParamsType& getNarrowband_SOI() override;

  /** Sets this choice's choice to be narrowband_SOI and initializes narrowband_SOI to be the specified value. A deep copy
    * will be used by this method to set narrowband_SOI
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setNarrowband_SOI(const uci::type::Narrowband_SOI_ParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Narrowband_SOI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Narrowband_SOI, false otherwise.
    */
  bool isNarrowband_SOI() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Narrowband_SOI.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Narrowband_SOI.
    */
  uci::type::Narrowband_SOI_ParamsType& chooseNarrowband_SOI(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Narrowband_SOI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Narrowband_SOI.
    */
  uci::type::Narrowband_SOI_ParamsType& chooseNarrowband_SOI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OpticalImage field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpticalImage field.
    */
  uci::type::OpticalImageParamsType& getOpticalImage_() const;

  /** Returns the accessor to the OpticalImage field contained in this message fragment
    *
    * @return The reference to the accessor to the OpticalImage field.
    */
  const uci::type::OpticalImageParamsType& getOpticalImage() const override;

  /** Returns the accessor to the OpticalImage field contained in this message fragment
    *
    * @return The reference to the accessor to the OpticalImage field.
    */
  uci::type::OpticalImageParamsType& getOpticalImage() override;

  /** Sets this choice's choice to be opticalImage and initializes opticalImage to be the specified value. A deep copy will
    * be used by this method to set opticalImage
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setOpticalImage(const uci::type::OpticalImageParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpticalImage.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpticalImage, false otherwise.
    */
  bool isOpticalImage() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpticalImage.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpticalImage.
    */
  uci::type::OpticalImageParamsType& chooseOpticalImage(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OpticalImage.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpticalImage.
    */
  uci::type::OpticalImageParamsType& chooseOpticalImage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the RCS field contained in this message fragment
    *
    * @return The const reference to the accessor to the RCS field.
    */
  uci::type::RCS_ParamsType& getRCS_() const;

  /** Returns the accessor to the RCS field contained in this message fragment
    *
    * @return The reference to the accessor to the RCS field.
    */
  const uci::type::RCS_ParamsType& getRCS() const override;

  /** Returns the accessor to the RCS field contained in this message fragment
    *
    * @return The reference to the accessor to the RCS field.
    */
  uci::type::RCS_ParamsType& getRCS() override;

  /** Sets this choice's choice to be rCS and initializes rCS to be the specified value. A deep copy will be used by this
    * method to set rCS
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setRCS(const uci::type::RCS_ParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RCS.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RCS, false otherwise.
    */
  bool isRCS() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by RCS.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RCS.
    */
  uci::type::RCS_ParamsType& chooseRCS(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by RCS.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RCS.
    */
  uci::type::RCS_ParamsType& chooseRCS(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the VisMag field contained in this message fragment
    *
    * @return The const reference to the accessor to the VisMag field.
    */
  uci::type::VisMagParamsType& getVisMag_() const;

  /** Returns the accessor to the VisMag field contained in this message fragment
    *
    * @return The reference to the accessor to the VisMag field.
    */
  const uci::type::VisMagParamsType& getVisMag() const override;

  /** Returns the accessor to the VisMag field contained in this message fragment
    *
    * @return The reference to the accessor to the VisMag field.
    */
  uci::type::VisMagParamsType& getVisMag() override;

  /** Sets this choice's choice to be visMag and initializes visMag to be the specified value. A deep copy will be used by
    * this method to set visMag
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setVisMag(const uci::type::VisMagParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VisMag.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VisMag, false otherwise.
    */
  bool isVisMag() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VisMag.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VisMag.
    */
  uci::type::VisMagParamsType& chooseVisMag(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VisMag.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VisMag.
    */
  uci::type::VisMagParamsType& chooseVisMag(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Wideband_SOI field contained in this message fragment
    *
    * @return The const reference to the accessor to the Wideband_SOI field.
    */
  uci::type::Wideband_SOI_ParamsType& getWideband_SOI_() const;

  /** Returns the accessor to the Wideband_SOI field contained in this message fragment
    *
    * @return The reference to the accessor to the Wideband_SOI field.
    */
  const uci::type::Wideband_SOI_ParamsType& getWideband_SOI() const override;

  /** Returns the accessor to the Wideband_SOI field contained in this message fragment
    *
    * @return The reference to the accessor to the Wideband_SOI field.
    */
  uci::type::Wideband_SOI_ParamsType& getWideband_SOI() override;

  /** Sets this choice's choice to be wideband_SOI and initializes wideband_SOI to be the specified value. A deep copy will
    * be used by this method to set wideband_SOI
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setWideband_SOI(const uci::type::Wideband_SOI_ParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Wideband_SOI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Wideband_SOI, false otherwise.
    */
  bool isWideband_SOI() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Wideband_SOI.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Wideband_SOI.
    */
  uci::type::Wideband_SOI_ParamsType& chooseWideband_SOI(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Wideband_SOI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Wideband_SOI.
    */
  uci::type::Wideband_SOI_ParamsType& chooseWideband_SOI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Photometry field contained in this message fragment
    *
    * @return The const reference to the accessor to the Photometry field.
    */
  uci::type::PhotometryParamsType& getPhotometry_() const;

  /** Returns the accessor to the Photometry field contained in this message fragment
    *
    * @return The reference to the accessor to the Photometry field.
    */
  const uci::type::PhotometryParamsType& getPhotometry() const override;

  /** Returns the accessor to the Photometry field contained in this message fragment
    *
    * @return The reference to the accessor to the Photometry field.
    */
  uci::type::PhotometryParamsType& getPhotometry() override;

  /** Sets this choice's choice to be photometry and initializes photometry to be the specified value. A deep copy will be
    * used by this method to set photometry
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setPhotometry(const uci::type::PhotometryParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Photometry.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Photometry, false otherwise.
    */
  bool isPhotometry() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Photometry.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Photometry.
    */
  uci::type::PhotometryParamsType& choosePhotometry(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Photometry.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Photometry.
    */
  uci::type::PhotometryParamsType& choosePhotometry(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ColorPhotometry field contained in this message fragment
    *
    * @return The const reference to the accessor to the ColorPhotometry field.
    */
  uci::type::ColorPhotometryParamsType& getColorPhotometry_() const;

  /** Returns the accessor to the ColorPhotometry field contained in this message fragment
    *
    * @return The reference to the accessor to the ColorPhotometry field.
    */
  const uci::type::ColorPhotometryParamsType& getColorPhotometry() const override;

  /** Returns the accessor to the ColorPhotometry field contained in this message fragment
    *
    * @return The reference to the accessor to the ColorPhotometry field.
    */
  uci::type::ColorPhotometryParamsType& getColorPhotometry() override;

  /** Sets this choice's choice to be colorPhotometry and initializes colorPhotometry to be the specified value. A deep
    * copy will be used by this method to set colorPhotometry
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CharacterizationChoiceType& setColorPhotometry(const uci::type::ColorPhotometryParamsType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ColorPhotometry.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ColorPhotometry, false
    *      otherwise.
    */
  bool isColorPhotometry() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ColorPhotometry.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ColorPhotometry.
    */
  uci::type::ColorPhotometryParamsType& chooseColorPhotometry(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ColorPhotometry.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ColorPhotometry.
    */
  uci::type::ColorPhotometryParamsType& chooseColorPhotometry(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CharacterizationChoiceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CharacterizationChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CharacterizationChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<FrequencyParamsType> frequency_Accessor;
  std::unique_ptr<IR_ImageParamsType> iR_Image_Accessor;
  std::unique_ptr<MetricParamsType> metricObservations_Accessor;
  std::unique_ptr<Narrowband_SOI_ParamsType> narrowband_SOI_Accessor;
  std::unique_ptr<OpticalImageParamsType> opticalImage_Accessor;
  std::unique_ptr<RCS_ParamsType> rCS_Accessor;
  std::unique_ptr<VisMagParamsType> visMag_Accessor;
  std::unique_ptr<Wideband_SOI_ParamsType> wideband_SOI_Accessor;
  std::unique_ptr<PhotometryParamsType> photometry_Accessor;
  std::unique_ptr<ColorPhotometryParamsType> colorPhotometry_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CHARACTERIZATIONCHOICETYPE_H
