/** @file PulseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PULSETYPE_H
#define ASB_UCI_TYPE_PULSETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DecibelType.h"
#include "asb_uci/type/DurationType.h"
#include "asb_uci/type/FrequencyType.h"
#include "asb_uci/type/MilliwattPowerRatioType.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/PulseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentID_Type;
class DateTimeSigmaType;
class ModulationOnPulseDataType;
class SignalRelativeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PulseType : public virtual uci::type::PulseType {
public:
  /** Indicates the Relative line of sight (LOS) to the emitter of the Pulse, otherwise known as the angle of arrival
    * (AOA). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using RelativeLOS = asb_uci::base::BoundedList<uci::type::SignalRelativeType, uci::type::accessorType::signalRelativeType, asb_uci::type::SignalRelativeType>;

  /** The constructor */
  PulseType();

  /** The copy constructor
    *
    * @param rhs The PulseType to copy from
    */
  PulseType(const PulseType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PulseType to move from
    */
  PulseType(PulseType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PulseType to copy from
    * @return The PulseType that was assigned
    */
  PulseType& operator=(const PulseType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PulseType to move from
    * @return The PulseType that was assigned
    */
  PulseType& operator=(PulseType&& rhs) = delete;

  /** The destructor */
  virtual ~PulseType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PulseType whose contents are to be used to set this uci::type::PulseType's contents.
    */
  void copy(const uci::type::PulseType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PulseType whose contents are to be used to set this uci::type::PulseType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PulseType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentID field.
    */
  const uci::type::ComponentID_Type& getComponentID() const override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentID field.
    */
  uci::type::ComponentID_Type& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setComponentID(const uci::type::ComponentID_Type& accessor) override;

  /** Returns the accessor to the Timestamp field contained in this message fragment
    *
    * @return The const reference to the accessor to the Timestamp field.
    */
  const uci::type::DateTimeSigmaType& getTimestamp() const override;

  /** Returns the accessor to the Timestamp field contained in this message fragment
    *
    * @return The reference to the accessor to the Timestamp field.
    */
  uci::type::DateTimeSigmaType& getTimestamp() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setTimestamp(const uci::type::DateTimeSigmaType& accessor) override;

  /** Returns the contents of the message's Frequency field
    *
    * @return The contents of the Frequency field
    */
  uci::type::FrequencyTypeValue getFrequency() const override;

  /** Sets the contents of the message's Frequency field
    *
    * @param value The new value to set the Frequency field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setFrequency(uci::type::FrequencyTypeValue value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::FrequencyTypeValue getFrequencyDeviation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setFrequencyDeviation(uci::type::FrequencyTypeValue value) override;

  /** Returns whether this optional field FrequencyDeviationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFrequencyDeviation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearFrequencyDeviation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::MilliwattPowerRatioTypeValue getAmplitude() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setAmplitude(uci::type::MilliwattPowerRatioTypeValue value) override;

  /** Returns whether this optional field Amplitudeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAmplitude() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearAmplitude() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getRelativeAmplitude() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setRelativeAmplitude(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field RelativeAmplitudeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRelativeAmplitude() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearRelativeAmplitude() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidth() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setPulseWidth(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidth() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearPulseWidth() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidthDeviation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setPulseWidthDeviation(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthDeviationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthDeviation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearPulseWidthDeviation() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPulseWidthChopped() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setPulseWidthChopped(xs::Boolean value) override;

  /** Returns whether this optional field PulseWidthChoppedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthChopped() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearPulseWidthChopped() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPulseOnPulse() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setPulseOnPulse(xs::Boolean value) override;

  /** Returns whether this optional field PulseOnPulseis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseOnPulse() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearPulseOnPulse() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getSNR() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setSNR(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field SNRis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSNR() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearSNR() noexcept override;

  /** Returns the accessor to the RelativeLOS field contained in this message fragment
    *
    * @return The const reference to the accessor to the RelativeLOS field.
    */
  const uci::type::PulseType::RelativeLOS& getRelativeLOS() const override;

  /** Returns the accessor to the RelativeLOS field contained in this message fragment
    *
    * @return The reference to the accessor to the RelativeLOS field.
    */
  uci::type::PulseType::RelativeLOS& getRelativeLOS() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setRelativeLOS(const uci::type::PulseType::RelativeLOS& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationOnPulseDataType& getModulationOnPulse_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ModulationOnPulseDataType& getModulationOnPulse() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationOnPulseDataType& getModulationOnPulse() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setModulationOnPulse(const uci::type::ModulationOnPulseDataType& accessor) override;

  /** Returns whether this optional field ModulationOnPulseis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasModulationOnPulse() const noexcept override;

  /** Enables the optional field such that getModulationOnPulse will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationOnPulseDataType& enableModulationOnPulse(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearModulationOnPulse() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getDynamicRangeExceeded() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setDynamicRangeExceeded(xs::Boolean value) override;

  /** Returns whether this optional field DynamicRangeExceededis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDynamicRangeExceeded() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearDynamicRangeExceeded() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getThresholdDetection() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setThresholdDetection(xs::Boolean value) override;

  /** Returns whether this optional field ThresholdDetectionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasThresholdDetection() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearThresholdDetection() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getHighPowerCorruption() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setHighPowerCorruption(xs::Boolean value) override;

  /** Returns whether this optional field HighPowerCorruptionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasHighPowerCorruption() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearHighPowerCorruption() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getOnboardInterference() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& setOnboardInterference(xs::Boolean value) override;

  /** Returns whether this optional field OnboardInterferenceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOnboardInterference() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PulseType& clearOnboardInterference() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PulseType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PulseType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PulseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ComponentID_Type> componentID_Accessor;
  std::unique_ptr<DateTimeSigmaType> timestamp_Accessor;
  FrequencyTypeValue frequency_Accessor{0.0};
  boost::optional<FrequencyTypeValue> frequencyDeviation_Accessor;
  boost::optional<MilliwattPowerRatioTypeValue> amplitude_Accessor;
  boost::optional<DecibelTypeValue> relativeAmplitude_Accessor;
  boost::optional<DurationTypeValue> pulseWidth_Accessor;
  boost::optional<DurationTypeValue> pulseWidthDeviation_Accessor;
  boost::optional<asb_xs::Boolean> pulseWidthChopped_Accessor;
  boost::optional<asb_xs::Boolean> pulseOnPulse_Accessor;
  boost::optional<DecibelTypeValue> sNR_Accessor;
  std::unique_ptr<RelativeLOS> relativeLOS_Accessor;
  std::unique_ptr<ModulationOnPulseDataType> modulationOnPulse_Accessor;
  boost::optional<asb_xs::Boolean> dynamicRangeExceeded_Accessor;
  boost::optional<asb_xs::Boolean> thresholdDetection_Accessor;
  boost::optional<asb_xs::Boolean> highPowerCorruption_Accessor;
  boost::optional<asb_xs::Boolean> onboardInterference_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PULSETYPE_H
