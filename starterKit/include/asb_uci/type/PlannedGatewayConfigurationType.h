/** @file PlannedGatewayConfigurationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PLANNEDGATEWAYCONFIGURATIONTYPE_H
#define ASB_UCI_TYPE_PLANNEDGATEWAYCONFIGURATIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CommConfigurationStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedGatewayConfigurationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityID_Type;
class CapabilityID_Type;
class CommConfigurationID_Type;
class CommProfileID_Type;
class GatewayConfigurationPET;
class GatewayLinkDestinationType;
class MDF_CommandType;
class MessageConfigurationType;
class ProductDisseminationDestinationID_Type;
class ServiceID_Type;
class SystemID_Type;

/** Ties the unique gateway - Link - Capability/Activity to Message and Product Ingress-Egress configuration details. */
class PlannedGatewayConfigurationType : public virtual uci::type::PlannedGatewayConfigurationType {
public:
  /** If specified, indicates the Service instance to Gateway the data. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  using GatewayServiceID = asb_uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type, asb_uci::type::ServiceID_Type>;

  /** Defines the necessary IDs which facilitate gatewaying the data. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using GatewayLinkDestination = asb_uci::base::BoundedList<uci::type::GatewayLinkDestinationType, uci::type::accessorType::gatewayLinkDestinationType, asb_uci::type::GatewayLinkDestinationType>;

  /** If specified, indicates the message topics, filters, and gateways. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using MessageConfiguration = asb_uci::base::BoundedList<uci::type::MessageConfigurationType, uci::type::accessorType::messageConfigurationType, asb_uci::type::MessageConfigurationType>;

  /** The remote System ID for which product data shall be ingressed. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ProductDisseminationIngressSystemID = asb_uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type, asb_uci::type::SystemID_Type>;

  /** The Product Dissemination Destinations which data should be sent to. This is the method to specify Product Egress
    * within the standard Product Dissemination Workflow. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ProductDisseminationEgressDestinationID = asb_uci::base::BoundedList<uci::type::ProductDisseminationDestinationID_Type, uci::type::accessorType::productDisseminationDestinationID_Type, asb_uci::type::ProductDisseminationDestinationID_Type>;

  /** The constructor */
  PlannedGatewayConfigurationType();

  /** The copy constructor
    *
    * @param rhs The PlannedGatewayConfigurationType to copy from
    */
  PlannedGatewayConfigurationType(const PlannedGatewayConfigurationType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PlannedGatewayConfigurationType to move from
    */
  PlannedGatewayConfigurationType(PlannedGatewayConfigurationType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PlannedGatewayConfigurationType to copy from
    * @return The PlannedGatewayConfigurationType that was assigned
    */
  PlannedGatewayConfigurationType& operator=(const PlannedGatewayConfigurationType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PlannedGatewayConfigurationType to move from
    * @return The PlannedGatewayConfigurationType that was assigned
    */
  PlannedGatewayConfigurationType& operator=(PlannedGatewayConfigurationType&& rhs) = delete;

  /** The destructor */
  virtual ~PlannedGatewayConfigurationType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlannedGatewayConfigurationType whose contents are to be used to set this
    *      uci::type::PlannedGatewayConfigurationType's contents.
    */
  void copy(const uci::type::PlannedGatewayConfigurationType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PlannedGatewayConfigurationType whose contents are to be used to set this
    *      uci::type::PlannedGatewayConfigurationType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PlannedGatewayConfigurationType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the GatewayServiceID field contained in this message fragment
    *
    * @return The const reference to the accessor to the GatewayServiceID field.
    */
  const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& getGatewayServiceID() const override;

  /** Returns the accessor to the GatewayServiceID field contained in this message fragment
    *
    * @return The reference to the accessor to the GatewayServiceID field.
    */
  uci::type::PlannedGatewayConfigurationType::GatewayServiceID& getGatewayServiceID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setGatewayServiceID(const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& accessor) override;

  /** Returns the accessor to the ConfigurationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ConfigurationID field.
    */
  const uci::type::CommConfigurationID_Type& getConfigurationID() const override;

  /** Returns the accessor to the ConfigurationID field contained in this message fragment
    *
    * @return The reference to the accessor to the ConfigurationID field.
    */
  uci::type::CommConfigurationID_Type& getConfigurationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setConfigurationID(const uci::type::CommConfigurationID_Type& accessor) override;

  /** Returns the contents of the message's ConfigurationState field
    *
    * @return The contents of the ConfigurationState field
    */
  const uci::type::CommConfigurationStateEnum& getConfigurationState() const override;

  /** Returns the contents of the message's ConfigurationState field
    *
    * @return The contents of the ConfigurationState field
    */
  uci::type::CommConfigurationStateEnum& getConfigurationState() override;

  /** Sets the contents of the message's ConfigurationState field
    *
    * @param accessor The accessor to use to set the ConfigurationState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setConfigurationState(const uci::type::CommConfigurationStateEnum& accessor) override;

  /** Sets the contents of the message's ConfigurationState field
    *
    * @param value The new value to set the ConfigurationState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setConfigurationState(uci::type::CommConfigurationStateEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MDF_CommandType& getActivateMDF_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MDF_CommandType& getActivateMDF() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MDF_CommandType& getActivateMDF() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setActivateMDF(const uci::type::MDF_CommandType& accessor) override;

  /** Returns whether this optional field ActivateMDFis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivateMDF() const noexcept override;

  /** Enables the optional field such that getActivateMDF will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MDF_CommandType& enableActivateMDF(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& clearActivateMDF() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getActivateProfileID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CommProfileID_Type& getActivateProfileID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& getActivateProfileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setActivateProfileID(const uci::type::CommProfileID_Type& accessor) override;

  /** Returns whether this optional field ActivateProfileIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivateProfileID() const noexcept override;

  /** Enables the optional field such that getActivateProfileID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CommProfileID_Type& enableActivateProfileID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& clearActivateProfileID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityID_Type& getGatewayCapabilityID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CapabilityID_Type& getGatewayCapabilityID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityID_Type& getGatewayCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setGatewayCapabilityID(const uci::type::CapabilityID_Type& accessor) override;

  /** Returns whether this optional field GatewayCapabilityIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGatewayCapabilityID() const noexcept override;

  /** Enables the optional field such that getGatewayCapabilityID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CapabilityID_Type& enableGatewayCapabilityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& clearGatewayCapabilityID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityID_Type& getGatewayActivityID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActivityID_Type& getGatewayActivityID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityID_Type& getGatewayActivityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setGatewayActivityID(const uci::type::ActivityID_Type& accessor) override;

  /** Returns whether this optional field GatewayActivityIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGatewayActivityID() const noexcept override;

  /** Enables the optional field such that getGatewayActivityID will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityID_Type& enableGatewayActivityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& clearGatewayActivityID() noexcept override;

  /** Returns the accessor to the GatewayLinkDestination field contained in this message fragment
    *
    * @return The const reference to the accessor to the GatewayLinkDestination field.
    */
  const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& getGatewayLinkDestination() const override;

  /** Returns the accessor to the GatewayLinkDestination field contained in this message fragment
    *
    * @return The reference to the accessor to the GatewayLinkDestination field.
    */
  uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& getGatewayLinkDestination() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setGatewayLinkDestination(const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& accessor) override;

  /** Returns the accessor to the MessageConfiguration field contained in this message fragment
    *
    * @return The const reference to the accessor to the MessageConfiguration field.
    */
  const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& getMessageConfiguration() const override;

  /** Returns the accessor to the MessageConfiguration field contained in this message fragment
    *
    * @return The reference to the accessor to the MessageConfiguration field.
    */
  uci::type::PlannedGatewayConfigurationType::MessageConfiguration& getMessageConfiguration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setMessageConfiguration(const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& accessor) override;

  /** Returns the accessor to the ProductDisseminationIngressSystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductDisseminationIngressSystemID field.
    */
  const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& getProductDisseminationIngressSystemID() const override;

  /** Returns the accessor to the ProductDisseminationIngressSystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductDisseminationIngressSystemID field.
    */
  uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& getProductDisseminationIngressSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setProductDisseminationIngressSystemID(const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& accessor) override;

  /** Returns the accessor to the ProductDisseminationEgressDestinationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductDisseminationEgressDestinationID field.
    */
  const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& getProductDisseminationEgressDestinationID() const override;

  /** Returns the accessor to the ProductDisseminationEgressDestinationID field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductDisseminationEgressDestinationID field.
    */
  uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& getProductDisseminationEgressDestinationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setProductDisseminationEgressDestinationID(const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GatewayConfigurationPET& getGatewaySpecificSettings_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::GatewayConfigurationPET& getGatewaySpecificSettings() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GatewayConfigurationPET& getGatewaySpecificSettings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& setGatewaySpecificSettings(const uci::type::GatewayConfigurationPET& accessor) override;

  /** Returns whether this optional field GatewaySpecificSettingsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasGatewaySpecificSettings() const noexcept override;

  /** Enables the optional field such that getGatewaySpecificSettings will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::GatewayConfigurationPET& enableGatewaySpecificSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PlannedGatewayConfigurationType& clearGatewaySpecificSettings() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PlannedGatewayConfigurationType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PlannedGatewayConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PlannedGatewayConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<GatewayServiceID> gatewayServiceID_Accessor;
  std::unique_ptr<CommConfigurationID_Type> configurationID_Accessor;
  std::unique_ptr<CommConfigurationStateEnum> configurationState_Accessor;
  std::unique_ptr<MDF_CommandType> activateMDF_Accessor;
  std::unique_ptr<CommProfileID_Type> activateProfileID_Accessor;
  std::unique_ptr<CapabilityID_Type> gatewayCapabilityID_Accessor;
  std::unique_ptr<ActivityID_Type> gatewayActivityID_Accessor;
  std::unique_ptr<GatewayLinkDestination> gatewayLinkDestination_Accessor;
  std::unique_ptr<MessageConfiguration> messageConfiguration_Accessor;
  std::unique_ptr<ProductDisseminationIngressSystemID> productDisseminationIngressSystemID_Accessor;
  std::unique_ptr<ProductDisseminationEgressDestinationID> productDisseminationEgressDestinationID_Accessor;
  std::unique_ptr<GatewayConfigurationPET> gatewaySpecificSettings_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PLANNEDGATEWAYCONFIGURATIONTYPE_H
