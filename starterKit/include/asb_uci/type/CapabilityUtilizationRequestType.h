/** @file CapabilityUtilizationRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CAPABILITYUTILIZATIONREQUESTTYPE_H
#define ASB_UCI_TYPE_CAPABILITYUTILIZATIONREQUESTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityUtilizationRequestType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityCommandBaseType;
class CapabilityCommandBaseType;
class EntityID_Type;
class SystemRoutePlanSpecificationType;
class TaskID_InclusionType;

/** The inputs used in generating and/or requesting a Capability Utilization Assessment. */
class CapabilityUtilizationRequestType : public virtual uci::type::CapabilityUtilizationRequestType {
public:
  /** This element is used if the assessment should be generated in regards to only certain threats. If this element is not
    * specified then all entities are considered. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using EntityID = asb_uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type, asb_uci::type::EntityID_Type>;

  /** Represents a list of tasks (beyond those allocated to the constraint MissionPlan if defined) that should also be
    * assessed as ad hoc relative to the baseline Mission Plan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using TaskIdentifier = asb_uci::base::BoundedList<uci::type::TaskID_InclusionType, uci::type::accessorType::taskID_InclusionType, asb_uci::type::TaskID_InclusionType>;

  /** Represents a list of capability commands (beyond those allocated to the constraint MissionPlan if defined) that
    * should also be assessed as ad hoc relative to the baseline Mission Plan. This is depicted by the
    * CapabilityCommandBaseType with the expectation that the user will populate with more specific {Capability}Command
    * types. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CapabilityCommand = asb_uci::base::BoundedList<uci::type::CapabilityCommandBaseType, uci::type::accessorType::capabilityCommandBaseType, asb_uci::type::CapabilityCommandBaseType>;

  /** Represents a list of activity commands(beyond those allocated to the constraint MissionPlan if defined) that should
    * also be assessed as ad hoc relative to the baseline Mission Plan. This is depicted by the ActivityCommandBaseType
    * with the expectation that the user will populate with more specific {Capability}Command types. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using ActivityCommand = asb_uci::base::BoundedList<uci::type::ActivityCommandBaseType, uci::type::accessorType::activityCommandBaseType, asb_uci::type::ActivityCommandBaseType>;

  /** Indicate which system or systems to assess. Optionally provide additional information about the position of each
    * system and any capabilities to consider in conjunction with a specified system. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  using SystemToAssess = asb_uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType, asb_uci::type::SystemRoutePlanSpecificationType>;

  /** Indicate additional systems for the assessment, that are not to be assessed. Optionally provide additional
    * information about the position of each system and any capabilities to consider in conjunction with a specified
    * system. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SupportingSystem = asb_uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType, asb_uci::type::SystemRoutePlanSpecificationType>;

  /** The constructor */
  CapabilityUtilizationRequestType();

  /** The copy constructor
    *
    * @param rhs The CapabilityUtilizationRequestType to copy from
    */
  CapabilityUtilizationRequestType(const CapabilityUtilizationRequestType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CapabilityUtilizationRequestType to move from
    */
  CapabilityUtilizationRequestType(CapabilityUtilizationRequestType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CapabilityUtilizationRequestType to copy from
    * @return The CapabilityUtilizationRequestType that was assigned
    */
  CapabilityUtilizationRequestType& operator=(const CapabilityUtilizationRequestType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CapabilityUtilizationRequestType to move from
    * @return The CapabilityUtilizationRequestType that was assigned
    */
  CapabilityUtilizationRequestType& operator=(CapabilityUtilizationRequestType&& rhs) = delete;

  /** The destructor */
  virtual ~CapabilityUtilizationRequestType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CapabilityUtilizationRequestType whose contents are to be used to set this
    *      uci::type::CapabilityUtilizationRequestType's contents.
    */
  void copy(const uci::type::CapabilityUtilizationRequestType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CapabilityUtilizationRequestType whose contents are to be used to set this
    *      uci::type::CapabilityUtilizationRequestType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CapabilityUtilizationRequestType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityID field.
    */
  const uci::type::CapabilityUtilizationRequestType::EntityID& getEntityID() const override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the EntityID field.
    */
  uci::type::CapabilityUtilizationRequestType::EntityID& getEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityUtilizationRequestType& setEntityID(const uci::type::CapabilityUtilizationRequestType::EntityID& accessor) override;

  /** Returns the accessor to the TaskIdentifier field contained in this message fragment
    *
    * @return The const reference to the accessor to the TaskIdentifier field.
    */
  const uci::type::CapabilityUtilizationRequestType::TaskIdentifier& getTaskIdentifier() const override;

  /** Returns the accessor to the TaskIdentifier field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskIdentifier field.
    */
  uci::type::CapabilityUtilizationRequestType::TaskIdentifier& getTaskIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityUtilizationRequestType& setTaskIdentifier(const uci::type::CapabilityUtilizationRequestType::TaskIdentifier& accessor) override;

  /** Returns the accessor to the CapabilityCommand field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityCommand field.
    */
  const uci::type::CapabilityUtilizationRequestType::CapabilityCommand& getCapabilityCommand() const override;

  /** Returns the accessor to the CapabilityCommand field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityCommand field.
    */
  uci::type::CapabilityUtilizationRequestType::CapabilityCommand& getCapabilityCommand() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityUtilizationRequestType& setCapabilityCommand(const uci::type::CapabilityUtilizationRequestType::CapabilityCommand& accessor) override;

  /** Returns the accessor to the ActivityCommand field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityCommand field.
    */
  const uci::type::CapabilityUtilizationRequestType::ActivityCommand& getActivityCommand() const override;

  /** Returns the accessor to the ActivityCommand field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityCommand field.
    */
  uci::type::CapabilityUtilizationRequestType::ActivityCommand& getActivityCommand() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityUtilizationRequestType& setActivityCommand(const uci::type::CapabilityUtilizationRequestType::ActivityCommand& accessor) override;

  /** Returns the accessor to the SystemToAssess field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemToAssess field.
    */
  const uci::type::CapabilityUtilizationRequestType::SystemToAssess& getSystemToAssess() const override;

  /** Returns the accessor to the SystemToAssess field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemToAssess field.
    */
  uci::type::CapabilityUtilizationRequestType::SystemToAssess& getSystemToAssess() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityUtilizationRequestType& setSystemToAssess(const uci::type::CapabilityUtilizationRequestType::SystemToAssess& accessor) override;

  /** Returns the accessor to the SupportingSystem field contained in this message fragment
    *
    * @return The const reference to the accessor to the SupportingSystem field.
    */
  const uci::type::CapabilityUtilizationRequestType::SupportingSystem& getSupportingSystem() const override;

  /** Returns the accessor to the SupportingSystem field contained in this message fragment
    *
    * @return The reference to the accessor to the SupportingSystem field.
    */
  uci::type::CapabilityUtilizationRequestType::SupportingSystem& getSupportingSystem() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityUtilizationRequestType& setSupportingSystem(const uci::type::CapabilityUtilizationRequestType::SupportingSystem& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CapabilityUtilizationRequestType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityUtilizationRequestType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CapabilityUtilizationRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EntityID> entityID_Accessor;
  std::unique_ptr<TaskIdentifier> taskIdentifier_Accessor;
  std::unique_ptr<CapabilityCommand> capabilityCommand_Accessor;
  std::unique_ptr<ActivityCommand> activityCommand_Accessor;
  std::unique_ptr<SystemToAssess> systemToAssess_Accessor;
  std::unique_ptr<SupportingSystem> supportingSystem_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CAPABILITYUTILIZATIONREQUESTTYPE_H
