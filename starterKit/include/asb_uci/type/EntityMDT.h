/** @file EntityMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ENTITYMDT_H
#define ASB_UCI_TYPE_ENTITYMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/EntityStatusEnum.h"
#include "../../../include/asb_uci/type/MobilityEnum.h"
#include "../../../include/asb_uci/type/OB_OperationalStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityAgainstType;
class ActivityByType;
class CapabilityID_Type;
class DateTimeSigmaType;
class EnduranceType;
class EntityID_Type;
class EntityIdentityType;
class EntityRemoveInfoType;
class EntitySignalSummaryType;
class EntitySourceType;
class ID_Type;
class KinematicsType;
class MeasurementID_Type;
class OrbitalKinematicsChoiceType;
class OrbitalSingleVectorParametersType;
class PlatformStatusType;
class Point2D_Type;
class PulseDataID_Type;
class StrengthType;
class VoiceControlType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityMDT : public virtual uci::type::EntityMDT {
public:
  /** Indicates the unique ID of an Entity that is a part of this Site Entity. When omitted, the Entity is not a Site. When
    * one or more are given, this Entity is a Site. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SiteEntityID = asb_uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type, asb_uci::type::EntityID_Type>;

  /** Indicates a summary of an RF Signal from the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using SignalSummary = asb_uci::base::BoundedList<uci::type::EntitySignalSummaryType, uci::type::accessorType::entitySignalSummaryType, asb_uci::type::EntitySignalSummaryType>;

  /** Indicates the unique ID of a PulseData collection associated with the Entity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using PulseDataID = asb_uci::base::BoundedList<uci::type::PulseDataID_Type, uci::type::accessorType::pulseDataID_Type, asb_uci::type::PulseDataID_Type>;

  /** Indicates the unique ID of a Measurement within an Observation Measurement Report associated with the Entity.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using MeasurementID = asb_uci::base::BoundedList<uci::type::MeasurementID_Type, uci::type::accessorType::measurementID_Type, asb_uci::type::MeasurementID_Type>;

  /** This element indicates an activity, that isn't otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed on/against the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActivityAgainst = asb_uci::base::BoundedList<uci::type::ActivityAgainstType, uci::type::accessorType::activityAgainstType, asb_uci::type::ActivityAgainstType>;

  /** This element indicates an activity, that isn't otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed by the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ActivityBy = asb_uci::base::BoundedList<uci::type::ActivityByType, uci::type::accessorType::activityByType, asb_uci::type::ActivityByType>;

  /** This element indicates an association (not a fusion or derivation relationship) between this Entity and another UCI
    * message or object. For example, an Entity could be associated with an OpPoint. Data content of the Entity and the
    * associated message/object is maintained independently. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssociatedID = asb_uci::base::BoundedList<uci::type::ID_Type, uci::type::accessorType::iD_Type, asb_uci::type::ID_Type>;

  /** Indicates a capability of the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CapabilityID = asb_uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type, asb_uci::type::CapabilityID_Type>;

  /** The constructor */
  EntityMDT();

  /** The copy constructor
    *
    * @param rhs The EntityMDT to copy from
    */
  EntityMDT(const EntityMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EntityMDT to move from
    */
  EntityMDT(EntityMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The EntityMDT to copy from
    * @return The EntityMDT that was assigned
    */
  EntityMDT& operator=(const EntityMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EntityMDT to move from
    * @return The EntityMDT that was assigned
    */
  EntityMDT& operator=(EntityMDT&& rhs) = delete;

  /** The destructor */
  virtual ~EntityMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityMDT whose contents are to be used to set this uci::type::EntityMDT's contents.
    */
  void copy(const uci::type::EntityMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityMDT whose contents are to be used to set this uci::type::EntityMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EntityMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityID field.
    */
  const uci::type::EntityID_Type& getEntityID() const override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the EntityID field.
    */
  uci::type::EntityID_Type& getEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setEntityID(const uci::type::EntityID_Type& accessor) override;

  /** Enables the optional field such that getEntityID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityID_Type& enableEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CreationTimestamp field contained in this message fragment
    *
    * @return The const reference to the accessor to the CreationTimestamp field.
    */
  const uci::type::DateTimeSigmaType& getCreationTimestamp() const override;

  /** Returns the accessor to the CreationTimestamp field contained in this message fragment
    *
    * @return The reference to the accessor to the CreationTimestamp field.
    */
  uci::type::DateTimeSigmaType& getCreationTimestamp() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setCreationTimestamp(const uci::type::DateTimeSigmaType& accessor) override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The const reference to the accessor to the Source field.
    */
  const uci::type::EntitySourceType& getSource() const override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The reference to the accessor to the Source field.
    */
  uci::type::EntitySourceType& getSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setSource(const uci::type::EntitySourceType& accessor) override;

  /** Returns the contents of the message's EntityStatus field
    *
    * @return The contents of the EntityStatus field
    */
  const uci::type::EntityStatusEnum& getEntityStatus() const override;

  /** Returns the contents of the message's EntityStatus field
    *
    * @return The contents of the EntityStatus field
    */
  uci::type::EntityStatusEnum& getEntityStatus() override;

  /** Sets the contents of the message's EntityStatus field
    *
    * @param accessor The accessor to use to set the EntityStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setEntityStatus(const uci::type::EntityStatusEnum& accessor) override;

  /** Sets the contents of the message's EntityStatus field
    *
    * @param value The new value to set the EntityStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setEntityStatus(uci::type::EntityStatusEnum::EnumerationItem value) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& getOperationalStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OB_OperationalStatusEnum& getOperationalStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& getOperationalStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setOperationalStatus(const uci::type::OB_OperationalStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setOperationalStatus(uci::type::OB_OperationalStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field OperationalStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOperationalStatus() const noexcept override;

  /** Enables the optional field such that getOperationalStatus will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& enableOperationalStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearOperationalStatus() noexcept override;

  /** Returns the accessor to the Identity field contained in this message fragment
    *
    * @return The const reference to the accessor to the Identity field.
    */
  const uci::type::EntityIdentityType& getIdentity() const override;

  /** Returns the accessor to the Identity field contained in this message fragment
    *
    * @return The reference to the accessor to the Identity field.
    */
  uci::type::EntityIdentityType& getIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setIdentity(const uci::type::EntityIdentityType& accessor) override;

  /** Returns the accessor to the SiteEntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SiteEntityID field.
    */
  const uci::type::EntityMDT::SiteEntityID& getSiteEntityID() const override;

  /** Returns the accessor to the SiteEntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the SiteEntityID field.
    */
  uci::type::EntityMDT::SiteEntityID& getSiteEntityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setSiteEntityID(const uci::type::EntityMDT::SiteEntityID& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& getMobility_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MobilityEnum& getMobility() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& getMobility() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setMobility(const uci::type::MobilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setMobility(uci::type::MobilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field Mobilityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMobility() const noexcept override;

  /** Enables the optional field such that getMobility will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MobilityEnum& enableMobility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearMobility() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsType& getKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::KinematicsType& getKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsType& getKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setKinematics(const uci::type::KinematicsType& accessor) override;

  /** Returns whether this optional field Kinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasKinematics() const noexcept override;

  /** Enables the optional field such that getKinematics will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsType& enableKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsType& getEstimatedKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::KinematicsType& getEstimatedKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsType& getEstimatedKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setEstimatedKinematics(const uci::type::KinematicsType& accessor) override;

  /** Returns whether this optional field EstimatedKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedKinematics() const noexcept override;

  /** Enables the optional field such that getEstimatedKinematics will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::KinematicsType& enableEstimatedKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearEstimatedKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& getDownLocation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point2D_Type& getDownLocation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& getDownLocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setDownLocation(const uci::type::Point2D_Type& accessor) override;

  /** Returns whether this optional field DownLocationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDownLocation() const noexcept override;

  /** Enables the optional field such that getDownLocation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& enableDownLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearDownLocation() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformStatusType& getPlatformStatus_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PlatformStatusType& getPlatformStatus() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformStatusType& getPlatformStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setPlatformStatus(const uci::type::PlatformStatusType& accessor) override;

  /** Returns whether this optional field PlatformStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPlatformStatus() const noexcept override;

  /** Enables the optional field such that getPlatformStatus will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PlatformStatusType& enablePlatformStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearPlatformStatus() noexcept override;

  /** Returns the accessor to the SignalSummary field contained in this message fragment
    *
    * @return The const reference to the accessor to the SignalSummary field.
    */
  const uci::type::EntityMDT::SignalSummary& getSignalSummary() const override;

  /** Returns the accessor to the SignalSummary field contained in this message fragment
    *
    * @return The reference to the accessor to the SignalSummary field.
    */
  uci::type::EntityMDT::SignalSummary& getSignalSummary() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setSignalSummary(const uci::type::EntityMDT::SignalSummary& accessor) override;

  /** Returns the accessor to the PulseDataID field contained in this message fragment
    *
    * @return The const reference to the accessor to the PulseDataID field.
    */
  const uci::type::EntityMDT::PulseDataID& getPulseDataID() const override;

  /** Returns the accessor to the PulseDataID field contained in this message fragment
    *
    * @return The reference to the accessor to the PulseDataID field.
    */
  uci::type::EntityMDT::PulseDataID& getPulseDataID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setPulseDataID(const uci::type::EntityMDT::PulseDataID& accessor) override;

  /** Returns the accessor to the MeasurementID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MeasurementID field.
    */
  const uci::type::EntityMDT::MeasurementID& getMeasurementID() const override;

  /** Returns the accessor to the MeasurementID field contained in this message fragment
    *
    * @return The reference to the accessor to the MeasurementID field.
    */
  uci::type::EntityMDT::MeasurementID& getMeasurementID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setMeasurementID(const uci::type::EntityMDT::MeasurementID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StrengthType& getStrength_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::StrengthType& getStrength() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StrengthType& getStrength() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setStrength(const uci::type::StrengthType& accessor) override;

  /** Returns whether this optional field Strengthis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStrength() const noexcept override;

  /** Enables the optional field such that getStrength will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StrengthType& enableStrength(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearStrength() noexcept override;

  /** Returns the accessor to the ActivityAgainst field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityAgainst field.
    */
  const uci::type::EntityMDT::ActivityAgainst& getActivityAgainst() const override;

  /** Returns the accessor to the ActivityAgainst field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityAgainst field.
    */
  uci::type::EntityMDT::ActivityAgainst& getActivityAgainst() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setActivityAgainst(const uci::type::EntityMDT::ActivityAgainst& accessor) override;

  /** Returns the accessor to the ActivityBy field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityBy field.
    */
  const uci::type::EntityMDT::ActivityBy& getActivityBy() const override;

  /** Returns the accessor to the ActivityBy field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityBy field.
    */
  uci::type::EntityMDT::ActivityBy& getActivityBy() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setActivityBy(const uci::type::EntityMDT::ActivityBy& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceType& getEndurance_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EnduranceType& getEndurance() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceType& getEndurance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setEndurance(const uci::type::EnduranceType& accessor) override;

  /** Returns whether this optional field Enduranceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEndurance() const noexcept override;

  /** Enables the optional field such that getEndurance will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EnduranceType& enableEndurance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearEndurance() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VoiceControlType& getVoiceControl_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::VoiceControlType& getVoiceControl() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VoiceControlType& getVoiceControl() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setVoiceControl(const uci::type::VoiceControlType& accessor) override;

  /** Returns whether this optional field VoiceControlis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasVoiceControl() const noexcept override;

  /** Enables the optional field such that getVoiceControl will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::VoiceControlType& enableVoiceControl(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearVoiceControl() noexcept override;

  /** Returns the accessor to the AssociatedID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedID field.
    */
  const uci::type::EntityMDT::AssociatedID& getAssociatedID() const override;

  /** Returns the accessor to the AssociatedID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedID field.
    */
  uci::type::EntityMDT::AssociatedID& getAssociatedID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setAssociatedID(const uci::type::EntityMDT::AssociatedID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityRemoveInfoType& getRemoveInfo_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EntityRemoveInfoType& getRemoveInfo() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityRemoveInfoType& getRemoveInfo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setRemoveInfo(const uci::type::EntityRemoveInfoType& accessor) override;

  /** Returns whether this optional field RemoveInfois available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemoveInfo() const noexcept override;

  /** Enables the optional field such that getRemoveInfo will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EntityRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearRemoveInfo() noexcept override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityID field.
    */
  const uci::type::EntityMDT::CapabilityID& getCapabilityID() const override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityID field.
    */
  uci::type::EntityMDT::CapabilityID& getCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setCapabilityID(const uci::type::EntityMDT::CapabilityID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalKinematicsChoiceType& getOrbitalKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalKinematicsChoiceType& getOrbitalKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalKinematicsChoiceType& getOrbitalKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setOrbitalKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) override;

  /** Returns whether this optional field OrbitalKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrbitalKinematics() const noexcept override;

  /** Enables the optional field such that getOrbitalKinematics will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalKinematicsChoiceType& enableOrbitalKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearOrbitalKinematics() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSingleVectorParametersType& getOrbitalKinematicsParameters_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalSingleVectorParametersType& getOrbitalKinematicsParameters() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSingleVectorParametersType& getOrbitalKinematicsParameters() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setOrbitalKinematicsParameters(const uci::type::OrbitalSingleVectorParametersType& accessor) override;

  /** Returns whether this optional field OrbitalKinematicsParametersis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOrbitalKinematicsParameters() const noexcept override;

  /** Enables the optional field such that getOrbitalKinematicsParameters will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalSingleVectorParametersType& enableOrbitalKinematicsParameters(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearOrbitalKinematicsParameters() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalKinematicsChoiceType& getEstimatedOrbitalKinematics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrbitalKinematicsChoiceType& getEstimatedOrbitalKinematics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalKinematicsChoiceType& getEstimatedOrbitalKinematics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& setEstimatedOrbitalKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) override;

  /** Returns whether this optional field EstimatedOrbitalKinematicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedOrbitalKinematics() const noexcept override;

  /** Enables the optional field such that getEstimatedOrbitalKinematics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrbitalKinematicsChoiceType& enableEstimatedOrbitalKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityMDT& clearEstimatedOrbitalKinematics() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EntityMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EntityMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EntityID_Type> entityID_Accessor;
  std::unique_ptr<DateTimeSigmaType> creationTimestamp_Accessor;
  std::unique_ptr<EntitySourceType> source_Accessor;
  std::unique_ptr<EntityStatusEnum> entityStatus_Accessor;
  std::unique_ptr<OB_OperationalStatusEnum> operationalStatus_Accessor;
  std::unique_ptr<EntityIdentityType> identity_Accessor;
  std::unique_ptr<SiteEntityID> siteEntityID_Accessor;
  std::unique_ptr<MobilityEnum> mobility_Accessor;
  std::unique_ptr<KinematicsType> kinematics_Accessor;
  std::unique_ptr<KinematicsType> estimatedKinematics_Accessor;
  std::unique_ptr<Point2D_Type> downLocation_Accessor;
  std::unique_ptr<PlatformStatusType> platformStatus_Accessor;
  std::unique_ptr<SignalSummary> signalSummary_Accessor;
  std::unique_ptr<PulseDataID> pulseDataID_Accessor;
  std::unique_ptr<MeasurementID> measurementID_Accessor;
  std::unique_ptr<StrengthType> strength_Accessor;
  std::unique_ptr<ActivityAgainst> activityAgainst_Accessor;
  std::unique_ptr<ActivityBy> activityBy_Accessor;
  std::unique_ptr<EnduranceType> endurance_Accessor;
  std::unique_ptr<VoiceControlType> voiceControl_Accessor;
  std::unique_ptr<AssociatedID> associatedID_Accessor;
  std::unique_ptr<EntityRemoveInfoType> removeInfo_Accessor;
  std::unique_ptr<CapabilityID> capabilityID_Accessor;
  std::unique_ptr<OrbitalKinematicsChoiceType> orbitalKinematics_Accessor;
  std::unique_ptr<OrbitalSingleVectorParametersType> orbitalKinematicsParameters_Accessor;
  std::unique_ptr<OrbitalKinematicsChoiceType> estimatedOrbitalKinematics_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ENTITYMDT_H
