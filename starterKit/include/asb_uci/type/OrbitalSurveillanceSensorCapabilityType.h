/** @file OrbitalSurveillanceSensorCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ORBITALSURVEILLANCESENSORCAPABILITYTYPE_H
#define ASB_UCI_TYPE_ORBITALSURVEILLANCESENSORCAPABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CharacterizationTypeEnum.h"
#include "../../../include/asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorMessageOutputsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSensorCapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class OrbitalSurveillanceSensorSubCapabilityType;
class SensorConstraintsBaseType;

/** Describes the Orbital Surveillance Sensor capability. */
class OrbitalSurveillanceSensorCapabilityType : public virtual uci::type::OrbitalSurveillanceSensorCapabilityType, public virtual CommandableCapabilityDeclarationType {
public:
  /** Indicates a type of characterization phenomenology that is supported by this capability. List size for this element
    * is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 10]
    */
  using CharacterizationOptions = asb_uci::base::BoundedList<uci::type::CharacterizationTypeEnum, uci::type::accessorType::characterizationTypeEnum, asb_uci::type::CharacterizationTypeEnum>;

  /** This field specifies which type of sensor constraints are supported by this capability. If multiple instances are
    * given, each should be of a different constraint type as indicated by the child element. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SensorConstraints = asb_uci::base::BoundedList<uci::type::SensorConstraintsBaseType, uci::type::accessorType::sensorConstraintsBaseType, asb_uci::type::SensorConstraintsBaseType>;

  /** Indicates a message that is an output of the Capability. See enumerated type annotations for details. List size for
    * this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 7]
    */
  using MessageOutput = asb_uci::base::BoundedList<uci::type::OrbitalSurveillanceSensorMessageOutputsEnum, uci::type::accessorType::orbitalSurveillanceSensorMessageOutputsEnum, asb_uci::type::OrbitalSurveillanceSensorMessageOutputsEnum>;

  /** The constructor */
  OrbitalSurveillanceSensorCapabilityType();

  /** The copy constructor
    *
    * @param rhs The OrbitalSurveillanceSensorCapabilityType to copy from
    */
  OrbitalSurveillanceSensorCapabilityType(const OrbitalSurveillanceSensorCapabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OrbitalSurveillanceSensorCapabilityType to move from
    */
  OrbitalSurveillanceSensorCapabilityType(OrbitalSurveillanceSensorCapabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The OrbitalSurveillanceSensorCapabilityType to copy from
    * @return The OrbitalSurveillanceSensorCapabilityType that was assigned
    */
  OrbitalSurveillanceSensorCapabilityType& operator=(const OrbitalSurveillanceSensorCapabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OrbitalSurveillanceSensorCapabilityType to move from
    * @return The OrbitalSurveillanceSensorCapabilityType that was assigned
    */
  OrbitalSurveillanceSensorCapabilityType& operator=(OrbitalSurveillanceSensorCapabilityType&& rhs) = delete;

  /** The destructor */
  ~OrbitalSurveillanceSensorCapabilityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalSurveillanceSensorCapabilityType whose contents are to be used to set this
    *      uci::type::OrbitalSurveillanceSensorCapabilityType's contents.
    */
  void copy(const uci::type::OrbitalSurveillanceSensorCapabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OrbitalSurveillanceSensorCapabilityType whose contents are to be used to set this
    *      uci::type::OrbitalSurveillanceSensorCapabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OrbitalSurveillanceSensorCapabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  const uci::type::OrbitalSurveillanceSensorCapabilityEnum& getCapabilityType() const override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  uci::type::OrbitalSurveillanceSensorCapabilityEnum& getCapabilityType() override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param accessor The accessor to use to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType& setCapabilityType(const uci::type::OrbitalSurveillanceSensorCapabilityEnum& accessor) override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param value The new value to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType& setCapabilityType(uci::type::OrbitalSurveillanceSensorCapabilityEnum::EnumerationItem value) override;

  /** Returns the accessor to the SubCapabilityType field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCapabilityType field.
    */
  const uci::type::OrbitalSurveillanceSensorSubCapabilityType& getSubCapabilityType() const override;

  /** Returns the accessor to the SubCapabilityType field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCapabilityType field.
    */
  uci::type::OrbitalSurveillanceSensorSubCapabilityType& getSubCapabilityType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType& setSubCapabilityType(const uci::type::OrbitalSurveillanceSensorSubCapabilityType& accessor) override;

  /** Returns the accessor to the CharacterizationOptions field contained in this message fragment
    *
    * @return The const reference to the accessor to the CharacterizationOptions field.
    */
  const uci::type::OrbitalSurveillanceSensorCapabilityType::CharacterizationOptions& getCharacterizationOptions() const override;

  /** Returns the accessor to the CharacterizationOptions field contained in this message fragment
    *
    * @return The reference to the accessor to the CharacterizationOptions field.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType::CharacterizationOptions& getCharacterizationOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType& setCharacterizationOptions(const uci::type::OrbitalSurveillanceSensorCapabilityType::CharacterizationOptions& accessor) override;

  /** Returns the accessor to the SensorConstraints field contained in this message fragment
    *
    * @return The const reference to the accessor to the SensorConstraints field.
    */
  const uci::type::OrbitalSurveillanceSensorCapabilityType::SensorConstraints& getSensorConstraints() const override;

  /** Returns the accessor to the SensorConstraints field contained in this message fragment
    *
    * @return The reference to the accessor to the SensorConstraints field.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType::SensorConstraints& getSensorConstraints() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType& setSensorConstraints(const uci::type::OrbitalSurveillanceSensorCapabilityType::SensorConstraints& accessor) override;

  /** Returns the accessor to the MessageOutput field contained in this message fragment
    *
    * @return The const reference to the accessor to the MessageOutput field.
    */
  const uci::type::OrbitalSurveillanceSensorCapabilityType::MessageOutput& getMessageOutput() const override;

  /** Returns the accessor to the MessageOutput field contained in this message fragment
    *
    * @return The reference to the accessor to the MessageOutput field.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType::MessageOutput& getMessageOutput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OrbitalSurveillanceSensorCapabilityType& setMessageOutput(const uci::type::OrbitalSurveillanceSensorCapabilityType::MessageOutput& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OrbitalSurveillanceSensorCapabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceSensorCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OrbitalSurveillanceSensorCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<OrbitalSurveillanceSensorCapabilityEnum> capabilityType_Accessor;
  std::unique_ptr<OrbitalSurveillanceSensorSubCapabilityType> subCapabilityType_Accessor;
  std::unique_ptr<CharacterizationOptions> characterizationOptions_Accessor;
  std::unique_ptr<SensorConstraints> sensorConstraints_Accessor;
  std::unique_ptr<MessageOutput> messageOutput_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ORBITALSURVEILLANCESENSORCAPABILITYTYPE_H
