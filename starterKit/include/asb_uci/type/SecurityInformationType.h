/** @file SecurityInformationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SECURITYINFORMATIONTYPE_H
#define ASB_UCI_TYPE_SECURITYINFORMATIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../base/BoundedList.h"
#include "ClassificationEnum.h"
#include "DeclassExceptionEnum.h"
#include "DisseminationControlsEnum.h"
#include "NonUS_ControlsEnum.h"
#include "SAR_IdentifierType.h"
#include "WhitespaceVisibleString1024Type.h"
#include "WhitespaceVisibleString4096Type.h"
#include "../../asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityInformationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AtomicEnergyMarkingsChoiceType;
class FGI_SourceOpenChoiceType;
class NonIC_MarkingsChoiceType;
class OwnerProducerChoiceType;
class ReleasableToChoiceType;
class SCI_ControlsChoiceType;

/** This type indicates a variety of security information for a data asset including how a data asset shall be stored,
  * protected, and destroyed.
  */
class SecurityInformationType : public virtual uci::type::SecurityInformationType {
public:
  /** Identifies the national government or international organization that have purview over the classification marking of
    * an information resource or portion therein. Within protected internal organizational spaces this element may include
    * up to 1000 indicators identifying information which qualifies as foreign government information for which the
    * source(s) of the information must be concealed. Measures must be taken prior to dissemination of the information to
    * conceal the source(s) of the foreign government information. Specifically, under these specific circumstances, when
    * data are moved to the shared spaces, the non-disclosable owner(s) and/or producer(s) listed in this data element's
    * value should be removed and replaced with "FGI". [Occurrences: Minimum: 1; Maximum: 358]
    */
  using OwnerProducer = asb_uci::base::BoundedList<uci::type::OwnerProducerChoiceType, uci::type::accessorType::ownerProducerChoiceType, asb_uci::type::OwnerProducerChoiceType>;

  /** Identifies sensitive compartmented information control system(s). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using SCI_Controls = asb_uci::base::BoundedList<uci::type::SCI_ControlsChoiceType, uci::type::accessorType::sCI_ControlsChoiceType, asb_uci::type::SCI_ControlsChoiceType>;

  /** Identifies the defense or intelligence programs for which special access is required. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using SAR_Identifier = asb_uci::base::BoundedList<uci::type::SAR_IdentifierType, uci::type::accessorType::sAR_IdentifierType, asb_uci::type::SAR_IdentifierType>;

  /** Identifies DoE markings. [Occurrences: Minimum: 0; Maximum: 14] */
  using AtomicEnergyMarkings = asb_uci::base::BoundedList<uci::type::AtomicEnergyMarkingsChoiceType, uci::type::accessorType::atomicEnergyMarkingsChoiceType, asb_uci::type::AtomicEnergyMarkingsChoiceType>;

  /** Identifies the expansion or limitation on the distribution of information. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 13]
    */
  using DisseminationControls = asb_uci::base::BoundedList<uci::type::DisseminationControlsEnum, uci::type::accessorType::disseminationControlsEnum, asb_uci::type::DisseminationControlsEnum>;

  /** Identifies the country/countries and/or international organization(s) to which classified information may be
    * displayed but NOT released based on the determination of an originator in accordance with established foreign
    * disclosure procedures. This element is used in conjunction with the DisplayOnly Dissemination Controls value.
    * [Occurrences: Minimum: 0; Maximum: 357]
    */
  using DisplayOnlyTo = asb_uci::base::BoundedList<uci::type::ReleasableToChoiceType, uci::type::accessorType::releasableToChoiceType, asb_uci::type::ReleasableToChoiceType>;

  /** Identifies information which qualifies as foreign government information for which the source(s) of the information
    * is not concealed. The attribute can indicate that the source of information of foreign origin is UNKNOWN.
    * [Occurrences: Minimum: 0; Maximum: 357]
    */
  using FGI_SourceOpen = asb_uci::base::BoundedList<uci::type::FGI_SourceOpenChoiceType, uci::type::accessorType::fGI_SourceOpenChoiceType, asb_uci::type::FGI_SourceOpenChoiceType>;

  /** Identifies the country or countries and/or international organization(s) to which classified information may be
    * released based on the determination of an originator in accordance with established foreign disclosure procedures.
    * This element is used in conjunction with the Dissemination Controls element. [Occurrences: Minimum: 0; Maximum: 357]
    */
  using ReleasableTo = asb_uci::base::BoundedList<uci::type::ReleasableToChoiceType, uci::type::accessorType::releasableToChoiceType, asb_uci::type::ReleasableToChoiceType>;

  /** Identifies the expansion or limitation on the distribution of an information resource or portion within the domain of
    * information originating from non-intelligence components. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using NonIC_Markings = asb_uci::base::BoundedList<uci::type::NonIC_MarkingsChoiceType, uci::type::accessorType::nonIC_MarkingsChoiceType, asb_uci::type::NonIC_MarkingsChoiceType>;

  /** One or more indicators of the expansion or limitation on the distribution of an information resource or portion
    * within the domain of information originating from non-US components. List size for this element is based on "Select
    * All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 3]
    */
  using NonUS_Controls = asb_uci::base::BoundedList<uci::type::NonUS_ControlsEnum, uci::type::accessorType::nonUS_ControlsEnum, asb_uci::type::NonUS_ControlsEnum>;

  /** A single indicator describing an exemption to the nominal 25-year point for automatic declassification. This element
    * is used in conjunction with the Declassification Date or Declassification Event. ISOO has stated it should be a
    * SINGLE value giving the longest protection. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 17]
    */
  using DeclassException = asb_uci::base::BoundedList<uci::type::DeclassExceptionEnum, uci::type::accessorType::declassExceptionEnum, asb_uci::type::DeclassExceptionEnum>;

  /** The constructor */
  SecurityInformationType();

  /** The copy constructor
    *
    * @param rhs The SecurityInformationType to copy from
    */
  SecurityInformationType(const SecurityInformationType& rhs) ;

  /** The move constructor
    *
    * @param rhs The SecurityInformationType to move from
    */
  SecurityInformationType(SecurityInformationType&& rhs);

  /** The assignment operator
    *
    * @param rhs The SecurityInformationType to copy from
    * @return The SecurityInformationType that was assigned
    */
  SecurityInformationType& operator=(const SecurityInformationType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SecurityInformationType to move from
    * @return The SecurityInformationType that was assigned
    */
  SecurityInformationType& operator=(SecurityInformationType&& rhs) = delete;

  /** The destructor */
  virtual ~SecurityInformationType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SecurityInformationType whose contents are to be used to set this
    *      uci::type::SecurityInformationType's contents.
    */
  void copy(const uci::type::SecurityInformationType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SecurityInformationType whose contents are to be used to set this
    *      uci::type::SecurityInformationType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SecurityInformationType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's Classification field
    *
    * @return The contents of the Classification field
    */
  const uci::type::ClassificationEnum& getClassification() const override;

  /** Returns the contents of the message's Classification field
    *
    * @return The contents of the Classification field
    */
  uci::type::ClassificationEnum& getClassification() override;

  /** Sets the contents of the message's Classification field
    *
    * @param accessor The accessor to use to set the Classification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassification(const uci::type::ClassificationEnum& accessor) override;

  /** Sets the contents of the message's Classification field
    *
    * @param value The new value to set the Classification field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassification(uci::type::ClassificationEnum::EnumerationItem value) override;

  /** Returns the accessor to the OwnerProducer field contained in this message fragment
    *
    * @return The const reference to the accessor to the OwnerProducer field.
    */
  const uci::type::SecurityInformationType::OwnerProducer& getOwnerProducer() const override;

  /** Returns the accessor to the OwnerProducer field contained in this message fragment
    *
    * @return The reference to the accessor to the OwnerProducer field.
    */
  uci::type::SecurityInformationType::OwnerProducer& getOwnerProducer() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setOwnerProducer(const uci::type::SecurityInformationType::OwnerProducer& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getJoint() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setJoint(xs::Boolean value) override;

  /** Returns whether this optional field Jointis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasJoint() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearJoint() noexcept override;

  /** Returns the accessor to the SCI_Controls field contained in this message fragment
    *
    * @return The const reference to the accessor to the SCI_Controls field.
    */
  const uci::type::SecurityInformationType::SCI_Controls& getSCI_Controls() const override;

  /** Returns the accessor to the SCI_Controls field contained in this message fragment
    *
    * @return The reference to the accessor to the SCI_Controls field.
    */
  uci::type::SecurityInformationType::SCI_Controls& getSCI_Controls() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setSCI_Controls(const uci::type::SecurityInformationType::SCI_Controls& accessor) override;

  /** Returns the accessor to the SAR_Identifier field contained in this message fragment
    *
    * @return The const reference to the accessor to the SAR_Identifier field.
    */
  const uci::type::SecurityInformationType::SAR_Identifier& getSAR_Identifier() const override;

  /** Returns the accessor to the SAR_Identifier field contained in this message fragment
    *
    * @return The reference to the accessor to the SAR_Identifier field.
    */
  uci::type::SecurityInformationType::SAR_Identifier& getSAR_Identifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setSAR_Identifier(const uci::type::SecurityInformationType::SAR_Identifier& accessor) override;

  /** Returns the accessor to the AtomicEnergyMarkings field contained in this message fragment
    *
    * @return The const reference to the accessor to the AtomicEnergyMarkings field.
    */
  const uci::type::SecurityInformationType::AtomicEnergyMarkings& getAtomicEnergyMarkings() const override;

  /** Returns the accessor to the AtomicEnergyMarkings field contained in this message fragment
    *
    * @return The reference to the accessor to the AtomicEnergyMarkings field.
    */
  uci::type::SecurityInformationType::AtomicEnergyMarkings& getAtomicEnergyMarkings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setAtomicEnergyMarkings(const uci::type::SecurityInformationType::AtomicEnergyMarkings& accessor) override;

  /** Returns the accessor to the DisseminationControls field contained in this message fragment
    *
    * @return The const reference to the accessor to the DisseminationControls field.
    */
  const uci::type::SecurityInformationType::DisseminationControls& getDisseminationControls() const override;

  /** Returns the accessor to the DisseminationControls field contained in this message fragment
    *
    * @return The reference to the accessor to the DisseminationControls field.
    */
  uci::type::SecurityInformationType::DisseminationControls& getDisseminationControls() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDisseminationControls(const uci::type::SecurityInformationType::DisseminationControls& accessor) override;

  /** Returns the accessor to the DisplayOnlyTo field contained in this message fragment
    *
    * @return The const reference to the accessor to the DisplayOnlyTo field.
    */
  const uci::type::SecurityInformationType::DisplayOnlyTo& getDisplayOnlyTo() const override;

  /** Returns the accessor to the DisplayOnlyTo field contained in this message fragment
    *
    * @return The reference to the accessor to the DisplayOnlyTo field.
    */
  uci::type::SecurityInformationType::DisplayOnlyTo& getDisplayOnlyTo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDisplayOnlyTo(const uci::type::SecurityInformationType::DisplayOnlyTo& accessor) override;

  /** Returns the accessor to the FGI_SourceOpen field contained in this message fragment
    *
    * @return The const reference to the accessor to the FGI_SourceOpen field.
    */
  const uci::type::SecurityInformationType::FGI_SourceOpen& getFGI_SourceOpen() const override;

  /** Returns the accessor to the FGI_SourceOpen field contained in this message fragment
    *
    * @return The reference to the accessor to the FGI_SourceOpen field.
    */
  uci::type::SecurityInformationType::FGI_SourceOpen& getFGI_SourceOpen() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setFGI_SourceOpen(const uci::type::SecurityInformationType::FGI_SourceOpen& accessor) override;

  /** Returns the accessor to the ReleasableTo field contained in this message fragment
    *
    * @return The const reference to the accessor to the ReleasableTo field.
    */
  const uci::type::SecurityInformationType::ReleasableTo& getReleasableTo() const override;

  /** Returns the accessor to the ReleasableTo field contained in this message fragment
    *
    * @return The reference to the accessor to the ReleasableTo field.
    */
  uci::type::SecurityInformationType::ReleasableTo& getReleasableTo() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setReleasableTo(const uci::type::SecurityInformationType::ReleasableTo& accessor) override;

  /** Returns the accessor to the NonIC_Markings field contained in this message fragment
    *
    * @return The const reference to the accessor to the NonIC_Markings field.
    */
  const uci::type::SecurityInformationType::NonIC_Markings& getNonIC_Markings() const override;

  /** Returns the accessor to the NonIC_Markings field contained in this message fragment
    *
    * @return The reference to the accessor to the NonIC_Markings field.
    */
  uci::type::SecurityInformationType::NonIC_Markings& getNonIC_Markings() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setNonIC_Markings(const uci::type::SecurityInformationType::NonIC_Markings& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getClassifiedBy_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::WhitespaceVisibleString1024Type& getClassifiedBy() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getClassifiedBy() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassifiedBy(const uci::type::WhitespaceVisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassifiedBy(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassifiedBy(const char* value) override;

  /** Returns whether this optional field classifiedBy_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasClassifiedBy() const noexcept override;

  /** Enables the optional field such that getClassifiedBy will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& enableClassifiedBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearClassifiedBy() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getCompilationReason_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::WhitespaceVisibleString1024Type& getCompilationReason() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getCompilationReason() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setCompilationReason(const uci::type::WhitespaceVisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setCompilationReason(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setCompilationReason(const char* value) override;

  /** Returns whether this optional field compilationReason_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCompilationReason() const noexcept override;

  /** Enables the optional field such that getCompilationReason will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& enableCompilationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearCompilationReason() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getDerivativelyClassifiedBy_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::WhitespaceVisibleString1024Type& getDerivativelyClassifiedBy() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getDerivativelyClassifiedBy() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDerivativelyClassifiedBy(const uci::type::WhitespaceVisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDerivativelyClassifiedBy(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDerivativelyClassifiedBy(const char* value) override;

  /** Returns whether this optional field derivativelyClassifiedBy_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDerivativelyClassifiedBy() const noexcept override;

  /** Enables the optional field such that getDerivativelyClassifiedBy will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& enableDerivativelyClassifiedBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearDerivativelyClassifiedBy() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString4096Type& getClassificationReason_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::WhitespaceVisibleString4096Type& getClassificationReason() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString4096Type& getClassificationReason() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassificationReason(const uci::type::WhitespaceVisibleString4096Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassificationReason(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setClassificationReason(const char* value) override;

  /** Returns whether this optional field classificationReason_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasClassificationReason() const noexcept override;

  /** Enables the optional field such that getClassificationReason will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString4096Type& enableClassificationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearClassificationReason() noexcept override;

  /** Returns the accessor to the NonUS_Controls field contained in this message fragment
    *
    * @return The const reference to the accessor to the NonUS_Controls field.
    */
  const uci::type::SecurityInformationType::NonUS_Controls& getNonUS_Controls() const override;

  /** Returns the accessor to the NonUS_Controls field contained in this message fragment
    *
    * @return The reference to the accessor to the NonUS_Controls field.
    */
  uci::type::SecurityInformationType::NonUS_Controls& getNonUS_Controls() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setNonUS_Controls(const uci::type::SecurityInformationType::NonUS_Controls& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getDerivedFrom_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::WhitespaceVisibleString1024Type& getDerivedFrom() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getDerivedFrom() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDerivedFrom(const uci::type::WhitespaceVisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDerivedFrom(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDerivedFrom(const char* value) override;

  /** Returns whether this optional field derivedFrom_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDerivedFrom() const noexcept override;

  /** Enables the optional field such that getDerivedFrom will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& enableDerivedFrom(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearDerivedFrom() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::DateTime getDeclassDate() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDeclassDate(xs::DateTime value) override;

  /** Returns whether this optional field DeclassDateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDeclassDate() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearDeclassDate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getDeclassEvent_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::WhitespaceVisibleString1024Type& getDeclassEvent() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& getDeclassEvent() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDeclassEvent(const uci::type::WhitespaceVisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDeclassEvent(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDeclassEvent(const char* value) override;

  /** Returns whether this optional field declassEvent_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDeclassEvent() const noexcept override;

  /** Enables the optional field such that getDeclassEvent will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::WhitespaceVisibleString1024Type& enableDeclassEvent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& clearDeclassEvent() noexcept override;

  /** Returns the accessor to the DeclassException field contained in this message fragment
    *
    * @return The const reference to the accessor to the DeclassException field.
    */
  const uci::type::SecurityInformationType::DeclassException& getDeclassException() const override;

  /** Returns the accessor to the DeclassException field contained in this message fragment
    *
    * @return The reference to the accessor to the DeclassException field.
    */
  uci::type::SecurityInformationType::DeclassException& getDeclassException() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SecurityInformationType& setDeclassException(const uci::type::SecurityInformationType::DeclassException& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SecurityInformationType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SecurityInformationType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SecurityInformationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ClassificationEnum> classification_Accessor;
  std::unique_ptr<OwnerProducer> ownerProducer_Accessor;
  boost::optional<asb_xs::Boolean> joint_Accessor;
  std::unique_ptr<SCI_Controls> sCI_Controls_Accessor;
  std::unique_ptr<SAR_Identifier> sAR_Identifier_Accessor;
  std::unique_ptr<AtomicEnergyMarkings> atomicEnergyMarkings_Accessor;
  std::unique_ptr<DisseminationControls> disseminationControls_Accessor;
  std::unique_ptr<DisplayOnlyTo> displayOnlyTo_Accessor;
  std::unique_ptr<FGI_SourceOpen> fGI_SourceOpen_Accessor;
  std::unique_ptr<ReleasableTo> releasableTo_Accessor;
  std::unique_ptr<NonIC_Markings> nonIC_Markings_Accessor;
  std::unique_ptr<WhitespaceVisibleString1024Type> classifiedBy_Accessor;
  std::unique_ptr<WhitespaceVisibleString1024Type> compilationReason_Accessor;
  std::unique_ptr<WhitespaceVisibleString1024Type> derivativelyClassifiedBy_Accessor;
  std::unique_ptr<WhitespaceVisibleString4096Type> classificationReason_Accessor;
  std::unique_ptr<NonUS_Controls> nonUS_Controls_Accessor;
  std::unique_ptr<WhitespaceVisibleString1024Type> derivedFrom_Accessor;
  boost::optional<asb_xs::DateTime> declassDate_Accessor;
  std::unique_ptr<WhitespaceVisibleString1024Type> declassEvent_Accessor;
  std::unique_ptr<DeclassException> declassException_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SECURITYINFORMATIONTYPE_H
