/** @file RF_OperationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_RF_OPERATIONTYPE_H
#define ASB_UCI_TYPE_RF_OPERATIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/ModulationEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_OperationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ActivityID_Type;
class CapabilityID_Type;
class ConfigureInteroperabilityReportType;
class DateTimeRangeBeginType;
class DurationRangeType;
class FOV_VolumeType;
class PercentRangeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class RF_OperationType : public virtual uci::type::RF_OperationType {
public:
  /** Indicates the unique IDs of related activities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ActivityID = asb_uci::base::BoundedList<uci::type::ActivityID_Type, uci::type::accessorType::activityID_Type, asb_uci::type::ActivityID_Type>;

  /** The constructor */
  RF_OperationType();

  /** The copy constructor
    *
    * @param rhs The RF_OperationType to copy from
    */
  RF_OperationType(const RF_OperationType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The RF_OperationType to move from
    */
  RF_OperationType(RF_OperationType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The RF_OperationType to copy from
    * @return The RF_OperationType that was assigned
    */
  RF_OperationType& operator=(const RF_OperationType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The RF_OperationType to move from
    * @return The RF_OperationType that was assigned
    */
  RF_OperationType& operator=(RF_OperationType&& rhs) = delete;

  /** The destructor */
  virtual ~RF_OperationType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RF_OperationType whose contents are to be used to set this
    *      uci::type::RF_OperationType's contents.
    */
  void copy(const uci::type::RF_OperationType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::RF_OperationType whose contents are to be used to set this
    *      uci::type::RF_OperationType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::RF_OperationType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityID field.
    */
  const uci::type::CapabilityID_Type& getCapabilityID() const override;

  /** Returns the accessor to the CapabilityID field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityID field.
    */
  uci::type::CapabilityID_Type& getCapabilityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setCapabilityID(const uci::type::CapabilityID_Type& accessor) override;

  /** Returns the accessor to the ActivityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ActivityID field.
    */
  const uci::type::RF_OperationType::ActivityID& getActivityID() const override;

  /** Returns the accessor to the ActivityID field contained in this message fragment
    *
    * @return The reference to the accessor to the ActivityID field.
    */
  uci::type::RF_OperationType::ActivityID& getActivityID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setActivityID(const uci::type::RF_OperationType::ActivityID& accessor) override;

  /** Returns the contents of the message's Receive field
    *
    * @return The contents of the Receive field
    */
  xs::Boolean getReceive() const override;

  /** Sets the contents of the message's Receive field
    *
    * @param value The new value to set the Receive field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setReceive(xs::Boolean value) override;

  /** Returns the contents of the message's Transmit field
    *
    * @return The contents of the Transmit field
    */
  xs::Boolean getTransmit() const override;

  /** Sets the contents of the message's Transmit field
    *
    * @param value The new value to set the Transmit field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setTransmit(xs::Boolean value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_VolumeType& getEmissionLocation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::FOV_VolumeType& getEmissionLocation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_VolumeType& getEmissionLocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setEmissionLocation(const uci::type::FOV_VolumeType& accessor) override;

  /** Returns whether this optional field EmissionLocationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEmissionLocation() const noexcept override;

  /** Enables the optional field such that getEmissionLocation will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::FOV_VolumeType& enableEmissionLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& clearEmissionLocation() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationEnum& getModulation_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ModulationEnum& getModulation() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationEnum& getModulation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setModulation(const uci::type::ModulationEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setModulation(uci::type::ModulationEnum::EnumerationItem value) override;

  /** Returns whether this optional field Modulationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasModulation() const noexcept override;

  /** Enables the optional field such that getModulation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ModulationEnum& enableModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& clearModulation() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DurationRangeType& getPRI_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DurationRangeType& getPRI() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DurationRangeType& getPRI() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setPRI(const uci::type::DurationRangeType& accessor) override;

  /** Returns whether this optional field PRIis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPRI() const noexcept override;

  /** Enables the optional field such that getPRI will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DurationRangeType& enablePRI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& clearPRI() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getPulseWidthMax() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setPulseWidthMax(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field PulseWidthMaxis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPulseWidthMax() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& clearPulseWidthMax() noexcept override;

  /** Returns the accessor to the Time field contained in this message fragment
    *
    * @return The const reference to the accessor to the Time field.
    */
  const uci::type::DateTimeRangeBeginType& getTime() const override;

  /** Returns the accessor to the Time field contained in this message fragment
    *
    * @return The reference to the accessor to the Time field.
    */
  uci::type::DateTimeRangeBeginType& getTime() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setTime(const uci::type::DateTimeRangeBeginType& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PercentRangeType& getDutyCycle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PercentRangeType& getDutyCycle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PercentRangeType& getDutyCycle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setDutyCycle(const uci::type::PercentRangeType& accessor) override;

  /** Returns whether this optional field DutyCycleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDutyCycle() const noexcept override;

  /** Enables the optional field such that getDutyCycle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PercentRangeType& enableDutyCycle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& clearDutyCycle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConfigureInteroperabilityReportType& getConfigureInteroperabilityReport_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ConfigureInteroperabilityReportType& getConfigureInteroperabilityReport() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConfigureInteroperabilityReportType& getConfigureInteroperabilityReport() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& setConfigureInteroperabilityReport(const uci::type::ConfigureInteroperabilityReportType& accessor) override;

  /** Returns whether this optional field ConfigureInteroperabilityReportis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasConfigureInteroperabilityReport() const noexcept override;

  /** Enables the optional field such that getConfigureInteroperabilityReport will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ConfigureInteroperabilityReportType& enableConfigureInteroperabilityReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::RF_OperationType& clearConfigureInteroperabilityReport() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<RF_OperationType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_OperationType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::RF_OperationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CapabilityID_Type> capabilityID_Accessor;
  std::unique_ptr<ActivityID> activityID_Accessor;
  asb_xs::Boolean receive_Accessor{false};
  asb_xs::Boolean transmit_Accessor{false};
  std::unique_ptr<FOV_VolumeType> emissionLocation_Accessor;
  std::unique_ptr<ModulationEnum> modulation_Accessor;
  std::unique_ptr<DurationRangeType> pRI_Accessor;
  boost::optional<DurationTypeValue> pulseWidthMax_Accessor;
  std::unique_ptr<DateTimeRangeBeginType> time_Accessor;
  std::unique_ptr<PercentRangeType> dutyCycle_Accessor;
  std::unique_ptr<ConfigureInteroperabilityReportType> configureInteroperabilityReport_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_RF_OPERATIONTYPE_H
