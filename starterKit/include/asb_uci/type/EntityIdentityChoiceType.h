/** @file EntityIdentityChoiceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_ENTITYIDENTITYCHOICETYPE_H
#define ASB_UCI_TYPE_ENTITYIDENTITYCHOICETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityIdentityChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EOB_IdentityType;
class EmitterIdentityType;
class EnvironmentIdentityType;
class FacilityIdentificationType;
class PlatformIdentityType;
class SpecificEmitterIdentityType;
class SpecificIdentityType;
class StandardIdentityType;
class StoreType;
class VehicleIdentificationType;

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityIdentityChoiceType : public virtual uci::type::EntityIdentityChoiceType {
public:
  /** The constructor */
  EntityIdentityChoiceType();

  /** The copy constructor
    *
    * @param rhs The EntityIdentityChoiceType to copy from
    */
  EntityIdentityChoiceType(const EntityIdentityChoiceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The EntityIdentityChoiceType to move from
    */
  EntityIdentityChoiceType(EntityIdentityChoiceType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The EntityIdentityChoiceType to copy from
    * @return The EntityIdentityChoiceType that was assigned
    */
  EntityIdentityChoiceType& operator=(const EntityIdentityChoiceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The EntityIdentityChoiceType to move from
    * @return The EntityIdentityChoiceType that was assigned
    */
  EntityIdentityChoiceType& operator=(EntityIdentityChoiceType&& rhs) = delete;

  /** The destructor */
  virtual ~EntityIdentityChoiceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityIdentityChoiceType whose contents are to be used to set this
    *      uci::type::EntityIdentityChoiceType's contents.
    */
  void copy(const uci::type::EntityIdentityChoiceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::EntityIdentityChoiceType whose contents are to be used to set this
    *      uci::type::EntityIdentityChoiceType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::EntityIdentityChoiceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::EntityIdentityChoiceType::EntityIdentityChoiceTypeChoice getEntityIdentityChoiceTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getEntityIdentityChoiceTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setEntityIdentityChoiceTypeChoiceOrdinal(uci::type::EntityIdentityChoiceType::EntityIdentityChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Standard field contained in this message fragment
    *
    * @return The const reference to the accessor to the Standard field.
    */
  uci::type::StandardIdentityType& getStandard_() const;

  /** Returns the accessor to the Standard field contained in this message fragment
    *
    * @return The reference to the accessor to the Standard field.
    */
  const uci::type::StandardIdentityType& getStandard() const override;

  /** Returns the accessor to the Standard field contained in this message fragment
    *
    * @return The reference to the accessor to the Standard field.
    */
  uci::type::StandardIdentityType& getStandard() override;

  /** Sets this choice's choice to be standard and initializes standard to be the specified value. A deep copy will be used
    * by this method to set standard
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setStandard(const uci::type::StandardIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Standard.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Standard, false otherwise.
    */
  bool isStandard() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Standard.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Standard.
    */
  uci::type::StandardIdentityType& chooseStandard(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Standard.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Standard.
    */
  uci::type::StandardIdentityType& chooseStandard(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Environment field contained in this message fragment
    *
    * @return The const reference to the accessor to the Environment field.
    */
  uci::type::EnvironmentIdentityType& getEnvironment_() const;

  /** Returns the accessor to the Environment field contained in this message fragment
    *
    * @return The reference to the accessor to the Environment field.
    */
  const uci::type::EnvironmentIdentityType& getEnvironment() const override;

  /** Returns the accessor to the Environment field contained in this message fragment
    *
    * @return The reference to the accessor to the Environment field.
    */
  uci::type::EnvironmentIdentityType& getEnvironment() override;

  /** Sets this choice's choice to be environment and initializes environment to be the specified value. A deep copy will
    * be used by this method to set environment
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setEnvironment(const uci::type::EnvironmentIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Environment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Environment, false otherwise.
    */
  bool isEnvironment() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Environment.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Environment.
    */
  uci::type::EnvironmentIdentityType& chooseEnvironment(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Environment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Environment.
    */
  uci::type::EnvironmentIdentityType& chooseEnvironment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Platform field contained in this message fragment
    *
    * @return The const reference to the accessor to the Platform field.
    */
  uci::type::PlatformIdentityType& getPlatform_() const;

  /** Returns the accessor to the Platform field contained in this message fragment
    *
    * @return The reference to the accessor to the Platform field.
    */
  const uci::type::PlatformIdentityType& getPlatform() const override;

  /** Returns the accessor to the Platform field contained in this message fragment
    *
    * @return The reference to the accessor to the Platform field.
    */
  uci::type::PlatformIdentityType& getPlatform() override;

  /** Sets this choice's choice to be platform and initializes platform to be the specified value. A deep copy will be used
    * by this method to set platform
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setPlatform(const uci::type::PlatformIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Platform.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Platform, false otherwise.
    */
  bool isPlatform() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Platform.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Platform.
    */
  uci::type::PlatformIdentityType& choosePlatform(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Platform.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Platform.
    */
  uci::type::PlatformIdentityType& choosePlatform(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Specific field contained in this message fragment
    *
    * @return The const reference to the accessor to the Specific field.
    */
  uci::type::SpecificIdentityType& getSpecific_() const;

  /** Returns the accessor to the Specific field contained in this message fragment
    *
    * @return The reference to the accessor to the Specific field.
    */
  const uci::type::SpecificIdentityType& getSpecific() const override;

  /** Returns the accessor to the Specific field contained in this message fragment
    *
    * @return The reference to the accessor to the Specific field.
    */
  uci::type::SpecificIdentityType& getSpecific() override;

  /** Sets this choice's choice to be specific and initializes specific to be the specified value. A deep copy will be used
    * by this method to set specific
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setSpecific(const uci::type::SpecificIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Specific.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Specific, false otherwise.
    */
  bool isSpecific() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Specific.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Specific.
    */
  uci::type::SpecificIdentityType& chooseSpecific(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Specific.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Specific.
    */
  uci::type::SpecificIdentityType& chooseSpecific(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Emitter field.
    */
  uci::type::EmitterIdentityType& getEmitter_() const;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The reference to the accessor to the Emitter field.
    */
  const uci::type::EmitterIdentityType& getEmitter() const override;

  /** Returns the accessor to the Emitter field contained in this message fragment
    *
    * @return The reference to the accessor to the Emitter field.
    */
  uci::type::EmitterIdentityType& getEmitter() override;

  /** Sets this choice's choice to be emitter and initializes emitter to be the specified value. A deep copy will be used
    * by this method to set emitter
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setEmitter(const uci::type::EmitterIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Emitter.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Emitter, false otherwise.
    */
  bool isEmitter() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Emitter.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Emitter.
    */
  uci::type::EmitterIdentityType& chooseEmitter(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Emitter.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Emitter.
    */
  uci::type::EmitterIdentityType& chooseEmitter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificEmitter field.
    */
  uci::type::SpecificEmitterIdentityType& getSpecificEmitter_() const;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificEmitter field.
    */
  const uci::type::SpecificEmitterIdentityType& getSpecificEmitter() const override;

  /** Returns the accessor to the SpecificEmitter field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificEmitter field.
    */
  uci::type::SpecificEmitterIdentityType& getSpecificEmitter() override;

  /** Sets this choice's choice to be specificEmitter and initializes specificEmitter to be the specified value. A deep
    * copy will be used by this method to set specificEmitter
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setSpecificEmitter(const uci::type::SpecificEmitterIdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpecificEmitter.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpecificEmitter, false
    *      otherwise.
    */
  bool isSpecificEmitter() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificEmitter.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificEmitter.
    */
  uci::type::SpecificEmitterIdentityType& chooseSpecificEmitter(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificEmitter.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificEmitter.
    */
  uci::type::SpecificEmitterIdentityType& chooseSpecificEmitter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SpecificVehicle field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificVehicle field.
    */
  uci::type::VehicleIdentificationType& getSpecificVehicle_() const;

  /** Returns the accessor to the SpecificVehicle field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificVehicle field.
    */
  const uci::type::VehicleIdentificationType& getSpecificVehicle() const override;

  /** Returns the accessor to the SpecificVehicle field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificVehicle field.
    */
  uci::type::VehicleIdentificationType& getSpecificVehicle() override;

  /** Sets this choice's choice to be specificVehicle and initializes specificVehicle to be the specified value. A deep
    * copy will be used by this method to set specificVehicle
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setSpecificVehicle(const uci::type::VehicleIdentificationType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpecificVehicle.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpecificVehicle, false
    *      otherwise.
    */
  bool isSpecificVehicle() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificVehicle.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificVehicle.
    */
  uci::type::VehicleIdentificationType& chooseSpecificVehicle(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificVehicle.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificVehicle.
    */
  uci::type::VehicleIdentificationType& chooseSpecificVehicle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SpecificFacility field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificFacility field.
    */
  uci::type::FacilityIdentificationType& getSpecificFacility_() const;

  /** Returns the accessor to the SpecificFacility field contained in this message fragment
    *
    * @return The const reference to the accessor to the SpecificFacility field.
    */
  const uci::type::FacilityIdentificationType& getSpecificFacility() const override;

  /** Returns the accessor to the SpecificFacility field contained in this message fragment
    *
    * @return The reference to the accessor to the SpecificFacility field.
    */
  uci::type::FacilityIdentificationType& getSpecificFacility() override;

  /** Sets this choice's choice to be SpecificFacility and initializes SpecificFacility to be the specified value. A deep
    * copy will be used by this method to set SpecificFacility
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setSpecificFacility(const uci::type::FacilityIdentificationType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpecificFacility.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpecificFacility, false
    *      otherwise.
    */
  bool isSpecificFacility() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificFacility.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificFacility.
    */
  uci::type::FacilityIdentificationType& chooseSpecificFacility(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificFacility.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificFacility.
    */
  uci::type::FacilityIdentificationType& chooseSpecificFacility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EOB field contained in this message fragment
    *
    * @return The const reference to the accessor to the EOB field.
    */
  uci::type::EOB_IdentityType& getEOB_() const;

  /** Returns the accessor to the EOB field contained in this message fragment
    *
    * @return The const reference to the accessor to the EOB field.
    */
  const uci::type::EOB_IdentityType& getEOB() const override;

  /** Returns the accessor to the EOB field contained in this message fragment
    *
    * @return The reference to the accessor to the EOB field.
    */
  uci::type::EOB_IdentityType& getEOB() override;

  /** Sets this choice's choice to be EOB and initializes EOB to be the specified value. A deep copy will be used by this
    * method to set EOB
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setEOB(const uci::type::EOB_IdentityType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EOB.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EOB, false otherwise.
    */
  bool isEOB() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EOB.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EOB.
    */
  uci::type::EOB_IdentityType& chooseEOB(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EOB.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EOB.
    */
  uci::type::EOB_IdentityType& chooseEOB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Weapon field contained in this message fragment
    *
    * @return The const reference to the accessor to the Weapon field.
    */
  uci::type::StoreType& getWeapon_() const;

  /** Returns the accessor to the Weapon field contained in this message fragment
    *
    * @return The reference to the accessor to the Weapon field.
    */
  const uci::type::StoreType& getWeapon() const override;

  /** Returns the accessor to the Weapon field contained in this message fragment
    *
    * @return The reference to the accessor to the Weapon field.
    */
  uci::type::StoreType& getWeapon() override;

  /** Sets this choice's choice to be weapon and initializes weapon to be the specified value. A deep copy will be used by
    * this method to set weapon
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::EntityIdentityChoiceType& setWeapon(const uci::type::StoreType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Weapon.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Weapon, false otherwise.
    */
  bool isWeapon() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Weapon.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Weapon.
    */
  uci::type::StoreType& chooseWeapon(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Weapon.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Weapon.
    */
  uci::type::StoreType& chooseWeapon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EntityIdentityChoiceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityIdentityChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::EntityIdentityChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<StandardIdentityType> standard_Accessor;
  std::unique_ptr<EnvironmentIdentityType> environment_Accessor;
  std::unique_ptr<PlatformIdentityType> platform_Accessor;
  std::unique_ptr<SpecificIdentityType> specific_Accessor;
  std::unique_ptr<EmitterIdentityType> emitter_Accessor;
  std::unique_ptr<SpecificEmitterIdentityType> specificEmitter_Accessor;
  std::unique_ptr<VehicleIdentificationType> specificVehicle_Accessor;
  std::unique_ptr<FacilityIdentificationType> specificFacility_Accessor;
  std::unique_ptr<EOB_IdentityType> eOB_Accessor;
  std::unique_ptr<StoreType> weapon_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_ENTITYIDENTITYCHOICETYPE_H
