/** @file WeatherDatasetMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_WEATHERDATASETMDT_H
#define ASB_UCI_TYPE_WEATHERDATASETMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/AltitudeType.h"
#include "../../../include/asb_uci/type/AnglePositiveType.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherDatasetMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ScheduleType;
class SystemID_Type;
class WeatherDataType;
class WeatherDatasetID_Type;
class ZoneType;

/** See annotations in child elements and messages/elements that use this type for details. */
class WeatherDatasetMDT : public virtual uci::type::WeatherDatasetMDT, public virtual DataRecordBaseType {
public:
  /** This element contains weather data for the dataset that should be used for planning purposes. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using WeatherData = asb_uci::base::BoundedList<uci::type::WeatherDataType, uci::type::accessorType::weatherDataType, asb_uci::type::WeatherDataType>;

  /** One or more Systems to which the weather dataset apply. If omitted, the dataset applies to all Systems. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using SystemID = asb_uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type, asb_uci::type::SystemID_Type>;

  /** The constructor */
  WeatherDatasetMDT();

  /** The copy constructor
    *
    * @param rhs The WeatherDatasetMDT to copy from
    */
  WeatherDatasetMDT(const WeatherDatasetMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The WeatherDatasetMDT to move from
    */
  WeatherDatasetMDT(WeatherDatasetMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The WeatherDatasetMDT to copy from
    * @return The WeatherDatasetMDT that was assigned
    */
  WeatherDatasetMDT& operator=(const WeatherDatasetMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The WeatherDatasetMDT to move from
    * @return The WeatherDatasetMDT that was assigned
    */
  WeatherDatasetMDT& operator=(WeatherDatasetMDT&& rhs) = delete;

  /** The destructor */
  ~WeatherDatasetMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::WeatherDatasetMDT whose contents are to be used to set this
    *      uci::type::WeatherDatasetMDT's contents.
    */
  void copy(const uci::type::WeatherDatasetMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::WeatherDatasetMDT whose contents are to be used to set this
    *      uci::type::WeatherDatasetMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::WeatherDatasetMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the WeatherDatasetID field contained in this message fragment
    *
    * @return The const reference to the accessor to the WeatherDatasetID field.
    */
  const uci::type::WeatherDatasetID_Type& getWeatherDatasetID() const override;

  /** Returns the accessor to the WeatherDatasetID field contained in this message fragment
    *
    * @return The reference to the accessor to the WeatherDatasetID field.
    */
  uci::type::WeatherDatasetID_Type& getWeatherDatasetID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setWeatherDatasetID(const uci::type::WeatherDatasetID_Type& accessor) override;

  /** Returns the contents of the message's Created field
    *
    * @return The contents of the Created field
    */
  uci::type::DateTimeTypeValue getCreated() const override;

  /** Sets the contents of the message's Created field
    *
    * @param value The new value to set the Created field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setCreated(uci::type::DateTimeTypeValue value) override;

  /** Returns the contents of the message's Updated field
    *
    * @return The contents of the Updated field
    */
  uci::type::DateTimeTypeValue getUpdated() const override;

  /** Sets the contents of the message's Updated field
    *
    * @param value The new value to set the Updated field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setUpdated(uci::type::DateTimeTypeValue value) override;

  /** Returns the accessor to the DatasetArea field contained in this message fragment
    *
    * @return The const reference to the accessor to the DatasetArea field.
    */
  const uci::type::ZoneType& getDatasetArea() const override;

  /** Returns the accessor to the DatasetArea field contained in this message fragment
    *
    * @return The reference to the accessor to the DatasetArea field.
    */
  uci::type::ZoneType& getDatasetArea() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setDatasetArea(const uci::type::ZoneType& accessor) override;

  /** Enables the optional field such that getDatasetArea will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& enableDatasetArea(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AnglePositiveTypeValue getDegreeStep() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setDegreeStep(uci::type::AnglePositiveTypeValue value) override;

  /** Returns whether this optional field DegreeStepis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDegreeStep() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& clearDegreeStep() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AltitudeTypeValue getAltitudeStep() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setAltitudeStep(uci::type::AltitudeTypeValue value) override;

  /** Returns whether this optional field AltitudeStepis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAltitudeStep() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& clearAltitudeStep() noexcept override;

  /** Returns the accessor to the WeatherData field contained in this message fragment
    *
    * @return The const reference to the accessor to the WeatherData field.
    */
  const uci::type::WeatherDatasetMDT::WeatherData& getWeatherData() const override;

  /** Returns the accessor to the WeatherData field contained in this message fragment
    *
    * @return The reference to the accessor to the WeatherData field.
    */
  uci::type::WeatherDatasetMDT::WeatherData& getWeatherData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setWeatherData(const uci::type::WeatherDatasetMDT::WeatherData& accessor) override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemID field.
    */
  const uci::type::WeatherDatasetMDT::SystemID& getSystemID() const override;

  /** Returns the accessor to the SystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemID field.
    */
  uci::type::WeatherDatasetMDT::SystemID& getSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setSystemID(const uci::type::WeatherDatasetMDT::SystemID& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& getSchedule_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ScheduleType& getSchedule() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& getSchedule() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& setSchedule(const uci::type::ScheduleType& accessor) override;

  /** Returns whether this optional field Scheduleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSchedule() const noexcept override;

  /** Enables the optional field such that getSchedule will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ScheduleType& enableSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::WeatherDatasetMDT& clearSchedule() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<WeatherDatasetMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherDatasetMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::WeatherDatasetMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<WeatherDatasetID_Type> weatherDatasetID_Accessor;
  DateTimeTypeValue created_Accessor{0};
  DateTimeTypeValue updated_Accessor{0};
  std::unique_ptr<ZoneType> datasetArea_Accessor;
  boost::optional<AnglePositiveTypeValue> degreeStep_Accessor;
  boost::optional<AltitudeTypeValue> altitudeStep_Accessor;
  std::unique_ptr<WeatherData> weatherData_Accessor;
  std::unique_ptr<SystemID> systemID_Accessor;
  std::unique_ptr<ScheduleType> schedule_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_WEATHERDATASETMDT_H
