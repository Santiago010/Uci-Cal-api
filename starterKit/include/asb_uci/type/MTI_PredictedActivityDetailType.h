/** @file MTI_PredictedActivityDetailType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MTI_PREDICTEDACTIVITYDETAILTYPE_H
#define ASB_UCI_TYPE_MTI_PREDICTEDACTIVITYDETAILTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/ActivityStateEnum.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/DecibelType.h"
#include "../../../include/asb_uci/type/DurationType.h"
#include "../../../include/asb_uci/type/PercentType.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MTI_PredictedActivityDetailType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AreaChoiceType;
class CannotComplyType;
class EstimatedPerformanceType;

/** See annotations in child elements and messages/elements that use this type for details. */
class MTI_PredictedActivityDetailType : public virtual uci::type::MTI_PredictedActivityDetailType {
public:
  /** Estimated performance of the activity. The multiplicity is limited to N-1 options where UNKNOWN is an environment
    * type that has no value, thus removed from list of available options. [Occurrences: Minimum: 0; Maximum: 5]
    */
  using EstimatedPerformance = asb_uci::base::BoundedList<uci::type::EstimatedPerformanceType, uci::type::accessorType::estimatedPerformanceType, asb_uci::type::EstimatedPerformanceType>;

  /** The constructor */
  MTI_PredictedActivityDetailType();

  /** The copy constructor
    *
    * @param rhs The MTI_PredictedActivityDetailType to copy from
    */
  MTI_PredictedActivityDetailType(const MTI_PredictedActivityDetailType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MTI_PredictedActivityDetailType to move from
    */
  MTI_PredictedActivityDetailType(MTI_PredictedActivityDetailType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MTI_PredictedActivityDetailType to copy from
    * @return The MTI_PredictedActivityDetailType that was assigned
    */
  MTI_PredictedActivityDetailType& operator=(const MTI_PredictedActivityDetailType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MTI_PredictedActivityDetailType to move from
    * @return The MTI_PredictedActivityDetailType that was assigned
    */
  MTI_PredictedActivityDetailType& operator=(MTI_PredictedActivityDetailType&& rhs) = delete;

  /** The destructor */
  virtual ~MTI_PredictedActivityDetailType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MTI_PredictedActivityDetailType whose contents are to be used to set this
    *      uci::type::MTI_PredictedActivityDetailType's contents.
    */
  void copy(const uci::type::MTI_PredictedActivityDetailType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MTI_PredictedActivityDetailType whose contents are to be used to set this
    *      uci::type::MTI_PredictedActivityDetailType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MTI_PredictedActivityDetailType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityStateEnum& getActivityState_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ActivityStateEnum& getActivityState() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityStateEnum& getActivityState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setActivityState(const uci::type::ActivityStateEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setActivityState(uci::type::ActivityStateEnum::EnumerationItem value) override;

  /** Returns whether this optional field ActivityStateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivityState() const noexcept override;

  /** Enables the optional field such that getActivityState will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ActivityStateEnum& enableActivityState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearActivityState() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& getActivityReason_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CannotComplyType& getActivityReason() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& getActivityReason() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setActivityReason(const uci::type::CannotComplyType& accessor) override;

  /** Returns whether this optional field ActivityReasonis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActivityReason() const noexcept override;

  /** Enables the optional field such that getActivityReason will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& enableActivityReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearActivityReason() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getEstimatedPercentageOccluded() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedPercentageOccluded(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field EstimatedPercentageOccludedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedPercentageOccluded() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedPercentageOccluded() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getRevisitIndex() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setRevisitIndex(xs::UnsignedInt value) override;

  /** Returns whether this optional field RevisitIndexis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRevisitIndex() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearRevisitIndex() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getEstimatedRevisitPeriod() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedRevisitPeriod(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field EstimatedRevisitPeriodis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedRevisitPeriod() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedRevisitPeriod() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::PercentTypeValue getEstimatedPercentageInFOR() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedPercentageInFOR(uci::type::PercentTypeValue value) override;

  /** Returns whether this optional field EstimatedPercentageInFORis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedPercentageInFOR() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedPercentageInFOR() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getEstimatedStartTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedStartTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field EstimatedStartTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedStartTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedStartTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getEstimatedStopTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedStopTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field EstimatedStopTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedStopTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedStopTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DecibelTypeValue getEstimatedERP() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedERP(uci::type::DecibelTypeValue value) override;

  /** Returns whether this optional field EstimatedERPis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedERP() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedERP() noexcept override;

  /** Returns the accessor to the EstimatedPerformance field contained in this message fragment
    *
    * @return The const reference to the accessor to the EstimatedPerformance field.
    */
  const uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& getEstimatedPerformance() const override;

  /** Returns the accessor to the EstimatedPerformance field contained in this message fragment
    *
    * @return The reference to the accessor to the EstimatedPerformance field.
    */
  uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& getEstimatedPerformance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedPerformance(const uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& accessor) override;

  /** Returns the contents of the message's ConcurrentExecutionAssumed field
    *
    * @return The contents of the ConcurrentExecutionAssumed field
    */
  xs::Boolean getConcurrentExecutionAssumed() const override;

  /** Sets the contents of the message's ConcurrentExecutionAssumed field
    *
    * @param value The new value to set the ConcurrentExecutionAssumed field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setConcurrentExecutionAssumed(xs::Boolean value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DurationTypeValue getEstimatedSweepTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedSweepTime(uci::type::DurationTypeValue value) override;

  /** Returns whether this optional field EstimatedSweepTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedSweepTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedSweepTime() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AreaChoiceType& getEstimatedTargetAreaScanned_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AreaChoiceType& getEstimatedTargetAreaScanned() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AreaChoiceType& getEstimatedTargetAreaScanned() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& setEstimatedTargetAreaScanned(const uci::type::AreaChoiceType& accessor) override;

  /** Returns whether this optional field EstimatedTargetAreaScannedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimatedTargetAreaScanned() const noexcept override;

  /** Enables the optional field such that getEstimatedTargetAreaScanned will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AreaChoiceType& enableEstimatedTargetAreaScanned(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MTI_PredictedActivityDetailType& clearEstimatedTargetAreaScanned() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MTI_PredictedActivityDetailType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_PredictedActivityDetailType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MTI_PredictedActivityDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ActivityStateEnum> activityState_Accessor;
  std::unique_ptr<CannotComplyType> activityReason_Accessor;
  boost::optional<PercentTypeValue> estimatedPercentageOccluded_Accessor;
  boost::optional<asb_xs::UnsignedInt> revisitIndex_Accessor;
  boost::optional<DurationTypeValue> estimatedRevisitPeriod_Accessor;
  boost::optional<PercentTypeValue> estimatedPercentageInFOR_Accessor;
  boost::optional<DateTimeTypeValue> estimatedStartTime_Accessor;
  boost::optional<DateTimeTypeValue> estimatedStopTime_Accessor;
  boost::optional<DecibelTypeValue> estimatedERP_Accessor;
  std::unique_ptr<EstimatedPerformance> estimatedPerformance_Accessor;
  asb_xs::Boolean concurrentExecutionAssumed_Accessor{false};
  boost::optional<DurationTypeValue> estimatedSweepTime_Accessor;
  std::unique_ptr<AreaChoiceType> estimatedTargetAreaScanned_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MTI_PREDICTEDACTIVITYDETAILTYPE_H
