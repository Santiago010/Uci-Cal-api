/** @file ImageSubheaderType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_IMAGESUBHEADERTYPE_H
#define ASB_UCI_TYPE_IMAGESUBHEADERTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString11OnlyType.h"
#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString17OnlyType.h"
#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString21OnlyType.h"
#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString3OnlyType.h"
#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString9OnlyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImageSubheaderType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ImageSubheaderType : public virtual uci::type::ImageSubheaderType {
public:
  /** The constructor */
  ImageSubheaderType();

  /** The copy constructor
    *
    * @param rhs The ImageSubheaderType to copy from
    */
  ImageSubheaderType(const ImageSubheaderType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The ImageSubheaderType to move from
    */
  ImageSubheaderType(ImageSubheaderType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The ImageSubheaderType to copy from
    * @return The ImageSubheaderType that was assigned
    */
  ImageSubheaderType& operator=(const ImageSubheaderType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The ImageSubheaderType to move from
    * @return The ImageSubheaderType that was assigned
    */
  ImageSubheaderType& operator=(ImageSubheaderType&& rhs) = delete;

  /** The destructor */
  virtual ~ImageSubheaderType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ImageSubheaderType whose contents are to be used to set this
    *      uci::type::ImageSubheaderType's contents.
    */
  void copy(const uci::type::ImageSubheaderType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::ImageSubheaderType whose contents are to be used to set this
    *      uci::type::ImageSubheaderType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::ImageSubheaderType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& getImageSource_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& getImageSource() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& getImageSource() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageSource(const uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageSource(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageSource(const char* value) override;

  /** Returns whether this optional field imageSource_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageSource() const noexcept override;

  /** Enables the optional field such that getImageSource will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& enableImageSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& clearImageSource() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& getPrimaryTargetIdentifier_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& getPrimaryTargetIdentifier() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& getPrimaryTargetIdentifier() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setPrimaryTargetIdentifier(const uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setPrimaryTargetIdentifier(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setPrimaryTargetIdentifier(const char* value) override;

  /** Returns whether this optional field primaryTargetIdentifier_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPrimaryTargetIdentifier() const noexcept override;

  /** Enables the optional field such that getPrimaryTargetIdentifier will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& enablePrimaryTargetIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& clearPrimaryTargetIdentifier() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& getImageIdentifier1_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& getImageIdentifier1() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& getImageIdentifier1() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageIdentifier1(const uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageIdentifier1(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageIdentifier1(const char* value) override;

  /** Returns whether this optional field imageIdentifier1_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageIdentifier1() const noexcept override;

  /** Enables the optional field such that getImageIdentifier1 will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& enableImageIdentifier1(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& clearImageIdentifier1() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& getImageIdentifier2_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& getImageIdentifier2() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& getImageIdentifier2() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageIdentifier2(const uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageIdentifier2(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setImageIdentifier2(const char* value) override;

  /** Returns whether this optional field imageIdentifier2_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasImageIdentifier2() const noexcept override;

  /** Enables the optional field such that getImageIdentifier2 will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& enableImageIdentifier2(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& clearImageIdentifier2() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& getICOM_N_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& getICOM_N() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& getICOM_N() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setICOM_N(const uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setICOM_N(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& setICOM_N(const char* value) override;

  /** Returns whether this optional field iCOM_N_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasICOM_N() const noexcept override;

  /** Enables the optional field such that getICOM_N will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& enableICOM_N(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::ImageSubheaderType& clearICOM_N() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<ImageSubheaderType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::ImageSubheaderType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::ImageSubheaderType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString17OnlyType> imageSource_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString3OnlyType> primaryTargetIdentifier_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString11OnlyType> imageIdentifier1_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString9OnlyType> imageIdentifier2_Accessor;
  std::unique_ptr<AlphanumericDashSpaceUnderscoreString21OnlyType> iCOM_N_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_IMAGESUBHEADERTYPE_H
