/** @file PathSegmentType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PATHSEGMENTTYPE_H
#define ASB_UCI_TYPE_PATHSEGMENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/AccelerationType.h"
#include "asb_uci/type/AngleType.h"
#include "asb_uci/type/DistanceType.h"
#include "asb_uci/type/PathSegmentSourceEnum.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/PathSegmentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CivilPathTerminatorType;
class ClimbType;
class ConditionalPathSegmentType;
class EndPointType;
class ForeignKeyType;
class InertialStateRelativeType;
class NextPathSegmentType;
class PathSegmentSpeedType;
class RemarksType;
class SegmentID_Type;
class TimeWindowType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PathSegmentType : public virtual uci::type::PathSegmentType {
public:
  /** This element is used to specify one or more conditional PathSegment. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ConditionalPathSegment = asb_uci::base::BoundedList<uci::type::ConditionalPathSegmentType, uci::type::accessorType::conditionalPathSegmentType, asb_uci::type::ConditionalPathSegmentType>;

  /** This element is intended to provide detailed inertial state information at user defined increments within a path
    * segment. This element provides data which may be required for pre-mission analysis of a Route. Position data may be
    * specified as either a geospatial point or relative to a separately defined reference frame. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using InertialState = asb_uci::base::BoundedList<uci::type::InertialStateRelativeType, uci::type::accessorType::inertialStateRelativeType, asb_uci::type::InertialStateRelativeType>;

  /** The constructor */
  PathSegmentType();

  /** The copy constructor
    *
    * @param rhs The PathSegmentType to copy from
    */
  PathSegmentType(const PathSegmentType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PathSegmentType to move from
    */
  PathSegmentType(PathSegmentType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PathSegmentType to copy from
    * @return The PathSegmentType that was assigned
    */
  PathSegmentType& operator=(const PathSegmentType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PathSegmentType to move from
    * @return The PathSegmentType that was assigned
    */
  PathSegmentType& operator=(PathSegmentType&& rhs) = delete;

  /** The destructor */
  virtual ~PathSegmentType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PathSegmentType whose contents are to be used to set this uci::type::PathSegmentType's
    *      contents.
    */
  void copy(const uci::type::PathSegmentType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PathSegmentType whose contents are to be used to set this uci::type::PathSegmentType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PathSegmentType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the PathSegmentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the PathSegmentID field.
    */
  const uci::type::SegmentID_Type& getPathSegmentID() const override;

  /** Returns the accessor to the PathSegmentID field contained in this message fragment
    *
    * @return The reference to the accessor to the PathSegmentID field.
    */
  uci::type::SegmentID_Type& getPathSegmentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setPathSegmentID(const uci::type::SegmentID_Type& accessor) override;

  /** Returns the contents of the message's Source field
    *
    * @return The contents of the Source field
    */
  const uci::type::PathSegmentSourceEnum& getSource() const override;

  /** Returns the contents of the message's Source field
    *
    * @return The contents of the Source field
    */
  uci::type::PathSegmentSourceEnum& getSource() override;

  /** Sets the contents of the message's Source field
    *
    * @param accessor The accessor to use to set the Source field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setSource(const uci::type::PathSegmentSourceEnum& accessor) override;

  /** Sets the contents of the message's Source field
    *
    * @param value The new value to set the Source field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setSource(uci::type::PathSegmentSourceEnum::EnumerationItem value) override;

  /** Returns the accessor to the EndPoint field contained in this message fragment
    *
    * @return The const reference to the accessor to the EndPoint field.
    */
  const uci::type::EndPointType& getEndPoint() const override;

  /** Returns the accessor to the EndPoint field contained in this message fragment
    *
    * @return The reference to the accessor to the EndPoint field.
    */
  uci::type::EndPointType& getEndPoint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setEndPoint(const uci::type::EndPointType& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getLocked() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setLocked(xs::Boolean value) override;

  /** Returns whether this optional field Lockedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocked() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearLocked() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getModified() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setModified(xs::Boolean value) override;

  /** Returns whether this optional field Modifiedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasModified() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearModified() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PathSegmentSpeedType& getSpeed_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PathSegmentSpeedType& getSpeed() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PathSegmentSpeedType& getSpeed() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setSpeed(const uci::type::PathSegmentSpeedType& accessor) override;

  /** Returns whether this optional field Speedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSpeed() const noexcept override;

  /** Enables the optional field such that getSpeed will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PathSegmentSpeedType& enableSpeed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearSpeed() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CivilPathTerminatorType& getCivilPathTerminator_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CivilPathTerminatorType& getCivilPathTerminator() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CivilPathTerminatorType& getCivilPathTerminator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setCivilPathTerminator(const uci::type::CivilPathTerminatorType& accessor) override;

  /** Returns whether this optional field CivilPathTerminatoris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCivilPathTerminator() const noexcept override;

  /** Enables the optional field such that getCivilPathTerminator will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CivilPathTerminatorType& enableCivilPathTerminator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearCivilPathTerminator() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ClimbType& getClimb_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ClimbType& getClimb() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ClimbType& getClimb() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setClimb(const uci::type::ClimbType& accessor) override;

  /** Returns whether this optional field Climbis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasClimb() const noexcept override;

  /** Enables the optional field such that getClimb will return the optional field and not throw an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ClimbType& enableClimb(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearClimb() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AngleTypeValue getMaximumRoll() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setMaximumRoll(uci::type::AngleTypeValue value) override;

  /** Returns whether this optional field MaximumRollis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMaximumRoll() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearMaximumRoll() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AccelerationTypeValue getAcceleration() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setAcceleration(uci::type::AccelerationTypeValue value) override;

  /** Returns whether this optional field Accelerationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAcceleration() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearAcceleration() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NextPathSegmentType& getNextPathSegment_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NextPathSegmentType& getNextPathSegment() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NextPathSegmentType& getNextPathSegment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setNextPathSegment(const uci::type::NextPathSegmentType& accessor) override;

  /** Returns whether this optional field NextPathSegmentis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNextPathSegment() const noexcept override;

  /** Enables the optional field such that getNextPathSegment will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NextPathSegmentType& enableNextPathSegment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearNextPathSegment() noexcept override;

  /** Returns the accessor to the ConditionalPathSegment field contained in this message fragment
    *
    * @return The const reference to the accessor to the ConditionalPathSegment field.
    */
  const uci::type::PathSegmentType::ConditionalPathSegment& getConditionalPathSegment() const override;

  /** Returns the accessor to the ConditionalPathSegment field contained in this message fragment
    *
    * @return The reference to the accessor to the ConditionalPathSegment field.
    */
  uci::type::PathSegmentType::ConditionalPathSegment& getConditionalPathSegment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setConditionalPathSegment(const uci::type::PathSegmentType::ConditionalPathSegment& accessor) override;

  /** Returns the accessor to the InertialState field contained in this message fragment
    *
    * @return The const reference to the accessor to the InertialState field.
    */
  const uci::type::PathSegmentType::InertialState& getInertialState() const override;

  /** Returns the accessor to the InertialState field contained in this message fragment
    *
    * @return The reference to the accessor to the InertialState field.
    */
  uci::type::PathSegmentType::InertialState& getInertialState() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setInertialState(const uci::type::PathSegmentType::InertialState& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TimeWindowType& getRequiredTimeOfArrival_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::TimeWindowType& getRequiredTimeOfArrival() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TimeWindowType& getRequiredTimeOfArrival() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setRequiredTimeOfArrival(const uci::type::TimeWindowType& accessor) override;

  /** Returns whether this optional field RequiredTimeOfArrivalis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRequiredTimeOfArrival() const noexcept override;

  /** Enables the optional field such that getRequiredTimeOfArrival will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::TimeWindowType& enableRequiredTimeOfArrival(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearRequiredTimeOfArrival() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RemarksType& getRemarks_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::RemarksType& getRemarks() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RemarksType& getRemarks() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setRemarks(const uci::type::RemarksType& accessor) override;

  /** Returns whether this optional field Remarksis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRemarks() const noexcept override;

  /** Enables the optional field such that getRemarks will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::RemarksType& enableRemarks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearRemarks() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getRequiredNavigationPerformanceInMeters() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setRequiredNavigationPerformanceInMeters(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field RequiredNavigationPerformanceInMetersis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRequiredNavigationPerformanceInMeters() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearRequiredNavigationPerformanceInMeters() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getFix_Identifier_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getFix_Identifier() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getFix_Identifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& setFix_Identifier(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field Fix_Identifieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFix_Identifier() const noexcept override;

  /** Enables the optional field such that getFix_Identifier will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableFix_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PathSegmentType& clearFix_Identifier() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PathSegmentType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PathSegmentType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PathSegmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SegmentID_Type> pathSegmentID_Accessor;
  std::unique_ptr<PathSegmentSourceEnum> source_Accessor;
  std::unique_ptr<EndPointType> endPoint_Accessor;
  boost::optional<asb_xs::Boolean> locked_Accessor;
  boost::optional<asb_xs::Boolean> modified_Accessor;
  std::unique_ptr<PathSegmentSpeedType> speed_Accessor;
  std::unique_ptr<CivilPathTerminatorType> civilPathTerminator_Accessor;
  std::unique_ptr<ClimbType> climb_Accessor;
  boost::optional<AngleTypeValue> maximumRoll_Accessor;
  boost::optional<AccelerationTypeValue> acceleration_Accessor;
  std::unique_ptr<NextPathSegmentType> nextPathSegment_Accessor;
  std::unique_ptr<ConditionalPathSegment> conditionalPathSegment_Accessor;
  std::unique_ptr<InertialState> inertialState_Accessor;
  std::unique_ptr<TimeWindowType> requiredTimeOfArrival_Accessor;
  std::unique_ptr<RemarksType> remarks_Accessor;
  boost::optional<DistanceTypeValue> requiredNavigationPerformanceInMeters_Accessor;
  std::unique_ptr<ForeignKeyType> fix_Identifier_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PATHSEGMENTTYPE_H
