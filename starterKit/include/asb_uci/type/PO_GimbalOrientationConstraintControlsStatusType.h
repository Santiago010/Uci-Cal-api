/** @file PO_GimbalOrientationConstraintControlsStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_GIMBALORIENTATIONCONSTRAINTCONTROLSSTATUSTYPE_H
#define ASB_UCI_TYPE_PO_GIMBALORIENTATIONCONSTRAINTCONTROLSSTATUSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/PO_GimbalOrientationReferenceFrameEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentID_Type;
class GimbalAxisControlStatusType;
class PO_AngleConstraintControlsStatusType;

/** See annotations in chile elements and messages/elements that use this type for details. */
class PO_GimbalOrientationConstraintControlsStatusType : public virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType {
public:
  /** The constraint controls on individual axis for gimbals with more than three degrees of freedom. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Axis = asb_uci::base::BoundedList<uci::type::GimbalAxisControlStatusType, uci::type::accessorType::gimbalAxisControlStatusType, asb_uci::type::GimbalAxisControlStatusType>;

  /** The constructor */
  PO_GimbalOrientationConstraintControlsStatusType();

  /** The copy constructor
    *
    * @param rhs The PO_GimbalOrientationConstraintControlsStatusType to copy from
    */
  PO_GimbalOrientationConstraintControlsStatusType(const PO_GimbalOrientationConstraintControlsStatusType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_GimbalOrientationConstraintControlsStatusType to move from
    */
  PO_GimbalOrientationConstraintControlsStatusType(PO_GimbalOrientationConstraintControlsStatusType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_GimbalOrientationConstraintControlsStatusType to copy from
    * @return The PO_GimbalOrientationConstraintControlsStatusType that was assigned
    */
  PO_GimbalOrientationConstraintControlsStatusType& operator=(const PO_GimbalOrientationConstraintControlsStatusType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_GimbalOrientationConstraintControlsStatusType to move from
    * @return The PO_GimbalOrientationConstraintControlsStatusType that was assigned
    */
  PO_GimbalOrientationConstraintControlsStatusType& operator=(PO_GimbalOrientationConstraintControlsStatusType&& rhs) = delete;

  /** The destructor */
  virtual ~PO_GimbalOrientationConstraintControlsStatusType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_GimbalOrientationConstraintControlsStatusType whose contents are to be used to set
    *      this uci::type::PO_GimbalOrientationConstraintControlsStatusType's contents.
    */
  void copy(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_GimbalOrientationConstraintControlsStatusType whose contents are to be used to set
    *      this uci::type::PO_GimbalOrientationConstraintControlsStatusType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's ReferenceFrame field
    *
    * @return The contents of the ReferenceFrame field
    */
  const uci::type::PO_GimbalOrientationReferenceFrameEnum& getReferenceFrame() const override;

  /** Returns the contents of the message's ReferenceFrame field
    *
    * @return The contents of the ReferenceFrame field
    */
  uci::type::PO_GimbalOrientationReferenceFrameEnum& getReferenceFrame() override;

  /** Sets the contents of the message's ReferenceFrame field
    *
    * @param accessor The accessor to use to set the ReferenceFrame field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& setReferenceFrame(const uci::type::PO_GimbalOrientationReferenceFrameEnum& accessor) override;

  /** Sets the contents of the message's ReferenceFrame field
    *
    * @param value The new value to set the ReferenceFrame field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& setReferenceFrame(uci::type::PO_GimbalOrientationReferenceFrameEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentID_Type& getComponentID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ComponentID_Type& getComponentID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentID_Type& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& setComponentID(const uci::type::ComponentID_Type& accessor) override;

  /** Returns whether this optional field ComponentIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasComponentID() const noexcept override;

  /** Enables the optional field such that getComponentID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ComponentID_Type& enableComponentID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearComponentID() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getPitchAngle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getPitchAngle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getPitchAngle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& setPitchAngle(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field PitchAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPitchAngle() const noexcept override;

  /** Enables the optional field such that getPitchAngle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enablePitchAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearPitchAngle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getRollAngle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getRollAngle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getRollAngle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& setRollAngle(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field RollAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasRollAngle() const noexcept override;

  /** Enables the optional field such that getRollAngle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableRollAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearRollAngle() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getYawAngle_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::PO_AngleConstraintControlsStatusType& getYawAngle() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& getYawAngle() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& setYawAngle(const uci::type::PO_AngleConstraintControlsStatusType& accessor) override;

  /** Returns whether this optional field YawAngleis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasYawAngle() const noexcept override;

  /** Enables the optional field such that getYawAngle will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::PO_AngleConstraintControlsStatusType& enableYawAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& clearYawAngle() noexcept override;

  /** Returns the accessor to the Axis field contained in this message fragment
    *
    * @return The const reference to the accessor to the Axis field.
    */
  const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& getAxis() const override;

  /** Returns the accessor to the Axis field contained in this message fragment
    *
    * @return The reference to the accessor to the Axis field.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& getAxis() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_GimbalOrientationConstraintControlsStatusType& setAxis(const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_GimbalOrientationConstraintControlsStatusType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<PO_GimbalOrientationReferenceFrameEnum> referenceFrame_Accessor;
  std::unique_ptr<ComponentID_Type> componentID_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> pitchAngle_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> rollAngle_Accessor;
  std::unique_ptr<PO_AngleConstraintControlsStatusType> yawAngle_Accessor;
  std::unique_ptr<Axis> axis_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_GIMBALORIENTATIONCONSTRAINTCONTROLSSTATUSTYPE_H
