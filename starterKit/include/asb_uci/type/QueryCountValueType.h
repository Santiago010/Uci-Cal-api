/** @file QueryCountValueType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_QUERYCOUNTVALUETYPE_H
#define ASB_UCI_TYPE_QUERYCOUNTVALUETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryCountValueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Compares the length of the sequence formed by the specified Step to the value indicated by this choice. */
class QueryCountValueType : public virtual uci::type::QueryCountValueType {
public:
  /** The constructor */
  QueryCountValueType();

  /** The copy constructor
    *
    * @param rhs The QueryCountValueType to copy from
    */
  QueryCountValueType(const QueryCountValueType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The QueryCountValueType to move from
    */
  QueryCountValueType(QueryCountValueType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The QueryCountValueType to copy from
    * @return The QueryCountValueType that was assigned
    */
  QueryCountValueType& operator=(const QueryCountValueType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The QueryCountValueType to move from
    * @return The QueryCountValueType that was assigned
    */
  QueryCountValueType& operator=(QueryCountValueType&& rhs) = delete;

  /** The destructor */
  virtual ~QueryCountValueType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::QueryCountValueType whose contents are to be used to set this
    *      uci::type::QueryCountValueType's contents.
    */
  void copy(const uci::type::QueryCountValueType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::QueryCountValueType whose contents are to be used to set this
    *      uci::type::QueryCountValueType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::QueryCountValueType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::QueryCountValueType::QueryCountValueTypeChoice getQueryCountValueTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getQueryCountValueTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryCountValueType& setQueryCountValueTypeChoiceOrdinal(uci::type::QueryCountValueType::QueryCountValueTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the contents of the message's Equals item
    *
    * @return The contents of the Equals field
    */
  xs::UnsignedInt getEquals() const override;

  /** Sets this choice's choice to be Equals and initializes Equals to be the specified value
    *
    * @param value The new value to set Equals to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryCountValueType& setEquals(xs::UnsignedInt value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Equals.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Equals, false otherwise.
    */
  bool isEquals() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Equals. */
  void chooseEquals();

  /** Returns the contents of the message's LessThan item
    *
    * @return The contents of the LessThan field
    */
  xs::UnsignedInt getLessThan() const override;

  /** Sets this choice's choice to be LessThan and initializes LessThan to be the specified value
    *
    * @param value The new value to set LessThan to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryCountValueType& setLessThan(xs::UnsignedInt value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LessThan.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LessThan, false otherwise.
    */
  bool isLessThan() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by LessThan. */
  void chooseLessThan();

  /** Returns the contents of the message's LessThanOrEqualTo item
    *
    * @return The contents of the LessThanOrEqualTo field
    */
  xs::UnsignedInt getLessThanOrEqualTo() const override;

  /** Sets this choice's choice to be LessThanOrEqualTo and initializes LessThanOrEqualTo to be the specified value
    *
    * @param value The new value to set LessThanOrEqualTo to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryCountValueType& setLessThanOrEqualTo(xs::UnsignedInt value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LessThanOrEqualTo.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LessThanOrEqualTo, false
    *      otherwise.
    */
  bool isLessThanOrEqualTo() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by LessThanOrEqualTo. */
  void chooseLessThanOrEqualTo();

  /** Returns the contents of the message's GreaterThan item
    *
    * @return The contents of the GreaterThan field
    */
  xs::UnsignedInt getGreaterThan() const override;

  /** Sets this choice's choice to be GreaterThan and initializes GreaterThan to be the specified value
    *
    * @param value The new value to set GreaterThan to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryCountValueType& setGreaterThan(xs::UnsignedInt value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GreaterThan.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GreaterThan, false otherwise.
    */
  bool isGreaterThan() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThan. */
  void chooseGreaterThan();

  /** Returns the contents of the message's GreaterThanOrEqualTo item
    *
    * @return The contents of the GreaterThanOrEqualTo field
    */
  xs::UnsignedInt getGreaterThanOrEqualTo() const override;

  /** Sets this choice's choice to be GreaterThanOrEqualTo and initializes GreaterThanOrEqualTo to be the specified value
    *
    * @param value The new value to set GreaterThanOrEqualTo to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryCountValueType& setGreaterThanOrEqualTo(xs::UnsignedInt value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GreaterThanOrEqualTo.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GreaterThanOrEqualTo, false
    *      otherwise.
    */
  bool isGreaterThanOrEqualTo() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by GreaterThanOrEqualTo. */
  void chooseGreaterThanOrEqualTo();

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<QueryCountValueType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryCountValueType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::QueryCountValueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  boost::optional<asb_xs::UnsignedInt> equals_Accessor;
  boost::optional<asb_xs::UnsignedInt> lessThan_Accessor;
  boost::optional<asb_xs::UnsignedInt> lessThanOrEqualTo_Accessor;
  boost::optional<asb_xs::UnsignedInt> greaterThan_Accessor;
  boost::optional<asb_xs::UnsignedInt> greaterThanOrEqualTo_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_QUERYCOUNTVALUETYPE_H
