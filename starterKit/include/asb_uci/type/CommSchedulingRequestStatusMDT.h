/** @file CommSchedulingRequestStatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMSCHEDULINGREQUESTSTATUSMDT_H
#define ASB_UCI_TYPE_COMMSCHEDULINGREQUESTSTATUSMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/CommSchedulingRequestApprovalStatusEnum.h"
#include "asb_uci/type/RequestStatusBaseType.h"
#include "uci/type/CommSchedulingRequestStatusMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CannotComplyType;
class CommCoverageUserDataType;
class CommSchedulingRequirementID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class CommSchedulingRequestStatusMDT : public virtual uci::type::CommSchedulingRequestStatusMDT, public virtual RequestStatusBaseType {
public:
  /** A list of all of the requirements that should be accounted for in the scheduled communication element. Includes all
    * requested requirements regardless of whether or not the sibling scheduled communication element satisfies them.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using CommSchedulingRequirementID = asb_uci::base::BoundedList<uci::type::CommSchedulingRequirementID_Type, uci::type::accessorType::commSchedulingRequirementID_Type, asb_uci::type::CommSchedulingRequirementID_Type>;

  /** A list of allocated external communication resources and time that have been scheduled and approved. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ScheduledComm = asb_uci::base::BoundedList<uci::type::CommCoverageUserDataType, uci::type::accessorType::commCoverageUserDataType, asb_uci::type::CommCoverageUserDataType>;

  /** The constructor */
  CommSchedulingRequestStatusMDT();

  /** The copy constructor
    *
    * @param rhs The CommSchedulingRequestStatusMDT to copy from
    */
  CommSchedulingRequestStatusMDT(const CommSchedulingRequestStatusMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommSchedulingRequestStatusMDT to move from
    */
  CommSchedulingRequestStatusMDT(CommSchedulingRequestStatusMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommSchedulingRequestStatusMDT to copy from
    * @return The CommSchedulingRequestStatusMDT that was assigned
    */
  CommSchedulingRequestStatusMDT& operator=(const CommSchedulingRequestStatusMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommSchedulingRequestStatusMDT to move from
    * @return The CommSchedulingRequestStatusMDT that was assigned
    */
  CommSchedulingRequestStatusMDT& operator=(CommSchedulingRequestStatusMDT&& rhs) = delete;

  /** The destructor */
  ~CommSchedulingRequestStatusMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommSchedulingRequestStatusMDT whose contents are to be used to set this
    *      uci::type::CommSchedulingRequestStatusMDT's contents.
    */
  void copy(const uci::type::CommSchedulingRequestStatusMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommSchedulingRequestStatusMDT whose contents are to be used to set this
    *      uci::type::CommSchedulingRequestStatusMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommSchedulingRequestStatusMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's ApprovalStatus field
    *
    * @return The contents of the ApprovalStatus field
    */
  const uci::type::CommSchedulingRequestApprovalStatusEnum& getApprovalStatus() const override;

  /** Returns the contents of the message's ApprovalStatus field
    *
    * @return The contents of the ApprovalStatus field
    */
  uci::type::CommSchedulingRequestApprovalStatusEnum& getApprovalStatus() override;

  /** Sets the contents of the message's ApprovalStatus field
    *
    * @param accessor The accessor to use to set the ApprovalStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommSchedulingRequestStatusMDT& setApprovalStatus(const uci::type::CommSchedulingRequestApprovalStatusEnum& accessor) override;

  /** Sets the contents of the message's ApprovalStatus field
    *
    * @param value The new value to set the ApprovalStatus field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommSchedulingRequestStatusMDT& setApprovalStatus(uci::type::CommSchedulingRequestApprovalStatusEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& getApprovalStatusReason_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CannotComplyType& getApprovalStatusReason() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& getApprovalStatusReason() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommSchedulingRequestStatusMDT& setApprovalStatusReason(const uci::type::CannotComplyType& accessor) override;

  /** Returns whether this optional field ApprovalStatusReasonis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasApprovalStatusReason() const noexcept override;

  /** Enables the optional field such that getApprovalStatusReason will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CannotComplyType& enableApprovalStatusReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommSchedulingRequestStatusMDT& clearApprovalStatusReason() noexcept override;

  /** Returns the accessor to the CommSchedulingRequirementID field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommSchedulingRequirementID field.
    */
  const uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& getCommSchedulingRequirementID() const override;

  /** Returns the accessor to the CommSchedulingRequirementID field contained in this message fragment
    *
    * @return The reference to the accessor to the CommSchedulingRequirementID field.
    */
  uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& getCommSchedulingRequirementID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommSchedulingRequestStatusMDT& setCommSchedulingRequirementID(const uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& accessor) override;

  /** Returns the accessor to the ScheduledComm field contained in this message fragment
    *
    * @return The const reference to the accessor to the ScheduledComm field.
    */
  const uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& getScheduledComm() const override;

  /** Returns the accessor to the ScheduledComm field contained in this message fragment
    *
    * @return The reference to the accessor to the ScheduledComm field.
    */
  uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& getScheduledComm() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommSchedulingRequestStatusMDT& setScheduledComm(const uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommSchedulingRequestStatusMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommSchedulingRequestStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommSchedulingRequestStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CommSchedulingRequestApprovalStatusEnum> approvalStatus_Accessor;
  std::unique_ptr<CannotComplyType> approvalStatusReason_Accessor;
  std::unique_ptr<CommSchedulingRequirementID> commSchedulingRequirementID_Accessor;
  std::unique_ptr<ScheduledComm> scheduledComm_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMSCHEDULINGREQUESTSTATUSMDT_H
