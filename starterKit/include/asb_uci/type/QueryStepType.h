/** @file QueryStepType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_QUERYSTEPTYPE_H
#define ASB_UCI_TYPE_QUERYSTEPTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryStepType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class NamedElementType;
class WildcardElementType;

/** The mechanism by which queries navigate the data model of a UCI Message, which should be considered as a tree
  * structure containing branch and leaf nodes. Steps may either traverse up the tree (Ancestor and Parent), down the
  * tree (Element, Descendant, and Child), or remain at the current context. Steps are evaluated sequentially from the
  * current context, with the default context of a query as the root of the tree, i.e. the top-level global element
  * declaration. The result of each Step forms a sequence of zero or more nodes that is then used as the input to the
  * next Step, where each node of the input sequence is used as the current context with all sequences concatenated
  * together, repeated until all Steps are evaluated. Each node in this sequence is either a present optional field, a
  * required field, or an item in a list. For example, a Step that matches a list field with a length of two will result
  * in a sequence of two nodes. The resulting sequence is then evaluated by the query with a given operation. Some
  * operations, such as Equals, that operate on a single value are instead performed on each individual node in the
  * sequence and the result is computed by the logical OR of all the results.
  */
class QueryStepType : public virtual uci::type::QueryStepType {
public:
  /** The constructor */
  QueryStepType();

  /** The copy constructor
    *
    * @param rhs The QueryStepType to copy from
    */
  QueryStepType(const QueryStepType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The QueryStepType to move from
    */
  QueryStepType(QueryStepType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The QueryStepType to copy from
    * @return The QueryStepType that was assigned
    */
  QueryStepType& operator=(const QueryStepType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The QueryStepType to move from
    * @return The QueryStepType that was assigned
    */
  QueryStepType& operator=(QueryStepType&& rhs) = delete;

  /** The destructor */
  virtual ~QueryStepType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::QueryStepType whose contents are to be used to set this uci::type::QueryStepType's
    *      contents.
    */
  void copy(const uci::type::QueryStepType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::QueryStepType whose contents are to be used to set this uci::type::QueryStepType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::QueryStepType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::QueryStepType::QueryStepTypeChoice getQueryStepTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getQueryStepTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setQueryStepTypeChoiceOrdinal(uci::type::QueryStepType::QueryStepTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Element field contained in this message fragment
    *
    * @return The const reference to the accessor to the Element field.
    */
  uci::type::NamedElementType& getElement_() const;

  /** Returns the accessor to the Element field contained in this message fragment
    *
    * @return The reference to the accessor to the Element field.
    */
  const uci::type::NamedElementType& getElement() const override;

  /** Returns the accessor to the Element field contained in this message fragment
    *
    * @return The reference to the accessor to the Element field.
    */
  uci::type::NamedElementType& getElement() override;

  /** Sets this choice's choice to be element and initializes element to be the specified value. A deep copy will be used
    * by this method to set element
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setElement(const uci::type::NamedElementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Element.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Element, false otherwise.
    */
  bool isElement() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Element.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Element.
    */
  uci::type::NamedElementType& chooseElement(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Element.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Element.
    */
  uci::type::NamedElementType& chooseElement(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::EmptyType& getRoot_() const;

  /** Returns the contents of the message's Root item
    *
    * @return The contents of the Root field
    */
  const uci::type::EmptyType& getRoot() const override;

  /** Returns the contents of the message's Root item
    *
    * @return The contents of the Root field
    */
  uci::type::EmptyType& getRoot() override;

  /** Sets this choice's choice to be Root and initializes Root to be the specified value
    *
    * @param value The new value to set Root to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setRoot(const uci::type::EmptyType& value) override;

  /** Sets this choice's choice to be Root and initializes Root to be the specified value
    *
    * @param value The new value to set Root to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setRoot(const std::string& value) override;

  /** Sets this choice's choice to be Root and initializes Root to be the specified value
    *
    * @param value The new value to set Root to
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setRoot(const char * value) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Root.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Root, false otherwise.
    */
  bool isRoot() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Root.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Root.
    */
  uci::type::EmptyType& chooseRoot(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Root.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Root.
    */
  uci::type::EmptyType& chooseRoot(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Ancestor field contained in this message fragment
    *
    * @return The const reference to the accessor to the Ancestor field.
    */
  uci::type::WildcardElementType& getAncestor_() const;

  /** Returns the accessor to the Ancestor field contained in this message fragment
    *
    * @return The reference to the accessor to the Ancestor field.
    */
  const uci::type::WildcardElementType& getAncestor() const override;

  /** Returns the accessor to the Ancestor field contained in this message fragment
    *
    * @return The reference to the accessor to the Ancestor field.
    */
  uci::type::WildcardElementType& getAncestor() override;

  /** Sets this choice's choice to be ancestor and initializes ancestor to be the specified value. A deep copy will be used
    * by this method to set ancestor
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setAncestor(const uci::type::WildcardElementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Ancestor.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Ancestor, false otherwise.
    */
  bool isAncestor() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Ancestor.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Ancestor.
    */
  uci::type::WildcardElementType& chooseAncestor(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Ancestor.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Ancestor.
    */
  uci::type::WildcardElementType& chooseAncestor(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Descendant field contained in this message fragment
    *
    * @return The const reference to the accessor to the Descendant field.
    */
  uci::type::WildcardElementType& getDescendant_() const;

  /** Returns the accessor to the Descendant field contained in this message fragment
    *
    * @return The reference to the accessor to the Descendant field.
    */
  const uci::type::WildcardElementType& getDescendant() const override;

  /** Returns the accessor to the Descendant field contained in this message fragment
    *
    * @return The reference to the accessor to the Descendant field.
    */
  uci::type::WildcardElementType& getDescendant() override;

  /** Sets this choice's choice to be descendant and initializes descendant to be the specified value. A deep copy will be
    * used by this method to set descendant
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setDescendant(const uci::type::WildcardElementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Descendant.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Descendant, false otherwise.
    */
  bool isDescendant() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Descendant.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Descendant.
    */
  uci::type::WildcardElementType& chooseDescendant(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Descendant.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Descendant.
    */
  uci::type::WildcardElementType& chooseDescendant(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Parent field contained in this message fragment
    *
    * @return The const reference to the accessor to the Parent field.
    */
  uci::type::WildcardElementType& getParent_() const;

  /** Returns the accessor to the Parent field contained in this message fragment
    *
    * @return The reference to the accessor to the Parent field.
    */
  const uci::type::WildcardElementType& getParent() const override;

  /** Returns the accessor to the Parent field contained in this message fragment
    *
    * @return The reference to the accessor to the Parent field.
    */
  uci::type::WildcardElementType& getParent() override;

  /** Sets this choice's choice to be parent and initializes parent to be the specified value. A deep copy will be used by
    * this method to set parent
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setParent(const uci::type::WildcardElementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Parent.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Parent, false otherwise.
    */
  bool isParent() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Parent.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Parent.
    */
  uci::type::WildcardElementType& chooseParent(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Parent.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Parent.
    */
  uci::type::WildcardElementType& chooseParent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Child field contained in this message fragment
    *
    * @return The const reference to the accessor to the Child field.
    */
  uci::type::WildcardElementType& getChild_() const;

  /** Returns the accessor to the Child field contained in this message fragment
    *
    * @return The reference to the accessor to the Child field.
    */
  const uci::type::WildcardElementType& getChild() const override;

  /** Returns the accessor to the Child field contained in this message fragment
    *
    * @return The reference to the accessor to the Child field.
    */
  uci::type::WildcardElementType& getChild() override;

  /** Sets this choice's choice to be child and initializes child to be the specified value. A deep copy will be used by
    * this method to set child
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::QueryStepType& setChild(const uci::type::WildcardElementType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Child.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Child, false otherwise.
    */
  bool isChild() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Child.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Child.
    */
  uci::type::WildcardElementType& chooseChild(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Child.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Child.
    */
  uci::type::WildcardElementType& chooseChild(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<QueryStepType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryStepType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::QueryStepType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<NamedElementType> element_Accessor;
  std::unique_ptr<EmptyType> root_Accessor;
  std::unique_ptr<WildcardElementType> ancestor_Accessor;
  std::unique_ptr<WildcardElementType> descendant_Accessor;
  std::unique_ptr<WildcardElementType> parent_Accessor;
  std::unique_ptr<WildcardElementType> child_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_QUERYSTEPTYPE_H
