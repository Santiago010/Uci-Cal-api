/** @file TaskType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_TASKTYPE_H
#define ASB_UCI_TYPE_TASKTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AMTI_TaskType;
class AO_TaskType;
class AirSampleTaskType;
class COMINT_TaskType;
class CargoDeliveryTaskType;
class CommRelayTaskType;
class CounterSpaceTaskType;
class EA_TaskType;
class ESM_TaskType;
class FlightTaskType;
class OrbitChangeTaskType;
class OrbitalSurveillanceSensorTaskType;
class OrbitalSurveillanceTaskType;
class PO_TaskType;
class RefuelTaskType;
class SAR_TaskType;
class SMTI_TaskType;
class StrikeTaskType;
class SystemDeploymentTaskType;
class TacticalOrderTaskType;
class WeatherRadarTaskType;

/** Identifies the type of this Task instance. Note: When modifying this complexType (whether adding or removing
  * choices), there are equivalent complexTypes that require the same modifications. Changes to this type may necessitate
  * a modification to CapabilityTaxonomyType.
  */
class TaskType : public virtual uci::type::TaskType {
public:
  /** The constructor */
  TaskType();

  /** The copy constructor
    *
    * @param rhs The TaskType to copy from
    */
  TaskType(const TaskType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The TaskType to move from
    */
  TaskType(TaskType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The TaskType to copy from
    * @return The TaskType that was assigned
    */
  TaskType& operator=(const TaskType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The TaskType to move from
    * @return The TaskType that was assigned
    */
  TaskType& operator=(TaskType&& rhs) = delete;

  /** The destructor */
  virtual ~TaskType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::TaskType whose contents are to be used to set this uci::type::TaskType's contents.
    */
  void copy(const uci::type::TaskType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::TaskType whose contents are to be used to set this uci::type::TaskType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::TaskType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::TaskType::TaskTypeChoice getTaskTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getTaskTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setTaskTypeChoiceOrdinal(uci::type::TaskType::TaskTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The const reference to the accessor to the AirSample field.
    */
  uci::type::AirSampleTaskType& getAirSample_() const;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The reference to the accessor to the AirSample field.
    */
  const uci::type::AirSampleTaskType& getAirSample() const override;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The reference to the accessor to the AirSample field.
    */
  uci::type::AirSampleTaskType& getAirSample() override;

  /** Sets this choice's choice to be airSample and initializes airSample to be the specified value. A deep copy will be
    * used by this method to set airSample
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setAirSample(const uci::type::AirSampleTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AirSample.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AirSample, false otherwise.
    */
  bool isAirSample() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AirSample.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AirSample.
    */
  uci::type::AirSampleTaskType& chooseAirSample(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AirSample.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AirSample.
    */
  uci::type::AirSampleTaskType& chooseAirSample(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The const reference to the accessor to the AMTI field.
    */
  uci::type::AMTI_TaskType& getAMTI_() const;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the AMTI field.
    */
  const uci::type::AMTI_TaskType& getAMTI() const override;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the AMTI field.
    */
  uci::type::AMTI_TaskType& getAMTI() override;

  /** Sets this choice's choice to be aMTI and initializes aMTI to be the specified value. A deep copy will be used by this
    * method to set aMTI
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setAMTI(const uci::type::AMTI_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AMTI, false otherwise.
    */
  bool isAMTI() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AMTI.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AMTI.
    */
  uci::type::AMTI_TaskType& chooseAMTI(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AMTI.
    */
  uci::type::AMTI_TaskType& chooseAMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The const reference to the accessor to the AO field.
    */
  uci::type::AO_TaskType& getAO_() const;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The reference to the accessor to the AO field.
    */
  const uci::type::AO_TaskType& getAO() const override;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The reference to the accessor to the AO field.
    */
  uci::type::AO_TaskType& getAO() override;

  /** Sets this choice's choice to be aO and initializes aO to be the specified value. A deep copy will be used by this
    * method to set aO
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setAO(const uci::type::AO_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AO, false otherwise.
    */
  bool isAO() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by AO.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AO.
    */
  uci::type::AO_TaskType& chooseAO(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by AO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AO.
    */
  uci::type::AO_TaskType& chooseAO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CargoDelivery field contained in this message fragment
    *
    * @return The const reference to the accessor to the CargoDelivery field.
    */
  uci::type::CargoDeliveryTaskType& getCargoDelivery_() const;

  /** Returns the accessor to the CargoDelivery field contained in this message fragment
    *
    * @return The const reference to the accessor to the CargoDelivery field.
    */
  const uci::type::CargoDeliveryTaskType& getCargoDelivery() const override;

  /** Returns the accessor to the CargoDelivery field contained in this message fragment
    *
    * @return The reference to the accessor to the CargoDelivery field.
    */
  uci::type::CargoDeliveryTaskType& getCargoDelivery() override;

  /** Sets this choice's choice to be CargoDelivery and initializes CargoDelivery to be the specified value. A deep copy
    * will be used by this method to set CargoDelivery
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setCargoDelivery(const uci::type::CargoDeliveryTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CargoDelivery.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CargoDelivery, false otherwise.
    */
  bool isCargoDelivery() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CargoDelivery.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CargoDelivery.
    */
  uci::type::CargoDeliveryTaskType& chooseCargoDelivery(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CargoDelivery.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CargoDelivery.
    */
  uci::type::CargoDeliveryTaskType& chooseCargoDelivery(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The const reference to the accessor to the COMINT field.
    */
  uci::type::COMINT_TaskType& getCOMINT_() const;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The reference to the accessor to the COMINT field.
    */
  const uci::type::COMINT_TaskType& getCOMINT() const override;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The reference to the accessor to the COMINT field.
    */
  uci::type::COMINT_TaskType& getCOMINT() override;

  /** Sets this choice's choice to be cOMINT and initializes cOMINT to be the specified value. A deep copy will be used by
    * this method to set cOMINT
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setCOMINT(const uci::type::COMINT_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by COMINT.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by COMINT, false otherwise.
    */
  bool isCOMINT() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by COMINT.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by COMINT.
    */
  uci::type::COMINT_TaskType& chooseCOMINT(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by COMINT.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by COMINT.
    */
  uci::type::COMINT_TaskType& chooseCOMINT(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommRelay field.
    */
  uci::type::CommRelayTaskType& getCommRelay_() const;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The reference to the accessor to the CommRelay field.
    */
  const uci::type::CommRelayTaskType& getCommRelay() const override;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The reference to the accessor to the CommRelay field.
    */
  uci::type::CommRelayTaskType& getCommRelay() override;

  /** Sets this choice's choice to be commRelay and initializes commRelay to be the specified value. A deep copy will be
    * used by this method to set commRelay
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setCommRelay(const uci::type::CommRelayTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommRelay.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommRelay, false otherwise.
    */
  bool isCommRelay() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CommRelay.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommRelay.
    */
  uci::type::CommRelayTaskType& chooseCommRelay(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CommRelay.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommRelay.
    */
  uci::type::CommRelayTaskType& chooseCommRelay(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the CounterSpace field contained in this message fragment
    *
    * @return The const reference to the accessor to the CounterSpace field.
    */
  uci::type::CounterSpaceTaskType& getCounterSpace_() const;

  /** Returns the accessor to the CounterSpace field contained in this message fragment
    *
    * @return The reference to the accessor to the CounterSpace field.
    */
  const uci::type::CounterSpaceTaskType& getCounterSpace() const override;

  /** Returns the accessor to the CounterSpace field contained in this message fragment
    *
    * @return The reference to the accessor to the CounterSpace field.
    */
  uci::type::CounterSpaceTaskType& getCounterSpace() override;

  /** Sets this choice's choice to be counterSpace and initializes counterSpace to be the specified value. A deep copy will
    * be used by this method to set counterSpace
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setCounterSpace(const uci::type::CounterSpaceTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CounterSpace.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CounterSpace, false otherwise.
    */
  bool isCounterSpace() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by CounterSpace.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CounterSpace.
    */
  uci::type::CounterSpaceTaskType& chooseCounterSpace(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by CounterSpace.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CounterSpace.
    */
  uci::type::CounterSpaceTaskType& chooseCounterSpace(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The const reference to the accessor to the EA field.
    */
  uci::type::EA_TaskType& getEA_() const;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The reference to the accessor to the EA field.
    */
  const uci::type::EA_TaskType& getEA() const override;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The reference to the accessor to the EA field.
    */
  uci::type::EA_TaskType& getEA() override;

  /** Sets this choice's choice to be eA and initializes eA to be the specified value. A deep copy will be used by this
    * method to set eA
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setEA(const uci::type::EA_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EA.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EA, false otherwise.
    */
  bool isEA() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EA.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EA.
    */
  uci::type::EA_TaskType& chooseEA(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EA.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EA.
    */
  uci::type::EA_TaskType& chooseEA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The const reference to the accessor to the ESM field.
    */
  uci::type::ESM_TaskType& getESM_() const;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The reference to the accessor to the ESM field.
    */
  const uci::type::ESM_TaskType& getESM() const override;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The reference to the accessor to the ESM field.
    */
  uci::type::ESM_TaskType& getESM() override;

  /** Sets this choice's choice to be eSM and initializes eSM to be the specified value. A deep copy will be used by this
    * method to set eSM
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setESM(const uci::type::ESM_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ESM.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ESM, false otherwise.
    */
  bool isESM() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ESM.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ESM.
    */
  uci::type::ESM_TaskType& chooseESM(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ESM.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ESM.
    */
  uci::type::ESM_TaskType& chooseESM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Flight field contained in this message fragment
    *
    * @return The const reference to the accessor to the Flight field.
    */
  uci::type::FlightTaskType& getFlight_() const;

  /** Returns the accessor to the Flight field contained in this message fragment
    *
    * @return The reference to the accessor to the Flight field.
    */
  const uci::type::FlightTaskType& getFlight() const override;

  /** Returns the accessor to the Flight field contained in this message fragment
    *
    * @return The reference to the accessor to the Flight field.
    */
  uci::type::FlightTaskType& getFlight() override;

  /** Sets this choice's choice to be flight and initializes flight to be the specified value. A deep copy will be used by
    * this method to set flight
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setFlight(const uci::type::FlightTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Flight.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Flight, false otherwise.
    */
  bool isFlight() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Flight.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Flight.
    */
  uci::type::FlightTaskType& chooseFlight(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Flight.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Flight.
    */
  uci::type::FlightTaskType& chooseFlight(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OrbitChange field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitChange field.
    */
  uci::type::OrbitChangeTaskType& getOrbitChange_() const;

  /** Returns the accessor to the OrbitChange field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitChange field.
    */
  const uci::type::OrbitChangeTaskType& getOrbitChange() const override;

  /** Returns the accessor to the OrbitChange field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitChange field.
    */
  uci::type::OrbitChangeTaskType& getOrbitChange() override;

  /** Sets this choice's choice to be orbitChange and initializes orbitChange to be the specified value. A deep copy will
    * be used by this method to set orbitChange
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setOrbitChange(const uci::type::OrbitChangeTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitChange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitChange, false otherwise.
    */
  bool isOrbitChange() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitChange.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitChange.
    */
  uci::type::OrbitChangeTaskType& chooseOrbitChange(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitChange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitChange.
    */
  uci::type::OrbitChangeTaskType& chooseOrbitChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OrbitalSurveillance field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitalSurveillance field.
    */
  uci::type::OrbitalSurveillanceTaskType& getOrbitalSurveillance_() const;

  /** Returns the accessor to the OrbitalSurveillance field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitalSurveillance field.
    */
  const uci::type::OrbitalSurveillanceTaskType& getOrbitalSurveillance() const override;

  /** Returns the accessor to the OrbitalSurveillance field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitalSurveillance field.
    */
  uci::type::OrbitalSurveillanceTaskType& getOrbitalSurveillance() override;

  /** Sets this choice's choice to be orbitalSurveillance and initializes orbitalSurveillance to be the specified value. A
    * deep copy will be used by this method to set orbitalSurveillance
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setOrbitalSurveillance(const uci::type::OrbitalSurveillanceTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillance, false
    *      otherwise.
    */
  bool isOrbitalSurveillance() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitalSurveillance.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitalSurveillance.
    */
  uci::type::OrbitalSurveillanceTaskType& chooseOrbitalSurveillance(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitalSurveillance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitalSurveillance.
    */
  uci::type::OrbitalSurveillanceTaskType& chooseOrbitalSurveillance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OrbitalSurveillanceSensor field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitalSurveillanceSensor field.
    */
  uci::type::OrbitalSurveillanceSensorTaskType& getOrbitalSurveillanceSensor_() const;

  /** Returns the accessor to the OrbitalSurveillanceSensor field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitalSurveillanceSensor field.
    */
  const uci::type::OrbitalSurveillanceSensorTaskType& getOrbitalSurveillanceSensor() const override;

  /** Returns the accessor to the OrbitalSurveillanceSensor field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitalSurveillanceSensor field.
    */
  uci::type::OrbitalSurveillanceSensorTaskType& getOrbitalSurveillanceSensor() override;

  /** Sets this choice's choice to be orbitalSurveillanceSensor and initializes orbitalSurveillanceSensor to be the
    * specified value. A deep copy will be used by this method to set orbitalSurveillanceSensor
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setOrbitalSurveillanceSensor(const uci::type::OrbitalSurveillanceSensorTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillanceSensor.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillanceSensor, false
    *      otherwise.
    */
  bool isOrbitalSurveillanceSensor() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitalSurveillanceSensor.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitalSurveillanceSensor.
    */
  uci::type::OrbitalSurveillanceSensorTaskType& chooseOrbitalSurveillanceSensor(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitalSurveillanceSensor.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitalSurveillanceSensor.
    */
  uci::type::OrbitalSurveillanceSensorTaskType& chooseOrbitalSurveillanceSensor(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The const reference to the accessor to the PO field.
    */
  uci::type::PO_TaskType& getPO_() const;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The reference to the accessor to the PO field.
    */
  const uci::type::PO_TaskType& getPO() const override;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The reference to the accessor to the PO field.
    */
  uci::type::PO_TaskType& getPO() override;

  /** Sets this choice's choice to be pO and initializes pO to be the specified value. A deep copy will be used by this
    * method to set pO
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setPO(const uci::type::PO_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PO, false otherwise.
    */
  bool isPO() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by PO.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PO.
    */
  uci::type::PO_TaskType& choosePO(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by PO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PO.
    */
  uci::type::PO_TaskType& choosePO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Refuel field contained in this message fragment
    *
    * @return The const reference to the accessor to the Refuel field.
    */
  uci::type::RefuelTaskType& getRefuel_() const;

  /** Returns the accessor to the Refuel field contained in this message fragment
    *
    * @return The reference to the accessor to the Refuel field.
    */
  const uci::type::RefuelTaskType& getRefuel() const override;

  /** Returns the accessor to the Refuel field contained in this message fragment
    *
    * @return The reference to the accessor to the Refuel field.
    */
  uci::type::RefuelTaskType& getRefuel() override;

  /** Sets this choice's choice to be refuel and initializes refuel to be the specified value. A deep copy will be used by
    * this method to set refuel
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setRefuel(const uci::type::RefuelTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Refuel.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Refuel, false otherwise.
    */
  bool isRefuel() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Refuel.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Refuel.
    */
  uci::type::RefuelTaskType& chooseRefuel(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Refuel.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Refuel.
    */
  uci::type::RefuelTaskType& chooseRefuel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The const reference to the accessor to the SAR field.
    */
  uci::type::SAR_TaskType& getSAR_() const;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The reference to the accessor to the SAR field.
    */
  const uci::type::SAR_TaskType& getSAR() const override;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The reference to the accessor to the SAR field.
    */
  uci::type::SAR_TaskType& getSAR() override;

  /** Sets this choice's choice to be sAR and initializes sAR to be the specified value. A deep copy will be used by this
    * method to set sAR
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setSAR(const uci::type::SAR_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SAR.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SAR, false otherwise.
    */
  bool isSAR() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SAR.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SAR.
    */
  uci::type::SAR_TaskType& chooseSAR(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SAR.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SAR.
    */
  uci::type::SAR_TaskType& chooseSAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The const reference to the accessor to the SMTI field.
    */
  uci::type::SMTI_TaskType& getSMTI_() const;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the SMTI field.
    */
  const uci::type::SMTI_TaskType& getSMTI() const override;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the SMTI field.
    */
  uci::type::SMTI_TaskType& getSMTI() override;

  /** Sets this choice's choice to be sMTI and initializes sMTI to be the specified value. A deep copy will be used by this
    * method to set sMTI
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setSMTI(const uci::type::SMTI_TaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SMTI, false otherwise.
    */
  bool isSMTI() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SMTI.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SMTI.
    */
  uci::type::SMTI_TaskType& chooseSMTI(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SMTI.
    */
  uci::type::SMTI_TaskType& chooseSMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The const reference to the accessor to the Strike field.
    */
  uci::type::StrikeTaskType& getStrike_() const;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The reference to the accessor to the Strike field.
    */
  const uci::type::StrikeTaskType& getStrike() const override;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The reference to the accessor to the Strike field.
    */
  uci::type::StrikeTaskType& getStrike() override;

  /** Sets this choice's choice to be strike and initializes strike to be the specified value. A deep copy will be used by
    * this method to set strike
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setStrike(const uci::type::StrikeTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Strike.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Strike, false otherwise.
    */
  bool isStrike() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Strike.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Strike.
    */
  uci::type::StrikeTaskType& chooseStrike(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Strike.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Strike.
    */
  uci::type::StrikeTaskType& chooseStrike(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the SystemDeployment field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemDeployment field.
    */
  uci::type::SystemDeploymentTaskType& getSystemDeployment_() const;

  /** Returns the accessor to the SystemDeployment field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemDeployment field.
    */
  const uci::type::SystemDeploymentTaskType& getSystemDeployment() const override;

  /** Returns the accessor to the SystemDeployment field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemDeployment field.
    */
  uci::type::SystemDeploymentTaskType& getSystemDeployment() override;

  /** Sets this choice's choice to be systemDeployment and initializes systemDeployment to be the specified value. A deep
    * copy will be used by this method to set systemDeployment
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setSystemDeployment(const uci::type::SystemDeploymentTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SystemDeployment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SystemDeployment, false
    *      otherwise.
    */
  bool isSystemDeployment() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by SystemDeployment.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SystemDeployment.
    */
  uci::type::SystemDeploymentTaskType& chooseSystemDeployment(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by SystemDeployment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SystemDeployment.
    */
  uci::type::SystemDeploymentTaskType& chooseSystemDeployment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the TacticalOrder field contained in this message fragment
    *
    * @return The const reference to the accessor to the TacticalOrder field.
    */
  uci::type::TacticalOrderTaskType& getTacticalOrder_() const;

  /** Returns the accessor to the TacticalOrder field contained in this message fragment
    *
    * @return The reference to the accessor to the TacticalOrder field.
    */
  const uci::type::TacticalOrderTaskType& getTacticalOrder() const override;

  /** Returns the accessor to the TacticalOrder field contained in this message fragment
    *
    * @return The reference to the accessor to the TacticalOrder field.
    */
  uci::type::TacticalOrderTaskType& getTacticalOrder() override;

  /** Sets this choice's choice to be tacticalOrder and initializes tacticalOrder to be the specified value. A deep copy
    * will be used by this method to set tacticalOrder
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setTacticalOrder(const uci::type::TacticalOrderTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TacticalOrder.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TacticalOrder, false otherwise.
    */
  bool isTacticalOrder() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by TacticalOrder.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TacticalOrder.
    */
  uci::type::TacticalOrderTaskType& chooseTacticalOrder(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by TacticalOrder.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TacticalOrder.
    */
  uci::type::TacticalOrderTaskType& chooseTacticalOrder(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the WeatherRadar field contained in this message fragment
    *
    * @return The const reference to the accessor to the WeatherRadar field.
    */
  uci::type::WeatherRadarTaskType& getWeatherRadar_() const;

  /** Returns the accessor to the WeatherRadar field contained in this message fragment
    *
    * @return The reference to the accessor to the WeatherRadar field.
    */
  const uci::type::WeatherRadarTaskType& getWeatherRadar() const override;

  /** Returns the accessor to the WeatherRadar field contained in this message fragment
    *
    * @return The reference to the accessor to the WeatherRadar field.
    */
  uci::type::WeatherRadarTaskType& getWeatherRadar() override;

  /** Sets this choice's choice to be weatherRadar and initializes weatherRadar to be the specified value. A deep copy will
    * be used by this method to set weatherRadar
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::TaskType& setWeatherRadar(const uci::type::WeatherRadarTaskType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeatherRadar.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeatherRadar, false otherwise.
    */
  bool isWeatherRadar() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherRadar.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherRadar.
    */
  uci::type::WeatherRadarTaskType& chooseWeatherRadar(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherRadar.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherRadar.
    */
  uci::type::WeatherRadarTaskType& chooseWeatherRadar(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<TaskType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::TaskType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::TaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<AirSampleTaskType> airSample_Accessor;
  std::unique_ptr<AMTI_TaskType> aMTI_Accessor;
  std::unique_ptr<AO_TaskType> aO_Accessor;
  std::unique_ptr<CargoDeliveryTaskType> cargoDelivery_Accessor;
  std::unique_ptr<COMINT_TaskType> cOMINT_Accessor;
  std::unique_ptr<CommRelayTaskType> commRelay_Accessor;
  std::unique_ptr<CounterSpaceTaskType> counterSpace_Accessor;
  std::unique_ptr<EA_TaskType> eA_Accessor;
  std::unique_ptr<ESM_TaskType> eSM_Accessor;
  std::unique_ptr<FlightTaskType> flight_Accessor;
  std::unique_ptr<OrbitChangeTaskType> orbitChange_Accessor;
  std::unique_ptr<OrbitalSurveillanceTaskType> orbitalSurveillance_Accessor;
  std::unique_ptr<OrbitalSurveillanceSensorTaskType> orbitalSurveillanceSensor_Accessor;
  std::unique_ptr<PO_TaskType> pO_Accessor;
  std::unique_ptr<RefuelTaskType> refuel_Accessor;
  std::unique_ptr<SAR_TaskType> sAR_Accessor;
  std::unique_ptr<SMTI_TaskType> sMTI_Accessor;
  std::unique_ptr<StrikeTaskType> strike_Accessor;
  std::unique_ptr<SystemDeploymentTaskType> systemDeployment_Accessor;
  std::unique_ptr<TacticalOrderTaskType> tacticalOrder_Accessor;
  std::unique_ptr<WeatherRadarTaskType> weatherRadar_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_TASKTYPE_H
