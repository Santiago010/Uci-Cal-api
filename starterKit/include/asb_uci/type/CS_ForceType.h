/** @file CS_ForceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CS_FORCETYPE_H
#define ASB_UCI_TYPE_CS_FORCETYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DistanceType.h"
#include "asb_uci/type/VisibleString32Type.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/CS_ForceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CS_CapabilitiesType;
class CS_FreeFormatType;
class CS_ObscuraDataType;
class CS_PostureType;
class ForeignKeyType;

/** This type represent a CounterSpace capability (Force). */
class CS_ForceType : public virtual uci::type::CS_ForceType {
public:
  /** Indicates external (non-UCI) reference names for available CounterSpace capability's effects/tactics. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Tactics = asb_uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType, asb_uci::type::ForeignKeyType>;

  /** Times related to attaining a posture level or maintaining a posture level. [Occurrences: Minimum: 0; Maximum: 5] */
  using Posture = asb_uci::base::BoundedList<uci::type::CS_PostureType, uci::type::accessorType::cS_PostureType, asb_uci::type::CS_PostureType>;

  /** CounterSpace sub-capabilities. These sub-capabilities are individual receive or transmit signal capabilities.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ForceCapability = asb_uci::base::BoundedList<uci::type::CS_CapabilitiesType, uci::type::accessorType::cS_CapabilitiesType, asb_uci::type::CS_CapabilitiesType>;

  /** The constructor */
  CS_ForceType();

  /** The copy constructor
    *
    * @param rhs The CS_ForceType to copy from
    */
  CS_ForceType(const CS_ForceType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CS_ForceType to move from
    */
  CS_ForceType(CS_ForceType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CS_ForceType to copy from
    * @return The CS_ForceType that was assigned
    */
  CS_ForceType& operator=(const CS_ForceType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CS_ForceType to move from
    * @return The CS_ForceType that was assigned
    */
  CS_ForceType& operator=(CS_ForceType&& rhs) = delete;

  /** The destructor */
  virtual ~CS_ForceType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CS_ForceType whose contents are to be used to set this uci::type::CS_ForceType's
    *      contents.
    */
  void copy(const uci::type::CS_ForceType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CS_ForceType whose contents are to be used to set this uci::type::CS_ForceType's
    *      contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CS_ForceType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getForceName_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getForceName() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getForceName() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setForceName(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field ForceNameis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasForceName() const noexcept override;

  /** Enables the optional field such that getForceName will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableForceName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearForceName() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getLocationName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString32Type& getLocationName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& getLocationName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setLocationName(const uci::type::VisibleString32Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setLocationName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setLocationName(const char* value) override;

  /** Returns whether this optional field locationName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocationName() const noexcept override;

  /** Enables the optional field such that getLocationName will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString32Type& enableLocationName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearLocationName() noexcept override;

  /** Returns the accessor to the Tactics field contained in this message fragment
    *
    * @return The const reference to the accessor to the Tactics field.
    */
  const uci::type::CS_ForceType::Tactics& getTactics() const override;

  /** Returns the accessor to the Tactics field contained in this message fragment
    *
    * @return The reference to the accessor to the Tactics field.
    */
  uci::type::CS_ForceType::Tactics& getTactics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setTactics(const uci::type::CS_ForceType::Tactics& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getLocked() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setLocked(xs::Boolean value) override;

  /** Returns whether this optional field Lockedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocked() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearLocked() noexcept override;

  /** Returns the accessor to the Posture field contained in this message fragment
    *
    * @return The const reference to the accessor to the Posture field.
    */
  const uci::type::CS_ForceType::Posture& getPosture() const override;

  /** Returns the accessor to the Posture field contained in this message fragment
    *
    * @return The reference to the accessor to the Posture field.
    */
  uci::type::CS_ForceType::Posture& getPosture() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setPosture(const uci::type::CS_ForceType::Posture& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getPortable() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setPortable(xs::Boolean value) override;

  /** Returns whether this optional field Portableis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPortable() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearPortable() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DistanceTypeValue getPortableRadius() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setPortableRadius(uci::type::DistanceTypeValue value) override;

  /** Returns whether this optional field PortableRadiusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPortableRadius() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearPortableRadius() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::Boolean getUseForceObscura() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setUseForceObscura(xs::Boolean value) override;

  /** Returns whether this optional field UseForceObscurais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasUseForceObscura() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearUseForceObscura() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_FreeFormatType& getFreeFormat_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CS_FreeFormatType& getFreeFormat() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_FreeFormatType& getFreeFormat() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setFreeFormat(const uci::type::CS_FreeFormatType& accessor) override;

  /** Returns whether this optional field FreeFormatis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFreeFormat() const noexcept override;

  /** Enables the optional field such that getFreeFormat will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_FreeFormatType& enableFreeFormat(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearFreeFormat() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_ObscuraDataType& getObscuraData_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CS_ObscuraDataType& getObscuraData() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_ObscuraDataType& getObscuraData() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setObscuraData(const uci::type::CS_ObscuraDataType& accessor) override;

  /** Returns whether this optional field ObscuraDatais available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasObscuraData() const noexcept override;

  /** Enables the optional field such that getObscuraData will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_ObscuraDataType& enableObscuraData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& clearObscuraData() noexcept override;

  /** Returns the accessor to the ForceCapability field contained in this message fragment
    *
    * @return The const reference to the accessor to the ForceCapability field.
    */
  const uci::type::CS_ForceType::ForceCapability& getForceCapability() const override;

  /** Returns the accessor to the ForceCapability field contained in this message fragment
    *
    * @return The reference to the accessor to the ForceCapability field.
    */
  uci::type::CS_ForceType::ForceCapability& getForceCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CS_ForceType& setForceCapability(const uci::type::CS_ForceType::ForceCapability& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CS_ForceType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_ForceType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CS_ForceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ForeignKeyType> forceName_Accessor;
  std::unique_ptr<VisibleString32Type> locationName_Accessor;
  std::unique_ptr<Tactics> tactics_Accessor;
  boost::optional<asb_xs::Boolean> locked_Accessor;
  std::unique_ptr<Posture> posture_Accessor;
  boost::optional<asb_xs::Boolean> portable_Accessor;
  boost::optional<DistanceTypeValue> portableRadius_Accessor;
  boost::optional<asb_xs::Boolean> useForceObscura_Accessor;
  std::unique_ptr<CS_FreeFormatType> freeFormat_Accessor;
  std::unique_ptr<CS_ObscuraDataType> obscuraData_Accessor;
  std::unique_ptr<ForceCapability> forceCapability_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CS_FORCETYPE_H
