/** @file LaunchObservationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_LAUNCHOBSERVATIONMDT_H
#define ASB_UCI_TYPE_LAUNCHOBSERVATIONMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LaunchObservationMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class LaunchObjectType;
class LaunchObservationID_Type;
class LaunchStaticDetailsType;
class SourceFiltersType;

/** See annotations in child elements and messages/elements that use this type for details. */
class LaunchObservationMDT : public virtual uci::type::LaunchObservationMDT, public virtual DataRecordBaseType {
public:
  /** Provides the details of the launch object and applicable dynamic launch characteristics. For every launch stage
    * throughout the launch event, there should only be one corresponding launch stage field. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  using LaunchObject = asb_uci::base::BoundedList<uci::type::LaunchObjectType, uci::type::accessorType::launchObjectType, asb_uci::type::LaunchObjectType>;

  /** Indicates the source that produced the sibling launch details. Note that this source might be different than the
    * source that produced the Entity/Entities. There could be multiple sources that provided the sibling information,
    * including from sensor data and/or from a fusion service. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Source = asb_uci::base::BoundedList<uci::type::SourceFiltersType, uci::type::accessorType::sourceFiltersType, asb_uci::type::SourceFiltersType>;

  /** The unique identifier for a related launch observation. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using RelatedLaunchObservationID = asb_uci::base::BoundedList<uci::type::LaunchObservationID_Type, uci::type::accessorType::launchObservationID_Type, asb_uci::type::LaunchObservationID_Type>;

  /** The constructor */
  LaunchObservationMDT();

  /** The copy constructor
    *
    * @param rhs The LaunchObservationMDT to copy from
    */
  LaunchObservationMDT(const LaunchObservationMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The LaunchObservationMDT to move from
    */
  LaunchObservationMDT(LaunchObservationMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The LaunchObservationMDT to copy from
    * @return The LaunchObservationMDT that was assigned
    */
  LaunchObservationMDT& operator=(const LaunchObservationMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The LaunchObservationMDT to move from
    * @return The LaunchObservationMDT that was assigned
    */
  LaunchObservationMDT& operator=(LaunchObservationMDT&& rhs) = delete;

  /** The destructor */
  ~LaunchObservationMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::LaunchObservationMDT whose contents are to be used to set this
    *      uci::type::LaunchObservationMDT's contents.
    */
  void copy(const uci::type::LaunchObservationMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::LaunchObservationMDT whose contents are to be used to set this
    *      uci::type::LaunchObservationMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::LaunchObservationMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the LaunchObservationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the LaunchObservationID field.
    */
  const uci::type::LaunchObservationID_Type& getLaunchObservationID() const override;

  /** Returns the accessor to the LaunchObservationID field contained in this message fragment
    *
    * @return The reference to the accessor to the LaunchObservationID field.
    */
  uci::type::LaunchObservationID_Type& getLaunchObservationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& setLaunchObservationID(const uci::type::LaunchObservationID_Type& accessor) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getInitialCreateTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& setInitialCreateTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field InitialCreateTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInitialCreateTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& clearInitialCreateTime() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getLastUpdateTime() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& setLastUpdateTime(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field LastUpdateTimeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLastUpdateTime() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& clearLastUpdateTime() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchStaticDetailsType& getStaticLaunchCharacteristics_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::LaunchStaticDetailsType& getStaticLaunchCharacteristics() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchStaticDetailsType& getStaticLaunchCharacteristics() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& setStaticLaunchCharacteristics(const uci::type::LaunchStaticDetailsType& accessor) override;

  /** Returns whether this optional field StaticLaunchCharacteristicsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStaticLaunchCharacteristics() const noexcept override;

  /** Enables the optional field such that getStaticLaunchCharacteristics will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::LaunchStaticDetailsType& enableStaticLaunchCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& clearStaticLaunchCharacteristics() noexcept override;

  /** Returns the accessor to the LaunchObject field contained in this message fragment
    *
    * @return The const reference to the accessor to the LaunchObject field.
    */
  const uci::type::LaunchObservationMDT::LaunchObject& getLaunchObject() const override;

  /** Returns the accessor to the LaunchObject field contained in this message fragment
    *
    * @return The reference to the accessor to the LaunchObject field.
    */
  uci::type::LaunchObservationMDT::LaunchObject& getLaunchObject() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& setLaunchObject(const uci::type::LaunchObservationMDT::LaunchObject& accessor) override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The const reference to the accessor to the Source field.
    */
  const uci::type::LaunchObservationMDT::Source& getSource() const override;

  /** Returns the accessor to the Source field contained in this message fragment
    *
    * @return The reference to the accessor to the Source field.
    */
  uci::type::LaunchObservationMDT::Source& getSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& setSource(const uci::type::LaunchObservationMDT::Source& accessor) override;

  /** Returns the accessor to the RelatedLaunchObservationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the RelatedLaunchObservationID field.
    */
  const uci::type::LaunchObservationMDT::RelatedLaunchObservationID& getRelatedLaunchObservationID() const override;

  /** Returns the accessor to the RelatedLaunchObservationID field contained in this message fragment
    *
    * @return The reference to the accessor to the RelatedLaunchObservationID field.
    */
  uci::type::LaunchObservationMDT::RelatedLaunchObservationID& getRelatedLaunchObservationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::LaunchObservationMDT& setRelatedLaunchObservationID(const uci::type::LaunchObservationMDT::RelatedLaunchObservationID& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<LaunchObservationMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::LaunchObservationMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::LaunchObservationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<LaunchObservationID_Type> launchObservationID_Accessor;
  boost::optional<DateTimeTypeValue> initialCreateTime_Accessor;
  boost::optional<DateTimeTypeValue> lastUpdateTime_Accessor;
  std::unique_ptr<LaunchStaticDetailsType> staticLaunchCharacteristics_Accessor;
  std::unique_ptr<LaunchObject> launchObject_Accessor;
  std::unique_ptr<Source> source_Accessor;
  std::unique_ptr<RelatedLaunchObservationID> relatedLaunchObservationID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_LAUNCHOBSERVATIONMDT_H
