/** @file CapabilityTaxonomyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_CAPABILITYTAXONOMYTYPE_H
#define ASB_UCI_TYPE_CAPABILITYTAXONOMYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/AO_CapabilityEnum.h"
#include "../../../include/asb_uci/type/ActionTypeEnum.h"
#include "../../../include/asb_uci/type/AirSampleCapabilityEnum.h"
#include "../../../include/asb_uci/type/CS_CapabilityEnum.h"
#include "../../../include/asb_uci/type/CapabilityInitiationEnum.h"
#include "../../../include/asb_uci/type/CommCapabilityEnum.h"
#include "../../../include/asb_uci/type/EffectTypeEnum.h"
#include "../../../include/asb_uci/type/FlightCapabilityEnum.h"
#include "../../../include/asb_uci/type/OrbitChangeCapabilityEnum.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "../../../include/asb_uci/type/PO_CapabilityEnum.h"
#include "../../../include/asb_uci/type/RefuelCapabilityEnum.h"
#include "../../../include/asb_uci/type/ResponseTypeEnum.h"
#include "../../../include/asb_uci/type/SystemDeploymentEnum.h"
#include "../../../include/asb_uci/type/TacticalOrderCapabilityEnum.h"
#include "../../../include/asb_uci/type/WeatherRadarCapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityTaxonomyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AMTI_SpecificDataType;
class COMINT_SpecificDataType;
class CargoDeliverySpecificDataType;
class ESM_SpecificDataType;
class OrbitalSurveillanceSpecificDataType;
class SAR_SpecificDataType;
class SMTI_SpecificDataType;
class StoreType;

/** See annotations in child elements and messages/elements that use this type for details. */
class CapabilityTaxonomyType : public virtual uci::type::CapabilityTaxonomyType {
public:
  /** Indicates an Action Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 84]
    */
  using Action = asb_uci::base::BoundedList<uci::type::ActionTypeEnum, uci::type::accessorType::actionTypeEnum, asb_uci::type::ActionTypeEnum>;

  /** Indicates an AirSample Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 2]
    */
  using AirSample = asb_uci::base::BoundedList<uci::type::AirSampleCapabilityEnum, uci::type::accessorType::airSampleCapabilityEnum, asb_uci::type::AirSampleCapabilityEnum>;

  /** Indicates an AMTI Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using AMTI = asb_uci::base::BoundedList<uci::type::AMTI_SpecificDataType, uci::type::accessorType::aMTI_SpecificDataType, asb_uci::type::AMTI_SpecificDataType>;

  /** Indicates an AO Capability. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 5]
    */
  using AO = asb_uci::base::BoundedList<uci::type::AO_CapabilityEnum, uci::type::accessorType::aO_CapabilityEnum, asb_uci::type::AO_CapabilityEnum>;

  /** Indicates a CargoDelivery Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using CargoDelivery = asb_uci::base::BoundedList<uci::type::CargoDeliverySpecificDataType, uci::type::accessorType::cargoDeliverySpecificDataType, asb_uci::type::CargoDeliverySpecificDataType>;

  /** Indicates a COMINT Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using COMINT = asb_uci::base::BoundedList<uci::type::COMINT_SpecificDataType, uci::type::accessorType::cOMINT_SpecificDataType, asb_uci::type::COMINT_SpecificDataType>;

  /** Indicates a CommRelay Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 53]
    */
  using CommRelay = asb_uci::base::BoundedList<uci::type::CommCapabilityEnum, uci::type::accessorType::commCapabilityEnum, asb_uci::type::CommCapabilityEnum>;

  /** Indicates an EA Capability. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 2]
    */
  using EA = asb_uci::base::BoundedList<uci::type::CapabilityInitiationEnum, uci::type::accessorType::capabilityInitiationEnum, asb_uci::type::CapabilityInitiationEnum>;

  /** Indicates an Effect Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 47]
    */
  using Effect = asb_uci::base::BoundedList<uci::type::EffectTypeEnum, uci::type::accessorType::effectTypeEnum, asb_uci::type::EffectTypeEnum>;

  /** Indicates an ESM Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ESM = asb_uci::base::BoundedList<uci::type::ESM_SpecificDataType, uci::type::accessorType::eSM_SpecificDataType, asb_uci::type::ESM_SpecificDataType>;

  /** Indicates a Flight Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 2]
    */
  using Flight = asb_uci::base::BoundedList<uci::type::FlightCapabilityEnum, uci::type::accessorType::flightCapabilityEnum, asb_uci::type::FlightCapabilityEnum>;

  /** Indicates an OrbitChange Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 9]
    */
  using OrbitChange = asb_uci::base::BoundedList<uci::type::OrbitChangeCapabilityEnum, uci::type::accessorType::orbitChangeCapabilityEnum, asb_uci::type::OrbitChangeCapabilityEnum>;

  /** Indicates an OrbitalSurveillance Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using OrbitalSurveillance = asb_uci::base::BoundedList<uci::type::OrbitalSurveillanceSpecificDataType, uci::type::accessorType::orbitalSurveillanceSpecificDataType, asb_uci::type::OrbitalSurveillanceSpecificDataType>;

  /** Indicates an OrbitalSurveillanceSensor Capability. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 2]
    */
  using OrbitalSurveillanceSensor = asb_uci::base::BoundedList<uci::type::OrbitalSurveillanceSensorCapabilityEnum, uci::type::accessorType::orbitalSurveillanceSensorCapabilityEnum, asb_uci::type::OrbitalSurveillanceSensorCapabilityEnum>;

  /** Indicates a PO Capability. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 19]
    */
  using PO = asb_uci::base::BoundedList<uci::type::PO_CapabilityEnum, uci::type::accessorType::pO_CapabilityEnum, asb_uci::type::PO_CapabilityEnum>;

  /** Indicates a Refuel Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 3]
    */
  using Refuel = asb_uci::base::BoundedList<uci::type::RefuelCapabilityEnum, uci::type::accessorType::refuelCapabilityEnum, asb_uci::type::RefuelCapabilityEnum>;

  /** Indicates a Response Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 4]
    */
  using Response = asb_uci::base::BoundedList<uci::type::ResponseTypeEnum, uci::type::accessorType::responseTypeEnum, asb_uci::type::ResponseTypeEnum>;

  /** Indicates a SAR Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using SAR = asb_uci::base::BoundedList<uci::type::SAR_SpecificDataType, uci::type::accessorType::sAR_SpecificDataType, asb_uci::type::SAR_SpecificDataType>;

  /** Indicates a SMTI Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using SMTI = asb_uci::base::BoundedList<uci::type::SMTI_SpecificDataType, uci::type::accessorType::sMTI_SpecificDataType, asb_uci::type::SMTI_SpecificDataType>;

  /** Indicates a Strike Capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using Strike = asb_uci::base::BoundedList<uci::type::StoreType, uci::type::accessorType::storeType, asb_uci::type::StoreType>;

  /** Indicates a SystemDeployment Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 6]
    */
  using SystemDeployment = asb_uci::base::BoundedList<uci::type::SystemDeploymentEnum, uci::type::accessorType::systemDeploymentEnum, asb_uci::type::SystemDeploymentEnum>;

  /** Indicates a TacticalOrder Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 11]
    */
  using TacticalOrder = asb_uci::base::BoundedList<uci::type::TacticalOrderCapabilityEnum, uci::type::accessorType::tacticalOrderCapabilityEnum, asb_uci::type::TacticalOrderCapabilityEnum>;

  /** The constructor */
  CapabilityTaxonomyType();

  /** The copy constructor
    *
    * @param rhs The CapabilityTaxonomyType to copy from
    */
  CapabilityTaxonomyType(const CapabilityTaxonomyType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CapabilityTaxonomyType to move from
    */
  CapabilityTaxonomyType(CapabilityTaxonomyType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CapabilityTaxonomyType to copy from
    * @return The CapabilityTaxonomyType that was assigned
    */
  CapabilityTaxonomyType& operator=(const CapabilityTaxonomyType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CapabilityTaxonomyType to move from
    * @return The CapabilityTaxonomyType that was assigned
    */
  CapabilityTaxonomyType& operator=(CapabilityTaxonomyType&& rhs) = delete;

  /** The destructor */
  virtual ~CapabilityTaxonomyType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CapabilityTaxonomyType whose contents are to be used to set this
    *      uci::type::CapabilityTaxonomyType's contents.
    */
  void copy(const uci::type::CapabilityTaxonomyType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CapabilityTaxonomyType whose contents are to be used to set this
    *      uci::type::CapabilityTaxonomyType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CapabilityTaxonomyType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the Action field contained in this message fragment
    *
    * @return The const reference to the accessor to the Action field.
    */
  const uci::type::CapabilityTaxonomyType::Action& getAction() const override;

  /** Returns the accessor to the Action field contained in this message fragment
    *
    * @return The reference to the accessor to the Action field.
    */
  uci::type::CapabilityTaxonomyType::Action& getAction() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setAction(const uci::type::CapabilityTaxonomyType::Action& accessor) override;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The const reference to the accessor to the AirSample field.
    */
  const uci::type::CapabilityTaxonomyType::AirSample& getAirSample() const override;

  /** Returns the accessor to the AirSample field contained in this message fragment
    *
    * @return The reference to the accessor to the AirSample field.
    */
  uci::type::CapabilityTaxonomyType::AirSample& getAirSample() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setAirSample(const uci::type::CapabilityTaxonomyType::AirSample& accessor) override;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The const reference to the accessor to the AMTI field.
    */
  const uci::type::CapabilityTaxonomyType::AMTI& getAMTI() const override;

  /** Returns the accessor to the AMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the AMTI field.
    */
  uci::type::CapabilityTaxonomyType::AMTI& getAMTI() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setAMTI(const uci::type::CapabilityTaxonomyType::AMTI& accessor) override;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The const reference to the accessor to the AO field.
    */
  const uci::type::CapabilityTaxonomyType::AO& getAO() const override;

  /** Returns the accessor to the AO field contained in this message fragment
    *
    * @return The reference to the accessor to the AO field.
    */
  uci::type::CapabilityTaxonomyType::AO& getAO() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setAO(const uci::type::CapabilityTaxonomyType::AO& accessor) override;

  /** Returns the accessor to the CargoDelivery field contained in this message fragment
    *
    * @return The const reference to the accessor to the CargoDelivery field.
    */
  const uci::type::CapabilityTaxonomyType::CargoDelivery& getCargoDelivery() const override;

  /** Returns the accessor to the CargoDelivery field contained in this message fragment
    *
    * @return The reference to the accessor to the CargoDelivery field.
    */
  uci::type::CapabilityTaxonomyType::CargoDelivery& getCargoDelivery() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setCargoDelivery(const uci::type::CapabilityTaxonomyType::CargoDelivery& accessor) override;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The const reference to the accessor to the COMINT field.
    */
  const uci::type::CapabilityTaxonomyType::COMINT& getCOMINT() const override;

  /** Returns the accessor to the COMINT field contained in this message fragment
    *
    * @return The reference to the accessor to the COMINT field.
    */
  uci::type::CapabilityTaxonomyType::COMINT& getCOMINT() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setCOMINT(const uci::type::CapabilityTaxonomyType::COMINT& accessor) override;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The const reference to the accessor to the CommRelay field.
    */
  const uci::type::CapabilityTaxonomyType::CommRelay& getCommRelay() const override;

  /** Returns the accessor to the CommRelay field contained in this message fragment
    *
    * @return The reference to the accessor to the CommRelay field.
    */
  uci::type::CapabilityTaxonomyType::CommRelay& getCommRelay() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setCommRelay(const uci::type::CapabilityTaxonomyType::CommRelay& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_CapabilityEnum& getCounterSpace_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CS_CapabilityEnum& getCounterSpace() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_CapabilityEnum& getCounterSpace() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setCounterSpace(const uci::type::CS_CapabilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setCounterSpace(uci::type::CS_CapabilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field CounterSpaceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCounterSpace() const noexcept override;

  /** Enables the optional field such that getCounterSpace will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CS_CapabilityEnum& enableCounterSpace(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& clearCounterSpace() noexcept override;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The const reference to the accessor to the EA field.
    */
  const uci::type::CapabilityTaxonomyType::EA& getEA() const override;

  /** Returns the accessor to the EA field contained in this message fragment
    *
    * @return The reference to the accessor to the EA field.
    */
  uci::type::CapabilityTaxonomyType::EA& getEA() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setEA(const uci::type::CapabilityTaxonomyType::EA& accessor) override;

  /** Returns the accessor to the Effect field contained in this message fragment
    *
    * @return The const reference to the accessor to the Effect field.
    */
  const uci::type::CapabilityTaxonomyType::Effect& getEffect() const override;

  /** Returns the accessor to the Effect field contained in this message fragment
    *
    * @return The reference to the accessor to the Effect field.
    */
  uci::type::CapabilityTaxonomyType::Effect& getEffect() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setEffect(const uci::type::CapabilityTaxonomyType::Effect& accessor) override;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The const reference to the accessor to the ESM field.
    */
  const uci::type::CapabilityTaxonomyType::ESM& getESM() const override;

  /** Returns the accessor to the ESM field contained in this message fragment
    *
    * @return The reference to the accessor to the ESM field.
    */
  uci::type::CapabilityTaxonomyType::ESM& getESM() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setESM(const uci::type::CapabilityTaxonomyType::ESM& accessor) override;

  /** Returns the accessor to the Flight field contained in this message fragment
    *
    * @return The const reference to the accessor to the Flight field.
    */
  const uci::type::CapabilityTaxonomyType::Flight& getFlight() const override;

  /** Returns the accessor to the Flight field contained in this message fragment
    *
    * @return The reference to the accessor to the Flight field.
    */
  uci::type::CapabilityTaxonomyType::Flight& getFlight() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setFlight(const uci::type::CapabilityTaxonomyType::Flight& accessor) override;

  /** Returns the accessor to the OrbitChange field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitChange field.
    */
  const uci::type::CapabilityTaxonomyType::OrbitChange& getOrbitChange() const override;

  /** Returns the accessor to the OrbitChange field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitChange field.
    */
  uci::type::CapabilityTaxonomyType::OrbitChange& getOrbitChange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setOrbitChange(const uci::type::CapabilityTaxonomyType::OrbitChange& accessor) override;

  /** Returns the accessor to the OrbitalSurveillance field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitalSurveillance field.
    */
  const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& getOrbitalSurveillance() const override;

  /** Returns the accessor to the OrbitalSurveillance field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitalSurveillance field.
    */
  uci::type::CapabilityTaxonomyType::OrbitalSurveillance& getOrbitalSurveillance() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setOrbitalSurveillance(const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& accessor) override;

  /** Returns the accessor to the OrbitalSurveillanceSensor field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrbitalSurveillanceSensor field.
    */
  const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& getOrbitalSurveillanceSensor() const override;

  /** Returns the accessor to the OrbitalSurveillanceSensor field contained in this message fragment
    *
    * @return The reference to the accessor to the OrbitalSurveillanceSensor field.
    */
  uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& getOrbitalSurveillanceSensor() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setOrbitalSurveillanceSensor(const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& accessor) override;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The const reference to the accessor to the PO field.
    */
  const uci::type::CapabilityTaxonomyType::PO& getPO() const override;

  /** Returns the accessor to the PO field contained in this message fragment
    *
    * @return The reference to the accessor to the PO field.
    */
  uci::type::CapabilityTaxonomyType::PO& getPO() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setPO(const uci::type::CapabilityTaxonomyType::PO& accessor) override;

  /** Returns the accessor to the Refuel field contained in this message fragment
    *
    * @return The const reference to the accessor to the Refuel field.
    */
  const uci::type::CapabilityTaxonomyType::Refuel& getRefuel() const override;

  /** Returns the accessor to the Refuel field contained in this message fragment
    *
    * @return The reference to the accessor to the Refuel field.
    */
  uci::type::CapabilityTaxonomyType::Refuel& getRefuel() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setRefuel(const uci::type::CapabilityTaxonomyType::Refuel& accessor) override;

  /** Returns the accessor to the Response field contained in this message fragment
    *
    * @return The const reference to the accessor to the Response field.
    */
  const uci::type::CapabilityTaxonomyType::Response& getResponse() const override;

  /** Returns the accessor to the Response field contained in this message fragment
    *
    * @return The reference to the accessor to the Response field.
    */
  uci::type::CapabilityTaxonomyType::Response& getResponse() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setResponse(const uci::type::CapabilityTaxonomyType::Response& accessor) override;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The const reference to the accessor to the SAR field.
    */
  const uci::type::CapabilityTaxonomyType::SAR& getSAR() const override;

  /** Returns the accessor to the SAR field contained in this message fragment
    *
    * @return The reference to the accessor to the SAR field.
    */
  uci::type::CapabilityTaxonomyType::SAR& getSAR() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setSAR(const uci::type::CapabilityTaxonomyType::SAR& accessor) override;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The const reference to the accessor to the SMTI field.
    */
  const uci::type::CapabilityTaxonomyType::SMTI& getSMTI() const override;

  /** Returns the accessor to the SMTI field contained in this message fragment
    *
    * @return The reference to the accessor to the SMTI field.
    */
  uci::type::CapabilityTaxonomyType::SMTI& getSMTI() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setSMTI(const uci::type::CapabilityTaxonomyType::SMTI& accessor) override;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The const reference to the accessor to the Strike field.
    */
  const uci::type::CapabilityTaxonomyType::Strike& getStrike() const override;

  /** Returns the accessor to the Strike field contained in this message fragment
    *
    * @return The reference to the accessor to the Strike field.
    */
  uci::type::CapabilityTaxonomyType::Strike& getStrike() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setStrike(const uci::type::CapabilityTaxonomyType::Strike& accessor) override;

  /** Returns the accessor to the SystemDeployment field contained in this message fragment
    *
    * @return The const reference to the accessor to the SystemDeployment field.
    */
  const uci::type::CapabilityTaxonomyType::SystemDeployment& getSystemDeployment() const override;

  /** Returns the accessor to the SystemDeployment field contained in this message fragment
    *
    * @return The reference to the accessor to the SystemDeployment field.
    */
  uci::type::CapabilityTaxonomyType::SystemDeployment& getSystemDeployment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setSystemDeployment(const uci::type::CapabilityTaxonomyType::SystemDeployment& accessor) override;

  /** Returns the accessor to the TacticalOrder field contained in this message fragment
    *
    * @return The const reference to the accessor to the TacticalOrder field.
    */
  const uci::type::CapabilityTaxonomyType::TacticalOrder& getTacticalOrder() const override;

  /** Returns the accessor to the TacticalOrder field contained in this message fragment
    *
    * @return The reference to the accessor to the TacticalOrder field.
    */
  uci::type::CapabilityTaxonomyType::TacticalOrder& getTacticalOrder() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setTacticalOrder(const uci::type::CapabilityTaxonomyType::TacticalOrder& accessor) override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherRadarCapabilityEnum& getWeatherRadar_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::WeatherRadarCapabilityEnum& getWeatherRadar() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherRadarCapabilityEnum& getWeatherRadar() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setWeatherRadar(const uci::type::WeatherRadarCapabilityEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& setWeatherRadar(uci::type::WeatherRadarCapabilityEnum::EnumerationItem value) override;

  /** Returns whether this optional field WeatherRadaris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasWeatherRadar() const noexcept override;

  /** Enables the optional field such that getWeatherRadar will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::WeatherRadarCapabilityEnum& enableWeatherRadar(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CapabilityTaxonomyType& clearWeatherRadar() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CapabilityTaxonomyType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityTaxonomyType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CapabilityTaxonomyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<Action> action_Accessor;
  std::unique_ptr<AirSample> airSample_Accessor;
  std::unique_ptr<AMTI> aMTI_Accessor;
  std::unique_ptr<AO> aO_Accessor;
  std::unique_ptr<CargoDelivery> cargoDelivery_Accessor;
  std::unique_ptr<COMINT> cOMINT_Accessor;
  std::unique_ptr<CommRelay> commRelay_Accessor;
  std::unique_ptr<CS_CapabilityEnum> counterSpace_Accessor;
  std::unique_ptr<EA> eA_Accessor;
  std::unique_ptr<Effect> effect_Accessor;
  std::unique_ptr<ESM> eSM_Accessor;
  std::unique_ptr<Flight> flight_Accessor;
  std::unique_ptr<OrbitChange> orbitChange_Accessor;
  std::unique_ptr<OrbitalSurveillance> orbitalSurveillance_Accessor;
  std::unique_ptr<OrbitalSurveillanceSensor> orbitalSurveillanceSensor_Accessor;
  std::unique_ptr<PO> pO_Accessor;
  std::unique_ptr<Refuel> refuel_Accessor;
  std::unique_ptr<Response> response_Accessor;
  std::unique_ptr<SAR> sAR_Accessor;
  std::unique_ptr<SMTI> sMTI_Accessor;
  std::unique_ptr<Strike> strike_Accessor;
  std::unique_ptr<SystemDeployment> systemDeployment_Accessor;
  std::unique_ptr<TacticalOrder> tacticalOrder_Accessor;
  std::unique_ptr<WeatherRadarCapabilityEnum> weatherRadar_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_CAPABILITYTAXONOMYTYPE_H
