/** @file MissionDefinitionMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MISSIONDEFINITIONMDT_H
#define ASB_UCI_TYPE_MISSIONDEFINITIONMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/MissionCategoryType.h"
#include "../../../include/asb_uci/type/MissionStateEnum.h"
#include "../../../include/asb_uci/type/UserIdentifierType.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionDefinitionMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ArchiveRequestType;
class DateTimeRangeType;
class MissionDefinitionID_Type;
class MissionID_Type;
class OrderTraceabilityType;
class SystemID_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class MissionDefinitionMDT : public virtual uci::type::MissionDefinitionMDT, public virtual DataRecordBaseType {
public:
  /** Identifies one or more parent missions. This defines a mission hierarchy which allows one mission type to be
    * contained within other mission type or types. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ParentMissionID = asb_uci::base::BoundedList<uci::type::MissionID_Type, uci::type::accessorType::missionID_Type, asb_uci::type::MissionID_Type>;

  /** Indicates an operational tasking order that is the source of the MissionDefinition. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using OrderTraceability = asb_uci::base::BoundedList<uci::type::OrderTraceabilityType, uci::type::accessorType::orderTraceabilityType, asb_uci::type::OrderTraceabilityType>;

  /** An operator specified purpose or category of the mission. This gives the ability for displays or services to filter
    * missions by their type. The absence of this element indicates that the mission has no special type. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  using MissionType = asb_uci::base::BoundedList<uci::type::MissionCategoryType, uci::type::accessorType::missionCategoryType, asb_uci::type::MissionCategoryType>;

  /** Indicates a system authorized to access mission definition. Systems who are listed are associated with planning or
    * execution of the mission. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using AuthorizedSystemID = asb_uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type, asb_uci::type::SystemID_Type>;

  /** Indicates a user authorized to access mission definition. Users who are listed are associated with planning or
    * execution of the mission. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  using AuthorizedUserIdentifier = asb_uci::base::BoundedList<uci::type::UserIdentifierType, uci::type::accessorType::userIdentifierType, asb_uci::type::UserIdentifierType>;

  /** The constructor */
  MissionDefinitionMDT();

  /** The copy constructor
    *
    * @param rhs The MissionDefinitionMDT to copy from
    */
  MissionDefinitionMDT(const MissionDefinitionMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MissionDefinitionMDT to move from
    */
  MissionDefinitionMDT(MissionDefinitionMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The MissionDefinitionMDT to copy from
    * @return The MissionDefinitionMDT that was assigned
    */
  MissionDefinitionMDT& operator=(const MissionDefinitionMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MissionDefinitionMDT to move from
    * @return The MissionDefinitionMDT that was assigned
    */
  MissionDefinitionMDT& operator=(MissionDefinitionMDT&& rhs) = delete;

  /** The destructor */
  ~MissionDefinitionMDT() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MissionDefinitionMDT whose contents are to be used to set this
    *      uci::type::MissionDefinitionMDT's contents.
    */
  void copy(const uci::type::MissionDefinitionMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MissionDefinitionMDT whose contents are to be used to set this
    *      uci::type::MissionDefinitionMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MissionDefinitionMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the MissionDefinitionID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissionDefinitionID field.
    */
  const uci::type::MissionDefinitionID_Type& getMissionDefinitionID() const override;

  /** Returns the accessor to the MissionDefinitionID field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionDefinitionID field.
    */
  uci::type::MissionDefinitionID_Type& getMissionDefinitionID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setMissionDefinitionID(const uci::type::MissionDefinitionID_Type& accessor) override;

  /** Returns the accessor to the MissionID field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissionID field.
    */
  const uci::type::MissionID_Type& getMissionID() const override;

  /** Returns the accessor to the MissionID field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionID field.
    */
  uci::type::MissionID_Type& getMissionID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setMissionID(const uci::type::MissionID_Type& accessor) override;

  /** Returns the accessor to the ParentMissionID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ParentMissionID field.
    */
  const uci::type::MissionDefinitionMDT::ParentMissionID& getParentMissionID() const override;

  /** Returns the accessor to the ParentMissionID field contained in this message fragment
    *
    * @return The reference to the accessor to the ParentMissionID field.
    */
  uci::type::MissionDefinitionMDT::ParentMissionID& getParentMissionID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setParentMissionID(const uci::type::MissionDefinitionMDT::ParentMissionID& accessor) override;

  /** Returns the accessor to the OrderTraceability field contained in this message fragment
    *
    * @return The const reference to the accessor to the OrderTraceability field.
    */
  const uci::type::MissionDefinitionMDT::OrderTraceability& getOrderTraceability() const override;

  /** Returns the accessor to the OrderTraceability field contained in this message fragment
    *
    * @return The reference to the accessor to the OrderTraceability field.
    */
  uci::type::MissionDefinitionMDT::OrderTraceability& getOrderTraceability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setOrderTraceability(const uci::type::MissionDefinitionMDT::OrderTraceability& accessor) override;

  /** Returns the accessor to the MissionType field contained in this message fragment
    *
    * @return The const reference to the accessor to the MissionType field.
    */
  const uci::type::MissionDefinitionMDT::MissionType& getMissionType() const override;

  /** Returns the accessor to the MissionType field contained in this message fragment
    *
    * @return The reference to the accessor to the MissionType field.
    */
  uci::type::MissionDefinitionMDT::MissionType& getMissionType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setMissionType(const uci::type::MissionDefinitionMDT::MissionType& accessor) override;

  /** Returns the contents of the message's MissionState field
    *
    * @return The contents of the MissionState field
    */
  const uci::type::MissionStateEnum& getMissionState() const override;

  /** Returns the contents of the message's MissionState field
    *
    * @return The contents of the MissionState field
    */
  uci::type::MissionStateEnum& getMissionState() override;

  /** Sets the contents of the message's MissionState field
    *
    * @param accessor The accessor to use to set the MissionState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setMissionState(const uci::type::MissionStateEnum& accessor) override;

  /** Sets the contents of the message's MissionState field
    *
    * @param value The new value to set the MissionState field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setMissionState(uci::type::MissionStateEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DateTimeRangeType& getTimeSpan_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DateTimeRangeType& getTimeSpan() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DateTimeRangeType& getTimeSpan() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setTimeSpan(const uci::type::DateTimeRangeType& accessor) override;

  /** Returns whether this optional field TimeSpanis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimeSpan() const noexcept override;

  /** Enables the optional field such that getTimeSpan will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DateTimeRangeType& enableTimeSpan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& clearTimeSpan() noexcept override;

  /** Returns the contents of the message's Expired field
    *
    * @return The contents of the Expired field
    */
  xs::Boolean getExpired() const override;

  /** Sets the contents of the message's Expired field
    *
    * @param value The new value to set the Expired field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setExpired(xs::Boolean value) override;

  /** Returns the accessor to the AuthorizedSystemID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AuthorizedSystemID field.
    */
  const uci::type::MissionDefinitionMDT::AuthorizedSystemID& getAuthorizedSystemID() const override;

  /** Returns the accessor to the AuthorizedSystemID field contained in this message fragment
    *
    * @return The reference to the accessor to the AuthorizedSystemID field.
    */
  uci::type::MissionDefinitionMDT::AuthorizedSystemID& getAuthorizedSystemID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setAuthorizedSystemID(const uci::type::MissionDefinitionMDT::AuthorizedSystemID& accessor) override;

  /** Returns the accessor to the AuthorizedUserIdentifier field contained in this message fragment
    *
    * @return The const reference to the accessor to the AuthorizedUserIdentifier field.
    */
  const uci::type::MissionDefinitionMDT::AuthorizedUserIdentifier& getAuthorizedUserIdentifier() const override;

  /** Returns the accessor to the AuthorizedUserIdentifier field contained in this message fragment
    *
    * @return The reference to the accessor to the AuthorizedUserIdentifier field.
    */
  uci::type::MissionDefinitionMDT::AuthorizedUserIdentifier& getAuthorizedUserIdentifier() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setAuthorizedUserIdentifier(const uci::type::MissionDefinitionMDT::AuthorizedUserIdentifier& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArchiveRequestType& getArchiveConfiguration_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ArchiveRequestType& getArchiveConfiguration() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArchiveRequestType& getArchiveConfiguration() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& setArchiveConfiguration(const uci::type::ArchiveRequestType& accessor) override;

  /** Returns whether this optional field ArchiveConfigurationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasArchiveConfiguration() const noexcept override;

  /** Enables the optional field such that getArchiveConfiguration will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ArchiveRequestType& enableArchiveConfiguration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::MissionDefinitionMDT& clearArchiveConfiguration() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MissionDefinitionMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionDefinitionMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MissionDefinitionMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<MissionDefinitionID_Type> missionDefinitionID_Accessor;
  std::unique_ptr<MissionID_Type> missionID_Accessor;
  std::unique_ptr<ParentMissionID> parentMissionID_Accessor;
  std::unique_ptr<OrderTraceability> orderTraceability_Accessor;
  std::unique_ptr<MissionType> missionType_Accessor;
  std::unique_ptr<MissionStateEnum> missionState_Accessor;
  std::unique_ptr<DateTimeRangeType> timeSpan_Accessor;
  asb_xs::Boolean expired_Accessor{false};
  std::unique_ptr<AuthorizedSystemID> authorizedSystemID_Accessor;
  std::unique_ptr<AuthorizedUserIdentifier> authorizedUserIdentifier_Accessor;
  std::unique_ptr<ArchiveRequestType> archiveConfiguration_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MISSIONDEFINITIONMDT_H
