/** @file DamageEstimateMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_DAMAGEESTIMATEMDT_H
#define ASB_UCI_TYPE_DAMAGEESTIMATEMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/DamageCategoryEnum.h"
#include "asb_uci/type/DateTimeType.h"
#include "asb_uci/type/PercentType.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "uci/type/DamageEstimateMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class DMPI_ViolationType;
class DamageEstimateDetailsType;
class DamageEstimateID_Type;
class DamageInformationWeatherSourceType;
class DamageSummaryType;
class Point3D_Type;
class TaskID_Type;
class ZoneType;

/** See annotations in child elements and messages/elements that use this type for details. */
class DamageEstimateMDT : public virtual uci::type::DamageEstimateMDT {
public:
  /** Indicates any air corridors violated from the release point to the indicated DMPI, or any NoFire OpVolume/OpZone
    * collateral damage by the indicated DMPI. If EstimateType=Collateral, the desired result is for this list to be empty.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Violation = asb_uci::base::BoundedList<uci::type::DMPI_ViolationType, uci::type::accessorType::dMPI_ViolationType, asb_uci::type::DMPI_ViolationType>;

  /** The constructor */
  DamageEstimateMDT();

  /** The copy constructor
    *
    * @param rhs The DamageEstimateMDT to copy from
    */
  DamageEstimateMDT(const DamageEstimateMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The DamageEstimateMDT to move from
    */
  DamageEstimateMDT(DamageEstimateMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The DamageEstimateMDT to copy from
    * @return The DamageEstimateMDT that was assigned
    */
  DamageEstimateMDT& operator=(const DamageEstimateMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The DamageEstimateMDT to move from
    * @return The DamageEstimateMDT that was assigned
    */
  DamageEstimateMDT& operator=(DamageEstimateMDT&& rhs) = delete;

  /** The destructor */
  virtual ~DamageEstimateMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::DamageEstimateMDT whose contents are to be used to set this
    *      uci::type::DamageEstimateMDT's contents.
    */
  void copy(const uci::type::DamageEstimateMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::DamageEstimateMDT whose contents are to be used to set this
    *      uci::type::DamageEstimateMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::DamageEstimateMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the DamageEstimateID field contained in this message fragment
    *
    * @return The const reference to the accessor to the DamageEstimateID field.
    */
  const uci::type::DamageEstimateID_Type& getDamageEstimateID() const override;

  /** Returns the accessor to the DamageEstimateID field contained in this message fragment
    *
    * @return The reference to the accessor to the DamageEstimateID field.
    */
  uci::type::DamageEstimateID_Type& getDamageEstimateID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setDamageEstimateID(const uci::type::DamageEstimateID_Type& accessor) override;

  /** Returns the contents of the message's EstimateType field
    *
    * @return The contents of the EstimateType field
    */
  const uci::type::DamageCategoryEnum& getEstimateType() const override;

  /** Returns the contents of the message's EstimateType field
    *
    * @return The contents of the EstimateType field
    */
  uci::type::DamageCategoryEnum& getEstimateType() override;

  /** Sets the contents of the message's EstimateType field
    *
    * @param accessor The accessor to use to set the EstimateType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setEstimateType(const uci::type::DamageCategoryEnum& accessor) override;

  /** Sets the contents of the message's EstimateType field
    *
    * @param value The new value to set the EstimateType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setEstimateType(uci::type::DamageCategoryEnum::EnumerationItem value) override;

  /** Returns the accessor to the TaskID field contained in this message fragment
    *
    * @return The const reference to the accessor to the TaskID field.
    */
  const uci::type::TaskID_Type& getTaskID() const override;

  /** Returns the accessor to the TaskID field contained in this message fragment
    *
    * @return The reference to the accessor to the TaskID field.
    */
  uci::type::TaskID_Type& getTaskID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setTaskID(const uci::type::TaskID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getReleasePoint_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point3D_Type& getReleasePoint() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& getReleasePoint() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setReleasePoint(const uci::type::Point3D_Type& accessor) override;

  /** Returns whether this optional field ReleasePointis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasReleasePoint() const noexcept override;

  /** Enables the optional field such that getReleasePoint will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point3D_Type& enableReleasePoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& clearReleasePoint() noexcept override;

  /** Returns the contents of the message's CompletionTime field
    *
    * @return The contents of the CompletionTime field
    */
  uci::type::DateTimeTypeValue getCompletionTime() const override;

  /** Sets the contents of the message's CompletionTime field
    *
    * @param value The new value to set the CompletionTime field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setCompletionTime(uci::type::DateTimeTypeValue value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& getEstimateZone_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ZoneType& getEstimateZone() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& getEstimateZone() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setEstimateZone(const uci::type::ZoneType& accessor) override;

  /** Returns whether this optional field EstimateZoneis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimateZone() const noexcept override;

  /** Enables the optional field such that getEstimateZone will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ZoneType& enableEstimateZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& clearEstimateZone() noexcept override;

  /** Returns the contents of the message's ReportingThreshold field
    *
    * @return The contents of the ReportingThreshold field
    */
  uci::type::PercentTypeValue getReportingThreshold() const override;

  /** Sets the contents of the message's ReportingThreshold field
    *
    * @param value The new value to set the ReportingThreshold field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setReportingThreshold(uci::type::PercentTypeValue value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageEstimateDetailsType& getDetails_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DamageEstimateDetailsType& getDetails() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageEstimateDetailsType& getDetails() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setDetails(const uci::type::DamageEstimateDetailsType& accessor) override;

  /** Returns whether this optional field Detailsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDetails() const noexcept override;

  /** Enables the optional field such that getDetails will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageEstimateDetailsType& enableDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& clearDetails() noexcept override;

  /** Returns the accessor to the Violation field contained in this message fragment
    *
    * @return The const reference to the accessor to the Violation field.
    */
  const uci::type::DamageEstimateMDT::Violation& getViolation() const override;

  /** Returns the accessor to the Violation field contained in this message fragment
    *
    * @return The reference to the accessor to the Violation field.
    */
  uci::type::DamageEstimateMDT::Violation& getViolation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setViolation(const uci::type::DamageEstimateMDT::Violation& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageSummaryType& getSummary_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DamageSummaryType& getSummary() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageSummaryType& getSummary() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setSummary(const uci::type::DamageSummaryType& accessor) override;

  /** Returns whether this optional field Summaryis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSummary() const noexcept override;

  /** Enables the optional field such that getSummary will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageSummaryType& enableSummary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& clearSummary() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getEstimateNarrative_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString1024Type& getEstimateNarrative() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getEstimateNarrative() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setEstimateNarrative(const uci::type::VisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setEstimateNarrative(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setEstimateNarrative(const char* value) override;

  /** Returns whether this optional field estimateNarrative_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEstimateNarrative() const noexcept override;

  /** Enables the optional field such that getEstimateNarrative will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& enableEstimateNarrative(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& clearEstimateNarrative() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageInformationWeatherSourceType& getInformationSource_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::DamageInformationWeatherSourceType& getInformationSource() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageInformationWeatherSourceType& getInformationSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& setInformationSource(const uci::type::DamageInformationWeatherSourceType& accessor) override;

  /** Returns whether this optional field InformationSourceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasInformationSource() const noexcept override;

  /** Enables the optional field such that getInformationSource will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::DamageInformationWeatherSourceType& enableInformationSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::DamageEstimateMDT& clearInformationSource() noexcept override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<DamageEstimateMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageEstimateMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::DamageEstimateMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<DamageEstimateID_Type> damageEstimateID_Accessor;
  std::unique_ptr<DamageCategoryEnum> estimateType_Accessor;
  std::unique_ptr<TaskID_Type> taskID_Accessor;
  std::unique_ptr<Point3D_Type> releasePoint_Accessor;
  DateTimeTypeValue completionTime_Accessor{0};
  std::unique_ptr<ZoneType> estimateZone_Accessor;
  PercentTypeValue reportingThreshold_Accessor{0.0};
  std::unique_ptr<DamageEstimateDetailsType> details_Accessor;
  std::unique_ptr<Violation> violation_Accessor;
  std::unique_ptr<DamageSummaryType> summary_Accessor;
  std::unique_ptr<VisibleString1024Type> estimateNarrative_Accessor;
  std::unique_ptr<DamageInformationWeatherSourceType> informationSource_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_DAMAGEESTIMATEMDT_H
