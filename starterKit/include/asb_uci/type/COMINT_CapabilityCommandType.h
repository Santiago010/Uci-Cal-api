/** @file COMINT_CapabilityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMINT_CAPABILITYCOMMANDTYPE_H
#define ASB_UCI_TYPE_COMINT_CAPABILITYCOMMANDTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/COMINT_SubCapabilityEnum.h"
#include "asb_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "uci/type/COMINT_CapabilityCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class COMINT_SubcapabilityChoiceType;
class ProductOutputCommandBasicType;

/** See annotations in child elements and messages/elements that use this type for details. */
class COMINT_CapabilityCommandType : public virtual uci::type::COMINT_CapabilityCommandType, public virtual SharedRF_ApertureCapabilityCommandBaseType {
public:
  /** Indicates a specific SubCapability being invoked by the command. If omitted, all SubCapabilities of the sibling
    * CapabilityID are to be invoked. If specified, only the specified SubCapabilities specified are required in order to
    * satisfy the command. Only SubCapabilities of the Capability indicated by the sibling CapabilityID should be
    * specified. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0;
    * Maximum: 16]
    */
  using SubCapability = asb_uci::base::BoundedList<uci::type::COMINT_SubCapabilityEnum, uci::type::accessorType::cOMINT_SubCapabilityEnum, asb_uci::type::COMINT_SubCapabilityEnum>;

  /** Indicates Command details for a Subcapability of the Capability indicated by the sibling CapabilityID. One instance
    * of this element for each Subcapability category (acquisition, ID, geolocation, measurement or pulse data collection)
    * of that Capability is required. If multiple instances are given, each must be of a different category in the
    * descendant choice statement. [Occurrences: Minimum: 1; Maximum: 5]
    */
  using SubcapabilityDetails = asb_uci::base::BoundedList<uci::type::COMINT_SubcapabilityChoiceType, uci::type::accessorType::cOMINT_SubcapabilityChoiceType, asb_uci::type::COMINT_SubcapabilityChoiceType>;

  /** Indicates a required output Product of the Command. Only Products consistent with the Subsystem and supported by the
    * commanded Capability should be requested. If omitted, no output Product should be produced. See ProductTypeEnum for
    * further details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ProductOutput = asb_uci::base::BoundedList<uci::type::ProductOutputCommandBasicType, uci::type::accessorType::productOutputCommandBasicType, asb_uci::type::ProductOutputCommandBasicType>;

  /** The constructor */
  COMINT_CapabilityCommandType();

  /** The copy constructor
    *
    * @param rhs The COMINT_CapabilityCommandType to copy from
    */
  COMINT_CapabilityCommandType(const COMINT_CapabilityCommandType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The COMINT_CapabilityCommandType to move from
    */
  COMINT_CapabilityCommandType(COMINT_CapabilityCommandType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The COMINT_CapabilityCommandType to copy from
    * @return The COMINT_CapabilityCommandType that was assigned
    */
  COMINT_CapabilityCommandType& operator=(const COMINT_CapabilityCommandType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The COMINT_CapabilityCommandType to move from
    * @return The COMINT_CapabilityCommandType that was assigned
    */
  COMINT_CapabilityCommandType& operator=(COMINT_CapabilityCommandType&& rhs) = delete;

  /** The destructor */
  ~COMINT_CapabilityCommandType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::COMINT_CapabilityCommandType whose contents are to be used to set this
    *      uci::type::COMINT_CapabilityCommandType's contents.
    */
  void copy(const uci::type::COMINT_CapabilityCommandType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::COMINT_CapabilityCommandType whose contents are to be used to set this
    *      uci::type::COMINT_CapabilityCommandType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::COMINT_CapabilityCommandType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SubCapability field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubCapability field.
    */
  const uci::type::COMINT_CapabilityCommandType::SubCapability& getSubCapability() const override;

  /** Returns the accessor to the SubCapability field contained in this message fragment
    *
    * @return The reference to the accessor to the SubCapability field.
    */
  uci::type::COMINT_CapabilityCommandType::SubCapability& getSubCapability() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_CapabilityCommandType& setSubCapability(const uci::type::COMINT_CapabilityCommandType::SubCapability& accessor) override;

  /** Returns the accessor to the SubcapabilityDetails field contained in this message fragment
    *
    * @return The const reference to the accessor to the SubcapabilityDetails field.
    */
  const uci::type::COMINT_CapabilityCommandType::SubcapabilityDetails& getSubcapabilityDetails() const override;

  /** Returns the accessor to the SubcapabilityDetails field contained in this message fragment
    *
    * @return The reference to the accessor to the SubcapabilityDetails field.
    */
  uci::type::COMINT_CapabilityCommandType::SubcapabilityDetails& getSubcapabilityDetails() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_CapabilityCommandType& setSubcapabilityDetails(const uci::type::COMINT_CapabilityCommandType::SubcapabilityDetails& accessor) override;

  /** Returns the accessor to the ProductOutput field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductOutput field.
    */
  const uci::type::COMINT_CapabilityCommandType::ProductOutput& getProductOutput() const override;

  /** Returns the accessor to the ProductOutput field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductOutput field.
    */
  uci::type::COMINT_CapabilityCommandType::ProductOutput& getProductOutput() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::COMINT_CapabilityCommandType& setProductOutput(const uci::type::COMINT_CapabilityCommandType::ProductOutput& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<COMINT_CapabilityCommandType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_CapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::COMINT_CapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SubCapability> subCapability_Accessor;
  std::unique_ptr<SubcapabilityDetails> subcapabilityDetails_Accessor;
  std::unique_ptr<ProductOutput> productOutput_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMINT_CAPABILITYCOMMANDTYPE_H
