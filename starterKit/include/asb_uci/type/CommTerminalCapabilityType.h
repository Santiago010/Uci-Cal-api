/** @file CommTerminalCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_COMMTERMINALCAPABILITYTYPE_H
#define ASB_UCI_TYPE_COMMTERMINALCAPABILITYTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/CommCapabilityEnum.h"
#include "../../../include/asb_uci/type/CommDataFormatEnum.h"
#include "../../../include/asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "../../../include/asb_uci/type/CryptoTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommTerminalCapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class CommCapabilityOptionsType;
class CommProfileID_Type;
class CommUserIO_ID_Type;
class CommUserLinkType;
class ComponentID_Type;
class ForeignKeyType;
class FrequencyRangeType;
class MilliwattPowerRatioRangeType;

/** See annotations in child elements and messages/elements that use this type for details. */
class CommTerminalCapabilityType : public virtual uci::type::CommTerminalCapabilityType, public virtual CommandableCapabilityDeclarationType {
public:
  /** Indicates a Profile (preset) that is applicable to this Capability. Only the profiles currently available and
    * applicable to this Capability should be listed. A Profile (or preset) is a logical collection of data, whose
    * implementation is not specified, that is used to tailor, configure or otherwise affect the behavior of a Capability.
    * Profiles can vary from mission to mission or even by phases of a single mission. They are generally developed in
    * pre-mission planning and are unique for each Subsystem model. Their content is not standardized by UCI, but the
    * mechanism for advertising their availability and activating them is. Their content is abstracted by the UCI concept
    * of Capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AvailableProfileID = asb_uci::base::BoundedList<uci::type::CommProfileID_Type, uci::type::accessorType::commProfileID_Type, asb_uci::type::CommProfileID_Type>;

  /** Indicates the data formats this capability is capable of exchanging via the data link. List size for this element is
    * based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 17]
    */
  using DataFormat = asb_uci::base::BoundedList<uci::type::CommDataFormatEnum, uci::type::accessorType::commDataFormatEnum, asb_uci::type::CommDataFormatEnum>;

  /** Indicates the frequency bands used by the waveform for transmissions over the network medium. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using TransmitFrequencyRange = asb_uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType, asb_uci::type::FrequencyRangeType>;

  /** Indicates the frequency bands used by the waveform to receive. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using ReceiveFrequencyRange = asb_uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType, asb_uci::type::FrequencyRangeType>;

  /** Indicates the Capability's first tier type in the Crypto taxonomy. Reflects crypto modes supported by the capability
    * given the current configuration of MDF, Keys, code version, etc. List size for this element is based on "Select All
    * That Apply" condition. [Occurrences: Minimum: 0; Maximum: 14]
    */
  using CryptoType = asb_uci::base::BoundedList<uci::type::CryptoTypeEnum, uci::type::accessorType::cryptoTypeEnum, asb_uci::type::CryptoTypeEnum>;

  /** Identifies User I/O components that the waveform may be dynamically configured to use a data source (in the case of
    * data to be transmitted) or a data sink (in the case of data received and decrypted). [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using AssociatedUserIO_ID = asb_uci::base::BoundedList<uci::type::CommUserIO_ID_Type, uci::type::accessorType::commUserIO_ID_Type, asb_uci::type::CommUserIO_ID_Type>;

  /** Identifies network components, or logical RF ports, that the waveform may be dynamically configured to use as a data
    * sink (in the case of data to be transmitted) or a data source (in the case of received data). [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using AssociatedUserLink = asb_uci::base::BoundedList<uci::type::CommUserLinkType, uci::type::accessorType::commUserLinkType, asb_uci::type::CommUserLinkType>;

  /** Indicates a command and control relevant Antenna Component associated with the Capability. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using AssociatedAntennaID = asb_uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type, asb_uci::type::ComponentID_Type>;

  /** The constructor */
  CommTerminalCapabilityType();

  /** The copy constructor
    *
    * @param rhs The CommTerminalCapabilityType to copy from
    */
  CommTerminalCapabilityType(const CommTerminalCapabilityType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The CommTerminalCapabilityType to move from
    */
  CommTerminalCapabilityType(CommTerminalCapabilityType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The CommTerminalCapabilityType to copy from
    * @return The CommTerminalCapabilityType that was assigned
    */
  CommTerminalCapabilityType& operator=(const CommTerminalCapabilityType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The CommTerminalCapabilityType to move from
    * @return The CommTerminalCapabilityType that was assigned
    */
  CommTerminalCapabilityType& operator=(CommTerminalCapabilityType&& rhs) = delete;

  /** The destructor */
  ~CommTerminalCapabilityType() override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommTerminalCapabilityType whose contents are to be used to set this
    *      uci::type::CommTerminalCapabilityType's contents.
    */
  void copy(const uci::type::CommTerminalCapabilityType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::CommTerminalCapabilityType whose contents are to be used to set this
    *      uci::type::CommTerminalCapabilityType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::CommTerminalCapabilityType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  const uci::type::CommCapabilityEnum& getCapabilityType() const override;

  /** Returns the contents of the message's CapabilityType field
    *
    * @return The contents of the CapabilityType field
    */
  uci::type::CommCapabilityEnum& getCapabilityType() override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param accessor The accessor to use to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setCapabilityType(const uci::type::CommCapabilityEnum& accessor) override;

  /** Sets the contents of the message's CapabilityType field
    *
    * @param value The new value to set the CapabilityType field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setCapabilityType(uci::type::CommCapabilityEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getSubCapabilityType_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getSubCapabilityType() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getSubCapabilityType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setSubCapabilityType(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field SubCapabilityTypeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSubCapabilityType() const noexcept override;

  /** Enables the optional field such that getSubCapabilityType will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableSubCapabilityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& clearSubCapabilityType() noexcept override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The const reference to the accessor to the CapabilityOptions field.
    */
  const uci::type::CommCapabilityOptionsType& getCapabilityOptions() const override;

  /** Returns the accessor to the CapabilityOptions field contained in this message fragment
    *
    * @return The reference to the accessor to the CapabilityOptions field.
    */
  uci::type::CommCapabilityOptionsType& getCapabilityOptions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setCapabilityOptions(const uci::type::CommCapabilityOptionsType& accessor) override;

  /** Returns the accessor to the AvailableProfileID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AvailableProfileID field.
    */
  const uci::type::CommTerminalCapabilityType::AvailableProfileID& getAvailableProfileID() const override;

  /** Returns the accessor to the AvailableProfileID field contained in this message fragment
    *
    * @return The reference to the accessor to the AvailableProfileID field.
    */
  uci::type::CommTerminalCapabilityType::AvailableProfileID& getAvailableProfileID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setAvailableProfileID(const uci::type::CommTerminalCapabilityType::AvailableProfileID& accessor) override;

  /** Returns the accessor to the DataFormat field contained in this message fragment
    *
    * @return The const reference to the accessor to the DataFormat field.
    */
  const uci::type::CommTerminalCapabilityType::DataFormat& getDataFormat() const override;

  /** Returns the accessor to the DataFormat field contained in this message fragment
    *
    * @return The reference to the accessor to the DataFormat field.
    */
  uci::type::CommTerminalCapabilityType::DataFormat& getDataFormat() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setDataFormat(const uci::type::CommTerminalCapabilityType::DataFormat& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getTerminalUniqueKey_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ForeignKeyType& getTerminalUniqueKey() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& getTerminalUniqueKey() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setTerminalUniqueKey(const uci::type::ForeignKeyType& accessor) override;

  /** Returns whether this optional field TerminalUniqueKeyis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTerminalUniqueKey() const noexcept override;

  /** Enables the optional field such that getTerminalUniqueKey will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ForeignKeyType& enableTerminalUniqueKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& clearTerminalUniqueKey() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MilliwattPowerRatioRangeType& getTxPowerRange_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MilliwattPowerRatioRangeType& getTxPowerRange() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MilliwattPowerRatioRangeType& getTxPowerRange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setTxPowerRange(const uci::type::MilliwattPowerRatioRangeType& accessor) override;

  /** Returns whether this optional field TxPowerRangeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTxPowerRange() const noexcept override;

  /** Enables the optional field such that getTxPowerRange will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MilliwattPowerRatioRangeType& enableTxPowerRange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& clearTxPowerRange() noexcept override;

  /** Returns the accessor to the TransmitFrequencyRange field contained in this message fragment
    *
    * @return The const reference to the accessor to the TransmitFrequencyRange field.
    */
  const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& getTransmitFrequencyRange() const override;

  /** Returns the accessor to the TransmitFrequencyRange field contained in this message fragment
    *
    * @return The reference to the accessor to the TransmitFrequencyRange field.
    */
  uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& getTransmitFrequencyRange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setTransmitFrequencyRange(const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& accessor) override;

  /** Returns the accessor to the ReceiveFrequencyRange field contained in this message fragment
    *
    * @return The const reference to the accessor to the ReceiveFrequencyRange field.
    */
  const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& getReceiveFrequencyRange() const override;

  /** Returns the accessor to the ReceiveFrequencyRange field contained in this message fragment
    *
    * @return The reference to the accessor to the ReceiveFrequencyRange field.
    */
  uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& getReceiveFrequencyRange() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setReceiveFrequencyRange(const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& accessor) override;

  /** Returns the accessor to the CryptoType field contained in this message fragment
    *
    * @return The const reference to the accessor to the CryptoType field.
    */
  const uci::type::CommTerminalCapabilityType::CryptoType& getCryptoType() const override;

  /** Returns the accessor to the CryptoType field contained in this message fragment
    *
    * @return The reference to the accessor to the CryptoType field.
    */
  uci::type::CommTerminalCapabilityType::CryptoType& getCryptoType() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setCryptoType(const uci::type::CommTerminalCapabilityType::CryptoType& accessor) override;

  /** Returns the accessor to the AssociatedUserIO_ID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedUserIO_ID field.
    */
  const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& getAssociatedUserIO_ID() const override;

  /** Returns the accessor to the AssociatedUserIO_ID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedUserIO_ID field.
    */
  uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& getAssociatedUserIO_ID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setAssociatedUserIO_ID(const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& accessor) override;

  /** Returns the accessor to the AssociatedUserLink field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedUserLink field.
    */
  const uci::type::CommTerminalCapabilityType::AssociatedUserLink& getAssociatedUserLink() const override;

  /** Returns the accessor to the AssociatedUserLink field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedUserLink field.
    */
  uci::type::CommTerminalCapabilityType::AssociatedUserLink& getAssociatedUserLink() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setAssociatedUserLink(const uci::type::CommTerminalCapabilityType::AssociatedUserLink& accessor) override;

  /** Returns the accessor to the AssociatedAntennaID field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedAntennaID field.
    */
  const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& getAssociatedAntennaID() const override;

  /** Returns the accessor to the AssociatedAntennaID field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedAntennaID field.
    */
  uci::type::CommTerminalCapabilityType::AssociatedAntennaID& getAssociatedAntennaID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::CommTerminalCapabilityType& setAssociatedAntennaID(const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<CommTerminalCapabilityType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::CommTerminalCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<CommCapabilityEnum> capabilityType_Accessor;
  std::unique_ptr<ForeignKeyType> subCapabilityType_Accessor;
  std::unique_ptr<CommCapabilityOptionsType> capabilityOptions_Accessor;
  std::unique_ptr<AvailableProfileID> availableProfileID_Accessor;
  std::unique_ptr<DataFormat> dataFormat_Accessor;
  std::unique_ptr<ForeignKeyType> terminalUniqueKey_Accessor;
  std::unique_ptr<MilliwattPowerRatioRangeType> txPowerRange_Accessor;
  std::unique_ptr<TransmitFrequencyRange> transmitFrequencyRange_Accessor;
  std::unique_ptr<ReceiveFrequencyRange> receiveFrequencyRange_Accessor;
  std::unique_ptr<CryptoType> cryptoType_Accessor;
  std::unique_ptr<AssociatedUserIO_ID> associatedUserIO_ID_Accessor;
  std::unique_ptr<AssociatedUserLink> associatedUserLink_Accessor;
  std::unique_ptr<AssociatedAntennaID> associatedAntennaID_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_COMMTERMINALCAPABILITYTYPE_H
