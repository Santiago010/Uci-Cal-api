/** @file UnitType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_UNITTYPE_H
#define ASB_UCI_TYPE_UNITTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "asb_uci/type/AirDefenseAreaType.h"
#include "asb_uci/type/OB_OperationalStatusEnum.h"
#include "asb_uci/type/String20Type.h"
#include "asb_uci/type/String4Type.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "uci/type/UnitType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class BaseEOB_RecordType;
class CountryCodeType;
class EOB_EquipmentRecordType;
class EOB_FixedPositionType;
class ID_Type;
class OrderOfBattleTimestampsType;
class SecurityInformationType;
class StandardIdentityConfidenceType;
class UnitIdentityType;

/** Represents a Unit in an OB. */
class UnitType : public virtual uci::type::UnitType {
public:
  /** Specifies any sites contained within the unit. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  using Site = asb_uci::base::BoundedList<uci::type::BaseEOB_RecordType, uci::type::accessorType::baseEOB_RecordType, asb_uci::type::BaseEOB_RecordType>;

  /** Specifies equipment not identified with a site and contained within the unit. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Equipment = asb_uci::base::BoundedList<uci::type::EOB_EquipmentRecordType, uci::type::accessorType::eOB_EquipmentRecordType, asb_uci::type::EOB_EquipmentRecordType>;

  /** The constructor */
  UnitType();

  /** The copy constructor
    *
    * @param rhs The UnitType to copy from
    */
  UnitType(const UnitType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The UnitType to move from
    */
  UnitType(UnitType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The UnitType to copy from
    * @return The UnitType that was assigned
    */
  UnitType& operator=(const UnitType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The UnitType to move from
    * @return The UnitType that was assigned
    */
  UnitType& operator=(UnitType&& rhs) = delete;

  /** The destructor */
  virtual ~UnitType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::UnitType whose contents are to be used to set this uci::type::UnitType's contents.
    */
  void copy(const uci::type::UnitType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::UnitType whose contents are to be used to set this uci::type::UnitType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::UnitType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The const reference to the accessor to the SecurityInformation field.
    */
  const uci::type::SecurityInformationType& getSecurityInformation() const override;

  /** Returns the accessor to the SecurityInformation field contained in this message fragment
    *
    * @return The reference to the accessor to the SecurityInformation field.
    */
  uci::type::SecurityInformationType& getSecurityInformation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setSecurityInformation(const uci::type::SecurityInformationType& accessor) override;

  /** Returns the accessor to the Identity field contained in this message fragment
    *
    * @return The const reference to the accessor to the Identity field.
    */
  const uci::type::UnitIdentityType& getIdentity() const override;

  /** Returns the accessor to the Identity field contained in this message fragment
    *
    * @return The reference to the accessor to the Identity field.
    */
  uci::type::UnitIdentityType& getIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setIdentity(const uci::type::UnitIdentityType& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StandardIdentityConfidenceType& getStandardIdentity_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::StandardIdentityConfidenceType& getStandardIdentity() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StandardIdentityConfidenceType& getStandardIdentity() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setStandardIdentity(const uci::type::StandardIdentityConfidenceType& accessor) override;

  /** Returns whether this optional field StandardIdentityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasStandardIdentity() const noexcept override;

  /** Enables the optional field such that getStandardIdentity will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::StandardIdentityConfidenceType& enableStandardIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearStandardIdentity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getCountryCode_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CountryCodeType& getCountryCode() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getCountryCode() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setCountryCode(const uci::type::CountryCodeType& accessor) override;

  /** Returns whether this optional field CountryCodeis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCountryCode() const noexcept override;

  /** Enables the optional field such that getCountryCode will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& enableCountryCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearCountryCode() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_FixedPositionType& getPosition_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::EOB_FixedPositionType& getPosition() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_FixedPositionType& getPosition() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setPosition(const uci::type::EOB_FixedPositionType& accessor) override;

  /** Returns whether this optional field Positionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPosition() const noexcept override;

  /** Enables the optional field such that getPosition will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::EOB_FixedPositionType& enablePosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearPosition() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OrderOfBattleTimestampsType& getTimestamps() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& getTimestamps() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) override;

  /** Returns whether this optional field Timestampsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasTimestamps() const noexcept override;

  /** Enables the optional field such that getTimestamps will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OrderOfBattleTimestampsType& enableTimestamps(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearTimestamps() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getEvaluation() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setEvaluation(xs::UnsignedByte value) override;

  /** Returns whether this optional field Evaluationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEvaluation() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearEvaluation() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& getOperationalStatus_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OB_OperationalStatusEnum& getOperationalStatus() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& getOperationalStatus() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setOperationalStatus(const uci::type::OB_OperationalStatusEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setOperationalStatus(uci::type::OB_OperationalStatusEnum::EnumerationItem value) override;

  /** Returns whether this optional field OperationalStatusis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOperationalStatus() const noexcept override;

  /** Enables the optional field such that getOperationalStatus will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OB_OperationalStatusEnum& enableOperationalStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearOperationalStatus() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getPoliticalSubdivision_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString256Type& getPoliticalSubdivision() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getPoliticalSubdivision() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setPoliticalSubdivision(const uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setPoliticalSubdivision(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setPoliticalSubdivision(const char* value) override;

  /** Returns whether this optional field politicalSubdivision_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPoliticalSubdivision() const noexcept override;

  /** Enables the optional field such that getPoliticalSubdivision will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& enablePoliticalSubdivision(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearPoliticalSubdivision() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getAllegianceAlternate_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CountryCodeType& getAllegianceAlternate() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getAllegianceAlternate() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setAllegianceAlternate(const uci::type::CountryCodeType& accessor) override;

  /** Returns whether this optional field AllegianceAlternateis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAllegianceAlternate() const noexcept override;

  /** Enables the optional field such that getAllegianceAlternate will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& enableAllegianceAlternate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearAllegianceAlternate() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getDeploymentStatus_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String20Type& getDeploymentStatus() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getDeploymentStatus() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setDeploymentStatus(const uci::type::String20Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setDeploymentStatus(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setDeploymentStatus(const char* value) override;

  /** Returns whether this optional field deploymentStatus_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDeploymentStatus() const noexcept override;

  /** Enables the optional field such that getDeploymentStatus will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String20Type& enableDeploymentStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearDeploymentStatus() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getDivisionCategory_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString256Type& getDivisionCategory() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getDivisionCategory() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setDivisionCategory(const uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setDivisionCategory(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setDivisionCategory(const char* value) override;

  /** Returns whether this optional field divisionCategory_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDivisionCategory() const noexcept override;

  /** Enables the optional field such that getDivisionCategory will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& enableDivisionCategory(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearDivisionCategory() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getEchelon_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String20Type& getEchelon() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getEchelon() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setEchelon(const uci::type::String20Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setEchelon(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setEchelon(const char* value) override;

  /** Returns whether this optional field echelon_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEchelon() const noexcept override;

  /** Enables the optional field such that getEchelon will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String20Type& enableEchelon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearEchelon() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getEchelonTier() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setEchelonTier(xs::UnsignedByte value) override;

  /** Returns whether this optional field EchelonTieris available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasEchelonTier() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearEchelonTier() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getFlagFlown_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::CountryCodeType& getFlagFlown() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& getFlagFlown() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setFlagFlown(const uci::type::CountryCodeType& accessor) override;

  /** Returns whether this optional field FlagFlownis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFlagFlown() const noexcept override;

  /** Enables the optional field such that getFlagFlown will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::CountryCodeType& enableFlagFlown(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearFlagFlown() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getFleetAssignment_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String4Type& getFleetAssignment() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getFleetAssignment() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setFleetAssignment(const uci::type::String4Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setFleetAssignment(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setFleetAssignment(const char* value) override;

  /** Returns whether this optional field fleetAssignment_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFleetAssignment() const noexcept override;

  /** Enables the optional field such that getFleetAssignment will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String4Type& enableFleetAssignment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearFleetAssignment() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AirDefenseAreaType& getAirDefenseArea_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::AirDefenseAreaType& getAirDefenseArea() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::AirDefenseAreaType& getAirDefenseArea() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setAirDefenseArea(const uci::type::AirDefenseAreaType& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setAirDefenseArea(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setAirDefenseArea(const char* value) override;

  /** Returns whether this optional field airDefenseArea_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAirDefenseArea() const noexcept override;

  /** Enables the optional field such that getAirDefenseArea will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::AirDefenseAreaType& enableAirDefenseArea(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearAirDefenseArea() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getForceAssignment_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString256Type& getForceAssignment() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getForceAssignment() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setForceAssignment(const uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setForceAssignment(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setForceAssignment(const char* value) override;

  /** Returns whether this optional field forceAssignment_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasForceAssignment() const noexcept override;

  /** Enables the optional field such that getForceAssignment will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& enableForceAssignment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearForceAssignment() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getForceName_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString256Type& getForceName() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& getForceName() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setForceName(const uci::type::VisibleString256Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setForceName(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setForceName(const char* value) override;

  /** Returns whether this optional field forceName_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasForceName() const noexcept override;

  /** Enables the optional field such that getForceName will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString256Type& enableForceName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearForceName() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getFunctionRole_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String20Type& getFunctionRole() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getFunctionRole() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setFunctionRole(const uci::type::String20Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setFunctionRole(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setFunctionRole(const char* value) override;

  /** Returns whether this optional field functionRole_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFunctionRole() const noexcept override;

  /** Enables the optional field such that getFunctionRole will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String20Type& enableFunctionRole(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearFunctionRole() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionPrimary_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String4Type& getMissionPrimary() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionPrimary() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionPrimary(const uci::type::String4Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionPrimary(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionPrimary(const char* value) override;

  /** Returns whether this optional field missionPrimary_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionPrimary() const noexcept override;

  /** Enables the optional field such that getMissionPrimary will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String4Type& enableMissionPrimary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearMissionPrimary() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionPrimarySpecialty_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String4Type& getMissionPrimarySpecialty() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionPrimarySpecialty() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionPrimarySpecialty(const uci::type::String4Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionPrimarySpecialty(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionPrimarySpecialty(const char* value) override;

  /** Returns whether this optional field missionPrimarySpecialty_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionPrimarySpecialty() const noexcept override;

  /** Enables the optional field such that getMissionPrimarySpecialty will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String4Type& enableMissionPrimarySpecialty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearMissionPrimarySpecialty() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionSecondary_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String4Type& getMissionSecondary() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionSecondary() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionSecondary(const uci::type::String4Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionSecondary(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionSecondary(const char* value) override;

  /** Returns whether this optional field missionSecondary_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionSecondary() const noexcept override;

  /** Enables the optional field such that getMissionSecondary will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String4Type& enableMissionSecondary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearMissionSecondary() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionSecondarySpecialty_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String4Type& getMissionSecondarySpecialty() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String4Type& getMissionSecondarySpecialty() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionSecondarySpecialty(const uci::type::String4Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionSecondarySpecialty(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setMissionSecondarySpecialty(const char* value) override;

  /** Returns whether this optional field missionSecondarySpecialty_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMissionSecondarySpecialty() const noexcept override;

  /** Enables the optional field such that getMissionSecondarySpecialty will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String4Type& enableMissionSecondarySpecialty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearMissionSecondarySpecialty() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getNuclearCapacity_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::String20Type& getNuclearCapacity() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::String20Type& getNuclearCapacity() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setNuclearCapacity(const uci::type::String20Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setNuclearCapacity(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setNuclearCapacity(const char* value) override;

  /** Returns whether this optional field nuclearCapacity_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasNuclearCapacity() const noexcept override;

  /** Enables the optional field such that getNuclearCapacity will return the optional field and not throw an exception
    * when invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::String20Type& enableNuclearCapacity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearNuclearCapacity() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ID_Type& getParentUnitID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ID_Type& getParentUnitID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ID_Type& getParentUnitID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setParentUnitID(const uci::type::ID_Type& accessor) override;

  /** Returns whether this optional field ParentUnitIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasParentUnitID() const noexcept override;

  /** Enables the optional field such that getParentUnitID will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ID_Type& enableParentUnitID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& clearParentUnitID() noexcept override;

  /** Returns the accessor to the Site field contained in this message fragment
    *
    * @return The const reference to the accessor to the Site field.
    */
  const uci::type::UnitType::Site& getSite() const override;

  /** Returns the accessor to the Site field contained in this message fragment
    *
    * @return The reference to the accessor to the Site field.
    */
  uci::type::UnitType::Site& getSite() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setSite(const uci::type::UnitType::Site& accessor) override;

  /** Returns the accessor to the Equipment field contained in this message fragment
    *
    * @return The const reference to the accessor to the Equipment field.
    */
  const uci::type::UnitType::Equipment& getEquipment() const override;

  /** Returns the accessor to the Equipment field contained in this message fragment
    *
    * @return The reference to the accessor to the Equipment field.
    */
  uci::type::UnitType::Equipment& getEquipment() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::UnitType& setEquipment(const uci::type::UnitType::Equipment& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<UnitType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::UnitType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::UnitType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<SecurityInformationType> securityInformation_Accessor;
  std::unique_ptr<UnitIdentityType> identity_Accessor;
  std::unique_ptr<StandardIdentityConfidenceType> standardIdentity_Accessor;
  std::unique_ptr<CountryCodeType> countryCode_Accessor;
  std::unique_ptr<EOB_FixedPositionType> position_Accessor;
  std::unique_ptr<OrderOfBattleTimestampsType> timestamps_Accessor;
  boost::optional<asb_xs::UnsignedByte> evaluation_Accessor;
  std::unique_ptr<OB_OperationalStatusEnum> operationalStatus_Accessor;
  std::unique_ptr<VisibleString256Type> politicalSubdivision_Accessor;
  std::unique_ptr<CountryCodeType> allegianceAlternate_Accessor;
  std::unique_ptr<String20Type> deploymentStatus_Accessor;
  std::unique_ptr<VisibleString256Type> divisionCategory_Accessor;
  std::unique_ptr<String20Type> echelon_Accessor;
  boost::optional<asb_xs::UnsignedByte> echelonTier_Accessor;
  std::unique_ptr<CountryCodeType> flagFlown_Accessor;
  std::unique_ptr<String4Type> fleetAssignment_Accessor;
  std::unique_ptr<AirDefenseAreaType> airDefenseArea_Accessor;
  std::unique_ptr<VisibleString256Type> forceAssignment_Accessor;
  std::unique_ptr<VisibleString256Type> forceName_Accessor;
  std::unique_ptr<String20Type> functionRole_Accessor;
  std::unique_ptr<String4Type> missionPrimary_Accessor;
  std::unique_ptr<String4Type> missionPrimarySpecialty_Accessor;
  std::unique_ptr<String4Type> missionSecondary_Accessor;
  std::unique_ptr<String4Type> missionSecondarySpecialty_Accessor;
  std::unique_ptr<String20Type> nuclearCapacity_Accessor;
  std::unique_ptr<ID_Type> parentUnitID_Accessor;
  std::unique_ptr<Site> site_Accessor;
  std::unique_ptr<Equipment> equipment_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_UNITTYPE_H
