/** @file SMTI_CapabilityOptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_SMTI_CAPABILITYOPTIONSTYPE_H
#define ASB_UCI_TYPE_SMTI_CAPABILITYOPTIONSTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/COARPS_SMTI_CollectionOptionsEnum.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SMTI_CapabilityOptionsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ElectronicProtectionOptionsSupportedType;
class MultistaticOptionsSupportedType;

/** See annotations in child elements and messages/elements that use this type for details. */
class SMTI_CapabilityOptionsType : public virtual uci::type::SMTI_CapabilityOptionsType {
public:
  /** Indicates the list of EP capabilities that the current HW / SW allows an external actor to control for this
    * capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ElectronicProtectionOptionsSupported = asb_uci::base::BoundedList<uci::type::ElectronicProtectionOptionsSupportedType, uci::type::accessorType::electronicProtectionOptionsSupportedType, asb_uci::type::ElectronicProtectionOptionsSupportedType>;

  /** The constructor */
  SMTI_CapabilityOptionsType();

  /** The copy constructor
    *
    * @param rhs The SMTI_CapabilityOptionsType to copy from
    */
  SMTI_CapabilityOptionsType(const SMTI_CapabilityOptionsType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The SMTI_CapabilityOptionsType to move from
    */
  SMTI_CapabilityOptionsType(SMTI_CapabilityOptionsType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The SMTI_CapabilityOptionsType to copy from
    * @return The SMTI_CapabilityOptionsType that was assigned
    */
  SMTI_CapabilityOptionsType& operator=(const SMTI_CapabilityOptionsType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The SMTI_CapabilityOptionsType to move from
    * @return The SMTI_CapabilityOptionsType that was assigned
    */
  SMTI_CapabilityOptionsType& operator=(SMTI_CapabilityOptionsType&& rhs) = delete;

  /** The destructor */
  virtual ~SMTI_CapabilityOptionsType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SMTI_CapabilityOptionsType whose contents are to be used to set this
    *      uci::type::SMTI_CapabilityOptionsType's contents.
    */
  void copy(const uci::type::SMTI_CapabilityOptionsType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::SMTI_CapabilityOptionsType whose contents are to be used to set this
    *      uci::type::SMTI_CapabilityOptionsType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::SMTI_CapabilityOptionsType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the contents of the message's InterruptOtherActivities field
    *
    * @return The contents of the InterruptOtherActivities field
    */
  xs::Boolean getInterruptOtherActivities() const override;

  /** Sets the contents of the message's InterruptOtherActivities field
    *
    * @param value The new value to set the InterruptOtherActivities field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setInterruptOtherActivities(xs::Boolean value) override;

  /** Returns the contents of the message's CollectionPolicy field
    *
    * @return The contents of the CollectionPolicy field
    */
  xs::Boolean getCollectionPolicy() const override;

  /** Sets the contents of the message's CollectionPolicy field
    *
    * @param value The new value to set the CollectionPolicy field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setCollectionPolicy(xs::Boolean value) override;

  /** Returns the contents of the message's HRR_Supported field
    *
    * @return The contents of the HRR_Supported field
    */
  xs::Boolean getHRR_Supported() const override;

  /** Sets the contents of the message's HRR_Supported field
    *
    * @param value The new value to set the HRR_Supported field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setHRR_Supported(xs::Boolean value) override;

  /** Returns the contents of the message's FTI_Supported field
    *
    * @return The contents of the FTI_Supported field
    */
  xs::Boolean getFTI_Supported() const override;

  /** Sets the contents of the message's FTI_Supported field
    *
    * @param value The new value to set the FTI_Supported field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setFTI_Supported(xs::Boolean value) override;

  /** Returns the contents of the message's TrackingSupported field
    *
    * @return The contents of the TrackingSupported field
    */
  xs::Boolean getTrackingSupported() const override;

  /** Sets the contents of the message's TrackingSupported field
    *
    * @param value The new value to set the TrackingSupported field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setTrackingSupported(xs::Boolean value) override;

  /** Returns the contents of the message's PackingPlan field
    *
    * @return The contents of the PackingPlan field
    */
  xs::Boolean getPackingPlan() const override;

  /** Sets the contents of the message's PackingPlan field
    *
    * @param value The new value to set the PackingPlan field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setPackingPlan(xs::Boolean value) override;

  /** Returns the contents of the message's ConcurrentOperationSupported field
    *
    * @return The contents of the ConcurrentOperationSupported field
    */
  xs::Boolean getConcurrentOperationSupported() const override;

  /** Sets the contents of the message's ConcurrentOperationSupported field
    *
    * @param value The new value to set the ConcurrentOperationSupported field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setConcurrentOperationSupported(xs::Boolean value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MultistaticOptionsSupportedType& getMultistaticOptionsSupported_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::MultistaticOptionsSupportedType& getMultistaticOptionsSupported() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MultistaticOptionsSupportedType& getMultistaticOptionsSupported() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setMultistaticOptionsSupported(const uci::type::MultistaticOptionsSupportedType& accessor) override;

  /** Returns whether this optional field MultistaticOptionsSupportedis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasMultistaticOptionsSupported() const noexcept override;

  /** Enables the optional field such that getMultistaticOptionsSupported will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::MultistaticOptionsSupportedType& enableMultistaticOptionsSupported(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& clearMultistaticOptionsSupported() noexcept override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::COARPS_SMTI_CollectionOptionsEnum& getCOARPS_SMTI_CollectionOption_() const;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::COARPS_SMTI_CollectionOptionsEnum& getCOARPS_SMTI_CollectionOption() const override;

  /** Returns the value of the optional field. Throws an exception is field is not set.
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::COARPS_SMTI_CollectionOptionsEnum& getCOARPS_SMTI_CollectionOption() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setCOARPS_SMTI_CollectionOption(const uci::type::COARPS_SMTI_CollectionOptionsEnum& accessor) override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setCOARPS_SMTI_CollectionOption(uci::type::COARPS_SMTI_CollectionOptionsEnum::EnumerationItem value) override;

  /** Returns whether this optional field COARPS_SMTI_CollectionOptionis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCOARPS_SMTI_CollectionOption() const noexcept override;

  /** Enables the optional field such that getCOARPS_SMTI_CollectionOption will return the optional field and not throw an
    * exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::COARPS_SMTI_CollectionOptionsEnum& enableCOARPS_SMTI_CollectionOption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& clearCOARPS_SMTI_CollectionOption() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getFalseAlarmLevelUpperLimit() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setFalseAlarmLevelUpperLimit(xs::UnsignedByte value) override;

  /** Returns whether this optional field FalseAlarmLevelUpperLimitis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasFalseAlarmLevelUpperLimit() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& clearFalseAlarmLevelUpperLimit() noexcept override;

  /** Returns the accessor to the ElectronicProtectionOptionsSupported field contained in this message fragment
    *
    * @return The const reference to the accessor to the ElectronicProtectionOptionsSupported field.
    */
  const uci::type::SMTI_CapabilityOptionsType::ElectronicProtectionOptionsSupported& getElectronicProtectionOptionsSupported() const override;

  /** Returns the accessor to the ElectronicProtectionOptionsSupported field contained in this message fragment
    *
    * @return The reference to the accessor to the ElectronicProtectionOptionsSupported field.
    */
  uci::type::SMTI_CapabilityOptionsType::ElectronicProtectionOptionsSupported& getElectronicProtectionOptionsSupported() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::SMTI_CapabilityOptionsType& setElectronicProtectionOptionsSupported(const uci::type::SMTI_CapabilityOptionsType::ElectronicProtectionOptionsSupported& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<SMTI_CapabilityOptionsType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_CapabilityOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::SMTI_CapabilityOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  asb_xs::Boolean interruptOtherActivities_Accessor{false};
  asb_xs::Boolean collectionPolicy_Accessor{false};
  asb_xs::Boolean hRR_Supported_Accessor{false};
  asb_xs::Boolean fTI_Supported_Accessor{false};
  asb_xs::Boolean trackingSupported_Accessor{false};
  asb_xs::Boolean packingPlan_Accessor{false};
  asb_xs::Boolean concurrentOperationSupported_Accessor{false};
  std::unique_ptr<MultistaticOptionsSupportedType> multistaticOptionsSupported_Accessor;
  std::unique_ptr<COARPS_SMTI_CollectionOptionsEnum> cOARPS_SMTI_CollectionOption_Accessor;
  boost::optional<asb_xs::UnsignedByte> falseAlarmLevelUpperLimit_Accessor;
  std::unique_ptr<ElectronicProtectionOptionsSupported> electronicProtectionOptionsSupported_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_SMTI_CAPABILITYOPTIONSTYPE_H
