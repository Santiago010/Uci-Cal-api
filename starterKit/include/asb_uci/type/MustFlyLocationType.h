/** @file MustFlyLocationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_MUSTFLYLOCATIONTYPE_H
#define ASB_UCI_TYPE_MUSTFLYLOCATIONTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MustFlyLocationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class EntityID_Type;
class LineTargetType;
class OpLineID_Type;
class OpPointID_Type;
class OpVolumeID_Type;
class OpVolumeType;
class OpZoneID_Type;
class Point3D_Type;
class ZoneExternalType;

/** See annotations in child elements and messages/elements that use this type for details. */
class MustFlyLocationType : public virtual uci::type::MustFlyLocationType {
public:
  /** The constructor */
  MustFlyLocationType();

  /** The copy constructor
    *
    * @param rhs The MustFlyLocationType to copy from
    */
  MustFlyLocationType(const MustFlyLocationType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The MustFlyLocationType to move from
    */
  MustFlyLocationType(MustFlyLocationType&& rhs) = delete;

  /** The assignment operator [not supported]
    *
    * @param rhs The MustFlyLocationType to copy from
    * @return The MustFlyLocationType that was assigned
    */
  MustFlyLocationType& operator=(const MustFlyLocationType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The MustFlyLocationType to move from
    * @return The MustFlyLocationType that was assigned
    */
  MustFlyLocationType& operator=(MustFlyLocationType&& rhs) = delete;

  /** The destructor */
  virtual ~MustFlyLocationType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MustFlyLocationType whose contents are to be used to set this
    *      uci::type::MustFlyLocationType's contents.
    */
  void copy(const uci::type::MustFlyLocationType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::MustFlyLocationType whose contents are to be used to set this
    *      uci::type::MustFlyLocationType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::MustFlyLocationType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value
    */
  uci::type::MustFlyLocationType::MustFlyLocationTypeChoice getMustFlyLocationTypeChoiceOrdinal() const noexcept override;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getMustFlyLocationTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param ordinal The ordinal to set this choice's selected ordinal to.
    * @param type The type of data that is to be made available when the ordinal is set.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setMustFlyLocationTypeChoiceOrdinal(uci::type::MustFlyLocationType::MustFlyLocationTypeChoice ordinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The const reference to the accessor to the EntityID field.
    */
  uci::type::EntityID_Type& getEntityID_() const;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the EntityID field.
    */
  const uci::type::EntityID_Type& getEntityID() const override;

  /** Returns the accessor to the EntityID field contained in this message fragment
    *
    * @return The reference to the accessor to the EntityID field.
    */
  uci::type::EntityID_Type& getEntityID() override;

  /** Sets this choice's choice to be entityID and initializes entityID to be the specified value. A deep copy will be used
    * by this method to set entityID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setEntityID(const uci::type::EntityID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EntityID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EntityID, false otherwise.
    */
  bool isEntityID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by EntityID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EntityID.
    */
  uci::type::EntityID_Type& chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by EntityID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EntityID.
    */
  uci::type::EntityID_Type& chooseEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OpPointID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpPointID field.
    */
  uci::type::OpPointID_Type& getOpPointID_() const;

  /** Returns the accessor to the OpPointID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpPointID field.
    */
  const uci::type::OpPointID_Type& getOpPointID() const override;

  /** Returns the accessor to the OpPointID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpPointID field.
    */
  uci::type::OpPointID_Type& getOpPointID() override;

  /** Sets this choice's choice to be opPointID and initializes opPointID to be the specified value. A deep copy will be
    * used by this method to set opPointID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setOpPointID(const uci::type::OpPointID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpPointID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpPointID, false otherwise.
    */
  bool isOpPointID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpPointID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpPointID.
    */
  uci::type::OpPointID_Type& chooseOpPointID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OpPointID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpPointID.
    */
  uci::type::OpPointID_Type& chooseOpPointID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OpLineID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpLineID field.
    */
  uci::type::OpLineID_Type& getOpLineID_() const;

  /** Returns the accessor to the OpLineID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpLineID field.
    */
  const uci::type::OpLineID_Type& getOpLineID() const override;

  /** Returns the accessor to the OpLineID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpLineID field.
    */
  uci::type::OpLineID_Type& getOpLineID() override;

  /** Sets this choice's choice to be opLineID and initializes opLineID to be the specified value. A deep copy will be used
    * by this method to set opLineID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setOpLineID(const uci::type::OpLineID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpLineID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpLineID, false otherwise.
    */
  bool isOpLineID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpLineID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpLineID.
    */
  uci::type::OpLineID_Type& chooseOpLineID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OpLineID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpLineID.
    */
  uci::type::OpLineID_Type& chooseOpLineID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OpZoneID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpZoneID field.
    */
  uci::type::OpZoneID_Type& getOpZoneID_() const;

  /** Returns the accessor to the OpZoneID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpZoneID field.
    */
  const uci::type::OpZoneID_Type& getOpZoneID() const override;

  /** Returns the accessor to the OpZoneID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpZoneID field.
    */
  uci::type::OpZoneID_Type& getOpZoneID() override;

  /** Sets this choice's choice to be opZoneID and initializes opZoneID to be the specified value. A deep copy will be used
    * by this method to set opZoneID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setOpZoneID(const uci::type::OpZoneID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpZoneID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpZoneID, false otherwise.
    */
  bool isOpZoneID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpZoneID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpZoneID.
    */
  uci::type::OpZoneID_Type& chooseOpZoneID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OpZoneID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpZoneID.
    */
  uci::type::OpZoneID_Type& chooseOpZoneID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the OpVolumeID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OpVolumeID field.
    */
  uci::type::OpVolumeID_Type& getOpVolumeID_() const;

  /** Returns the accessor to the OpVolumeID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpVolumeID field.
    */
  const uci::type::OpVolumeID_Type& getOpVolumeID() const override;

  /** Returns the accessor to the OpVolumeID field contained in this message fragment
    *
    * @return The reference to the accessor to the OpVolumeID field.
    */
  uci::type::OpVolumeID_Type& getOpVolumeID() override;

  /** Sets this choice's choice to be opVolumeID and initializes opVolumeID to be the specified value. A deep copy will be
    * used by this method to set opVolumeID
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setOpVolumeID(const uci::type::OpVolumeID_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OpVolumeID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OpVolumeID, false otherwise.
    */
  bool isOpVolumeID() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by OpVolumeID.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpVolumeID.
    */
  uci::type::OpVolumeID_Type& chooseOpVolumeID(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by OpVolumeID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OpVolumeID.
    */
  uci::type::OpVolumeID_Type& chooseOpVolumeID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the Point field contained in this message fragment
    *
    * @return The const reference to the accessor to the Point field.
    */
  uci::type::Point3D_Type& getPoint_() const;

  /** Returns the accessor to the Point field contained in this message fragment
    *
    * @return The reference to the accessor to the Point field.
    */
  const uci::type::Point3D_Type& getPoint() const override;

  /** Returns the accessor to the Point field contained in this message fragment
    *
    * @return The reference to the accessor to the Point field.
    */
  uci::type::Point3D_Type& getPoint() override;

  /** Sets this choice's choice to be point and initializes point to be the specified value. A deep copy will be used by
    * this method to set point
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setPoint(const uci::type::Point3D_Type& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Point.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Point, false otherwise.
    */
  bool isPoint() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by Point.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Point.
    */
  uci::type::Point3D_Type& choosePoint(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by Point.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Point.
    */
  uci::type::Point3D_Type& choosePoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the ZoneTarget field contained in this message fragment
    *
    * @return The const reference to the accessor to the ZoneTarget field.
    */
  uci::type::ZoneExternalType& getZoneTarget_() const;

  /** Returns the accessor to the ZoneTarget field contained in this message fragment
    *
    * @return The reference to the accessor to the ZoneTarget field.
    */
  const uci::type::ZoneExternalType& getZoneTarget() const override;

  /** Returns the accessor to the ZoneTarget field contained in this message fragment
    *
    * @return The reference to the accessor to the ZoneTarget field.
    */
  uci::type::ZoneExternalType& getZoneTarget() override;

  /** Sets this choice's choice to be zoneTarget and initializes zoneTarget to be the specified value. A deep copy will be
    * used by this method to set zoneTarget
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setZoneTarget(const uci::type::ZoneExternalType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ZoneTarget.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ZoneTarget, false otherwise.
    */
  bool isZoneTarget() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by ZoneTarget.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ZoneTarget.
    */
  uci::type::ZoneExternalType& chooseZoneTarget(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by ZoneTarget.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ZoneTarget.
    */
  uci::type::ZoneExternalType& chooseZoneTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the LineTarget field contained in this message fragment
    *
    * @return The const reference to the accessor to the LineTarget field.
    */
  uci::type::LineTargetType& getLineTarget_() const;

  /** Returns the accessor to the LineTarget field contained in this message fragment
    *
    * @return The reference to the accessor to the LineTarget field.
    */
  const uci::type::LineTargetType& getLineTarget() const override;

  /** Returns the accessor to the LineTarget field contained in this message fragment
    *
    * @return The reference to the accessor to the LineTarget field.
    */
  uci::type::LineTargetType& getLineTarget() override;

  /** Sets this choice's choice to be lineTarget and initializes lineTarget to be the specified value. A deep copy will be
    * used by this method to set lineTarget
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setLineTarget(const uci::type::LineTargetType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LineTarget.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LineTarget, false otherwise.
    */
  bool isLineTarget() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by LineTarget.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LineTarget.
    */
  uci::type::LineTargetType& chooseLineTarget(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by LineTarget.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LineTarget.
    */
  uci::type::LineTargetType& chooseLineTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Returns the accessor to the VolumeTarget field contained in this message fragment
    *
    * @return The const reference to the accessor to the VolumeTarget field.
    */
  uci::type::OpVolumeType& getVolumeTarget_() const;

  /** Returns the accessor to the VolumeTarget field contained in this message fragment
    *
    * @return The const reference to the accessor to the VolumeTarget field.
    */
  const uci::type::OpVolumeType& getVolumeTarget() const override;

  /** Returns the accessor to the VolumeTarget field contained in this message fragment
    *
    * @return The reference to the accessor to the VolumeTarget field.
    */
  uci::type::OpVolumeType& getVolumeTarget() override;

  /** Sets this choice's choice to be VolumeTarget and initializes VolumeTarget to be the specified value. A deep copy will
    * be used by this method to set VolumeTarget
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::MustFlyLocationType& setVolumeTarget(const uci::type::OpVolumeType& accessor) override;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VolumeTarget.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VolumeTarget, false otherwise.
    */
  bool isVolumeTarget() const noexcept override;

  /** Sets this choice's "selection ordinal" to the choice identified by VolumeTarget.
    *
    * @param method name of calling method
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VolumeTarget.
    */
  uci::type::OpVolumeType& chooseVolumeTarget(const std::string& method, uci::base::accessorType::AccessorType type = uci::base::accessorType::null);

  /** Sets this choice's "selection ordinal" to the choice identified by VolumeTarget.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VolumeTarget.
    */
  uci::type::OpVolumeType& chooseVolumeTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<MustFlyLocationType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::MustFlyLocationType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::MustFlyLocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<EntityID_Type> entityID_Accessor;
  std::unique_ptr<OpPointID_Type> opPointID_Accessor;
  std::unique_ptr<OpLineID_Type> opLineID_Accessor;
  std::unique_ptr<OpZoneID_Type> opZoneID_Accessor;
  std::unique_ptr<OpVolumeID_Type> opVolumeID_Accessor;
  std::unique_ptr<Point3D_Type> point_Accessor;
  std::unique_ptr<ZoneExternalType> zoneTarget_Accessor;
  std::unique_ptr<LineTargetType> lineTarget_Accessor;
  std::unique_ptr<OpVolumeType> volumeTarget_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_MUSTFLYLOCATIONTYPE_H
