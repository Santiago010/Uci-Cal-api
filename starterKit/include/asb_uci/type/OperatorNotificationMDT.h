/** @file OperatorNotificationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_OPERATORNOTIFICATIONMDT_H
#define ASB_UCI_TYPE_OPERATORNOTIFICATIONMDT_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "../../../include/asb_uci/base/BoundedList.h"
#include "../../../include/asb_uci/type/DateTimeType.h"
#include "../../../include/asb_uci/type/NotificationCategoryEnum.h"
#include "../../../include/asb_uci/type/NotificationSeverityEnum.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_xs/type/simpleXmlSchemaPrimitives.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorNotificationMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class AssociatedMessageType;
class AuralAlertType;
class ID_Type;
class NotificationSourceType;
class OperatorNotificationActionType;
class OperatorNotificationID_Type;
class OperatorRoleType;
class Point2D_Type;

/** See annotations in child elements and messages/elements that use this type for details. */
class OperatorNotificationMDT : public virtual uci::type::OperatorNotificationMDT {
public:
  /** List of parameters used as substitution arguments when applying notification templates. If a notification template
    * syntax defined a substitution token (e.g. $#) in the Title, the template parameters would be used to replace those
    * tokens. For example, given a template Title of "System $1 violated zone $2" an OperatorNotification that applies that
    * template would replace the $1 token with the first template parameter and the $2 with the second template parameter.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using OperatorNotificationTemplateParameters = asb_uci::base::BoundedList<uci::type::VisibleString32Type, uci::type::accessorType::visibleString32Type, asb_uci::type::VisibleString32Type>;

  /** Destinations for this notification. This field defines which Operator consoles are responsible for displaying or
    * processing the alert. The Operator consoles can be specified as an Operator console role or by a non-Operator role.
    * If this element is absent, the notification should be handled by all Operator consoles. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  using Destinations = asb_uci::base::BoundedList<uci::type::OperatorRoleType, uci::type::accessorType::operatorRoleType, asb_uci::type::OperatorRoleType>;

  /** Indicates a message that is associated with or the cause of the operator notification. This element should be omitted
    * if an input message was not the cause of the notification. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using AssociatedMessage = asb_uci::base::BoundedList<uci::type::AssociatedMessageType, uci::type::accessorType::associatedMessageType, asb_uci::type::AssociatedMessageType>;

  /** The constructor */
  OperatorNotificationMDT();

  /** The copy constructor
    *
    * @param rhs The OperatorNotificationMDT to copy from
    */
  OperatorNotificationMDT(const OperatorNotificationMDT& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The OperatorNotificationMDT to move from
    */
  OperatorNotificationMDT(OperatorNotificationMDT&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The OperatorNotificationMDT to copy from
    * @return The OperatorNotificationMDT that was assigned
    */
  OperatorNotificationMDT& operator=(const OperatorNotificationMDT& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The OperatorNotificationMDT to move from
    * @return The OperatorNotificationMDT that was assigned
    */
  OperatorNotificationMDT& operator=(OperatorNotificationMDT&& rhs) = delete;

  /** The destructor */
  virtual ~OperatorNotificationMDT();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OperatorNotificationMDT whose contents are to be used to set this
    *      uci::type::OperatorNotificationMDT's contents.
    */
  void copy(const uci::type::OperatorNotificationMDT& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::OperatorNotificationMDT whose contents are to be used to set this
    *      uci::type::OperatorNotificationMDT's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::OperatorNotificationMDT& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the OperatorNotificationID field contained in this message fragment
    *
    * @return The const reference to the accessor to the OperatorNotificationID field.
    */
  const uci::type::OperatorNotificationID_Type& getOperatorNotificationID() const override;

  /** Returns the accessor to the OperatorNotificationID field contained in this message fragment
    *
    * @return The reference to the accessor to the OperatorNotificationID field.
    */
  uci::type::OperatorNotificationID_Type& getOperatorNotificationID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setOperatorNotificationID(const uci::type::OperatorNotificationID_Type& accessor) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ID_Type& getOperatorNotificationTemplateID_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::ID_Type& getOperatorNotificationTemplateID() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ID_Type& getOperatorNotificationTemplateID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setOperatorNotificationTemplateID(const uci::type::ID_Type& accessor) override;

  /** Returns whether this optional field OperatorNotificationTemplateIDis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOperatorNotificationTemplateID() const noexcept override;

  /** Enables the optional field such that getOperatorNotificationTemplateID will return the optional field and not throw
    * an exception when invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::ID_Type& enableOperatorNotificationTemplateID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearOperatorNotificationTemplateID() noexcept override;

  /** Returns the accessor to the OperatorNotificationTemplateParameters field contained in this message fragment
    *
    * @return The const reference to the accessor to the OperatorNotificationTemplateParameters field.
    */
  const uci::type::OperatorNotificationMDT::OperatorNotificationTemplateParameters& getOperatorNotificationTemplateParameters() const override;

  /** Returns the accessor to the OperatorNotificationTemplateParameters field contained in this message fragment
    *
    * @return The reference to the accessor to the OperatorNotificationTemplateParameters field.
    */
  uci::type::OperatorNotificationMDT::OperatorNotificationTemplateParameters& getOperatorNotificationTemplateParameters() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setOperatorNotificationTemplateParameters(const uci::type::OperatorNotificationMDT::OperatorNotificationTemplateParameters& accessor) override;

  /** Returns the contents of the message's Title field
    *
    * @return The contents of the Title field
    */
  const uci::type::VisibleString256Type& getTitle() const noexcept override;

  /** Returns the contents of the message's Title field
    *
    * @return The contents of the Title field
    */
  uci::type::VisibleString256Type& getTitle() noexcept override;

  /** Sets the contents of the message's Title field
    *
    * @param value The new value to set the Title field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setTitle(const uci::type::VisibleString256Type& value) override;

  /** Sets the contents of the message's Title field
    *
    * @param value The new value to set the Title field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setTitle(const std::string& value) override;

  /** Sets the contents of the message's Title field
    *
    * @param value The new value to set the Title field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setTitle(const char* value) override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getDetails_() const;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  const uci::type::VisibleString1024Type& getDetails() const override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& getDetails() override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setDetails(const uci::type::VisibleString1024Type& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setDetails(const std::string& value) override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setDetails(const char* value) override;

  /** Returns whether this optional field details_is available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasDetails() const noexcept override;

  /** Enables the optional field such that getDetails will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The value of the optional field
    */
  uci::type::VisibleString1024Type& enableDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearDetails() noexcept override;

  /** Returns the contents of the message's Category field
    *
    * @return The contents of the Category field
    */
  const uci::type::NotificationCategoryEnum& getCategory() const override;

  /** Returns the contents of the message's Category field
    *
    * @return The contents of the Category field
    */
  uci::type::NotificationCategoryEnum& getCategory() override;

  /** Sets the contents of the message's Category field
    *
    * @param accessor The accessor to use to set the Category field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setCategory(const uci::type::NotificationCategoryEnum& accessor) override;

  /** Sets the contents of the message's Category field
    *
    * @param value The new value to set the Category field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setCategory(uci::type::NotificationCategoryEnum::EnumerationItem value) override;

  /** Returns the contents of the message's Severity field
    *
    * @return The contents of the Severity field
    */
  const uci::type::NotificationSeverityEnum& getSeverity() const override;

  /** Returns the contents of the message's Severity field
    *
    * @return The contents of the Severity field
    */
  uci::type::NotificationSeverityEnum& getSeverity() override;

  /** Sets the contents of the message's Severity field
    *
    * @param accessor The accessor to use to set the Severity field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setSeverity(const uci::type::NotificationSeverityEnum& accessor) override;

  /** Sets the contents of the message's Severity field
    *
    * @param value The new value to set the Severity field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setSeverity(uci::type::NotificationSeverityEnum::EnumerationItem value) override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& getLocation_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::Point2D_Type& getLocation() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& getLocation() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setLocation(const uci::type::Point2D_Type& accessor) override;

  /** Returns whether this optional field Locationis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasLocation() const noexcept override;

  /** Enables the optional field such that getLocation will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::Point2D_Type& enableLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearLocation() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NotificationSourceType& getSource_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::NotificationSourceType& getSource() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NotificationSourceType& getSource() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setSource(const uci::type::NotificationSourceType& accessor) override;

  /** Returns whether this optional field Sourceis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasSource() const noexcept override;

  /** Enables the optional field such that getSource will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::NotificationSourceType& enableSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearSource() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperatorNotificationActionType& getActions_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::OperatorNotificationActionType& getActions() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperatorNotificationActionType& getActions() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setActions(const uci::type::OperatorNotificationActionType& accessor) override;

  /** Returns whether this optional field Actionsis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasActions() const noexcept override;

  /** Enables the optional field such that getActions will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::OperatorNotificationActionType& enableActions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearActions() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedInt getCount() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setCount(xs::UnsignedInt value) override;

  /** Returns whether this optional field Countis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasCount() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearCount() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  uci::type::DateTimeTypeValue getOccurrenceTimestamp() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setOccurrenceTimestamp(uci::type::DateTimeTypeValue value) override;

  /** Returns whether this optional field OccurrenceTimestampis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasOccurrenceTimestamp() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearOccurrenceTimestamp() noexcept override;

  /** Returns the value of the optional field accessed by this accesor
    *
    * @return The value of the optional field
    */
  xs::UnsignedByte getPriority() const override;

  /** Sets the value of the optional field accessed by this accesor
    *
    * @param value The value to set the optional field to
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setPriority(xs::UnsignedByte value) override;

  /** Returns whether this optional field Priorityis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasPriority() const noexcept override;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearPriority() noexcept override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AuralAlertType& getAuralAlert_() const;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  const uci::type::AuralAlertType& getAuralAlert() const override;

  /** Returns the accessor that provides access to the contents of the optional field accessed by this accesor
    *
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AuralAlertType& getAuralAlert() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setAuralAlert(const uci::type::AuralAlertType& accessor) override;

  /** Returns whether this optional field AuralAlertis available
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  bool hasAuralAlert() const noexcept override;

  /** Enables the optional field such that getAuralAlert will return the optional field and not throw an exception when
    * invoked.
    *
    * @param type The value to set the optional field to
    * @return The accessor that provides access to the contents of the optional field accessed by this accesor
    */
  uci::type::AuralAlertType& enableAuralAlert(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) override;

  /** Clears the value of the optional field accessed by this accesor
    *
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& clearAuralAlert() noexcept override;

  /** Returns the accessor to the Destinations field contained in this message fragment
    *
    * @return The const reference to the accessor to the Destinations field.
    */
  const uci::type::OperatorNotificationMDT::Destinations& getDestinations() const override;

  /** Returns the accessor to the Destinations field contained in this message fragment
    *
    * @return The reference to the accessor to the Destinations field.
    */
  uci::type::OperatorNotificationMDT::Destinations& getDestinations() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setDestinations(const uci::type::OperatorNotificationMDT::Destinations& accessor) override;

  /** Returns the accessor to the AssociatedMessage field contained in this message fragment
    *
    * @return The const reference to the accessor to the AssociatedMessage field.
    */
  const uci::type::OperatorNotificationMDT::AssociatedMessage& getAssociatedMessage() const override;

  /** Returns the accessor to the AssociatedMessage field contained in this message fragment
    *
    * @return The reference to the accessor to the AssociatedMessage field.
    */
  uci::type::OperatorNotificationMDT::AssociatedMessage& getAssociatedMessage() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::OperatorNotificationMDT& setAssociatedMessage(const uci::type::OperatorNotificationMDT::AssociatedMessage& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<OperatorNotificationMDT> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorNotificationMDT& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::OperatorNotificationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<OperatorNotificationID_Type> operatorNotificationID_Accessor;
  std::unique_ptr<ID_Type> operatorNotificationTemplateID_Accessor;
  std::unique_ptr<OperatorNotificationTemplateParameters> operatorNotificationTemplateParameters_Accessor;
  std::unique_ptr<VisibleString256Type> title_Accessor;
  std::unique_ptr<VisibleString1024Type> details_Accessor;
  std::unique_ptr<NotificationCategoryEnum> category_Accessor;
  std::unique_ptr<NotificationSeverityEnum> severity_Accessor;
  std::unique_ptr<Point2D_Type> location_Accessor;
  std::unique_ptr<NotificationSourceType> source_Accessor;
  std::unique_ptr<OperatorNotificationActionType> actions_Accessor;
  boost::optional<asb_xs::UnsignedInt> count_Accessor;
  boost::optional<DateTimeTypeValue> occurrenceTimestamp_Accessor;
  boost::optional<asb_xs::UnsignedByte> priority_Accessor;
  std::unique_ptr<AuralAlertType> auralAlert_Accessor;
  std::unique_ptr<Destinations> destinations_Accessor;
  std::unique_ptr<AssociatedMessage> associatedMessage_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_OPERATORNOTIFICATIONMDT_H
