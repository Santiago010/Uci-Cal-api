/** @file PO_ComponentType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_TYPE_PO_COMPONENTTYPE_H
#define ASB_UCI_TYPE_PO_COMPONENTTYPE_H

#include <memory>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/base/BoundedList.h"
#include "uci/type/PO_ComponentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

class ComponentID_Type;
class PO_ComponentApertureType;
class PO_ComponentFilterType;
class PO_ComponentFocalPlaneArrayType;
class PO_ComponentLensAssemblyType;
class PO_ComponentProcessingStageType;
class PO_ComponentProductGeneratorType;

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentType : public virtual uci::type::PO_ComponentType {
public:
  /** One type of Passive Optical Subsystem component is the Focal Plane Array (FPA). An FPA is an array of collection
    * elements that are used to collect and record the number of photons emitted by some surface, e.g. the surface of the
    * earth. FPAs are commonly configured as either linear or grid arrays. A Passive Optical sensor can have any number of
    * FPAs. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using FocalPlaneArray = asb_uci::base::BoundedList<uci::type::PO_ComponentFocalPlaneArrayType, uci::type::accessorType::pO_ComponentFocalPlaneArrayType, asb_uci::type::PO_ComponentFocalPlaneArrayType>;

  /** One type of Passive Optical Subsystem Component is the optical lens. A lens is placed within the Passive Optical
    * sensor's optical pathway and affects (refract to a point or diverge outwards) the path of the photons passing through
    * the lens on their way to the sensor's various Focal Plane Arrays (FPAs). [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Lens = asb_uci::base::BoundedList<uci::type::PO_ComponentLensAssemblyType, uci::type::accessorType::pO_ComponentLensAssemblyType, asb_uci::type::PO_ComponentLensAssemblyType>;

  /** Indicates a space through which light passes in an optical or photographic instrument, especially the variable
    * opening by which light enters a camera. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using Aperture = asb_uci::base::BoundedList<uci::type::PO_ComponentApertureType, uci::type::accessorType::pO_ComponentApertureType, asb_uci::type::PO_ComponentApertureType>;

  /** One type of Passive Optical Subsystem Component is the optical filter. A filter is placed within the Passive Optical
    * sensor's optical pathway and stops photons of a certain frequency (possibly of all frequencies) from passing through
    * the filter on their way to the sensor's various Focal Plane Arrays (FPAs). [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  using Filter = asb_uci::base::BoundedList<uci::type::PO_ComponentFilterType, uci::type::accessorType::pO_ComponentFilterType, asb_uci::type::PO_ComponentFilterType>;

  /** Passive Optical sensors generally support a processing engine that takes the raw data collected from the Focal Plane
    * Arrays (FPAs) and processes that data in various way in order to produce an image product or products. Such engines
    * can be viewed as pipelines in which each stage in the pipeline takes the imagery data produced by one or more stages
    * earlier in the pipeline, processes that data in some fashion, and then sends the updated imagery data to the one of
    * more stages further down the pipeline. This field specifies the stages that are available in this sensor's processing
    * pipeline and whether the stage can be manually configured. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  using ProcessingStage = asb_uci::base::BoundedList<uci::type::PO_ComponentProcessingStageType, uci::type::accessorType::pO_ComponentProcessingStageType, asb_uci::type::PO_ComponentProcessingStageType>;

  /** Passive Optical sensors have the capability of producing one or more products using the raw optical data collected by
    * their focal plane arrays. This field lists the products that can be generated by this sensor. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  using ProductGenerator = asb_uci::base::BoundedList<uci::type::PO_ComponentProductGeneratorType, uci::type::accessorType::pO_ComponentProductGeneratorType, asb_uci::type::PO_ComponentProductGeneratorType>;

  /** The constructor */
  PO_ComponentType();

  /** The copy constructor
    *
    * @param rhs The PO_ComponentType to copy from
    */
  PO_ComponentType(const PO_ComponentType& rhs) = delete;

  /** The move constructor
    *
    * @param rhs The PO_ComponentType to move from
    */
  PO_ComponentType(PO_ComponentType&& rhs) = delete;

  /** The assignment operator
    *
    * @param rhs The PO_ComponentType to copy from
    * @return The PO_ComponentType that was assigned
    */
  PO_ComponentType& operator=(const PO_ComponentType& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The PO_ComponentType to move from
    * @return The PO_ComponentType that was assigned
    */
  PO_ComponentType& operator=(PO_ComponentType&& rhs) = delete;

  /** The destructor */
  virtual ~PO_ComponentType();

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ComponentType whose contents are to be used to set this
    *      uci::type::PO_ComponentType's contents.
    */
  void copy(const uci::type::PO_ComponentType& accessor) override;

  /** Performs a deep copy of the message data from the specified accessor into the object being operated on by copy(). Any
    * message data originally held by this object will be freed prior to the copy
    *
    * @param accessor The uci::type::PO_ComponentType whose contents are to be used to set this
    *      uci::type::PO_ComponentType's contents.
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const uci::type::PO_ComponentType& accessor, bool checkIfDerivation);

  /** Resets the contents of this object returning these contents to their original state. */
  void reset() noexcept override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The const reference to the accessor to the ComponentID field.
    */
  const uci::type::ComponentID_Type& getComponentID() const override;

  /** Returns the accessor to the ComponentID field contained in this message fragment
    *
    * @return The reference to the accessor to the ComponentID field.
    */
  uci::type::ComponentID_Type& getComponentID() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentType& setComponentID(const uci::type::ComponentID_Type& accessor) override;

  /** Returns the accessor to the FocalPlaneArray field contained in this message fragment
    *
    * @return The const reference to the accessor to the FocalPlaneArray field.
    */
  const uci::type::PO_ComponentType::FocalPlaneArray& getFocalPlaneArray() const override;

  /** Returns the accessor to the FocalPlaneArray field contained in this message fragment
    *
    * @return The reference to the accessor to the FocalPlaneArray field.
    */
  uci::type::PO_ComponentType::FocalPlaneArray& getFocalPlaneArray() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentType& setFocalPlaneArray(const uci::type::PO_ComponentType::FocalPlaneArray& accessor) override;

  /** Returns the accessor to the Lens field contained in this message fragment
    *
    * @return The const reference to the accessor to the Lens field.
    */
  const uci::type::PO_ComponentType::Lens& getLens() const override;

  /** Returns the accessor to the Lens field contained in this message fragment
    *
    * @return The reference to the accessor to the Lens field.
    */
  uci::type::PO_ComponentType::Lens& getLens() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentType& setLens(const uci::type::PO_ComponentType::Lens& accessor) override;

  /** Returns the accessor to the Aperture field contained in this message fragment
    *
    * @return The const reference to the accessor to the Aperture field.
    */
  const uci::type::PO_ComponentType::Aperture& getAperture() const override;

  /** Returns the accessor to the Aperture field contained in this message fragment
    *
    * @return The reference to the accessor to the Aperture field.
    */
  uci::type::PO_ComponentType::Aperture& getAperture() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentType& setAperture(const uci::type::PO_ComponentType::Aperture& accessor) override;

  /** Returns the accessor to the Filter field contained in this message fragment
    *
    * @return The const reference to the accessor to the Filter field.
    */
  const uci::type::PO_ComponentType::Filter& getFilter() const override;

  /** Returns the accessor to the Filter field contained in this message fragment
    *
    * @return The reference to the accessor to the Filter field.
    */
  uci::type::PO_ComponentType::Filter& getFilter() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentType& setFilter(const uci::type::PO_ComponentType::Filter& accessor) override;

  /** Returns the accessor to the ProcessingStage field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProcessingStage field.
    */
  const uci::type::PO_ComponentType::ProcessingStage& getProcessingStage() const override;

  /** Returns the accessor to the ProcessingStage field contained in this message fragment
    *
    * @return The reference to the accessor to the ProcessingStage field.
    */
  uci::type::PO_ComponentType::ProcessingStage& getProcessingStage() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentType& setProcessingStage(const uci::type::PO_ComponentType::ProcessingStage& accessor) override;

  /** Returns the accessor to the ProductGenerator field contained in this message fragment
    *
    * @return The const reference to the accessor to the ProductGenerator field.
    */
  const uci::type::PO_ComponentType::ProductGenerator& getProductGenerator() const override;

  /** Returns the accessor to the ProductGenerator field contained in this message fragment
    *
    * @return The reference to the accessor to the ProductGenerator field.
    */
  uci::type::PO_ComponentType::ProductGenerator& getProductGenerator() override;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents
    *
    * @param accessor The accessor to use to set the contents of the message fragment that this accessor provides access
    *      to.
    * @return A reference to the object on which this method was called.
    */
  uci::type::PO_ComponentType& setProductGenerator(const uci::type::PO_ComponentType::ProductGenerator& accessor) override;

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<PO_ComponentType> create(uci::base::accessorType::AccessorType type);

  /** 
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentType& accessor, std::string& nodeName, std::string& nsPrefix, bool topLevel = false);

  /** 
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const uci::type::PO_ComponentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, bool createNode = true, bool addTypeAttribute = false, bool checkIfDerivation = true, bool topLevel = false);

private:
  std::unique_ptr<ComponentID_Type> componentID_Accessor;
  std::unique_ptr<FocalPlaneArray> focalPlaneArray_Accessor;
  std::unique_ptr<Lens> lens_Accessor;
  std::unique_ptr<Aperture> aperture_Accessor;
  std::unique_ptr<Filter> filter_Accessor;
  std::unique_ptr<ProcessingStage> processingStage_Accessor;
  std::unique_ptr<ProductGenerator> productGenerator_Accessor;

};

} // namespace type

} // namespace asb_uci

#endif // ASB_UCI_TYPE_PO_COMPONENTTYPE_H
