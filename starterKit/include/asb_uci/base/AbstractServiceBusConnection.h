/** @file AbstractServiceBusConnection.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_ABSTRACTSERVICEBUSCONNECTION_H
#define ASB_UCI_BASE_ABSTRACTSERVICEBUSCONNECTION_H

#include <cstdint>
#include <map>
#include <memory>
#include <mutex>
#include <ostream>
#include <string>

#include "ConnectionMonitor.h"
#include "AbstractServiceBusConnection.h"
#include "ConfigReader.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/AbstractServiceBusConnectionStatusListener.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UUID.h"
#include "Externalizer.h"
#include "MessageReader.h"
#include "UUIDFactory.h"
#include <typeinfo> 
#include <log4cpp/Category.hh>//Libreria para los Logs 
#include <log4cpp/PropertyConfigurator.hh> //libreria para los Logs

/**  */
namespace cms {

class Session;
} // namespace cms

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

class ConfigReader;
class ConnectionStatus;
class ReaderBase;
class WriterBase;

/** The AbstractServiceBusConnection provides the fundamental support for sending and receiving messages */
class AbstractServiceBusConnection : public uci::base::AbstractServiceBusConnection {
public:

  enum class AbstractServiceBusConnectionStateEnum {
          INITIALIZING,
          DEGRADED,
          INOPERABLE,
          FAILED,
          NORMAL
          // Otros estados...
      };

  /** The constructor
    *
    * @param asbId Identifier provided by the user when obtaining this instance of the AbstractServiceBusConnection class
    */
  AbstractServiceBusConnection(std::string asbId);

  asb_uci::base::Externalizer getExternalizer(std::string externalizerType);

  /** The copy constructor
    *
    * @param rhs The AbstractServiceBusConnection to copy from
    */
  AbstractServiceBusConnection(const AbstractServiceBusConnection& rhs) ;

  /** The move constructor
    *
    * @param rhs The AbstractServiceBusConnection to move from
    */
  AbstractServiceBusConnection(AbstractServiceBusConnection&& rhs) ;

  /** The assignment operator
    *
    * @param rhs The AbstractServiceBusConnection to copy from
    * @return The AbstractServiceBusConnection that was assigned
    */
  AbstractServiceBusConnection& operator=(const AbstractServiceBusConnection& rhs) = delete;

  /** The move assignment operator
    *
    * @param rhs The AbstractServiceBusConnection to move from
    * @return The AbstractServiceBusConnection that was assigned
    */
  AbstractServiceBusConnection& operator=(AbstractServiceBusConnection&& rhs) = delete;

  /** The destructor */
  virtual ~AbstractServiceBusConnection() = default;

  /** The init method is used to initialize this abstract service bus connection for use by the service having the
    * specified UUID. An exception is thrown if the service is not allowed to use this abstract service bus connection or
    * if one of the required initialization activities fail.
    *
    * @param serviceIdentifier Identifies the service instantiating this instance of the AbstractServiceBusConnection
    * @param firstConnection Indicates if this connection is first to be initiated
    */
  void init(const std::string& serviceIdentifier, bool firstConnection);

  /** The shutdown method is used to shutdown this Abstract Service Bus Connection. Once shutdown, this Abstract Service
    * Bus Connection can no longer be used.In addition, any factory associated with this Abstract Service Bus Connection
    * will no longer be usable.
    */
  void shutdown() override;

  /** This method will return the system label, i.e. the name of the system.
    *
    * @return The system's label
    */
  std::string getMySystemLabel() const override;

  /** Returns the UUID that provides access to the UUID of the system that this AbstractServiceBusConnection is executing
    * on.
    *
    * @return The system UUID.
    */
  uci::base::UUID getMySystemUUID() const override;

  /** Returns the UUID of the service that is invoking this method.
    *
    * @return The UUID of the Service that is invoking this method.
    */
  uci::base::UUID getMyServiceUUID() const override;

  /** Returns the UUID of the subsystem that this AbstractServiceBusConnection is executing on.
    *
    * @return The UUID of the Subsystem that this AbstractServiceBusConnection is executing on.
    */
  uci::base::UUID getMySubsystemUUID() const override;

  /** Returns the UUID of the component having the specified name.
    *
    * @param name The name of the component whose UUID is to be returned. The name must uniquely identify the component to
    *      avoid collision with other components and to retrieve the appropriate UUID.
    * @return The UUID of the component associated with the specified name.
    */
  uci::base::UUID getMyComponentUUID(const std::string& name) const override;

  /** Returns the UUID of the capability having the specified name.
    *
    * @param name The name of the capability whose UUID is to be returned. The name must uniquely identify the capability
    *      to avoid collision with other capabilities and to retrieve the appropriate UUID.
    * @return El UUID de la capacidad asociada con el nombre especificado.
    */
  uci::base::UUID getMyCapabilityUUID(const std::string& name) const override;

  /** Returns the abstract service bus connection version info
    *
    * @return The abstract service bus connection version info
    */
  std::string getAbstractServiceBusConnectionVersion() const override;

  /** Returns the current status of this Abstract Service Bus Connection.
    *
    * @return The status of the Abstract Service Bus Connection.
    */
  uci::base::AbstractServiceBusConnection::AbstractServiceBusConnectionStatusData getStatus() const override;

  /** Adds a listener to this Abstract Service Bus Connection to process changes in the operational status.
    *
    * @param listener The listener that will process changes to the operational status.
    */
  void addStatusListener(uci::base::AbstractServiceBusConnectionStatusListener& listener) override;

  /** Removes the specified listener from this Abstract Service Bus Connection.
    *
    * @param listener The listener that is to be removed from this Abstract Service Bus Connection.
    */
  void removeStatusListener(uci::base::AbstractServiceBusConnectionStatusListener& listener) override;

  /** Returns the ActiveMQ Reader Session
    *
    * @param topic The topic associated with this reader.
    * @return The CMS Connection associated with this ASB
    */
  cms::Session* getReaderSession(const std::string& topic);

  /** Returns the ActiveMQ Writer Session
    *
    * @param topic The topic associated with this writer.
    * @return The CMS Connection associated with this ASB
    */
  cms::Session* getWriterSession(const std::string& topic);

  /** Returns the string form of the configuration parameter from file
    *
    * @param param The string identifier for the parameter
    * @param defaultParam The default value to return if the parameter is not found
    * @return The configuration parameter
    */
  std::string getConfigParam(const std::string& param, const std::string& defaultParam);

  /** Returns the integer form of the configuration parameter from file
    *
    * @param param The string identifier for the parameter
    * @param defaultParam The default value to return if the parameter is not found
    * @return The configuration parameter
    */
  std::int32_t getConfigParam(const std::string& param, std::int32_t defaultParam);

  /** Add reader to list of readers
    *
    * @param reader The reader
    */
  void registerReader(asb_uci::base::ReaderBase* reader);

  /** Add writer to list of writers
    *
    * @param writer The writer
    */
  void registerWriter(asb_uci::base::WriterBase* writer);

  /** Remove reader from list of readers
    *
    * @param reader The reader
    */
  void unRegisterReader(asb_uci::base::ReaderBase* reader);

  /** Remove writer from list of writers
    *
    * @param writer The writer
    */
  void unRegisterWriter(asb_uci::base::WriterBase* writer);

  uci::base::UUID getNilUUID();

  uci::base::UUID createVersion3UUID(std::string name);

  uci::base::UUID createVersion3UUID(uci::base::UUID namesp,std::string name);
  uci::base::UUID generateUUID();

  template <typename T>
  asb_uci::base::MessageReader<T> createReader(std::string target,const std::shared_ptr<T>& type);


private:
  std::string findConnectionNameForTopic(std::string target);
  static log4cpp::Category& root;
  asb_uci::base::UUIDFactory uuidFactory;
  asb_uci::base::Externalizer externalizer;
  std::string asbId;
  std::unique_ptr<ConfigReader> configReader;
  std::shared_ptr<ConnectionStatus> connectionStatus;
  struct ConnectionComponents;
  using ConnectionComponentsMap = std::map<std::string, std::shared_ptr<ConnectionComponents> >;
  ConnectionComponentsMap connectionComponentsMap;
};

using AsbMapType = std::map<std::string, asb_uci::base::AbstractServiceBusConnection*>;
using AsbMapData = std::pair<std::mutex*, asb_uci::base::AsbMapType*>;
/** Returns a reference to the map of asb objects
  *
  * @return Pointers to mutex and map of asb objects
  */
AsbMapData getAsbMap();

/** Stream an AbstractServiceBusConnectionStateEnum to std::ostream
  *
  * @param oStream ostream
  * @param state AbstractServiceBusConnectionStateEnum
  * @return ostream
  */
std::ostream& operator<<(std::ostream& oStream, const AbstractServiceBusConnection::AbstractServiceBusConnectionStateEnum& state);

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_ABSTRACTSERVICEBUSCONNECTION_H
