/** @file EnumAccessor.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_ENUMACCESSOR_H
#define ASB_UCI_BASE_ENUMACCESSOR_H

#include <sstream>

#include <boost/property_tree/ptree.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../util/EnumTypesTranslator.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

/** . */
template<typename T_UCI, uci::base::accessorType::AccessorType accessor_type>
class EnumAccessor : public virtual T_UCI {
public:
  /** The constructor */
  EnumAccessor() = default;

  /** The copy constructor
    *
    * @param rhs The EnumAccessor to copy from
    */
  EnumAccessor(const EnumAccessor& rhs) = default;

  /** The move constructor
    *
    * @param rhs The EnumAccessor to move from
    */
  EnumAccessor(EnumAccessor&& rhs) = default;

  /** The assignment operator
    *
    * @param rhs The EnumAccessor to copy from
    * @return The EnumAccessor that was assigned
    */
  EnumAccessor& operator=(const EnumAccessor& rhs) = default;

  /** The move assignment operator
    *
    * @param rhs The EnumAccessor to move from
    * @return The EnumAccessor that was assigned
    */
  EnumAccessor& operator=(EnumAccessor&& rhs) = default;

  /** The destructor */
  virtual ~EnumAccessor() = default;

  /** Sets the value of the Enumeration
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this enumeration
    */
  void setValue(typename T_UCI::EnumerationItem item) override {
    if ((item == T_UCI::enumNotSet) || T_UCI::isValid(item)) {
      data = item;
      return;
    }
    std::ostringstream errMsg;
    errMsg << "Error in " << asb_uci::util::EnumTypesTranslator::translateFromAccessorType(accessor_type) << "::setValue(): enum value is not valid (" << item << ")";
    throw uci::base::UCIException(errMsg);
  }

  /** Returns the value of this enumeration
    *
    * @param testForValidity Specifies whether this enumeration should be validated (true)
    * @return The value of this enumeration
    */
  typename T_UCI::EnumerationItem getValue(bool testForValidity = true) const override {
    if (!testForValidity || (data == T_UCI::enumNotSet) || T_UCI::isValid(data)) {
      return data;
    }
    std::ostringstream errMsg;
    errMsg << "Error in " << asb_uci::util::EnumTypesTranslator::translateFromAccessorType(accessor_type) << "::getValue(): enum value is not valid (" << data << ")";
    throw uci::base::UCIException(errMsg);
  }

  /** Returns the name of the enumeration item.
    *
    * @return The name of the enumeration item.
    */
  std::string toName() const override {
    return T_UCI::toName(getValue(false));
  }

  /** Copies the enumeration
    *
    * @param accessor .
    */
  void copy(const T_UCI& accessor) {
    copyImpl(accessor, false);
  }

  /** Copies the enumeration
    *
    * @param accessor .
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const T_UCI& accessor, bool /*checkIfDerivation*/) {
    if (&accessor != this) {
      setValue(accessor.getValue(false));
    }
  }

  /** Resets the enumeration */
  void reset() noexcept override {
    data = T_UCI::enumNotSet;
  }

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<EnumAccessor> create(const uci::base::accessorType::AccessorType type) {
    const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? accessor_type : type};
    return (requestedType == accessor_type) ? boost::make_unique<EnumAccessor>() : nullptr;
  }

  /** .
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    */
  static void deserialize(const boost::property_tree::ptree& propTree, T_UCI& accessor, std::string& nodeName, std::string& /*nsPrefix*/, const bool /*topLevel*/ = false) {
    nodeName = asb_uci::util::EnumTypesTranslator::translateFromAccessorType(accessor_type);
    for (const boost::property_tree::ptree::value_type& valueType : propTree.get_child("")) {
      if (valueType.first != "<xmlattr>") {
        if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
          accessor.setValueFromName(*value);
        }
      }
    }
  }

  /** .
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const T_UCI& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode = true, const bool /*addTypeAttribute*/ = false, const bool /*checkIfDerivation*/ = true, const bool /*topLevel*/ = false) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    node.add(nodeName, accessor.toName());
    if (createNode) {
      propTree.add_child(nodeName, node);
    }
    return asb_uci::util::EnumTypesTranslator::translateFromAccessorType(accessor_type);
  }

private:
  typename T_UCI::EnumerationItem data{T_UCI::enumNotSet};

};

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_ENUMACCESSOR_H
