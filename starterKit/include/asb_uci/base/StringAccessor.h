/** @file StringAccessor.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_STRINGACCESSOR_H
#define ASB_UCI_BASE_STRINGACCESSOR_H

#include <memory>
#include <string>

#include <boost/smart_ptr/make_unique.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/StringAccessor.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

/** The StringAccessor is used to provide access to all strings. */
class StringAccessor : public virtual uci::base::StringAccessor {
public:
  /** The constructor */
  StringAccessor() = default;

  /** The copy constructor
    *
    * @param rhs The StringAccessor to copy from
    */
  StringAccessor(const StringAccessor& rhs) = default;

  /** The move constructor
    *
    * @param rhs The StringAccessor to move from
    */
  StringAccessor(StringAccessor&& rhs) = default;

  /** The assignment operator
    *
    * @param rhs The StringAccessor to copy from
    * @return The StringAccessor that was assigned
    */
  StringAccessor& operator=(const StringAccessor& rhs) = default;

  /** The move assignment operator
    *
    * @param rhs The StringAccessor to move from
    * @return The StringAccessor that was assigned
    */
  StringAccessor& operator=(StringAccessor&& rhs) = default;

  /** The destructor */
  virtual ~StringAccessor() = default;

  /** Copies the accessor
    *
    * @param accessor .
    */
  void copy(const StringAccessor& accessor) {
    copyImpl(accessor, false);
  }

  /** Copies the accessor
    *
    * @param accessor .
    * @param checkIfDerivation Check if accessor to copy is a derived type.
    */
  void copyImpl(const StringAccessor& accessor, bool /*checkIfDerivation*/) {
    if (&accessor != this) {
      data = accessor.data;
    }
  }

  /** Resets the accessor */
  void reset() noexcept override {
    data.clear();
  }

  /** Returns the string accessed by this StringAccessor as a C++ standard library string
    *
    * @return The string access by this StringAccessor returned as a C++ standard library string.
    */
  std::string str() const override {
    return data;
  }

  /** Returns the string accessed by this StringAccessor as a C-string (i.e. const char *). The string that is returned is
    * owned by this StringAccessor. Thus the returned pointer should never be deleted. Doing so will produce undefined
    * results.
    *
    * @return The string access by this StringAccessor returned as a C-string (i.e. const char*). This pointer should never
    *      be deleted.
    * @note The returned pointer should not be deleted as the memory used to hold the C-string is owned by the CAL.
    */
  const char* c_str() const noexcept override {
    return data.c_str();
  }

  /** Sets the string accessed by this StringAccessor to the contents of the specified value which is a C++ standard
    * library string
    *
    * @param value The C++ standard library string whose contents are to be used to set the string accessed by this
    *      StringAccessor
    * @return A reference to this StringAccessor.
    */
  StringAccessor& setStringValue(const std::string& value) override {
    data = value;
    return *this;
  }

  /** Sets the string accessed by this StringAccessor to the specified value which is a C-string (i.e. const char *)
    *
    * @param value The C-string (i.e. const char *) whose contents are to be used to set the string accessed by this
    *      StringAccessor
    * @return A reference to this StringAccessor.
    */
  StringAccessor& setStringValue(const char* value) override {
    data = value;
    return *this;
  }

  /** 
    *
    * @param type .
    * @return .
    */
  static std::unique_ptr<StringAccessor> create(const uci::base::accessorType::AccessorType /*type*/) {
    return boost::make_unique<StringAccessor>();
  }

private:
  std::string data;
};

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_STRINGACCESSOR_H
