/** @file UUIDGenerator.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_UUIDGENERATOR_H
#define ASB_UCI_BASE_UUIDGENERATOR_H

#include <cstdint>
#include <memory>
#include <mutex>
#include <string>

#include "ConfigReader.h"
#include <boost/random/random_device.hpp>
#include <boost/uuid/random_generator.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/UUID.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

class ConfigReader;

/**  */
class UUIDGenerator {
public:
  /** The constructor */
  UUIDGenerator();

  /** .
    *
    * @param nspace .
    * @param name .
    * @return .
    */
  static uci::base::UUID createVersion3UUID(const uci::base::UUID& nspace, const std::string& name);

  /** .
    *
    * @param name .
    * @return .
    */
  uci::base::UUID createVersion3UUID(const std::string& name) const;

  /** .
    *
    * @return .
    */
  uci::base::UUID generateType4UUID();

  /** .
    *
    * @return .
    */
  uci::base::UUID generateUUID();

  uci::base::UUID getNamespaceUUID();

  /** .
    *
    * @return .
    */
  ConfigReader& getConfig() const;

private:
  /** .
    *
    * @return .
    */
  uci::base::UUID generateType1UUID();

  std::unique_ptr<ConfigReader> configReader;
  std::uint16_t uuidClockSequence;
  std::uint64_t uuidNodeID;
  std::mutex uuidGeneratorLock;
  boost::random::random_device uuidRandomDevice;
  boost::uuids::random_generator uuidRandomGenerator;
  std::uint64_t uuidTimestampCount;
  std::uint64_t uuidTimestampPrevious;
};

/** .
  *
  * @return .
  */
UUIDGenerator& getUUIDGenerator();

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_UUIDGENERATOR_H
