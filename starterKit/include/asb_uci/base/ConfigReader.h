/** @file ConfigReader.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_CONFIGREADER_H
#define ASB_UCI_BASE_CONFIGREADER_H

#include <map>
#include <string>

#include <boost/property_tree/ptree.hpp>

#include "uci/base/UUID.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

/** . */
class ConfigReader {
public:
  using ConnectionMap = std::map<std::string, std::string>;
  using ExternalizerMap = std::map<std::string, std::string>;
  using QosParamMap = std::map<std::string, std::string>;
  using TopicMap = std::map<std::string, std::string>;
  using UUIDMap = std::map<std::string, uci::base::UUID>;

  enum class UUIDGenerationType {
    RANDOM,
    TIME
  };

  /** The constructor
    *
    * @param serviceIdentifier .
    */
  ConfigReader(const std::string& serviceIdentifier) {
    parseConfig(serviceIdentifier);
  }

  /** .
    *
    * @return .
    */
  const UUIDMap& getCapabilityIds() const noexcept {
    return capabilityIds;
  }

  /** .
    *
    * @return .
    */
  const UUIDMap& getComponentIds() const noexcept {
    return componentIds;
  }

  /** .
    *
    * @return .
    */
  const ConnectionMap& getConnections() const noexcept {
    return connections;
  }

  /** .
    *
    * @return .
    */
  const std::string& getDefaultConnection() const noexcept {
    return defaultConnection;
  }

  /** .
    *
    * @return .
    */
  const ExternalizerMap& getExternalizers() const noexcept {
    return externalizers;
  }

  /** .
    *
    * @return .
    */
  const QosParamMap& getQosParams() const noexcept {
    return qosParams;
  }

  /** .
    *
    * @return .
    */
  uci::base::UUID getServiceId() const noexcept {
    return serviceId;
  }

  /** .
    *
    * @return .
    */
  uci::base::UUID getSubsystemId() const noexcept {
    return subsystemId;
  }

  /** .
    *
    * @return .
    */
  uci::base::UUID getSystemId() const noexcept {
    return systemId;
  }

  /** .
    *
    * @return .
    */
  const std::string& getSystemLabel() const noexcept {
    return systemLabel;
  }

  /** .
    *
    * @return .
    */
  const TopicMap& getTopics() const noexcept {
    return topics;
  }

  /** .
    *
    * @return .
    */
  const std::string& getUUIDGenerationNamespaceID() const noexcept {
    return uuidGenerationNamespaceID;
  }

  /** .
    *
    * @return .
    */
  const std::string& getUUIDGenerationNamespaceName() const noexcept {
    return uuidGenerationNamespaceName;
  }

  /** .
    *
    * @return .
    */
  uci::base::UUID getUUIDGenerationNamespaceUUID() const noexcept {
    return uuidGenerationNamespaceUUID;
  }

  /** .
    *
    * @return .
    */
  UUIDGenerationType getUUIDGenerationType() const noexcept {
    return uuidGenerationType;
  }

  /** .
    *
    * @return .
    */
  const std::string& getUUIDTimeGenerationClock() const noexcept {
    return uuidTimeGenerationClock;
  }

private:
  /** .
    *
    * @param serviceIdentifier .
    */
  void parseConfig(const std::string& serviceIdentifier);

  /** Parse a UUID in the configuration file.
    *
    * @param propTree The property tree to parse.
    * @return The UUID
    */
  boost::optional<uci::base::UUID> parseConfigUUID(const boost::property_tree::ptree& propTree) const;

  UUIDMap capabilityIds;
  UUIDMap componentIds;
  ConnectionMap connections;
  std::string defaultConnection;
  ExternalizerMap externalizers;
  bool parseUUIDs{true};
  QosParamMap qosParams;
  uci::base::UUID serviceId;
  uci::base::UUID subsystemId;
  uci::base::UUID systemId;
  std::string systemLabel;
  TopicMap topics;
  std::string uuidGenerationNamespaceID;
  std::string uuidGenerationNamespaceName;
  uci::base::UUID uuidGenerationNamespaceUUID;
  UUIDGenerationType uuidGenerationType{UUIDGenerationType::RANDOM};
  std::string uuidTimeGenerationClock;
};

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_CONFIGREADER_H
