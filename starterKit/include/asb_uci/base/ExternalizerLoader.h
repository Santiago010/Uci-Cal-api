/** @file ExternalizerLoader.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_EXTERNALIZERLOADER_H
#define ASB_UCI_BASE_EXTERNALIZERLOADER_H

#include <memory>

#include "uci/base/ExternalizerLoader.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

class ConfigReader;

/** The ExternalizerLoader is responsible to obtaining and removing access to implementations of the Externalizer class. */
class ExternalizerLoader : public uci::base::ExternalizerLoader {
public:
  /** The constructor */
  ExternalizerLoader() = default;

  /** The copy constructor
    *
    * @param rhs The ExternalizerLoader to copy from
    */
  ExternalizerLoader(const ExternalizerLoader& rhs) = default;

  /** The move constructor
    *
    * @param rhs The ExternalizerLoader to move from
    */
  ExternalizerLoader(ExternalizerLoader&& rhs) = default;

  /** The assignment operator
    *
    * @param rhs The ExternalizerLoader to copy from
    * @return The ExternalizerLoader that was assigned
    */
  ExternalizerLoader& operator=(const ExternalizerLoader& rhs) = default;

  /** The move assignment operator
    *
    * @param rhs The ExternalizerLoader to move from
    * @return The ExternalizerLoader that was assigned
    */
  ExternalizerLoader& operator=(ExternalizerLoader&& rhs) = default;

  /** The destructor */
  virtual ~ExternalizerLoader() = default;

  /** This method provides access to an Externalizer of the specified type.
    *
    * @param encoding The encoding of the Externalizer.
    * @param schemaVersion The OMS Schema Definition version of the Externalizer.
    * @param calApiVersion The OMS CAL API version of the Externalizer.
    * @return A pointer to an Externalizer that provides access to an Externalizer of the specified type.
    */
  uci::base::Externalizer* getExternalizer(const std::string& encoding, const std::string& schemaVersion, const std::string& calApiVersion) override;

  /** This method destroys the specified Externalizer instance.
    *
    * @param externalizer The Externalizer to be destroyed.
    */
  void destroyExternalizer(uci::base::Externalizer* externalizer) override;

private:
  /**  */
  class ExternalizerLoaderConfig {
  public:
    /** The constructor */
    ExternalizerLoaderConfig();

    std::unique_ptr<ConfigReader> configReader;
  };

  static ConfigReader& getConfig();

};

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_EXTERNALIZERLOADER_H
