/** @file ConnectionStatus.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_CONNECTIONSTATUS_H
#define ASB_UCI_BASE_CONNECTIONSTATUS_H

#include <list>
#include <mutex>
#include <string>
#include <thread>

#include "WaitQueue.h"
#include "AbstractServiceBusConnection.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

class ReaderBase;
class WriterBase;

/** . */
class ConnectionStatus {
public:
  /** .
    *
    * @return .
    */
  uci::base::AbstractServiceBusConnection::AbstractServiceBusConnectionStatusData getStatus() const;

  /** .
    *
    * @param state .
    * @param stateDetail .
    */
  void updateStatus(uci::base::AbstractServiceBusConnection::AbstractServiceBusConnectionStateEnum state, const std::string& stateDetail);

  /** Adds a listener to this Abstract Service Bus Connection to process changes in the operational status.
    *
    * @param listener The listener that will process changes to the operational status.
    */
  void addStatusListener(uci::base::AbstractServiceBusConnectionStatusListener& listener);

  /** Removes the specified listener from this Abstract Service Bus Connection.
    *
    * @param listener The listener that is to be removed from this Abstract Service Bus Connection.
    */
  void removeStatusListener(uci::base::AbstractServiceBusConnectionStatusListener& listener);

  /** .
    *
    * @param reader .
    */
  void registerReader(ReaderBase* reader);

  /** .
    *
    * @param writer .
    */
  void registerWriter(WriterBase* writer);

  /** .
    *
    * @param reader .
    */
  void unRegisterReader(ReaderBase* reader);

  /** .
    *
    * @param writer .
    */
  void unRegisterWriter(WriterBase* writer);

  /** . */
  void close();

private:
  std::list<ReaderBase*> readers;
  mutable std::mutex readersLock;
  uci::base::AbstractServiceBusConnection::AbstractServiceBusConnectionStateEnum state{uci::base::AbstractServiceBusConnection::INITIALIZING};
  std::string stateDetail;
  mutable std::mutex stateDataLock;
  std::list<WriterBase*> writers;
  mutable std::mutex writersLock;

  /** . */
  class AdvisoryStatusListener {
  public:
    /** The constructor
      *
      * @param listener .
      */
    AdvisoryStatusListener(uci::base::AbstractServiceBusConnectionStatusListener& listener);

    /** .
      *
      * @return .
      */
    uci::base::AbstractServiceBusConnectionStatusListener& getListener() const noexcept {
      return listener;
    }

    /** .
      *
      * @param status .
      */
    void push(const uci::base::AbstractServiceBusConnection::AbstractServiceBusConnectionStatusData& status);

    /** . */
    void shutdown();

  private:
    /** . */
    void process();

    uci::base::AbstractServiceBusConnectionStatusListener& listener;
    std::thread listenerThread;
    WaitQueue<std::shared_ptr<uci::base::AbstractServiceBusConnection::AbstractServiceBusConnectionStatusData>> queue;
    bool running{true};
  };

  std::list<std::unique_ptr<ConnectionStatus::AdvisoryStatusListener>> listeners;
  mutable std::mutex listenersLock;

};

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_CONNECTIONSTATUS_H
