/** @file WaitQueue.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef ASB_UCI_BASE_WAITQUEUE_H
#define ASB_UCI_BASE_WAITQUEUE_H

#include <condition_variable>
#include <cstdlib>
#include <deque>
#include <mutex>

#include <boost/none.hpp>
#include <boost/optional/optional.hpp>

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

/** . */
template<typename T>
class WaitQueue {
public:
  /** remove all elements in the queue */
  void clear() {
    const std::lock_guard<std::mutex> lock{mutex};
    queue.clear();
  }

  /** Query if the queue is empty or not
    *
    * @return return true if empty, false if not
    */
  bool empty() const {
    const std::lock_guard<std::mutex> lock{mutex};
    return queue.empty();
  }

  /** Add an element to the queue and notify a waiting reader thread
    *
    * @param data The data element to be added to the queue.
    */
  void push(T data) {
    const std::lock_guard<std::mutex> lock{mutex};
    queue.push_back(std::move(data));
    conditionVariable.notify_one();
  }

  /** return number of elements in the queue
    *
    * @return return number of elements in the queue
    */
  std::size_t size() const {
    const std::lock_guard<std::mutex> lock{mutex};
    return queue.size();
  }

  /** get an element from the queue if it is not empty
    *
    * @return return an optional containing the returned element
    */
  boost::optional<T> try_pop() {
    const std::lock_guard<std::mutex> lock{mutex};
    if (queue.empty()) {
      return boost::none;
    }
    T popped_value{queue.front()};
    queue.pop_front();
    return popped_value;
  }

  /** get an element from the queue if it is not empty
    *
    * @return return data element added by another thread
    */
  T wait_and_pop() {
    std::unique_lock<std::mutex> lock{mutex};;
    conditionVariable.wait(lock, [this] {return !queue.empty();});
    T popped_value{queue.front()};
    queue.pop_front();
    return popped_value;
  }

private:
  std::condition_variable conditionVariable;
  mutable std::mutex mutex;
  std::deque<T> queue;
};

} // namespace base

} // namespace asb_uci

#endif // ASB_UCI_BASE_WAITQUEUE_H
