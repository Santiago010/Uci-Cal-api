/** @file ConflictType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ConflictType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ConflictLocationType.h"
#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/ID_Type.h"
#include "asb_uci/type/RequirementsReferenceType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConflictLocationType.h"
#include "uci/type/ConflictType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/ID_Type.h"
#include "uci/type/RequirementsReferenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConflictType::ConflictType()
  : conflictID_Accessor{boost::make_unique<ID_Type>()} {
}

ConflictType::~ConflictType() = default;

void ConflictType::copy(const uci::type::ConflictType& accessor) {
  copyImpl(accessor, false);
}

void ConflictType::copyImpl(const uci::type::ConflictType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConflictType&>(accessor);
    setConflictID(*(accessorImpl.conflictID_Accessor));
    if (accessorImpl.conflictingObjectID_Accessor) {
      setConflictingObjectID(*(accessorImpl.conflictingObjectID_Accessor));
    } else {
      conflictingObjectID_Accessor.reset();
    }
    if (accessorImpl.conflictLocation_Accessor) {
      setConflictLocation(*(accessorImpl.conflictLocation_Accessor));
    } else {
      conflictLocation_Accessor.reset();
    }
    if (accessorImpl.conflictTime_Accessor) {
      setConflictTime(*(accessorImpl.conflictTime_Accessor));
    } else {
      conflictTime_Accessor.reset();
    }
    if (accessorImpl.affectedRequirements_Accessor) {
      setAffectedRequirements(*(accessorImpl.affectedRequirements_Accessor));
    } else {
      affectedRequirements_Accessor.reset();
    }
  }
}

void ConflictType::reset() noexcept {
  if (conflictID_Accessor->getAccessorType() != uci::type::accessorType::iD_Type) {
    conflictID_Accessor = boost::make_unique<ID_Type>();
  } else {
    conflictID_Accessor->reset();
  }
  conflictingObjectID_Accessor.reset();
  conflictLocation_Accessor.reset();
  conflictTime_Accessor.reset();
  affectedRequirements_Accessor.reset();
}

const uci::type::ID_Type& ConflictType::getConflictID() const {
  return *conflictID_Accessor;
}

uci::type::ID_Type& ConflictType::getConflictID() {
  return *conflictID_Accessor;
}

uci::type::ConflictType& ConflictType::setConflictID(const uci::type::ID_Type& accessor) {
  enableConflictID(accessor.getAccessorType());
  if (&accessor != conflictID_Accessor.get()) {
    conflictID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ID_Type& ConflictType::enableConflictID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iD_Type : type};
  if ((!conflictID_Accessor) || (conflictID_Accessor->getAccessorType() != requestedType)) {
    conflictID_Accessor = ID_Type::create(requestedType);
    if (!conflictID_Accessor) {
      throw uci::base::UCIException("Error in enableConflictID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *conflictID_Accessor;
}

uci::type::ID_Type& ConflictType::getConflictingObjectID_() const {
  if (conflictingObjectID_Accessor) {
    return *conflictingObjectID_Accessor;
  }
  throw uci::base::UCIException("Error in getConflictingObjectID(): An attempt was made to get an optional field that was not enabled, call hasConflictingObjectID() to determine if it is safe to call getConflictingObjectID()");
}

const uci::type::ID_Type& ConflictType::getConflictingObjectID() const {
  return getConflictingObjectID_();
}

uci::type::ID_Type& ConflictType::getConflictingObjectID() {
  return getConflictingObjectID_();
}

uci::type::ConflictType& ConflictType::setConflictingObjectID(const uci::type::ID_Type& accessor) {
  enableConflictingObjectID(accessor.getAccessorType());
  if (&accessor != conflictingObjectID_Accessor.get()) {
    conflictingObjectID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ConflictType::hasConflictingObjectID() const noexcept {
  return static_cast<bool>(conflictingObjectID_Accessor);
}

uci::type::ID_Type& ConflictType::enableConflictingObjectID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iD_Type : type};
  if ((!conflictingObjectID_Accessor) || (conflictingObjectID_Accessor->getAccessorType() != requestedType)) {
    conflictingObjectID_Accessor = ID_Type::create(requestedType);
    if (!conflictingObjectID_Accessor) {
      throw uci::base::UCIException("Error in enableConflictingObjectID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *conflictingObjectID_Accessor;
}

uci::type::ConflictType& ConflictType::clearConflictingObjectID() noexcept {
  conflictingObjectID_Accessor.reset();
  return *this;
}

uci::type::ConflictLocationType& ConflictType::getConflictLocation_() const {
  if (conflictLocation_Accessor) {
    return *conflictLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getConflictLocation(): An attempt was made to get an optional field that was not enabled, call hasConflictLocation() to determine if it is safe to call getConflictLocation()");
}

const uci::type::ConflictLocationType& ConflictType::getConflictLocation() const {
  return getConflictLocation_();
}

uci::type::ConflictLocationType& ConflictType::getConflictLocation() {
  return getConflictLocation_();
}

uci::type::ConflictType& ConflictType::setConflictLocation(const uci::type::ConflictLocationType& accessor) {
  enableConflictLocation();
  if (&accessor != conflictLocation_Accessor.get()) {
    conflictLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConflictType::hasConflictLocation() const noexcept {
  return static_cast<bool>(conflictLocation_Accessor);
}

uci::type::ConflictLocationType& ConflictType::enableConflictLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::conflictLocationType : type};
  if ((!conflictLocation_Accessor) || (conflictLocation_Accessor->getAccessorType() != requestedType)) {
    conflictLocation_Accessor = ConflictLocationType::create(requestedType);
    if (!conflictLocation_Accessor) {
      throw uci::base::UCIException("Error in enableConflictLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *conflictLocation_Accessor;
}

uci::type::ConflictType& ConflictType::clearConflictLocation() noexcept {
  conflictLocation_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& ConflictType::getConflictTime_() const {
  if (conflictTime_Accessor) {
    return *conflictTime_Accessor;
  }
  throw uci::base::UCIException("Error in getConflictTime(): An attempt was made to get an optional field that was not enabled, call hasConflictTime() to determine if it is safe to call getConflictTime()");
}

const uci::type::DateTimeRangeType& ConflictType::getConflictTime() const {
  return getConflictTime_();
}

uci::type::DateTimeRangeType& ConflictType::getConflictTime() {
  return getConflictTime_();
}

uci::type::ConflictType& ConflictType::setConflictTime(const uci::type::DateTimeRangeType& accessor) {
  enableConflictTime();
  if (&accessor != conflictTime_Accessor.get()) {
    conflictTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConflictType::hasConflictTime() const noexcept {
  return static_cast<bool>(conflictTime_Accessor);
}

uci::type::DateTimeRangeType& ConflictType::enableConflictTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!conflictTime_Accessor) || (conflictTime_Accessor->getAccessorType() != requestedType)) {
    conflictTime_Accessor = DateTimeRangeType::create(requestedType);
    if (!conflictTime_Accessor) {
      throw uci::base::UCIException("Error in enableConflictTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *conflictTime_Accessor;
}

uci::type::ConflictType& ConflictType::clearConflictTime() noexcept {
  conflictTime_Accessor.reset();
  return *this;
}

uci::type::RequirementsReferenceType& ConflictType::getAffectedRequirements_() const {
  if (affectedRequirements_Accessor) {
    return *affectedRequirements_Accessor;
  }
  throw uci::base::UCIException("Error in getAffectedRequirements(): An attempt was made to get an optional field that was not enabled, call hasAffectedRequirements() to determine if it is safe to call getAffectedRequirements()");
}

const uci::type::RequirementsReferenceType& ConflictType::getAffectedRequirements() const {
  return getAffectedRequirements_();
}

uci::type::RequirementsReferenceType& ConflictType::getAffectedRequirements() {
  return getAffectedRequirements_();
}

uci::type::ConflictType& ConflictType::setAffectedRequirements(const uci::type::RequirementsReferenceType& accessor) {
  enableAffectedRequirements();
  if (&accessor != affectedRequirements_Accessor.get()) {
    affectedRequirements_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConflictType::hasAffectedRequirements() const noexcept {
  return static_cast<bool>(affectedRequirements_Accessor);
}

uci::type::RequirementsReferenceType& ConflictType::enableAffectedRequirements(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementsReferenceType : type};
  if ((!affectedRequirements_Accessor) || (affectedRequirements_Accessor->getAccessorType() != requestedType)) {
    affectedRequirements_Accessor = RequirementsReferenceType::create(requestedType);
    if (!affectedRequirements_Accessor) {
      throw uci::base::UCIException("Error in enableAffectedRequirements(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *affectedRequirements_Accessor;
}

uci::type::ConflictType& ConflictType::clearAffectedRequirements() noexcept {
  affectedRequirements_Accessor.reset();
  return *this;
}

std::unique_ptr<ConflictType> ConflictType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::conflictType : type};
  return (requestedType == uci::type::accessorType::conflictType) ? boost::make_unique<ConflictType>() : nullptr;
}

/**  */
namespace ConflictType_Names {

constexpr const char* Extern_Type_Name{"ConflictType"};
constexpr const char* ConflictID_Name{"ConflictID"};
constexpr const char* ConflictingObjectID_Name{"ConflictingObjectID"};
constexpr const char* ConflictLocation_Name{"ConflictLocation"};
constexpr const char* ConflictTime_Name{"ConflictTime"};
constexpr const char* AffectedRequirements_Name{"AffectedRequirements"};

} // namespace ConflictType_Names

void ConflictType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConflictType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConflictType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConflictType_Names::ConflictID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableConflictID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConflictType_Names::ConflictingObjectID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableConflictingObjectID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConflictType_Names::ConflictLocation_Name) {
      ConflictLocationType::deserialize(valueType.second, accessor.enableConflictLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConflictType_Names::ConflictTime_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableConflictTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConflictType_Names::AffectedRequirements_Name) {
      RequirementsReferenceType::deserialize(valueType.second, accessor.enableAffectedRequirements(), nodeName, nsPrefix);
    }
  }
}

std::string ConflictType::serialize(const uci::type::ConflictType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConflictType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConflictType_Names::Extern_Type_Name);
  }
  ID_Type::serialize(accessor.getConflictID(), node, ConflictType_Names::ConflictID_Name);
  if (accessor.hasConflictingObjectID()) {
    ID_Type::serialize(accessor.getConflictingObjectID(), node, ConflictType_Names::ConflictingObjectID_Name);
  }
  if (accessor.hasConflictLocation()) {
    ConflictLocationType::serialize(accessor.getConflictLocation(), node, ConflictType_Names::ConflictLocation_Name);
  }
  if (accessor.hasConflictTime()) {
    DateTimeRangeType::serialize(accessor.getConflictTime(), node, ConflictType_Names::ConflictTime_Name);
  }
  if (accessor.hasAffectedRequirements()) {
    RequirementsReferenceType::serialize(accessor.getAffectedRequirements(), node, ConflictType_Names::AffectedRequirements_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConflictType& ConflictType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConflictType>().release());
}

uci::type::ConflictType& ConflictType::create(const uci::type::ConflictType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConflictType> newAccessor{boost::make_unique<asb_uci::type::ConflictType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConflictType::destroy(uci::type::ConflictType& accessor) {
  delete dynamic_cast<asb_uci::type::ConflictType*>(&accessor);
}

} // namespace type

} // namespace uci

