/** @file LOS_D_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LOS_D_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/LOS_RatesType.h"
#include "asb_uci/type/LOS_VariableB_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/LOS_D_Type.h"
#include "uci/type/LOS_RatesType.h"
#include "uci/type/LOS_VariableB_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS_D_Type::LOS_D_Type() = default;

LOS_D_Type::~LOS_D_Type() = default;

void LOS_D_Type::copy(const uci::type::LOS_D_Type& accessor) {
  copyImpl(accessor, false);
}

void LOS_D_Type::copyImpl(const uci::type::LOS_D_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS_D_Type&>(accessor);
    if (accessorImpl.lOS_Accessor) {
      setLOS(*(accessorImpl.lOS_Accessor));
    } else {
      lOS_Accessor.reset();
    }
    if (accessorImpl.lOS_Rates_Accessor) {
      setLOS_Rates(*(accessorImpl.lOS_Rates_Accessor));
    } else {
      lOS_Rates_Accessor.reset();
    }
  }
}

void LOS_D_Type::reset() noexcept {
  lOS_Accessor.reset();
  lOS_Rates_Accessor.reset();
}

uci::type::LOS_D_Type::LOS_D_TypeChoice LOS_D_Type::getLOS_D_TypeChoiceOrdinal() const noexcept {
  if (lOS_Accessor) {
    return LOS_D_TYPE_CHOICE_LOS;
  }
  if (lOS_Rates_Accessor) {
    return LOS_D_TYPE_CHOICE_LOS_RATES;
  }
  return LOS_D_TYPE_CHOICE_NONE;
}

uci::type::LOS_D_Type& LOS_D_Type::setLOS_D_TypeChoiceOrdinal(uci::type::LOS_D_Type::LOS_D_TypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case LOS_D_TYPE_CHOICE_LOS:
      chooseLOS("setLOS_D_TypeChoiceOrdinal", type);
      break;
    case LOS_D_TYPE_CHOICE_LOS_RATES:
      chooseLOS_Rates("setLOS_D_TypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setLOS_D_TypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::LOS_VariableB_Type& LOS_D_Type::getLOS_() const {
  if (lOS_Accessor) {
    return *lOS_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS(): Unable to get LOS, field not selected");
}

const uci::type::LOS_VariableB_Type& LOS_D_Type::getLOS() const {
  return getLOS_();
}

uci::type::LOS_VariableB_Type& LOS_D_Type::getLOS() {
  return getLOS_();
}

uci::type::LOS_D_Type& LOS_D_Type::setLOS(const uci::type::LOS_VariableB_Type& accessor) {
  chooseLOS();
  if (&accessor != lOS_Accessor.get()) {
    lOS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_D_Type::isLOS() const noexcept {
  return static_cast<bool>(lOS_Accessor);
}

uci::type::LOS_VariableB_Type& LOS_D_Type::chooseLOS(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_Rates_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_VariableB_Type : type};
  if ((!lOS_Accessor) || (lOS_Accessor->getAccessorType() != requestedType)) {
    lOS_Accessor = LOS_VariableB_Type::create(type);
    if (!lOS_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_Accessor;
}

uci::type::LOS_VariableB_Type& LOS_D_Type::chooseLOS(uci::base::accessorType::AccessorType type) {
  return chooseLOS("chooseLOS", type);
}

uci::type::LOS_RatesType& LOS_D_Type::getLOS_Rates_() const {
  if (lOS_Rates_Accessor) {
    return *lOS_Rates_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_Rates(): Unable to get LOS_Rates, field not selected");
}

const uci::type::LOS_RatesType& LOS_D_Type::getLOS_Rates() const {
  return getLOS_Rates_();
}

uci::type::LOS_RatesType& LOS_D_Type::getLOS_Rates() {
  return getLOS_Rates_();
}

uci::type::LOS_D_Type& LOS_D_Type::setLOS_Rates(const uci::type::LOS_RatesType& accessor) {
  chooseLOS_Rates();
  if (&accessor != lOS_Rates_Accessor.get()) {
    lOS_Rates_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_D_Type::isLOS_Rates() const noexcept {
  return static_cast<bool>(lOS_Rates_Accessor);
}

uci::type::LOS_RatesType& LOS_D_Type::chooseLOS_Rates(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_RatesType : type};
  if ((!lOS_Rates_Accessor) || (lOS_Rates_Accessor->getAccessorType() != requestedType)) {
    lOS_Rates_Accessor = LOS_RatesType::create(type);
    if (!lOS_Rates_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_Rates_Accessor;
}

uci::type::LOS_RatesType& LOS_D_Type::chooseLOS_Rates(uci::base::accessorType::AccessorType type) {
  return chooseLOS_Rates("chooseLOS_Rates", type);
}

std::unique_ptr<LOS_D_Type> LOS_D_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_D_Type : type};
  return (requestedType == uci::type::accessorType::lOS_D_Type) ? boost::make_unique<LOS_D_Type>() : nullptr;
}

/**  */
namespace LOS_D_Type_Names {

constexpr const char* Extern_Type_Name{"LOS_D_Type"};
constexpr const char* LOS_Name{"LOS"};
constexpr const char* LOS_Rates_Name{"LOS_Rates"};

} // namespace LOS_D_Type_Names

void LOS_D_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_D_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_D_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS_D_Type_Names::LOS_Name) {
      LOS_VariableB_Type::deserialize(valueType.second, accessor.chooseLOS(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_D_Type_Names::LOS_Rates_Name) {
      LOS_RatesType::deserialize(valueType.second, accessor.chooseLOS_Rates(), nodeName, nsPrefix);
    }
  }
}

std::string LOS_D_Type::serialize(const uci::type::LOS_D_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS_D_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_D_Type_Names::Extern_Type_Name);
  }
  if (accessor.isLOS()) {
    LOS_VariableB_Type::serialize(accessor.getLOS(), node, LOS_D_Type_Names::LOS_Name);
  } else if (accessor.isLOS_Rates()) {
    LOS_RatesType::serialize(accessor.getLOS_Rates(), node, LOS_D_Type_Names::LOS_Rates_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS_D_Type& LOS_D_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS_D_Type>().release());
}

uci::type::LOS_D_Type& LOS_D_Type::create(const uci::type::LOS_D_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS_D_Type> newAccessor{boost::make_unique<asb_uci::type::LOS_D_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS_D_Type::destroy(uci::type::LOS_D_Type& accessor) {
  delete dynamic_cast<asb_uci::type::LOS_D_Type*>(&accessor);
}

} // namespace type

} // namespace uci

