/** @file PO_ComponentSettingsFocalPlaneArrayChannelType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayChannelType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentControlsA_Type.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayCollectionType.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayOpticalBandType.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelAggregationType.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelPolarityType.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingType.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayScanDirectionType.h"
#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType.h"
#include "asb_uci/type/PO_FPA_ChannelID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentControlsA_Type.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayChannelType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayCollectionType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayOpticalBandType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayPixelAggregationType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayPixelPolarityType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayScanDirectionType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType.h"
#include "uci/type/PO_FPA_ChannelID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocalPlaneArrayChannelType::PO_ComponentSettingsFocalPlaneArrayChannelType()
  : channelID_Accessor{boost::make_unique<PO_FPA_ChannelID_Type>()} {
}

PO_ComponentSettingsFocalPlaneArrayChannelType::~PO_ComponentSettingsFocalPlaneArrayChannelType() = default;

void PO_ComponentSettingsFocalPlaneArrayChannelType::copy(const uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocalPlaneArrayChannelType::copyImpl(const uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocalPlaneArrayChannelType&>(accessor);
    setChannelID(*(accessorImpl.channelID_Accessor));
    if (accessorImpl.channelControls_Accessor) {
      setChannelControls(*(accessorImpl.channelControls_Accessor));
    } else {
      channelControls_Accessor.reset();
    }
    if (accessorImpl.opticalBand_Accessor) {
      setOpticalBand(*(accessorImpl.opticalBand_Accessor));
    } else {
      opticalBand_Accessor.reset();
    }
    if (accessorImpl.pixelAggregation_Accessor) {
      setPixelAggregation(*(accessorImpl.pixelAggregation_Accessor));
    } else {
      pixelAggregation_Accessor.reset();
    }
    if (accessorImpl.timeDelayIntegration_Accessor) {
      setTimeDelayIntegration(*(accessorImpl.timeDelayIntegration_Accessor));
    } else {
      timeDelayIntegration_Accessor.reset();
    }
    if (accessorImpl.pixelScaling_Accessor) {
      setPixelScaling(*(accessorImpl.pixelScaling_Accessor));
    } else {
      pixelScaling_Accessor.reset();
    }
    if (accessorImpl.pixelPolarity_Accessor) {
      setPixelPolarity(*(accessorImpl.pixelPolarity_Accessor));
    } else {
      pixelPolarity_Accessor.reset();
    }
    if (accessorImpl.collectionTime_Accessor) {
      setCollectionTime(*(accessorImpl.collectionTime_Accessor));
    } else {
      collectionTime_Accessor.reset();
    }
    if (accessorImpl.nonUniformityCorrection_Accessor) {
      setNonUniformityCorrection(*(accessorImpl.nonUniformityCorrection_Accessor));
    } else {
      nonUniformityCorrection_Accessor.reset();
    }
    if (accessorImpl.scanDirection_Accessor) {
      setScanDirection(*(accessorImpl.scanDirection_Accessor));
    } else {
      scanDirection_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsFocalPlaneArrayChannelType::reset() noexcept {
  channelID_Accessor->reset();
  channelControls_Accessor.reset();
  opticalBand_Accessor.reset();
  pixelAggregation_Accessor.reset();
  timeDelayIntegration_Accessor.reset();
  pixelScaling_Accessor.reset();
  pixelPolarity_Accessor.reset();
  collectionTime_Accessor.reset();
  nonUniformityCorrection_Accessor.reset();
  scanDirection_Accessor.reset();
}

const uci::type::PO_FPA_ChannelID_Type& PO_ComponentSettingsFocalPlaneArrayChannelType::getChannelID() const {
  return *channelID_Accessor;
}

uci::type::PO_FPA_ChannelID_Type& PO_ComponentSettingsFocalPlaneArrayChannelType::getChannelID() {
  return *channelID_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setChannelID(const uci::type::PO_FPA_ChannelID_Type& accessor) {
  if (&accessor != channelID_Accessor.get()) {
    channelID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsFocalPlaneArrayChannelType::getChannelControls_() const {
  if (channelControls_Accessor) {
    return *channelControls_Accessor;
  }
  throw uci::base::UCIException("Error in getChannelControls(): An attempt was made to get an optional field that was not enabled, call hasChannelControls() to determine if it is safe to call getChannelControls()");
}

const uci::type::ComponentControlsA_Type& PO_ComponentSettingsFocalPlaneArrayChannelType::getChannelControls() const {
  return getChannelControls_();
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsFocalPlaneArrayChannelType::getChannelControls() {
  return getChannelControls_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setChannelControls(const uci::type::ComponentControlsA_Type& accessor) {
  enableChannelControls();
  if (&accessor != channelControls_Accessor.get()) {
    channelControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasChannelControls() const noexcept {
  return static_cast<bool>(channelControls_Accessor);
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsFocalPlaneArrayChannelType::enableChannelControls(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsA_Type : type};
  if ((!channelControls_Accessor) || (channelControls_Accessor->getAccessorType() != requestedType)) {
    channelControls_Accessor = ComponentControlsA_Type::create(requestedType);
    if (!channelControls_Accessor) {
      throw uci::base::UCIException("Error in enableChannelControls(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *channelControls_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearChannelControls() noexcept {
  channelControls_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayChannelType::getOpticalBand_() const {
  if (opticalBand_Accessor) {
    return *opticalBand_Accessor;
  }
  throw uci::base::UCIException("Error in getOpticalBand(): An attempt was made to get an optional field that was not enabled, call hasOpticalBand() to determine if it is safe to call getOpticalBand()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayChannelType::getOpticalBand() const {
  return getOpticalBand_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayChannelType::getOpticalBand() {
  return getOpticalBand_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setOpticalBand(const uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& accessor) {
  enableOpticalBand();
  if (&accessor != opticalBand_Accessor.get()) {
    opticalBand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasOpticalBand() const noexcept {
  return static_cast<bool>(opticalBand_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayChannelType::enableOpticalBand(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayOpticalBandType : type};
  if ((!opticalBand_Accessor) || (opticalBand_Accessor->getAccessorType() != requestedType)) {
    opticalBand_Accessor = PO_ComponentSettingsFocalPlaneArrayOpticalBandType::create(requestedType);
    if (!opticalBand_Accessor) {
      throw uci::base::UCIException("Error in enableOpticalBand(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opticalBand_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearOpticalBand() noexcept {
  opticalBand_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelAggregation_() const {
  if (pixelAggregation_Accessor) {
    return *pixelAggregation_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelAggregation(): An attempt was made to get an optional field that was not enabled, call hasPixelAggregation() to determine if it is safe to call getPixelAggregation()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelAggregation() const {
  return getPixelAggregation_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelAggregation() {
  return getPixelAggregation_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setPixelAggregation(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& accessor) {
  enablePixelAggregation();
  if (&accessor != pixelAggregation_Accessor.get()) {
    pixelAggregation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasPixelAggregation() const noexcept {
  return static_cast<bool>(pixelAggregation_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayChannelType::enablePixelAggregation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelAggregationType : type};
  if ((!pixelAggregation_Accessor) || (pixelAggregation_Accessor->getAccessorType() != requestedType)) {
    pixelAggregation_Accessor = PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::create(requestedType);
    if (!pixelAggregation_Accessor) {
      throw uci::base::UCIException("Error in enablePixelAggregation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelAggregation_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearPixelAggregation() noexcept {
  pixelAggregation_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentSettingsFocalPlaneArrayChannelType::getTimeDelayIntegration_() const {
  if (timeDelayIntegration_Accessor) {
    return *timeDelayIntegration_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeDelayIntegration(): An attempt was made to get an optional field that was not enabled, call hasTimeDelayIntegration() to determine if it is safe to call getTimeDelayIntegration()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentSettingsFocalPlaneArrayChannelType::getTimeDelayIntegration() const {
  return getTimeDelayIntegration_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentSettingsFocalPlaneArrayChannelType::getTimeDelayIntegration() {
  return getTimeDelayIntegration_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setTimeDelayIntegration(const uci::type::PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType& accessor) {
  enableTimeDelayIntegration();
  if (&accessor != timeDelayIntegration_Accessor.get()) {
    timeDelayIntegration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasTimeDelayIntegration() const noexcept {
  return static_cast<bool>(timeDelayIntegration_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentSettingsFocalPlaneArrayChannelType::enableTimeDelayIntegration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType : type};
  if ((!timeDelayIntegration_Accessor) || (timeDelayIntegration_Accessor->getAccessorType() != requestedType)) {
    timeDelayIntegration_Accessor = PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType::create(requestedType);
    if (!timeDelayIntegration_Accessor) {
      throw uci::base::UCIException("Error in enableTimeDelayIntegration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeDelayIntegration_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearTimeDelayIntegration() noexcept {
  timeDelayIntegration_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelScaling_() const {
  if (pixelScaling_Accessor) {
    return *pixelScaling_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelScaling(): An attempt was made to get an optional field that was not enabled, call hasPixelScaling() to determine if it is safe to call getPixelScaling()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelScaling() const {
  return getPixelScaling_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelScaling() {
  return getPixelScaling_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setPixelScaling(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& accessor) {
  enablePixelScaling();
  if (&accessor != pixelScaling_Accessor.get()) {
    pixelScaling_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasPixelScaling() const noexcept {
  return static_cast<bool>(pixelScaling_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayChannelType::enablePixelScaling(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelScalingType : type};
  if ((!pixelScaling_Accessor) || (pixelScaling_Accessor->getAccessorType() != requestedType)) {
    pixelScaling_Accessor = PO_ComponentSettingsFocalPlaneArrayPixelScalingType::create(requestedType);
    if (!pixelScaling_Accessor) {
      throw uci::base::UCIException("Error in enablePixelScaling(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelScaling_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearPixelScaling() noexcept {
  pixelScaling_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelPolarityType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelPolarity_() const {
  if (pixelPolarity_Accessor) {
    return *pixelPolarity_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelPolarity(): An attempt was made to get an optional field that was not enabled, call hasPixelPolarity() to determine if it is safe to call getPixelPolarity()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelPolarityType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelPolarity() const {
  return getPixelPolarity_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelPolarityType& PO_ComponentSettingsFocalPlaneArrayChannelType::getPixelPolarity() {
  return getPixelPolarity_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setPixelPolarity(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelPolarityType& accessor) {
  enablePixelPolarity();
  if (&accessor != pixelPolarity_Accessor.get()) {
    pixelPolarity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasPixelPolarity() const noexcept {
  return static_cast<bool>(pixelPolarity_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelPolarityType& PO_ComponentSettingsFocalPlaneArrayChannelType::enablePixelPolarity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelPolarityType : type};
  if ((!pixelPolarity_Accessor) || (pixelPolarity_Accessor->getAccessorType() != requestedType)) {
    pixelPolarity_Accessor = PO_ComponentSettingsFocalPlaneArrayPixelPolarityType::create(requestedType);
    if (!pixelPolarity_Accessor) {
      throw uci::base::UCIException("Error in enablePixelPolarity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelPolarity_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearPixelPolarity() noexcept {
  pixelPolarity_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayCollectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getCollectionTime_() const {
  if (collectionTime_Accessor) {
    return *collectionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionTime(): An attempt was made to get an optional field that was not enabled, call hasCollectionTime() to determine if it is safe to call getCollectionTime()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayCollectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getCollectionTime() const {
  return getCollectionTime_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayCollectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getCollectionTime() {
  return getCollectionTime_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setCollectionTime(const uci::type::PO_ComponentSettingsFocalPlaneArrayCollectionType& accessor) {
  enableCollectionTime();
  if (&accessor != collectionTime_Accessor.get()) {
    collectionTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasCollectionTime() const noexcept {
  return static_cast<bool>(collectionTime_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayCollectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::enableCollectionTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayCollectionType : type};
  if ((!collectionTime_Accessor) || (collectionTime_Accessor->getAccessorType() != requestedType)) {
    collectionTime_Accessor = PO_ComponentSettingsFocalPlaneArrayCollectionType::create(requestedType);
    if (!collectionTime_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionTime_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearCollectionTime() noexcept {
  collectionTime_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getNonUniformityCorrection_() const {
  if (nonUniformityCorrection_Accessor) {
    return *nonUniformityCorrection_Accessor;
  }
  throw uci::base::UCIException("Error in getNonUniformityCorrection(): An attempt was made to get an optional field that was not enabled, call hasNonUniformityCorrection() to determine if it is safe to call getNonUniformityCorrection()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getNonUniformityCorrection() const {
  return getNonUniformityCorrection_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getNonUniformityCorrection() {
  return getNonUniformityCorrection_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setNonUniformityCorrection(const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType& accessor) {
  enableNonUniformityCorrection();
  if (&accessor != nonUniformityCorrection_Accessor.get()) {
    nonUniformityCorrection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasNonUniformityCorrection() const noexcept {
  return static_cast<bool>(nonUniformityCorrection_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::enableNonUniformityCorrection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType : type};
  if ((!nonUniformityCorrection_Accessor) || (nonUniformityCorrection_Accessor->getAccessorType() != requestedType)) {
    nonUniformityCorrection_Accessor = PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType::create(requestedType);
    if (!nonUniformityCorrection_Accessor) {
      throw uci::base::UCIException("Error in enableNonUniformityCorrection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nonUniformityCorrection_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearNonUniformityCorrection() noexcept {
  nonUniformityCorrection_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getScanDirection_() const {
  if (scanDirection_Accessor) {
    return *scanDirection_Accessor;
  }
  throw uci::base::UCIException("Error in getScanDirection(): An attempt was made to get an optional field that was not enabled, call hasScanDirection() to determine if it is safe to call getScanDirection()");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getScanDirection() const {
  return getScanDirection_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::getScanDirection() {
  return getScanDirection_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::setScanDirection(const uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& accessor) {
  enableScanDirection();
  if (&accessor != scanDirection_Accessor.get()) {
    scanDirection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayChannelType::hasScanDirection() const noexcept {
  return static_cast<bool>(scanDirection_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayChannelType::enableScanDirection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayScanDirectionType : type};
  if ((!scanDirection_Accessor) || (scanDirection_Accessor->getAccessorType() != requestedType)) {
    scanDirection_Accessor = PO_ComponentSettingsFocalPlaneArrayScanDirectionType::create(requestedType);
    if (!scanDirection_Accessor) {
      throw uci::base::UCIException("Error in enableScanDirection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *scanDirection_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::clearScanDirection() noexcept {
  scanDirection_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentSettingsFocalPlaneArrayChannelType> PO_ComponentSettingsFocalPlaneArrayChannelType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayChannelType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayChannelType) ? boost::make_unique<PO_ComponentSettingsFocalPlaneArrayChannelType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocalPlaneArrayChannelType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocalPlaneArrayChannelType"};
constexpr const char* ChannelID_Name{"ChannelID"};
constexpr const char* ChannelControls_Name{"ChannelControls"};
constexpr const char* OpticalBand_Name{"OpticalBand"};
constexpr const char* PixelAggregation_Name{"PixelAggregation"};
constexpr const char* TimeDelayIntegration_Name{"TimeDelayIntegration"};
constexpr const char* PixelScaling_Name{"PixelScaling"};
constexpr const char* PixelPolarity_Name{"PixelPolarity"};
constexpr const char* CollectionTime_Name{"CollectionTime"};
constexpr const char* NonUniformityCorrection_Name{"NonUniformityCorrection"};
constexpr const char* ScanDirection_Name{"ScanDirection"};

} // namespace PO_ComponentSettingsFocalPlaneArrayChannelType_Names

void PO_ComponentSettingsFocalPlaneArrayChannelType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocalPlaneArrayChannelType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::ChannelID_Name) {
      PO_FPA_ChannelID_Type::deserialize(valueType.second, accessor.getChannelID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::ChannelControls_Name) {
      ComponentControlsA_Type::deserialize(valueType.second, accessor.enableChannelControls(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::OpticalBand_Name) {
      PO_ComponentSettingsFocalPlaneArrayOpticalBandType::deserialize(valueType.second, accessor.enableOpticalBand(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::PixelAggregation_Name) {
      PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::deserialize(valueType.second, accessor.enablePixelAggregation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::TimeDelayIntegration_Name) {
      PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType::deserialize(valueType.second, accessor.enableTimeDelayIntegration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::PixelScaling_Name) {
      PO_ComponentSettingsFocalPlaneArrayPixelScalingType::deserialize(valueType.second, accessor.enablePixelScaling(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::PixelPolarity_Name) {
      PO_ComponentSettingsFocalPlaneArrayPixelPolarityType::deserialize(valueType.second, accessor.enablePixelPolarity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::CollectionTime_Name) {
      PO_ComponentSettingsFocalPlaneArrayCollectionType::deserialize(valueType.second, accessor.enableCollectionTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::NonUniformityCorrection_Name) {
      PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType::deserialize(valueType.second, accessor.enableNonUniformityCorrection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayChannelType_Names::ScanDirection_Name) {
      PO_ComponentSettingsFocalPlaneArrayScanDirectionType::deserialize(valueType.second, accessor.enableScanDirection(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsFocalPlaneArrayChannelType::serialize(const uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocalPlaneArrayChannelType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::Extern_Type_Name);
  }
  PO_FPA_ChannelID_Type::serialize(accessor.getChannelID(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::ChannelID_Name);
  if (accessor.hasChannelControls()) {
    ComponentControlsA_Type::serialize(accessor.getChannelControls(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::ChannelControls_Name);
  }
  if (accessor.hasOpticalBand()) {
    PO_ComponentSettingsFocalPlaneArrayOpticalBandType::serialize(accessor.getOpticalBand(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::OpticalBand_Name);
  }
  if (accessor.hasPixelAggregation()) {
    PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::serialize(accessor.getPixelAggregation(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::PixelAggregation_Name);
  }
  if (accessor.hasTimeDelayIntegration()) {
    PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType::serialize(accessor.getTimeDelayIntegration(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::TimeDelayIntegration_Name);
  }
  if (accessor.hasPixelScaling()) {
    PO_ComponentSettingsFocalPlaneArrayPixelScalingType::serialize(accessor.getPixelScaling(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::PixelScaling_Name);
  }
  if (accessor.hasPixelPolarity()) {
    PO_ComponentSettingsFocalPlaneArrayPixelPolarityType::serialize(accessor.getPixelPolarity(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::PixelPolarity_Name);
  }
  if (accessor.hasCollectionTime()) {
    PO_ComponentSettingsFocalPlaneArrayCollectionType::serialize(accessor.getCollectionTime(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::CollectionTime_Name);
  }
  if (accessor.hasNonUniformityCorrection()) {
    PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType::serialize(accessor.getNonUniformityCorrection(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::NonUniformityCorrection_Name);
  }
  if (accessor.hasScanDirection()) {
    PO_ComponentSettingsFocalPlaneArrayScanDirectionType::serialize(accessor.getScanDirection(), node, PO_ComponentSettingsFocalPlaneArrayChannelType_Names::ScanDirection_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType>().release());
}

uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& PO_ComponentSettingsFocalPlaneArrayChannelType::create(const uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocalPlaneArrayChannelType::destroy(uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType*>(&accessor);
}

} // namespace type

} // namespace uci

