/** @file PO_ComponentSettingsLensAssemblyFieldOfViewType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsLensAssemblyFieldOfViewType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IncrementalChangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleQuarterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IncrementalChangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsLensAssemblyFieldOfViewType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsLensAssemblyFieldOfViewType::PO_ComponentSettingsLensAssemblyFieldOfViewType() = default;

PO_ComponentSettingsLensAssemblyFieldOfViewType::~PO_ComponentSettingsLensAssemblyFieldOfViewType() = default;

void PO_ComponentSettingsLensAssemblyFieldOfViewType::copy(const uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsLensAssemblyFieldOfViewType::copyImpl(const uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsLensAssemblyFieldOfViewType&>(accessor);
    fOV_Setting_Accessor = (accessorImpl.fOV_Setting_Accessor ? accessorImpl.fOV_Setting_Accessor : boost::none);
    autoZoom_Accessor = (accessorImpl.autoZoom_Accessor ? accessorImpl.autoZoom_Accessor : boost::none);
    if (accessorImpl.incrementalChange_Accessor) {
      setIncrementalChange(*(accessorImpl.incrementalChange_Accessor));
    } else {
      incrementalChange_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsLensAssemblyFieldOfViewType::reset() noexcept {
  fOV_Setting_Accessor.reset();
  autoZoom_Accessor.reset();
  incrementalChange_Accessor.reset();
}

uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType::PO_ComponentSettingsLensAssemblyFieldOfViewTypeChoice PO_ComponentSettingsLensAssemblyFieldOfViewType::getPO_ComponentSettingsLensAssemblyFieldOfViewTypeChoiceOrdinal() const noexcept {
  if (fOV_Setting_Accessor) {
    return PO_COMPONENTSETTINGSLENSASSEMBLYFIELDOFVIEWTYPE_CHOICE_FOV_SETTING;
  }
  if (autoZoom_Accessor) {
    return PO_COMPONENTSETTINGSLENSASSEMBLYFIELDOFVIEWTYPE_CHOICE_AUTOZOOM;
  }
  if (incrementalChange_Accessor) {
    return PO_COMPONENTSETTINGSLENSASSEMBLYFIELDOFVIEWTYPE_CHOICE_INCREMENTALCHANGE;
  }
  return PO_COMPONENTSETTINGSLENSASSEMBLYFIELDOFVIEWTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& PO_ComponentSettingsLensAssemblyFieldOfViewType::setPO_ComponentSettingsLensAssemblyFieldOfViewTypeChoiceOrdinal(uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType::PO_ComponentSettingsLensAssemblyFieldOfViewTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSLENSASSEMBLYFIELDOFVIEWTYPE_CHOICE_FOV_SETTING:
      chooseFOV_Setting();
      break;
    case PO_COMPONENTSETTINGSLENSASSEMBLYFIELDOFVIEWTYPE_CHOICE_AUTOZOOM:
      chooseAutoZoom();
      break;
    case PO_COMPONENTSETTINGSLENSASSEMBLYFIELDOFVIEWTYPE_CHOICE_INCREMENTALCHANGE:
      chooseIncrementalChange("setPO_ComponentSettingsLensAssemblyFieldOfViewTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsLensAssemblyFieldOfViewTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AngleQuarterTypeValue PO_ComponentSettingsLensAssemblyFieldOfViewType::getFOV_Setting() const {
  if (fOV_Setting_Accessor) {
    return *fOV_Setting_Accessor;
  }
  throw uci::base::UCIException("Error in getFOV_Setting(): Unable to get FOV_Setting, field not selected");
}

uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& PO_ComponentSettingsLensAssemblyFieldOfViewType::setFOV_Setting(uci::type::AngleQuarterTypeValue value) {
  chooseFOV_Setting();
  fOV_Setting_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsLensAssemblyFieldOfViewType::isFOV_Setting() const noexcept {
  return static_cast<bool>(fOV_Setting_Accessor);
}

void PO_ComponentSettingsLensAssemblyFieldOfViewType::chooseFOV_Setting() {
  autoZoom_Accessor.reset();
  incrementalChange_Accessor.reset();
  if (!fOV_Setting_Accessor) {
    fOV_Setting_Accessor = boost::optional<asb_xs::Double>();
  }
}

xs::Boolean PO_ComponentSettingsLensAssemblyFieldOfViewType::getAutoZoom() const {
  if (autoZoom_Accessor) {
    return *autoZoom_Accessor;
  }
  throw uci::base::UCIException("Error in getAutoZoom(): Unable to get AutoZoom, field not selected");
}

uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& PO_ComponentSettingsLensAssemblyFieldOfViewType::setAutoZoom(xs::Boolean value) {
  chooseAutoZoom();
  autoZoom_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsLensAssemblyFieldOfViewType::isAutoZoom() const noexcept {
  return static_cast<bool>(autoZoom_Accessor);
}

void PO_ComponentSettingsLensAssemblyFieldOfViewType::chooseAutoZoom() {
  fOV_Setting_Accessor.reset();
  incrementalChange_Accessor.reset();
  if (!autoZoom_Accessor) {
    autoZoom_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

uci::type::IncrementalChangeType& PO_ComponentSettingsLensAssemblyFieldOfViewType::getIncrementalChange_() const {
  if (incrementalChange_Accessor) {
    return *incrementalChange_Accessor;
  }
  throw uci::base::UCIException("Error in getIncrementalChange(): Unable to get IncrementalChange, field not selected");
}

const uci::type::IncrementalChangeType& PO_ComponentSettingsLensAssemblyFieldOfViewType::getIncrementalChange() const {
  return getIncrementalChange_();
}

uci::type::IncrementalChangeType& PO_ComponentSettingsLensAssemblyFieldOfViewType::getIncrementalChange() {
  return getIncrementalChange_();
}

uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& PO_ComponentSettingsLensAssemblyFieldOfViewType::setIncrementalChange(const uci::type::IncrementalChangeType& accessor) {
  chooseIncrementalChange();
  if (&accessor != incrementalChange_Accessor.get()) {
    incrementalChange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsLensAssemblyFieldOfViewType::isIncrementalChange() const noexcept {
  return static_cast<bool>(incrementalChange_Accessor);
}

uci::type::IncrementalChangeType& PO_ComponentSettingsLensAssemblyFieldOfViewType::chooseIncrementalChange(const std::string& method, uci::base::accessorType::AccessorType type) {
  fOV_Setting_Accessor.reset();
  autoZoom_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::incrementalChangeType : type};
  if ((!incrementalChange_Accessor) || (incrementalChange_Accessor->getAccessorType() != requestedType)) {
    incrementalChange_Accessor = IncrementalChangeType::create(type);
    if (!incrementalChange_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *incrementalChange_Accessor;
}

uci::type::IncrementalChangeType& PO_ComponentSettingsLensAssemblyFieldOfViewType::chooseIncrementalChange(uci::base::accessorType::AccessorType type) {
  return chooseIncrementalChange("chooseIncrementalChange", type);
}

std::unique_ptr<PO_ComponentSettingsLensAssemblyFieldOfViewType> PO_ComponentSettingsLensAssemblyFieldOfViewType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsLensAssemblyFieldOfViewType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsLensAssemblyFieldOfViewType) ? boost::make_unique<PO_ComponentSettingsLensAssemblyFieldOfViewType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsLensAssemblyFieldOfViewType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsLensAssemblyFieldOfViewType"};
constexpr const char* FOV_Setting_Name{"FOV_Setting"};
constexpr const char* AutoZoom_Name{"AutoZoom"};
constexpr const char* IncrementalChange_Name{"IncrementalChange"};

} // namespace PO_ComponentSettingsLensAssemblyFieldOfViewType_Names

void PO_ComponentSettingsLensAssemblyFieldOfViewType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::FOV_Setting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFOV_Setting(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::AutoZoom_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAutoZoom(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::IncrementalChange_Name) {
      IncrementalChangeType::deserialize(valueType.second, accessor.chooseIncrementalChange(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsLensAssemblyFieldOfViewType::serialize(const uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::Extern_Type_Name);
  }
  if (accessor.isFOV_Setting()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFOV_Setting(), node, PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::FOV_Setting_Name);
  } else if (accessor.isAutoZoom()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAutoZoom(), node, PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::AutoZoom_Name);
  } else if (accessor.isIncrementalChange()) {
    IncrementalChangeType::serialize(accessor.getIncrementalChange(), node, PO_ComponentSettingsLensAssemblyFieldOfViewType_Names::IncrementalChange_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& PO_ComponentSettingsLensAssemblyFieldOfViewType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType>().release());
}

uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& PO_ComponentSettingsLensAssemblyFieldOfViewType::create(const uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsLensAssemblyFieldOfViewType::destroy(uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType*>(&accessor);
}

} // namespace type

} // namespace uci

