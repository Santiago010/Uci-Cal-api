/** @file PixelReferenceCoordinateType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PixelReferenceCoordinateType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FileNameType.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/PixelDataType.h"
#include "../../../include/asb_uci/type/ProductMetadataID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileNameType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PixelDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PixelReferenceCoordinateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductMetadataID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PixelReferenceCoordinateType::PixelReferenceCoordinateType()
  : pixelCoordinate_Accessor{boost::make_unique<PixelDataType>()} {
}

PixelReferenceCoordinateType::~PixelReferenceCoordinateType() = default;

void PixelReferenceCoordinateType::copy(const uci::type::PixelReferenceCoordinateType& accessor) {
  copyImpl(accessor, false);
}

void PixelReferenceCoordinateType::copyImpl(const uci::type::PixelReferenceCoordinateType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PixelReferenceCoordinateType&>(accessor);
    setPixelCoordinate(*(accessorImpl.pixelCoordinate_Accessor));
    if (accessorImpl.file_Accessor) {
      setFile(*(accessorImpl.file_Accessor));
    } else {
      file_Accessor.reset();
    }
    if (accessorImpl.productID_Accessor) {
      setProductID(*(accessorImpl.productID_Accessor));
    } else {
      productID_Accessor.reset();
    }
    if (accessorImpl.reference_Accessor) {
      setReference(*(accessorImpl.reference_Accessor));
    } else {
      reference_Accessor.reset();
    }
  }
}

void PixelReferenceCoordinateType::reset() noexcept {
  if (pixelCoordinate_Accessor->getAccessorType() != uci::type::accessorType::pixelDataType) {
    pixelCoordinate_Accessor = boost::make_unique<PixelDataType>();
  } else {
    pixelCoordinate_Accessor->reset();
  }
  file_Accessor.reset();
  productID_Accessor.reset();
  reference_Accessor.reset();
}

const uci::type::PixelDataType& PixelReferenceCoordinateType::getPixelCoordinate() const {
  return *pixelCoordinate_Accessor;
}

uci::type::PixelDataType& PixelReferenceCoordinateType::getPixelCoordinate() {
  return *pixelCoordinate_Accessor;
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::setPixelCoordinate(const uci::type::PixelDataType& accessor) {
  enablePixelCoordinate(accessor.getAccessorType());
  if (&accessor != pixelCoordinate_Accessor.get()) {
    pixelCoordinate_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::PixelDataType& PixelReferenceCoordinateType::enablePixelCoordinate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pixelDataType : type};
  if ((!pixelCoordinate_Accessor) || (pixelCoordinate_Accessor->getAccessorType() != requestedType)) {
    pixelCoordinate_Accessor = PixelDataType::create(requestedType);
    if (!pixelCoordinate_Accessor) {
      throw uci::base::UCIException("Error in enablePixelCoordinate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelCoordinate_Accessor;
}

uci::type::FileNameType& PixelReferenceCoordinateType::getFile_() const {
  if (file_Accessor) {
    return *file_Accessor;
  }
  throw uci::base::UCIException("Error in getFile(): An attempt was made to get an optional field that was not enabled, call hasFile() to determine if it is safe to call getFile()");
}

const uci::type::FileNameType& PixelReferenceCoordinateType::getFile() const {
  return getFile_();
}

uci::type::FileNameType& PixelReferenceCoordinateType::getFile() {
  return getFile_();
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::setFile(const uci::type::FileNameType& value) {
  return setFile(value.c_str());
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::setFile(const std::string& value) {
  return setFile(value.c_str());
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::setFile(const char* value) {
  enableFile().setStringValue(value);
  return *this;
}

bool PixelReferenceCoordinateType::hasFile() const noexcept {
  return static_cast<bool>(file_Accessor);
}

uci::type::FileNameType& PixelReferenceCoordinateType::enableFile(uci::base::accessorType::AccessorType type) {
  if (!file_Accessor) {
    file_Accessor = FileNameType::create(type);
  }
  return *file_Accessor;
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::clearFile() noexcept {
  file_Accessor.reset();
  return *this;
}

uci::type::ProductMetadataID_Type& PixelReferenceCoordinateType::getProductID_() const {
  if (productID_Accessor) {
    return *productID_Accessor;
  }
  throw uci::base::UCIException("Error in getProductID(): An attempt was made to get an optional field that was not enabled, call hasProductID() to determine if it is safe to call getProductID()");
}

const uci::type::ProductMetadataID_Type& PixelReferenceCoordinateType::getProductID() const {
  return getProductID_();
}

uci::type::ProductMetadataID_Type& PixelReferenceCoordinateType::getProductID() {
  return getProductID_();
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::setProductID(const uci::type::ProductMetadataID_Type& accessor) {
  enableProductID();
  if (&accessor != productID_Accessor.get()) {
    productID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PixelReferenceCoordinateType::hasProductID() const noexcept {
  return static_cast<bool>(productID_Accessor);
}

uci::type::ProductMetadataID_Type& PixelReferenceCoordinateType::enableProductID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productMetadataID_Type : type};
  if ((!productID_Accessor) || (productID_Accessor->getAccessorType() != requestedType)) {
    productID_Accessor = ProductMetadataID_Type::create(requestedType);
    if (!productID_Accessor) {
      throw uci::base::UCIException("Error in enableProductID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productID_Accessor;
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::clearProductID() noexcept {
  productID_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& PixelReferenceCoordinateType::getReference_() const {
  if (reference_Accessor) {
    return *reference_Accessor;
  }
  throw uci::base::UCIException("Error in getReference(): An attempt was made to get an optional field that was not enabled, call hasReference() to determine if it is safe to call getReference()");
}

const uci::type::ForeignKeyType& PixelReferenceCoordinateType::getReference() const {
  return getReference_();
}

uci::type::ForeignKeyType& PixelReferenceCoordinateType::getReference() {
  return getReference_();
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::setReference(const uci::type::ForeignKeyType& accessor) {
  enableReference(accessor.getAccessorType());
  if (&accessor != reference_Accessor.get()) {
    reference_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PixelReferenceCoordinateType::hasReference() const noexcept {
  return static_cast<bool>(reference_Accessor);
}

uci::type::ForeignKeyType& PixelReferenceCoordinateType::enableReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!reference_Accessor) || (reference_Accessor->getAccessorType() != requestedType)) {
    reference_Accessor = ForeignKeyType::create(requestedType);
    if (!reference_Accessor) {
      throw uci::base::UCIException("Error in enableReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *reference_Accessor;
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::clearReference() noexcept {
  reference_Accessor.reset();
  return *this;
}

std::unique_ptr<PixelReferenceCoordinateType> PixelReferenceCoordinateType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pixelReferenceCoordinateType : type};
  return (requestedType == uci::type::accessorType::pixelReferenceCoordinateType) ? boost::make_unique<PixelReferenceCoordinateType>() : nullptr;
}

/**  */
namespace PixelReferenceCoordinateType_Names {

constexpr const char* Extern_Type_Name{"PixelReferenceCoordinateType"};
constexpr const char* PixelCoordinate_Name{"PixelCoordinate"};
constexpr const char* File_Name{"File"};
constexpr const char* ProductID_Name{"ProductID"};
constexpr const char* Reference_Name{"Reference"};

} // namespace PixelReferenceCoordinateType_Names

void PixelReferenceCoordinateType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PixelReferenceCoordinateType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PixelReferenceCoordinateType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PixelReferenceCoordinateType_Names::PixelCoordinate_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePixelCoordinate(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PixelReferenceCoordinateType_Names::File_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFile(*value);
      }
    } else if (valueType.first == nsPrefix + PixelReferenceCoordinateType_Names::ProductID_Name) {
      ProductMetadataID_Type::deserialize(valueType.second, accessor.enableProductID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PixelReferenceCoordinateType_Names::Reference_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReference(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string PixelReferenceCoordinateType::serialize(const uci::type::PixelReferenceCoordinateType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PixelReferenceCoordinateType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PixelReferenceCoordinateType_Names::Extern_Type_Name);
  }
  PixelDataType::serialize(accessor.getPixelCoordinate(), node, PixelReferenceCoordinateType_Names::PixelCoordinate_Name);
  if (accessor.hasFile()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getFile(), node, PixelReferenceCoordinateType_Names::File_Name);
  }
  if (accessor.hasProductID()) {
    ProductMetadataID_Type::serialize(accessor.getProductID(), node, PixelReferenceCoordinateType_Names::ProductID_Name);
  }
  if (accessor.hasReference()) {
    ForeignKeyType::serialize(accessor.getReference(), node, PixelReferenceCoordinateType_Names::Reference_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PixelReferenceCoordinateType>().release());
}

uci::type::PixelReferenceCoordinateType& PixelReferenceCoordinateType::create(const uci::type::PixelReferenceCoordinateType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PixelReferenceCoordinateType> newAccessor{boost::make_unique<asb_uci::type::PixelReferenceCoordinateType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PixelReferenceCoordinateType::destroy(uci::type::PixelReferenceCoordinateType& accessor) {
  delete dynamic_cast<asb_uci::type::PixelReferenceCoordinateType*>(&accessor);
}

} // namespace type

} // namespace uci

