/** @file EOB_CodesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EOB_CodesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CountryCodeType.h"
#include "asb_uci/type/EOB_ActivityCodeType.h"
#include "asb_uci/type/EmitterFunctionType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CountryCodeType.h"
#include "uci/type/EOB_ActivityCodeType.h"
#include "uci/type/EOB_CodesType.h"
#include "uci/type/EmitterFunctionType.h"
#include "uci/type/MIDB_EvaluationCodeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EOB_CodesType::EOB_CodesType() = default;

EOB_CodesType::~EOB_CodesType() = default;

void EOB_CodesType::copy(const uci::type::EOB_CodesType& accessor) {
  copyImpl(accessor, false);
}

void EOB_CodesType::copyImpl(const uci::type::EOB_CodesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EOB_CodesType&>(accessor);
    if (accessorImpl.hasEvaluationCode()) {
      setEvaluationCode(accessorImpl.getEvaluationCode());
    } else {
      clearEvaluationCode();
    }
    if (accessorImpl.functionCode_Accessor) {
      setFunctionCode(*(accessorImpl.functionCode_Accessor));
    } else {
      functionCode_Accessor.reset();
    }
    if (accessorImpl.activityCode_Accessor) {
      setActivityCode(*(accessorImpl.activityCode_Accessor));
    } else {
      activityCode_Accessor.reset();
    }
    if (accessorImpl.countryCode_Accessor) {
      setCountryCode(*(accessorImpl.countryCode_Accessor));
    } else {
      countryCode_Accessor.reset();
    }
  }
}

void EOB_CodesType::reset() noexcept {
  clearEvaluationCode();
  functionCode_Accessor.reset();
  activityCode_Accessor.reset();
  countryCode_Accessor.reset();
}

uci::type::MIDB_EvaluationCodeTypeValue EOB_CodesType::getEvaluationCode() const {
  if (evaluationCode_Accessor) {
    return *evaluationCode_Accessor;
  }
  throw uci::base::UCIException("Error in getEvaluationCode(): An attempt was made to get an optional field that was not enabled, call hasEvaluationCode() to determine if it is safe to call getEvaluationCode()");
}

uci::type::EOB_CodesType& EOB_CodesType::setEvaluationCode(uci::type::MIDB_EvaluationCodeTypeValue value) {
  evaluationCode_Accessor = value;
  return *this;
}

bool EOB_CodesType::hasEvaluationCode() const noexcept {
  return evaluationCode_Accessor.has_value();
}

uci::type::EOB_CodesType& EOB_CodesType::clearEvaluationCode() noexcept {
  evaluationCode_Accessor.reset();
  return *this;
}

uci::type::EmitterFunctionType& EOB_CodesType::getFunctionCode_() const {
  if (functionCode_Accessor) {
    return *functionCode_Accessor;
  }
  throw uci::base::UCIException("Error in getFunctionCode(): An attempt was made to get an optional field that was not enabled, call hasFunctionCode() to determine if it is safe to call getFunctionCode()");
}

const uci::type::EmitterFunctionType& EOB_CodesType::getFunctionCode() const {
  return getFunctionCode_();
}

uci::type::EmitterFunctionType& EOB_CodesType::getFunctionCode() {
  return getFunctionCode_();
}

uci::type::EOB_CodesType& EOB_CodesType::setFunctionCode(const uci::type::EmitterFunctionType& accessor) {
  enableFunctionCode();
  if (&accessor != functionCode_Accessor.get()) {
    functionCode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_CodesType::hasFunctionCode() const noexcept {
  return static_cast<bool>(functionCode_Accessor);
}

uci::type::EmitterFunctionType& EOB_CodesType::enableFunctionCode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterFunctionType : type};
  if ((!functionCode_Accessor) || (functionCode_Accessor->getAccessorType() != requestedType)) {
    functionCode_Accessor = EmitterFunctionType::create(requestedType);
    if (!functionCode_Accessor) {
      throw uci::base::UCIException("Error in enableFunctionCode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *functionCode_Accessor;
}

uci::type::EOB_CodesType& EOB_CodesType::clearFunctionCode() noexcept {
  functionCode_Accessor.reset();
  return *this;
}

uci::type::EOB_ActivityCodeType& EOB_CodesType::getActivityCode_() const {
  if (activityCode_Accessor) {
    return *activityCode_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityCode(): An attempt was made to get an optional field that was not enabled, call hasActivityCode() to determine if it is safe to call getActivityCode()");
}

const uci::type::EOB_ActivityCodeType& EOB_CodesType::getActivityCode() const {
  return getActivityCode_();
}

uci::type::EOB_ActivityCodeType& EOB_CodesType::getActivityCode() {
  return getActivityCode_();
}

uci::type::EOB_CodesType& EOB_CodesType::setActivityCode(const uci::type::EOB_ActivityCodeType& value) {
  return setActivityCode(value.c_str());
}

uci::type::EOB_CodesType& EOB_CodesType::setActivityCode(const std::string& value) {
  return setActivityCode(value.c_str());
}

uci::type::EOB_CodesType& EOB_CodesType::setActivityCode(const char* value) {
  enableActivityCode().setStringValue(value);
  return *this;
}

bool EOB_CodesType::hasActivityCode() const noexcept {
  return static_cast<bool>(activityCode_Accessor);
}

uci::type::EOB_ActivityCodeType& EOB_CodesType::enableActivityCode(uci::base::accessorType::AccessorType type) {
  if (!activityCode_Accessor) {
    activityCode_Accessor = EOB_ActivityCodeType::create(type);
  }
  return *activityCode_Accessor;
}

uci::type::EOB_CodesType& EOB_CodesType::clearActivityCode() noexcept {
  activityCode_Accessor.reset();
  return *this;
}

uci::type::CountryCodeType& EOB_CodesType::getCountryCode_() const {
  if (countryCode_Accessor) {
    return *countryCode_Accessor;
  }
  throw uci::base::UCIException("Error in getCountryCode(): An attempt was made to get an optional field that was not enabled, call hasCountryCode() to determine if it is safe to call getCountryCode()");
}

const uci::type::CountryCodeType& EOB_CodesType::getCountryCode() const {
  return getCountryCode_();
}

uci::type::CountryCodeType& EOB_CodesType::getCountryCode() {
  return getCountryCode_();
}

uci::type::EOB_CodesType& EOB_CodesType::setCountryCode(const uci::type::CountryCodeType& accessor) {
  enableCountryCode();
  if (&accessor != countryCode_Accessor.get()) {
    countryCode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_CodesType::hasCountryCode() const noexcept {
  return static_cast<bool>(countryCode_Accessor);
}

uci::type::CountryCodeType& EOB_CodesType::enableCountryCode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::countryCodeType : type};
  if ((!countryCode_Accessor) || (countryCode_Accessor->getAccessorType() != requestedType)) {
    countryCode_Accessor = CountryCodeType::create(requestedType);
    if (!countryCode_Accessor) {
      throw uci::base::UCIException("Error in enableCountryCode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *countryCode_Accessor;
}

uci::type::EOB_CodesType& EOB_CodesType::clearCountryCode() noexcept {
  countryCode_Accessor.reset();
  return *this;
}

std::unique_ptr<EOB_CodesType> EOB_CodesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_CodesType : type};
  return (requestedType == uci::type::accessorType::eOB_CodesType) ? boost::make_unique<EOB_CodesType>() : nullptr;
}

/**  */
namespace EOB_CodesType_Names {

constexpr const char* Extern_Type_Name{"EOB_CodesType"};
constexpr const char* EvaluationCode_Name{"EvaluationCode"};
constexpr const char* FunctionCode_Name{"FunctionCode"};
constexpr const char* ActivityCode_Name{"ActivityCode"};
constexpr const char* CountryCode_Name{"CountryCode"};

} // namespace EOB_CodesType_Names

void EOB_CodesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_CodesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_CodesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_CodesType_Names::EvaluationCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEvaluationCode(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + EOB_CodesType_Names::FunctionCode_Name) {
      EmitterFunctionType::deserialize(valueType.second, accessor.enableFunctionCode(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_CodesType_Names::ActivityCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActivityCode(*value);
      }
    } else if (valueType.first == nsPrefix + EOB_CodesType_Names::CountryCode_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableCountryCode(), nodeName, nsPrefix);
    }
  }
}

std::string EOB_CodesType::serialize(const uci::type::EOB_CodesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EOB_CodesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_CodesType_Names::Extern_Type_Name);
  }
  if (accessor.hasEvaluationCode()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getEvaluationCode(), node, EOB_CodesType_Names::EvaluationCode_Name);
  }
  if (accessor.hasFunctionCode()) {
    EmitterFunctionType::serialize(accessor.getFunctionCode(), node, EOB_CodesType_Names::FunctionCode_Name);
  }
  if (accessor.hasActivityCode()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getActivityCode(), node, EOB_CodesType_Names::ActivityCode_Name);
  }
  if (accessor.hasCountryCode()) {
    CountryCodeType::serialize(accessor.getCountryCode(), node, EOB_CodesType_Names::CountryCode_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EOB_CodesType& EOB_CodesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EOB_CodesType>().release());
}

uci::type::EOB_CodesType& EOB_CodesType::create(const uci::type::EOB_CodesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EOB_CodesType> newAccessor{boost::make_unique<asb_uci::type::EOB_CodesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EOB_CodesType::destroy(uci::type::EOB_CodesType& accessor) {
  delete dynamic_cast<asb_uci::type::EOB_CodesType*>(&accessor);
}

} // namespace type

} // namespace uci

