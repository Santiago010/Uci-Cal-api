/** @file EntityConfirmationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityConfirmationRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityDimensionEstimateType.h"
#include "../../../include/asb_uci/type/EntityDimensionEstimateUncertaintyType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/EntityOrbitalEphemerisID_Type.h"
#include "../../../include/asb_uci/type/FileMetadataID_Type.h"
#include "../../../include/asb_uci/type/MeasurementKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/ProductMetadataID_Type.h"
#include "../../../include/asb_uci/type/QuaternionAttitudeType.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "../../../include/asb_uci/type/SensorKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/SystemOrbitalEphemerisID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityConfirmationRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityDimensionEstimateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityDimensionEstimateUncertaintyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalEphemerisID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MeasurementKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QuaternionAttitudeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementInstanceID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemOrbitalEphemerisID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityConfirmationRequestMDT::EntityConfirmationRequestMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    requirementID_Accessor{boost::make_unique<RequirementInstanceID_ChoiceType>()},
    entityID_Accessor{boost::make_unique<EntityID_Type>()},
    fileMetadataID_Accessor{boost::make_unique<FileMetadataID>(0, SIZE_MAX)} {
}

EntityConfirmationRequestMDT::~EntityConfirmationRequestMDT() = default;

void EntityConfirmationRequestMDT::copy(const uci::type::EntityConfirmationRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void EntityConfirmationRequestMDT::copyImpl(const uci::type::EntityConfirmationRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EntityConfirmationRequestMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setRequirementID(*(accessorImpl.requirementID_Accessor));
    setEntityID(*(accessorImpl.entityID_Accessor));
    setTimeStamp(accessorImpl.timeStamp_Accessor);
    if (accessorImpl.entityDimension_EstimateUncertainty_Accessor) {
      setEntityDimension_EstimateUncertainty(*(accessorImpl.entityDimension_EstimateUncertainty_Accessor));
    } else {
      entityDimension_EstimateUncertainty_Accessor.reset();
    }
    if (accessorImpl.entityDimension_Estimate_Accessor) {
      setEntityDimension_Estimate(*(accessorImpl.entityDimension_Estimate_Accessor));
    } else {
      entityDimension_Estimate_Accessor.reset();
    }
    if (accessorImpl.attitudeEstimates_Accessor) {
      setAttitudeEstimates(*(accessorImpl.attitudeEstimates_Accessor));
    } else {
      attitudeEstimates_Accessor.reset();
    }
    setFileMetadataID(*(accessorImpl.fileMetadataID_Accessor));
    if (accessorImpl.productMetadataID_Accessor) {
      setProductMetadataID(*(accessorImpl.productMetadataID_Accessor));
    } else {
      productMetadataID_Accessor.reset();
    }
    if (accessorImpl.measurementKinematics_Accessor) {
      setMeasurementKinematics(*(accessorImpl.measurementKinematics_Accessor));
    } else {
      measurementKinematics_Accessor.reset();
    }
    if (accessorImpl.referenceKinematics_Accessor) {
      setReferenceKinematics(*(accessorImpl.referenceKinematics_Accessor));
    } else {
      referenceKinematics_Accessor.reset();
    }
    if (accessorImpl.systemEphemerisID_Accessor) {
      setSystemEphemerisID(*(accessorImpl.systemEphemerisID_Accessor));
    } else {
      systemEphemerisID_Accessor.reset();
    }
    if (accessorImpl.entityEphemerisID_Accessor) {
      setEntityEphemerisID(*(accessorImpl.entityEphemerisID_Accessor));
    } else {
      entityEphemerisID_Accessor.reset();
    }
  }
}

void EntityConfirmationRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  systemID_Accessor->reset();
  requirementID_Accessor->reset();
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  timeStamp_Accessor = 0;
  entityDimension_EstimateUncertainty_Accessor.reset();
  entityDimension_Estimate_Accessor.reset();
  attitudeEstimates_Accessor.reset();
  fileMetadataID_Accessor->reset();
  productMetadataID_Accessor.reset();
  measurementKinematics_Accessor.reset();
  referenceKinematics_Accessor.reset();
  systemEphemerisID_Accessor.reset();
  entityEphemerisID_Accessor.reset();
}

const uci::type::SystemID_Type& EntityConfirmationRequestMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& EntityConfirmationRequestMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementInstanceID_ChoiceType& EntityConfirmationRequestMDT::getRequirementID() const {
  return *requirementID_Accessor;
}

uci::type::RequirementInstanceID_ChoiceType& EntityConfirmationRequestMDT::getRequirementID() {
  return *requirementID_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setRequirementID(const uci::type::RequirementInstanceID_ChoiceType& accessor) {
  if (&accessor != requirementID_Accessor.get()) {
    requirementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityID_Type& EntityConfirmationRequestMDT::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityConfirmationRequestMDT::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityConfirmationRequestMDT::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::DateTimeTypeValue EntityConfirmationRequestMDT::getTimeStamp() const {
  return timeStamp_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setTimeStamp(uci::type::DateTimeTypeValue value) {
  timeStamp_Accessor = value;
  return *this;
}


uci::type::EntityDimensionEstimateUncertaintyType& EntityConfirmationRequestMDT::getEntityDimension_EstimateUncertainty_() const {
  if (entityDimension_EstimateUncertainty_Accessor) {
    return *entityDimension_EstimateUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityDimension_EstimateUncertainty(): An attempt was made to get an optional field that was not enabled, call hasEntityDimension_EstimateUncertainty() to determine if it is safe to call getEntityDimension_EstimateUncertainty()");
}

const uci::type::EntityDimensionEstimateUncertaintyType& EntityConfirmationRequestMDT::getEntityDimension_EstimateUncertainty() const {
  return getEntityDimension_EstimateUncertainty_();
}

uci::type::EntityDimensionEstimateUncertaintyType& EntityConfirmationRequestMDT::getEntityDimension_EstimateUncertainty() {
  return getEntityDimension_EstimateUncertainty_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setEntityDimension_EstimateUncertainty(const uci::type::EntityDimensionEstimateUncertaintyType& accessor) {
  enableEntityDimension_EstimateUncertainty();
  if (&accessor != entityDimension_EstimateUncertainty_Accessor.get()) {
    entityDimension_EstimateUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasEntityDimension_EstimateUncertainty() const noexcept {
  return static_cast<bool>(entityDimension_EstimateUncertainty_Accessor);
}

uci::type::EntityDimensionEstimateUncertaintyType& EntityConfirmationRequestMDT::enableEntityDimension_EstimateUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityDimensionEstimateUncertaintyType : type};
  if ((!entityDimension_EstimateUncertainty_Accessor) || (entityDimension_EstimateUncertainty_Accessor->getAccessorType() != requestedType)) {
    entityDimension_EstimateUncertainty_Accessor = EntityDimensionEstimateUncertaintyType::create(requestedType);
    if (!entityDimension_EstimateUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableEntityDimension_EstimateUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityDimension_EstimateUncertainty_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearEntityDimension_EstimateUncertainty() noexcept {
  entityDimension_EstimateUncertainty_Accessor.reset();
  return *this;
}

uci::type::EntityDimensionEstimateType& EntityConfirmationRequestMDT::getEntityDimension_Estimate_() const {
  if (entityDimension_Estimate_Accessor) {
    return *entityDimension_Estimate_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityDimension_Estimate(): An attempt was made to get an optional field that was not enabled, call hasEntityDimension_Estimate() to determine if it is safe to call getEntityDimension_Estimate()");
}

const uci::type::EntityDimensionEstimateType& EntityConfirmationRequestMDT::getEntityDimension_Estimate() const {
  return getEntityDimension_Estimate_();
}

uci::type::EntityDimensionEstimateType& EntityConfirmationRequestMDT::getEntityDimension_Estimate() {
  return getEntityDimension_Estimate_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setEntityDimension_Estimate(const uci::type::EntityDimensionEstimateType& accessor) {
  enableEntityDimension_Estimate();
  if (&accessor != entityDimension_Estimate_Accessor.get()) {
    entityDimension_Estimate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasEntityDimension_Estimate() const noexcept {
  return static_cast<bool>(entityDimension_Estimate_Accessor);
}

uci::type::EntityDimensionEstimateType& EntityConfirmationRequestMDT::enableEntityDimension_Estimate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityDimensionEstimateType : type};
  if ((!entityDimension_Estimate_Accessor) || (entityDimension_Estimate_Accessor->getAccessorType() != requestedType)) {
    entityDimension_Estimate_Accessor = EntityDimensionEstimateType::create(requestedType);
    if (!entityDimension_Estimate_Accessor) {
      throw uci::base::UCIException("Error in enableEntityDimension_Estimate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityDimension_Estimate_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearEntityDimension_Estimate() noexcept {
  entityDimension_Estimate_Accessor.reset();
  return *this;
}

uci::type::QuaternionAttitudeType& EntityConfirmationRequestMDT::getAttitudeEstimates_() const {
  if (attitudeEstimates_Accessor) {
    return *attitudeEstimates_Accessor;
  }
  throw uci::base::UCIException("Error in getAttitudeEstimates(): An attempt was made to get an optional field that was not enabled, call hasAttitudeEstimates() to determine if it is safe to call getAttitudeEstimates()");
}

const uci::type::QuaternionAttitudeType& EntityConfirmationRequestMDT::getAttitudeEstimates() const {
  return getAttitudeEstimates_();
}

uci::type::QuaternionAttitudeType& EntityConfirmationRequestMDT::getAttitudeEstimates() {
  return getAttitudeEstimates_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setAttitudeEstimates(const uci::type::QuaternionAttitudeType& accessor) {
  enableAttitudeEstimates();
  if (&accessor != attitudeEstimates_Accessor.get()) {
    attitudeEstimates_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasAttitudeEstimates() const noexcept {
  return static_cast<bool>(attitudeEstimates_Accessor);
}

uci::type::QuaternionAttitudeType& EntityConfirmationRequestMDT::enableAttitudeEstimates(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::quaternionAttitudeType : type};
  if ((!attitudeEstimates_Accessor) || (attitudeEstimates_Accessor->getAccessorType() != requestedType)) {
    attitudeEstimates_Accessor = QuaternionAttitudeType::create(requestedType);
    if (!attitudeEstimates_Accessor) {
      throw uci::base::UCIException("Error in enableAttitudeEstimates(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *attitudeEstimates_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearAttitudeEstimates() noexcept {
  attitudeEstimates_Accessor.reset();
  return *this;
}

const uci::type::EntityConfirmationRequestMDT::FileMetadataID& EntityConfirmationRequestMDT::getFileMetadataID() const {
  return *fileMetadataID_Accessor;
}

uci::type::EntityConfirmationRequestMDT::FileMetadataID& EntityConfirmationRequestMDT::getFileMetadataID() {
  return *fileMetadataID_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setFileMetadataID(const uci::type::EntityConfirmationRequestMDT::FileMetadataID& accessor) {
  if (&accessor != fileMetadataID_Accessor.get()) {
    fileMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductMetadataID_Type& EntityConfirmationRequestMDT::getProductMetadataID_() const {
  if (productMetadataID_Accessor) {
    return *productMetadataID_Accessor;
  }
  throw uci::base::UCIException("Error in getProductMetadataID(): An attempt was made to get an optional field that was not enabled, call hasProductMetadataID() to determine if it is safe to call getProductMetadataID()");
}

const uci::type::ProductMetadataID_Type& EntityConfirmationRequestMDT::getProductMetadataID() const {
  return getProductMetadataID_();
}

uci::type::ProductMetadataID_Type& EntityConfirmationRequestMDT::getProductMetadataID() {
  return getProductMetadataID_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setProductMetadataID(const uci::type::ProductMetadataID_Type& accessor) {
  enableProductMetadataID();
  if (&accessor != productMetadataID_Accessor.get()) {
    productMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasProductMetadataID() const noexcept {
  return static_cast<bool>(productMetadataID_Accessor);
}

uci::type::ProductMetadataID_Type& EntityConfirmationRequestMDT::enableProductMetadataID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productMetadataID_Type : type};
  if ((!productMetadataID_Accessor) || (productMetadataID_Accessor->getAccessorType() != requestedType)) {
    productMetadataID_Accessor = ProductMetadataID_Type::create(requestedType);
    if (!productMetadataID_Accessor) {
      throw uci::base::UCIException("Error in enableProductMetadataID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productMetadataID_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearProductMetadataID() noexcept {
  productMetadataID_Accessor.reset();
  return *this;
}

uci::type::MeasurementKinematicsChoiceType& EntityConfirmationRequestMDT::getMeasurementKinematics_() const {
  if (measurementKinematics_Accessor) {
    return *measurementKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getMeasurementKinematics(): An attempt was made to get an optional field that was not enabled, call hasMeasurementKinematics() to determine if it is safe to call getMeasurementKinematics()");
}

const uci::type::MeasurementKinematicsChoiceType& EntityConfirmationRequestMDT::getMeasurementKinematics() const {
  return getMeasurementKinematics_();
}

uci::type::MeasurementKinematicsChoiceType& EntityConfirmationRequestMDT::getMeasurementKinematics() {
  return getMeasurementKinematics_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setMeasurementKinematics(const uci::type::MeasurementKinematicsChoiceType& accessor) {
  enableMeasurementKinematics();
  if (&accessor != measurementKinematics_Accessor.get()) {
    measurementKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasMeasurementKinematics() const noexcept {
  return static_cast<bool>(measurementKinematics_Accessor);
}

uci::type::MeasurementKinematicsChoiceType& EntityConfirmationRequestMDT::enableMeasurementKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementKinematicsChoiceType : type};
  if ((!measurementKinematics_Accessor) || (measurementKinematics_Accessor->getAccessorType() != requestedType)) {
    measurementKinematics_Accessor = MeasurementKinematicsChoiceType::create(requestedType);
    if (!measurementKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableMeasurementKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *measurementKinematics_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearMeasurementKinematics() noexcept {
  measurementKinematics_Accessor.reset();
  return *this;
}

uci::type::SensorKinematicsChoiceType& EntityConfirmationRequestMDT::getReferenceKinematics_() const {
  if (referenceKinematics_Accessor) {
    return *referenceKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getReferenceKinematics(): An attempt was made to get an optional field that was not enabled, call hasReferenceKinematics() to determine if it is safe to call getReferenceKinematics()");
}

const uci::type::SensorKinematicsChoiceType& EntityConfirmationRequestMDT::getReferenceKinematics() const {
  return getReferenceKinematics_();
}

uci::type::SensorKinematicsChoiceType& EntityConfirmationRequestMDT::getReferenceKinematics() {
  return getReferenceKinematics_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setReferenceKinematics(const uci::type::SensorKinematicsChoiceType& accessor) {
  enableReferenceKinematics();
  if (&accessor != referenceKinematics_Accessor.get()) {
    referenceKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasReferenceKinematics() const noexcept {
  return static_cast<bool>(referenceKinematics_Accessor);
}

uci::type::SensorKinematicsChoiceType& EntityConfirmationRequestMDT::enableReferenceKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorKinematicsChoiceType : type};
  if ((!referenceKinematics_Accessor) || (referenceKinematics_Accessor->getAccessorType() != requestedType)) {
    referenceKinematics_Accessor = SensorKinematicsChoiceType::create(requestedType);
    if (!referenceKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableReferenceKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *referenceKinematics_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearReferenceKinematics() noexcept {
  referenceKinematics_Accessor.reset();
  return *this;
}

uci::type::SystemOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::getSystemEphemerisID_() const {
  if (systemEphemerisID_Accessor) {
    return *systemEphemerisID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemEphemerisID(): An attempt was made to get an optional field that was not enabled, call hasSystemEphemerisID() to determine if it is safe to call getSystemEphemerisID()");
}

const uci::type::SystemOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::getSystemEphemerisID() const {
  return getSystemEphemerisID_();
}

uci::type::SystemOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::getSystemEphemerisID() {
  return getSystemEphemerisID_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setSystemEphemerisID(const uci::type::SystemOrbitalEphemerisID_Type& accessor) {
  enableSystemEphemerisID();
  if (&accessor != systemEphemerisID_Accessor.get()) {
    systemEphemerisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasSystemEphemerisID() const noexcept {
  return static_cast<bool>(systemEphemerisID_Accessor);
}

uci::type::SystemOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::enableSystemEphemerisID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitalEphemerisID_Type : type};
  if ((!systemEphemerisID_Accessor) || (systemEphemerisID_Accessor->getAccessorType() != requestedType)) {
    systemEphemerisID_Accessor = SystemOrbitalEphemerisID_Type::create(requestedType);
    if (!systemEphemerisID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemEphemerisID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemEphemerisID_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearSystemEphemerisID() noexcept {
  systemEphemerisID_Accessor.reset();
  return *this;
}

uci::type::EntityOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::getEntityEphemerisID_() const {
  if (entityEphemerisID_Accessor) {
    return *entityEphemerisID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityEphemerisID(): An attempt was made to get an optional field that was not enabled, call hasEntityEphemerisID() to determine if it is safe to call getEntityEphemerisID()");
}

const uci::type::EntityOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::getEntityEphemerisID() const {
  return getEntityEphemerisID_();
}

uci::type::EntityOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::getEntityEphemerisID() {
  return getEntityEphemerisID_();
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::setEntityEphemerisID(const uci::type::EntityOrbitalEphemerisID_Type& accessor) {
  enableEntityEphemerisID();
  if (&accessor != entityEphemerisID_Accessor.get()) {
    entityEphemerisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityConfirmationRequestMDT::hasEntityEphemerisID() const noexcept {
  return static_cast<bool>(entityEphemerisID_Accessor);
}

uci::type::EntityOrbitalEphemerisID_Type& EntityConfirmationRequestMDT::enableEntityEphemerisID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalEphemerisID_Type : type};
  if ((!entityEphemerisID_Accessor) || (entityEphemerisID_Accessor->getAccessorType() != requestedType)) {
    entityEphemerisID_Accessor = EntityOrbitalEphemerisID_Type::create(requestedType);
    if (!entityEphemerisID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityEphemerisID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityEphemerisID_Accessor;
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::clearEntityEphemerisID() noexcept {
  entityEphemerisID_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityConfirmationRequestMDT> EntityConfirmationRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityConfirmationRequestMDT : type};
  return (requestedType == uci::type::accessorType::entityConfirmationRequestMDT) ? boost::make_unique<EntityConfirmationRequestMDT>() : nullptr;
}

/**  */
namespace EntityConfirmationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"EntityConfirmationRequestMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* RequirementID_Name{"RequirementID"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* TimeStamp_Name{"TimeStamp"};
constexpr const char* EntityDimension_EstimateUncertainty_Name{"EntityDimension_EstimateUncertainty"};
constexpr const char* EntityDimension_Estimate_Name{"EntityDimension_Estimate"};
constexpr const char* AttitudeEstimates_Name{"AttitudeEstimates"};
constexpr const char* FileMetadataID_Name{"FileMetadataID"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* MeasurementKinematics_Name{"MeasurementKinematics"};
constexpr const char* ReferenceKinematics_Name{"ReferenceKinematics"};
constexpr const char* SystemEphemerisID_Name{"SystemEphemerisID"};
constexpr const char* EntityEphemerisID_Name{"EntityEphemerisID"};

} // namespace EntityConfirmationRequestMDT_Names

void EntityConfirmationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityConfirmationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityConfirmationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::RequirementID_Name) {
      RequirementInstanceID_ChoiceType::deserialize(valueType.second, accessor.getRequirementID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::TimeStamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeStamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityDimension_EstimateUncertainty_Name) {
      EntityDimensionEstimateUncertaintyType::deserialize(valueType.second, accessor.enableEntityDimension_EstimateUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityDimension_Estimate_Name) {
      EntityDimensionEstimateType::deserialize(valueType.second, accessor.enableEntityDimension_Estimate(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::AttitudeEstimates_Name) {
      QuaternionAttitudeType::deserialize(valueType.second, accessor.enableAttitudeEstimates(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::FileMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityConfirmationRequestMDT::FileMetadataID& boundedList = accessor.getFileMetadataID();
        const uci::type::EntityConfirmationRequestMDT::FileMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::ProductMetadataID_Name) {
      ProductMetadataID_Type::deserialize(valueType.second, accessor.enableProductMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::MeasurementKinematics_Name) {
      MeasurementKinematicsChoiceType::deserialize(valueType.second, accessor.enableMeasurementKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::ReferenceKinematics_Name) {
      SensorKinematicsChoiceType::deserialize(valueType.second, accessor.enableReferenceKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::SystemEphemerisID_Name) {
      SystemOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.enableSystemEphemerisID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityEphemerisID_Name) {
      EntityOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.enableEntityEphemerisID(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EntityConfirmationRequestMDT::serialize(const uci::type::EntityConfirmationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityConfirmationRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityConfirmationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  SystemID_Type::serialize(accessor.getSystemID(), node, EntityConfirmationRequestMDT_Names::SystemID_Name);
  RequirementInstanceID_ChoiceType::serialize(accessor.getRequirementID(), node, EntityConfirmationRequestMDT_Names::RequirementID_Name);
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityConfirmationRequestMDT_Names::EntityID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeStamp(), node, EntityConfirmationRequestMDT_Names::TimeStamp_Name);
  if (accessor.hasEntityDimension_EstimateUncertainty()) {
    EntityDimensionEstimateUncertaintyType::serialize(accessor.getEntityDimension_EstimateUncertainty(), node, EntityConfirmationRequestMDT_Names::EntityDimension_EstimateUncertainty_Name);
  }
  if (accessor.hasEntityDimension_Estimate()) {
    EntityDimensionEstimateType::serialize(accessor.getEntityDimension_Estimate(), node, EntityConfirmationRequestMDT_Names::EntityDimension_Estimate_Name);
  }
  if (accessor.hasAttitudeEstimates()) {
    QuaternionAttitudeType::serialize(accessor.getAttitudeEstimates(), node, EntityConfirmationRequestMDT_Names::AttitudeEstimates_Name);
  }
  {
    const uci::type::EntityConfirmationRequestMDT::FileMetadataID& boundedList = accessor.getFileMetadataID();
    for (uci::type::EntityConfirmationRequestMDT::FileMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, EntityConfirmationRequestMDT_Names::FileMetadataID_Name);
    }
  }
  if (accessor.hasProductMetadataID()) {
    ProductMetadataID_Type::serialize(accessor.getProductMetadataID(), node, EntityConfirmationRequestMDT_Names::ProductMetadataID_Name);
  }
  if (accessor.hasMeasurementKinematics()) {
    MeasurementKinematicsChoiceType::serialize(accessor.getMeasurementKinematics(), node, EntityConfirmationRequestMDT_Names::MeasurementKinematics_Name);
  }
  if (accessor.hasReferenceKinematics()) {
    SensorKinematicsChoiceType::serialize(accessor.getReferenceKinematics(), node, EntityConfirmationRequestMDT_Names::ReferenceKinematics_Name);
  }
  if (accessor.hasSystemEphemerisID()) {
    SystemOrbitalEphemerisID_Type::serialize(accessor.getSystemEphemerisID(), node, EntityConfirmationRequestMDT_Names::SystemEphemerisID_Name);
  }
  if (accessor.hasEntityEphemerisID()) {
    EntityOrbitalEphemerisID_Type::serialize(accessor.getEntityEphemerisID(), node, EntityConfirmationRequestMDT_Names::EntityEphemerisID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityConfirmationRequestMDT>().release());
}

uci::type::EntityConfirmationRequestMDT& EntityConfirmationRequestMDT::create(const uci::type::EntityConfirmationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityConfirmationRequestMDT> newAccessor{boost::make_unique<asb_uci::type::EntityConfirmationRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityConfirmationRequestMDT::destroy(uci::type::EntityConfirmationRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::EntityConfirmationRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

