/** @file LoiterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LoiterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/HoverType.h"
#include "../../../include/asb_uci/type/OrbitType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/HoverType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LoiterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LoiterType::LoiterType() = default;

LoiterType::~LoiterType() = default;

void LoiterType::copy(const uci::type::LoiterType& accessor) {
  copyImpl(accessor, false);
}

void LoiterType::copyImpl(const uci::type::LoiterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LoiterType&>(accessor);
    if (accessorImpl.orbit_Accessor) {
      setOrbit(*(accessorImpl.orbit_Accessor));
    } else {
      orbit_Accessor.reset();
    }
    if (accessorImpl.hover_Accessor) {
      setHover(*(accessorImpl.hover_Accessor));
    } else {
      hover_Accessor.reset();
    }
  }
}

void LoiterType::reset() noexcept {
  orbit_Accessor.reset();
  hover_Accessor.reset();
}

uci::type::LoiterType::LoiterTypeChoice LoiterType::getLoiterTypeChoiceOrdinal() const noexcept {
  if (orbit_Accessor) {
    return LOITERTYPE_CHOICE_ORBIT;
  }
  if (hover_Accessor) {
    return LOITERTYPE_CHOICE_HOVER;
  }
  return LOITERTYPE_CHOICE_NONE;
}

uci::type::LoiterType& LoiterType::setLoiterTypeChoiceOrdinal(uci::type::LoiterType::LoiterTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case LOITERTYPE_CHOICE_ORBIT:
      chooseOrbit("setLoiterTypeChoiceOrdinal", type);
      break;
    case LOITERTYPE_CHOICE_HOVER:
      chooseHover("setLoiterTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setLoiterTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitType& LoiterType::getOrbit_() const {
  if (orbit_Accessor) {
    return *orbit_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbit(): Unable to get Orbit, field not selected");
}

const uci::type::OrbitType& LoiterType::getOrbit() const {
  return getOrbit_();
}

uci::type::OrbitType& LoiterType::getOrbit() {
  return getOrbit_();
}

uci::type::LoiterType& LoiterType::setOrbit(const uci::type::OrbitType& accessor) {
  chooseOrbit();
  if (&accessor != orbit_Accessor.get()) {
    orbit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LoiterType::isOrbit() const noexcept {
  return static_cast<bool>(orbit_Accessor);
}

uci::type::OrbitType& LoiterType::chooseOrbit(const std::string& method, uci::base::accessorType::AccessorType type) {
  hover_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitType : type};
  if ((!orbit_Accessor) || (orbit_Accessor->getAccessorType() != requestedType)) {
    orbit_Accessor = OrbitType::create(type);
    if (!orbit_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbit_Accessor;
}

uci::type::OrbitType& LoiterType::chooseOrbit(uci::base::accessorType::AccessorType type) {
  return chooseOrbit("chooseOrbit", type);
}

uci::type::HoverType& LoiterType::getHover_() const {
  if (hover_Accessor) {
    return *hover_Accessor;
  }
  throw uci::base::UCIException("Error in getHover(): Unable to get Hover, field not selected");
}

const uci::type::HoverType& LoiterType::getHover() const {
  return getHover_();
}

uci::type::HoverType& LoiterType::getHover() {
  return getHover_();
}

uci::type::LoiterType& LoiterType::setHover(const uci::type::HoverType& accessor) {
  chooseHover();
  if (&accessor != hover_Accessor.get()) {
    hover_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LoiterType::isHover() const noexcept {
  return static_cast<bool>(hover_Accessor);
}

uci::type::HoverType& LoiterType::chooseHover(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbit_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::hoverType : type};
  if ((!hover_Accessor) || (hover_Accessor->getAccessorType() != requestedType)) {
    hover_Accessor = HoverType::create(type);
    if (!hover_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hover_Accessor;
}

uci::type::HoverType& LoiterType::chooseHover(uci::base::accessorType::AccessorType type) {
  return chooseHover("chooseHover", type);
}

std::unique_ptr<LoiterType> LoiterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::loiterType : type};
  return (requestedType == uci::type::accessorType::loiterType) ? boost::make_unique<LoiterType>() : nullptr;
}

/**  */
namespace LoiterType_Names {

constexpr const char* Extern_Type_Name{"LoiterType"};
constexpr const char* Orbit_Name{"Orbit"};
constexpr const char* Hover_Name{"Hover"};

} // namespace LoiterType_Names

void LoiterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LoiterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LoiterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LoiterType_Names::Orbit_Name) {
      OrbitType::deserialize(valueType.second, accessor.chooseOrbit(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LoiterType_Names::Hover_Name) {
      HoverType::deserialize(valueType.second, accessor.chooseHover(), nodeName, nsPrefix);
    }
  }
}

std::string LoiterType::serialize(const uci::type::LoiterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LoiterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LoiterType_Names::Extern_Type_Name);
  }
  if (accessor.isOrbit()) {
    OrbitType::serialize(accessor.getOrbit(), node, LoiterType_Names::Orbit_Name);
  } else if (accessor.isHover()) {
    HoverType::serialize(accessor.getHover(), node, LoiterType_Names::Hover_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LoiterType& LoiterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LoiterType>().release());
}

uci::type::LoiterType& LoiterType::create(const uci::type::LoiterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LoiterType> newAccessor{boost::make_unique<asb_uci::type::LoiterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LoiterType::destroy(uci::type::LoiterType& accessor) {
  delete dynamic_cast<asb_uci::type::LoiterType*>(&accessor);
}

} // namespace type

} // namespace uci

