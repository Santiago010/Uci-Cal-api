/** @file SourceKinematicsElementIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SourceKinematicsElementIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/SatelliteIdentifierType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/SatelliteIdentifierType.h"
#include "uci/type/SourceKinematicsElementIdentityType.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SourceKinematicsElementIdentityType::SourceKinematicsElementIdentityType() = default;

SourceKinematicsElementIdentityType::~SourceKinematicsElementIdentityType() = default;

void SourceKinematicsElementIdentityType::copy(const uci::type::SourceKinematicsElementIdentityType& accessor) {
  copyImpl(accessor, false);
}

void SourceKinematicsElementIdentityType::copyImpl(const uci::type::SourceKinematicsElementIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SourceKinematicsElementIdentityType&>(accessor);
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    if (accessorImpl.componentID_Accessor) {
      setComponentID(*(accessorImpl.componentID_Accessor));
    } else {
      componentID_Accessor.reset();
    }
    if (accessorImpl.satellite_Accessor) {
      setSatellite(*(accessorImpl.satellite_Accessor));
    } else {
      satellite_Accessor.reset();
    }
  }
}

void SourceKinematicsElementIdentityType::reset() noexcept {
  systemID_Accessor.reset();
  subsystemID_Accessor.reset();
  componentID_Accessor.reset();
  satellite_Accessor.reset();
}

uci::type::SystemID_Type& SourceKinematicsElementIdentityType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& SourceKinematicsElementIdentityType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& SourceKinematicsElementIdentityType::getSystemID() {
  return getSystemID_();
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SourceKinematicsElementIdentityType::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& SourceKinematicsElementIdentityType::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::SubsystemID_Type& SourceKinematicsElementIdentityType::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& SourceKinematicsElementIdentityType::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& SourceKinematicsElementIdentityType::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SourceKinematicsElementIdentityType::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& SourceKinematicsElementIdentityType::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

uci::type::ComponentID_Type& SourceKinematicsElementIdentityType::getComponentID_() const {
  if (componentID_Accessor) {
    return *componentID_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentID(): An attempt was made to get an optional field that was not enabled, call hasComponentID() to determine if it is safe to call getComponentID()");
}

const uci::type::ComponentID_Type& SourceKinematicsElementIdentityType::getComponentID() const {
  return getComponentID_();
}

uci::type::ComponentID_Type& SourceKinematicsElementIdentityType::getComponentID() {
  return getComponentID_();
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  enableComponentID();
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SourceKinematicsElementIdentityType::hasComponentID() const noexcept {
  return static_cast<bool>(componentID_Accessor);
}

uci::type::ComponentID_Type& SourceKinematicsElementIdentityType::enableComponentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentID_Type : type};
  if ((!componentID_Accessor) || (componentID_Accessor->getAccessorType() != requestedType)) {
    componentID_Accessor = ComponentID_Type::create(requestedType);
    if (!componentID_Accessor) {
      throw uci::base::UCIException("Error in enableComponentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentID_Accessor;
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::clearComponentID() noexcept {
  componentID_Accessor.reset();
  return *this;
}

uci::type::SatelliteIdentifierType& SourceKinematicsElementIdentityType::getSatellite_() const {
  if (satellite_Accessor) {
    return *satellite_Accessor;
  }
  throw uci::base::UCIException("Error in getSatellite(): An attempt was made to get an optional field that was not enabled, call hasSatellite() to determine if it is safe to call getSatellite()");
}

const uci::type::SatelliteIdentifierType& SourceKinematicsElementIdentityType::getSatellite() const {
  return getSatellite_();
}

uci::type::SatelliteIdentifierType& SourceKinematicsElementIdentityType::getSatellite() {
  return getSatellite_();
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::setSatellite(const uci::type::SatelliteIdentifierType& accessor) {
  enableSatellite();
  if (&accessor != satellite_Accessor.get()) {
    satellite_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SourceKinematicsElementIdentityType::hasSatellite() const noexcept {
  return static_cast<bool>(satellite_Accessor);
}

uci::type::SatelliteIdentifierType& SourceKinematicsElementIdentityType::enableSatellite(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteIdentifierType : type};
  if ((!satellite_Accessor) || (satellite_Accessor->getAccessorType() != requestedType)) {
    satellite_Accessor = SatelliteIdentifierType::create(requestedType);
    if (!satellite_Accessor) {
      throw uci::base::UCIException("Error in enableSatellite(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *satellite_Accessor;
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::clearSatellite() noexcept {
  satellite_Accessor.reset();
  return *this;
}

std::unique_ptr<SourceKinematicsElementIdentityType> SourceKinematicsElementIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceKinematicsElementIdentityType : type};
  return (requestedType == uci::type::accessorType::sourceKinematicsElementIdentityType) ? boost::make_unique<SourceKinematicsElementIdentityType>() : nullptr;
}

/**  */
namespace SourceKinematicsElementIdentityType_Names {

constexpr const char* Extern_Type_Name{"SourceKinematicsElementIdentityType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* Satellite_Name{"Satellite"};

} // namespace SourceKinematicsElementIdentityType_Names

void SourceKinematicsElementIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SourceKinematicsElementIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SourceKinematicsElementIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SourceKinematicsElementIdentityType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceKinematicsElementIdentityType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceKinematicsElementIdentityType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.enableComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceKinematicsElementIdentityType_Names::Satellite_Name) {
      SatelliteIdentifierType::deserialize(valueType.second, accessor.enableSatellite(), nodeName, nsPrefix);
    }
  }
}

std::string SourceKinematicsElementIdentityType::serialize(const uci::type::SourceKinematicsElementIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SourceKinematicsElementIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SourceKinematicsElementIdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, SourceKinematicsElementIdentityType_Names::SystemID_Name);
  }
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SourceKinematicsElementIdentityType_Names::SubsystemID_Name);
  }
  if (accessor.hasComponentID()) {
    ComponentID_Type::serialize(accessor.getComponentID(), node, SourceKinematicsElementIdentityType_Names::ComponentID_Name);
  }
  if (accessor.hasSatellite()) {
    SatelliteIdentifierType::serialize(accessor.getSatellite(), node, SourceKinematicsElementIdentityType_Names::Satellite_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SourceKinematicsElementIdentityType>().release());
}

uci::type::SourceKinematicsElementIdentityType& SourceKinematicsElementIdentityType::create(const uci::type::SourceKinematicsElementIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SourceKinematicsElementIdentityType> newAccessor{boost::make_unique<asb_uci::type::SourceKinematicsElementIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SourceKinematicsElementIdentityType::destroy(uci::type::SourceKinematicsElementIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::SourceKinematicsElementIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

