/** @file CapabilityCoverageAreaMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CapabilityCoverageAreaMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityCoverageAreaDataType.h"
#include "../../../include/asb_uci/type/CapabilityCoverageAreaID_Type.h"
#include "../../../include/asb_uci/type/RequestID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCoverageAreaDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCoverageAreaID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCoverageAreaMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityCoverageAreaMDT::CapabilityCoverageAreaMDT()
  : capabilityCoverageAreaID_Accessor{boost::make_unique<CapabilityCoverageAreaID_Type>()},
    capabilityCoverageAreaDetails_Accessor{boost::make_unique<CapabilityCoverageAreaDataType>()} {
}

CapabilityCoverageAreaMDT::~CapabilityCoverageAreaMDT() = default;

void CapabilityCoverageAreaMDT::copy(const uci::type::CapabilityCoverageAreaMDT& accessor) {
  copyImpl(accessor, false);
}

void CapabilityCoverageAreaMDT::copyImpl(const uci::type::CapabilityCoverageAreaMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityCoverageAreaMDT&>(accessor);
    setCapabilityCoverageAreaID(*(accessorImpl.capabilityCoverageAreaID_Accessor));
    if (accessorImpl.capabilityCoverageAreaRequestID_Accessor) {
      setCapabilityCoverageAreaRequestID(*(accessorImpl.capabilityCoverageAreaRequestID_Accessor));
    } else {
      capabilityCoverageAreaRequestID_Accessor.reset();
    }
    setCapabilityCoverageAreaDetails(*(accessorImpl.capabilityCoverageAreaDetails_Accessor));
  }
}

void CapabilityCoverageAreaMDT::reset() noexcept {
  capabilityCoverageAreaID_Accessor->reset();
  capabilityCoverageAreaRequestID_Accessor.reset();
  capabilityCoverageAreaDetails_Accessor->reset();
}

const uci::type::CapabilityCoverageAreaID_Type& CapabilityCoverageAreaMDT::getCapabilityCoverageAreaID() const {
  return *capabilityCoverageAreaID_Accessor;
}

uci::type::CapabilityCoverageAreaID_Type& CapabilityCoverageAreaMDT::getCapabilityCoverageAreaID() {
  return *capabilityCoverageAreaID_Accessor;
}

uci::type::CapabilityCoverageAreaMDT& CapabilityCoverageAreaMDT::setCapabilityCoverageAreaID(const uci::type::CapabilityCoverageAreaID_Type& accessor) {
  if (&accessor != capabilityCoverageAreaID_Accessor.get()) {
    capabilityCoverageAreaID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequestID_Type& CapabilityCoverageAreaMDT::getCapabilityCoverageAreaRequestID_() const {
  if (capabilityCoverageAreaRequestID_Accessor) {
    return *capabilityCoverageAreaRequestID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityCoverageAreaRequestID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityCoverageAreaRequestID() to determine if it is safe to call getCapabilityCoverageAreaRequestID()");
}

const uci::type::RequestID_Type& CapabilityCoverageAreaMDT::getCapabilityCoverageAreaRequestID() const {
  return getCapabilityCoverageAreaRequestID_();
}

uci::type::RequestID_Type& CapabilityCoverageAreaMDT::getCapabilityCoverageAreaRequestID() {
  return getCapabilityCoverageAreaRequestID_();
}

uci::type::CapabilityCoverageAreaMDT& CapabilityCoverageAreaMDT::setCapabilityCoverageAreaRequestID(const uci::type::RequestID_Type& accessor) {
  enableCapabilityCoverageAreaRequestID();
  if (&accessor != capabilityCoverageAreaRequestID_Accessor.get()) {
    capabilityCoverageAreaRequestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityCoverageAreaMDT::hasCapabilityCoverageAreaRequestID() const noexcept {
  return static_cast<bool>(capabilityCoverageAreaRequestID_Accessor);
}

uci::type::RequestID_Type& CapabilityCoverageAreaMDT::enableCapabilityCoverageAreaRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!capabilityCoverageAreaRequestID_Accessor) || (capabilityCoverageAreaRequestID_Accessor->getAccessorType() != requestedType)) {
    capabilityCoverageAreaRequestID_Accessor = RequestID_Type::create(requestedType);
    if (!capabilityCoverageAreaRequestID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityCoverageAreaRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityCoverageAreaRequestID_Accessor;
}

uci::type::CapabilityCoverageAreaMDT& CapabilityCoverageAreaMDT::clearCapabilityCoverageAreaRequestID() noexcept {
  capabilityCoverageAreaRequestID_Accessor.reset();
  return *this;
}

const uci::type::CapabilityCoverageAreaDataType& CapabilityCoverageAreaMDT::getCapabilityCoverageAreaDetails() const {
  return *capabilityCoverageAreaDetails_Accessor;
}

uci::type::CapabilityCoverageAreaDataType& CapabilityCoverageAreaMDT::getCapabilityCoverageAreaDetails() {
  return *capabilityCoverageAreaDetails_Accessor;
}

uci::type::CapabilityCoverageAreaMDT& CapabilityCoverageAreaMDT::setCapabilityCoverageAreaDetails(const uci::type::CapabilityCoverageAreaDataType& accessor) {
  if (&accessor != capabilityCoverageAreaDetails_Accessor.get()) {
    capabilityCoverageAreaDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CapabilityCoverageAreaMDT> CapabilityCoverageAreaMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCoverageAreaMDT : type};
  return (requestedType == uci::type::accessorType::capabilityCoverageAreaMDT) ? boost::make_unique<CapabilityCoverageAreaMDT>() : nullptr;
}

/**  */
namespace CapabilityCoverageAreaMDT_Names {

constexpr const char* Extern_Type_Name{"CapabilityCoverageAreaMDT"};
constexpr const char* CapabilityCoverageAreaID_Name{"CapabilityCoverageAreaID"};
constexpr const char* CapabilityCoverageAreaRequestID_Name{"CapabilityCoverageAreaRequestID"};
constexpr const char* CapabilityCoverageAreaDetails_Name{"CapabilityCoverageAreaDetails"};

} // namespace CapabilityCoverageAreaMDT_Names

void CapabilityCoverageAreaMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityCoverageAreaMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityCoverageAreaMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityCoverageAreaMDT_Names::CapabilityCoverageAreaID_Name) {
      CapabilityCoverageAreaID_Type::deserialize(valueType.second, accessor.getCapabilityCoverageAreaID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityCoverageAreaMDT_Names::CapabilityCoverageAreaRequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableCapabilityCoverageAreaRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityCoverageAreaMDT_Names::CapabilityCoverageAreaDetails_Name) {
      CapabilityCoverageAreaDataType::deserialize(valueType.second, accessor.getCapabilityCoverageAreaDetails(), nodeName, nsPrefix);
    }
  }
}

std::string CapabilityCoverageAreaMDT::serialize(const uci::type::CapabilityCoverageAreaMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityCoverageAreaMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityCoverageAreaMDT_Names::Extern_Type_Name);
  }
  CapabilityCoverageAreaID_Type::serialize(accessor.getCapabilityCoverageAreaID(), node, CapabilityCoverageAreaMDT_Names::CapabilityCoverageAreaID_Name);
  if (accessor.hasCapabilityCoverageAreaRequestID()) {
    RequestID_Type::serialize(accessor.getCapabilityCoverageAreaRequestID(), node, CapabilityCoverageAreaMDT_Names::CapabilityCoverageAreaRequestID_Name);
  }
  CapabilityCoverageAreaDataType::serialize(accessor.getCapabilityCoverageAreaDetails(), node, CapabilityCoverageAreaMDT_Names::CapabilityCoverageAreaDetails_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityCoverageAreaMDT& CapabilityCoverageAreaMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityCoverageAreaMDT>().release());
}

uci::type::CapabilityCoverageAreaMDT& CapabilityCoverageAreaMDT::create(const uci::type::CapabilityCoverageAreaMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityCoverageAreaMDT> newAccessor{boost::make_unique<asb_uci::type::CapabilityCoverageAreaMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityCoverageAreaMDT::destroy(uci::type::CapabilityCoverageAreaMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityCoverageAreaMDT*>(&accessor);
}

} // namespace type

} // namespace uci

