/** @file WeatherRadarTaskType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/WeatherRadarTaskType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CollectionPolicyEnum.h"
#include "asb_uci/type/ProductOutputCommandBasicType.h"
#include "asb_uci/type/RepetitionType.h"
#include "asb_uci/type/WeatherRadarCapabilityEnum.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CollectionPolicyEnum.h"
#include "uci/type/ProductOutputCommandBasicType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/WeatherRadarCapabilityEnum.h"
#include "uci/type/WeatherRadarTaskType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherRadarTaskType::WeatherRadarTaskType()
  : capabilityType_Accessor{boost::make_unique<WeatherRadarCapabilityEnum>()},
    airVolumeLocation_Accessor{boost::make_unique<ZoneType>()},
    output_Accessor{boost::make_unique<Output>(0, SIZE_MAX)} {
}

WeatherRadarTaskType::~WeatherRadarTaskType() = default;

void WeatherRadarTaskType::copy(const uci::type::WeatherRadarTaskType& accessor) {
  copyImpl(accessor, false);
}

void WeatherRadarTaskType::copyImpl(const uci::type::WeatherRadarTaskType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeatherRadarTaskType&>(accessor);
    setCapabilityType(*(accessorImpl.capabilityType_Accessor));
    setAirVolumeLocation(*(accessorImpl.airVolumeLocation_Accessor));
    if (accessorImpl.collectionPolicy_Accessor) {
      setCollectionPolicy(*(accessorImpl.collectionPolicy_Accessor));
    } else {
      collectionPolicy_Accessor.reset();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
    setOutput(*(accessorImpl.output_Accessor));
  }
}

void WeatherRadarTaskType::reset() noexcept {
  capabilityType_Accessor->reset();
  if (airVolumeLocation_Accessor->getAccessorType() != uci::type::accessorType::zoneType) {
    airVolumeLocation_Accessor = boost::make_unique<ZoneType>();
  } else {
    airVolumeLocation_Accessor->reset();
  }
  collectionPolicy_Accessor.reset();
  repetition_Accessor.reset();
  output_Accessor->reset();
}

const uci::type::WeatherRadarCapabilityEnum& WeatherRadarTaskType::getCapabilityType() const {
  return *capabilityType_Accessor;
}

uci::type::WeatherRadarCapabilityEnum& WeatherRadarTaskType::getCapabilityType() {
  return *capabilityType_Accessor;
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::setCapabilityType(const uci::type::WeatherRadarCapabilityEnum& accessor) {
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::setCapabilityType(uci::type::WeatherRadarCapabilityEnum::EnumerationItem value) {
  capabilityType_Accessor->setValue(value);
  return *this;
}


const uci::type::ZoneType& WeatherRadarTaskType::getAirVolumeLocation() const {
  return *airVolumeLocation_Accessor;
}

uci::type::ZoneType& WeatherRadarTaskType::getAirVolumeLocation() {
  return *airVolumeLocation_Accessor;
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::setAirVolumeLocation(const uci::type::ZoneType& accessor) {
  enableAirVolumeLocation(accessor.getAccessorType());
  if (&accessor != airVolumeLocation_Accessor.get()) {
    airVolumeLocation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ZoneType& WeatherRadarTaskType::enableAirVolumeLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!airVolumeLocation_Accessor) || (airVolumeLocation_Accessor->getAccessorType() != requestedType)) {
    airVolumeLocation_Accessor = ZoneType::create(requestedType);
    if (!airVolumeLocation_Accessor) {
      throw uci::base::UCIException("Error in enableAirVolumeLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airVolumeLocation_Accessor;
}

uci::type::CollectionPolicyEnum& WeatherRadarTaskType::getCollectionPolicy_() const {
  if (collectionPolicy_Accessor) {
    return *collectionPolicy_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionPolicy(): An attempt was made to get an optional field that was not enabled, call hasCollectionPolicy() to determine if it is safe to call getCollectionPolicy()");
}

const uci::type::CollectionPolicyEnum& WeatherRadarTaskType::getCollectionPolicy() const {
  return getCollectionPolicy_();
}

uci::type::CollectionPolicyEnum& WeatherRadarTaskType::getCollectionPolicy() {
  return getCollectionPolicy_();
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::setCollectionPolicy(const uci::type::CollectionPolicyEnum& accessor) {
  enableCollectionPolicy();
  if (&accessor != collectionPolicy_Accessor.get()) {
    collectionPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::setCollectionPolicy(const uci::type::CollectionPolicyEnum::EnumerationItem value) {
  enableCollectionPolicy().setValue(value);
  return *this;
}

bool WeatherRadarTaskType::hasCollectionPolicy() const noexcept {
  return static_cast<bool>(collectionPolicy_Accessor);
}

uci::type::CollectionPolicyEnum& WeatherRadarTaskType::enableCollectionPolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::collectionPolicyEnum : type};
  if ((!collectionPolicy_Accessor) || (collectionPolicy_Accessor->getAccessorType() != requestedType)) {
    collectionPolicy_Accessor = CollectionPolicyEnum::create(requestedType);
    if (!collectionPolicy_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionPolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionPolicy_Accessor;
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::clearCollectionPolicy() noexcept {
  collectionPolicy_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& WeatherRadarTaskType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& WeatherRadarTaskType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& WeatherRadarTaskType::getRepetition() {
  return getRepetition_();
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherRadarTaskType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& WeatherRadarTaskType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

const uci::type::WeatherRadarTaskType::Output& WeatherRadarTaskType::getOutput() const {
  return *output_Accessor;
}

uci::type::WeatherRadarTaskType::Output& WeatherRadarTaskType::getOutput() {
  return *output_Accessor;
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::setOutput(const uci::type::WeatherRadarTaskType::Output& accessor) {
  if (&accessor != output_Accessor.get()) {
    output_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<WeatherRadarTaskType> WeatherRadarTaskType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarTaskType : type};
  return (requestedType == uci::type::accessorType::weatherRadarTaskType) ? boost::make_unique<WeatherRadarTaskType>() : nullptr;
}

/**  */
namespace WeatherRadarTaskType_Names {

constexpr const char* Extern_Type_Name{"WeatherRadarTaskType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* AirVolumeLocation_Name{"AirVolumeLocation"};
constexpr const char* CollectionPolicy_Name{"CollectionPolicy"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* Output_Name{"Output"};

} // namespace WeatherRadarTaskType_Names

void WeatherRadarTaskType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherRadarTaskType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherRadarTaskType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherRadarTaskType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherRadarTaskType_Names::AirVolumeLocation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableAirVolumeLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarTaskType_Names::CollectionPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCollectionPolicy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherRadarTaskType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarTaskType_Names::Output_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherRadarTaskType::Output& boundedList = accessor.getOutput();
        const uci::type::WeatherRadarTaskType::Output::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string WeatherRadarTaskType::serialize(const uci::type::WeatherRadarTaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherRadarTaskType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherRadarTaskType_Names::Extern_Type_Name);
  }
  WeatherRadarCapabilityEnum::serialize(accessor.getCapabilityType(), node, WeatherRadarTaskType_Names::CapabilityType_Name, false);
  ZoneType::serialize(accessor.getAirVolumeLocation(), node, WeatherRadarTaskType_Names::AirVolumeLocation_Name);
  if (accessor.hasCollectionPolicy()) {
    CollectionPolicyEnum::serialize(accessor.getCollectionPolicy(), node, WeatherRadarTaskType_Names::CollectionPolicy_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, WeatherRadarTaskType_Names::Repetition_Name);
  }
  {
    const uci::type::WeatherRadarTaskType::Output& boundedList = accessor.getOutput();
    for (uci::type::WeatherRadarTaskType::Output::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputCommandBasicType::serialize(boundedList.at(i), node, WeatherRadarTaskType_Names::Output_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherRadarTaskType>().release());
}

uci::type::WeatherRadarTaskType& WeatherRadarTaskType::create(const uci::type::WeatherRadarTaskType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherRadarTaskType> newAccessor{boost::make_unique<asb_uci::type::WeatherRadarTaskType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherRadarTaskType::destroy(uci::type::WeatherRadarTaskType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherRadarTaskType*>(&accessor);
}

} // namespace type

} // namespace uci

