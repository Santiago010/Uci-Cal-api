/** @file ParameterValueType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ParameterValueType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ParameterValueType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ParameterValueType::ParameterValueType() = default;

ParameterValueType::~ParameterValueType() = default;

void ParameterValueType::copy(const uci::type::ParameterValueType& accessor) {
  copyImpl(accessor, false);
}

void ParameterValueType::copyImpl(const uci::type::ParameterValueType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ParameterValueType&>(accessor);
    if (accessorImpl.value_Accessor) {
      setValue(*(accessorImpl.value_Accessor));
    } else {
      value_Accessor.reset();
    }
    if (accessorImpl.returnToDefault_Accessor) {
      setReturnToDefault(*(accessorImpl.returnToDefault_Accessor));
    } else {
      returnToDefault_Accessor.reset();
    }
  }
}

void ParameterValueType::reset() noexcept {
  value_Accessor.reset();
  returnToDefault_Accessor.reset();
}

uci::type::ParameterValueType::ParameterValueTypeChoice ParameterValueType::getParameterValueTypeChoiceOrdinal() const noexcept {
  if (value_Accessor) {
    return PARAMETERVALUETYPE_CHOICE_VALUE;
  }
  if (returnToDefault_Accessor) {
    return PARAMETERVALUETYPE_CHOICE_RETURNTODEFAULT;
  }
  return PARAMETERVALUETYPE_CHOICE_NONE;
}

uci::type::ParameterValueType& ParameterValueType::setParameterValueTypeChoiceOrdinal(uci::type::ParameterValueType::ParameterValueTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PARAMETERVALUETYPE_CHOICE_VALUE:
      chooseValue("setParameterValueTypeChoiceOrdinal", type);
      break;
    case PARAMETERVALUETYPE_CHOICE_RETURNTODEFAULT:
      chooseReturnToDefault("setParameterValueTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setParameterValueTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

asb_uci::type::VisibleString256Type& ParameterValueType::getValue_() const {
  if (value_Accessor) {
    return *value_Accessor;
  }
  throw uci::base::UCIException("Error in getValue(): An attempt was made to get an optional field that was not enabled, call hasValue() to determine if it is safe to call getValue()");
}

const asb_uci::type::VisibleString256Type& ParameterValueType::getValue() const {
  return getValue_();
}

asb_uci::type::VisibleString256Type& ParameterValueType::getValue() {
  return getValue_();
}

uci::type::ParameterValueType& ParameterValueType::setValue(const asb_uci::type::VisibleString256Type& value) {
  return setValue(value.c_str());
}

uci::type::ParameterValueType& ParameterValueType::setValue(const std::string& value) {
  return setValue(value.c_str());
}

uci::type::ParameterValueType& ParameterValueType::setValue(const char * value) {
  chooseValue().setStringValue(value);
  return *this;
}

bool ParameterValueType::isValue() const noexcept {
  return static_cast<bool>(value_Accessor);
}

asb_uci::type::VisibleString256Type& ParameterValueType::chooseValue(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  returnToDefault_Accessor.reset();
  if (!value_Accessor) {
    value_Accessor =  asb_uci::type::VisibleString256Type::create(type);
  }
  return *value_Accessor;
}

asb_uci::type::VisibleString256Type& ParameterValueType::chooseValue(uci::base::accessorType::AccessorType type) {
  return chooseValue("chooseValue", type);
}

uci::type::EmptyType& ParameterValueType::getReturnToDefault_() const {
  if (returnToDefault_Accessor) {
    return *returnToDefault_Accessor;
  }
  throw uci::base::UCIException("Error in getReturnToDefault(): An attempt was made to get an optional field that was not enabled, call hasReturnToDefault() to determine if it is safe to call getReturnToDefault()");
}

const uci::type::EmptyType& ParameterValueType::getReturnToDefault() const {
  return getReturnToDefault_();
}

uci::type::EmptyType& ParameterValueType::getReturnToDefault() {
  return getReturnToDefault_();
}

uci::type::ParameterValueType& ParameterValueType::setReturnToDefault(const uci::type::EmptyType& value) {
  return setReturnToDefault(value.c_str());
}

uci::type::ParameterValueType& ParameterValueType::setReturnToDefault(const std::string& value) {
  return setReturnToDefault(value.c_str());
}

uci::type::ParameterValueType& ParameterValueType::setReturnToDefault(const char * value) {
  chooseReturnToDefault().setStringValue(value);
  return *this;
}

bool ParameterValueType::isReturnToDefault() const noexcept {
  return static_cast<bool>(returnToDefault_Accessor);
}

uci::type::EmptyType& ParameterValueType::chooseReturnToDefault(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  value_Accessor.reset();
  if (!returnToDefault_Accessor) {
    returnToDefault_Accessor = EmptyType::create(type);
  }
  return *returnToDefault_Accessor;
}

uci::type::EmptyType& ParameterValueType::chooseReturnToDefault(uci::base::accessorType::AccessorType type) {
  return chooseReturnToDefault("chooseReturnToDefault", type);
}

std::unique_ptr<ParameterValueType> ParameterValueType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::parameterValueType : type};
  return (requestedType == uci::type::accessorType::parameterValueType) ? boost::make_unique<ParameterValueType>() : nullptr;
}

/**  */
namespace ParameterValueType_Names {

constexpr const char* Extern_Type_Name{"ParameterValueType"};
constexpr const char* Value_Name{"Value"};
constexpr const char* ReturnToDefault_Name{"ReturnToDefault"};

} // namespace ParameterValueType_Names

void ParameterValueType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ParameterValueType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ParameterValueType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ParameterValueType_Names::Value_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseValue().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ParameterValueType_Names::ReturnToDefault_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseReturnToDefault().setStringValue(*value);
      }
    }
  }
}

std::string ParameterValueType::serialize(const uci::type::ParameterValueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ParameterValueType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ParameterValueType_Names::Extern_Type_Name);
  }
  if (accessor.isValue()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getValue(), node, ParameterValueType_Names::Value_Name);
  } else if (accessor.isReturnToDefault()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getReturnToDefault(), node, ParameterValueType_Names::ReturnToDefault_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ParameterValueType& ParameterValueType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ParameterValueType>().release());
}

uci::type::ParameterValueType& ParameterValueType::create(const uci::type::ParameterValueType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ParameterValueType> newAccessor{boost::make_unique<asb_uci::type::ParameterValueType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ParameterValueType::destroy(uci::type::ParameterValueType& accessor) {
  delete dynamic_cast<asb_uci::type::ParameterValueType*>(&accessor);
}

} // namespace type

} // namespace uci

