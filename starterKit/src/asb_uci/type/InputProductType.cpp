/** @file InputProductType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/InputProductType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ProductFilterType.h"
#include "asb_uci/type/ProductReferenceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/InputProductType.h"
#include "uci/type/ProductFilterType.h"
#include "uci/type/ProductReferenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

InputProductType::InputProductType() = default;

InputProductType::~InputProductType() = default;

void InputProductType::copy(const uci::type::InputProductType& accessor) {
  copyImpl(accessor, false);
}

void InputProductType::copyImpl(const uci::type::InputProductType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const InputProductType&>(accessor);
    if (accessorImpl.productReference_Accessor) {
      setProductReference(*(accessorImpl.productReference_Accessor));
    } else {
      productReference_Accessor.reset();
    }
    if (accessorImpl.productTypeReference_Accessor) {
      setProductTypeReference(*(accessorImpl.productTypeReference_Accessor));
    } else {
      productTypeReference_Accessor.reset();
    }
  }
}

void InputProductType::reset() noexcept {
  productReference_Accessor.reset();
  productTypeReference_Accessor.reset();
}

uci::type::InputProductType::InputProductTypeChoice InputProductType::getInputProductTypeChoiceOrdinal() const noexcept {
  if (productReference_Accessor) {
    return INPUTPRODUCTTYPE_CHOICE_PRODUCTREFERENCE;
  }
  if (productTypeReference_Accessor) {
    return INPUTPRODUCTTYPE_CHOICE_PRODUCTTYPEREFERENCE;
  }
  return INPUTPRODUCTTYPE_CHOICE_NONE;
}

uci::type::InputProductType& InputProductType::setInputProductTypeChoiceOrdinal(uci::type::InputProductType::InputProductTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case INPUTPRODUCTTYPE_CHOICE_PRODUCTREFERENCE:
      chooseProductReference("setInputProductTypeChoiceOrdinal", type);
      break;
    case INPUTPRODUCTTYPE_CHOICE_PRODUCTTYPEREFERENCE:
      chooseProductTypeReference();
      break;
    default:
      throw uci::base::UCIException("Error in setInputProductTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ProductReferenceType& InputProductType::getProductReference_() const {
  if (productReference_Accessor) {
    return *productReference_Accessor;
  }
  throw uci::base::UCIException("Error in getProductReference(): Unable to get ProductReference, field not selected");
}

const uci::type::ProductReferenceType& InputProductType::getProductReference() const {
  return getProductReference_();
}

uci::type::ProductReferenceType& InputProductType::getProductReference() {
  return getProductReference_();
}

uci::type::InputProductType& InputProductType::setProductReference(const uci::type::ProductReferenceType& accessor) {
  chooseProductReference(accessor.getAccessorType());
  if (&accessor != productReference_Accessor.get()) {
    productReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool InputProductType::isProductReference() const noexcept {
  return static_cast<bool>(productReference_Accessor);
}

uci::type::ProductReferenceType& InputProductType::chooseProductReference(const std::string& method, uci::base::accessorType::AccessorType type) {
  productTypeReference_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productReferenceType : type};
  if ((!productReference_Accessor) || (productReference_Accessor->getAccessorType() != requestedType)) {
    productReference_Accessor = ProductReferenceType::create(type);
    if (!productReference_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productReference_Accessor;
}

uci::type::ProductReferenceType& InputProductType::chooseProductReference(uci::base::accessorType::AccessorType type) {
  return chooseProductReference("chooseProductReference", type);
}

uci::type::InputProductType::ProductTypeReference& InputProductType::getProductTypeReference_() const {
  if (productTypeReference_Accessor) {
    return *productTypeReference_Accessor;
  }
  throw uci::base::UCIException("Error in getProductTypeReference(): Unable to get ProductTypeReference, field not selected");
}

const uci::type::InputProductType::ProductTypeReference& InputProductType::getProductTypeReference() const {
  return getProductTypeReference_();
}

uci::type::InputProductType::ProductTypeReference& InputProductType::getProductTypeReference() {
  return getProductTypeReference_();
}

uci::type::InputProductType& InputProductType::setProductTypeReference(const uci::type::InputProductType::ProductTypeReference& accessor) {
  chooseProductTypeReference();
  if (&accessor != productTypeReference_Accessor.get()) {
    productTypeReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool InputProductType::isProductTypeReference() const noexcept {
  return static_cast<bool>(productTypeReference_Accessor);
}

uci::type::InputProductType::ProductTypeReference& InputProductType::chooseProductTypeReference() {
  productReference_Accessor.reset();
  if (!productTypeReference_Accessor) {
    productTypeReference_Accessor = boost::make_unique<ProductTypeReference>(1, SIZE_MAX);
  }
  return *productTypeReference_Accessor;
}

std::unique_ptr<InputProductType> InputProductType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::inputProductType : type};
  return (requestedType == uci::type::accessorType::inputProductType) ? boost::make_unique<InputProductType>() : nullptr;
}

/**  */
namespace InputProductType_Names {

constexpr const char* Extern_Type_Name{"InputProductType"};
constexpr const char* ProductReference_Name{"ProductReference"};
constexpr const char* ProductTypeReference_Name{"ProductTypeReference"};

} // namespace InputProductType_Names

void InputProductType::deserialize(const boost::property_tree::ptree& propTree, uci::type::InputProductType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = InputProductType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + InputProductType_Names::ProductReference_Name) {
      ProductReferenceType::deserialize(valueType.second, accessor.chooseProductReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InputProductType_Names::ProductTypeReference_Name) {
      uci::type::InputProductType::ProductTypeReference& boundedList = accessor.chooseProductTypeReference();
      const uci::type::InputProductType::ProductTypeReference::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::ProductFilterType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    }
  }
}

std::string InputProductType::serialize(const uci::type::InputProductType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? InputProductType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, InputProductType_Names::Extern_Type_Name);
  }
  if (accessor.isProductReference()) {
    ProductReferenceType::serialize(accessor.getProductReference(), node, InputProductType_Names::ProductReference_Name);
  } else if (accessor.isProductTypeReference()) {
    {
      const uci::type::InputProductType::ProductTypeReference& boundedList = accessor.getProductTypeReference();
      for (uci::type::InputProductType::ProductTypeReference::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ProductFilterType::serialize(boundedList.at(i), node, InputProductType_Names::ProductTypeReference_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::InputProductType& InputProductType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::InputProductType>().release());
}

uci::type::InputProductType& InputProductType::create(const uci::type::InputProductType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::InputProductType> newAccessor{boost::make_unique<asb_uci::type::InputProductType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void InputProductType::destroy(uci::type::InputProductType& accessor) {
  delete dynamic_cast<asb_uci::type::InputProductType*>(&accessor);
}

} // namespace type

} // namespace uci

