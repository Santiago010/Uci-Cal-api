/** @file RepetitionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RepetitionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RepetitionEventBasedType.h"
#include "asb_uci/type/RepetitionTimeBasedType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RepetitionEventBasedType.h"
#include "uci/type/RepetitionTimeBasedType.h"
#include "uci/type/RepetitionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RepetitionType::RepetitionType() = default;

RepetitionType::~RepetitionType() = default;

void RepetitionType::copy(const uci::type::RepetitionType& accessor) {
  copyImpl(accessor, false);
}

void RepetitionType::copyImpl(const uci::type::RepetitionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RepetitionType&>(accessor);
    if (accessorImpl.timeBased_Accessor) {
      setTimeBased(*(accessorImpl.timeBased_Accessor));
    } else {
      timeBased_Accessor.reset();
    }
    if (accessorImpl.eventBased_Accessor) {
      setEventBased(*(accessorImpl.eventBased_Accessor));
    } else {
      eventBased_Accessor.reset();
    }
  }
}

void RepetitionType::reset() noexcept {
  timeBased_Accessor.reset();
  eventBased_Accessor.reset();
}

uci::type::RepetitionType::RepetitionTypeChoice RepetitionType::getRepetitionTypeChoiceOrdinal() const noexcept {
  if (timeBased_Accessor) {
    return REPETITIONTYPE_CHOICE_TIMEBASED;
  }
  if (eventBased_Accessor) {
    return REPETITIONTYPE_CHOICE_EVENTBASED;
  }
  return REPETITIONTYPE_CHOICE_NONE;
}

uci::type::RepetitionType& RepetitionType::setRepetitionTypeChoiceOrdinal(uci::type::RepetitionType::RepetitionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REPETITIONTYPE_CHOICE_TIMEBASED:
      chooseTimeBased("setRepetitionTypeChoiceOrdinal", type);
      break;
    case REPETITIONTYPE_CHOICE_EVENTBASED:
      chooseEventBased("setRepetitionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRepetitionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RepetitionTimeBasedType& RepetitionType::getTimeBased_() const {
  if (timeBased_Accessor) {
    return *timeBased_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeBased(): Unable to get TimeBased, field not selected");
}

const uci::type::RepetitionTimeBasedType& RepetitionType::getTimeBased() const {
  return getTimeBased_();
}

uci::type::RepetitionTimeBasedType& RepetitionType::getTimeBased() {
  return getTimeBased_();
}

uci::type::RepetitionType& RepetitionType::setTimeBased(const uci::type::RepetitionTimeBasedType& accessor) {
  chooseTimeBased(accessor.getAccessorType());
  if (&accessor != timeBased_Accessor.get()) {
    timeBased_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionType::isTimeBased() const noexcept {
  return static_cast<bool>(timeBased_Accessor);
}

uci::type::RepetitionTimeBasedType& RepetitionType::chooseTimeBased(const std::string& method, uci::base::accessorType::AccessorType type) {
  eventBased_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionTimeBasedType : type};
  if ((!timeBased_Accessor) || (timeBased_Accessor->getAccessorType() != requestedType)) {
    timeBased_Accessor = RepetitionTimeBasedType::create(type);
    if (!timeBased_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeBased_Accessor;
}

uci::type::RepetitionTimeBasedType& RepetitionType::chooseTimeBased(uci::base::accessorType::AccessorType type) {
  return chooseTimeBased("chooseTimeBased", type);
}

uci::type::RepetitionEventBasedType& RepetitionType::getEventBased_() const {
  if (eventBased_Accessor) {
    return *eventBased_Accessor;
  }
  throw uci::base::UCIException("Error in getEventBased(): Unable to get EventBased, field not selected");
}

const uci::type::RepetitionEventBasedType& RepetitionType::getEventBased() const {
  return getEventBased_();
}

uci::type::RepetitionEventBasedType& RepetitionType::getEventBased() {
  return getEventBased_();
}

uci::type::RepetitionType& RepetitionType::setEventBased(const uci::type::RepetitionEventBasedType& accessor) {
  chooseEventBased();
  if (&accessor != eventBased_Accessor.get()) {
    eventBased_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionType::isEventBased() const noexcept {
  return static_cast<bool>(eventBased_Accessor);
}

uci::type::RepetitionEventBasedType& RepetitionType::chooseEventBased(const std::string& method, uci::base::accessorType::AccessorType type) {
  timeBased_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionEventBasedType : type};
  if ((!eventBased_Accessor) || (eventBased_Accessor->getAccessorType() != requestedType)) {
    eventBased_Accessor = RepetitionEventBasedType::create(type);
    if (!eventBased_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eventBased_Accessor;
}

uci::type::RepetitionEventBasedType& RepetitionType::chooseEventBased(uci::base::accessorType::AccessorType type) {
  return chooseEventBased("chooseEventBased", type);
}

std::unique_ptr<RepetitionType> RepetitionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  return (requestedType == uci::type::accessorType::repetitionType) ? boost::make_unique<RepetitionType>() : nullptr;
}

/**  */
namespace RepetitionType_Names {

constexpr const char* Extern_Type_Name{"RepetitionType"};
constexpr const char* TimeBased_Name{"TimeBased"};
constexpr const char* EventBased_Name{"EventBased"};

} // namespace RepetitionType_Names

void RepetitionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RepetitionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RepetitionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RepetitionType_Names::TimeBased_Name) {
      RepetitionTimeBasedType::deserialize(valueType.second, accessor.chooseTimeBased(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionType_Names::EventBased_Name) {
      RepetitionEventBasedType::deserialize(valueType.second, accessor.chooseEventBased(), nodeName, nsPrefix);
    }
  }
}

std::string RepetitionType::serialize(const uci::type::RepetitionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RepetitionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RepetitionType_Names::Extern_Type_Name);
  }
  if (accessor.isTimeBased()) {
    RepetitionTimeBasedType::serialize(accessor.getTimeBased(), node, RepetitionType_Names::TimeBased_Name);
  } else if (accessor.isEventBased()) {
    RepetitionEventBasedType::serialize(accessor.getEventBased(), node, RepetitionType_Names::EventBased_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RepetitionType& RepetitionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RepetitionType>().release());
}

uci::type::RepetitionType& RepetitionType::create(const uci::type::RepetitionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RepetitionType> newAccessor{boost::make_unique<asb_uci::type::RepetitionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RepetitionType::destroy(uci::type::RepetitionType& accessor) {
  delete dynamic_cast<asb_uci::type::RepetitionType*>(&accessor);
}

} // namespace type

} // namespace uci

