/** @file ConstrainedEntityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ConstrainedEntityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/RadarEmitterIdentityType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConstrainedEntityType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/PercentType.h"
#include "uci/type/RadarEmitterIdentityType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConstrainedEntityType::ConstrainedEntityType()
  : entityID_Accessor{boost::make_unique<EntityID_Type>()} {
}

ConstrainedEntityType::~ConstrainedEntityType() = default;

void ConstrainedEntityType::copy(const uci::type::ConstrainedEntityType& accessor) {
  copyImpl(accessor, false);
}

void ConstrainedEntityType::copyImpl(const uci::type::ConstrainedEntityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConstrainedEntityType&>(accessor);
    if (accessorImpl.surrogateIdentifier_Accessor) {
      setSurrogateIdentifier(*(accessorImpl.surrogateIdentifier_Accessor));
    } else {
      surrogateIdentifier_Accessor.reset();
    }
    if (accessorImpl.hasMissionPlanningWeightingFactor()) {
      setMissionPlanningWeightingFactor(accessorImpl.getMissionPlanningWeightingFactor());
    } else {
      clearMissionPlanningWeightingFactor();
    }
    if (accessorImpl.hasMissionPlanningCandidate()) {
      setMissionPlanningCandidate(accessorImpl.getMissionPlanningCandidate());
    } else {
      clearMissionPlanningCandidate();
    }
    setEntityID(*(accessorImpl.entityID_Accessor));
  }
}

void ConstrainedEntityType::reset() noexcept {
  surrogateIdentifier_Accessor.reset();
  clearMissionPlanningWeightingFactor();
  clearMissionPlanningCandidate();
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
}

uci::type::RadarEmitterIdentityType& ConstrainedEntityType::getSurrogateIdentifier_() const {
  if (surrogateIdentifier_Accessor) {
    return *surrogateIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getSurrogateIdentifier(): An attempt was made to get an optional field that was not enabled, call hasSurrogateIdentifier() to determine if it is safe to call getSurrogateIdentifier()");
}

const uci::type::RadarEmitterIdentityType& ConstrainedEntityType::getSurrogateIdentifier() const {
  return getSurrogateIdentifier_();
}

uci::type::RadarEmitterIdentityType& ConstrainedEntityType::getSurrogateIdentifier() {
  return getSurrogateIdentifier_();
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::setSurrogateIdentifier(const uci::type::RadarEmitterIdentityType& accessor) {
  enableSurrogateIdentifier();
  if (&accessor != surrogateIdentifier_Accessor.get()) {
    surrogateIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConstrainedEntityType::hasSurrogateIdentifier() const noexcept {
  return static_cast<bool>(surrogateIdentifier_Accessor);
}

uci::type::RadarEmitterIdentityType& ConstrainedEntityType::enableSurrogateIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarEmitterIdentityType : type};
  if ((!surrogateIdentifier_Accessor) || (surrogateIdentifier_Accessor->getAccessorType() != requestedType)) {
    surrogateIdentifier_Accessor = RadarEmitterIdentityType::create(requestedType);
    if (!surrogateIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableSurrogateIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *surrogateIdentifier_Accessor;
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::clearSurrogateIdentifier() noexcept {
  surrogateIdentifier_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue ConstrainedEntityType::getMissionPlanningWeightingFactor() const {
  if (missionPlanningWeightingFactor_Accessor) {
    return *missionPlanningWeightingFactor_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanningWeightingFactor(): An attempt was made to get an optional field that was not enabled, call hasMissionPlanningWeightingFactor() to determine if it is safe to call getMissionPlanningWeightingFactor()");
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::setMissionPlanningWeightingFactor(uci::type::PercentTypeValue value) {
  missionPlanningWeightingFactor_Accessor = value;
  return *this;
}

bool ConstrainedEntityType::hasMissionPlanningWeightingFactor() const noexcept {
  return missionPlanningWeightingFactor_Accessor.has_value();
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::clearMissionPlanningWeightingFactor() noexcept {
  missionPlanningWeightingFactor_Accessor.reset();
  return *this;
}

xs::Boolean ConstrainedEntityType::getMissionPlanningCandidate() const {
  if (missionPlanningCandidate_Accessor) {
    return *missionPlanningCandidate_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanningCandidate(): An attempt was made to get an optional field that was not enabled, call hasMissionPlanningCandidate() to determine if it is safe to call getMissionPlanningCandidate()");
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::setMissionPlanningCandidate(xs::Boolean value) {
  missionPlanningCandidate_Accessor = value;
  return *this;
}

bool ConstrainedEntityType::hasMissionPlanningCandidate() const noexcept {
  return missionPlanningCandidate_Accessor.has_value();
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::clearMissionPlanningCandidate() noexcept {
  missionPlanningCandidate_Accessor.reset();
  return *this;
}

const uci::type::EntityID_Type& ConstrainedEntityType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& ConstrainedEntityType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& ConstrainedEntityType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

std::unique_ptr<ConstrainedEntityType> ConstrainedEntityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::constrainedEntityType : type};
  return (requestedType == uci::type::accessorType::constrainedEntityType) ? boost::make_unique<ConstrainedEntityType>() : nullptr;
}

/**  */
namespace ConstrainedEntityType_Names {

constexpr const char* Extern_Type_Name{"ConstrainedEntityType"};
constexpr const char* SurrogateIdentifier_Name{"SurrogateIdentifier"};
constexpr const char* MissionPlanningWeightingFactor_Name{"MissionPlanningWeightingFactor"};
constexpr const char* MissionPlanningCandidate_Name{"MissionPlanningCandidate"};
constexpr const char* EntityID_Name{"EntityID"};

} // namespace ConstrainedEntityType_Names

void ConstrainedEntityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConstrainedEntityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConstrainedEntityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConstrainedEntityType_Names::SurrogateIdentifier_Name) {
      RadarEmitterIdentityType::deserialize(valueType.second, accessor.enableSurrogateIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConstrainedEntityType_Names::MissionPlanningWeightingFactor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionPlanningWeightingFactor(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConstrainedEntityType_Names::MissionPlanningCandidate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionPlanningCandidate(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ConstrainedEntityType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string ConstrainedEntityType::serialize(const uci::type::ConstrainedEntityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConstrainedEntityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConstrainedEntityType_Names::Extern_Type_Name);
  }
  if (accessor.hasSurrogateIdentifier()) {
    RadarEmitterIdentityType::serialize(accessor.getSurrogateIdentifier(), node, ConstrainedEntityType_Names::SurrogateIdentifier_Name);
  }
  if (accessor.hasMissionPlanningWeightingFactor()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMissionPlanningWeightingFactor(), node, ConstrainedEntityType_Names::MissionPlanningWeightingFactor_Name);
  }
  if (accessor.hasMissionPlanningCandidate()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getMissionPlanningCandidate(), node, ConstrainedEntityType_Names::MissionPlanningCandidate_Name);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, ConstrainedEntityType_Names::EntityID_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConstrainedEntityType& ConstrainedEntityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConstrainedEntityType>().release());
}

uci::type::ConstrainedEntityType& ConstrainedEntityType::create(const uci::type::ConstrainedEntityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConstrainedEntityType> newAccessor{boost::make_unique<asb_uci::type::ConstrainedEntityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConstrainedEntityType::destroy(uci::type::ConstrainedEntityType& accessor) {
  delete dynamic_cast<asb_uci::type::ConstrainedEntityType*>(&accessor);
}

} // namespace type

} // namespace uci

