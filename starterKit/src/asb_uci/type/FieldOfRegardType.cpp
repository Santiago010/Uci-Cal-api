/** @file FieldOfRegardType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FieldOfRegardType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FieldOfRegardTypeEnum.h"
#include "../../../include/asb_uci/type/SensorFieldOfRegardType.h"
#include "../../../include/asb_uci/type/SlantRangeConstraintsType.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FieldOfRegardType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FieldOfRegardTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorFieldOfRegardType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SlantRangeConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FieldOfRegardType::FieldOfRegardType()
  : field_Accessor{boost::make_unique<SensorFieldOfRegardType>()} {
}

FieldOfRegardType::~FieldOfRegardType() = default;

void FieldOfRegardType::copy(const uci::type::FieldOfRegardType& accessor) {
  copyImpl(accessor, false);
}

void FieldOfRegardType::copyImpl(const uci::type::FieldOfRegardType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FieldOfRegardType&>(accessor);
    setField(*(accessorImpl.field_Accessor));
    if (accessorImpl.nearRange_Accessor) {
      setNearRange(*(accessorImpl.nearRange_Accessor));
    } else {
      nearRange_Accessor.reset();
    }
    if (accessorImpl.farRange_Accessor) {
      setFarRange(*(accessorImpl.farRange_Accessor));
    } else {
      farRange_Accessor.reset();
    }
    if (accessorImpl.mnemonic_Accessor) {
      setMnemonic(*(accessorImpl.mnemonic_Accessor));
    } else {
      mnemonic_Accessor.reset();
    }
    if (accessorImpl.typeOfFOR_Accessor) {
      setTypeOfFOR(*(accessorImpl.typeOfFOR_Accessor));
    } else {
      typeOfFOR_Accessor.reset();
    }
  }
}

void FieldOfRegardType::reset() noexcept {
  field_Accessor->reset();
  nearRange_Accessor.reset();
  farRange_Accessor.reset();
  mnemonic_Accessor.reset();
  typeOfFOR_Accessor.reset();
}

const uci::type::SensorFieldOfRegardType& FieldOfRegardType::getField() const {
  return *field_Accessor;
}

uci::type::SensorFieldOfRegardType& FieldOfRegardType::getField() {
  return *field_Accessor;
}

uci::type::FieldOfRegardType& FieldOfRegardType::setField(const uci::type::SensorFieldOfRegardType& accessor) {
  if (&accessor != field_Accessor.get()) {
    field_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SlantRangeConstraintsType& FieldOfRegardType::getNearRange_() const {
  if (nearRange_Accessor) {
    return *nearRange_Accessor;
  }
  throw uci::base::UCIException("Error in getNearRange(): An attempt was made to get an optional field that was not enabled, call hasNearRange() to determine if it is safe to call getNearRange()");
}

const uci::type::SlantRangeConstraintsType& FieldOfRegardType::getNearRange() const {
  return getNearRange_();
}

uci::type::SlantRangeConstraintsType& FieldOfRegardType::getNearRange() {
  return getNearRange_();
}

uci::type::FieldOfRegardType& FieldOfRegardType::setNearRange(const uci::type::SlantRangeConstraintsType& accessor) {
  enableNearRange();
  if (&accessor != nearRange_Accessor.get()) {
    nearRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FieldOfRegardType::hasNearRange() const noexcept {
  return static_cast<bool>(nearRange_Accessor);
}

uci::type::SlantRangeConstraintsType& FieldOfRegardType::enableNearRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeConstraintsType : type};
  if ((!nearRange_Accessor) || (nearRange_Accessor->getAccessorType() != requestedType)) {
    nearRange_Accessor = SlantRangeConstraintsType::create(requestedType);
    if (!nearRange_Accessor) {
      throw uci::base::UCIException("Error in enableNearRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nearRange_Accessor;
}

uci::type::FieldOfRegardType& FieldOfRegardType::clearNearRange() noexcept {
  nearRange_Accessor.reset();
  return *this;
}

uci::type::SlantRangeConstraintsType& FieldOfRegardType::getFarRange_() const {
  if (farRange_Accessor) {
    return *farRange_Accessor;
  }
  throw uci::base::UCIException("Error in getFarRange(): An attempt was made to get an optional field that was not enabled, call hasFarRange() to determine if it is safe to call getFarRange()");
}

const uci::type::SlantRangeConstraintsType& FieldOfRegardType::getFarRange() const {
  return getFarRange_();
}

uci::type::SlantRangeConstraintsType& FieldOfRegardType::getFarRange() {
  return getFarRange_();
}

uci::type::FieldOfRegardType& FieldOfRegardType::setFarRange(const uci::type::SlantRangeConstraintsType& accessor) {
  enableFarRange();
  if (&accessor != farRange_Accessor.get()) {
    farRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FieldOfRegardType::hasFarRange() const noexcept {
  return static_cast<bool>(farRange_Accessor);
}

uci::type::SlantRangeConstraintsType& FieldOfRegardType::enableFarRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeConstraintsType : type};
  if ((!farRange_Accessor) || (farRange_Accessor->getAccessorType() != requestedType)) {
    farRange_Accessor = SlantRangeConstraintsType::create(requestedType);
    if (!farRange_Accessor) {
      throw uci::base::UCIException("Error in enableFarRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *farRange_Accessor;
}

uci::type::FieldOfRegardType& FieldOfRegardType::clearFarRange() noexcept {
  farRange_Accessor.reset();
  return *this;
}

uci::type::VisibleString256Type& FieldOfRegardType::getMnemonic_() const {
  if (mnemonic_Accessor) {
    return *mnemonic_Accessor;
  }
  throw uci::base::UCIException("Error in getMnemonic(): An attempt was made to get an optional field that was not enabled, call hasMnemonic() to determine if it is safe to call getMnemonic()");
}

const uci::type::VisibleString256Type& FieldOfRegardType::getMnemonic() const {
  return getMnemonic_();
}

uci::type::VisibleString256Type& FieldOfRegardType::getMnemonic() {
  return getMnemonic_();
}

uci::type::FieldOfRegardType& FieldOfRegardType::setMnemonic(const uci::type::VisibleString256Type& value) {
  return setMnemonic(value.c_str());
}

uci::type::FieldOfRegardType& FieldOfRegardType::setMnemonic(const std::string& value) {
  return setMnemonic(value.c_str());
}

uci::type::FieldOfRegardType& FieldOfRegardType::setMnemonic(const char* value) {
  enableMnemonic().setStringValue(value);
  return *this;
}

bool FieldOfRegardType::hasMnemonic() const noexcept {
  return static_cast<bool>(mnemonic_Accessor);
}

uci::type::VisibleString256Type& FieldOfRegardType::enableMnemonic(uci::base::accessorType::AccessorType type) {
  if (!mnemonic_Accessor) {
    mnemonic_Accessor = boost::make_unique<std::string>("");
  }
  return *mnemonic_Accessor;
}

uci::type::FieldOfRegardType& FieldOfRegardType::clearMnemonic() noexcept {
  mnemonic_Accessor.reset();
  return *this;
}

uci::type::FieldOfRegardTypeEnum& FieldOfRegardType::getTypeOfFOR_() const {
  if (typeOfFOR_Accessor) {
    return *typeOfFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getTypeOfFOR(): An attempt was made to get an optional field that was not enabled, call hasTypeOfFOR() to determine if it is safe to call getTypeOfFOR()");
}

const uci::type::FieldOfRegardTypeEnum& FieldOfRegardType::getTypeOfFOR() const {
  return getTypeOfFOR_();
}

uci::type::FieldOfRegardTypeEnum& FieldOfRegardType::getTypeOfFOR() {
  return getTypeOfFOR_();
}

uci::type::FieldOfRegardType& FieldOfRegardType::setTypeOfFOR(const uci::type::FieldOfRegardTypeEnum& accessor) {
  enableTypeOfFOR();
  if (&accessor != typeOfFOR_Accessor.get()) {
    typeOfFOR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FieldOfRegardType& FieldOfRegardType::setTypeOfFOR(const uci::type::FieldOfRegardTypeEnum::EnumerationItem value) {
  enableTypeOfFOR().setValue(value);
  return *this;
}

bool FieldOfRegardType::hasTypeOfFOR() const noexcept {
  return static_cast<bool>(typeOfFOR_Accessor);
}

uci::type::FieldOfRegardTypeEnum& FieldOfRegardType::enableTypeOfFOR(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fieldOfRegardTypeEnum : type};
  if ((!typeOfFOR_Accessor) || (typeOfFOR_Accessor->getAccessorType() != requestedType)) {
    typeOfFOR_Accessor = FieldOfRegardTypeEnum::create(requestedType);
    if (!typeOfFOR_Accessor) {
      throw uci::base::UCIException("Error in enableTypeOfFOR(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *typeOfFOR_Accessor;
}

uci::type::FieldOfRegardType& FieldOfRegardType::clearTypeOfFOR() noexcept {
  typeOfFOR_Accessor.reset();
  return *this;
}

std::unique_ptr<FieldOfRegardType> FieldOfRegardType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fieldOfRegardType : type};
  return (requestedType == uci::type::accessorType::fieldOfRegardType) ? boost::make_unique<FieldOfRegardType>() : nullptr;
}

/**  */
namespace FieldOfRegardType_Names {

constexpr const char* Extern_Type_Name{"FieldOfRegardType"};
constexpr const char* Field_Name{"Field"};
constexpr const char* NearRange_Name{"NearRange"};
constexpr const char* FarRange_Name{"FarRange"};
constexpr const char* Mnemonic_Name{"Mnemonic"};
constexpr const char* TypeOfFOR_Name{"TypeOfFOR"};

} // namespace FieldOfRegardType_Names

void FieldOfRegardType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FieldOfRegardType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FieldOfRegardType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FieldOfRegardType_Names::Field_Name) {
      SensorFieldOfRegardType::deserialize(valueType.second, accessor.getField(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FieldOfRegardType_Names::NearRange_Name) {
      SlantRangeConstraintsType::deserialize(valueType.second, accessor.enableNearRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FieldOfRegardType_Names::FarRange_Name) {
      SlantRangeConstraintsType::deserialize(valueType.second, accessor.enableFarRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FieldOfRegardType_Names::Mnemonic_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMnemonic(*value);
      }
    } else if (valueType.first == nsPrefix + FieldOfRegardType_Names::TypeOfFOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTypeOfFOR().setValueFromName(*value);
      }
    }
  }
}

std::string FieldOfRegardType::serialize(const uci::type::FieldOfRegardType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FieldOfRegardType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FieldOfRegardType_Names::Extern_Type_Name);
  }
  SensorFieldOfRegardType::serialize(accessor.getField(), node, FieldOfRegardType_Names::Field_Name);
  if (accessor.hasNearRange()) {
    SlantRangeConstraintsType::serialize(accessor.getNearRange(), node, FieldOfRegardType_Names::NearRange_Name);
  }
  if (accessor.hasFarRange()) {
    SlantRangeConstraintsType::serialize(accessor.getFarRange(), node, FieldOfRegardType_Names::FarRange_Name);
  }
  if (accessor.hasMnemonic()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMnemonic(), node, FieldOfRegardType_Names::Mnemonic_Name);
  }
  if (accessor.hasTypeOfFOR()) {
    FieldOfRegardTypeEnum::serialize(accessor.getTypeOfFOR(), node, FieldOfRegardType_Names::TypeOfFOR_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FieldOfRegardType& FieldOfRegardType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FieldOfRegardType>().release());
}

uci::type::FieldOfRegardType& FieldOfRegardType::create(const uci::type::FieldOfRegardType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FieldOfRegardType> newAccessor{boost::make_unique<asb_uci::type::FieldOfRegardType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FieldOfRegardType::destroy(uci::type::FieldOfRegardType& accessor) {
  delete dynamic_cast<asb_uci::type::FieldOfRegardType*>(&accessor);
}

} // namespace type

} // namespace uci

