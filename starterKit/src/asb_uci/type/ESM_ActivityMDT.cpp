/** @file ESM_ActivityMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ESM_ActivityMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ESM_ActivityType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/ESM_ActivityMDT.h"
#include "uci/type/ESM_ActivityType.h"
#include "uci/type/PercentType.h"
#include "uci/type/SubsystemID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_ActivityMDT::ESM_ActivityMDT()
  : subsystemID_Accessor{boost::make_unique<SubsystemID_Type>()},
    activity_Accessor{boost::make_unique<Activity>(1, SIZE_MAX)} {
}

ESM_ActivityMDT::~ESM_ActivityMDT() = default;

void ESM_ActivityMDT::copy(const uci::type::ESM_ActivityMDT& accessor) {
  copyImpl(accessor, false);
}

void ESM_ActivityMDT::copyImpl(const uci::type::ESM_ActivityMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_ActivityMDT&>(accessor);
    setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    if (accessorImpl.hasEntityListCleared()) {
      setEntityListCleared(accessorImpl.getEntityListCleared());
    } else {
      clearEntityListCleared();
    }
    if (accessorImpl.hasEntityOverload()) {
      setEntityOverload(accessorImpl.getEntityOverload());
    } else {
      clearEntityOverload();
    }
    if (accessorImpl.hasExcessiveAttitude()) {
      setExcessiveAttitude(accessorImpl.getExcessiveAttitude());
    } else {
      clearExcessiveAttitude();
    }
    if (accessorImpl.hasPulseDensityOverload()) {
      setPulseDensityOverload(accessorImpl.getPulseDensityOverload());
    } else {
      clearPulseDensityOverload();
    }
    if (accessorImpl.hasLookThroughLimited()) {
      setLookThroughLimited(accessorImpl.getLookThroughLimited());
    } else {
      clearLookThroughLimited();
    }
    if (accessorImpl.hasReceiverUtilization()) {
      setReceiverUtilization(accessorImpl.getReceiverUtilization());
    } else {
      clearReceiverUtilization();
    }
    setActivity(*(accessorImpl.activity_Accessor));
  }
}

void ESM_ActivityMDT::reset() noexcept {
  subsystemID_Accessor->reset();
  clearEntityListCleared();
  clearEntityOverload();
  clearExcessiveAttitude();
  clearPulseDensityOverload();
  clearLookThroughLimited();
  clearReceiverUtilization();
  activity_Accessor->reset();
}

const uci::type::SubsystemID_Type& ESM_ActivityMDT::getSubsystemID() const {
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& ESM_ActivityMDT::getSubsystemID() {
  return *subsystemID_Accessor;
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue ESM_ActivityMDT::getEntityListCleared() const {
  if (entityListCleared_Accessor) {
    return *entityListCleared_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityListCleared(): An attempt was made to get an optional field that was not enabled, call hasEntityListCleared() to determine if it is safe to call getEntityListCleared()");
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setEntityListCleared(uci::type::DateTimeTypeValue value) {
  entityListCleared_Accessor = value;
  return *this;
}

bool ESM_ActivityMDT::hasEntityListCleared() const noexcept {
  return entityListCleared_Accessor.has_value();
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::clearEntityListCleared() noexcept {
  entityListCleared_Accessor.reset();
  return *this;
}

xs::Boolean ESM_ActivityMDT::getEntityOverload() const {
  if (entityOverload_Accessor) {
    return *entityOverload_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityOverload(): An attempt was made to get an optional field that was not enabled, call hasEntityOverload() to determine if it is safe to call getEntityOverload()");
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setEntityOverload(xs::Boolean value) {
  entityOverload_Accessor = value;
  return *this;
}

bool ESM_ActivityMDT::hasEntityOverload() const noexcept {
  return entityOverload_Accessor.has_value();
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::clearEntityOverload() noexcept {
  entityOverload_Accessor.reset();
  return *this;
}

xs::Boolean ESM_ActivityMDT::getExcessiveAttitude() const {
  if (excessiveAttitude_Accessor) {
    return *excessiveAttitude_Accessor;
  }
  throw uci::base::UCIException("Error in getExcessiveAttitude(): An attempt was made to get an optional field that was not enabled, call hasExcessiveAttitude() to determine if it is safe to call getExcessiveAttitude()");
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setExcessiveAttitude(xs::Boolean value) {
  excessiveAttitude_Accessor = value;
  return *this;
}

bool ESM_ActivityMDT::hasExcessiveAttitude() const noexcept {
  return excessiveAttitude_Accessor.has_value();
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::clearExcessiveAttitude() noexcept {
  excessiveAttitude_Accessor.reset();
  return *this;
}

xs::Boolean ESM_ActivityMDT::getPulseDensityOverload() const {
  if (pulseDensityOverload_Accessor) {
    return *pulseDensityOverload_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseDensityOverload(): An attempt was made to get an optional field that was not enabled, call hasPulseDensityOverload() to determine if it is safe to call getPulseDensityOverload()");
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setPulseDensityOverload(xs::Boolean value) {
  pulseDensityOverload_Accessor = value;
  return *this;
}

bool ESM_ActivityMDT::hasPulseDensityOverload() const noexcept {
  return pulseDensityOverload_Accessor.has_value();
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::clearPulseDensityOverload() noexcept {
  pulseDensityOverload_Accessor.reset();
  return *this;
}

xs::Boolean ESM_ActivityMDT::getLookThroughLimited() const {
  if (lookThroughLimited_Accessor) {
    return *lookThroughLimited_Accessor;
  }
  throw uci::base::UCIException("Error in getLookThroughLimited(): An attempt was made to get an optional field that was not enabled, call hasLookThroughLimited() to determine if it is safe to call getLookThroughLimited()");
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setLookThroughLimited(xs::Boolean value) {
  lookThroughLimited_Accessor = value;
  return *this;
}

bool ESM_ActivityMDT::hasLookThroughLimited() const noexcept {
  return lookThroughLimited_Accessor.has_value();
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::clearLookThroughLimited() noexcept {
  lookThroughLimited_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue ESM_ActivityMDT::getReceiverUtilization() const {
  if (receiverUtilization_Accessor) {
    return *receiverUtilization_Accessor;
  }
  throw uci::base::UCIException("Error in getReceiverUtilization(): An attempt was made to get an optional field that was not enabled, call hasReceiverUtilization() to determine if it is safe to call getReceiverUtilization()");
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setReceiverUtilization(uci::type::PercentTypeValue value) {
  receiverUtilization_Accessor = value;
  return *this;
}

bool ESM_ActivityMDT::hasReceiverUtilization() const noexcept {
  return receiverUtilization_Accessor.has_value();
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::clearReceiverUtilization() noexcept {
  receiverUtilization_Accessor.reset();
  return *this;
}

const uci::type::ESM_ActivityMDT::Activity& ESM_ActivityMDT::getActivity() const {
  return *activity_Accessor;
}

uci::type::ESM_ActivityMDT::Activity& ESM_ActivityMDT::getActivity() {
  return *activity_Accessor;
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::setActivity(const uci::type::ESM_ActivityMDT::Activity& accessor) {
  if (&accessor != activity_Accessor.get()) {
    activity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ESM_ActivityMDT> ESM_ActivityMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_ActivityMDT : type};
  return (requestedType == uci::type::accessorType::eSM_ActivityMDT) ? boost::make_unique<ESM_ActivityMDT>() : nullptr;
}

/**  */
namespace ESM_ActivityMDT_Names {

constexpr const char* Extern_Type_Name{"ESM_ActivityMDT"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* EntityListCleared_Name{"EntityListCleared"};
constexpr const char* EntityOverload_Name{"EntityOverload"};
constexpr const char* ExcessiveAttitude_Name{"ExcessiveAttitude"};
constexpr const char* PulseDensityOverload_Name{"PulseDensityOverload"};
constexpr const char* LookThroughLimited_Name{"LookThroughLimited"};
constexpr const char* ReceiverUtilization_Name{"ReceiverUtilization"};
constexpr const char* Activity_Name{"Activity"};

} // namespace ESM_ActivityMDT_Names

void ESM_ActivityMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_ActivityMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_ActivityMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::EntityListCleared_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEntityListCleared(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::EntityOverload_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEntityOverload(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::ExcessiveAttitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExcessiveAttitude(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::PulseDensityOverload_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseDensityOverload(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::LookThroughLimited_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLookThroughLimited(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::ReceiverUtilization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReceiverUtilization(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityMDT_Names::Activity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_ActivityMDT::Activity& boundedList = accessor.getActivity();
        const uci::type::ESM_ActivityMDT::Activity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ESM_ActivityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ESM_ActivityMDT::serialize(const uci::type::ESM_ActivityMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_ActivityMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_ActivityMDT_Names::Extern_Type_Name);
  }
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, ESM_ActivityMDT_Names::SubsystemID_Name);
  if (accessor.hasEntityListCleared()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEntityListCleared(), node, ESM_ActivityMDT_Names::EntityListCleared_Name);
  }
  if (accessor.hasEntityOverload()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEntityOverload(), node, ESM_ActivityMDT_Names::EntityOverload_Name);
  }
  if (accessor.hasExcessiveAttitude()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getExcessiveAttitude(), node, ESM_ActivityMDT_Names::ExcessiveAttitude_Name);
  }
  if (accessor.hasPulseDensityOverload()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseDensityOverload(), node, ESM_ActivityMDT_Names::PulseDensityOverload_Name);
  }
  if (accessor.hasLookThroughLimited()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLookThroughLimited(), node, ESM_ActivityMDT_Names::LookThroughLimited_Name);
  }
  if (accessor.hasReceiverUtilization()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getReceiverUtilization(), node, ESM_ActivityMDT_Names::ReceiverUtilization_Name);
  }
  {
    const uci::type::ESM_ActivityMDT::Activity& boundedList = accessor.getActivity();
    for (uci::type::ESM_ActivityMDT::Activity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ESM_ActivityType::serialize(boundedList.at(i), node, ESM_ActivityMDT_Names::Activity_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_ActivityMDT>().release());
}

uci::type::ESM_ActivityMDT& ESM_ActivityMDT::create(const uci::type::ESM_ActivityMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_ActivityMDT> newAccessor{boost::make_unique<asb_uci::type::ESM_ActivityMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_ActivityMDT::destroy(uci::type::ESM_ActivityMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_ActivityMDT*>(&accessor);
}

} // namespace type

} // namespace uci

