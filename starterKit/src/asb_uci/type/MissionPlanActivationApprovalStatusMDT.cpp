/** @file MissionPlanActivationApprovalStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MissionPlanActivationApprovalStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ApprovalStatusEnum.h"
#include "asb_uci/type/CommandID_Type.h"
#include "asb_uci/type/MissionPlanID_Type.h"
#include "asb_uci/type/PlanActivationCommandEnum.h"
#include "asb_uci/type/PlansActivationApprovalType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ApprovalStatusEnum.h"
#include "uci/type/CommandID_Type.h"
#include "uci/type/MissionPlanActivationApprovalStatusMDT.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/PlanActivationCommandEnum.h"
#include "uci/type/PlansActivationApprovalType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanActivationApprovalStatusMDT::MissionPlanActivationApprovalStatusMDT()
  : missionPlanID_Accessor{boost::make_unique<MissionPlanID_Type>()},
    approvalState_Accessor{boost::make_unique<ApprovalStatusEnum>()},
    activationCommand_Accessor{boost::make_unique<PlanActivationCommandEnum>()},
    subplanActivationApprovalByStatus_Accessor{boost::make_unique<SubplanActivationApprovalByStatus>(0, 4)} {
}

MissionPlanActivationApprovalStatusMDT::~MissionPlanActivationApprovalStatusMDT() = default;

void MissionPlanActivationApprovalStatusMDT::copy(const uci::type::MissionPlanActivationApprovalStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanActivationApprovalStatusMDT::copyImpl(const uci::type::MissionPlanActivationApprovalStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanActivationApprovalStatusMDT&>(accessor);
    setMissionPlanID(*(accessorImpl.missionPlanID_Accessor));
    setApprovalState(*(accessorImpl.approvalState_Accessor));
    setActivationCommand(*(accessorImpl.activationCommand_Accessor));
    if (accessorImpl.approvalManagementCommandID_Accessor) {
      setApprovalManagementCommandID(*(accessorImpl.approvalManagementCommandID_Accessor));
    } else {
      approvalManagementCommandID_Accessor.reset();
    }
    setSubplanActivationApprovalByStatus(*(accessorImpl.subplanActivationApprovalByStatus_Accessor));
  }
}

void MissionPlanActivationApprovalStatusMDT::reset() noexcept {
  missionPlanID_Accessor->reset();
  approvalState_Accessor->reset();
  activationCommand_Accessor->reset();
  approvalManagementCommandID_Accessor.reset();
  subplanActivationApprovalByStatus_Accessor->reset();
}

const uci::type::MissionPlanID_Type& MissionPlanActivationApprovalStatusMDT::getMissionPlanID() const {
  return *missionPlanID_Accessor;
}

uci::type::MissionPlanID_Type& MissionPlanActivationApprovalStatusMDT::getMissionPlanID() {
  return *missionPlanID_Accessor;
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::setMissionPlanID(const uci::type::MissionPlanID_Type& accessor) {
  if (&accessor != missionPlanID_Accessor.get()) {
    missionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ApprovalStatusEnum& MissionPlanActivationApprovalStatusMDT::getApprovalState() const {
  return *approvalState_Accessor;
}

uci::type::ApprovalStatusEnum& MissionPlanActivationApprovalStatusMDT::getApprovalState() {
  return *approvalState_Accessor;
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::setApprovalState(const uci::type::ApprovalStatusEnum& accessor) {
  if (&accessor != approvalState_Accessor.get()) {
    approvalState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::setApprovalState(uci::type::ApprovalStatusEnum::EnumerationItem value) {
  approvalState_Accessor->setValue(value);
  return *this;
}


const uci::type::PlanActivationCommandEnum& MissionPlanActivationApprovalStatusMDT::getActivationCommand() const {
  return *activationCommand_Accessor;
}

uci::type::PlanActivationCommandEnum& MissionPlanActivationApprovalStatusMDT::getActivationCommand() {
  return *activationCommand_Accessor;
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::setActivationCommand(const uci::type::PlanActivationCommandEnum& accessor) {
  if (&accessor != activationCommand_Accessor.get()) {
    activationCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::setActivationCommand(uci::type::PlanActivationCommandEnum::EnumerationItem value) {
  activationCommand_Accessor->setValue(value);
  return *this;
}


uci::type::CommandID_Type& MissionPlanActivationApprovalStatusMDT::getApprovalManagementCommandID_() const {
  if (approvalManagementCommandID_Accessor) {
    return *approvalManagementCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getApprovalManagementCommandID(): An attempt was made to get an optional field that was not enabled, call hasApprovalManagementCommandID() to determine if it is safe to call getApprovalManagementCommandID()");
}

const uci::type::CommandID_Type& MissionPlanActivationApprovalStatusMDT::getApprovalManagementCommandID() const {
  return getApprovalManagementCommandID_();
}

uci::type::CommandID_Type& MissionPlanActivationApprovalStatusMDT::getApprovalManagementCommandID() {
  return getApprovalManagementCommandID_();
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::setApprovalManagementCommandID(const uci::type::CommandID_Type& accessor) {
  enableApprovalManagementCommandID();
  if (&accessor != approvalManagementCommandID_Accessor.get()) {
    approvalManagementCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanActivationApprovalStatusMDT::hasApprovalManagementCommandID() const noexcept {
  return static_cast<bool>(approvalManagementCommandID_Accessor);
}

uci::type::CommandID_Type& MissionPlanActivationApprovalStatusMDT::enableApprovalManagementCommandID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandID_Type : type};
  if ((!approvalManagementCommandID_Accessor) || (approvalManagementCommandID_Accessor->getAccessorType() != requestedType)) {
    approvalManagementCommandID_Accessor = CommandID_Type::create(requestedType);
    if (!approvalManagementCommandID_Accessor) {
      throw uci::base::UCIException("Error in enableApprovalManagementCommandID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approvalManagementCommandID_Accessor;
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::clearApprovalManagementCommandID() noexcept {
  approvalManagementCommandID_Accessor.reset();
  return *this;
}

const uci::type::MissionPlanActivationApprovalStatusMDT::SubplanActivationApprovalByStatus& MissionPlanActivationApprovalStatusMDT::getSubplanActivationApprovalByStatus() const {
  return *subplanActivationApprovalByStatus_Accessor;
}

uci::type::MissionPlanActivationApprovalStatusMDT::SubplanActivationApprovalByStatus& MissionPlanActivationApprovalStatusMDT::getSubplanActivationApprovalByStatus() {
  return *subplanActivationApprovalByStatus_Accessor;
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::setSubplanActivationApprovalByStatus(const uci::type::MissionPlanActivationApprovalStatusMDT::SubplanActivationApprovalByStatus& accessor) {
  if (&accessor != subplanActivationApprovalByStatus_Accessor.get()) {
    subplanActivationApprovalByStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MissionPlanActivationApprovalStatusMDT> MissionPlanActivationApprovalStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanActivationApprovalStatusMDT : type};
  return (requestedType == uci::type::accessorType::missionPlanActivationApprovalStatusMDT) ? boost::make_unique<MissionPlanActivationApprovalStatusMDT>() : nullptr;
}

/**  */
namespace MissionPlanActivationApprovalStatusMDT_Names {

constexpr const char* Extern_Type_Name{"MissionPlanActivationApprovalStatusMDT"};
constexpr const char* MissionPlanID_Name{"MissionPlanID"};
constexpr const char* ApprovalState_Name{"ApprovalState"};
constexpr const char* ActivationCommand_Name{"ActivationCommand"};
constexpr const char* ApprovalManagementCommandID_Name{"ApprovalManagementCommandID"};
constexpr const char* SubplanActivationApprovalByStatus_Name{"SubplanActivationApprovalByStatus"};

} // namespace MissionPlanActivationApprovalStatusMDT_Names

void MissionPlanActivationApprovalStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanActivationApprovalStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanActivationApprovalStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanActivationApprovalStatusMDT_Names::MissionPlanID_Name) {
      MissionPlanID_Type::deserialize(valueType.second, accessor.getMissionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanActivationApprovalStatusMDT_Names::ApprovalState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getApprovalState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MissionPlanActivationApprovalStatusMDT_Names::ActivationCommand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getActivationCommand().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MissionPlanActivationApprovalStatusMDT_Names::ApprovalManagementCommandID_Name) {
      CommandID_Type::deserialize(valueType.second, accessor.enableApprovalManagementCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanActivationApprovalStatusMDT_Names::SubplanActivationApprovalByStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanActivationApprovalStatusMDT::SubplanActivationApprovalByStatus& boundedList = accessor.getSubplanActivationApprovalByStatus();
        const uci::type::MissionPlanActivationApprovalStatusMDT::SubplanActivationApprovalByStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlansActivationApprovalType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string MissionPlanActivationApprovalStatusMDT::serialize(const uci::type::MissionPlanActivationApprovalStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanActivationApprovalStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanActivationApprovalStatusMDT_Names::Extern_Type_Name);
  }
  MissionPlanID_Type::serialize(accessor.getMissionPlanID(), node, MissionPlanActivationApprovalStatusMDT_Names::MissionPlanID_Name);
  ApprovalStatusEnum::serialize(accessor.getApprovalState(), node, MissionPlanActivationApprovalStatusMDT_Names::ApprovalState_Name, false);
  PlanActivationCommandEnum::serialize(accessor.getActivationCommand(), node, MissionPlanActivationApprovalStatusMDT_Names::ActivationCommand_Name, false);
  if (accessor.hasApprovalManagementCommandID()) {
    CommandID_Type::serialize(accessor.getApprovalManagementCommandID(), node, MissionPlanActivationApprovalStatusMDT_Names::ApprovalManagementCommandID_Name);
  }
  {
    const uci::type::MissionPlanActivationApprovalStatusMDT::SubplanActivationApprovalByStatus& boundedList = accessor.getSubplanActivationApprovalByStatus();
    for (uci::type::MissionPlanActivationApprovalStatusMDT::SubplanActivationApprovalByStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PlansActivationApprovalType::serialize(boundedList.at(i), node, MissionPlanActivationApprovalStatusMDT_Names::SubplanActivationApprovalByStatus_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanActivationApprovalStatusMDT>().release());
}

uci::type::MissionPlanActivationApprovalStatusMDT& MissionPlanActivationApprovalStatusMDT::create(const uci::type::MissionPlanActivationApprovalStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanActivationApprovalStatusMDT> newAccessor{boost::make_unique<asb_uci::type::MissionPlanActivationApprovalStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanActivationApprovalStatusMDT::destroy(uci::type::MissionPlanActivationApprovalStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanActivationApprovalStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

