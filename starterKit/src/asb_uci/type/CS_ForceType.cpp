/** @file CS_ForceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CS_ForceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CS_CapabilitiesType.h"
#include "asb_uci/type/CS_FreeFormatType.h"
#include "asb_uci/type/CS_ObscuraDataType.h"
#include "asb_uci/type/CS_PostureType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/VisibleString32Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CS_CapabilitiesType.h"
#include "uci/type/CS_ForceType.h"
#include "uci/type/CS_FreeFormatType.h"
#include "uci/type/CS_ObscuraDataType.h"
#include "uci/type/CS_PostureType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/VisibleString32Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_ForceType::CS_ForceType()
  : tactics_Accessor{boost::make_unique<Tactics>(0, SIZE_MAX)},
    posture_Accessor{boost::make_unique<Posture>(0, 5)},
    forceCapability_Accessor{boost::make_unique<ForceCapability>(0, SIZE_MAX)} {
}

CS_ForceType::~CS_ForceType() = default;

void CS_ForceType::copy(const uci::type::CS_ForceType& accessor) {
  copyImpl(accessor, false);
}

void CS_ForceType::copyImpl(const uci::type::CS_ForceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_ForceType&>(accessor);
    if (accessorImpl.forceName_Accessor) {
      setForceName(*(accessorImpl.forceName_Accessor));
    } else {
      forceName_Accessor.reset();
    }
    if (accessorImpl.locationName_Accessor) {
      setLocationName(*(accessorImpl.locationName_Accessor));
    } else {
      locationName_Accessor.reset();
    }
    setTactics(*(accessorImpl.tactics_Accessor));
    if (accessorImpl.hasLocked()) {
      setLocked(accessorImpl.getLocked());
    } else {
      clearLocked();
    }
    setPosture(*(accessorImpl.posture_Accessor));
    if (accessorImpl.hasPortable()) {
      setPortable(accessorImpl.getPortable());
    } else {
      clearPortable();
    }
    if (accessorImpl.hasPortableRadius()) {
      setPortableRadius(accessorImpl.getPortableRadius());
    } else {
      clearPortableRadius();
    }
    if (accessorImpl.hasUseForceObscura()) {
      setUseForceObscura(accessorImpl.getUseForceObscura());
    } else {
      clearUseForceObscura();
    }
    if (accessorImpl.freeFormat_Accessor) {
      setFreeFormat(*(accessorImpl.freeFormat_Accessor));
    } else {
      freeFormat_Accessor.reset();
    }
    if (accessorImpl.obscuraData_Accessor) {
      setObscuraData(*(accessorImpl.obscuraData_Accessor));
    } else {
      obscuraData_Accessor.reset();
    }
    setForceCapability(*(accessorImpl.forceCapability_Accessor));
  }
}

void CS_ForceType::reset() noexcept {
  forceName_Accessor.reset();
  locationName_Accessor.reset();
  tactics_Accessor->reset();
  clearLocked();
  posture_Accessor->reset();
  clearPortable();
  clearPortableRadius();
  clearUseForceObscura();
  freeFormat_Accessor.reset();
  obscuraData_Accessor.reset();
  forceCapability_Accessor->reset();
}

uci::type::ForeignKeyType& CS_ForceType::getForceName_() const {
  if (forceName_Accessor) {
    return *forceName_Accessor;
  }
  throw uci::base::UCIException("Error in getForceName(): An attempt was made to get an optional field that was not enabled, call hasForceName() to determine if it is safe to call getForceName()");
}

const uci::type::ForeignKeyType& CS_ForceType::getForceName() const {
  return getForceName_();
}

uci::type::ForeignKeyType& CS_ForceType::getForceName() {
  return getForceName_();
}

uci::type::CS_ForceType& CS_ForceType::setForceName(const uci::type::ForeignKeyType& accessor) {
  enableForceName(accessor.getAccessorType());
  if (&accessor != forceName_Accessor.get()) {
    forceName_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CS_ForceType::hasForceName() const noexcept {
  return static_cast<bool>(forceName_Accessor);
}

uci::type::ForeignKeyType& CS_ForceType::enableForceName(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!forceName_Accessor) || (forceName_Accessor->getAccessorType() != requestedType)) {
    forceName_Accessor = ForeignKeyType::create(requestedType);
    if (!forceName_Accessor) {
      throw uci::base::UCIException("Error in enableForceName(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *forceName_Accessor;
}

uci::type::CS_ForceType& CS_ForceType::clearForceName() noexcept {
  forceName_Accessor.reset();
  return *this;
}

uci::type::VisibleString32Type& CS_ForceType::getLocationName_() const {
  if (locationName_Accessor) {
    return *locationName_Accessor;
  }
  throw uci::base::UCIException("Error in getLocationName(): An attempt was made to get an optional field that was not enabled, call hasLocationName() to determine if it is safe to call getLocationName()");
}

const uci::type::VisibleString32Type& CS_ForceType::getLocationName() const {
  return getLocationName_();
}

uci::type::VisibleString32Type& CS_ForceType::getLocationName() {
  return getLocationName_();
}

uci::type::CS_ForceType& CS_ForceType::setLocationName(const uci::type::VisibleString32Type& value) {
  return setLocationName(value.c_str());
}

uci::type::CS_ForceType& CS_ForceType::setLocationName(const std::string& value) {
  return setLocationName(value.c_str());
}

uci::type::CS_ForceType& CS_ForceType::setLocationName(const char* value) {
  enableLocationName().setStringValue(value);
  return *this;
}

bool CS_ForceType::hasLocationName() const noexcept {
  return static_cast<bool>(locationName_Accessor);
}

uci::type::VisibleString32Type& CS_ForceType::enableLocationName(uci::base::accessorType::AccessorType type) {
  if (!locationName_Accessor) {
    locationName_Accessor = VisibleString32Type::create(type);
  }
  return *locationName_Accessor;
}

uci::type::CS_ForceType& CS_ForceType::clearLocationName() noexcept {
  locationName_Accessor.reset();
  return *this;
}

const uci::type::CS_ForceType::Tactics& CS_ForceType::getTactics() const {
  return *tactics_Accessor;
}

uci::type::CS_ForceType::Tactics& CS_ForceType::getTactics() {
  return *tactics_Accessor;
}

uci::type::CS_ForceType& CS_ForceType::setTactics(const uci::type::CS_ForceType::Tactics& accessor) {
  if (&accessor != tactics_Accessor.get()) {
    tactics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean CS_ForceType::getLocked() const {
  if (locked_Accessor) {
    return *locked_Accessor;
  }
  throw uci::base::UCIException("Error in getLocked(): An attempt was made to get an optional field that was not enabled, call hasLocked() to determine if it is safe to call getLocked()");
}

uci::type::CS_ForceType& CS_ForceType::setLocked(xs::Boolean value) {
  locked_Accessor = value;
  return *this;
}

bool CS_ForceType::hasLocked() const noexcept {
  return locked_Accessor.has_value();
}

uci::type::CS_ForceType& CS_ForceType::clearLocked() noexcept {
  locked_Accessor.reset();
  return *this;
}

const uci::type::CS_ForceType::Posture& CS_ForceType::getPosture() const {
  return *posture_Accessor;
}

uci::type::CS_ForceType::Posture& CS_ForceType::getPosture() {
  return *posture_Accessor;
}

uci::type::CS_ForceType& CS_ForceType::setPosture(const uci::type::CS_ForceType::Posture& accessor) {
  if (&accessor != posture_Accessor.get()) {
    posture_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean CS_ForceType::getPortable() const {
  if (portable_Accessor) {
    return *portable_Accessor;
  }
  throw uci::base::UCIException("Error in getPortable(): An attempt was made to get an optional field that was not enabled, call hasPortable() to determine if it is safe to call getPortable()");
}

uci::type::CS_ForceType& CS_ForceType::setPortable(xs::Boolean value) {
  portable_Accessor = value;
  return *this;
}

bool CS_ForceType::hasPortable() const noexcept {
  return portable_Accessor.has_value();
}

uci::type::CS_ForceType& CS_ForceType::clearPortable() noexcept {
  portable_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue CS_ForceType::getPortableRadius() const {
  if (portableRadius_Accessor) {
    return *portableRadius_Accessor;
  }
  throw uci::base::UCIException("Error in getPortableRadius(): An attempt was made to get an optional field that was not enabled, call hasPortableRadius() to determine if it is safe to call getPortableRadius()");
}

uci::type::CS_ForceType& CS_ForceType::setPortableRadius(uci::type::DistanceTypeValue value) {
  portableRadius_Accessor = value;
  return *this;
}

bool CS_ForceType::hasPortableRadius() const noexcept {
  return portableRadius_Accessor.has_value();
}

uci::type::CS_ForceType& CS_ForceType::clearPortableRadius() noexcept {
  portableRadius_Accessor.reset();
  return *this;
}

xs::Boolean CS_ForceType::getUseForceObscura() const {
  if (useForceObscura_Accessor) {
    return *useForceObscura_Accessor;
  }
  throw uci::base::UCIException("Error in getUseForceObscura(): An attempt was made to get an optional field that was not enabled, call hasUseForceObscura() to determine if it is safe to call getUseForceObscura()");
}

uci::type::CS_ForceType& CS_ForceType::setUseForceObscura(xs::Boolean value) {
  useForceObscura_Accessor = value;
  return *this;
}

bool CS_ForceType::hasUseForceObscura() const noexcept {
  return useForceObscura_Accessor.has_value();
}

uci::type::CS_ForceType& CS_ForceType::clearUseForceObscura() noexcept {
  useForceObscura_Accessor.reset();
  return *this;
}

uci::type::CS_FreeFormatType& CS_ForceType::getFreeFormat_() const {
  if (freeFormat_Accessor) {
    return *freeFormat_Accessor;
  }
  throw uci::base::UCIException("Error in getFreeFormat(): An attempt was made to get an optional field that was not enabled, call hasFreeFormat() to determine if it is safe to call getFreeFormat()");
}

const uci::type::CS_FreeFormatType& CS_ForceType::getFreeFormat() const {
  return getFreeFormat_();
}

uci::type::CS_FreeFormatType& CS_ForceType::getFreeFormat() {
  return getFreeFormat_();
}

uci::type::CS_ForceType& CS_ForceType::setFreeFormat(const uci::type::CS_FreeFormatType& accessor) {
  enableFreeFormat();
  if (&accessor != freeFormat_Accessor.get()) {
    freeFormat_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_ForceType::hasFreeFormat() const noexcept {
  return static_cast<bool>(freeFormat_Accessor);
}

uci::type::CS_FreeFormatType& CS_ForceType::enableFreeFormat(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_FreeFormatType : type};
  if ((!freeFormat_Accessor) || (freeFormat_Accessor->getAccessorType() != requestedType)) {
    freeFormat_Accessor = CS_FreeFormatType::create(requestedType);
    if (!freeFormat_Accessor) {
      throw uci::base::UCIException("Error in enableFreeFormat(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *freeFormat_Accessor;
}

uci::type::CS_ForceType& CS_ForceType::clearFreeFormat() noexcept {
  freeFormat_Accessor.reset();
  return *this;
}

uci::type::CS_ObscuraDataType& CS_ForceType::getObscuraData_() const {
  if (obscuraData_Accessor) {
    return *obscuraData_Accessor;
  }
  throw uci::base::UCIException("Error in getObscuraData(): An attempt was made to get an optional field that was not enabled, call hasObscuraData() to determine if it is safe to call getObscuraData()");
}

const uci::type::CS_ObscuraDataType& CS_ForceType::getObscuraData() const {
  return getObscuraData_();
}

uci::type::CS_ObscuraDataType& CS_ForceType::getObscuraData() {
  return getObscuraData_();
}

uci::type::CS_ForceType& CS_ForceType::setObscuraData(const uci::type::CS_ObscuraDataType& accessor) {
  enableObscuraData();
  if (&accessor != obscuraData_Accessor.get()) {
    obscuraData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_ForceType::hasObscuraData() const noexcept {
  return static_cast<bool>(obscuraData_Accessor);
}

uci::type::CS_ObscuraDataType& CS_ForceType::enableObscuraData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_ObscuraDataType : type};
  if ((!obscuraData_Accessor) || (obscuraData_Accessor->getAccessorType() != requestedType)) {
    obscuraData_Accessor = CS_ObscuraDataType::create(requestedType);
    if (!obscuraData_Accessor) {
      throw uci::base::UCIException("Error in enableObscuraData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *obscuraData_Accessor;
}

uci::type::CS_ForceType& CS_ForceType::clearObscuraData() noexcept {
  obscuraData_Accessor.reset();
  return *this;
}

const uci::type::CS_ForceType::ForceCapability& CS_ForceType::getForceCapability() const {
  return *forceCapability_Accessor;
}

uci::type::CS_ForceType::ForceCapability& CS_ForceType::getForceCapability() {
  return *forceCapability_Accessor;
}

uci::type::CS_ForceType& CS_ForceType::setForceCapability(const uci::type::CS_ForceType::ForceCapability& accessor) {
  if (&accessor != forceCapability_Accessor.get()) {
    forceCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CS_ForceType> CS_ForceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_ForceType : type};
  return (requestedType == uci::type::accessorType::cS_ForceType) ? boost::make_unique<CS_ForceType>() : nullptr;
}

/**  */
namespace CS_ForceType_Names {

constexpr const char* Extern_Type_Name{"CS_ForceType"};
constexpr const char* ForceName_Name{"ForceName"};
constexpr const char* LocationName_Name{"LocationName"};
constexpr const char* Tactics_Name{"Tactics"};
constexpr const char* Locked_Name{"Locked"};
constexpr const char* Posture_Name{"Posture"};
constexpr const char* Portable_Name{"Portable"};
constexpr const char* PortableRadius_Name{"PortableRadius"};
constexpr const char* UseForceObscura_Name{"UseForceObscura"};
constexpr const char* FreeFormat_Name{"FreeFormat"};
constexpr const char* ObscuraData_Name{"ObscuraData"};
constexpr const char* ForceCapability_Name{"ForceCapability"};

} // namespace CS_ForceType_Names

void CS_ForceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_ForceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_ForceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::ForceName_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableForceName(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::LocationName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocationName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::Tactics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CS_ForceType::Tactics& boundedList = accessor.getTactics();
        const uci::type::CS_ForceType::Tactics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::Locked_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocked(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::Posture_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CS_ForceType::Posture& boundedList = accessor.getPosture();
        const uci::type::CS_ForceType::Posture::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CS_PostureType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::Portable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPortable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::PortableRadius_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPortableRadius(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::UseForceObscura_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUseForceObscura(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::FreeFormat_Name) {
      CS_FreeFormatType::deserialize(valueType.second, accessor.enableFreeFormat(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::ObscuraData_Name) {
      CS_ObscuraDataType::deserialize(valueType.second, accessor.enableObscuraData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ForceType_Names::ForceCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CS_ForceType::ForceCapability& boundedList = accessor.getForceCapability();
        const uci::type::CS_ForceType::ForceCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CS_CapabilitiesType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CS_ForceType::serialize(const uci::type::CS_ForceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_ForceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_ForceType_Names::Extern_Type_Name);
  }
  if (accessor.hasForceName()) {
    ForeignKeyType::serialize(accessor.getForceName(), node, CS_ForceType_Names::ForceName_Name);
  }
  if (accessor.hasLocationName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getLocationName(), node, CS_ForceType_Names::LocationName_Name);
  }
  {
    const uci::type::CS_ForceType::Tactics& boundedList = accessor.getTactics();
    for (uci::type::CS_ForceType::Tactics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, CS_ForceType_Names::Tactics_Name);
    }
  }
  if (accessor.hasLocked()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLocked(), node, CS_ForceType_Names::Locked_Name);
  }
  {
    const uci::type::CS_ForceType::Posture& boundedList = accessor.getPosture();
    for (uci::type::CS_ForceType::Posture::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CS_PostureType::serialize(boundedList.at(i), node, CS_ForceType_Names::Posture_Name);
    }
  }
  if (accessor.hasPortable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPortable(), node, CS_ForceType_Names::Portable_Name);
  }
  if (accessor.hasPortableRadius()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPortableRadius(), node, CS_ForceType_Names::PortableRadius_Name);
  }
  if (accessor.hasUseForceObscura()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUseForceObscura(), node, CS_ForceType_Names::UseForceObscura_Name);
  }
  if (accessor.hasFreeFormat()) {
    CS_FreeFormatType::serialize(accessor.getFreeFormat(), node, CS_ForceType_Names::FreeFormat_Name);
  }
  if (accessor.hasObscuraData()) {
    CS_ObscuraDataType::serialize(accessor.getObscuraData(), node, CS_ForceType_Names::ObscuraData_Name);
  }
  {
    const uci::type::CS_ForceType::ForceCapability& boundedList = accessor.getForceCapability();
    for (uci::type::CS_ForceType::ForceCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CS_CapabilitiesType::serialize(boundedList.at(i), node, CS_ForceType_Names::ForceCapability_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_ForceType& CS_ForceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_ForceType>().release());
}

uci::type::CS_ForceType& CS_ForceType::create(const uci::type::CS_ForceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_ForceType> newAccessor{boost::make_unique<asb_uci::type::CS_ForceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_ForceType::destroy(uci::type::CS_ForceType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_ForceType*>(&accessor);
}

} // namespace type

} // namespace uci

