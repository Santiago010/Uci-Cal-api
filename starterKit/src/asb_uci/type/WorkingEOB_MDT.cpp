/** @file WorkingEOB_MDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WorkingEOB_MDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/EOB_RecordMarkedType.h"
#include "../../../include/asb_uci/type/OpVolumeID_Type.h"
#include "../../../include/asb_uci/type/OpZoneID_Type.h"
#include "../../../include/asb_uci/type/WorkingEOB_ID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_RecordMarkedType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpVolumeID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpZoneID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WorkingEOB_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WorkingEOB_MDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WorkingEOB_MDT::WorkingEOB_MDT()
  : workingEOB_ID_Accessor{boost::make_unique<WorkingEOB_ID_Type>()},
    eOB_Site_Accessor{boost::make_unique<EOB_Site>(1, SIZE_MAX)} {
}

WorkingEOB_MDT::~WorkingEOB_MDT() = default;

void WorkingEOB_MDT::copy(const uci::type::WorkingEOB_MDT& accessor) {
  copyImpl(accessor, false);
}

void WorkingEOB_MDT::copyImpl(const uci::type::WorkingEOB_MDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const WorkingEOB_MDT&>(accessor);
    setWorkingEOB_ID(*(accessorImpl.workingEOB_ID_Accessor));
    if (accessorImpl.opZoneID_Accessor) {
      setOpZoneID(*(accessorImpl.opZoneID_Accessor));
    } else {
      opZoneID_Accessor.reset();
    }
    if (accessorImpl.opVolumeID_Accessor) {
      setOpVolumeID(*(accessorImpl.opVolumeID_Accessor));
    } else {
      opVolumeID_Accessor.reset();
    }
    if (accessorImpl.hasInitialCreationTime()) {
      setInitialCreationTime(accessorImpl.getInitialCreationTime());
    } else {
      clearInitialCreationTime();
    }
    if (accessorImpl.hasLastUpdateTime()) {
      setLastUpdateTime(accessorImpl.getLastUpdateTime());
    } else {
      clearLastUpdateTime();
    }
    setEOB_Site(*(accessorImpl.eOB_Site_Accessor));
  }
}

void WorkingEOB_MDT::reset() noexcept {
  DataRecordBaseType::reset();
  workingEOB_ID_Accessor->reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  clearInitialCreationTime();
  clearLastUpdateTime();
  eOB_Site_Accessor->reset();
}

const uci::type::WorkingEOB_ID_Type& WorkingEOB_MDT::getWorkingEOB_ID() const {
  return *workingEOB_ID_Accessor;
}

uci::type::WorkingEOB_ID_Type& WorkingEOB_MDT::getWorkingEOB_ID() {
  return *workingEOB_ID_Accessor;
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::setWorkingEOB_ID(const uci::type::WorkingEOB_ID_Type& accessor) {
  if (&accessor != workingEOB_ID_Accessor.get()) {
    workingEOB_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpZoneID_Type& WorkingEOB_MDT::getOpZoneID_() const {
  if (opZoneID_Accessor) {
    return *opZoneID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpZoneID(): An attempt was made to get an optional field that was not enabled, call hasOpZoneID() to determine if it is safe to call getOpZoneID()");
}

const uci::type::OpZoneID_Type& WorkingEOB_MDT::getOpZoneID() const {
  return getOpZoneID_();
}

uci::type::OpZoneID_Type& WorkingEOB_MDT::getOpZoneID() {
  return getOpZoneID_();
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::setOpZoneID(const uci::type::OpZoneID_Type& accessor) {
  enableOpZoneID();
  if (&accessor != opZoneID_Accessor.get()) {
    opZoneID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WorkingEOB_MDT::hasOpZoneID() const noexcept {
  return static_cast<bool>(opZoneID_Accessor);
}

uci::type::OpZoneID_Type& WorkingEOB_MDT::enableOpZoneID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneID_Type : type};
  if ((!opZoneID_Accessor) || (opZoneID_Accessor->getAccessorType() != requestedType)) {
    opZoneID_Accessor = OpZoneID_Type::create(requestedType);
    if (!opZoneID_Accessor) {
      throw uci::base::UCIException("Error in enableOpZoneID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opZoneID_Accessor;
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::clearOpZoneID() noexcept {
  opZoneID_Accessor.reset();
  return *this;
}

uci::type::OpVolumeID_Type& WorkingEOB_MDT::getOpVolumeID_() const {
  if (opVolumeID_Accessor) {
    return *opVolumeID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolumeID(): An attempt was made to get an optional field that was not enabled, call hasOpVolumeID() to determine if it is safe to call getOpVolumeID()");
}

const uci::type::OpVolumeID_Type& WorkingEOB_MDT::getOpVolumeID() const {
  return getOpVolumeID_();
}

uci::type::OpVolumeID_Type& WorkingEOB_MDT::getOpVolumeID() {
  return getOpVolumeID_();
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::setOpVolumeID(const uci::type::OpVolumeID_Type& accessor) {
  enableOpVolumeID();
  if (&accessor != opVolumeID_Accessor.get()) {
    opVolumeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WorkingEOB_MDT::hasOpVolumeID() const noexcept {
  return static_cast<bool>(opVolumeID_Accessor);
}

uci::type::OpVolumeID_Type& WorkingEOB_MDT::enableOpVolumeID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeID_Type : type};
  if ((!opVolumeID_Accessor) || (opVolumeID_Accessor->getAccessorType() != requestedType)) {
    opVolumeID_Accessor = OpVolumeID_Type::create(requestedType);
    if (!opVolumeID_Accessor) {
      throw uci::base::UCIException("Error in enableOpVolumeID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opVolumeID_Accessor;
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::clearOpVolumeID() noexcept {
  opVolumeID_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue WorkingEOB_MDT::getInitialCreationTime() const {
  if (initialCreationTime_Accessor) {
    return *initialCreationTime_Accessor;
  }
  throw uci::base::UCIException("Error in getInitialCreationTime(): An attempt was made to get an optional field that was not enabled, call hasInitialCreationTime() to determine if it is safe to call getInitialCreationTime()");
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::setInitialCreationTime(uci::type::DateTimeTypeValue value) {
  initialCreationTime_Accessor = value;
  return *this;
}

bool WorkingEOB_MDT::hasInitialCreationTime() const noexcept {
  return initialCreationTime_Accessor.has_value();
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::clearInitialCreationTime() noexcept {
  initialCreationTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue WorkingEOB_MDT::getLastUpdateTime() const {
  if (lastUpdateTime_Accessor) {
    return *lastUpdateTime_Accessor;
  }
  throw uci::base::UCIException("Error in getLastUpdateTime(): An attempt was made to get an optional field that was not enabled, call hasLastUpdateTime() to determine if it is safe to call getLastUpdateTime()");
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::setLastUpdateTime(uci::type::DateTimeTypeValue value) {
  lastUpdateTime_Accessor = value;
  return *this;
}

bool WorkingEOB_MDT::hasLastUpdateTime() const noexcept {
  return lastUpdateTime_Accessor.has_value();
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::clearLastUpdateTime() noexcept {
  lastUpdateTime_Accessor.reset();
  return *this;
}

const uci::type::WorkingEOB_MDT::EOB_Site& WorkingEOB_MDT::getEOB_Site() const {
  return *eOB_Site_Accessor;
}

uci::type::WorkingEOB_MDT::EOB_Site& WorkingEOB_MDT::getEOB_Site() {
  return *eOB_Site_Accessor;
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::setEOB_Site(const uci::type::WorkingEOB_MDT::EOB_Site& accessor) {
  if (&accessor != eOB_Site_Accessor.get()) {
    eOB_Site_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<WorkingEOB_MDT> WorkingEOB_MDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::workingEOB_MDT : type};
  return (requestedType == uci::type::accessorType::workingEOB_MDT) ? boost::make_unique<WorkingEOB_MDT>() : nullptr;
}

/**  */
namespace WorkingEOB_MDT_Names {

constexpr const char* Extern_Type_Name{"WorkingEOB_MDT"};
constexpr const char* WorkingEOB_ID_Name{"WorkingEOB_ID"};
constexpr const char* OpZoneID_Name{"OpZoneID"};
constexpr const char* OpVolumeID_Name{"OpVolumeID"};
constexpr const char* InitialCreationTime_Name{"InitialCreationTime"};
constexpr const char* LastUpdateTime_Name{"LastUpdateTime"};
constexpr const char* EOB_Site_Name{"EOB_Site"};

} // namespace WorkingEOB_MDT_Names

void WorkingEOB_MDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::WorkingEOB_MDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WorkingEOB_MDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WorkingEOB_MDT_Names::WorkingEOB_ID_Name) {
      WorkingEOB_ID_Type::deserialize(valueType.second, accessor.getWorkingEOB_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingEOB_MDT_Names::OpZoneID_Name) {
      OpZoneID_Type::deserialize(valueType.second, accessor.enableOpZoneID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingEOB_MDT_Names::OpVolumeID_Name) {
      OpVolumeID_Type::deserialize(valueType.second, accessor.enableOpVolumeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingEOB_MDT_Names::InitialCreationTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitialCreationTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WorkingEOB_MDT_Names::LastUpdateTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLastUpdateTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WorkingEOB_MDT_Names::EOB_Site_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WorkingEOB_MDT::EOB_Site& boundedList = accessor.getEOB_Site();
        const uci::type::WorkingEOB_MDT::EOB_Site::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EOB_RecordMarkedType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string WorkingEOB_MDT::serialize(const uci::type::WorkingEOB_MDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WorkingEOB_MDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WorkingEOB_MDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  WorkingEOB_ID_Type::serialize(accessor.getWorkingEOB_ID(), node, WorkingEOB_MDT_Names::WorkingEOB_ID_Name);
  if (accessor.hasOpZoneID()) {
    OpZoneID_Type::serialize(accessor.getOpZoneID(), node, WorkingEOB_MDT_Names::OpZoneID_Name);
  }
  if (accessor.hasOpVolumeID()) {
    OpVolumeID_Type::serialize(accessor.getOpVolumeID(), node, WorkingEOB_MDT_Names::OpVolumeID_Name);
  }
  if (accessor.hasInitialCreationTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getInitialCreationTime(), node, WorkingEOB_MDT_Names::InitialCreationTime_Name);
  }
  if (accessor.hasLastUpdateTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getLastUpdateTime(), node, WorkingEOB_MDT_Names::LastUpdateTime_Name);
  }
  {
    const uci::type::WorkingEOB_MDT::EOB_Site& boundedList = accessor.getEOB_Site();
    for (uci::type::WorkingEOB_MDT::EOB_Site::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EOB_RecordMarkedType::serialize(boundedList.at(i), node, WorkingEOB_MDT_Names::EOB_Site_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WorkingEOB_MDT>().release());
}

uci::type::WorkingEOB_MDT& WorkingEOB_MDT::create(const uci::type::WorkingEOB_MDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WorkingEOB_MDT> newAccessor{boost::make_unique<asb_uci::type::WorkingEOB_MDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WorkingEOB_MDT::destroy(uci::type::WorkingEOB_MDT& accessor) {
  delete dynamic_cast<asb_uci::type::WorkingEOB_MDT*>(&accessor);
}

} // namespace type

} // namespace uci

