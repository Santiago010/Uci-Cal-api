/** @file PO_ActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ActivityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityCommandBaseType.h"
#include "../../../include/asb_uci/type/PO_CollectionConstraintsSettingsType.h"
#include "../../../include/asb_uci/type/PO_ComponentSettingsType.h"
#include "../../../include/asb_uci/type/PO_SubCapabilitySettingsType.h"
#include "../../../include/asb_uci/type/PO_TargetType.h"
#include "../../../include/asb_uci/type/PO_TrackDetailsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ActivityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CollectionConstraintsSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_SubCapabilitySettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TrackDetailsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ActivityCommandType::PO_ActivityCommandType()
  : changeSubCapability_Accessor{boost::make_unique<ChangeSubCapability>(0, SIZE_MAX)},
    changeComponentSettings_Accessor{boost::make_unique<ChangeComponentSettings>(0, SIZE_MAX)} {
}

PO_ActivityCommandType::~PO_ActivityCommandType() = default;

void PO_ActivityCommandType::copy(const uci::type::PO_ActivityCommandType& accessor) {
  copyImpl(accessor, false);
}

void PO_ActivityCommandType::copyImpl(const uci::type::PO_ActivityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PO_ActivityCommandType&>(accessor);
    if (accessorImpl.pointing_Accessor) {
      setPointing(*(accessorImpl.pointing_Accessor));
    } else {
      pointing_Accessor.reset();
    }
    setChangeSubCapability(*(accessorImpl.changeSubCapability_Accessor));
    setChangeComponentSettings(*(accessorImpl.changeComponentSettings_Accessor));
    if (accessorImpl.changeCollectionConstraints_Accessor) {
      setChangeCollectionConstraints(*(accessorImpl.changeCollectionConstraints_Accessor));
    } else {
      changeCollectionConstraints_Accessor.reset();
    }
    if (accessorImpl.changeTrack_Accessor) {
      setChangeTrack(*(accessorImpl.changeTrack_Accessor));
    } else {
      changeTrack_Accessor.reset();
    }
  }
}

void PO_ActivityCommandType::reset() noexcept {
  ActivityCommandBaseType::reset();
  pointing_Accessor.reset();
  changeSubCapability_Accessor->reset();
  changeComponentSettings_Accessor->reset();
  changeCollectionConstraints_Accessor.reset();
  changeTrack_Accessor.reset();
}

uci::type::PO_TargetType& PO_ActivityCommandType::getPointing_() const {
  if (pointing_Accessor) {
    return *pointing_Accessor;
  }
  throw uci::base::UCIException("Error in getPointing(): An attempt was made to get an optional field that was not enabled, call hasPointing() to determine if it is safe to call getPointing()");
}

const uci::type::PO_TargetType& PO_ActivityCommandType::getPointing() const {
  return getPointing_();
}

uci::type::PO_TargetType& PO_ActivityCommandType::getPointing() {
  return getPointing_();
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::setPointing(const uci::type::PO_TargetType& accessor) {
  enablePointing();
  if (&accessor != pointing_Accessor.get()) {
    pointing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityCommandType::hasPointing() const noexcept {
  return static_cast<bool>(pointing_Accessor);
}

uci::type::PO_TargetType& PO_ActivityCommandType::enablePointing(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TargetType : type};
  if ((!pointing_Accessor) || (pointing_Accessor->getAccessorType() != requestedType)) {
    pointing_Accessor = PO_TargetType::create(requestedType);
    if (!pointing_Accessor) {
      throw uci::base::UCIException("Error in enablePointing(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointing_Accessor;
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::clearPointing() noexcept {
  pointing_Accessor.reset();
  return *this;
}

const uci::type::PO_ActivityCommandType::ChangeSubCapability& PO_ActivityCommandType::getChangeSubCapability() const {
  return *changeSubCapability_Accessor;
}

uci::type::PO_ActivityCommandType::ChangeSubCapability& PO_ActivityCommandType::getChangeSubCapability() {
  return *changeSubCapability_Accessor;
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::setChangeSubCapability(const uci::type::PO_ActivityCommandType::ChangeSubCapability& accessor) {
  if (&accessor != changeSubCapability_Accessor.get()) {
    changeSubCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ActivityCommandType::ChangeComponentSettings& PO_ActivityCommandType::getChangeComponentSettings() const {
  return *changeComponentSettings_Accessor;
}

uci::type::PO_ActivityCommandType::ChangeComponentSettings& PO_ActivityCommandType::getChangeComponentSettings() {
  return *changeComponentSettings_Accessor;
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::setChangeComponentSettings(const uci::type::PO_ActivityCommandType::ChangeComponentSettings& accessor) {
  if (&accessor != changeComponentSettings_Accessor.get()) {
    changeComponentSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_ActivityCommandType::getChangeCollectionConstraints_() const {
  if (changeCollectionConstraints_Accessor) {
    return *changeCollectionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeCollectionConstraints(): An attempt was made to get an optional field that was not enabled, call hasChangeCollectionConstraints() to determine if it is safe to call getChangeCollectionConstraints()");
}

const uci::type::PO_CollectionConstraintsSettingsType& PO_ActivityCommandType::getChangeCollectionConstraints() const {
  return getChangeCollectionConstraints_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_ActivityCommandType::getChangeCollectionConstraints() {
  return getChangeCollectionConstraints_();
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::setChangeCollectionConstraints(const uci::type::PO_CollectionConstraintsSettingsType& accessor) {
  enableChangeCollectionConstraints();
  if (&accessor != changeCollectionConstraints_Accessor.get()) {
    changeCollectionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityCommandType::hasChangeCollectionConstraints() const noexcept {
  return static_cast<bool>(changeCollectionConstraints_Accessor);
}

uci::type::PO_CollectionConstraintsSettingsType& PO_ActivityCommandType::enableChangeCollectionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CollectionConstraintsSettingsType : type};
  if ((!changeCollectionConstraints_Accessor) || (changeCollectionConstraints_Accessor->getAccessorType() != requestedType)) {
    changeCollectionConstraints_Accessor = PO_CollectionConstraintsSettingsType::create(requestedType);
    if (!changeCollectionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableChangeCollectionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeCollectionConstraints_Accessor;
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::clearChangeCollectionConstraints() noexcept {
  changeCollectionConstraints_Accessor.reset();
  return *this;
}

uci::type::PO_TrackDetailsType& PO_ActivityCommandType::getChangeTrack_() const {
  if (changeTrack_Accessor) {
    return *changeTrack_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeTrack(): An attempt was made to get an optional field that was not enabled, call hasChangeTrack() to determine if it is safe to call getChangeTrack()");
}

const uci::type::PO_TrackDetailsType& PO_ActivityCommandType::getChangeTrack() const {
  return getChangeTrack_();
}

uci::type::PO_TrackDetailsType& PO_ActivityCommandType::getChangeTrack() {
  return getChangeTrack_();
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::setChangeTrack(const uci::type::PO_TrackDetailsType& accessor) {
  enableChangeTrack();
  if (&accessor != changeTrack_Accessor.get()) {
    changeTrack_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityCommandType::hasChangeTrack() const noexcept {
  return static_cast<bool>(changeTrack_Accessor);
}

uci::type::PO_TrackDetailsType& PO_ActivityCommandType::enableChangeTrack(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TrackDetailsType : type};
  if ((!changeTrack_Accessor) || (changeTrack_Accessor->getAccessorType() != requestedType)) {
    changeTrack_Accessor = PO_TrackDetailsType::create(requestedType);
    if (!changeTrack_Accessor) {
      throw uci::base::UCIException("Error in enableChangeTrack(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeTrack_Accessor;
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::clearChangeTrack() noexcept {
  changeTrack_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ActivityCommandType> PO_ActivityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ActivityCommandType : type};
  return (requestedType == uci::type::accessorType::pO_ActivityCommandType) ? boost::make_unique<PO_ActivityCommandType>() : nullptr;
}

/**  */
namespace PO_ActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"PO_ActivityCommandType"};
constexpr const char* Pointing_Name{"Pointing"};
constexpr const char* ChangeSubCapability_Name{"ChangeSubCapability"};
constexpr const char* ChangeComponentSettings_Name{"ChangeComponentSettings"};
constexpr const char* ChangeCollectionConstraints_Name{"ChangeCollectionConstraints"};
constexpr const char* ChangeTrack_Name{"ChangeTrack"};

} // namespace PO_ActivityCommandType_Names

void PO_ActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ActivityCommandType_Names::Pointing_Name) {
      PO_TargetType::deserialize(valueType.second, accessor.enablePointing(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityCommandType_Names::ChangeSubCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityCommandType::ChangeSubCapability& boundedList = accessor.getChangeSubCapability();
        const uci::type::PO_ActivityCommandType::ChangeSubCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_SubCapabilitySettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityCommandType_Names::ChangeComponentSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityCommandType::ChangeComponentSettings& boundedList = accessor.getChangeComponentSettings();
        const uci::type::PO_ActivityCommandType::ChangeComponentSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityCommandType_Names::ChangeCollectionConstraints_Name) {
      PO_CollectionConstraintsSettingsType::deserialize(valueType.second, accessor.enableChangeCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityCommandType_Names::ChangeTrack_Name) {
      PO_TrackDetailsType::deserialize(valueType.second, accessor.enableChangeTrack(), nodeName, nsPrefix);
    }
  }
  ActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PO_ActivityCommandType::serialize(const uci::type::PO_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ActivityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ActivityCommandType_Names::Extern_Type_Name);
  }
  ActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPointing()) {
    PO_TargetType::serialize(accessor.getPointing(), node, PO_ActivityCommandType_Names::Pointing_Name);
  }
  {
    const uci::type::PO_ActivityCommandType::ChangeSubCapability& boundedList = accessor.getChangeSubCapability();
    for (uci::type::PO_ActivityCommandType::ChangeSubCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_SubCapabilitySettingsType::serialize(boundedList.at(i), node, PO_ActivityCommandType_Names::ChangeSubCapability_Name);
    }
  }
  {
    const uci::type::PO_ActivityCommandType::ChangeComponentSettings& boundedList = accessor.getChangeComponentSettings();
    for (uci::type::PO_ActivityCommandType::ChangeComponentSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentSettingsType::serialize(boundedList.at(i), node, PO_ActivityCommandType_Names::ChangeComponentSettings_Name);
    }
  }
  if (accessor.hasChangeCollectionConstraints()) {
    PO_CollectionConstraintsSettingsType::serialize(accessor.getChangeCollectionConstraints(), node, PO_ActivityCommandType_Names::ChangeCollectionConstraints_Name);
  }
  if (accessor.hasChangeTrack()) {
    PO_TrackDetailsType::serialize(accessor.getChangeTrack(), node, PO_ActivityCommandType_Names::ChangeTrack_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ActivityCommandType>().release());
}

uci::type::PO_ActivityCommandType& PO_ActivityCommandType::create(const uci::type::PO_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ActivityCommandType> newAccessor{boost::make_unique<asb_uci::type::PO_ActivityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ActivityCommandType::destroy(uci::type::PO_ActivityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ActivityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

