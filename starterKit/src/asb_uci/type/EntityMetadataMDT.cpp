/** @file EntityMetadataMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityMetadataMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/EntityMetadataPET.h"
#include "../../../include/asb_uci/type/MetadataID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityMetadataMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityMetadataPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MetadataID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityMetadataMDT::EntityMetadataMDT()
  : metadataID_Accessor{boost::make_unique<MetadataID_Type>()},
    entityID_Accessor{boost::make_unique<EntityID_Type>()},
    metadata_Accessor{boost::make_unique<Metadata>(1, SIZE_MAX)} {
}

EntityMetadataMDT::~EntityMetadataMDT() = default;

void EntityMetadataMDT::copy(const uci::type::EntityMetadataMDT& accessor) {
  copyImpl(accessor, false);
}

void EntityMetadataMDT::copyImpl(const uci::type::EntityMetadataMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityMetadataMDT&>(accessor);
    setMetadataID(*(accessorImpl.metadataID_Accessor));
    setEntityID(*(accessorImpl.entityID_Accessor));
    setMetadata(*(accessorImpl.metadata_Accessor));
  }
}

void EntityMetadataMDT::reset() noexcept {
  metadataID_Accessor->reset();
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  metadata_Accessor->reset();
}

const uci::type::MetadataID_Type& EntityMetadataMDT::getMetadataID() const {
  return *metadataID_Accessor;
}

uci::type::MetadataID_Type& EntityMetadataMDT::getMetadataID() {
  return *metadataID_Accessor;
}

uci::type::EntityMetadataMDT& EntityMetadataMDT::setMetadataID(const uci::type::MetadataID_Type& accessor) {
  if (&accessor != metadataID_Accessor.get()) {
    metadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityID_Type& EntityMetadataMDT::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityMetadataMDT::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityMetadataMDT& EntityMetadataMDT::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityMetadataMDT::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

const uci::type::EntityMetadataMDT::Metadata& EntityMetadataMDT::getMetadata() const {
  return *metadata_Accessor;
}

uci::type::EntityMetadataMDT::Metadata& EntityMetadataMDT::getMetadata() {
  return *metadata_Accessor;
}

uci::type::EntityMetadataMDT& EntityMetadataMDT::setMetadata(const uci::type::EntityMetadataMDT::Metadata& accessor) {
  if (&accessor != metadata_Accessor.get()) {
    metadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityMetadataMDT> EntityMetadataMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityMetadataMDT : type};
  return (requestedType == uci::type::accessorType::entityMetadataMDT) ? boost::make_unique<EntityMetadataMDT>() : nullptr;
}

/**  */
namespace EntityMetadataMDT_Names {

constexpr const char* Extern_Type_Name{"EntityMetadataMDT"};
constexpr const char* MetadataID_Name{"MetadataID"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* Metadata_Name{"Metadata"};

} // namespace EntityMetadataMDT_Names

void EntityMetadataMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityMetadataMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityMetadataMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityMetadataMDT_Names::MetadataID_Name) {
      MetadataID_Type::deserialize(valueType.second, accessor.getMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMetadataMDT_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMetadataMDT_Names::Metadata_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMetadataMDT::Metadata& boundedList = accessor.getMetadata();
        const uci::type::EntityMetadataMDT::Metadata::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string EntityMetadataMDT::serialize(const uci::type::EntityMetadataMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityMetadataMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityMetadataMDT_Names::Extern_Type_Name);
  }
  MetadataID_Type::serialize(accessor.getMetadataID(), node, EntityMetadataMDT_Names::MetadataID_Name);
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityMetadataMDT_Names::EntityID_Name);
  {
    const uci::type::EntityMetadataMDT::Metadata& boundedList = accessor.getMetadata();
    for (uci::type::EntityMetadataMDT::Metadata::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityMetadataPET::serialize(boundedList.at(i), node, EntityMetadataMDT_Names::Metadata_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityMetadataMDT& EntityMetadataMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityMetadataMDT>().release());
}

uci::type::EntityMetadataMDT& EntityMetadataMDT::create(const uci::type::EntityMetadataMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityMetadataMDT> newAccessor{boost::make_unique<asb_uci::type::EntityMetadataMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityMetadataMDT::destroy(uci::type::EntityMetadataMDT& accessor) {
  delete dynamic_cast<asb_uci::type::EntityMetadataMDT*>(&accessor);
}

} // namespace type

} // namespace uci

