/** @file ProximityOrbitChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ProximityOrbitChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AngleHalfPairType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/R_BarApproachEnum.h"
#include "../../../include/asb_uci/type/V_BarApproachEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleHalfPairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProximityOrbitChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/R_BarApproachEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/V_BarApproachEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProximityOrbitChoiceType::ProximityOrbitChoiceType() = default;

ProximityOrbitChoiceType::~ProximityOrbitChoiceType() = default;

void ProximityOrbitChoiceType::copy(const uci::type::ProximityOrbitChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ProximityOrbitChoiceType::copyImpl(const uci::type::ProximityOrbitChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProximityOrbitChoiceType&>(accessor);
    if (accessorImpl.naturalMotion_Accessor) {
      setNaturalMotion(*(accessorImpl.naturalMotion_Accessor));
    } else {
      naturalMotion_Accessor.reset();
    }
    if (accessorImpl.forcedMotion_Accessor) {
      setForcedMotion(*(accessorImpl.forcedMotion_Accessor));
    } else {
      forcedMotion_Accessor.reset();
    }
    if (accessorImpl.r_BarPerch_Accessor) {
      setR_BarPerch(*(accessorImpl.r_BarPerch_Accessor));
    } else {
      r_BarPerch_Accessor.reset();
    }
    if (accessorImpl.v_BarPerch_Accessor) {
      setV_BarPerch(*(accessorImpl.v_BarPerch_Accessor));
    } else {
      v_BarPerch_Accessor.reset();
    }
    if (accessorImpl.deltaOrbitalPlaneTolerance_Accessor) {
      setDeltaOrbitalPlaneTolerance(*(accessorImpl.deltaOrbitalPlaneTolerance_Accessor));
    } else {
      deltaOrbitalPlaneTolerance_Accessor.reset();
    }
  }
}

void ProximityOrbitChoiceType::reset() noexcept {
  naturalMotion_Accessor.reset();
  forcedMotion_Accessor.reset();
  r_BarPerch_Accessor.reset();
  v_BarPerch_Accessor.reset();
  deltaOrbitalPlaneTolerance_Accessor.reset();
}

uci::type::ProximityOrbitChoiceType::ProximityOrbitChoiceTypeChoice ProximityOrbitChoiceType::getProximityOrbitChoiceTypeChoiceOrdinal() const noexcept {
  if (naturalMotion_Accessor) {
    return PROXIMITYORBITCHOICETYPE_CHOICE_NATURALMOTION;
  }
  if (forcedMotion_Accessor) {
    return PROXIMITYORBITCHOICETYPE_CHOICE_FORCEDMOTION;
  }
  if (r_BarPerch_Accessor) {
    return PROXIMITYORBITCHOICETYPE_CHOICE_R_BARPERCH;
  }
  if (v_BarPerch_Accessor) {
    return PROXIMITYORBITCHOICETYPE_CHOICE_V_BARPERCH;
  }
  if (deltaOrbitalPlaneTolerance_Accessor) {
    return PROXIMITYORBITCHOICETYPE_CHOICE_DELTAORBITALPLANETOLERANCE;
  }
  return PROXIMITYORBITCHOICETYPE_CHOICE_NONE;
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setProximityOrbitChoiceTypeChoiceOrdinal(uci::type::ProximityOrbitChoiceType::ProximityOrbitChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PROXIMITYORBITCHOICETYPE_CHOICE_NATURALMOTION:
      chooseNaturalMotion("setProximityOrbitChoiceTypeChoiceOrdinal", type);
      break;
    case PROXIMITYORBITCHOICETYPE_CHOICE_FORCEDMOTION:
      chooseForcedMotion("setProximityOrbitChoiceTypeChoiceOrdinal", type);
      break;
    case PROXIMITYORBITCHOICETYPE_CHOICE_R_BARPERCH:
      chooseR_BarPerch("setProximityOrbitChoiceTypeChoiceOrdinal", type);
      break;
    case PROXIMITYORBITCHOICETYPE_CHOICE_V_BARPERCH:
      chooseV_BarPerch("setProximityOrbitChoiceTypeChoiceOrdinal", type);
      break;
    case PROXIMITYORBITCHOICETYPE_CHOICE_DELTAORBITALPLANETOLERANCE:
      chooseDeltaOrbitalPlaneTolerance("setProximityOrbitChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setProximityOrbitChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmptyType& ProximityOrbitChoiceType::getNaturalMotion_() const {
  if (naturalMotion_Accessor) {
    return *naturalMotion_Accessor;
  }
  throw uci::base::UCIException("Error in getNaturalMotion(): An attempt was made to get an optional field that was not enabled, call hasNaturalMotion() to determine if it is safe to call getNaturalMotion()");
}

const uci::type::EmptyType& ProximityOrbitChoiceType::getNaturalMotion() const {
  return getNaturalMotion_();
}

uci::type::EmptyType& ProximityOrbitChoiceType::getNaturalMotion() {
  return getNaturalMotion_();
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setNaturalMotion(const uci::type::EmptyType& value) {
  return setNaturalMotion(value.c_str());
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setNaturalMotion(const std::string& value) {
  return setNaturalMotion(value.c_str());
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setNaturalMotion(const char * value) {
  chooseNaturalMotion().setStringValue(value);
  return *this;
}

bool ProximityOrbitChoiceType::isNaturalMotion() const noexcept {
  return static_cast<bool>(naturalMotion_Accessor);
}

uci::type::EmptyType& ProximityOrbitChoiceType::chooseNaturalMotion(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  forcedMotion_Accessor.reset();
  r_BarPerch_Accessor.reset();
  v_BarPerch_Accessor.reset();
  deltaOrbitalPlaneTolerance_Accessor.reset();
  if (!naturalMotion_Accessor) {
    naturalMotion_Accessor = EmptyType::create(type);
  }
  return *naturalMotion_Accessor;
}

uci::type::EmptyType& ProximityOrbitChoiceType::chooseNaturalMotion(uci::base::accessorType::AccessorType type) {
  return chooseNaturalMotion("chooseNaturalMotion", type);
}

uci::type::EmptyType& ProximityOrbitChoiceType::getForcedMotion_() const {
  if (forcedMotion_Accessor) {
    return *forcedMotion_Accessor;
  }
  throw uci::base::UCIException("Error in getForcedMotion(): An attempt was made to get an optional field that was not enabled, call hasForcedMotion() to determine if it is safe to call getForcedMotion()");
}

const uci::type::EmptyType& ProximityOrbitChoiceType::getForcedMotion() const {
  return getForcedMotion_();
}

uci::type::EmptyType& ProximityOrbitChoiceType::getForcedMotion() {
  return getForcedMotion_();
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setForcedMotion(const uci::type::EmptyType& value) {
  return setForcedMotion(value.c_str());
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setForcedMotion(const std::string& value) {
  return setForcedMotion(value.c_str());
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setForcedMotion(const char * value) {
  chooseForcedMotion().setStringValue(value);
  return *this;
}

bool ProximityOrbitChoiceType::isForcedMotion() const noexcept {
  return static_cast<bool>(forcedMotion_Accessor);
}

uci::type::EmptyType& ProximityOrbitChoiceType::chooseForcedMotion(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  naturalMotion_Accessor.reset();
  r_BarPerch_Accessor.reset();
  v_BarPerch_Accessor.reset();
  deltaOrbitalPlaneTolerance_Accessor.reset();
  if (!forcedMotion_Accessor) {
    forcedMotion_Accessor = EmptyType::create(type);
  }
  return *forcedMotion_Accessor;
}

uci::type::EmptyType& ProximityOrbitChoiceType::chooseForcedMotion(uci::base::accessorType::AccessorType type) {
  return chooseForcedMotion("chooseForcedMotion", type);
}

uci::type::R_BarApproachEnum& ProximityOrbitChoiceType::getR_BarPerch_() const {
  if (r_BarPerch_Accessor) {
    return *r_BarPerch_Accessor;
  }
  throw uci::base::UCIException("Error in getR_BarPerch(): Unable to get R_BarPerch, field not selected");
}

const uci::type::R_BarApproachEnum& ProximityOrbitChoiceType::getR_BarPerch() const {
  return getR_BarPerch_();
}

uci::type::R_BarApproachEnum& ProximityOrbitChoiceType::getR_BarPerch() {
  return getR_BarPerch_();
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setR_BarPerch(const uci::type::R_BarApproachEnum& accessor) {
  chooseR_BarPerch();
  if (&accessor != r_BarPerch_Accessor.get()) {
    r_BarPerch_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setR_BarPerch(uci::type::R_BarApproachEnum::EnumerationItem value) {
  chooseR_BarPerch().setValue(value);
  return *this;
}

bool ProximityOrbitChoiceType::isR_BarPerch() const noexcept {
  return static_cast<bool>(r_BarPerch_Accessor);
}

uci::type::R_BarApproachEnum& ProximityOrbitChoiceType::chooseR_BarPerch(const std::string& method, uci::base::accessorType::AccessorType type) {
  naturalMotion_Accessor.reset();
  forcedMotion_Accessor.reset();
  v_BarPerch_Accessor.reset();
  deltaOrbitalPlaneTolerance_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::r_BarApproachEnum : type};
  if ((!r_BarPerch_Accessor) || (r_BarPerch_Accessor->getAccessorType() != requestedType)) {
    r_BarPerch_Accessor = R_BarApproachEnum::create(type);
    if (!r_BarPerch_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *r_BarPerch_Accessor;
}

uci::type::R_BarApproachEnum& ProximityOrbitChoiceType::chooseR_BarPerch(uci::base::accessorType::AccessorType type) {
  return chooseR_BarPerch("chooseR_BarPerch", type);
}

uci::type::V_BarApproachEnum& ProximityOrbitChoiceType::getV_BarPerch_() const {
  if (v_BarPerch_Accessor) {
    return *v_BarPerch_Accessor;
  }
  throw uci::base::UCIException("Error in getV_BarPerch(): Unable to get V_BarPerch, field not selected");
}

const uci::type::V_BarApproachEnum& ProximityOrbitChoiceType::getV_BarPerch() const {
  return getV_BarPerch_();
}

uci::type::V_BarApproachEnum& ProximityOrbitChoiceType::getV_BarPerch() {
  return getV_BarPerch_();
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setV_BarPerch(const uci::type::V_BarApproachEnum& accessor) {
  chooseV_BarPerch();
  if (&accessor != v_BarPerch_Accessor.get()) {
    v_BarPerch_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setV_BarPerch(uci::type::V_BarApproachEnum::EnumerationItem value) {
  chooseV_BarPerch().setValue(value);
  return *this;
}

bool ProximityOrbitChoiceType::isV_BarPerch() const noexcept {
  return static_cast<bool>(v_BarPerch_Accessor);
}

uci::type::V_BarApproachEnum& ProximityOrbitChoiceType::chooseV_BarPerch(const std::string& method, uci::base::accessorType::AccessorType type) {
  naturalMotion_Accessor.reset();
  forcedMotion_Accessor.reset();
  r_BarPerch_Accessor.reset();
  deltaOrbitalPlaneTolerance_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::v_BarApproachEnum : type};
  if ((!v_BarPerch_Accessor) || (v_BarPerch_Accessor->getAccessorType() != requestedType)) {
    v_BarPerch_Accessor = V_BarApproachEnum::create(type);
    if (!v_BarPerch_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *v_BarPerch_Accessor;
}

uci::type::V_BarApproachEnum& ProximityOrbitChoiceType::chooseV_BarPerch(uci::base::accessorType::AccessorType type) {
  return chooseV_BarPerch("chooseV_BarPerch", type);
}

uci::type::AngleHalfPairType& ProximityOrbitChoiceType::getDeltaOrbitalPlaneTolerance_() const {
  if (deltaOrbitalPlaneTolerance_Accessor) {
    return *deltaOrbitalPlaneTolerance_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaOrbitalPlaneTolerance(): Unable to get DeltaOrbitalPlaneTolerance, field not selected");
}

const uci::type::AngleHalfPairType& ProximityOrbitChoiceType::getDeltaOrbitalPlaneTolerance() const {
  return getDeltaOrbitalPlaneTolerance_();
}

uci::type::AngleHalfPairType& ProximityOrbitChoiceType::getDeltaOrbitalPlaneTolerance() {
  return getDeltaOrbitalPlaneTolerance_();
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::setDeltaOrbitalPlaneTolerance(const uci::type::AngleHalfPairType& accessor) {
  chooseDeltaOrbitalPlaneTolerance();
  if (&accessor != deltaOrbitalPlaneTolerance_Accessor.get()) {
    deltaOrbitalPlaneTolerance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProximityOrbitChoiceType::isDeltaOrbitalPlaneTolerance() const noexcept {
  return static_cast<bool>(deltaOrbitalPlaneTolerance_Accessor);
}

uci::type::AngleHalfPairType& ProximityOrbitChoiceType::chooseDeltaOrbitalPlaneTolerance(const std::string& method, uci::base::accessorType::AccessorType type) {
  naturalMotion_Accessor.reset();
  forcedMotion_Accessor.reset();
  r_BarPerch_Accessor.reset();
  v_BarPerch_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::angleHalfPairType : type};
  if ((!deltaOrbitalPlaneTolerance_Accessor) || (deltaOrbitalPlaneTolerance_Accessor->getAccessorType() != requestedType)) {
    deltaOrbitalPlaneTolerance_Accessor = AngleHalfPairType::create(type);
    if (!deltaOrbitalPlaneTolerance_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *deltaOrbitalPlaneTolerance_Accessor;
}

uci::type::AngleHalfPairType& ProximityOrbitChoiceType::chooseDeltaOrbitalPlaneTolerance(uci::base::accessorType::AccessorType type) {
  return chooseDeltaOrbitalPlaneTolerance("chooseDeltaOrbitalPlaneTolerance", type);
}

std::unique_ptr<ProximityOrbitChoiceType> ProximityOrbitChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::proximityOrbitChoiceType : type};
  return (requestedType == uci::type::accessorType::proximityOrbitChoiceType) ? boost::make_unique<ProximityOrbitChoiceType>() : nullptr;
}

/**  */
namespace ProximityOrbitChoiceType_Names {

constexpr const char* Extern_Type_Name{"ProximityOrbitChoiceType"};
constexpr const char* NaturalMotion_Name{"NaturalMotion"};
constexpr const char* ForcedMotion_Name{"ForcedMotion"};
constexpr const char* R_BarPerch_Name{"R_BarPerch"};
constexpr const char* V_BarPerch_Name{"V_BarPerch"};
constexpr const char* DeltaOrbitalPlaneTolerance_Name{"DeltaOrbitalPlaneTolerance"};

} // namespace ProximityOrbitChoiceType_Names

void ProximityOrbitChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProximityOrbitChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProximityOrbitChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProximityOrbitChoiceType_Names::NaturalMotion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseNaturalMotion().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ProximityOrbitChoiceType_Names::ForcedMotion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseForcedMotion().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ProximityOrbitChoiceType_Names::R_BarPerch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseR_BarPerch().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProximityOrbitChoiceType_Names::V_BarPerch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseV_BarPerch().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProximityOrbitChoiceType_Names::DeltaOrbitalPlaneTolerance_Name) {
      AngleHalfPairType::deserialize(valueType.second, accessor.chooseDeltaOrbitalPlaneTolerance(), nodeName, nsPrefix);
    }
  }
}

std::string ProximityOrbitChoiceType::serialize(const uci::type::ProximityOrbitChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProximityOrbitChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProximityOrbitChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isNaturalMotion()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getNaturalMotion(), node, ProximityOrbitChoiceType_Names::NaturalMotion_Name);
  } else if (accessor.isForcedMotion()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getForcedMotion(), node, ProximityOrbitChoiceType_Names::ForcedMotion_Name);
  } else if (accessor.isR_BarPerch()) {
    R_BarApproachEnum::serialize(accessor.getR_BarPerch(), node, ProximityOrbitChoiceType_Names::R_BarPerch_Name, false);
  } else if (accessor.isV_BarPerch()) {
    V_BarApproachEnum::serialize(accessor.getV_BarPerch(), node, ProximityOrbitChoiceType_Names::V_BarPerch_Name, false);
  } else if (accessor.isDeltaOrbitalPlaneTolerance()) {
    AngleHalfPairType::serialize(accessor.getDeltaOrbitalPlaneTolerance(), node, ProximityOrbitChoiceType_Names::DeltaOrbitalPlaneTolerance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProximityOrbitChoiceType>().release());
}

uci::type::ProximityOrbitChoiceType& ProximityOrbitChoiceType::create(const uci::type::ProximityOrbitChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProximityOrbitChoiceType> newAccessor{boost::make_unique<asb_uci::type::ProximityOrbitChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProximityOrbitChoiceType::destroy(uci::type::ProximityOrbitChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ProximityOrbitChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

