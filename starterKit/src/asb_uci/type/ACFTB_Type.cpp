/** @file ACFTB_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ACFTB_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AlphanumericSpaceString11OnlyType.h"
#include "asb_uci/type/AlphanumericSpaceString7OnlyType.h"
#include "asb_uci/type/NumericSpaceString13OnlyType.h"
#include "asb_uci/type/NumericSpaceString2OnlyType.h"
#include "asb_uci/type/NumericSpaceString6OnlyType.h"
#include "asb_uci/type/NumericSpaceString7OnlyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ACFTB_Type.h"
#include "uci/type/AlphanumericSpaceString11OnlyType.h"
#include "uci/type/AlphanumericSpaceString7OnlyType.h"
#include "uci/type/NumericSpaceString13OnlyType.h"
#include "uci/type/NumericSpaceString2OnlyType.h"
#include "uci/type/NumericSpaceString6OnlyType.h"
#include "uci/type/NumericSpaceString7OnlyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ACFTB_Type::ACFTB_Type() = default;

ACFTB_Type::~ACFTB_Type() = default;

void ACFTB_Type::copy(const uci::type::ACFTB_Type& accessor) {
  copyImpl(accessor, false);
}

void ACFTB_Type::copyImpl(const uci::type::ACFTB_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ACFTB_Type&>(accessor);
    if (accessorImpl.aC_MSN_Identifier_Accessor) {
      setAC_MSN_Identifier(*(accessorImpl.aC_MSN_Identifier_Accessor));
    } else {
      aC_MSN_Identifier_Accessor.reset();
    }
    if (accessorImpl.aC_TAIL_NO_Accessor) {
      setAC_TAIL_NO(*(accessorImpl.aC_TAIL_NO_Accessor));
    } else {
      aC_TAIL_NO_Accessor.reset();
    }
    if (accessorImpl.aC_TO_Accessor) {
      setAC_TO(*(accessorImpl.aC_TO_Accessor));
    } else {
      aC_TO_Accessor.reset();
    }
    if (accessorImpl.sENSOR_Identifier_Accessor) {
      setSENSOR_Identifier(*(accessorImpl.sENSOR_Identifier_Accessor));
    } else {
      sENSOR_Identifier_Accessor.reset();
    }
    if (accessorImpl.sCENE_SOURCE_Accessor) {
      setSCENE_SOURCE(*(accessorImpl.sCENE_SOURCE_Accessor));
    } else {
      sCENE_SOURCE_Accessor.reset();
    }
    if (accessorImpl.sCNUM_Accessor) {
      setSCNUM(*(accessorImpl.sCNUM_Accessor));
    } else {
      sCNUM_Accessor.reset();
    }
    if (accessorImpl.iMHOSTNO_Accessor) {
      setIMHOSTNO(*(accessorImpl.iMHOSTNO_Accessor));
    } else {
      iMHOSTNO_Accessor.reset();
    }
    if (accessorImpl.iMREQ_Identifier_Accessor) {
      setIMREQ_Identifier(*(accessorImpl.iMREQ_Identifier_Accessor));
    } else {
      iMREQ_Identifier_Accessor.reset();
    }
  }
}

void ACFTB_Type::reset() noexcept {
  aC_MSN_Identifier_Accessor.reset();
  aC_TAIL_NO_Accessor.reset();
  aC_TO_Accessor.reset();
  sENSOR_Identifier_Accessor.reset();
  sCENE_SOURCE_Accessor.reset();
  sCNUM_Accessor.reset();
  iMHOSTNO_Accessor.reset();
  iMREQ_Identifier_Accessor.reset();
}

uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::getAC_MSN_Identifier_() const {
  if (aC_MSN_Identifier_Accessor) {
    return *aC_MSN_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getAC_MSN_Identifier(): An attempt was made to get an optional field that was not enabled, call hasAC_MSN_Identifier() to determine if it is safe to call getAC_MSN_Identifier()");
}

const uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::getAC_MSN_Identifier() const {
  return getAC_MSN_Identifier_();
}

uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::getAC_MSN_Identifier() {
  return getAC_MSN_Identifier_();
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_MSN_Identifier(const uci::type::AlphanumericSpaceString11OnlyType& value) {
  return setAC_MSN_Identifier(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_MSN_Identifier(const std::string& value) {
  return setAC_MSN_Identifier(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_MSN_Identifier(const char* value) {
  enableAC_MSN_Identifier().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasAC_MSN_Identifier() const noexcept {
  return static_cast<bool>(aC_MSN_Identifier_Accessor);
}

uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::enableAC_MSN_Identifier(uci::base::accessorType::AccessorType type) {
  if (!aC_MSN_Identifier_Accessor) {
    aC_MSN_Identifier_Accessor = AlphanumericSpaceString11OnlyType::create(type);
  }
  return *aC_MSN_Identifier_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearAC_MSN_Identifier() noexcept {
  aC_MSN_Identifier_Accessor.reset();
  return *this;
}

uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::getAC_TAIL_NO_() const {
  if (aC_TAIL_NO_Accessor) {
    return *aC_TAIL_NO_Accessor;
  }
  throw uci::base::UCIException("Error in getAC_TAIL_NO(): An attempt was made to get an optional field that was not enabled, call hasAC_TAIL_NO() to determine if it is safe to call getAC_TAIL_NO()");
}

const uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::getAC_TAIL_NO() const {
  return getAC_TAIL_NO_();
}

uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::getAC_TAIL_NO() {
  return getAC_TAIL_NO_();
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_TAIL_NO(const uci::type::AlphanumericSpaceString11OnlyType& value) {
  return setAC_TAIL_NO(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_TAIL_NO(const std::string& value) {
  return setAC_TAIL_NO(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_TAIL_NO(const char* value) {
  enableAC_TAIL_NO().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasAC_TAIL_NO() const noexcept {
  return static_cast<bool>(aC_TAIL_NO_Accessor);
}

uci::type::AlphanumericSpaceString11OnlyType& ACFTB_Type::enableAC_TAIL_NO(uci::base::accessorType::AccessorType type) {
  if (!aC_TAIL_NO_Accessor) {
    aC_TAIL_NO_Accessor = AlphanumericSpaceString11OnlyType::create(type);
  }
  return *aC_TAIL_NO_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearAC_TAIL_NO() noexcept {
  aC_TAIL_NO_Accessor.reset();
  return *this;
}

uci::type::NumericSpaceString13OnlyType& ACFTB_Type::getAC_TO_() const {
  if (aC_TO_Accessor) {
    return *aC_TO_Accessor;
  }
  throw uci::base::UCIException("Error in getAC_TO(): An attempt was made to get an optional field that was not enabled, call hasAC_TO() to determine if it is safe to call getAC_TO()");
}

const uci::type::NumericSpaceString13OnlyType& ACFTB_Type::getAC_TO() const {
  return getAC_TO_();
}

uci::type::NumericSpaceString13OnlyType& ACFTB_Type::getAC_TO() {
  return getAC_TO_();
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_TO(const uci::type::NumericSpaceString13OnlyType& value) {
  return setAC_TO(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_TO(const std::string& value) {
  return setAC_TO(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setAC_TO(const char* value) {
  enableAC_TO().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasAC_TO() const noexcept {
  return static_cast<bool>(aC_TO_Accessor);
}

uci::type::NumericSpaceString13OnlyType& ACFTB_Type::enableAC_TO(uci::base::accessorType::AccessorType type) {
  if (!aC_TO_Accessor) {
    aC_TO_Accessor = NumericSpaceString13OnlyType::create(type);
  }
  return *aC_TO_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearAC_TO() noexcept {
  aC_TO_Accessor.reset();
  return *this;
}

uci::type::AlphanumericSpaceString7OnlyType& ACFTB_Type::getSENSOR_Identifier_() const {
  if (sENSOR_Identifier_Accessor) {
    return *sENSOR_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getSENSOR_Identifier(): An attempt was made to get an optional field that was not enabled, call hasSENSOR_Identifier() to determine if it is safe to call getSENSOR_Identifier()");
}

const uci::type::AlphanumericSpaceString7OnlyType& ACFTB_Type::getSENSOR_Identifier() const {
  return getSENSOR_Identifier_();
}

uci::type::AlphanumericSpaceString7OnlyType& ACFTB_Type::getSENSOR_Identifier() {
  return getSENSOR_Identifier_();
}

uci::type::ACFTB_Type& ACFTB_Type::setSENSOR_Identifier(const uci::type::AlphanumericSpaceString7OnlyType& value) {
  return setSENSOR_Identifier(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setSENSOR_Identifier(const std::string& value) {
  return setSENSOR_Identifier(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setSENSOR_Identifier(const char* value) {
  enableSENSOR_Identifier().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasSENSOR_Identifier() const noexcept {
  return static_cast<bool>(sENSOR_Identifier_Accessor);
}

uci::type::AlphanumericSpaceString7OnlyType& ACFTB_Type::enableSENSOR_Identifier(uci::base::accessorType::AccessorType type) {
  if (!sENSOR_Identifier_Accessor) {
    sENSOR_Identifier_Accessor = AlphanumericSpaceString7OnlyType::create(type);
  }
  return *sENSOR_Identifier_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearSENSOR_Identifier() noexcept {
  sENSOR_Identifier_Accessor.reset();
  return *this;
}

uci::type::NumericSpaceString2OnlyType& ACFTB_Type::getSCENE_SOURCE_() const {
  if (sCENE_SOURCE_Accessor) {
    return *sCENE_SOURCE_Accessor;
  }
  throw uci::base::UCIException("Error in getSCENE_SOURCE(): An attempt was made to get an optional field that was not enabled, call hasSCENE_SOURCE() to determine if it is safe to call getSCENE_SOURCE()");
}

const uci::type::NumericSpaceString2OnlyType& ACFTB_Type::getSCENE_SOURCE() const {
  return getSCENE_SOURCE_();
}

uci::type::NumericSpaceString2OnlyType& ACFTB_Type::getSCENE_SOURCE() {
  return getSCENE_SOURCE_();
}

uci::type::ACFTB_Type& ACFTB_Type::setSCENE_SOURCE(const uci::type::NumericSpaceString2OnlyType& value) {
  return setSCENE_SOURCE(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setSCENE_SOURCE(const std::string& value) {
  return setSCENE_SOURCE(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setSCENE_SOURCE(const char* value) {
  enableSCENE_SOURCE().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasSCENE_SOURCE() const noexcept {
  return static_cast<bool>(sCENE_SOURCE_Accessor);
}

uci::type::NumericSpaceString2OnlyType& ACFTB_Type::enableSCENE_SOURCE(uci::base::accessorType::AccessorType type) {
  if (!sCENE_SOURCE_Accessor) {
    sCENE_SOURCE_Accessor = NumericSpaceString2OnlyType::create(type);
  }
  return *sCENE_SOURCE_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearSCENE_SOURCE() noexcept {
  sCENE_SOURCE_Accessor.reset();
  return *this;
}

uci::type::NumericSpaceString7OnlyType& ACFTB_Type::getSCNUM_() const {
  if (sCNUM_Accessor) {
    return *sCNUM_Accessor;
  }
  throw uci::base::UCIException("Error in getSCNUM(): An attempt was made to get an optional field that was not enabled, call hasSCNUM() to determine if it is safe to call getSCNUM()");
}

const uci::type::NumericSpaceString7OnlyType& ACFTB_Type::getSCNUM() const {
  return getSCNUM_();
}

uci::type::NumericSpaceString7OnlyType& ACFTB_Type::getSCNUM() {
  return getSCNUM_();
}

uci::type::ACFTB_Type& ACFTB_Type::setSCNUM(const uci::type::NumericSpaceString7OnlyType& value) {
  return setSCNUM(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setSCNUM(const std::string& value) {
  return setSCNUM(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setSCNUM(const char* value) {
  enableSCNUM().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasSCNUM() const noexcept {
  return static_cast<bool>(sCNUM_Accessor);
}

uci::type::NumericSpaceString7OnlyType& ACFTB_Type::enableSCNUM(uci::base::accessorType::AccessorType type) {
  if (!sCNUM_Accessor) {
    sCNUM_Accessor = NumericSpaceString7OnlyType::create(type);
  }
  return *sCNUM_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearSCNUM() noexcept {
  sCNUM_Accessor.reset();
  return *this;
}

uci::type::NumericSpaceString7OnlyType& ACFTB_Type::getIMHOSTNO_() const {
  if (iMHOSTNO_Accessor) {
    return *iMHOSTNO_Accessor;
  }
  throw uci::base::UCIException("Error in getIMHOSTNO(): An attempt was made to get an optional field that was not enabled, call hasIMHOSTNO() to determine if it is safe to call getIMHOSTNO()");
}

const uci::type::NumericSpaceString7OnlyType& ACFTB_Type::getIMHOSTNO() const {
  return getIMHOSTNO_();
}

uci::type::NumericSpaceString7OnlyType& ACFTB_Type::getIMHOSTNO() {
  return getIMHOSTNO_();
}

uci::type::ACFTB_Type& ACFTB_Type::setIMHOSTNO(const uci::type::NumericSpaceString7OnlyType& value) {
  return setIMHOSTNO(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setIMHOSTNO(const std::string& value) {
  return setIMHOSTNO(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setIMHOSTNO(const char* value) {
  enableIMHOSTNO().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasIMHOSTNO() const noexcept {
  return static_cast<bool>(iMHOSTNO_Accessor);
}

uci::type::NumericSpaceString7OnlyType& ACFTB_Type::enableIMHOSTNO(uci::base::accessorType::AccessorType type) {
  if (!iMHOSTNO_Accessor) {
    iMHOSTNO_Accessor = NumericSpaceString7OnlyType::create(type);
  }
  return *iMHOSTNO_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearIMHOSTNO() noexcept {
  iMHOSTNO_Accessor.reset();
  return *this;
}

uci::type::NumericSpaceString6OnlyType& ACFTB_Type::getIMREQ_Identifier_() const {
  if (iMREQ_Identifier_Accessor) {
    return *iMREQ_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getIMREQ_Identifier(): An attempt was made to get an optional field that was not enabled, call hasIMREQ_Identifier() to determine if it is safe to call getIMREQ_Identifier()");
}

const uci::type::NumericSpaceString6OnlyType& ACFTB_Type::getIMREQ_Identifier() const {
  return getIMREQ_Identifier_();
}

uci::type::NumericSpaceString6OnlyType& ACFTB_Type::getIMREQ_Identifier() {
  return getIMREQ_Identifier_();
}

uci::type::ACFTB_Type& ACFTB_Type::setIMREQ_Identifier(const uci::type::NumericSpaceString6OnlyType& value) {
  return setIMREQ_Identifier(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setIMREQ_Identifier(const std::string& value) {
  return setIMREQ_Identifier(value.c_str());
}

uci::type::ACFTB_Type& ACFTB_Type::setIMREQ_Identifier(const char* value) {
  enableIMREQ_Identifier().setStringValue(value);
  return *this;
}

bool ACFTB_Type::hasIMREQ_Identifier() const noexcept {
  return static_cast<bool>(iMREQ_Identifier_Accessor);
}

uci::type::NumericSpaceString6OnlyType& ACFTB_Type::enableIMREQ_Identifier(uci::base::accessorType::AccessorType type) {
  if (!iMREQ_Identifier_Accessor) {
    iMREQ_Identifier_Accessor = NumericSpaceString6OnlyType::create(type);
  }
  return *iMREQ_Identifier_Accessor;
}

uci::type::ACFTB_Type& ACFTB_Type::clearIMREQ_Identifier() noexcept {
  iMREQ_Identifier_Accessor.reset();
  return *this;
}

std::unique_ptr<ACFTB_Type> ACFTB_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aCFTB_Type : type};
  return (requestedType == uci::type::accessorType::aCFTB_Type) ? boost::make_unique<ACFTB_Type>() : nullptr;
}

/**  */
namespace ACFTB_Type_Names {

constexpr const char* Extern_Type_Name{"ACFTB_Type"};
constexpr const char* AC_MSN_Identifier_Name{"AC_MSN_Identifier"};
constexpr const char* AC_TAIL_NO_Name{"AC_TAIL_NO"};
constexpr const char* AC_TO_Name{"AC_TO"};
constexpr const char* SENSOR_Identifier_Name{"SENSOR_Identifier"};
constexpr const char* SCENE_SOURCE_Name{"SCENE_SOURCE"};
constexpr const char* SCNUM_Name{"SCNUM"};
constexpr const char* IMHOSTNO_Name{"IMHOSTNO"};
constexpr const char* IMREQ_Identifier_Name{"IMREQ_Identifier"};

} // namespace ACFTB_Type_Names

void ACFTB_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::ACFTB_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ACFTB_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::AC_MSN_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAC_MSN_Identifier(*value);
      }
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::AC_TAIL_NO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAC_TAIL_NO(*value);
      }
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::AC_TO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAC_TO(*value);
      }
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::SENSOR_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSENSOR_Identifier(*value);
      }
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::SCENE_SOURCE_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSCENE_SOURCE(*value);
      }
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::SCNUM_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSCNUM(*value);
      }
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::IMHOSTNO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIMHOSTNO(*value);
      }
    } else if (valueType.first == nsPrefix + ACFTB_Type_Names::IMREQ_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIMREQ_Identifier(*value);
      }
    }
  }
}

std::string ACFTB_Type::serialize(const uci::type::ACFTB_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ACFTB_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ACFTB_Type_Names::Extern_Type_Name);
  }
  if (accessor.hasAC_MSN_Identifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAC_MSN_Identifier(), node, ACFTB_Type_Names::AC_MSN_Identifier_Name);
  }
  if (accessor.hasAC_TAIL_NO()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAC_TAIL_NO(), node, ACFTB_Type_Names::AC_TAIL_NO_Name);
  }
  if (accessor.hasAC_TO()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAC_TO(), node, ACFTB_Type_Names::AC_TO_Name);
  }
  if (accessor.hasSENSOR_Identifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSENSOR_Identifier(), node, ACFTB_Type_Names::SENSOR_Identifier_Name);
  }
  if (accessor.hasSCENE_SOURCE()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSCENE_SOURCE(), node, ACFTB_Type_Names::SCENE_SOURCE_Name);
  }
  if (accessor.hasSCNUM()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSCNUM(), node, ACFTB_Type_Names::SCNUM_Name);
  }
  if (accessor.hasIMHOSTNO()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getIMHOSTNO(), node, ACFTB_Type_Names::IMHOSTNO_Name);
  }
  if (accessor.hasIMREQ_Identifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getIMREQ_Identifier(), node, ACFTB_Type_Names::IMREQ_Identifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ACFTB_Type& ACFTB_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ACFTB_Type>().release());
}

uci::type::ACFTB_Type& ACFTB_Type::create(const uci::type::ACFTB_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ACFTB_Type> newAccessor{boost::make_unique<asb_uci::type::ACFTB_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ACFTB_Type::destroy(uci::type::ACFTB_Type& accessor) {
  delete dynamic_cast<asb_uci::type::ACFTB_Type*>(&accessor);
}

} // namespace type

} // namespace uci

