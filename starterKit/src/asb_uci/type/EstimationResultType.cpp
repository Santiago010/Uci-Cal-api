/** @file EstimationResultType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EstimationResultType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityPlanExecutionStatusMDT.h"
#include "asb_uci/type/EffectPlanExecutionStatusMDT.h"
#include "asb_uci/type/MissionPlanExecutionStatusMDT.h"
#include "asb_uci/type/NavigationReportMDT.h"
#include "asb_uci/type/OrbitActivityPlanExecutionStatusMDT.h"
#include "asb_uci/type/OrbitPlanExecutionStatusMDT.h"
#include "asb_uci/type/PackageStatusMDT.h"
#include "asb_uci/type/PositionReportMDT.h"
#include "asb_uci/type/RouteActivityPlanExecutionStatusMDT.h"
#include "asb_uci/type/RoutePlanExecutionStatusMDT.h"
#include "asb_uci/type/SystemOrbitReportMDT.h"
#include "asb_uci/type/SystemOrbitalPositionReportMDT.h"
#include "asb_uci/type/SystemStatusMDT.h"
#include "asb_uci/type/TaskPlanExecutionStatusMDT.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityPlanExecutionStatusMDT.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EffectPlanExecutionStatusMDT.h"
#include "uci/type/EstimationResultType.h"
#include "uci/type/MissionPlanExecutionStatusMDT.h"
#include "uci/type/NavigationReportMDT.h"
#include "uci/type/OrbitActivityPlanExecutionStatusMDT.h"
#include "uci/type/OrbitPlanExecutionStatusMDT.h"
#include "uci/type/PackageStatusMDT.h"
#include "uci/type/PositionReportMDT.h"
#include "uci/type/RouteActivityPlanExecutionStatusMDT.h"
#include "uci/type/RoutePlanExecutionStatusMDT.h"
#include "uci/type/SystemOrbitReportMDT.h"
#include "uci/type/SystemOrbitalPositionReportMDT.h"
#include "uci/type/SystemStatusMDT.h"
#include "uci/type/TaskPlanExecutionStatusMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EstimationResultType::EstimationResultType() = default;

EstimationResultType::~EstimationResultType() = default;

void EstimationResultType::copy(const uci::type::EstimationResultType& accessor) {
  copyImpl(accessor, false);
}

void EstimationResultType::copyImpl(const uci::type::EstimationResultType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EstimationResultType&>(accessor);
    if (accessorImpl.missionPlanExecutionStatus_Accessor) {
      setMissionPlanExecutionStatus(*(accessorImpl.missionPlanExecutionStatus_Accessor));
    } else {
      missionPlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.taskPlanExecutionStatus_Accessor) {
      setTaskPlanExecutionStatus(*(accessorImpl.taskPlanExecutionStatus_Accessor));
    } else {
      taskPlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.routePlanExecutionStatus_Accessor) {
      setRoutePlanExecutionStatus(*(accessorImpl.routePlanExecutionStatus_Accessor));
    } else {
      routePlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.routeActivityPlanExecutionStatus_Accessor) {
      setRouteActivityPlanExecutionStatus(*(accessorImpl.routeActivityPlanExecutionStatus_Accessor));
    } else {
      routeActivityPlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.orbitPlanExecutionStatus_Accessor) {
      setOrbitPlanExecutionStatus(*(accessorImpl.orbitPlanExecutionStatus_Accessor));
    } else {
      orbitPlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.orbitActivityPlanExecutionStatus_Accessor) {
      setOrbitActivityPlanExecutionStatus(*(accessorImpl.orbitActivityPlanExecutionStatus_Accessor));
    } else {
      orbitActivityPlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.activityPlanExecutionStatus_Accessor) {
      setActivityPlanExecutionStatus(*(accessorImpl.activityPlanExecutionStatus_Accessor));
    } else {
      activityPlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.effectPlanExecutionStatus_Accessor) {
      setEffectPlanExecutionStatus(*(accessorImpl.effectPlanExecutionStatus_Accessor));
    } else {
      effectPlanExecutionStatus_Accessor.reset();
    }
    if (accessorImpl.navigationReport_Accessor) {
      setNavigationReport(*(accessorImpl.navigationReport_Accessor));
    } else {
      navigationReport_Accessor.reset();
    }
    if (accessorImpl.positionReport_Accessor) {
      setPositionReport(*(accessorImpl.positionReport_Accessor));
    } else {
      positionReport_Accessor.reset();
    }
    if (accessorImpl.systemOrbitReport_Accessor) {
      setSystemOrbitReport(*(accessorImpl.systemOrbitReport_Accessor));
    } else {
      systemOrbitReport_Accessor.reset();
    }
    if (accessorImpl.systemOrbitalPositionReport_Accessor) {
      setSystemOrbitalPositionReport(*(accessorImpl.systemOrbitalPositionReport_Accessor));
    } else {
      systemOrbitalPositionReport_Accessor.reset();
    }
    if (accessorImpl.systemStatus_Accessor) {
      setSystemStatus(*(accessorImpl.systemStatus_Accessor));
    } else {
      systemStatus_Accessor.reset();
    }
    if (accessorImpl.packageStatus_Accessor) {
      setPackageStatus(*(accessorImpl.packageStatus_Accessor));
    } else {
      packageStatus_Accessor.reset();
    }
    setTimestamp(accessorImpl.timestamp_Accessor);
  }
}

void EstimationResultType::reset() noexcept {
  missionPlanExecutionStatus_Accessor.reset();
  taskPlanExecutionStatus_Accessor.reset();
  routePlanExecutionStatus_Accessor.reset();
  routeActivityPlanExecutionStatus_Accessor.reset();
  orbitPlanExecutionStatus_Accessor.reset();
  orbitActivityPlanExecutionStatus_Accessor.reset();
  activityPlanExecutionStatus_Accessor.reset();
  effectPlanExecutionStatus_Accessor.reset();
  navigationReport_Accessor.reset();
  positionReport_Accessor.reset();
  systemOrbitReport_Accessor.reset();
  systemOrbitalPositionReport_Accessor.reset();
  systemStatus_Accessor.reset();
  packageStatus_Accessor.reset();
  timestamp_Accessor = 0;
}

uci::type::MissionPlanExecutionStatusMDT& EstimationResultType::getMissionPlanExecutionStatus_() const {
  if (missionPlanExecutionStatus_Accessor) {
    return *missionPlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasMissionPlanExecutionStatus() to determine if it is safe to call getMissionPlanExecutionStatus()");
}

const uci::type::MissionPlanExecutionStatusMDT& EstimationResultType::getMissionPlanExecutionStatus() const {
  return getMissionPlanExecutionStatus_();
}

uci::type::MissionPlanExecutionStatusMDT& EstimationResultType::getMissionPlanExecutionStatus() {
  return getMissionPlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setMissionPlanExecutionStatus(const uci::type::MissionPlanExecutionStatusMDT& accessor) {
  enableMissionPlanExecutionStatus();
  if (&accessor != missionPlanExecutionStatus_Accessor.get()) {
    missionPlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasMissionPlanExecutionStatus() const noexcept {
  return static_cast<bool>(missionPlanExecutionStatus_Accessor);
}

uci::type::MissionPlanExecutionStatusMDT& EstimationResultType::enableMissionPlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanExecutionStatusMDT : type};
  if ((!missionPlanExecutionStatus_Accessor) || (missionPlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    missionPlanExecutionStatus_Accessor = MissionPlanExecutionStatusMDT::create(requestedType);
    if (!missionPlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableMissionPlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearMissionPlanExecutionStatus() noexcept {
  missionPlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::TaskPlanExecutionStatusMDT& EstimationResultType::getTaskPlanExecutionStatus_() const {
  if (taskPlanExecutionStatus_Accessor) {
    return *taskPlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskPlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasTaskPlanExecutionStatus() to determine if it is safe to call getTaskPlanExecutionStatus()");
}

const uci::type::TaskPlanExecutionStatusMDT& EstimationResultType::getTaskPlanExecutionStatus() const {
  return getTaskPlanExecutionStatus_();
}

uci::type::TaskPlanExecutionStatusMDT& EstimationResultType::getTaskPlanExecutionStatus() {
  return getTaskPlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setTaskPlanExecutionStatus(const uci::type::TaskPlanExecutionStatusMDT& accessor) {
  enableTaskPlanExecutionStatus();
  if (&accessor != taskPlanExecutionStatus_Accessor.get()) {
    taskPlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasTaskPlanExecutionStatus() const noexcept {
  return static_cast<bool>(taskPlanExecutionStatus_Accessor);
}

uci::type::TaskPlanExecutionStatusMDT& EstimationResultType::enableTaskPlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskPlanExecutionStatusMDT : type};
  if ((!taskPlanExecutionStatus_Accessor) || (taskPlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    taskPlanExecutionStatus_Accessor = TaskPlanExecutionStatusMDT::create(requestedType);
    if (!taskPlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableTaskPlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskPlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearTaskPlanExecutionStatus() noexcept {
  taskPlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::RoutePlanExecutionStatusMDT& EstimationResultType::getRoutePlanExecutionStatus_() const {
  if (routePlanExecutionStatus_Accessor) {
    return *routePlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasRoutePlanExecutionStatus() to determine if it is safe to call getRoutePlanExecutionStatus()");
}

const uci::type::RoutePlanExecutionStatusMDT& EstimationResultType::getRoutePlanExecutionStatus() const {
  return getRoutePlanExecutionStatus_();
}

uci::type::RoutePlanExecutionStatusMDT& EstimationResultType::getRoutePlanExecutionStatus() {
  return getRoutePlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setRoutePlanExecutionStatus(const uci::type::RoutePlanExecutionStatusMDT& accessor) {
  enableRoutePlanExecutionStatus();
  if (&accessor != routePlanExecutionStatus_Accessor.get()) {
    routePlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasRoutePlanExecutionStatus() const noexcept {
  return static_cast<bool>(routePlanExecutionStatus_Accessor);
}

uci::type::RoutePlanExecutionStatusMDT& EstimationResultType::enableRoutePlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanExecutionStatusMDT : type};
  if ((!routePlanExecutionStatus_Accessor) || (routePlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    routePlanExecutionStatus_Accessor = RoutePlanExecutionStatusMDT::create(requestedType);
    if (!routePlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableRoutePlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearRoutePlanExecutionStatus() noexcept {
  routePlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::RouteActivityPlanExecutionStatusMDT& EstimationResultType::getRouteActivityPlanExecutionStatus_() const {
  if (routeActivityPlanExecutionStatus_Accessor) {
    return *routeActivityPlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteActivityPlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasRouteActivityPlanExecutionStatus() to determine if it is safe to call getRouteActivityPlanExecutionStatus()");
}

const uci::type::RouteActivityPlanExecutionStatusMDT& EstimationResultType::getRouteActivityPlanExecutionStatus() const {
  return getRouteActivityPlanExecutionStatus_();
}

uci::type::RouteActivityPlanExecutionStatusMDT& EstimationResultType::getRouteActivityPlanExecutionStatus() {
  return getRouteActivityPlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setRouteActivityPlanExecutionStatus(const uci::type::RouteActivityPlanExecutionStatusMDT& accessor) {
  enableRouteActivityPlanExecutionStatus();
  if (&accessor != routeActivityPlanExecutionStatus_Accessor.get()) {
    routeActivityPlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasRouteActivityPlanExecutionStatus() const noexcept {
  return static_cast<bool>(routeActivityPlanExecutionStatus_Accessor);
}

uci::type::RouteActivityPlanExecutionStatusMDT& EstimationResultType::enableRouteActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanExecutionStatusMDT : type};
  if ((!routeActivityPlanExecutionStatus_Accessor) || (routeActivityPlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    routeActivityPlanExecutionStatus_Accessor = RouteActivityPlanExecutionStatusMDT::create(requestedType);
    if (!routeActivityPlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableRouteActivityPlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeActivityPlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearRouteActivityPlanExecutionStatus() noexcept {
  routeActivityPlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::OrbitPlanExecutionStatusMDT& EstimationResultType::getOrbitPlanExecutionStatus_() const {
  if (orbitPlanExecutionStatus_Accessor) {
    return *orbitPlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasOrbitPlanExecutionStatus() to determine if it is safe to call getOrbitPlanExecutionStatus()");
}

const uci::type::OrbitPlanExecutionStatusMDT& EstimationResultType::getOrbitPlanExecutionStatus() const {
  return getOrbitPlanExecutionStatus_();
}

uci::type::OrbitPlanExecutionStatusMDT& EstimationResultType::getOrbitPlanExecutionStatus() {
  return getOrbitPlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setOrbitPlanExecutionStatus(const uci::type::OrbitPlanExecutionStatusMDT& accessor) {
  enableOrbitPlanExecutionStatus();
  if (&accessor != orbitPlanExecutionStatus_Accessor.get()) {
    orbitPlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasOrbitPlanExecutionStatus() const noexcept {
  return static_cast<bool>(orbitPlanExecutionStatus_Accessor);
}

uci::type::OrbitPlanExecutionStatusMDT& EstimationResultType::enableOrbitPlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanExecutionStatusMDT : type};
  if ((!orbitPlanExecutionStatus_Accessor) || (orbitPlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    orbitPlanExecutionStatus_Accessor = OrbitPlanExecutionStatusMDT::create(requestedType);
    if (!orbitPlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitPlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearOrbitPlanExecutionStatus() noexcept {
  orbitPlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::OrbitActivityPlanExecutionStatusMDT& EstimationResultType::getOrbitActivityPlanExecutionStatus_() const {
  if (orbitActivityPlanExecutionStatus_Accessor) {
    return *orbitActivityPlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitActivityPlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasOrbitActivityPlanExecutionStatus() to determine if it is safe to call getOrbitActivityPlanExecutionStatus()");
}

const uci::type::OrbitActivityPlanExecutionStatusMDT& EstimationResultType::getOrbitActivityPlanExecutionStatus() const {
  return getOrbitActivityPlanExecutionStatus_();
}

uci::type::OrbitActivityPlanExecutionStatusMDT& EstimationResultType::getOrbitActivityPlanExecutionStatus() {
  return getOrbitActivityPlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setOrbitActivityPlanExecutionStatus(const uci::type::OrbitActivityPlanExecutionStatusMDT& accessor) {
  enableOrbitActivityPlanExecutionStatus();
  if (&accessor != orbitActivityPlanExecutionStatus_Accessor.get()) {
    orbitActivityPlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasOrbitActivityPlanExecutionStatus() const noexcept {
  return static_cast<bool>(orbitActivityPlanExecutionStatus_Accessor);
}

uci::type::OrbitActivityPlanExecutionStatusMDT& EstimationResultType::enableOrbitActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitActivityPlanExecutionStatusMDT : type};
  if ((!orbitActivityPlanExecutionStatus_Accessor) || (orbitActivityPlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    orbitActivityPlanExecutionStatus_Accessor = OrbitActivityPlanExecutionStatusMDT::create(requestedType);
    if (!orbitActivityPlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitActivityPlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitActivityPlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearOrbitActivityPlanExecutionStatus() noexcept {
  orbitActivityPlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanExecutionStatusMDT& EstimationResultType::getActivityPlanExecutionStatus_() const {
  if (activityPlanExecutionStatus_Accessor) {
    return *activityPlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityPlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasActivityPlanExecutionStatus() to determine if it is safe to call getActivityPlanExecutionStatus()");
}

const uci::type::ActivityPlanExecutionStatusMDT& EstimationResultType::getActivityPlanExecutionStatus() const {
  return getActivityPlanExecutionStatus_();
}

uci::type::ActivityPlanExecutionStatusMDT& EstimationResultType::getActivityPlanExecutionStatus() {
  return getActivityPlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setActivityPlanExecutionStatus(const uci::type::ActivityPlanExecutionStatusMDT& accessor) {
  enableActivityPlanExecutionStatus();
  if (&accessor != activityPlanExecutionStatus_Accessor.get()) {
    activityPlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasActivityPlanExecutionStatus() const noexcept {
  return static_cast<bool>(activityPlanExecutionStatus_Accessor);
}

uci::type::ActivityPlanExecutionStatusMDT& EstimationResultType::enableActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanExecutionStatusMDT : type};
  if ((!activityPlanExecutionStatus_Accessor) || (activityPlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    activityPlanExecutionStatus_Accessor = ActivityPlanExecutionStatusMDT::create(requestedType);
    if (!activityPlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableActivityPlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityPlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearActivityPlanExecutionStatus() noexcept {
  activityPlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::EffectPlanExecutionStatusMDT& EstimationResultType::getEffectPlanExecutionStatus_() const {
  if (effectPlanExecutionStatus_Accessor) {
    return *effectPlanExecutionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectPlanExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasEffectPlanExecutionStatus() to determine if it is safe to call getEffectPlanExecutionStatus()");
}

const uci::type::EffectPlanExecutionStatusMDT& EstimationResultType::getEffectPlanExecutionStatus() const {
  return getEffectPlanExecutionStatus_();
}

uci::type::EffectPlanExecutionStatusMDT& EstimationResultType::getEffectPlanExecutionStatus() {
  return getEffectPlanExecutionStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setEffectPlanExecutionStatus(const uci::type::EffectPlanExecutionStatusMDT& accessor) {
  enableEffectPlanExecutionStatus();
  if (&accessor != effectPlanExecutionStatus_Accessor.get()) {
    effectPlanExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasEffectPlanExecutionStatus() const noexcept {
  return static_cast<bool>(effectPlanExecutionStatus_Accessor);
}

uci::type::EffectPlanExecutionStatusMDT& EstimationResultType::enableEffectPlanExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanExecutionStatusMDT : type};
  if ((!effectPlanExecutionStatus_Accessor) || (effectPlanExecutionStatus_Accessor->getAccessorType() != requestedType)) {
    effectPlanExecutionStatus_Accessor = EffectPlanExecutionStatusMDT::create(requestedType);
    if (!effectPlanExecutionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableEffectPlanExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectPlanExecutionStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearEffectPlanExecutionStatus() noexcept {
  effectPlanExecutionStatus_Accessor.reset();
  return *this;
}

uci::type::NavigationReportMDT& EstimationResultType::getNavigationReport_() const {
  if (navigationReport_Accessor) {
    return *navigationReport_Accessor;
  }
  throw uci::base::UCIException("Error in getNavigationReport(): An attempt was made to get an optional field that was not enabled, call hasNavigationReport() to determine if it is safe to call getNavigationReport()");
}

const uci::type::NavigationReportMDT& EstimationResultType::getNavigationReport() const {
  return getNavigationReport_();
}

uci::type::NavigationReportMDT& EstimationResultType::getNavigationReport() {
  return getNavigationReport_();
}

uci::type::EstimationResultType& EstimationResultType::setNavigationReport(const uci::type::NavigationReportMDT& accessor) {
  enableNavigationReport();
  if (&accessor != navigationReport_Accessor.get()) {
    navigationReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasNavigationReport() const noexcept {
  return static_cast<bool>(navigationReport_Accessor);
}

uci::type::NavigationReportMDT& EstimationResultType::enableNavigationReport(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::navigationReportMDT : type};
  if ((!navigationReport_Accessor) || (navigationReport_Accessor->getAccessorType() != requestedType)) {
    navigationReport_Accessor = NavigationReportMDT::create(requestedType);
    if (!navigationReport_Accessor) {
      throw uci::base::UCIException("Error in enableNavigationReport(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *navigationReport_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearNavigationReport() noexcept {
  navigationReport_Accessor.reset();
  return *this;
}

uci::type::PositionReportMDT& EstimationResultType::getPositionReport_() const {
  if (positionReport_Accessor) {
    return *positionReport_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionReport(): An attempt was made to get an optional field that was not enabled, call hasPositionReport() to determine if it is safe to call getPositionReport()");
}

const uci::type::PositionReportMDT& EstimationResultType::getPositionReport() const {
  return getPositionReport_();
}

uci::type::PositionReportMDT& EstimationResultType::getPositionReport() {
  return getPositionReport_();
}

uci::type::EstimationResultType& EstimationResultType::setPositionReport(const uci::type::PositionReportMDT& accessor) {
  enablePositionReport();
  if (&accessor != positionReport_Accessor.get()) {
    positionReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasPositionReport() const noexcept {
  return static_cast<bool>(positionReport_Accessor);
}

uci::type::PositionReportMDT& EstimationResultType::enablePositionReport(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionReportMDT : type};
  if ((!positionReport_Accessor) || (positionReport_Accessor->getAccessorType() != requestedType)) {
    positionReport_Accessor = PositionReportMDT::create(requestedType);
    if (!positionReport_Accessor) {
      throw uci::base::UCIException("Error in enablePositionReport(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionReport_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearPositionReport() noexcept {
  positionReport_Accessor.reset();
  return *this;
}

uci::type::SystemOrbitReportMDT& EstimationResultType::getSystemOrbitReport_() const {
  if (systemOrbitReport_Accessor) {
    return *systemOrbitReport_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemOrbitReport(): An attempt was made to get an optional field that was not enabled, call hasSystemOrbitReport() to determine if it is safe to call getSystemOrbitReport()");
}

const uci::type::SystemOrbitReportMDT& EstimationResultType::getSystemOrbitReport() const {
  return getSystemOrbitReport_();
}

uci::type::SystemOrbitReportMDT& EstimationResultType::getSystemOrbitReport() {
  return getSystemOrbitReport_();
}

uci::type::EstimationResultType& EstimationResultType::setSystemOrbitReport(const uci::type::SystemOrbitReportMDT& accessor) {
  enableSystemOrbitReport();
  if (&accessor != systemOrbitReport_Accessor.get()) {
    systemOrbitReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasSystemOrbitReport() const noexcept {
  return static_cast<bool>(systemOrbitReport_Accessor);
}

uci::type::SystemOrbitReportMDT& EstimationResultType::enableSystemOrbitReport(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitReportMDT : type};
  if ((!systemOrbitReport_Accessor) || (systemOrbitReport_Accessor->getAccessorType() != requestedType)) {
    systemOrbitReport_Accessor = SystemOrbitReportMDT::create(requestedType);
    if (!systemOrbitReport_Accessor) {
      throw uci::base::UCIException("Error in enableSystemOrbitReport(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemOrbitReport_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearSystemOrbitReport() noexcept {
  systemOrbitReport_Accessor.reset();
  return *this;
}

uci::type::SystemOrbitalPositionReportMDT& EstimationResultType::getSystemOrbitalPositionReport_() const {
  if (systemOrbitalPositionReport_Accessor) {
    return *systemOrbitalPositionReport_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemOrbitalPositionReport(): An attempt was made to get an optional field that was not enabled, call hasSystemOrbitalPositionReport() to determine if it is safe to call getSystemOrbitalPositionReport()");
}

const uci::type::SystemOrbitalPositionReportMDT& EstimationResultType::getSystemOrbitalPositionReport() const {
  return getSystemOrbitalPositionReport_();
}

uci::type::SystemOrbitalPositionReportMDT& EstimationResultType::getSystemOrbitalPositionReport() {
  return getSystemOrbitalPositionReport_();
}

uci::type::EstimationResultType& EstimationResultType::setSystemOrbitalPositionReport(const uci::type::SystemOrbitalPositionReportMDT& accessor) {
  enableSystemOrbitalPositionReport();
  if (&accessor != systemOrbitalPositionReport_Accessor.get()) {
    systemOrbitalPositionReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasSystemOrbitalPositionReport() const noexcept {
  return static_cast<bool>(systemOrbitalPositionReport_Accessor);
}

uci::type::SystemOrbitalPositionReportMDT& EstimationResultType::enableSystemOrbitalPositionReport(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitalPositionReportMDT : type};
  if ((!systemOrbitalPositionReport_Accessor) || (systemOrbitalPositionReport_Accessor->getAccessorType() != requestedType)) {
    systemOrbitalPositionReport_Accessor = SystemOrbitalPositionReportMDT::create(requestedType);
    if (!systemOrbitalPositionReport_Accessor) {
      throw uci::base::UCIException("Error in enableSystemOrbitalPositionReport(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemOrbitalPositionReport_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearSystemOrbitalPositionReport() noexcept {
  systemOrbitalPositionReport_Accessor.reset();
  return *this;
}

uci::type::SystemStatusMDT& EstimationResultType::getSystemStatus_() const {
  if (systemStatus_Accessor) {
    return *systemStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemStatus(): An attempt was made to get an optional field that was not enabled, call hasSystemStatus() to determine if it is safe to call getSystemStatus()");
}

const uci::type::SystemStatusMDT& EstimationResultType::getSystemStatus() const {
  return getSystemStatus_();
}

uci::type::SystemStatusMDT& EstimationResultType::getSystemStatus() {
  return getSystemStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setSystemStatus(const uci::type::SystemStatusMDT& accessor) {
  enableSystemStatus();
  if (&accessor != systemStatus_Accessor.get()) {
    systemStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasSystemStatus() const noexcept {
  return static_cast<bool>(systemStatus_Accessor);
}

uci::type::SystemStatusMDT& EstimationResultType::enableSystemStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemStatusMDT : type};
  if ((!systemStatus_Accessor) || (systemStatus_Accessor->getAccessorType() != requestedType)) {
    systemStatus_Accessor = SystemStatusMDT::create(requestedType);
    if (!systemStatus_Accessor) {
      throw uci::base::UCIException("Error in enableSystemStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearSystemStatus() noexcept {
  systemStatus_Accessor.reset();
  return *this;
}

uci::type::PackageStatusMDT& EstimationResultType::getPackageStatus_() const {
  if (packageStatus_Accessor) {
    return *packageStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getPackageStatus(): An attempt was made to get an optional field that was not enabled, call hasPackageStatus() to determine if it is safe to call getPackageStatus()");
}

const uci::type::PackageStatusMDT& EstimationResultType::getPackageStatus() const {
  return getPackageStatus_();
}

uci::type::PackageStatusMDT& EstimationResultType::getPackageStatus() {
  return getPackageStatus_();
}

uci::type::EstimationResultType& EstimationResultType::setPackageStatus(const uci::type::PackageStatusMDT& accessor) {
  enablePackageStatus();
  if (&accessor != packageStatus_Accessor.get()) {
    packageStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EstimationResultType::hasPackageStatus() const noexcept {
  return static_cast<bool>(packageStatus_Accessor);
}

uci::type::PackageStatusMDT& EstimationResultType::enablePackageStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::packageStatusMDT : type};
  if ((!packageStatus_Accessor) || (packageStatus_Accessor->getAccessorType() != requestedType)) {
    packageStatus_Accessor = PackageStatusMDT::create(requestedType);
    if (!packageStatus_Accessor) {
      throw uci::base::UCIException("Error in enablePackageStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *packageStatus_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::clearPackageStatus() noexcept {
  packageStatus_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue EstimationResultType::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::EstimationResultType& EstimationResultType::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


std::unique_ptr<EstimationResultType> EstimationResultType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::estimationResultType : type};
  return (requestedType == uci::type::accessorType::estimationResultType) ? boost::make_unique<EstimationResultType>() : nullptr;
}

/**  */
namespace EstimationResultType_Names {

constexpr const char* Extern_Type_Name{"EstimationResultType"};
constexpr const char* MissionPlanExecutionStatus_Name{"MissionPlanExecutionStatus"};
constexpr const char* TaskPlanExecutionStatus_Name{"TaskPlanExecutionStatus"};
constexpr const char* RoutePlanExecutionStatus_Name{"RoutePlanExecutionStatus"};
constexpr const char* RouteActivityPlanExecutionStatus_Name{"RouteActivityPlanExecutionStatus"};
constexpr const char* OrbitPlanExecutionStatus_Name{"OrbitPlanExecutionStatus"};
constexpr const char* OrbitActivityPlanExecutionStatus_Name{"OrbitActivityPlanExecutionStatus"};
constexpr const char* ActivityPlanExecutionStatus_Name{"ActivityPlanExecutionStatus"};
constexpr const char* EffectPlanExecutionStatus_Name{"EffectPlanExecutionStatus"};
constexpr const char* NavigationReport_Name{"NavigationReport"};
constexpr const char* PositionReport_Name{"PositionReport"};
constexpr const char* SystemOrbitReport_Name{"SystemOrbitReport"};
constexpr const char* SystemOrbitalPositionReport_Name{"SystemOrbitalPositionReport"};
constexpr const char* SystemStatus_Name{"SystemStatus"};
constexpr const char* PackageStatus_Name{"PackageStatus"};
constexpr const char* Timestamp_Name{"Timestamp"};

} // namespace EstimationResultType_Names

void EstimationResultType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EstimationResultType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EstimationResultType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::MissionPlanExecutionStatus_Name) {
      MissionPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableMissionPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::TaskPlanExecutionStatus_Name) {
      TaskPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableTaskPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::RoutePlanExecutionStatus_Name) {
      RoutePlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableRoutePlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::RouteActivityPlanExecutionStatus_Name) {
      RouteActivityPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableRouteActivityPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::OrbitPlanExecutionStatus_Name) {
      OrbitPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableOrbitPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::OrbitActivityPlanExecutionStatus_Name) {
      OrbitActivityPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableOrbitActivityPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::ActivityPlanExecutionStatus_Name) {
      ActivityPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableActivityPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::EffectPlanExecutionStatus_Name) {
      EffectPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableEffectPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::NavigationReport_Name) {
      NavigationReportMDT::deserialize(valueType.second, accessor.enableNavigationReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::PositionReport_Name) {
      PositionReportMDT::deserialize(valueType.second, accessor.enablePositionReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::SystemOrbitReport_Name) {
      SystemOrbitReportMDT::deserialize(valueType.second, accessor.enableSystemOrbitReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::SystemOrbitalPositionReport_Name) {
      SystemOrbitalPositionReportMDT::deserialize(valueType.second, accessor.enableSystemOrbitalPositionReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::SystemStatus_Name) {
      SystemStatusMDT::deserialize(valueType.second, accessor.enableSystemStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::PackageStatus_Name) {
      PackageStatusMDT::deserialize(valueType.second, accessor.enablePackageStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
}

std::string EstimationResultType::serialize(const uci::type::EstimationResultType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EstimationResultType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EstimationResultType_Names::Extern_Type_Name);
  }
  if (accessor.hasMissionPlanExecutionStatus()) {
    MissionPlanExecutionStatusMDT::serialize(accessor.getMissionPlanExecutionStatus(), node, EstimationResultType_Names::MissionPlanExecutionStatus_Name);
  }
  if (accessor.hasTaskPlanExecutionStatus()) {
    TaskPlanExecutionStatusMDT::serialize(accessor.getTaskPlanExecutionStatus(), node, EstimationResultType_Names::TaskPlanExecutionStatus_Name);
  }
  if (accessor.hasRoutePlanExecutionStatus()) {
    RoutePlanExecutionStatusMDT::serialize(accessor.getRoutePlanExecutionStatus(), node, EstimationResultType_Names::RoutePlanExecutionStatus_Name);
  }
  if (accessor.hasRouteActivityPlanExecutionStatus()) {
    RouteActivityPlanExecutionStatusMDT::serialize(accessor.getRouteActivityPlanExecutionStatus(), node, EstimationResultType_Names::RouteActivityPlanExecutionStatus_Name);
  }
  if (accessor.hasOrbitPlanExecutionStatus()) {
    OrbitPlanExecutionStatusMDT::serialize(accessor.getOrbitPlanExecutionStatus(), node, EstimationResultType_Names::OrbitPlanExecutionStatus_Name);
  }
  if (accessor.hasOrbitActivityPlanExecutionStatus()) {
    OrbitActivityPlanExecutionStatusMDT::serialize(accessor.getOrbitActivityPlanExecutionStatus(), node, EstimationResultType_Names::OrbitActivityPlanExecutionStatus_Name);
  }
  if (accessor.hasActivityPlanExecutionStatus()) {
    ActivityPlanExecutionStatusMDT::serialize(accessor.getActivityPlanExecutionStatus(), node, EstimationResultType_Names::ActivityPlanExecutionStatus_Name);
  }
  if (accessor.hasEffectPlanExecutionStatus()) {
    EffectPlanExecutionStatusMDT::serialize(accessor.getEffectPlanExecutionStatus(), node, EstimationResultType_Names::EffectPlanExecutionStatus_Name);
  }
  if (accessor.hasNavigationReport()) {
    NavigationReportMDT::serialize(accessor.getNavigationReport(), node, EstimationResultType_Names::NavigationReport_Name);
  }
  if (accessor.hasPositionReport()) {
    PositionReportMDT::serialize(accessor.getPositionReport(), node, EstimationResultType_Names::PositionReport_Name);
  }
  if (accessor.hasSystemOrbitReport()) {
    SystemOrbitReportMDT::serialize(accessor.getSystemOrbitReport(), node, EstimationResultType_Names::SystemOrbitReport_Name);
  }
  if (accessor.hasSystemOrbitalPositionReport()) {
    SystemOrbitalPositionReportMDT::serialize(accessor.getSystemOrbitalPositionReport(), node, EstimationResultType_Names::SystemOrbitalPositionReport_Name);
  }
  if (accessor.hasSystemStatus()) {
    SystemStatusMDT::serialize(accessor.getSystemStatus(), node, EstimationResultType_Names::SystemStatus_Name);
  }
  if (accessor.hasPackageStatus()) {
    PackageStatusMDT::serialize(accessor.getPackageStatus(), node, EstimationResultType_Names::PackageStatus_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, EstimationResultType_Names::Timestamp_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EstimationResultType& EstimationResultType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EstimationResultType>().release());
}

uci::type::EstimationResultType& EstimationResultType::create(const uci::type::EstimationResultType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EstimationResultType> newAccessor{boost::make_unique<asb_uci::type::EstimationResultType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EstimationResultType::destroy(uci::type::EstimationResultType& accessor) {
  delete dynamic_cast<asb_uci::type::EstimationResultType*>(&accessor);
}

} // namespace type

} // namespace uci

