/** @file COMINT_SettingsCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/COMINT_SettingsCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AmbiguityOrderingEnum.h"
#include "asb_uci/type/CapabilitySettingsCommandBaseType.h"
#include "asb_uci/type/ESM_MessageOutputsEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AmbiguityOrderingEnum.h"
#include "uci/type/COMINT_SettingsCommandMDT.h"
#include "uci/type/ESM_MessageOutputsEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_SettingsCommandMDT::COMINT_SettingsCommandMDT()
  : messageOutput_Accessor{boost::make_unique<MessageOutput>(0, 6)} {
}

COMINT_SettingsCommandMDT::~COMINT_SettingsCommandMDT() = default;

void COMINT_SettingsCommandMDT::copy(const uci::type::COMINT_SettingsCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void COMINT_SettingsCommandMDT::copyImpl(const uci::type::COMINT_SettingsCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilitySettingsCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const COMINT_SettingsCommandMDT&>(accessor);
    if (accessorImpl.setAmbiguityOrdering_Accessor) {
      setSetAmbiguityOrdering(*(accessorImpl.setAmbiguityOrdering_Accessor));
    } else {
      setAmbiguityOrdering_Accessor.reset();
    }
    if (accessorImpl.hasSpectralDensityReporting()) {
      setSpectralDensityReporting(accessorImpl.getSpectralDensityReporting());
    } else {
      clearSpectralDensityReporting();
    }
    setMessageOutput(*(accessorImpl.messageOutput_Accessor));
  }
}

void COMINT_SettingsCommandMDT::reset() noexcept {
  CapabilitySettingsCommandBaseType::reset();
  setAmbiguityOrdering_Accessor.reset();
  clearSpectralDensityReporting();
  messageOutput_Accessor->reset();
}

uci::type::AmbiguityOrderingEnum& COMINT_SettingsCommandMDT::getSetAmbiguityOrdering_() const {
  if (setAmbiguityOrdering_Accessor) {
    return *setAmbiguityOrdering_Accessor;
  }
  throw uci::base::UCIException("Error in getSetAmbiguityOrdering(): An attempt was made to get an optional field that was not enabled, call hasSetAmbiguityOrdering() to determine if it is safe to call getSetAmbiguityOrdering()");
}

const uci::type::AmbiguityOrderingEnum& COMINT_SettingsCommandMDT::getSetAmbiguityOrdering() const {
  return getSetAmbiguityOrdering_();
}

uci::type::AmbiguityOrderingEnum& COMINT_SettingsCommandMDT::getSetAmbiguityOrdering() {
  return getSetAmbiguityOrdering_();
}

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::setSetAmbiguityOrdering(const uci::type::AmbiguityOrderingEnum& accessor) {
  enableSetAmbiguityOrdering();
  if (&accessor != setAmbiguityOrdering_Accessor.get()) {
    setAmbiguityOrdering_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::setSetAmbiguityOrdering(const uci::type::AmbiguityOrderingEnum::EnumerationItem value) {
  enableSetAmbiguityOrdering().setValue(value);
  return *this;
}

bool COMINT_SettingsCommandMDT::hasSetAmbiguityOrdering() const noexcept {
  return static_cast<bool>(setAmbiguityOrdering_Accessor);
}

uci::type::AmbiguityOrderingEnum& COMINT_SettingsCommandMDT::enableSetAmbiguityOrdering(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ambiguityOrderingEnum : type};
  if ((!setAmbiguityOrdering_Accessor) || (setAmbiguityOrdering_Accessor->getAccessorType() != requestedType)) {
    setAmbiguityOrdering_Accessor = AmbiguityOrderingEnum::create(requestedType);
    if (!setAmbiguityOrdering_Accessor) {
      throw uci::base::UCIException("Error in enableSetAmbiguityOrdering(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setAmbiguityOrdering_Accessor;
}

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::clearSetAmbiguityOrdering() noexcept {
  setAmbiguityOrdering_Accessor.reset();
  return *this;
}

xs::Boolean COMINT_SettingsCommandMDT::getSpectralDensityReporting() const {
  if (spectralDensityReporting_Accessor) {
    return *spectralDensityReporting_Accessor;
  }
  throw uci::base::UCIException("Error in getSpectralDensityReporting(): An attempt was made to get an optional field that was not enabled, call hasSpectralDensityReporting() to determine if it is safe to call getSpectralDensityReporting()");
}

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::setSpectralDensityReporting(xs::Boolean value) {
  spectralDensityReporting_Accessor = value;
  return *this;
}

bool COMINT_SettingsCommandMDT::hasSpectralDensityReporting() const noexcept {
  return spectralDensityReporting_Accessor.has_value();
}

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::clearSpectralDensityReporting() noexcept {
  spectralDensityReporting_Accessor.reset();
  return *this;
}

const uci::type::COMINT_SettingsCommandMDT::MessageOutput& COMINT_SettingsCommandMDT::getMessageOutput() const {
  return *messageOutput_Accessor;
}

uci::type::COMINT_SettingsCommandMDT::MessageOutput& COMINT_SettingsCommandMDT::getMessageOutput() {
  return *messageOutput_Accessor;
}

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::setMessageOutput(const uci::type::COMINT_SettingsCommandMDT::MessageOutput& accessor) {
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<COMINT_SettingsCommandMDT> COMINT_SettingsCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_SettingsCommandMDT : type};
  return (requestedType == uci::type::accessorType::cOMINT_SettingsCommandMDT) ? boost::make_unique<COMINT_SettingsCommandMDT>() : nullptr;
}

/**  */
namespace COMINT_SettingsCommandMDT_Names {

constexpr const char* Extern_Type_Name{"COMINT_SettingsCommandMDT"};
constexpr const char* SetAmbiguityOrdering_Name{"SetAmbiguityOrdering"};
constexpr const char* SpectralDensityReporting_Name{"SpectralDensityReporting"};
constexpr const char* MessageOutput_Name{"MessageOutput"};

} // namespace COMINT_SettingsCommandMDT_Names

void COMINT_SettingsCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_SettingsCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_SettingsCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_SettingsCommandMDT_Names::SetAmbiguityOrdering_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSetAmbiguityOrdering().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_SettingsCommandMDT_Names::SpectralDensityReporting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpectralDensityReporting(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_SettingsCommandMDT_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
        const uci::type::COMINT_SettingsCommandMDT::MessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
  CapabilitySettingsCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string COMINT_SettingsCommandMDT::serialize(const uci::type::COMINT_SettingsCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_SettingsCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_SettingsCommandMDT_Names::Extern_Type_Name);
  }
  CapabilitySettingsCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasSetAmbiguityOrdering()) {
    AmbiguityOrderingEnum::serialize(accessor.getSetAmbiguityOrdering(), node, COMINT_SettingsCommandMDT_Names::SetAmbiguityOrdering_Name, false);
  }
  if (accessor.hasSpectralDensityReporting()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSpectralDensityReporting(), node, COMINT_SettingsCommandMDT_Names::SpectralDensityReporting_Name);
  }
  {
    const uci::type::COMINT_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
    for (uci::type::COMINT_SettingsCommandMDT::MessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ESM_MessageOutputsEnum::serialize(boundedList.at(i), node, COMINT_SettingsCommandMDT_Names::MessageOutput_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_SettingsCommandMDT>().release());
}

uci::type::COMINT_SettingsCommandMDT& COMINT_SettingsCommandMDT::create(const uci::type::COMINT_SettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_SettingsCommandMDT> newAccessor{boost::make_unique<asb_uci::type::COMINT_SettingsCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_SettingsCommandMDT::destroy(uci::type::COMINT_SettingsCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_SettingsCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

