/** @file AssessmentRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AssessmentRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AchievabilityAssessmentRequestPET.h"
#include "asb_uci/type/CapabilityUtilizationRequestType.h"
#include "asb_uci/type/CommPointingPlanRequestType.h"
#include "asb_uci/type/RouteDeconflictionRequestType.h"
#include "asb_uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "asb_uci/type/TargetMobilityRequestType.h"
#include "asb_uci/type/ThreatAssessmentRequestType.h"
#include "asb_uci/type/ThreatNominationAssessmentRequestType.h"
#include "asb_uci/type/VehicleThreatAssessmentRequestType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AchievabilityAssessmentRequestPET.h"
#include "uci/type/AssessmentRequestType.h"
#include "uci/type/CapabilityUtilizationRequestType.h"
#include "uci/type/CommPointingPlanRequestType.h"
#include "uci/type/RouteDeconflictionRequestType.h"
#include "uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "uci/type/TargetMobilityRequestType.h"
#include "uci/type/ThreatAssessmentRequestType.h"
#include "uci/type/ThreatNominationAssessmentRequestType.h"
#include "uci/type/VehicleThreatAssessmentRequestType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AssessmentRequestType::AssessmentRequestType() = default;

AssessmentRequestType::~AssessmentRequestType() = default;

void AssessmentRequestType::copy(const uci::type::AssessmentRequestType& accessor) {
  copyImpl(accessor, false);
}

void AssessmentRequestType::copyImpl(const uci::type::AssessmentRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AssessmentRequestType&>(accessor);
    if (accessorImpl.commPointingPlan_Accessor) {
      setCommPointingPlan(*(accessorImpl.commPointingPlan_Accessor));
    } else {
      commPointingPlan_Accessor.reset();
    }
    if (accessorImpl.capabilityUtilization_Accessor) {
      setCapabilityUtilization(*(accessorImpl.capabilityUtilization_Accessor));
    } else {
      capabilityUtilization_Accessor.reset();
    }
    if (accessorImpl.routeDeconfliction_Accessor) {
      setRouteDeconfliction(*(accessorImpl.routeDeconfliction_Accessor));
    } else {
      routeDeconfliction_Accessor.reset();
    }
    if (accessorImpl.routeVulnerabilityMetrics_Accessor) {
      setRouteVulnerabilityMetrics(*(accessorImpl.routeVulnerabilityMetrics_Accessor));
    } else {
      routeVulnerabilityMetrics_Accessor.reset();
    }
    if (accessorImpl.routeThreatAssessment_Accessor) {
      setRouteThreatAssessment(*(accessorImpl.routeThreatAssessment_Accessor));
    } else {
      routeThreatAssessment_Accessor.reset();
    }
    if (accessorImpl.targetMobility_Accessor) {
      setTargetMobility(*(accessorImpl.targetMobility_Accessor));
    } else {
      targetMobility_Accessor.reset();
    }
    if (accessorImpl.vehicleThreatAssessment_Accessor) {
      setVehicleThreatAssessment(*(accessorImpl.vehicleThreatAssessment_Accessor));
    } else {
      vehicleThreatAssessment_Accessor.reset();
    }
    if (accessorImpl.threatNominationAssessment_Accessor) {
      setThreatNominationAssessment(*(accessorImpl.threatNominationAssessment_Accessor));
    } else {
      threatNominationAssessment_Accessor.reset();
    }
    if (accessorImpl.achievabilityAssessment_Accessor) {
      setAchievabilityAssessment(*(accessorImpl.achievabilityAssessment_Accessor));
    } else {
      achievabilityAssessment_Accessor.reset();
    }
  }
}

void AssessmentRequestType::reset() noexcept {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
}

uci::type::AssessmentRequestType::AssessmentRequestTypeChoice AssessmentRequestType::getAssessmentRequestTypeChoiceOrdinal() const noexcept {
  if (commPointingPlan_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_COMMPOINTINGPLAN;
  }
  if (capabilityUtilization_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_CAPABILITYUTILIZATION;
  }
  if (routeDeconfliction_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_ROUTEDECONFLICTION;
  }
  if (routeVulnerabilityMetrics_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_ROUTEVULNERABILITYMETRICS;
  }
  if (routeThreatAssessment_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_ROUTETHREATASSESSMENT;
  }
  if (targetMobility_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_TARGETMOBILITY;
  }
  if (vehicleThreatAssessment_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_VEHICLETHREATASSESSMENT;
  }
  if (threatNominationAssessment_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_THREATNOMINATIONASSESSMENT;
  }
  if (achievabilityAssessment_Accessor) {
    return ASSESSMENTREQUESTTYPE_CHOICE_ACHIEVABILITYASSESSMENT;
  }
  return ASSESSMENTREQUESTTYPE_CHOICE_NONE;
}

uci::type::AssessmentRequestType& AssessmentRequestType::setAssessmentRequestTypeChoiceOrdinal(uci::type::AssessmentRequestType::AssessmentRequestTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ASSESSMENTREQUESTTYPE_CHOICE_COMMPOINTINGPLAN:
      chooseCommPointingPlan("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_CAPABILITYUTILIZATION:
      chooseCapabilityUtilization("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_ROUTEDECONFLICTION:
      chooseRouteDeconfliction("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_ROUTEVULNERABILITYMETRICS:
      chooseRouteVulnerabilityMetrics("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_ROUTETHREATASSESSMENT:
      chooseRouteThreatAssessment("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_TARGETMOBILITY:
      chooseTargetMobility("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_VEHICLETHREATASSESSMENT:
      chooseVehicleThreatAssessment("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_THREATNOMINATIONASSESSMENT:
      chooseThreatNominationAssessment("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTREQUESTTYPE_CHOICE_ACHIEVABILITYASSESSMENT:
      chooseAchievabilityAssessment("setAssessmentRequestTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setAssessmentRequestTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CommPointingPlanRequestType& AssessmentRequestType::getCommPointingPlan_() const {
  if (commPointingPlan_Accessor) {
    return *commPointingPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getCommPointingPlan(): Unable to get CommPointingPlan, field not selected");
}

const uci::type::CommPointingPlanRequestType& AssessmentRequestType::getCommPointingPlan() const {
  return getCommPointingPlan_();
}

uci::type::CommPointingPlanRequestType& AssessmentRequestType::getCommPointingPlan() {
  return getCommPointingPlan_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setCommPointingPlan(const uci::type::CommPointingPlanRequestType& accessor) {
  chooseCommPointingPlan();
  if (&accessor != commPointingPlan_Accessor.get()) {
    commPointingPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestType::isCommPointingPlan() const noexcept {
  return static_cast<bool>(commPointingPlan_Accessor);
}

uci::type::CommPointingPlanRequestType& AssessmentRequestType::chooseCommPointingPlan(const std::string& method, uci::base::accessorType::AccessorType type) {
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commPointingPlanRequestType : type};
  if ((!commPointingPlan_Accessor) || (commPointingPlan_Accessor->getAccessorType() != requestedType)) {
    commPointingPlan_Accessor = CommPointingPlanRequestType::create(type);
    if (!commPointingPlan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commPointingPlan_Accessor;
}

uci::type::CommPointingPlanRequestType& AssessmentRequestType::chooseCommPointingPlan(uci::base::accessorType::AccessorType type) {
  return chooseCommPointingPlan("chooseCommPointingPlan", type);
}

uci::type::CapabilityUtilizationRequestType& AssessmentRequestType::getCapabilityUtilization_() const {
  if (capabilityUtilization_Accessor) {
    return *capabilityUtilization_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityUtilization(): Unable to get CapabilityUtilization, field not selected");
}

const uci::type::CapabilityUtilizationRequestType& AssessmentRequestType::getCapabilityUtilization() const {
  return getCapabilityUtilization_();
}

uci::type::CapabilityUtilizationRequestType& AssessmentRequestType::getCapabilityUtilization() {
  return getCapabilityUtilization_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setCapabilityUtilization(const uci::type::CapabilityUtilizationRequestType& accessor) {
  chooseCapabilityUtilization();
  if (&accessor != capabilityUtilization_Accessor.get()) {
    capabilityUtilization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestType::isCapabilityUtilization() const noexcept {
  return static_cast<bool>(capabilityUtilization_Accessor);
}

uci::type::CapabilityUtilizationRequestType& AssessmentRequestType::chooseCapabilityUtilization(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityUtilizationRequestType : type};
  if ((!capabilityUtilization_Accessor) || (capabilityUtilization_Accessor->getAccessorType() != requestedType)) {
    capabilityUtilization_Accessor = CapabilityUtilizationRequestType::create(type);
    if (!capabilityUtilization_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityUtilization_Accessor;
}

uci::type::CapabilityUtilizationRequestType& AssessmentRequestType::chooseCapabilityUtilization(uci::base::accessorType::AccessorType type) {
  return chooseCapabilityUtilization("chooseCapabilityUtilization", type);
}

uci::type::RouteDeconflictionRequestType& AssessmentRequestType::getRouteDeconfliction_() const {
  if (routeDeconfliction_Accessor) {
    return *routeDeconfliction_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteDeconfliction(): Unable to get RouteDeconfliction, field not selected");
}

const uci::type::RouteDeconflictionRequestType& AssessmentRequestType::getRouteDeconfliction() const {
  return getRouteDeconfliction_();
}

uci::type::RouteDeconflictionRequestType& AssessmentRequestType::getRouteDeconfliction() {
  return getRouteDeconfliction_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setRouteDeconfliction(const uci::type::RouteDeconflictionRequestType& accessor) {
  chooseRouteDeconfliction();
  if (&accessor != routeDeconfliction_Accessor.get()) {
    routeDeconfliction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestType::isRouteDeconfliction() const noexcept {
  return static_cast<bool>(routeDeconfliction_Accessor);
}

uci::type::RouteDeconflictionRequestType& AssessmentRequestType::chooseRouteDeconfliction(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeDeconflictionRequestType : type};
  if ((!routeDeconfliction_Accessor) || (routeDeconfliction_Accessor->getAccessorType() != requestedType)) {
    routeDeconfliction_Accessor = RouteDeconflictionRequestType::create(type);
    if (!routeDeconfliction_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeDeconfliction_Accessor;
}

uci::type::RouteDeconflictionRequestType& AssessmentRequestType::chooseRouteDeconfliction(uci::base::accessorType::AccessorType type) {
  return chooseRouteDeconfliction("chooseRouteDeconfliction", type);
}

uci::type::RouteVulnerabilityMetricsRequestType& AssessmentRequestType::getRouteVulnerabilityMetrics_() const {
  if (routeVulnerabilityMetrics_Accessor) {
    return *routeVulnerabilityMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteVulnerabilityMetrics(): Unable to get RouteVulnerabilityMetrics, field not selected");
}

const uci::type::RouteVulnerabilityMetricsRequestType& AssessmentRequestType::getRouteVulnerabilityMetrics() const {
  return getRouteVulnerabilityMetrics_();
}

uci::type::RouteVulnerabilityMetricsRequestType& AssessmentRequestType::getRouteVulnerabilityMetrics() {
  return getRouteVulnerabilityMetrics_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setRouteVulnerabilityMetrics(const uci::type::RouteVulnerabilityMetricsRequestType& accessor) {
  chooseRouteVulnerabilityMetrics();
  if (&accessor != routeVulnerabilityMetrics_Accessor.get()) {
    routeVulnerabilityMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestType::isRouteVulnerabilityMetrics() const noexcept {
  return static_cast<bool>(routeVulnerabilityMetrics_Accessor);
}

uci::type::RouteVulnerabilityMetricsRequestType& AssessmentRequestType::chooseRouteVulnerabilityMetrics(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeVulnerabilityMetricsRequestType : type};
  if ((!routeVulnerabilityMetrics_Accessor) || (routeVulnerabilityMetrics_Accessor->getAccessorType() != requestedType)) {
    routeVulnerabilityMetrics_Accessor = RouteVulnerabilityMetricsRequestType::create(type);
    if (!routeVulnerabilityMetrics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeVulnerabilityMetrics_Accessor;
}

uci::type::RouteVulnerabilityMetricsRequestType& AssessmentRequestType::chooseRouteVulnerabilityMetrics(uci::base::accessorType::AccessorType type) {
  return chooseRouteVulnerabilityMetrics("chooseRouteVulnerabilityMetrics", type);
}

uci::type::ThreatAssessmentRequestType& AssessmentRequestType::getRouteThreatAssessment_() const {
  if (routeThreatAssessment_Accessor) {
    return *routeThreatAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteThreatAssessment(): Unable to get RouteThreatAssessment, field not selected");
}

const uci::type::ThreatAssessmentRequestType& AssessmentRequestType::getRouteThreatAssessment() const {
  return getRouteThreatAssessment_();
}

uci::type::ThreatAssessmentRequestType& AssessmentRequestType::getRouteThreatAssessment() {
  return getRouteThreatAssessment_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setRouteThreatAssessment(const uci::type::ThreatAssessmentRequestType& accessor) {
  chooseRouteThreatAssessment("setRouteThreatAssessment", accessor.getAccessorType());
  if (&accessor != routeThreatAssessment_Accessor.get()) {
    routeThreatAssessment_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AssessmentRequestType::isRouteThreatAssessment() const noexcept {
  return static_cast<bool>(routeThreatAssessment_Accessor);
}

uci::type::ThreatAssessmentRequestType& AssessmentRequestType::chooseRouteThreatAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentRequestType : type};
  if ((!routeThreatAssessment_Accessor) || (routeThreatAssessment_Accessor->getAccessorType() != requestedType)) {
    routeThreatAssessment_Accessor = ThreatAssessmentRequestType::create(type);
    if (!routeThreatAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeThreatAssessment_Accessor;
}

uci::type::ThreatAssessmentRequestType& AssessmentRequestType::chooseRouteThreatAssessment(uci::base::accessorType::AccessorType type) {
  return chooseRouteThreatAssessment("chooseRouteThreatAssessment", type);
}

uci::type::TargetMobilityRequestType& AssessmentRequestType::getTargetMobility_() const {
  if (targetMobility_Accessor) {
    return *targetMobility_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetMobility(): Unable to get TargetMobility, field not selected");
}

const uci::type::TargetMobilityRequestType& AssessmentRequestType::getTargetMobility() const {
  return getTargetMobility_();
}

uci::type::TargetMobilityRequestType& AssessmentRequestType::getTargetMobility() {
  return getTargetMobility_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setTargetMobility(const uci::type::TargetMobilityRequestType& accessor) {
  chooseTargetMobility();
  if (&accessor != targetMobility_Accessor.get()) {
    targetMobility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestType::isTargetMobility() const noexcept {
  return static_cast<bool>(targetMobility_Accessor);
}

uci::type::TargetMobilityRequestType& AssessmentRequestType::chooseTargetMobility(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetMobilityRequestType : type};
  if ((!targetMobility_Accessor) || (targetMobility_Accessor->getAccessorType() != requestedType)) {
    targetMobility_Accessor = TargetMobilityRequestType::create(type);
    if (!targetMobility_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetMobility_Accessor;
}

uci::type::TargetMobilityRequestType& AssessmentRequestType::chooseTargetMobility(uci::base::accessorType::AccessorType type) {
  return chooseTargetMobility("chooseTargetMobility", type);
}

uci::type::VehicleThreatAssessmentRequestType& AssessmentRequestType::getVehicleThreatAssessment_() const {
  if (vehicleThreatAssessment_Accessor) {
    return *vehicleThreatAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleThreatAssessment(): Unable to get VehicleThreatAssessment, field not selected");
}

const uci::type::VehicleThreatAssessmentRequestType& AssessmentRequestType::getVehicleThreatAssessment() const {
  return getVehicleThreatAssessment_();
}

uci::type::VehicleThreatAssessmentRequestType& AssessmentRequestType::getVehicleThreatAssessment() {
  return getVehicleThreatAssessment_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setVehicleThreatAssessment(const uci::type::VehicleThreatAssessmentRequestType& accessor) {
  chooseVehicleThreatAssessment();
  if (&accessor != vehicleThreatAssessment_Accessor.get()) {
    vehicleThreatAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestType::isVehicleThreatAssessment() const noexcept {
  return static_cast<bool>(vehicleThreatAssessment_Accessor);
}

uci::type::VehicleThreatAssessmentRequestType& AssessmentRequestType::chooseVehicleThreatAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleThreatAssessmentRequestType : type};
  if ((!vehicleThreatAssessment_Accessor) || (vehicleThreatAssessment_Accessor->getAccessorType() != requestedType)) {
    vehicleThreatAssessment_Accessor = VehicleThreatAssessmentRequestType::create(type);
    if (!vehicleThreatAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleThreatAssessment_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType& AssessmentRequestType::chooseVehicleThreatAssessment(uci::base::accessorType::AccessorType type) {
  return chooseVehicleThreatAssessment("chooseVehicleThreatAssessment", type);
}

uci::type::ThreatNominationAssessmentRequestType& AssessmentRequestType::getThreatNominationAssessment_() const {
  if (threatNominationAssessment_Accessor) {
    return *threatNominationAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getThreatNominationAssessment(): Unable to get ThreatNominationAssessment, field not selected");
}

const uci::type::ThreatNominationAssessmentRequestType& AssessmentRequestType::getThreatNominationAssessment() const {
  return getThreatNominationAssessment_();
}

uci::type::ThreatNominationAssessmentRequestType& AssessmentRequestType::getThreatNominationAssessment() {
  return getThreatNominationAssessment_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setThreatNominationAssessment(const uci::type::ThreatNominationAssessmentRequestType& accessor) {
  chooseThreatNominationAssessment();
  if (&accessor != threatNominationAssessment_Accessor.get()) {
    threatNominationAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestType::isThreatNominationAssessment() const noexcept {
  return static_cast<bool>(threatNominationAssessment_Accessor);
}

uci::type::ThreatNominationAssessmentRequestType& AssessmentRequestType::chooseThreatNominationAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatNominationAssessmentRequestType : type};
  if ((!threatNominationAssessment_Accessor) || (threatNominationAssessment_Accessor->getAccessorType() != requestedType)) {
    threatNominationAssessment_Accessor = ThreatNominationAssessmentRequestType::create(type);
    if (!threatNominationAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threatNominationAssessment_Accessor;
}

uci::type::ThreatNominationAssessmentRequestType& AssessmentRequestType::chooseThreatNominationAssessment(uci::base::accessorType::AccessorType type) {
  return chooseThreatNominationAssessment("chooseThreatNominationAssessment", type);
}

uci::type::AchievabilityAssessmentRequestPET& AssessmentRequestType::getAchievabilityAssessment_() const {
  if (achievabilityAssessment_Accessor) {
    return *achievabilityAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getAchievabilityAssessment(): Unable to get AchievabilityAssessment, field not selected");
}

const uci::type::AchievabilityAssessmentRequestPET& AssessmentRequestType::getAchievabilityAssessment() const {
  return getAchievabilityAssessment_();
}

uci::type::AchievabilityAssessmentRequestPET& AssessmentRequestType::getAchievabilityAssessment() {
  return getAchievabilityAssessment_();
}

uci::type::AssessmentRequestType& AssessmentRequestType::setAchievabilityAssessment(const uci::type::AchievabilityAssessmentRequestPET& accessor) {
  chooseAchievabilityAssessment("setAchievabilityAssessment", accessor.getAccessorType());
  if (&accessor != achievabilityAssessment_Accessor.get()) {
    achievabilityAssessment_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AssessmentRequestType::isAchievabilityAssessment() const noexcept {
  return static_cast<bool>(achievabilityAssessment_Accessor);
}

uci::type::AchievabilityAssessmentRequestPET& AssessmentRequestType::chooseAchievabilityAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::achievabilityAssessmentRequestPET : type};
  if ((!achievabilityAssessment_Accessor) || (achievabilityAssessment_Accessor->getAccessorType() != requestedType)) {
    achievabilityAssessment_Accessor = AchievabilityAssessmentRequestPET::create(type);
    if (!achievabilityAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *achievabilityAssessment_Accessor;
}

uci::type::AchievabilityAssessmentRequestPET& AssessmentRequestType::chooseAchievabilityAssessment(uci::base::accessorType::AccessorType type) {
  return chooseAchievabilityAssessment("chooseAchievabilityAssessment", type);
}

std::unique_ptr<AssessmentRequestType> AssessmentRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assessmentRequestType : type};
  return (requestedType == uci::type::accessorType::assessmentRequestType) ? boost::make_unique<AssessmentRequestType>() : nullptr;
}

/**  */
namespace AssessmentRequestType_Names {

constexpr const char* Extern_Type_Name{"AssessmentRequestType"};
constexpr const char* CommPointingPlan_Name{"CommPointingPlan"};
constexpr const char* CapabilityUtilization_Name{"CapabilityUtilization"};
constexpr const char* RouteDeconfliction_Name{"RouteDeconfliction"};
constexpr const char* RouteVulnerabilityMetrics_Name{"RouteVulnerabilityMetrics"};
constexpr const char* RouteThreatAssessment_Name{"RouteThreatAssessment"};
constexpr const char* TargetMobility_Name{"TargetMobility"};
constexpr const char* VehicleThreatAssessment_Name{"VehicleThreatAssessment"};
constexpr const char* ThreatNominationAssessment_Name{"ThreatNominationAssessment"};
constexpr const char* AchievabilityAssessment_Name{"AchievabilityAssessment"};

} // namespace AssessmentRequestType_Names

void AssessmentRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AssessmentRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AssessmentRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::CommPointingPlan_Name) {
      CommPointingPlanRequestType::deserialize(valueType.second, accessor.chooseCommPointingPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::CapabilityUtilization_Name) {
      CapabilityUtilizationRequestType::deserialize(valueType.second, accessor.chooseCapabilityUtilization(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::RouteDeconfliction_Name) {
      RouteDeconflictionRequestType::deserialize(valueType.second, accessor.chooseRouteDeconfliction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::RouteVulnerabilityMetrics_Name) {
      RouteVulnerabilityMetricsRequestType::deserialize(valueType.second, accessor.chooseRouteVulnerabilityMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::RouteThreatAssessment_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseRouteThreatAssessment(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::TargetMobility_Name) {
      TargetMobilityRequestType::deserialize(valueType.second, accessor.chooseTargetMobility(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::VehicleThreatAssessment_Name) {
      VehicleThreatAssessmentRequestType::deserialize(valueType.second, accessor.chooseVehicleThreatAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::ThreatNominationAssessment_Name) {
      ThreatNominationAssessmentRequestType::deserialize(valueType.second, accessor.chooseThreatNominationAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::AchievabilityAssessment_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAchievabilityAssessment(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string AssessmentRequestType::serialize(const uci::type::AssessmentRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AssessmentRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AssessmentRequestType_Names::Extern_Type_Name);
  }
  if (accessor.isCommPointingPlan()) {
    CommPointingPlanRequestType::serialize(accessor.getCommPointingPlan(), node, AssessmentRequestType_Names::CommPointingPlan_Name);
  } else if (accessor.isCapabilityUtilization()) {
    CapabilityUtilizationRequestType::serialize(accessor.getCapabilityUtilization(), node, AssessmentRequestType_Names::CapabilityUtilization_Name);
  } else if (accessor.isRouteDeconfliction()) {
    RouteDeconflictionRequestType::serialize(accessor.getRouteDeconfliction(), node, AssessmentRequestType_Names::RouteDeconfliction_Name);
  } else if (accessor.isRouteVulnerabilityMetrics()) {
    RouteVulnerabilityMetricsRequestType::serialize(accessor.getRouteVulnerabilityMetrics(), node, AssessmentRequestType_Names::RouteVulnerabilityMetrics_Name);
  } else if (accessor.isRouteThreatAssessment()) {
    ThreatAssessmentRequestType::serialize(accessor.getRouteThreatAssessment(), node, AssessmentRequestType_Names::RouteThreatAssessment_Name);
  } else if (accessor.isTargetMobility()) {
    TargetMobilityRequestType::serialize(accessor.getTargetMobility(), node, AssessmentRequestType_Names::TargetMobility_Name);
  } else if (accessor.isVehicleThreatAssessment()) {
    VehicleThreatAssessmentRequestType::serialize(accessor.getVehicleThreatAssessment(), node, AssessmentRequestType_Names::VehicleThreatAssessment_Name);
  } else if (accessor.isThreatNominationAssessment()) {
    ThreatNominationAssessmentRequestType::serialize(accessor.getThreatNominationAssessment(), node, AssessmentRequestType_Names::ThreatNominationAssessment_Name);
  } else if (accessor.isAchievabilityAssessment()) {
    AchievabilityAssessmentRequestPET::serialize(accessor.getAchievabilityAssessment(), node, AssessmentRequestType_Names::AchievabilityAssessment_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AssessmentRequestType& AssessmentRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AssessmentRequestType>().release());
}

uci::type::AssessmentRequestType& AssessmentRequestType::create(const uci::type::AssessmentRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AssessmentRequestType> newAccessor{boost::make_unique<asb_uci::type::AssessmentRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AssessmentRequestType::destroy(uci::type::AssessmentRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::AssessmentRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

