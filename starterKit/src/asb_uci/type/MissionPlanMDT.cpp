/** @file MissionPlanMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MissionPlanMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/ExecutionSequenceType.h"
#include "../../../include/asb_uci/type/MissionPlanCommandID_ChoiceType.h"
#include "../../../include/asb_uci/type/MissionPlanID_Type.h"
#include "../../../include/asb_uci/type/MissionPlanInputsType.h"
#include "../../../include/asb_uci/type/PlanApplicabilityType.h"
#include "../../../include/asb_uci/type/PlansReferenceBaseType.h"
#include "../../../include/asb_uci/type/RemarksType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ExecutionSequenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanCommandID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanInputsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanApplicabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlansReferenceBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RemarksType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanMDT::MissionPlanMDT()
  : missionPlanID_Accessor{boost::make_unique<MissionPlanID_Type>()},
    applicability_Accessor{boost::make_unique<PlanApplicabilityType>()},
    parentMissionPlanID_Accessor{boost::make_unique<ParentMissionPlanID>(0, SIZE_MAX)},
    subordinateMissionPlanID_Accessor{boost::make_unique<SubordinateMissionPlanID>(0, SIZE_MAX)} {
}

MissionPlanMDT::~MissionPlanMDT() = default;

void MissionPlanMDT::copy(const uci::type::MissionPlanMDT& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanMDT::copyImpl(const uci::type::MissionPlanMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanMDT&>(accessor);
    setMissionPlanID(*(accessorImpl.missionPlanID_Accessor));
    if (accessorImpl.missionPlanCommandID_Accessor) {
      setMissionPlanCommandID(*(accessorImpl.missionPlanCommandID_Accessor));
    } else {
      missionPlanCommandID_Accessor.reset();
    }
    setApplicability(*(accessorImpl.applicability_Accessor));
    if (accessorImpl.window_Accessor) {
      setWindow(*(accessorImpl.window_Accessor));
    } else {
      window_Accessor.reset();
    }
    if (accessorImpl.subPlans_Accessor) {
      setSubPlans(*(accessorImpl.subPlans_Accessor));
    } else {
      subPlans_Accessor.reset();
    }
    if (accessorImpl.executionSequence_Accessor) {
      setExecutionSequence(*(accessorImpl.executionSequence_Accessor));
    } else {
      executionSequence_Accessor.reset();
    }
    setParentMissionPlanID(*(accessorImpl.parentMissionPlanID_Accessor));
    setSubordinateMissionPlanID(*(accessorImpl.subordinateMissionPlanID_Accessor));
    setForPlanningUseOnly(accessorImpl.forPlanningUseOnly_Accessor);
    if (accessorImpl.planInputs_Accessor) {
      setPlanInputs(*(accessorImpl.planInputs_Accessor));
    } else {
      planInputs_Accessor.reset();
    }
    if (accessorImpl.remarks_Accessor) {
      setRemarks(*(accessorImpl.remarks_Accessor));
    } else {
      remarks_Accessor.reset();
    }
  }
}

void MissionPlanMDT::reset() noexcept {
  missionPlanID_Accessor->reset();
  missionPlanCommandID_Accessor.reset();
  applicability_Accessor->reset();
  window_Accessor.reset();
  subPlans_Accessor.reset();
  executionSequence_Accessor.reset();
  parentMissionPlanID_Accessor->reset();
  subordinateMissionPlanID_Accessor->reset();
  forPlanningUseOnly_Accessor = false;
  planInputs_Accessor.reset();
  remarks_Accessor.reset();
}

const uci::type::MissionPlanID_Type& MissionPlanMDT::getMissionPlanID() const {
  return *missionPlanID_Accessor;
}

uci::type::MissionPlanID_Type& MissionPlanMDT::getMissionPlanID() {
  return *missionPlanID_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::setMissionPlanID(const uci::type::MissionPlanID_Type& accessor) {
  if (&accessor != missionPlanID_Accessor.get()) {
    missionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MissionPlanCommandID_ChoiceType& MissionPlanMDT::getMissionPlanCommandID_() const {
  if (missionPlanCommandID_Accessor) {
    return *missionPlanCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanCommandID(): An attempt was made to get an optional field that was not enabled, call hasMissionPlanCommandID() to determine if it is safe to call getMissionPlanCommandID()");
}

const uci::type::MissionPlanCommandID_ChoiceType& MissionPlanMDT::getMissionPlanCommandID() const {
  return getMissionPlanCommandID_();
}

uci::type::MissionPlanCommandID_ChoiceType& MissionPlanMDT::getMissionPlanCommandID() {
  return getMissionPlanCommandID_();
}

uci::type::MissionPlanMDT& MissionPlanMDT::setMissionPlanCommandID(const uci::type::MissionPlanCommandID_ChoiceType& accessor) {
  enableMissionPlanCommandID();
  if (&accessor != missionPlanCommandID_Accessor.get()) {
    missionPlanCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanMDT::hasMissionPlanCommandID() const noexcept {
  return static_cast<bool>(missionPlanCommandID_Accessor);
}

uci::type::MissionPlanCommandID_ChoiceType& MissionPlanMDT::enableMissionPlanCommandID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanCommandID_ChoiceType : type};
  if ((!missionPlanCommandID_Accessor) || (missionPlanCommandID_Accessor->getAccessorType() != requestedType)) {
    missionPlanCommandID_Accessor = MissionPlanCommandID_ChoiceType::create(requestedType);
    if (!missionPlanCommandID_Accessor) {
      throw uci::base::UCIException("Error in enableMissionPlanCommandID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanCommandID_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::clearMissionPlanCommandID() noexcept {
  missionPlanCommandID_Accessor.reset();
  return *this;
}

const uci::type::PlanApplicabilityType& MissionPlanMDT::getApplicability() const {
  return *applicability_Accessor;
}

uci::type::PlanApplicabilityType& MissionPlanMDT::getApplicability() {
  return *applicability_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::setApplicability(const uci::type::PlanApplicabilityType& accessor) {
  if (&accessor != applicability_Accessor.get()) {
    applicability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeRangeType& MissionPlanMDT::getWindow_() const {
  if (window_Accessor) {
    return *window_Accessor;
  }
  throw uci::base::UCIException("Error in getWindow(): An attempt was made to get an optional field that was not enabled, call hasWindow() to determine if it is safe to call getWindow()");
}

const uci::type::DateTimeRangeType& MissionPlanMDT::getWindow() const {
  return getWindow_();
}

uci::type::DateTimeRangeType& MissionPlanMDT::getWindow() {
  return getWindow_();
}

uci::type::MissionPlanMDT& MissionPlanMDT::setWindow(const uci::type::DateTimeRangeType& accessor) {
  enableWindow();
  if (&accessor != window_Accessor.get()) {
    window_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanMDT::hasWindow() const noexcept {
  return static_cast<bool>(window_Accessor);
}

uci::type::DateTimeRangeType& MissionPlanMDT::enableWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!window_Accessor) || (window_Accessor->getAccessorType() != requestedType)) {
    window_Accessor = DateTimeRangeType::create(requestedType);
    if (!window_Accessor) {
      throw uci::base::UCIException("Error in enableWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *window_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::clearWindow() noexcept {
  window_Accessor.reset();
  return *this;
}

uci::type::PlansReferenceBaseType& MissionPlanMDT::getSubPlans_() const {
  if (subPlans_Accessor) {
    return *subPlans_Accessor;
  }
  throw uci::base::UCIException("Error in getSubPlans(): An attempt was made to get an optional field that was not enabled, call hasSubPlans() to determine if it is safe to call getSubPlans()");
}

const uci::type::PlansReferenceBaseType& MissionPlanMDT::getSubPlans() const {
  return getSubPlans_();
}

uci::type::PlansReferenceBaseType& MissionPlanMDT::getSubPlans() {
  return getSubPlans_();
}

uci::type::MissionPlanMDT& MissionPlanMDT::setSubPlans(const uci::type::PlansReferenceBaseType& accessor) {
  enableSubPlans(accessor.getAccessorType());
  if (&accessor != subPlans_Accessor.get()) {
    subPlans_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MissionPlanMDT::hasSubPlans() const noexcept {
  return static_cast<bool>(subPlans_Accessor);
}

uci::type::PlansReferenceBaseType& MissionPlanMDT::enableSubPlans(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plansReferenceBaseType : type};
  if ((!subPlans_Accessor) || (subPlans_Accessor->getAccessorType() != requestedType)) {
    subPlans_Accessor = PlansReferenceBaseType::create(requestedType);
    if (!subPlans_Accessor) {
      throw uci::base::UCIException("Error in enableSubPlans(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subPlans_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::clearSubPlans() noexcept {
  subPlans_Accessor.reset();
  return *this;
}

uci::type::ExecutionSequenceType& MissionPlanMDT::getExecutionSequence_() const {
  if (executionSequence_Accessor) {
    return *executionSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getExecutionSequence(): An attempt was made to get an optional field that was not enabled, call hasExecutionSequence() to determine if it is safe to call getExecutionSequence()");
}

const uci::type::ExecutionSequenceType& MissionPlanMDT::getExecutionSequence() const {
  return getExecutionSequence_();
}

uci::type::ExecutionSequenceType& MissionPlanMDT::getExecutionSequence() {
  return getExecutionSequence_();
}

uci::type::MissionPlanMDT& MissionPlanMDT::setExecutionSequence(const uci::type::ExecutionSequenceType& accessor) {
  enableExecutionSequence();
  if (&accessor != executionSequence_Accessor.get()) {
    executionSequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanMDT::hasExecutionSequence() const noexcept {
  return static_cast<bool>(executionSequence_Accessor);
}

uci::type::ExecutionSequenceType& MissionPlanMDT::enableExecutionSequence(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::executionSequenceType : type};
  if ((!executionSequence_Accessor) || (executionSequence_Accessor->getAccessorType() != requestedType)) {
    executionSequence_Accessor = ExecutionSequenceType::create(requestedType);
    if (!executionSequence_Accessor) {
      throw uci::base::UCIException("Error in enableExecutionSequence(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *executionSequence_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::clearExecutionSequence() noexcept {
  executionSequence_Accessor.reset();
  return *this;
}

const uci::type::MissionPlanMDT::ParentMissionPlanID& MissionPlanMDT::getParentMissionPlanID() const {
  return *parentMissionPlanID_Accessor;
}

uci::type::MissionPlanMDT::ParentMissionPlanID& MissionPlanMDT::getParentMissionPlanID() {
  return *parentMissionPlanID_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::setParentMissionPlanID(const uci::type::MissionPlanMDT::ParentMissionPlanID& accessor) {
  if (&accessor != parentMissionPlanID_Accessor.get()) {
    parentMissionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanMDT::SubordinateMissionPlanID& MissionPlanMDT::getSubordinateMissionPlanID() const {
  return *subordinateMissionPlanID_Accessor;
}

uci::type::MissionPlanMDT::SubordinateMissionPlanID& MissionPlanMDT::getSubordinateMissionPlanID() {
  return *subordinateMissionPlanID_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::setSubordinateMissionPlanID(const uci::type::MissionPlanMDT::SubordinateMissionPlanID& accessor) {
  if (&accessor != subordinateMissionPlanID_Accessor.get()) {
    subordinateMissionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean MissionPlanMDT::getForPlanningUseOnly() const {
  return forPlanningUseOnly_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::setForPlanningUseOnly(xs::Boolean value) {
  forPlanningUseOnly_Accessor = value;
  return *this;
}


uci::type::MissionPlanInputsType& MissionPlanMDT::getPlanInputs_() const {
  if (planInputs_Accessor) {
    return *planInputs_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanInputs(): An attempt was made to get an optional field that was not enabled, call hasPlanInputs() to determine if it is safe to call getPlanInputs()");
}

const uci::type::MissionPlanInputsType& MissionPlanMDT::getPlanInputs() const {
  return getPlanInputs_();
}

uci::type::MissionPlanInputsType& MissionPlanMDT::getPlanInputs() {
  return getPlanInputs_();
}

uci::type::MissionPlanMDT& MissionPlanMDT::setPlanInputs(const uci::type::MissionPlanInputsType& accessor) {
  enablePlanInputs();
  if (&accessor != planInputs_Accessor.get()) {
    planInputs_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanMDT::hasPlanInputs() const noexcept {
  return static_cast<bool>(planInputs_Accessor);
}

uci::type::MissionPlanInputsType& MissionPlanMDT::enablePlanInputs(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanInputsType : type};
  if ((!planInputs_Accessor) || (planInputs_Accessor->getAccessorType() != requestedType)) {
    planInputs_Accessor = MissionPlanInputsType::create(requestedType);
    if (!planInputs_Accessor) {
      throw uci::base::UCIException("Error in enablePlanInputs(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planInputs_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::clearPlanInputs() noexcept {
  planInputs_Accessor.reset();
  return *this;
}

uci::type::RemarksType& MissionPlanMDT::getRemarks_() const {
  if (remarks_Accessor) {
    return *remarks_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarks(): An attempt was made to get an optional field that was not enabled, call hasRemarks() to determine if it is safe to call getRemarks()");
}

const uci::type::RemarksType& MissionPlanMDT::getRemarks() const {
  return getRemarks_();
}

uci::type::RemarksType& MissionPlanMDT::getRemarks() {
  return getRemarks_();
}

uci::type::MissionPlanMDT& MissionPlanMDT::setRemarks(const uci::type::RemarksType& accessor) {
  enableRemarks();
  if (&accessor != remarks_Accessor.get()) {
    remarks_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanMDT::hasRemarks() const noexcept {
  return static_cast<bool>(remarks_Accessor);
}

uci::type::RemarksType& MissionPlanMDT::enableRemarks(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remarksType : type};
  if ((!remarks_Accessor) || (remarks_Accessor->getAccessorType() != requestedType)) {
    remarks_Accessor = RemarksType::create(requestedType);
    if (!remarks_Accessor) {
      throw uci::base::UCIException("Error in enableRemarks(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remarks_Accessor;
}

uci::type::MissionPlanMDT& MissionPlanMDT::clearRemarks() noexcept {
  remarks_Accessor.reset();
  return *this;
}

std::unique_ptr<MissionPlanMDT> MissionPlanMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanMDT : type};
  return (requestedType == uci::type::accessorType::missionPlanMDT) ? boost::make_unique<MissionPlanMDT>() : nullptr;
}

/**  */
namespace MissionPlanMDT_Names {

constexpr const char* Extern_Type_Name{"MissionPlanMDT"};
constexpr const char* MissionPlanID_Name{"MissionPlanID"};
constexpr const char* MissionPlanCommandID_Name{"MissionPlanCommandID"};
constexpr const char* Applicability_Name{"Applicability"};
constexpr const char* Window_Name{"Window"};
constexpr const char* SubPlans_Name{"SubPlans"};
constexpr const char* ExecutionSequence_Name{"ExecutionSequence"};
constexpr const char* ParentMissionPlanID_Name{"ParentMissionPlanID"};
constexpr const char* SubordinateMissionPlanID_Name{"SubordinateMissionPlanID"};
constexpr const char* ForPlanningUseOnly_Name{"ForPlanningUseOnly"};
constexpr const char* PlanInputs_Name{"PlanInputs"};
constexpr const char* Remarks_Name{"Remarks"};

} // namespace MissionPlanMDT_Names

void MissionPlanMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::MissionPlanID_Name) {
      MissionPlanID_Type::deserialize(valueType.second, accessor.getMissionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::MissionPlanCommandID_Name) {
      MissionPlanCommandID_ChoiceType::deserialize(valueType.second, accessor.enableMissionPlanCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::Applicability_Name) {
      PlanApplicabilityType::deserialize(valueType.second, accessor.getApplicability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::Window_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::SubPlans_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSubPlans(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::ExecutionSequence_Name) {
      ExecutionSequenceType::deserialize(valueType.second, accessor.enableExecutionSequence(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::ParentMissionPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanMDT::ParentMissionPlanID& boundedList = accessor.getParentMissionPlanID();
        const uci::type::MissionPlanMDT::ParentMissionPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::SubordinateMissionPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanMDT::SubordinateMissionPlanID& boundedList = accessor.getSubordinateMissionPlanID();
        const uci::type::MissionPlanMDT::SubordinateMissionPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::ForPlanningUseOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForPlanningUseOnly(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::PlanInputs_Name) {
      MissionPlanInputsType::deserialize(valueType.second, accessor.enablePlanInputs(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMDT_Names::Remarks_Name) {
      RemarksType::deserialize(valueType.second, accessor.enableRemarks(), nodeName, nsPrefix);
    }
  }
}

std::string MissionPlanMDT::serialize(const uci::type::MissionPlanMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanMDT_Names::Extern_Type_Name);
  }
  MissionPlanID_Type::serialize(accessor.getMissionPlanID(), node, MissionPlanMDT_Names::MissionPlanID_Name);
  if (accessor.hasMissionPlanCommandID()) {
    MissionPlanCommandID_ChoiceType::serialize(accessor.getMissionPlanCommandID(), node, MissionPlanMDT_Names::MissionPlanCommandID_Name);
  }
  PlanApplicabilityType::serialize(accessor.getApplicability(), node, MissionPlanMDT_Names::Applicability_Name);
  if (accessor.hasWindow()) {
    DateTimeRangeType::serialize(accessor.getWindow(), node, MissionPlanMDT_Names::Window_Name);
  }
  if (accessor.hasSubPlans()) {
    PlansReferenceBaseType::serialize(accessor.getSubPlans(), node, MissionPlanMDT_Names::SubPlans_Name);
  }
  if (accessor.hasExecutionSequence()) {
    ExecutionSequenceType::serialize(accessor.getExecutionSequence(), node, MissionPlanMDT_Names::ExecutionSequence_Name);
  }
  {
    const uci::type::MissionPlanMDT::ParentMissionPlanID& boundedList = accessor.getParentMissionPlanID();
    for (uci::type::MissionPlanMDT::ParentMissionPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MissionPlanID_Type::serialize(boundedList.at(i), node, MissionPlanMDT_Names::ParentMissionPlanID_Name);
    }
  }
  {
    const uci::type::MissionPlanMDT::SubordinateMissionPlanID& boundedList = accessor.getSubordinateMissionPlanID();
    for (uci::type::MissionPlanMDT::SubordinateMissionPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MissionPlanID_Type::serialize(boundedList.at(i), node, MissionPlanMDT_Names::SubordinateMissionPlanID_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getForPlanningUseOnly(), node, MissionPlanMDT_Names::ForPlanningUseOnly_Name);
  if (accessor.hasPlanInputs()) {
    MissionPlanInputsType::serialize(accessor.getPlanInputs(), node, MissionPlanMDT_Names::PlanInputs_Name);
  }
  if (accessor.hasRemarks()) {
    RemarksType::serialize(accessor.getRemarks(), node, MissionPlanMDT_Names::Remarks_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanMDT& MissionPlanMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanMDT>().release());
}

uci::type::MissionPlanMDT& MissionPlanMDT::create(const uci::type::MissionPlanMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanMDT> newAccessor{boost::make_unique<asb_uci::type::MissionPlanMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanMDT::destroy(uci::type::MissionPlanMDT& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanMDT*>(&accessor);
}

} // namespace type

} // namespace uci

