/** @file EntitySignalSummaryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntitySignalSummaryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/SignalID_Type.h"
#include "asb_uci/type/SignalSummaryType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EntitySignalSummaryType.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SignalSummaryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntitySignalSummaryType::EntitySignalSummaryType()
  : signalDescription_Accessor{boost::make_unique<SignalSummaryType>()} {
}

EntitySignalSummaryType::~EntitySignalSummaryType() = default;

void EntitySignalSummaryType::copy(const uci::type::EntitySignalSummaryType& accessor) {
  copyImpl(accessor, false);
}

void EntitySignalSummaryType::copyImpl(const uci::type::EntitySignalSummaryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntitySignalSummaryType&>(accessor);
    setSignalDescription(*(accessorImpl.signalDescription_Accessor));
    if (accessorImpl.hasLatestDetectionTimestamp()) {
      setLatestDetectionTimestamp(accessorImpl.getLatestDetectionTimestamp());
    } else {
      clearLatestDetectionTimestamp();
    }
    if (accessorImpl.signalID_Accessor) {
      setSignalID(*(accessorImpl.signalID_Accessor));
    } else {
      signalID_Accessor.reset();
    }
  }
}

void EntitySignalSummaryType::reset() noexcept {
  signalDescription_Accessor->reset();
  clearLatestDetectionTimestamp();
  signalID_Accessor.reset();
}

const uci::type::SignalSummaryType& EntitySignalSummaryType::getSignalDescription() const {
  return *signalDescription_Accessor;
}

uci::type::SignalSummaryType& EntitySignalSummaryType::getSignalDescription() {
  return *signalDescription_Accessor;
}

uci::type::EntitySignalSummaryType& EntitySignalSummaryType::setSignalDescription(const uci::type::SignalSummaryType& accessor) {
  if (&accessor != signalDescription_Accessor.get()) {
    signalDescription_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue EntitySignalSummaryType::getLatestDetectionTimestamp() const {
  if (latestDetectionTimestamp_Accessor) {
    return *latestDetectionTimestamp_Accessor;
  }
  throw uci::base::UCIException("Error in getLatestDetectionTimestamp(): An attempt was made to get an optional field that was not enabled, call hasLatestDetectionTimestamp() to determine if it is safe to call getLatestDetectionTimestamp()");
}

uci::type::EntitySignalSummaryType& EntitySignalSummaryType::setLatestDetectionTimestamp(uci::type::DateTimeTypeValue value) {
  latestDetectionTimestamp_Accessor = value;
  return *this;
}

bool EntitySignalSummaryType::hasLatestDetectionTimestamp() const noexcept {
  return latestDetectionTimestamp_Accessor.has_value();
}

uci::type::EntitySignalSummaryType& EntitySignalSummaryType::clearLatestDetectionTimestamp() noexcept {
  latestDetectionTimestamp_Accessor.reset();
  return *this;
}

uci::type::SignalID_Type& EntitySignalSummaryType::getSignalID_() const {
  if (signalID_Accessor) {
    return *signalID_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalID(): An attempt was made to get an optional field that was not enabled, call hasSignalID() to determine if it is safe to call getSignalID()");
}

const uci::type::SignalID_Type& EntitySignalSummaryType::getSignalID() const {
  return getSignalID_();
}

uci::type::SignalID_Type& EntitySignalSummaryType::getSignalID() {
  return getSignalID_();
}

uci::type::EntitySignalSummaryType& EntitySignalSummaryType::setSignalID(const uci::type::SignalID_Type& accessor) {
  enableSignalID();
  if (&accessor != signalID_Accessor.get()) {
    signalID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySignalSummaryType::hasSignalID() const noexcept {
  return static_cast<bool>(signalID_Accessor);
}

uci::type::SignalID_Type& EntitySignalSummaryType::enableSignalID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalID_Type : type};
  if ((!signalID_Accessor) || (signalID_Accessor->getAccessorType() != requestedType)) {
    signalID_Accessor = SignalID_Type::create(requestedType);
    if (!signalID_Accessor) {
      throw uci::base::UCIException("Error in enableSignalID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalID_Accessor;
}

uci::type::EntitySignalSummaryType& EntitySignalSummaryType::clearSignalID() noexcept {
  signalID_Accessor.reset();
  return *this;
}

std::unique_ptr<EntitySignalSummaryType> EntitySignalSummaryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entitySignalSummaryType : type};
  return (requestedType == uci::type::accessorType::entitySignalSummaryType) ? boost::make_unique<EntitySignalSummaryType>() : nullptr;
}

/**  */
namespace EntitySignalSummaryType_Names {

constexpr const char* Extern_Type_Name{"EntitySignalSummaryType"};
constexpr const char* SignalDescription_Name{"SignalDescription"};
constexpr const char* LatestDetectionTimestamp_Name{"LatestDetectionTimestamp"};
constexpr const char* SignalID_Name{"SignalID"};

} // namespace EntitySignalSummaryType_Names

void EntitySignalSummaryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntitySignalSummaryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntitySignalSummaryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntitySignalSummaryType_Names::SignalDescription_Name) {
      SignalSummaryType::deserialize(valueType.second, accessor.getSignalDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySignalSummaryType_Names::LatestDetectionTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLatestDetectionTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + EntitySignalSummaryType_Names::SignalID_Name) {
      SignalID_Type::deserialize(valueType.second, accessor.enableSignalID(), nodeName, nsPrefix);
    }
  }
}

std::string EntitySignalSummaryType::serialize(const uci::type::EntitySignalSummaryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntitySignalSummaryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntitySignalSummaryType_Names::Extern_Type_Name);
  }
  SignalSummaryType::serialize(accessor.getSignalDescription(), node, EntitySignalSummaryType_Names::SignalDescription_Name);
  if (accessor.hasLatestDetectionTimestamp()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getLatestDetectionTimestamp(), node, EntitySignalSummaryType_Names::LatestDetectionTimestamp_Name);
  }
  if (accessor.hasSignalID()) {
    SignalID_Type::serialize(accessor.getSignalID(), node, EntitySignalSummaryType_Names::SignalID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntitySignalSummaryType& EntitySignalSummaryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntitySignalSummaryType>().release());
}

uci::type::EntitySignalSummaryType& EntitySignalSummaryType::create(const uci::type::EntitySignalSummaryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntitySignalSummaryType> newAccessor{boost::make_unique<asb_uci::type::EntitySignalSummaryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntitySignalSummaryType::destroy(uci::type::EntitySignalSummaryType& accessor) {
  delete dynamic_cast<asb_uci::type::EntitySignalSummaryType*>(&accessor);
}

} // namespace type

} // namespace uci

