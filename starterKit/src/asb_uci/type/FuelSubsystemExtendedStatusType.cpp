/** @file FuelSubsystemExtendedStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FuelSubsystemExtendedStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FuelCenterOfGravityType.h"
#include "asb_uci/type/RefuelingStatusType.h"
#include "asb_uci/type/SubsystemExtendedStatusPET.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FuelCenterOfGravityType.h"
#include "uci/type/FuelSubsystemExtendedStatusType.h"
#include "uci/type/RefuelingStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FuelSubsystemExtendedStatusType::FuelSubsystemExtendedStatusType() = default;

FuelSubsystemExtendedStatusType::~FuelSubsystemExtendedStatusType() = default;

void FuelSubsystemExtendedStatusType::copy(const uci::type::FuelSubsystemExtendedStatusType& accessor) {
  copyImpl(accessor, false);
}

void FuelSubsystemExtendedStatusType::copyImpl(const uci::type::FuelSubsystemExtendedStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SubsystemExtendedStatusPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const FuelSubsystemExtendedStatusType&>(accessor);
    if (accessorImpl.fuelCenterOfGravity_Accessor) {
      setFuelCenterOfGravity(*(accessorImpl.fuelCenterOfGravity_Accessor));
    } else {
      fuelCenterOfGravity_Accessor.reset();
    }
    if (accessorImpl.refuelingStatus_Accessor) {
      setRefuelingStatus(*(accessorImpl.refuelingStatus_Accessor));
    } else {
      refuelingStatus_Accessor.reset();
    }
  }
}

void FuelSubsystemExtendedStatusType::reset() noexcept {
  SubsystemExtendedStatusPET::reset();
  fuelCenterOfGravity_Accessor.reset();
  refuelingStatus_Accessor.reset();
}

uci::type::FuelCenterOfGravityType& FuelSubsystemExtendedStatusType::getFuelCenterOfGravity_() const {
  if (fuelCenterOfGravity_Accessor) {
    return *fuelCenterOfGravity_Accessor;
  }
  throw uci::base::UCIException("Error in getFuelCenterOfGravity(): An attempt was made to get an optional field that was not enabled, call hasFuelCenterOfGravity() to determine if it is safe to call getFuelCenterOfGravity()");
}

const uci::type::FuelCenterOfGravityType& FuelSubsystemExtendedStatusType::getFuelCenterOfGravity() const {
  return getFuelCenterOfGravity_();
}

uci::type::FuelCenterOfGravityType& FuelSubsystemExtendedStatusType::getFuelCenterOfGravity() {
  return getFuelCenterOfGravity_();
}

uci::type::FuelSubsystemExtendedStatusType& FuelSubsystemExtendedStatusType::setFuelCenterOfGravity(const uci::type::FuelCenterOfGravityType& accessor) {
  enableFuelCenterOfGravity();
  if (&accessor != fuelCenterOfGravity_Accessor.get()) {
    fuelCenterOfGravity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FuelSubsystemExtendedStatusType::hasFuelCenterOfGravity() const noexcept {
  return static_cast<bool>(fuelCenterOfGravity_Accessor);
}

uci::type::FuelCenterOfGravityType& FuelSubsystemExtendedStatusType::enableFuelCenterOfGravity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fuelCenterOfGravityType : type};
  if ((!fuelCenterOfGravity_Accessor) || (fuelCenterOfGravity_Accessor->getAccessorType() != requestedType)) {
    fuelCenterOfGravity_Accessor = FuelCenterOfGravityType::create(requestedType);
    if (!fuelCenterOfGravity_Accessor) {
      throw uci::base::UCIException("Error in enableFuelCenterOfGravity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fuelCenterOfGravity_Accessor;
}

uci::type::FuelSubsystemExtendedStatusType& FuelSubsystemExtendedStatusType::clearFuelCenterOfGravity() noexcept {
  fuelCenterOfGravity_Accessor.reset();
  return *this;
}

uci::type::RefuelingStatusType& FuelSubsystemExtendedStatusType::getRefuelingStatus_() const {
  if (refuelingStatus_Accessor) {
    return *refuelingStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getRefuelingStatus(): An attempt was made to get an optional field that was not enabled, call hasRefuelingStatus() to determine if it is safe to call getRefuelingStatus()");
}

const uci::type::RefuelingStatusType& FuelSubsystemExtendedStatusType::getRefuelingStatus() const {
  return getRefuelingStatus_();
}

uci::type::RefuelingStatusType& FuelSubsystemExtendedStatusType::getRefuelingStatus() {
  return getRefuelingStatus_();
}

uci::type::FuelSubsystemExtendedStatusType& FuelSubsystemExtendedStatusType::setRefuelingStatus(const uci::type::RefuelingStatusType& accessor) {
  enableRefuelingStatus();
  if (&accessor != refuelingStatus_Accessor.get()) {
    refuelingStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FuelSubsystemExtendedStatusType::hasRefuelingStatus() const noexcept {
  return static_cast<bool>(refuelingStatus_Accessor);
}

uci::type::RefuelingStatusType& FuelSubsystemExtendedStatusType::enableRefuelingStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelingStatusType : type};
  if ((!refuelingStatus_Accessor) || (refuelingStatus_Accessor->getAccessorType() != requestedType)) {
    refuelingStatus_Accessor = RefuelingStatusType::create(requestedType);
    if (!refuelingStatus_Accessor) {
      throw uci::base::UCIException("Error in enableRefuelingStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *refuelingStatus_Accessor;
}

uci::type::FuelSubsystemExtendedStatusType& FuelSubsystemExtendedStatusType::clearRefuelingStatus() noexcept {
  refuelingStatus_Accessor.reset();
  return *this;
}

std::unique_ptr<FuelSubsystemExtendedStatusType> FuelSubsystemExtendedStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fuelSubsystemExtendedStatusType : type};
  return (requestedType == uci::type::accessorType::fuelSubsystemExtendedStatusType) ? boost::make_unique<FuelSubsystemExtendedStatusType>() : nullptr;
}

/**  */
namespace FuelSubsystemExtendedStatusType_Names {

constexpr const char* Extern_Type_Name{"FuelSubsystemExtendedStatusType"};
constexpr const char* FuelCenterOfGravity_Name{"FuelCenterOfGravity"};
constexpr const char* RefuelingStatus_Name{"RefuelingStatus"};

} // namespace FuelSubsystemExtendedStatusType_Names

void FuelSubsystemExtendedStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FuelSubsystemExtendedStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FuelSubsystemExtendedStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FuelSubsystemExtendedStatusType_Names::FuelCenterOfGravity_Name) {
      FuelCenterOfGravityType::deserialize(valueType.second, accessor.enableFuelCenterOfGravity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FuelSubsystemExtendedStatusType_Names::RefuelingStatus_Name) {
      RefuelingStatusType::deserialize(valueType.second, accessor.enableRefuelingStatus(), nodeName, nsPrefix);
    }
  }
  SubsystemExtendedStatusPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string FuelSubsystemExtendedStatusType::serialize(const uci::type::FuelSubsystemExtendedStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FuelSubsystemExtendedStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FuelSubsystemExtendedStatusType_Names::Extern_Type_Name);
  }
  SubsystemExtendedStatusPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasFuelCenterOfGravity()) {
    FuelCenterOfGravityType::serialize(accessor.getFuelCenterOfGravity(), node, FuelSubsystemExtendedStatusType_Names::FuelCenterOfGravity_Name);
  }
  if (accessor.hasRefuelingStatus()) {
    RefuelingStatusType::serialize(accessor.getRefuelingStatus(), node, FuelSubsystemExtendedStatusType_Names::RefuelingStatus_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FuelSubsystemExtendedStatusType& FuelSubsystemExtendedStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FuelSubsystemExtendedStatusType>().release());
}

uci::type::FuelSubsystemExtendedStatusType& FuelSubsystemExtendedStatusType::create(const uci::type::FuelSubsystemExtendedStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FuelSubsystemExtendedStatusType> newAccessor{boost::make_unique<asb_uci::type::FuelSubsystemExtendedStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FuelSubsystemExtendedStatusType::destroy(uci::type::FuelSubsystemExtendedStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::FuelSubsystemExtendedStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

