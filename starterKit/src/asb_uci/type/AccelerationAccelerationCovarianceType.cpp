/** @file AccelerationAccelerationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AccelerationAccelerationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AccelerationAccelerationCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AccelerationAccelerationCovarianceType::AccelerationAccelerationCovarianceType() = default;

AccelerationAccelerationCovarianceType::~AccelerationAccelerationCovarianceType() = default;

void AccelerationAccelerationCovarianceType::copy(const uci::type::AccelerationAccelerationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void AccelerationAccelerationCovarianceType::copyImpl(const uci::type::AccelerationAccelerationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AccelerationAccelerationCovarianceType&>(accessor);
    setAnAn(accessorImpl.anAn_Accessor);
    setAnAe(accessorImpl.anAe_Accessor);
    if (accessorImpl.hasAnAd()) {
      setAnAd(accessorImpl.getAnAd());
    } else {
      clearAnAd();
    }
    setAeAe(accessorImpl.aeAe_Accessor);
    if (accessorImpl.hasAeAd()) {
      setAeAd(accessorImpl.getAeAd());
    } else {
      clearAeAd();
    }
    if (accessorImpl.hasAdAd()) {
      setAdAd(accessorImpl.getAdAd());
    } else {
      clearAdAd();
    }
  }
}

void AccelerationAccelerationCovarianceType::reset() noexcept {
  anAn_Accessor = 0.0;
  anAe_Accessor = 0.0;
  clearAnAd();
  aeAe_Accessor = 0.0;
  clearAeAd();
  clearAdAd();
}

xs::Double AccelerationAccelerationCovarianceType::getAnAn() const {
  return anAn_Accessor;
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::setAnAn(xs::Double value) {
  anAn_Accessor = value;
  return *this;
}


xs::Double AccelerationAccelerationCovarianceType::getAnAe() const {
  return anAe_Accessor;
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::setAnAe(xs::Double value) {
  anAe_Accessor = value;
  return *this;
}


xs::Double AccelerationAccelerationCovarianceType::getAnAd() const {
  if (anAd_Accessor) {
    return *anAd_Accessor;
  }
  throw uci::base::UCIException("Error in getAnAd(): An attempt was made to get an optional field that was not enabled, call hasAnAd() to determine if it is safe to call getAnAd()");
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::setAnAd(xs::Double value) {
  anAd_Accessor = value;
  return *this;
}

bool AccelerationAccelerationCovarianceType::hasAnAd() const noexcept {
  return anAd_Accessor.has_value();
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::clearAnAd() noexcept {
  anAd_Accessor.reset();
  return *this;
}

xs::Double AccelerationAccelerationCovarianceType::getAeAe() const {
  return aeAe_Accessor;
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::setAeAe(xs::Double value) {
  aeAe_Accessor = value;
  return *this;
}


xs::Double AccelerationAccelerationCovarianceType::getAeAd() const {
  if (aeAd_Accessor) {
    return *aeAd_Accessor;
  }
  throw uci::base::UCIException("Error in getAeAd(): An attempt was made to get an optional field that was not enabled, call hasAeAd() to determine if it is safe to call getAeAd()");
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::setAeAd(xs::Double value) {
  aeAd_Accessor = value;
  return *this;
}

bool AccelerationAccelerationCovarianceType::hasAeAd() const noexcept {
  return aeAd_Accessor.has_value();
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::clearAeAd() noexcept {
  aeAd_Accessor.reset();
  return *this;
}

xs::Double AccelerationAccelerationCovarianceType::getAdAd() const {
  if (adAd_Accessor) {
    return *adAd_Accessor;
  }
  throw uci::base::UCIException("Error in getAdAd(): An attempt was made to get an optional field that was not enabled, call hasAdAd() to determine if it is safe to call getAdAd()");
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::setAdAd(xs::Double value) {
  adAd_Accessor = value;
  return *this;
}

bool AccelerationAccelerationCovarianceType::hasAdAd() const noexcept {
  return adAd_Accessor.has_value();
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::clearAdAd() noexcept {
  adAd_Accessor.reset();
  return *this;
}

std::unique_ptr<AccelerationAccelerationCovarianceType> AccelerationAccelerationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accelerationAccelerationCovarianceType : type};
  return (requestedType == uci::type::accessorType::accelerationAccelerationCovarianceType) ? boost::make_unique<AccelerationAccelerationCovarianceType>() : nullptr;
}

/**  */
namespace AccelerationAccelerationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"AccelerationAccelerationCovarianceType"};
constexpr const char* AnAn_Name{"AnAn"};
constexpr const char* AnAe_Name{"AnAe"};
constexpr const char* AnAd_Name{"AnAd"};
constexpr const char* AeAe_Name{"AeAe"};
constexpr const char* AeAd_Name{"AeAd"};
constexpr const char* AdAd_Name{"AdAd"};

} // namespace AccelerationAccelerationCovarianceType_Names

void AccelerationAccelerationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AccelerationAccelerationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AccelerationAccelerationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AccelerationAccelerationCovarianceType_Names::AnAn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAnAn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AccelerationAccelerationCovarianceType_Names::AnAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAnAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AccelerationAccelerationCovarianceType_Names::AnAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAnAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AccelerationAccelerationCovarianceType_Names::AeAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAeAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AccelerationAccelerationCovarianceType_Names::AeAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAeAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AccelerationAccelerationCovarianceType_Names::AdAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAdAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string AccelerationAccelerationCovarianceType::serialize(const uci::type::AccelerationAccelerationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AccelerationAccelerationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AccelerationAccelerationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAnAn(), node, AccelerationAccelerationCovarianceType_Names::AnAn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAnAe(), node, AccelerationAccelerationCovarianceType_Names::AnAe_Name);
  if (accessor.hasAnAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAnAd(), node, AccelerationAccelerationCovarianceType_Names::AnAd_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAeAe(), node, AccelerationAccelerationCovarianceType_Names::AeAe_Name);
  if (accessor.hasAeAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAeAd(), node, AccelerationAccelerationCovarianceType_Names::AeAd_Name);
  }
  if (accessor.hasAdAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAdAd(), node, AccelerationAccelerationCovarianceType_Names::AdAd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AccelerationAccelerationCovarianceType>().release());
}

uci::type::AccelerationAccelerationCovarianceType& AccelerationAccelerationCovarianceType::create(const uci::type::AccelerationAccelerationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AccelerationAccelerationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::AccelerationAccelerationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AccelerationAccelerationCovarianceType::destroy(uci::type::AccelerationAccelerationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::AccelerationAccelerationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

