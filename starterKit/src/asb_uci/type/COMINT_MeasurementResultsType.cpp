/** @file COMINT_MeasurementResultsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/COMINT_MeasurementResultsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FrequencyDataType.h"
#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/COMINT_MeasurementResultsType.h"
#include "uci/type/FrequencyDataType.h"
#include "uci/type/ModulationEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_MeasurementResultsType::COMINT_MeasurementResultsType() = default;

COMINT_MeasurementResultsType::~COMINT_MeasurementResultsType() = default;

void COMINT_MeasurementResultsType::copy(const uci::type::COMINT_MeasurementResultsType& accessor) {
  copyImpl(accessor, false);
}

void COMINT_MeasurementResultsType::copyImpl(const uci::type::COMINT_MeasurementResultsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const COMINT_MeasurementResultsType&>(accessor);
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
    if (accessorImpl.modulation_Accessor) {
      setModulation(*(accessorImpl.modulation_Accessor));
    } else {
      modulation_Accessor.reset();
    }
  }
}

void COMINT_MeasurementResultsType::reset() noexcept {
  frequency_Accessor.reset();
  modulation_Accessor.reset();
}

uci::type::FrequencyDataType& COMINT_MeasurementResultsType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::FrequencyDataType& COMINT_MeasurementResultsType::getFrequency() const {
  return getFrequency_();
}

uci::type::FrequencyDataType& COMINT_MeasurementResultsType::getFrequency() {
  return getFrequency_();
}

uci::type::COMINT_MeasurementResultsType& COMINT_MeasurementResultsType::setFrequency(const uci::type::FrequencyDataType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_MeasurementResultsType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::FrequencyDataType& COMINT_MeasurementResultsType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyDataType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = FrequencyDataType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::COMINT_MeasurementResultsType& COMINT_MeasurementResultsType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

uci::type::ModulationEnum& COMINT_MeasurementResultsType::getModulation_() const {
  if (modulation_Accessor) {
    return *modulation_Accessor;
  }
  throw uci::base::UCIException("Error in getModulation(): An attempt was made to get an optional field that was not enabled, call hasModulation() to determine if it is safe to call getModulation()");
}

const uci::type::ModulationEnum& COMINT_MeasurementResultsType::getModulation() const {
  return getModulation_();
}

uci::type::ModulationEnum& COMINT_MeasurementResultsType::getModulation() {
  return getModulation_();
}

uci::type::COMINT_MeasurementResultsType& COMINT_MeasurementResultsType::setModulation(const uci::type::ModulationEnum& accessor) {
  enableModulation();
  if (&accessor != modulation_Accessor.get()) {
    modulation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::COMINT_MeasurementResultsType& COMINT_MeasurementResultsType::setModulation(const uci::type::ModulationEnum::EnumerationItem value) {
  enableModulation().setValue(value);
  return *this;
}

bool COMINT_MeasurementResultsType::hasModulation() const noexcept {
  return static_cast<bool>(modulation_Accessor);
}

uci::type::ModulationEnum& COMINT_MeasurementResultsType::enableModulation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationEnum : type};
  if ((!modulation_Accessor) || (modulation_Accessor->getAccessorType() != requestedType)) {
    modulation_Accessor = ModulationEnum::create(requestedType);
    if (!modulation_Accessor) {
      throw uci::base::UCIException("Error in enableModulation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modulation_Accessor;
}

uci::type::COMINT_MeasurementResultsType& COMINT_MeasurementResultsType::clearModulation() noexcept {
  modulation_Accessor.reset();
  return *this;
}

std::unique_ptr<COMINT_MeasurementResultsType> COMINT_MeasurementResultsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_MeasurementResultsType : type};
  return (requestedType == uci::type::accessorType::cOMINT_MeasurementResultsType) ? boost::make_unique<COMINT_MeasurementResultsType>() : nullptr;
}

/**  */
namespace COMINT_MeasurementResultsType_Names {

constexpr const char* Extern_Type_Name{"COMINT_MeasurementResultsType"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* Modulation_Name{"Modulation"};

} // namespace COMINT_MeasurementResultsType_Names

void COMINT_MeasurementResultsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_MeasurementResultsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_MeasurementResultsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_MeasurementResultsType_Names::Frequency_Name) {
      FrequencyDataType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_MeasurementResultsType_Names::Modulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableModulation().setValueFromName(*value);
      }
    }
  }
}

std::string COMINT_MeasurementResultsType::serialize(const uci::type::COMINT_MeasurementResultsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_MeasurementResultsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_MeasurementResultsType_Names::Extern_Type_Name);
  }
  if (accessor.hasFrequency()) {
    FrequencyDataType::serialize(accessor.getFrequency(), node, COMINT_MeasurementResultsType_Names::Frequency_Name);
  }
  if (accessor.hasModulation()) {
    ModulationEnum::serialize(accessor.getModulation(), node, COMINT_MeasurementResultsType_Names::Modulation_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_MeasurementResultsType& COMINT_MeasurementResultsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_MeasurementResultsType>().release());
}

uci::type::COMINT_MeasurementResultsType& COMINT_MeasurementResultsType::create(const uci::type::COMINT_MeasurementResultsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_MeasurementResultsType> newAccessor{boost::make_unique<asb_uci::type::COMINT_MeasurementResultsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_MeasurementResultsType::destroy(uci::type::COMINT_MeasurementResultsType& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_MeasurementResultsType*>(&accessor);
}

} // namespace type

} // namespace uci

