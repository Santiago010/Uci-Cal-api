/** @file SAR_DynamicImageParametersType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SAR_DynamicImageParametersType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DynamicImageProcessingEnum.h"
#include "asb_uci/type/SAR_ProcessingParametersType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DoublePositiveType.h"
#include "uci/type/DynamicImageProcessingEnum.h"
#include "uci/type/PercentType.h"
#include "uci/type/SAR_DynamicImageParametersType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_DynamicImageParametersType::SAR_DynamicImageParametersType()
  : dynamicProcessingType_Accessor{boost::make_unique<DynamicImageProcessingEnum>()} {
}

SAR_DynamicImageParametersType::~SAR_DynamicImageParametersType() = default;

void SAR_DynamicImageParametersType::copy(const uci::type::SAR_DynamicImageParametersType& accessor) {
  copyImpl(accessor, false);
}

void SAR_DynamicImageParametersType::copyImpl(const uci::type::SAR_DynamicImageParametersType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SAR_ProcessingParametersType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SAR_DynamicImageParametersType&>(accessor);
    setNumSubApertures(accessorImpl.numSubApertures_Accessor);
    setPercentAperture(accessorImpl.percentAperture_Accessor);
    setResampleFactor(accessorImpl.resampleFactor_Accessor);
    setEqualizeResolution(accessorImpl.equalizeResolution_Accessor);
    setDynamicProcessingType(*(accessorImpl.dynamicProcessingType_Accessor));
  }
}

void SAR_DynamicImageParametersType::reset() noexcept {
  SAR_ProcessingParametersType::reset();
  numSubApertures_Accessor = 0;
  percentAperture_Accessor = 0.0;
  resampleFactor_Accessor = 0.0;
  equalizeResolution_Accessor = false;
  dynamicProcessingType_Accessor->reset();
}

xs::UnsignedByte SAR_DynamicImageParametersType::getNumSubApertures() const {
  return numSubApertures_Accessor;
}

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::setNumSubApertures(xs::UnsignedByte value) {
  numSubApertures_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue SAR_DynamicImageParametersType::getPercentAperture() const {
  return percentAperture_Accessor;
}

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::setPercentAperture(uci::type::PercentTypeValue value) {
  percentAperture_Accessor = value;
  return *this;
}


uci::type::DoublePositiveTypeValue SAR_DynamicImageParametersType::getResampleFactor() const {
  return resampleFactor_Accessor;
}

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::setResampleFactor(uci::type::DoublePositiveTypeValue value) {
  resampleFactor_Accessor = value;
  return *this;
}


xs::Boolean SAR_DynamicImageParametersType::getEqualizeResolution() const {
  return equalizeResolution_Accessor;
}

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::setEqualizeResolution(xs::Boolean value) {
  equalizeResolution_Accessor = value;
  return *this;
}


const uci::type::DynamicImageProcessingEnum& SAR_DynamicImageParametersType::getDynamicProcessingType() const {
  return *dynamicProcessingType_Accessor;
}

uci::type::DynamicImageProcessingEnum& SAR_DynamicImageParametersType::getDynamicProcessingType() {
  return *dynamicProcessingType_Accessor;
}

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::setDynamicProcessingType(const uci::type::DynamicImageProcessingEnum& accessor) {
  if (&accessor != dynamicProcessingType_Accessor.get()) {
    dynamicProcessingType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::setDynamicProcessingType(uci::type::DynamicImageProcessingEnum::EnumerationItem value) {
  dynamicProcessingType_Accessor->setValue(value);
  return *this;
}


std::unique_ptr<SAR_DynamicImageParametersType> SAR_DynamicImageParametersType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_DynamicImageParametersType : type};
  return (requestedType == uci::type::accessorType::sAR_DynamicImageParametersType) ? boost::make_unique<SAR_DynamicImageParametersType>() : nullptr;
}

/**  */
namespace SAR_DynamicImageParametersType_Names {

constexpr const char* Extern_Type_Name{"SAR_DynamicImageParametersType"};
constexpr const char* NumSubApertures_Name{"NumSubApertures"};
constexpr const char* PercentAperture_Name{"PercentAperture"};
constexpr const char* ResampleFactor_Name{"ResampleFactor"};
constexpr const char* EqualizeResolution_Name{"EqualizeResolution"};
constexpr const char* DynamicProcessingType_Name{"DynamicProcessingType"};

} // namespace SAR_DynamicImageParametersType_Names

void SAR_DynamicImageParametersType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_DynamicImageParametersType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_DynamicImageParametersType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_DynamicImageParametersType_Names::NumSubApertures_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumSubApertures(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_DynamicImageParametersType_Names::PercentAperture_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAperture(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_DynamicImageParametersType_Names::ResampleFactor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResampleFactor(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_DynamicImageParametersType_Names::EqualizeResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEqualizeResolution(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_DynamicImageParametersType_Names::DynamicProcessingType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDynamicProcessingType().setValueFromName(*value);
      }
    }
  }
  SAR_ProcessingParametersType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SAR_DynamicImageParametersType::serialize(const uci::type::SAR_DynamicImageParametersType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_DynamicImageParametersType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_DynamicImageParametersType_Names::Extern_Type_Name);
  }
  SAR_ProcessingParametersType::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getNumSubApertures(), node, SAR_DynamicImageParametersType_Names::NumSubApertures_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAperture(), node, SAR_DynamicImageParametersType_Names::PercentAperture_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getResampleFactor(), node, SAR_DynamicImageParametersType_Names::ResampleFactor_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEqualizeResolution(), node, SAR_DynamicImageParametersType_Names::EqualizeResolution_Name);
  DynamicImageProcessingEnum::serialize(accessor.getDynamicProcessingType(), node, SAR_DynamicImageParametersType_Names::DynamicProcessingType_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_DynamicImageParametersType>().release());
}

uci::type::SAR_DynamicImageParametersType& SAR_DynamicImageParametersType::create(const uci::type::SAR_DynamicImageParametersType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_DynamicImageParametersType> newAccessor{boost::make_unique<asb_uci::type::SAR_DynamicImageParametersType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_DynamicImageParametersType::destroy(uci::type::SAR_DynamicImageParametersType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_DynamicImageParametersType*>(&accessor);
}

} // namespace type

} // namespace uci

