/** @file PO_TechniqueSettingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_TechniqueSettingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PO_TechniqueEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TechniqueEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TechniqueSettingType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_TechniqueSettingType::PO_TechniqueSettingType()
  : technique_Accessor{boost::make_unique<PO_TechniqueEnum>()} {
}

PO_TechniqueSettingType::~PO_TechniqueSettingType() = default;

void PO_TechniqueSettingType::copy(const uci::type::PO_TechniqueSettingType& accessor) {
  copyImpl(accessor, false);
}

void PO_TechniqueSettingType::copyImpl(const uci::type::PO_TechniqueSettingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_TechniqueSettingType&>(accessor);
    setTechnique(*(accessorImpl.technique_Accessor));
    if (accessorImpl.hasIntensityValue()) {
      setIntensityValue(accessorImpl.getIntensityValue());
    } else {
      clearIntensityValue();
    }
    if (accessorImpl.hasConstellationValue()) {
      setConstellationValue(accessorImpl.getConstellationValue());
    } else {
      clearConstellationValue();
    }
    if (accessorImpl.hasStrideValue()) {
      setStrideValue(accessorImpl.getStrideValue());
    } else {
      clearStrideValue();
    }
    if (accessorImpl.hasPointIntensityValue()) {
      setPointIntensityValue(accessorImpl.getPointIntensityValue());
    } else {
      clearPointIntensityValue();
    }
    if (accessorImpl.hasEdgeIntensityValue()) {
      setEdgeIntensityValue(accessorImpl.getEdgeIntensityValue());
    } else {
      clearEdgeIntensityValue();
    }
    if (accessorImpl.hasFalseAlarmLevel()) {
      setFalseAlarmLevel(accessorImpl.getFalseAlarmLevel());
    } else {
      clearFalseAlarmLevel();
    }
  }
}

void PO_TechniqueSettingType::reset() noexcept {
  technique_Accessor->reset();
  clearIntensityValue();
  clearConstellationValue();
  clearStrideValue();
  clearPointIntensityValue();
  clearEdgeIntensityValue();
  clearFalseAlarmLevel();
}

const uci::type::PO_TechniqueEnum& PO_TechniqueSettingType::getTechnique() const {
  return *technique_Accessor;
}

uci::type::PO_TechniqueEnum& PO_TechniqueSettingType::getTechnique() {
  return *technique_Accessor;
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setTechnique(const uci::type::PO_TechniqueEnum& accessor) {
  if (&accessor != technique_Accessor.get()) {
    technique_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setTechnique(uci::type::PO_TechniqueEnum::EnumerationItem value) {
  technique_Accessor->setValue(value);
  return *this;
}


xs::Float PO_TechniqueSettingType::getIntensityValue() const {
  if (intensityValue_Accessor) {
    return *intensityValue_Accessor;
  }
  throw uci::base::UCIException("Error in getIntensityValue(): An attempt was made to get an optional field that was not enabled, call hasIntensityValue() to determine if it is safe to call getIntensityValue()");
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setIntensityValue(xs::Float value) {
  intensityValue_Accessor = value;
  return *this;
}

bool PO_TechniqueSettingType::hasIntensityValue() const noexcept {
  return intensityValue_Accessor.has_value();
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::clearIntensityValue() noexcept {
  intensityValue_Accessor.reset();
  return *this;
}

xs::Float PO_TechniqueSettingType::getConstellationValue() const {
  if (constellationValue_Accessor) {
    return *constellationValue_Accessor;
  }
  throw uci::base::UCIException("Error in getConstellationValue(): An attempt was made to get an optional field that was not enabled, call hasConstellationValue() to determine if it is safe to call getConstellationValue()");
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setConstellationValue(xs::Float value) {
  constellationValue_Accessor = value;
  return *this;
}

bool PO_TechniqueSettingType::hasConstellationValue() const noexcept {
  return constellationValue_Accessor.has_value();
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::clearConstellationValue() noexcept {
  constellationValue_Accessor.reset();
  return *this;
}

xs::Float PO_TechniqueSettingType::getStrideValue() const {
  if (strideValue_Accessor) {
    return *strideValue_Accessor;
  }
  throw uci::base::UCIException("Error in getStrideValue(): An attempt was made to get an optional field that was not enabled, call hasStrideValue() to determine if it is safe to call getStrideValue()");
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setStrideValue(xs::Float value) {
  strideValue_Accessor = value;
  return *this;
}

bool PO_TechniqueSettingType::hasStrideValue() const noexcept {
  return strideValue_Accessor.has_value();
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::clearStrideValue() noexcept {
  strideValue_Accessor.reset();
  return *this;
}

xs::Float PO_TechniqueSettingType::getPointIntensityValue() const {
  if (pointIntensityValue_Accessor) {
    return *pointIntensityValue_Accessor;
  }
  throw uci::base::UCIException("Error in getPointIntensityValue(): An attempt was made to get an optional field that was not enabled, call hasPointIntensityValue() to determine if it is safe to call getPointIntensityValue()");
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setPointIntensityValue(xs::Float value) {
  pointIntensityValue_Accessor = value;
  return *this;
}

bool PO_TechniqueSettingType::hasPointIntensityValue() const noexcept {
  return pointIntensityValue_Accessor.has_value();
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::clearPointIntensityValue() noexcept {
  pointIntensityValue_Accessor.reset();
  return *this;
}

xs::Float PO_TechniqueSettingType::getEdgeIntensityValue() const {
  if (edgeIntensityValue_Accessor) {
    return *edgeIntensityValue_Accessor;
  }
  throw uci::base::UCIException("Error in getEdgeIntensityValue(): An attempt was made to get an optional field that was not enabled, call hasEdgeIntensityValue() to determine if it is safe to call getEdgeIntensityValue()");
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setEdgeIntensityValue(xs::Float value) {
  edgeIntensityValue_Accessor = value;
  return *this;
}

bool PO_TechniqueSettingType::hasEdgeIntensityValue() const noexcept {
  return edgeIntensityValue_Accessor.has_value();
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::clearEdgeIntensityValue() noexcept {
  edgeIntensityValue_Accessor.reset();
  return *this;
}

xs::UnsignedByte PO_TechniqueSettingType::getFalseAlarmLevel() const {
  if (falseAlarmLevel_Accessor) {
    return *falseAlarmLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getFalseAlarmLevel(): An attempt was made to get an optional field that was not enabled, call hasFalseAlarmLevel() to determine if it is safe to call getFalseAlarmLevel()");
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::setFalseAlarmLevel(xs::UnsignedByte value) {
  falseAlarmLevel_Accessor = value;
  return *this;
}

bool PO_TechniqueSettingType::hasFalseAlarmLevel() const noexcept {
  return falseAlarmLevel_Accessor.has_value();
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::clearFalseAlarmLevel() noexcept {
  falseAlarmLevel_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_TechniqueSettingType> PO_TechniqueSettingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TechniqueSettingType : type};
  return (requestedType == uci::type::accessorType::pO_TechniqueSettingType) ? boost::make_unique<PO_TechniqueSettingType>() : nullptr;
}

/**  */
namespace PO_TechniqueSettingType_Names {

constexpr const char* Extern_Type_Name{"PO_TechniqueSettingType"};
constexpr const char* Technique_Name{"Technique"};
constexpr const char* IntensityValue_Name{"IntensityValue"};
constexpr const char* ConstellationValue_Name{"ConstellationValue"};
constexpr const char* StrideValue_Name{"StrideValue"};
constexpr const char* PointIntensityValue_Name{"PointIntensityValue"};
constexpr const char* EdgeIntensityValue_Name{"EdgeIntensityValue"};
constexpr const char* FalseAlarmLevel_Name{"FalseAlarmLevel"};

} // namespace PO_TechniqueSettingType_Names

void PO_TechniqueSettingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TechniqueSettingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_TechniqueSettingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_TechniqueSettingType_Names::Technique_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTechnique().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TechniqueSettingType_Names::IntensityValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIntensityValue(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_TechniqueSettingType_Names::ConstellationValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConstellationValue(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_TechniqueSettingType_Names::StrideValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStrideValue(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_TechniqueSettingType_Names::PointIntensityValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPointIntensityValue(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_TechniqueSettingType_Names::EdgeIntensityValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEdgeIntensityValue(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_TechniqueSettingType_Names::FalseAlarmLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFalseAlarmLevel(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    }
  }
}

std::string PO_TechniqueSettingType::serialize(const uci::type::PO_TechniqueSettingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_TechniqueSettingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_TechniqueSettingType_Names::Extern_Type_Name);
  }
  PO_TechniqueEnum::serialize(accessor.getTechnique(), node, PO_TechniqueSettingType_Names::Technique_Name, false);
  if (accessor.hasIntensityValue()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getIntensityValue(), node, PO_TechniqueSettingType_Names::IntensityValue_Name);
  }
  if (accessor.hasConstellationValue()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getConstellationValue(), node, PO_TechniqueSettingType_Names::ConstellationValue_Name);
  }
  if (accessor.hasStrideValue()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getStrideValue(), node, PO_TechniqueSettingType_Names::StrideValue_Name);
  }
  if (accessor.hasPointIntensityValue()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getPointIntensityValue(), node, PO_TechniqueSettingType_Names::PointIntensityValue_Name);
  }
  if (accessor.hasEdgeIntensityValue()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getEdgeIntensityValue(), node, PO_TechniqueSettingType_Names::EdgeIntensityValue_Name);
  }
  if (accessor.hasFalseAlarmLevel()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getFalseAlarmLevel(), node, PO_TechniqueSettingType_Names::FalseAlarmLevel_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_TechniqueSettingType>().release());
}

uci::type::PO_TechniqueSettingType& PO_TechniqueSettingType::create(const uci::type::PO_TechniqueSettingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_TechniqueSettingType> newAccessor{boost::make_unique<asb_uci::type::PO_TechniqueSettingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_TechniqueSettingType::destroy(uci::type::PO_TechniqueSettingType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_TechniqueSettingType*>(&accessor);
}

} // namespace type

} // namespace uci

