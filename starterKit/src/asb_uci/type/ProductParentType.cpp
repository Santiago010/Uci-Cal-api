/** @file ProductParentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ProductParentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RequestID_Type.h"
#include "../../../include/asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductParentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementInstanceID_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductParentType::ProductParentType() = default;

ProductParentType::~ProductParentType() = default;

void ProductParentType::copy(const uci::type::ProductParentType& accessor) {
  copyImpl(accessor, false);
}

void ProductParentType::copyImpl(const uci::type::ProductParentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductParentType&>(accessor);
    if (accessorImpl.requirementID_Accessor) {
      setRequirementID(*(accessorImpl.requirementID_Accessor));
    } else {
      requirementID_Accessor.reset();
    }
    if (accessorImpl.productProcessingRequestID_Accessor) {
      setProductProcessingRequestID(*(accessorImpl.productProcessingRequestID_Accessor));
    } else {
      productProcessingRequestID_Accessor.reset();
    }
  }
}

void ProductParentType::reset() noexcept {
  requirementID_Accessor.reset();
  productProcessingRequestID_Accessor.reset();
}

uci::type::ProductParentType::ProductParentTypeChoice ProductParentType::getProductParentTypeChoiceOrdinal() const noexcept {
  if (requirementID_Accessor) {
    return PRODUCTPARENTTYPE_CHOICE_REQUIREMENTID;
  }
  if (productProcessingRequestID_Accessor) {
    return PRODUCTPARENTTYPE_CHOICE_PRODUCTPROCESSINGREQUESTID;
  }
  return PRODUCTPARENTTYPE_CHOICE_NONE;
}

uci::type::ProductParentType& ProductParentType::setProductParentTypeChoiceOrdinal(uci::type::ProductParentType::ProductParentTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PRODUCTPARENTTYPE_CHOICE_REQUIREMENTID:
      chooseRequirementID("setProductParentTypeChoiceOrdinal", type);
      break;
    case PRODUCTPARENTTYPE_CHOICE_PRODUCTPROCESSINGREQUESTID:
      chooseProductProcessingRequestID();
      break;
    default:
      throw uci::base::UCIException("Error in setProductParentTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RequirementInstanceID_ChoiceType& ProductParentType::getRequirementID_() const {
  if (requirementID_Accessor) {
    return *requirementID_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementID(): Unable to get RequirementID, field not selected");
}

const uci::type::RequirementInstanceID_ChoiceType& ProductParentType::getRequirementID() const {
  return getRequirementID_();
}

uci::type::RequirementInstanceID_ChoiceType& ProductParentType::getRequirementID() {
  return getRequirementID_();
}

uci::type::ProductParentType& ProductParentType::setRequirementID(const uci::type::RequirementInstanceID_ChoiceType& accessor) {
  chooseRequirementID(accessor.getAccessorType());
  if (&accessor != requirementID_Accessor.get()) {
    requirementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductParentType::isRequirementID() const noexcept {
  return static_cast<bool>(requirementID_Accessor);
}

uci::type::RequirementInstanceID_ChoiceType& ProductParentType::chooseRequirementID(const std::string& method, uci::base::accessorType::AccessorType type) {
  productProcessingRequestID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementInstanceID_ChoiceType : type};
  if ((!requirementID_Accessor) || (requirementID_Accessor->getAccessorType() != requestedType)) {
    requirementID_Accessor = RequirementInstanceID_ChoiceType::create(type);
    if (!requirementID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementID_Accessor;
}

uci::type::RequirementInstanceID_ChoiceType& ProductParentType::chooseRequirementID(uci::base::accessorType::AccessorType type) {
  return chooseRequirementID("chooseRequirementID", type);
}

uci::type::ProductParentType::ProductProcessingRequestID& ProductParentType::getProductProcessingRequestID_() const {
  if (productProcessingRequestID_Accessor) {
    return *productProcessingRequestID_Accessor;
  }
  throw uci::base::UCIException("Error in getProductProcessingRequestID(): Unable to get ProductProcessingRequestID, field not selected");
}

const uci::type::ProductParentType::ProductProcessingRequestID& ProductParentType::getProductProcessingRequestID() const {
  return getProductProcessingRequestID_();
}

uci::type::ProductParentType::ProductProcessingRequestID& ProductParentType::getProductProcessingRequestID() {
  return getProductProcessingRequestID_();
}

uci::type::ProductParentType& ProductParentType::setProductProcessingRequestID(const uci::type::ProductParentType::ProductProcessingRequestID& accessor) {
  chooseProductProcessingRequestID();
  if (&accessor != productProcessingRequestID_Accessor.get()) {
    productProcessingRequestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductParentType::isProductProcessingRequestID() const noexcept {
  return static_cast<bool>(productProcessingRequestID_Accessor);
}

uci::type::ProductParentType::ProductProcessingRequestID& ProductParentType::chooseProductProcessingRequestID() {
  requirementID_Accessor.reset();
  if (!productProcessingRequestID_Accessor) {
    productProcessingRequestID_Accessor = boost::make_unique<ProductProcessingRequestID>(1, SIZE_MAX);
  }
  return *productProcessingRequestID_Accessor;
}

std::unique_ptr<ProductParentType> ProductParentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productParentType : type};
  return (requestedType == uci::type::accessorType::productParentType) ? boost::make_unique<ProductParentType>() : nullptr;
}

/**  */
namespace ProductParentType_Names {

constexpr const char* Extern_Type_Name{"ProductParentType"};
constexpr const char* RequirementID_Name{"RequirementID"};
constexpr const char* ProductProcessingRequestID_Name{"ProductProcessingRequestID"};

} // namespace ProductParentType_Names

void ProductParentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductParentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductParentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductParentType_Names::RequirementID_Name) {
      RequirementInstanceID_ChoiceType::deserialize(valueType.second, accessor.chooseRequirementID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductParentType_Names::ProductProcessingRequestID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductParentType::ProductProcessingRequestID& boundedList = accessor.chooseProductProcessingRequestID();
        const uci::type::ProductParentType::ProductProcessingRequestID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequestID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ProductParentType::serialize(const uci::type::ProductParentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductParentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductParentType_Names::Extern_Type_Name);
  }
  if (accessor.isRequirementID()) {
    RequirementInstanceID_ChoiceType::serialize(accessor.getRequirementID(), node, ProductParentType_Names::RequirementID_Name);
  } else if (accessor.isProductProcessingRequestID()) {
    {
      const uci::type::ProductParentType::ProductProcessingRequestID& boundedList = accessor.getProductProcessingRequestID();
      for (uci::type::ProductParentType::ProductProcessingRequestID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::RequestID_Type::serialize(boundedList.at(i), node, ProductParentType_Names::ProductProcessingRequestID_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductParentType& ProductParentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductParentType>().release());
}

uci::type::ProductParentType& ProductParentType::create(const uci::type::ProductParentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductParentType> newAccessor{boost::make_unique<asb_uci::type::ProductParentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductParentType::destroy(uci::type::ProductParentType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductParentType*>(&accessor);
}

} // namespace type

} // namespace uci

