/** @file SECTGA_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SECTGA_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString13OnlyType.h"
#include "../../../include/asb_uci/type/AlphanumericDashSpaceUnderscoreString16OnlyType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AlphanumericDashSpaceUnderscoreString13OnlyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AlphanumericDashSpaceUnderscoreString16OnlyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SECTGA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SECTGA_Type::SECTGA_Type() = default;

SECTGA_Type::~SECTGA_Type() = default;

void SECTGA_Type::copy(const uci::type::SECTGA_Type& accessor) {
  copyImpl(accessor, false);
}

void SECTGA_Type::copyImpl(const uci::type::SECTGA_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SECTGA_Type&>(accessor);
    if (accessorImpl.sEC_Identifier_Accessor) {
      setSEC_Identifier(*(accessorImpl.sEC_Identifier_Accessor));
    } else {
      sEC_Identifier_Accessor.reset();
    }
    if (accessorImpl.sEC_BE_Accessor) {
      setSEC_BE(*(accessorImpl.sEC_BE_Accessor));
    } else {
      sEC_BE_Accessor.reset();
    }
  }
}

void SECTGA_Type::reset() noexcept {
  sEC_Identifier_Accessor.reset();
  sEC_BE_Accessor.reset();
}

uci::type::AlphanumericDashSpaceUnderscoreString13OnlyType& SECTGA_Type::getSEC_Identifier_() const {
  if (sEC_Identifier_Accessor) {
    return *sEC_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getSEC_Identifier(): An attempt was made to get an optional field that was not enabled, call hasSEC_Identifier() to determine if it is safe to call getSEC_Identifier()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString13OnlyType& SECTGA_Type::getSEC_Identifier() const {
  return getSEC_Identifier_();
}

uci::type::AlphanumericDashSpaceUnderscoreString13OnlyType& SECTGA_Type::getSEC_Identifier() {
  return getSEC_Identifier_();
}

uci::type::SECTGA_Type& SECTGA_Type::setSEC_Identifier(const uci::type::AlphanumericDashSpaceUnderscoreString13OnlyType& value) {
  return setSEC_Identifier(value.c_str());
}

uci::type::SECTGA_Type& SECTGA_Type::setSEC_Identifier(const std::string& value) {
  return setSEC_Identifier(value.c_str());
}

uci::type::SECTGA_Type& SECTGA_Type::setSEC_Identifier(const char* value) {
  enableSEC_Identifier().setStringValue(value);
  return *this;
}

bool SECTGA_Type::hasSEC_Identifier() const noexcept {
  return static_cast<bool>(sEC_Identifier_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString13OnlyType& SECTGA_Type::enableSEC_Identifier(uci::base::accessorType::AccessorType type) {
  if (!sEC_Identifier_Accessor) {
    sEC_Identifier_Accessor = AlphanumericDashSpaceUnderscoreString13OnlyType::create(type);
  }
  return *sEC_Identifier_Accessor;
}

uci::type::SECTGA_Type& SECTGA_Type::clearSEC_Identifier() noexcept {
  sEC_Identifier_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString16OnlyType& SECTGA_Type::getSEC_BE_() const {
  if (sEC_BE_Accessor) {
    return *sEC_BE_Accessor;
  }
  throw uci::base::UCIException("Error in getSEC_BE(): An attempt was made to get an optional field that was not enabled, call hasSEC_BE() to determine if it is safe to call getSEC_BE()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString16OnlyType& SECTGA_Type::getSEC_BE() const {
  return getSEC_BE_();
}

uci::type::AlphanumericDashSpaceUnderscoreString16OnlyType& SECTGA_Type::getSEC_BE() {
  return getSEC_BE_();
}

uci::type::SECTGA_Type& SECTGA_Type::setSEC_BE(const uci::type::AlphanumericDashSpaceUnderscoreString16OnlyType& value) {
  return setSEC_BE(value.c_str());
}

uci::type::SECTGA_Type& SECTGA_Type::setSEC_BE(const std::string& value) {
  return setSEC_BE(value.c_str());
}

uci::type::SECTGA_Type& SECTGA_Type::setSEC_BE(const char* value) {
  enableSEC_BE().setStringValue(value);
  return *this;
}

bool SECTGA_Type::hasSEC_BE() const noexcept {
  return static_cast<bool>(sEC_BE_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString16OnlyType& SECTGA_Type::enableSEC_BE(uci::base::accessorType::AccessorType type) {
  if (!sEC_BE_Accessor) {
    sEC_BE_Accessor = AlphanumericDashSpaceUnderscoreString16OnlyType::create(type);
  }
  return *sEC_BE_Accessor;
}

uci::type::SECTGA_Type& SECTGA_Type::clearSEC_BE() noexcept {
  sEC_BE_Accessor.reset();
  return *this;
}

std::unique_ptr<SECTGA_Type> SECTGA_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sECTGA_Type : type};
  return (requestedType == uci::type::accessorType::sECTGA_Type) ? boost::make_unique<SECTGA_Type>() : nullptr;
}

/**  */
namespace SECTGA_Type_Names {

constexpr const char* Extern_Type_Name{"SECTGA_Type"};
constexpr const char* SEC_Identifier_Name{"SEC_Identifier"};
constexpr const char* SEC_BE_Name{"SEC_BE"};

} // namespace SECTGA_Type_Names

void SECTGA_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::SECTGA_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SECTGA_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SECTGA_Type_Names::SEC_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSEC_Identifier(*value);
      }
    } else if (valueType.first == nsPrefix + SECTGA_Type_Names::SEC_BE_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSEC_BE(*value);
      }
    }
  }
}

std::string SECTGA_Type::serialize(const uci::type::SECTGA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SECTGA_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SECTGA_Type_Names::Extern_Type_Name);
  }
  if (accessor.hasSEC_Identifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSEC_Identifier(), node, SECTGA_Type_Names::SEC_Identifier_Name);
  }
  if (accessor.hasSEC_BE()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSEC_BE(), node, SECTGA_Type_Names::SEC_BE_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SECTGA_Type& SECTGA_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SECTGA_Type>().release());
}

uci::type::SECTGA_Type& SECTGA_Type::create(const uci::type::SECTGA_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SECTGA_Type> newAccessor{boost::make_unique<asb_uci::type::SECTGA_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SECTGA_Type::destroy(uci::type::SECTGA_Type& accessor) {
  delete dynamic_cast<asb_uci::type::SECTGA_Type*>(&accessor);
}

} // namespace type

} // namespace uci

