/** @file DamageSummaryMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DamageSummaryMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DamageReportID_Type.h"
#include "asb_uci/type/DamageSubjectType.h"
#include "asb_uci/type/DamageSummaryID_Type.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DamageReportID_Type.h"
#include "uci/type/DamageSubjectType.h"
#include "uci/type/DamageSummaryID_Type.h"
#include "uci/type/DamageSummaryMDT.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageSummaryMDT::DamageSummaryMDT()
  : damageSummaryID_Accessor{boost::make_unique<DamageSummaryID_Type>()},
    subject_Accessor{boost::make_unique<DamageSubjectType>()},
    damageReportID_Accessor{boost::make_unique<DamageReportID>(1, SIZE_MAX)} {
}

DamageSummaryMDT::~DamageSummaryMDT() = default;

void DamageSummaryMDT::copy(const uci::type::DamageSummaryMDT& accessor) {
  copyImpl(accessor, false);
}

void DamageSummaryMDT::copyImpl(const uci::type::DamageSummaryMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageSummaryMDT&>(accessor);
    setDamageSummaryID(*(accessorImpl.damageSummaryID_Accessor));
    setSummaryCompletionTime(accessorImpl.summaryCompletionTime_Accessor);
    setSubject(*(accessorImpl.subject_Accessor));
    if (accessorImpl.summaryZone_Accessor) {
      setSummaryZone(*(accessorImpl.summaryZone_Accessor));
    } else {
      summaryZone_Accessor.reset();
    }
    setDamageReportID(*(accessorImpl.damageReportID_Accessor));
  }
}

void DamageSummaryMDT::reset() noexcept {
  damageSummaryID_Accessor->reset();
  summaryCompletionTime_Accessor = 0;
  subject_Accessor->reset();
  summaryZone_Accessor.reset();
  damageReportID_Accessor->reset();
}

const uci::type::DamageSummaryID_Type& DamageSummaryMDT::getDamageSummaryID() const {
  return *damageSummaryID_Accessor;
}

uci::type::DamageSummaryID_Type& DamageSummaryMDT::getDamageSummaryID() {
  return *damageSummaryID_Accessor;
}

uci::type::DamageSummaryMDT& DamageSummaryMDT::setDamageSummaryID(const uci::type::DamageSummaryID_Type& accessor) {
  if (&accessor != damageSummaryID_Accessor.get()) {
    damageSummaryID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue DamageSummaryMDT::getSummaryCompletionTime() const {
  return summaryCompletionTime_Accessor;
}

uci::type::DamageSummaryMDT& DamageSummaryMDT::setSummaryCompletionTime(uci::type::DateTimeTypeValue value) {
  summaryCompletionTime_Accessor = value;
  return *this;
}


const uci::type::DamageSubjectType& DamageSummaryMDT::getSubject() const {
  return *subject_Accessor;
}

uci::type::DamageSubjectType& DamageSummaryMDT::getSubject() {
  return *subject_Accessor;
}

uci::type::DamageSummaryMDT& DamageSummaryMDT::setSubject(const uci::type::DamageSubjectType& accessor) {
  if (&accessor != subject_Accessor.get()) {
    subject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ZoneType& DamageSummaryMDT::getSummaryZone_() const {
  if (summaryZone_Accessor) {
    return *summaryZone_Accessor;
  }
  throw uci::base::UCIException("Error in getSummaryZone(): An attempt was made to get an optional field that was not enabled, call hasSummaryZone() to determine if it is safe to call getSummaryZone()");
}

const uci::type::ZoneType& DamageSummaryMDT::getSummaryZone() const {
  return getSummaryZone_();
}

uci::type::ZoneType& DamageSummaryMDT::getSummaryZone() {
  return getSummaryZone_();
}

uci::type::DamageSummaryMDT& DamageSummaryMDT::setSummaryZone(const uci::type::ZoneType& accessor) {
  enableSummaryZone(accessor.getAccessorType());
  if (&accessor != summaryZone_Accessor.get()) {
    summaryZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageSummaryMDT::hasSummaryZone() const noexcept {
  return static_cast<bool>(summaryZone_Accessor);
}

uci::type::ZoneType& DamageSummaryMDT::enableSummaryZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!summaryZone_Accessor) || (summaryZone_Accessor->getAccessorType() != requestedType)) {
    summaryZone_Accessor = ZoneType::create(requestedType);
    if (!summaryZone_Accessor) {
      throw uci::base::UCIException("Error in enableSummaryZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *summaryZone_Accessor;
}

uci::type::DamageSummaryMDT& DamageSummaryMDT::clearSummaryZone() noexcept {
  summaryZone_Accessor.reset();
  return *this;
}

const uci::type::DamageSummaryMDT::DamageReportID& DamageSummaryMDT::getDamageReportID() const {
  return *damageReportID_Accessor;
}

uci::type::DamageSummaryMDT::DamageReportID& DamageSummaryMDT::getDamageReportID() {
  return *damageReportID_Accessor;
}

uci::type::DamageSummaryMDT& DamageSummaryMDT::setDamageReportID(const uci::type::DamageSummaryMDT::DamageReportID& accessor) {
  if (&accessor != damageReportID_Accessor.get()) {
    damageReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<DamageSummaryMDT> DamageSummaryMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageSummaryMDT : type};
  return (requestedType == uci::type::accessorType::damageSummaryMDT) ? boost::make_unique<DamageSummaryMDT>() : nullptr;
}

/**  */
namespace DamageSummaryMDT_Names {

constexpr const char* Extern_Type_Name{"DamageSummaryMDT"};
constexpr const char* DamageSummaryID_Name{"DamageSummaryID"};
constexpr const char* SummaryCompletionTime_Name{"SummaryCompletionTime"};
constexpr const char* Subject_Name{"Subject"};
constexpr const char* SummaryZone_Name{"SummaryZone"};
constexpr const char* DamageReportID_Name{"DamageReportID"};

} // namespace DamageSummaryMDT_Names

void DamageSummaryMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageSummaryMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageSummaryMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageSummaryMDT_Names::DamageSummaryID_Name) {
      DamageSummaryID_Type::deserialize(valueType.second, accessor.getDamageSummaryID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageSummaryMDT_Names::SummaryCompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSummaryCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + DamageSummaryMDT_Names::Subject_Name) {
      DamageSubjectType::deserialize(valueType.second, accessor.getSubject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageSummaryMDT_Names::SummaryZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSummaryZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageSummaryMDT_Names::DamageReportID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageSummaryMDT::DamageReportID& boundedList = accessor.getDamageReportID();
        const uci::type::DamageSummaryMDT::DamageReportID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DamageReportID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string DamageSummaryMDT::serialize(const uci::type::DamageSummaryMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageSummaryMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageSummaryMDT_Names::Extern_Type_Name);
  }
  DamageSummaryID_Type::serialize(accessor.getDamageSummaryID(), node, DamageSummaryMDT_Names::DamageSummaryID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getSummaryCompletionTime(), node, DamageSummaryMDT_Names::SummaryCompletionTime_Name);
  DamageSubjectType::serialize(accessor.getSubject(), node, DamageSummaryMDT_Names::Subject_Name);
  if (accessor.hasSummaryZone()) {
    ZoneType::serialize(accessor.getSummaryZone(), node, DamageSummaryMDT_Names::SummaryZone_Name);
  }
  {
    const uci::type::DamageSummaryMDT::DamageReportID& boundedList = accessor.getDamageReportID();
    for (uci::type::DamageSummaryMDT::DamageReportID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DamageReportID_Type::serialize(boundedList.at(i), node, DamageSummaryMDT_Names::DamageReportID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageSummaryMDT& DamageSummaryMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageSummaryMDT>().release());
}

uci::type::DamageSummaryMDT& DamageSummaryMDT::create(const uci::type::DamageSummaryMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageSummaryMDT> newAccessor{boost::make_unique<asb_uci::type::DamageSummaryMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageSummaryMDT::destroy(uci::type::DamageSummaryMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DamageSummaryMDT*>(&accessor);
}

} // namespace type

} // namespace uci

