/** @file StoreCarriageCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StoreCarriageCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/StoreInformationBaseType.h"
#include "asb_uci/type/StoreVerificationStatusType.h"
#include "asb_uci/type/SupportCapabilityID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/StoreCarriageCapabilityType.h"
#include "uci/type/StoreInformationBaseType.h"
#include "uci/type/StoreVerificationStatusType.h"
#include "uci/type/SupportCapabilityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StoreCarriageCapabilityType::StoreCarriageCapabilityType()
  : supportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID_Type>()},
    carriageInformation_Accessor{boost::make_unique<StoreInformationBaseType>()} {
}

StoreCarriageCapabilityType::~StoreCarriageCapabilityType() = default;

void StoreCarriageCapabilityType::copy(const uci::type::StoreCarriageCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void StoreCarriageCapabilityType::copyImpl(const uci::type::StoreCarriageCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StoreCarriageCapabilityType&>(accessor);
    setSupportCapabilityID(*(accessorImpl.supportCapabilityID_Accessor));
    setCarriageInformation(*(accessorImpl.carriageInformation_Accessor));
    if (accessorImpl.verification_Accessor) {
      setVerification(*(accessorImpl.verification_Accessor));
    } else {
      verification_Accessor.reset();
    }
  }
}

void StoreCarriageCapabilityType::reset() noexcept {
  supportCapabilityID_Accessor->reset();
  if (carriageInformation_Accessor->getAccessorType() != uci::type::accessorType::storeInformationBaseType) {
    carriageInformation_Accessor = boost::make_unique<StoreInformationBaseType>();
  } else {
    carriageInformation_Accessor->reset();
  }
  verification_Accessor.reset();
}

const uci::type::SupportCapabilityID_Type& StoreCarriageCapabilityType::getSupportCapabilityID() const {
  return *supportCapabilityID_Accessor;
}

uci::type::SupportCapabilityID_Type& StoreCarriageCapabilityType::getSupportCapabilityID() {
  return *supportCapabilityID_Accessor;
}

uci::type::StoreCarriageCapabilityType& StoreCarriageCapabilityType::setSupportCapabilityID(const uci::type::SupportCapabilityID_Type& accessor) {
  if (&accessor != supportCapabilityID_Accessor.get()) {
    supportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::StoreInformationBaseType& StoreCarriageCapabilityType::getCarriageInformation() const {
  return *carriageInformation_Accessor;
}

uci::type::StoreInformationBaseType& StoreCarriageCapabilityType::getCarriageInformation() {
  return *carriageInformation_Accessor;
}

uci::type::StoreCarriageCapabilityType& StoreCarriageCapabilityType::setCarriageInformation(const uci::type::StoreInformationBaseType& accessor) {
  enableCarriageInformation(accessor.getAccessorType());
  if (&accessor != carriageInformation_Accessor.get()) {
    carriageInformation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::StoreInformationBaseType& StoreCarriageCapabilityType::enableCarriageInformation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeInformationBaseType : type};
  if ((!carriageInformation_Accessor) || (carriageInformation_Accessor->getAccessorType() != requestedType)) {
    carriageInformation_Accessor = StoreInformationBaseType::create(requestedType);
    if (!carriageInformation_Accessor) {
      throw uci::base::UCIException("Error in enableCarriageInformation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *carriageInformation_Accessor;
}

uci::type::StoreVerificationStatusType& StoreCarriageCapabilityType::getVerification_() const {
  if (verification_Accessor) {
    return *verification_Accessor;
  }
  throw uci::base::UCIException("Error in getVerification(): An attempt was made to get an optional field that was not enabled, call hasVerification() to determine if it is safe to call getVerification()");
}

const uci::type::StoreVerificationStatusType& StoreCarriageCapabilityType::getVerification() const {
  return getVerification_();
}

uci::type::StoreVerificationStatusType& StoreCarriageCapabilityType::getVerification() {
  return getVerification_();
}

uci::type::StoreCarriageCapabilityType& StoreCarriageCapabilityType::setVerification(const uci::type::StoreVerificationStatusType& accessor) {
  enableVerification();
  if (&accessor != verification_Accessor.get()) {
    verification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StoreCarriageCapabilityType::hasVerification() const noexcept {
  return static_cast<bool>(verification_Accessor);
}

uci::type::StoreVerificationStatusType& StoreCarriageCapabilityType::enableVerification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeVerificationStatusType : type};
  if ((!verification_Accessor) || (verification_Accessor->getAccessorType() != requestedType)) {
    verification_Accessor = StoreVerificationStatusType::create(requestedType);
    if (!verification_Accessor) {
      throw uci::base::UCIException("Error in enableVerification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *verification_Accessor;
}

uci::type::StoreCarriageCapabilityType& StoreCarriageCapabilityType::clearVerification() noexcept {
  verification_Accessor.reset();
  return *this;
}

std::unique_ptr<StoreCarriageCapabilityType> StoreCarriageCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeCarriageCapabilityType : type};
  return (requestedType == uci::type::accessorType::storeCarriageCapabilityType) ? boost::make_unique<StoreCarriageCapabilityType>() : nullptr;
}

/**  */
namespace StoreCarriageCapabilityType_Names {

constexpr const char* Extern_Type_Name{"StoreCarriageCapabilityType"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* CarriageInformation_Name{"CarriageInformation"};
constexpr const char* Verification_Name{"Verification"};

} // namespace StoreCarriageCapabilityType_Names

void StoreCarriageCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StoreCarriageCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StoreCarriageCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StoreCarriageCapabilityType_Names::SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.getSupportCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreCarriageCapabilityType_Names::CarriageInformation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCarriageInformation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreCarriageCapabilityType_Names::Verification_Name) {
      StoreVerificationStatusType::deserialize(valueType.second, accessor.enableVerification(), nodeName, nsPrefix);
    }
  }
}

std::string StoreCarriageCapabilityType::serialize(const uci::type::StoreCarriageCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StoreCarriageCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StoreCarriageCapabilityType_Names::Extern_Type_Name);
  }
  SupportCapabilityID_Type::serialize(accessor.getSupportCapabilityID(), node, StoreCarriageCapabilityType_Names::SupportCapabilityID_Name);
  StoreInformationBaseType::serialize(accessor.getCarriageInformation(), node, StoreCarriageCapabilityType_Names::CarriageInformation_Name);
  if (accessor.hasVerification()) {
    StoreVerificationStatusType::serialize(accessor.getVerification(), node, StoreCarriageCapabilityType_Names::Verification_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StoreCarriageCapabilityType& StoreCarriageCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StoreCarriageCapabilityType>().release());
}

uci::type::StoreCarriageCapabilityType& StoreCarriageCapabilityType::create(const uci::type::StoreCarriageCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StoreCarriageCapabilityType> newAccessor{boost::make_unique<asb_uci::type::StoreCarriageCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StoreCarriageCapabilityType::destroy(uci::type::StoreCarriageCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::StoreCarriageCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

