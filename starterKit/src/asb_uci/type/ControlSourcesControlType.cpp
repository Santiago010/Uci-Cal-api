/** @file ControlSourcesControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ControlSourcesControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ControlSourcesCapabilityControlType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ControlSourcesCapabilityControlType.h"
#include "uci/type/ControlSourcesControlType.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ControlSourcesControlType::ControlSourcesControlType() = default;

ControlSourcesControlType::~ControlSourcesControlType() = default;

void ControlSourcesControlType::copy(const uci::type::ControlSourcesControlType& accessor) {
  copyImpl(accessor, false);
}

void ControlSourcesControlType::copyImpl(const uci::type::ControlSourcesControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ControlSourcesControlType&>(accessor);
    if (accessorImpl.controllerSystemID_Accessor) {
      setControllerSystemID(*(accessorImpl.controllerSystemID_Accessor));
    } else {
      controllerSystemID_Accessor.reset();
    }
    if (accessorImpl.capabilityControl_Accessor) {
      setCapabilityControl(*(accessorImpl.capabilityControl_Accessor));
    } else {
      capabilityControl_Accessor.reset();
    }
  }
}

void ControlSourcesControlType::reset() noexcept {
  controllerSystemID_Accessor.reset();
  capabilityControl_Accessor.reset();
}

uci::type::ControlSourcesControlType::ControlSourcesControlTypeChoice ControlSourcesControlType::getControlSourcesControlTypeChoiceOrdinal() const noexcept {
  if (controllerSystemID_Accessor) {
    return CONTROLSOURCESCONTROLTYPE_CHOICE_CONTROLLERSYSTEMID;
  }
  if (capabilityControl_Accessor) {
    return CONTROLSOURCESCONTROLTYPE_CHOICE_CAPABILITYCONTROL;
  }
  return CONTROLSOURCESCONTROLTYPE_CHOICE_NONE;
}

uci::type::ControlSourcesControlType& ControlSourcesControlType::setControlSourcesControlTypeChoiceOrdinal(uci::type::ControlSourcesControlType::ControlSourcesControlTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CONTROLSOURCESCONTROLTYPE_CHOICE_CONTROLLERSYSTEMID:
      chooseControllerSystemID("setControlSourcesControlTypeChoiceOrdinal", type);
      break;
    case CONTROLSOURCESCONTROLTYPE_CHOICE_CAPABILITYCONTROL:
      chooseCapabilityControl();
      break;
    default:
      throw uci::base::UCIException("Error in setControlSourcesControlTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SystemID_Type& ControlSourcesControlType::getControllerSystemID_() const {
  if (controllerSystemID_Accessor) {
    return *controllerSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getControllerSystemID(): Unable to get ControllerSystemID, field not selected");
}

const uci::type::SystemID_Type& ControlSourcesControlType::getControllerSystemID() const {
  return getControllerSystemID_();
}

uci::type::SystemID_Type& ControlSourcesControlType::getControllerSystemID() {
  return getControllerSystemID_();
}

uci::type::ControlSourcesControlType& ControlSourcesControlType::setControllerSystemID(const uci::type::SystemID_Type& accessor) {
  chooseControllerSystemID();
  if (&accessor != controllerSystemID_Accessor.get()) {
    controllerSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ControlSourcesControlType::isControllerSystemID() const noexcept {
  return static_cast<bool>(controllerSystemID_Accessor);
}

uci::type::SystemID_Type& ControlSourcesControlType::chooseControllerSystemID(const std::string& method, uci::base::accessorType::AccessorType type) {
  capabilityControl_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!controllerSystemID_Accessor) || (controllerSystemID_Accessor->getAccessorType() != requestedType)) {
    controllerSystemID_Accessor = SystemID_Type::create(type);
    if (!controllerSystemID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controllerSystemID_Accessor;
}

uci::type::SystemID_Type& ControlSourcesControlType::chooseControllerSystemID(uci::base::accessorType::AccessorType type) {
  return chooseControllerSystemID("chooseControllerSystemID", type);
}

uci::type::ControlSourcesControlType::CapabilityControl& ControlSourcesControlType::getCapabilityControl_() const {
  if (capabilityControl_Accessor) {
    return *capabilityControl_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityControl(): Unable to get CapabilityControl, field not selected");
}

const uci::type::ControlSourcesControlType::CapabilityControl& ControlSourcesControlType::getCapabilityControl() const {
  return getCapabilityControl_();
}

uci::type::ControlSourcesControlType::CapabilityControl& ControlSourcesControlType::getCapabilityControl() {
  return getCapabilityControl_();
}

uci::type::ControlSourcesControlType& ControlSourcesControlType::setCapabilityControl(const uci::type::ControlSourcesControlType::CapabilityControl& accessor) {
  chooseCapabilityControl();
  if (&accessor != capabilityControl_Accessor.get()) {
    capabilityControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ControlSourcesControlType::isCapabilityControl() const noexcept {
  return static_cast<bool>(capabilityControl_Accessor);
}

uci::type::ControlSourcesControlType::CapabilityControl& ControlSourcesControlType::chooseCapabilityControl() {
  controllerSystemID_Accessor.reset();
  if (!capabilityControl_Accessor) {
    capabilityControl_Accessor = boost::make_unique<CapabilityControl>(1, SIZE_MAX);
  }
  return *capabilityControl_Accessor;
}

std::unique_ptr<ControlSourcesControlType> ControlSourcesControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::controlSourcesControlType : type};
  return (requestedType == uci::type::accessorType::controlSourcesControlType) ? boost::make_unique<ControlSourcesControlType>() : nullptr;
}

/**  */
namespace ControlSourcesControlType_Names {

constexpr const char* Extern_Type_Name{"ControlSourcesControlType"};
constexpr const char* ControllerSystemID_Name{"ControllerSystemID"};
constexpr const char* CapabilityControl_Name{"CapabilityControl"};

} // namespace ControlSourcesControlType_Names

void ControlSourcesControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ControlSourcesControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ControlSourcesControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ControlSourcesControlType_Names::ControllerSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.chooseControllerSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ControlSourcesControlType_Names::CapabilityControl_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ControlSourcesControlType::CapabilityControl& boundedList = accessor.chooseCapabilityControl();
        const uci::type::ControlSourcesControlType::CapabilityControl::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ControlSourcesCapabilityControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ControlSourcesControlType::serialize(const uci::type::ControlSourcesControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ControlSourcesControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ControlSourcesControlType_Names::Extern_Type_Name);
  }
  if (accessor.isControllerSystemID()) {
    SystemID_Type::serialize(accessor.getControllerSystemID(), node, ControlSourcesControlType_Names::ControllerSystemID_Name);
  } else if (accessor.isCapabilityControl()) {
    {
      const uci::type::ControlSourcesControlType::CapabilityControl& boundedList = accessor.getCapabilityControl();
      for (uci::type::ControlSourcesControlType::CapabilityControl::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ControlSourcesCapabilityControlType::serialize(boundedList.at(i), node, ControlSourcesControlType_Names::CapabilityControl_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ControlSourcesControlType& ControlSourcesControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ControlSourcesControlType>().release());
}

uci::type::ControlSourcesControlType& ControlSourcesControlType::create(const uci::type::ControlSourcesControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ControlSourcesControlType> newAccessor{boost::make_unique<asb_uci::type::ControlSourcesControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ControlSourcesControlType::destroy(uci::type::ControlSourcesControlType& accessor) {
  delete dynamic_cast<asb_uci::type::ControlSourcesControlType*>(&accessor);
}

} // namespace type

} // namespace uci

