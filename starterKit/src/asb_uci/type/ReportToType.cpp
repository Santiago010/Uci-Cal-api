/** @file ReportToType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ReportToType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AppliesToType.h"
#include "../../../include/asb_uci/type/ContactDetailsType.h"
#include "../../../include/asb_uci/type/UnitIdentityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AppliesToType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ContactDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReportToType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnitIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ReportToType::ReportToType() = default;

ReportToType::~ReportToType() = default;

void ReportToType::copy(const uci::type::ReportToType& accessor) {
  copyImpl(accessor, false);
}

void ReportToType::copyImpl(const uci::type::ReportToType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ReportToType&>(accessor);
    if (accessorImpl.appliesTo_Accessor) {
      setAppliesTo(*(accessorImpl.appliesTo_Accessor));
    } else {
      appliesTo_Accessor.reset();
    }
    if (accessorImpl.contactDetails_Accessor) {
      setContactDetails(*(accessorImpl.contactDetails_Accessor));
    } else {
      contactDetails_Accessor.reset();
    }
    if (accessorImpl.unit_Accessor) {
      setUnit(*(accessorImpl.unit_Accessor));
    } else {
      unit_Accessor.reset();
    }
  }
}

void ReportToType::reset() noexcept {
  appliesTo_Accessor.reset();
  contactDetails_Accessor.reset();
  unit_Accessor.reset();
}

uci::type::AppliesToType& ReportToType::getAppliesTo_() const {
  if (appliesTo_Accessor) {
    return *appliesTo_Accessor;
  }
  throw uci::base::UCIException("Error in getAppliesTo(): An attempt was made to get an optional field that was not enabled, call hasAppliesTo() to determine if it is safe to call getAppliesTo()");
}

const uci::type::AppliesToType& ReportToType::getAppliesTo() const {
  return getAppliesTo_();
}

uci::type::AppliesToType& ReportToType::getAppliesTo() {
  return getAppliesTo_();
}

uci::type::ReportToType& ReportToType::setAppliesTo(const uci::type::AppliesToType& accessor) {
  enableAppliesTo();
  if (&accessor != appliesTo_Accessor.get()) {
    appliesTo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReportToType::hasAppliesTo() const noexcept {
  return static_cast<bool>(appliesTo_Accessor);
}

uci::type::AppliesToType& ReportToType::enableAppliesTo(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::appliesToType : type};
  if ((!appliesTo_Accessor) || (appliesTo_Accessor->getAccessorType() != requestedType)) {
    appliesTo_Accessor = AppliesToType::create(requestedType);
    if (!appliesTo_Accessor) {
      throw uci::base::UCIException("Error in enableAppliesTo(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *appliesTo_Accessor;
}

uci::type::ReportToType& ReportToType::clearAppliesTo() noexcept {
  appliesTo_Accessor.reset();
  return *this;
}

uci::type::ContactDetailsType& ReportToType::getContactDetails_() const {
  if (contactDetails_Accessor) {
    return *contactDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getContactDetails(): An attempt was made to get an optional field that was not enabled, call hasContactDetails() to determine if it is safe to call getContactDetails()");
}

const uci::type::ContactDetailsType& ReportToType::getContactDetails() const {
  return getContactDetails_();
}

uci::type::ContactDetailsType& ReportToType::getContactDetails() {
  return getContactDetails_();
}

uci::type::ReportToType& ReportToType::setContactDetails(const uci::type::ContactDetailsType& accessor) {
  enableContactDetails();
  if (&accessor != contactDetails_Accessor.get()) {
    contactDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReportToType::hasContactDetails() const noexcept {
  return static_cast<bool>(contactDetails_Accessor);
}

uci::type::ContactDetailsType& ReportToType::enableContactDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::contactDetailsType : type};
  if ((!contactDetails_Accessor) || (contactDetails_Accessor->getAccessorType() != requestedType)) {
    contactDetails_Accessor = ContactDetailsType::create(requestedType);
    if (!contactDetails_Accessor) {
      throw uci::base::UCIException("Error in enableContactDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *contactDetails_Accessor;
}

uci::type::ReportToType& ReportToType::clearContactDetails() noexcept {
  contactDetails_Accessor.reset();
  return *this;
}

uci::type::UnitIdentityType& ReportToType::getUnit_() const {
  if (unit_Accessor) {
    return *unit_Accessor;
  }
  throw uci::base::UCIException("Error in getUnit(): An attempt was made to get an optional field that was not enabled, call hasUnit() to determine if it is safe to call getUnit()");
}

const uci::type::UnitIdentityType& ReportToType::getUnit() const {
  return getUnit_();
}

uci::type::UnitIdentityType& ReportToType::getUnit() {
  return getUnit_();
}

uci::type::ReportToType& ReportToType::setUnit(const uci::type::UnitIdentityType& accessor) {
  enableUnit();
  if (&accessor != unit_Accessor.get()) {
    unit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReportToType::hasUnit() const noexcept {
  return static_cast<bool>(unit_Accessor);
}

uci::type::UnitIdentityType& ReportToType::enableUnit(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::unitIdentityType : type};
  if ((!unit_Accessor) || (unit_Accessor->getAccessorType() != requestedType)) {
    unit_Accessor = UnitIdentityType::create(requestedType);
    if (!unit_Accessor) {
      throw uci::base::UCIException("Error in enableUnit(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *unit_Accessor;
}

uci::type::ReportToType& ReportToType::clearUnit() noexcept {
  unit_Accessor.reset();
  return *this;
}

std::unique_ptr<ReportToType> ReportToType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::reportToType : type};
  return (requestedType == uci::type::accessorType::reportToType) ? boost::make_unique<ReportToType>() : nullptr;
}

/**  */
namespace ReportToType_Names {

constexpr const char* Extern_Type_Name{"ReportToType"};
constexpr const char* AppliesTo_Name{"AppliesTo"};
constexpr const char* ContactDetails_Name{"ContactDetails"};
constexpr const char* Unit_Name{"Unit"};

} // namespace ReportToType_Names

void ReportToType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ReportToType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ReportToType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ReportToType_Names::AppliesTo_Name) {
      AppliesToType::deserialize(valueType.second, accessor.enableAppliesTo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReportToType_Names::ContactDetails_Name) {
      ContactDetailsType::deserialize(valueType.second, accessor.enableContactDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReportToType_Names::Unit_Name) {
      UnitIdentityType::deserialize(valueType.second, accessor.enableUnit(), nodeName, nsPrefix);
    }
  }
}

std::string ReportToType::serialize(const uci::type::ReportToType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ReportToType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ReportToType_Names::Extern_Type_Name);
  }
  if (accessor.hasAppliesTo()) {
    AppliesToType::serialize(accessor.getAppliesTo(), node, ReportToType_Names::AppliesTo_Name);
  }
  if (accessor.hasContactDetails()) {
    ContactDetailsType::serialize(accessor.getContactDetails(), node, ReportToType_Names::ContactDetails_Name);
  }
  if (accessor.hasUnit()) {
    UnitIdentityType::serialize(accessor.getUnit(), node, ReportToType_Names::Unit_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ReportToType& ReportToType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ReportToType>().release());
}

uci::type::ReportToType& ReportToType::create(const uci::type::ReportToType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ReportToType> newAccessor{boost::make_unique<asb_uci::type::ReportToType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ReportToType::destroy(uci::type::ReportToType& accessor) {
  delete dynamic_cast<asb_uci::type::ReportToType*>(&accessor);
}

} // namespace type

} // namespace uci

