/** @file SensorFieldOfRegardType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SensorFieldOfRegardType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AnglePairType.h"
#include "asb_uci/type/FieldOfRegardExtentsType.h"
#include "asb_uci/type/GeometricVolumeType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnglePairType.h"
#include "uci/type/FieldOfRegardExtentsType.h"
#include "uci/type/GeometricVolumeType.h"
#include "uci/type/SensorFieldOfRegardType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SensorFieldOfRegardType::SensorFieldOfRegardType() = default;

SensorFieldOfRegardType::~SensorFieldOfRegardType() = default;

void SensorFieldOfRegardType::copy(const uci::type::SensorFieldOfRegardType& accessor) {
  copyImpl(accessor, false);
}

void SensorFieldOfRegardType::copyImpl(const uci::type::SensorFieldOfRegardType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SensorFieldOfRegardType&>(accessor);
    if (accessorImpl.extents_Accessor) {
      setExtents(*(accessorImpl.extents_Accessor));
    } else {
      extents_Accessor.reset();
    }
    if (accessorImpl.volume_Accessor) {
      setVolume(*(accessorImpl.volume_Accessor));
    } else {
      volume_Accessor.reset();
    }
    if (accessorImpl.geoLongitude_Accessor) {
      setGeoLongitude(*(accessorImpl.geoLongitude_Accessor));
    } else {
      geoLongitude_Accessor.reset();
    }
  }
}

void SensorFieldOfRegardType::reset() noexcept {
  extents_Accessor.reset();
  volume_Accessor.reset();
  geoLongitude_Accessor.reset();
}

uci::type::SensorFieldOfRegardType::SensorFieldOfRegardTypeChoice SensorFieldOfRegardType::getSensorFieldOfRegardTypeChoiceOrdinal() const noexcept {
  if (extents_Accessor) {
    return SENSORFIELDOFREGARDTYPE_CHOICE_EXTENTS;
  }
  if (volume_Accessor) {
    return SENSORFIELDOFREGARDTYPE_CHOICE_VOLUME;
  }
  if (geoLongitude_Accessor) {
    return SENSORFIELDOFREGARDTYPE_CHOICE_GEOLONGITUDE;
  }
  return SENSORFIELDOFREGARDTYPE_CHOICE_NONE;
}

uci::type::SensorFieldOfRegardType& SensorFieldOfRegardType::setSensorFieldOfRegardTypeChoiceOrdinal(uci::type::SensorFieldOfRegardType::SensorFieldOfRegardTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SENSORFIELDOFREGARDTYPE_CHOICE_EXTENTS:
      chooseExtents("setSensorFieldOfRegardTypeChoiceOrdinal", type);
      break;
    case SENSORFIELDOFREGARDTYPE_CHOICE_VOLUME:
      chooseVolume("setSensorFieldOfRegardTypeChoiceOrdinal", type);
      break;
    case SENSORFIELDOFREGARDTYPE_CHOICE_GEOLONGITUDE:
      chooseGeoLongitude("setSensorFieldOfRegardTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSensorFieldOfRegardTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FieldOfRegardExtentsType& SensorFieldOfRegardType::getExtents_() const {
  if (extents_Accessor) {
    return *extents_Accessor;
  }
  throw uci::base::UCIException("Error in getExtents(): Unable to get Extents, field not selected");
}

const uci::type::FieldOfRegardExtentsType& SensorFieldOfRegardType::getExtents() const {
  return getExtents_();
}

uci::type::FieldOfRegardExtentsType& SensorFieldOfRegardType::getExtents() {
  return getExtents_();
}

uci::type::SensorFieldOfRegardType& SensorFieldOfRegardType::setExtents(const uci::type::FieldOfRegardExtentsType& accessor) {
  chooseExtents();
  if (&accessor != extents_Accessor.get()) {
    extents_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorFieldOfRegardType::isExtents() const noexcept {
  return static_cast<bool>(extents_Accessor);
}

uci::type::FieldOfRegardExtentsType& SensorFieldOfRegardType::chooseExtents(const std::string& method, uci::base::accessorType::AccessorType type) {
  volume_Accessor.reset();
  geoLongitude_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fieldOfRegardExtentsType : type};
  if ((!extents_Accessor) || (extents_Accessor->getAccessorType() != requestedType)) {
    extents_Accessor = FieldOfRegardExtentsType::create(type);
    if (!extents_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *extents_Accessor;
}

uci::type::FieldOfRegardExtentsType& SensorFieldOfRegardType::chooseExtents(uci::base::accessorType::AccessorType type) {
  return chooseExtents("chooseExtents", type);
}

uci::type::GeometricVolumeType& SensorFieldOfRegardType::getVolume_() const {
  if (volume_Accessor) {
    return *volume_Accessor;
  }
  throw uci::base::UCIException("Error in getVolume(): Unable to get Volume, field not selected");
}

const uci::type::GeometricVolumeType& SensorFieldOfRegardType::getVolume() const {
  return getVolume_();
}

uci::type::GeometricVolumeType& SensorFieldOfRegardType::getVolume() {
  return getVolume_();
}

uci::type::SensorFieldOfRegardType& SensorFieldOfRegardType::setVolume(const uci::type::GeometricVolumeType& accessor) {
  chooseVolume();
  if (&accessor != volume_Accessor.get()) {
    volume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorFieldOfRegardType::isVolume() const noexcept {
  return static_cast<bool>(volume_Accessor);
}

uci::type::GeometricVolumeType& SensorFieldOfRegardType::chooseVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  extents_Accessor.reset();
  geoLongitude_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geometricVolumeType : type};
  if ((!volume_Accessor) || (volume_Accessor->getAccessorType() != requestedType)) {
    volume_Accessor = GeometricVolumeType::create(type);
    if (!volume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *volume_Accessor;
}

uci::type::GeometricVolumeType& SensorFieldOfRegardType::chooseVolume(uci::base::accessorType::AccessorType type) {
  return chooseVolume("chooseVolume", type);
}

uci::type::AnglePairType& SensorFieldOfRegardType::getGeoLongitude_() const {
  if (geoLongitude_Accessor) {
    return *geoLongitude_Accessor;
  }
  throw uci::base::UCIException("Error in getGeoLongitude(): Unable to get GeoLongitude, field not selected");
}

const uci::type::AnglePairType& SensorFieldOfRegardType::getGeoLongitude() const {
  return getGeoLongitude_();
}

uci::type::AnglePairType& SensorFieldOfRegardType::getGeoLongitude() {
  return getGeoLongitude_();
}

uci::type::SensorFieldOfRegardType& SensorFieldOfRegardType::setGeoLongitude(const uci::type::AnglePairType& accessor) {
  chooseGeoLongitude("setGeoLongitude", accessor.getAccessorType());
  if (&accessor != geoLongitude_Accessor.get()) {
    geoLongitude_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SensorFieldOfRegardType::isGeoLongitude() const noexcept {
  return static_cast<bool>(geoLongitude_Accessor);
}

uci::type::AnglePairType& SensorFieldOfRegardType::chooseGeoLongitude(const std::string& method, uci::base::accessorType::AccessorType type) {
  extents_Accessor.reset();
  volume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!geoLongitude_Accessor) || (geoLongitude_Accessor->getAccessorType() != requestedType)) {
    geoLongitude_Accessor = AnglePairType::create(type);
    if (!geoLongitude_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geoLongitude_Accessor;
}

uci::type::AnglePairType& SensorFieldOfRegardType::chooseGeoLongitude(uci::base::accessorType::AccessorType type) {
  return chooseGeoLongitude("chooseGeoLongitude", type);
}

std::unique_ptr<SensorFieldOfRegardType> SensorFieldOfRegardType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorFieldOfRegardType : type};
  return (requestedType == uci::type::accessorType::sensorFieldOfRegardType) ? boost::make_unique<SensorFieldOfRegardType>() : nullptr;
}

/**  */
namespace SensorFieldOfRegardType_Names {

constexpr const char* Extern_Type_Name{"SensorFieldOfRegardType"};
constexpr const char* Extents_Name{"Extents"};
constexpr const char* Volume_Name{"Volume"};
constexpr const char* GeoLongitude_Name{"GeoLongitude"};

} // namespace SensorFieldOfRegardType_Names

void SensorFieldOfRegardType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorFieldOfRegardType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SensorFieldOfRegardType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SensorFieldOfRegardType_Names::Extents_Name) {
      FieldOfRegardExtentsType::deserialize(valueType.second, accessor.chooseExtents(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorFieldOfRegardType_Names::Volume_Name) {
      GeometricVolumeType::deserialize(valueType.second, accessor.chooseVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorFieldOfRegardType_Names::GeoLongitude_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseGeoLongitude(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string SensorFieldOfRegardType::serialize(const uci::type::SensorFieldOfRegardType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SensorFieldOfRegardType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SensorFieldOfRegardType_Names::Extern_Type_Name);
  }
  if (accessor.isExtents()) {
    FieldOfRegardExtentsType::serialize(accessor.getExtents(), node, SensorFieldOfRegardType_Names::Extents_Name);
  } else if (accessor.isVolume()) {
    GeometricVolumeType::serialize(accessor.getVolume(), node, SensorFieldOfRegardType_Names::Volume_Name);
  } else if (accessor.isGeoLongitude()) {
    AnglePairType::serialize(accessor.getGeoLongitude(), node, SensorFieldOfRegardType_Names::GeoLongitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SensorFieldOfRegardType& SensorFieldOfRegardType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SensorFieldOfRegardType>().release());
}

uci::type::SensorFieldOfRegardType& SensorFieldOfRegardType::create(const uci::type::SensorFieldOfRegardType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SensorFieldOfRegardType> newAccessor{boost::make_unique<asb_uci::type::SensorFieldOfRegardType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SensorFieldOfRegardType::destroy(uci::type::SensorFieldOfRegardType& accessor) {
  delete dynamic_cast<asb_uci::type::SensorFieldOfRegardType*>(&accessor);
}

} // namespace type

} // namespace uci

