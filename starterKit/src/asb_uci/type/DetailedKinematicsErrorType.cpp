/** @file DetailedKinematicsErrorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DetailedKinematicsErrorType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrientationCovarianceType.h"
#include "../../../include/asb_uci/type/PositionOrientationCovarianceType.h"
#include "../../../include/asb_uci/type/PositionPositionCovarianceType.h"
#include "../../../include/asb_uci/type/PositionVelocityCovarianceType.h"
#include "../../../include/asb_uci/type/VelocityOrientationCovarianceType.h"
#include "../../../include/asb_uci/type/VelocityVelocityCovarianceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DetailedKinematicsErrorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrientationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionOrientationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionPositionCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionVelocityCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VelocityOrientationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VelocityVelocityCovarianceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DetailedKinematicsErrorType::DetailedKinematicsErrorType()
  : positionPositionCovariance_Accessor{boost::make_unique<PositionPositionCovarianceType>()},
    positionVelocityCovariance_Accessor{boost::make_unique<PositionVelocityCovarianceType>()},
    velocityVelocityCovariance_Accessor{boost::make_unique<VelocityVelocityCovarianceType>()} {
}

DetailedKinematicsErrorType::~DetailedKinematicsErrorType() = default;

void DetailedKinematicsErrorType::copy(const uci::type::DetailedKinematicsErrorType& accessor) {
  copyImpl(accessor, false);
}

void DetailedKinematicsErrorType::copyImpl(const uci::type::DetailedKinematicsErrorType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DetailedKinematicsErrorType&>(accessor);
    setPositionPositionCovariance(*(accessorImpl.positionPositionCovariance_Accessor));
    setPositionVelocityCovariance(*(accessorImpl.positionVelocityCovariance_Accessor));
    setVelocityVelocityCovariance(*(accessorImpl.velocityVelocityCovariance_Accessor));
    if (accessorImpl.orientationOrientationCovariance_Accessor) {
      setOrientationOrientationCovariance(*(accessorImpl.orientationOrientationCovariance_Accessor));
    } else {
      orientationOrientationCovariance_Accessor.reset();
    }
    if (accessorImpl.positionOrientationCovariance_Accessor) {
      setPositionOrientationCovariance(*(accessorImpl.positionOrientationCovariance_Accessor));
    } else {
      positionOrientationCovariance_Accessor.reset();
    }
    if (accessorImpl.velocityOrientationCovariance_Accessor) {
      setVelocityOrientationCovariance(*(accessorImpl.velocityOrientationCovariance_Accessor));
    } else {
      velocityOrientationCovariance_Accessor.reset();
    }
  }
}

void DetailedKinematicsErrorType::reset() noexcept {
  positionPositionCovariance_Accessor->reset();
  positionVelocityCovariance_Accessor->reset();
  velocityVelocityCovariance_Accessor->reset();
  orientationOrientationCovariance_Accessor.reset();
  positionOrientationCovariance_Accessor.reset();
  velocityOrientationCovariance_Accessor.reset();
}

const uci::type::PositionPositionCovarianceType& DetailedKinematicsErrorType::getPositionPositionCovariance() const {
  return *positionPositionCovariance_Accessor;
}

uci::type::PositionPositionCovarianceType& DetailedKinematicsErrorType::getPositionPositionCovariance() {
  return *positionPositionCovariance_Accessor;
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::setPositionPositionCovariance(const uci::type::PositionPositionCovarianceType& accessor) {
  if (&accessor != positionPositionCovariance_Accessor.get()) {
    positionPositionCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PositionVelocityCovarianceType& DetailedKinematicsErrorType::getPositionVelocityCovariance() const {
  return *positionVelocityCovariance_Accessor;
}

uci::type::PositionVelocityCovarianceType& DetailedKinematicsErrorType::getPositionVelocityCovariance() {
  return *positionVelocityCovariance_Accessor;
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::setPositionVelocityCovariance(const uci::type::PositionVelocityCovarianceType& accessor) {
  if (&accessor != positionVelocityCovariance_Accessor.get()) {
    positionVelocityCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VelocityVelocityCovarianceType& DetailedKinematicsErrorType::getVelocityVelocityCovariance() const {
  return *velocityVelocityCovariance_Accessor;
}

uci::type::VelocityVelocityCovarianceType& DetailedKinematicsErrorType::getVelocityVelocityCovariance() {
  return *velocityVelocityCovariance_Accessor;
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::setVelocityVelocityCovariance(const uci::type::VelocityVelocityCovarianceType& accessor) {
  if (&accessor != velocityVelocityCovariance_Accessor.get()) {
    velocityVelocityCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrientationCovarianceType& DetailedKinematicsErrorType::getOrientationOrientationCovariance_() const {
  if (orientationOrientationCovariance_Accessor) {
    return *orientationOrientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientationOrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasOrientationOrientationCovariance() to determine if it is safe to call getOrientationOrientationCovariance()");
}

const uci::type::OrientationCovarianceType& DetailedKinematicsErrorType::getOrientationOrientationCovariance() const {
  return getOrientationOrientationCovariance_();
}

uci::type::OrientationCovarianceType& DetailedKinematicsErrorType::getOrientationOrientationCovariance() {
  return getOrientationOrientationCovariance_();
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::setOrientationOrientationCovariance(const uci::type::OrientationCovarianceType& accessor) {
  enableOrientationOrientationCovariance();
  if (&accessor != orientationOrientationCovariance_Accessor.get()) {
    orientationOrientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsErrorType::hasOrientationOrientationCovariance() const noexcept {
  return static_cast<bool>(orientationOrientationCovariance_Accessor);
}

uci::type::OrientationCovarianceType& DetailedKinematicsErrorType::enableOrientationOrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationCovarianceType : type};
  if ((!orientationOrientationCovariance_Accessor) || (orientationOrientationCovariance_Accessor->getAccessorType() != requestedType)) {
    orientationOrientationCovariance_Accessor = OrientationCovarianceType::create(requestedType);
    if (!orientationOrientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableOrientationOrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientationOrientationCovariance_Accessor;
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::clearOrientationOrientationCovariance() noexcept {
  orientationOrientationCovariance_Accessor.reset();
  return *this;
}

uci::type::PositionOrientationCovarianceType& DetailedKinematicsErrorType::getPositionOrientationCovariance_() const {
  if (positionOrientationCovariance_Accessor) {
    return *positionOrientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionOrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasPositionOrientationCovariance() to determine if it is safe to call getPositionOrientationCovariance()");
}

const uci::type::PositionOrientationCovarianceType& DetailedKinematicsErrorType::getPositionOrientationCovariance() const {
  return getPositionOrientationCovariance_();
}

uci::type::PositionOrientationCovarianceType& DetailedKinematicsErrorType::getPositionOrientationCovariance() {
  return getPositionOrientationCovariance_();
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::setPositionOrientationCovariance(const uci::type::PositionOrientationCovarianceType& accessor) {
  enablePositionOrientationCovariance();
  if (&accessor != positionOrientationCovariance_Accessor.get()) {
    positionOrientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsErrorType::hasPositionOrientationCovariance() const noexcept {
  return static_cast<bool>(positionOrientationCovariance_Accessor);
}

uci::type::PositionOrientationCovarianceType& DetailedKinematicsErrorType::enablePositionOrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionOrientationCovarianceType : type};
  if ((!positionOrientationCovariance_Accessor) || (positionOrientationCovariance_Accessor->getAccessorType() != requestedType)) {
    positionOrientationCovariance_Accessor = PositionOrientationCovarianceType::create(requestedType);
    if (!positionOrientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enablePositionOrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionOrientationCovariance_Accessor;
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::clearPositionOrientationCovariance() noexcept {
  positionOrientationCovariance_Accessor.reset();
  return *this;
}

uci::type::VelocityOrientationCovarianceType& DetailedKinematicsErrorType::getVelocityOrientationCovariance_() const {
  if (velocityOrientationCovariance_Accessor) {
    return *velocityOrientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityOrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasVelocityOrientationCovariance() to determine if it is safe to call getVelocityOrientationCovariance()");
}

const uci::type::VelocityOrientationCovarianceType& DetailedKinematicsErrorType::getVelocityOrientationCovariance() const {
  return getVelocityOrientationCovariance_();
}

uci::type::VelocityOrientationCovarianceType& DetailedKinematicsErrorType::getVelocityOrientationCovariance() {
  return getVelocityOrientationCovariance_();
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::setVelocityOrientationCovariance(const uci::type::VelocityOrientationCovarianceType& accessor) {
  enableVelocityOrientationCovariance();
  if (&accessor != velocityOrientationCovariance_Accessor.get()) {
    velocityOrientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsErrorType::hasVelocityOrientationCovariance() const noexcept {
  return static_cast<bool>(velocityOrientationCovariance_Accessor);
}

uci::type::VelocityOrientationCovarianceType& DetailedKinematicsErrorType::enableVelocityOrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocityOrientationCovarianceType : type};
  if ((!velocityOrientationCovariance_Accessor) || (velocityOrientationCovariance_Accessor->getAccessorType() != requestedType)) {
    velocityOrientationCovariance_Accessor = VelocityOrientationCovarianceType::create(requestedType);
    if (!velocityOrientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityOrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityOrientationCovariance_Accessor;
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::clearVelocityOrientationCovariance() noexcept {
  velocityOrientationCovariance_Accessor.reset();
  return *this;
}

std::unique_ptr<DetailedKinematicsErrorType> DetailedKinematicsErrorType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::detailedKinematicsErrorType : type};
  return (requestedType == uci::type::accessorType::detailedKinematicsErrorType) ? boost::make_unique<DetailedKinematicsErrorType>() : nullptr;
}

/**  */
namespace DetailedKinematicsErrorType_Names {

constexpr const char* Extern_Type_Name{"DetailedKinematicsErrorType"};
constexpr const char* PositionPositionCovariance_Name{"PositionPositionCovariance"};
constexpr const char* PositionVelocityCovariance_Name{"PositionVelocityCovariance"};
constexpr const char* VelocityVelocityCovariance_Name{"VelocityVelocityCovariance"};
constexpr const char* OrientationOrientationCovariance_Name{"OrientationOrientationCovariance"};
constexpr const char* PositionOrientationCovariance_Name{"PositionOrientationCovariance"};
constexpr const char* VelocityOrientationCovariance_Name{"VelocityOrientationCovariance"};

} // namespace DetailedKinematicsErrorType_Names

void DetailedKinematicsErrorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DetailedKinematicsErrorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DetailedKinematicsErrorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DetailedKinematicsErrorType_Names::PositionPositionCovariance_Name) {
      PositionPositionCovarianceType::deserialize(valueType.second, accessor.getPositionPositionCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsErrorType_Names::PositionVelocityCovariance_Name) {
      PositionVelocityCovarianceType::deserialize(valueType.second, accessor.getPositionVelocityCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsErrorType_Names::VelocityVelocityCovariance_Name) {
      VelocityVelocityCovarianceType::deserialize(valueType.second, accessor.getVelocityVelocityCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsErrorType_Names::OrientationOrientationCovariance_Name) {
      OrientationCovarianceType::deserialize(valueType.second, accessor.enableOrientationOrientationCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsErrorType_Names::PositionOrientationCovariance_Name) {
      PositionOrientationCovarianceType::deserialize(valueType.second, accessor.enablePositionOrientationCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsErrorType_Names::VelocityOrientationCovariance_Name) {
      VelocityOrientationCovarianceType::deserialize(valueType.second, accessor.enableVelocityOrientationCovariance(), nodeName, nsPrefix);
    }
  }
}

std::string DetailedKinematicsErrorType::serialize(const uci::type::DetailedKinematicsErrorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DetailedKinematicsErrorType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DetailedKinematicsErrorType_Names::Extern_Type_Name);
  }
  PositionPositionCovarianceType::serialize(accessor.getPositionPositionCovariance(), node, DetailedKinematicsErrorType_Names::PositionPositionCovariance_Name);
  PositionVelocityCovarianceType::serialize(accessor.getPositionVelocityCovariance(), node, DetailedKinematicsErrorType_Names::PositionVelocityCovariance_Name);
  VelocityVelocityCovarianceType::serialize(accessor.getVelocityVelocityCovariance(), node, DetailedKinematicsErrorType_Names::VelocityVelocityCovariance_Name);
  if (accessor.hasOrientationOrientationCovariance()) {
    OrientationCovarianceType::serialize(accessor.getOrientationOrientationCovariance(), node, DetailedKinematicsErrorType_Names::OrientationOrientationCovariance_Name);
  }
  if (accessor.hasPositionOrientationCovariance()) {
    PositionOrientationCovarianceType::serialize(accessor.getPositionOrientationCovariance(), node, DetailedKinematicsErrorType_Names::PositionOrientationCovariance_Name);
  }
  if (accessor.hasVelocityOrientationCovariance()) {
    VelocityOrientationCovarianceType::serialize(accessor.getVelocityOrientationCovariance(), node, DetailedKinematicsErrorType_Names::VelocityOrientationCovariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DetailedKinematicsErrorType>().release());
}

uci::type::DetailedKinematicsErrorType& DetailedKinematicsErrorType::create(const uci::type::DetailedKinematicsErrorType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DetailedKinematicsErrorType> newAccessor{boost::make_unique<asb_uci::type::DetailedKinematicsErrorType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DetailedKinematicsErrorType::destroy(uci::type::DetailedKinematicsErrorType& accessor) {
  delete dynamic_cast<asb_uci::type::DetailedKinematicsErrorType*>(&accessor);
}

} // namespace type

} // namespace uci

