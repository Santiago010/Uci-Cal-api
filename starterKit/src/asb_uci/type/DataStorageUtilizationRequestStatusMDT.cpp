/** @file DataStorageUtilizationRequestStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DataStorageUtilizationRequestStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RequestStatusBaseType.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/StorageDetailType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DataStorageUtilizationRequestStatusMDT.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/StorageDetailType.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataStorageUtilizationRequestStatusMDT::DataStorageUtilizationRequestStatusMDT()
  : storageDetail_Accessor{boost::make_unique<StorageDetail>(1, SIZE_MAX)} {
}

DataStorageUtilizationRequestStatusMDT::~DataStorageUtilizationRequestStatusMDT() = default;

void DataStorageUtilizationRequestStatusMDT::copy(const uci::type::DataStorageUtilizationRequestStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void DataStorageUtilizationRequestStatusMDT::copyImpl(const uci::type::DataStorageUtilizationRequestStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const DataStorageUtilizationRequestStatusMDT&>(accessor);
    setStorageDetail(*(accessorImpl.storageDetail_Accessor));
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
  }
}

void DataStorageUtilizationRequestStatusMDT::reset() noexcept {
  RequestStatusBaseType::reset();
  storageDetail_Accessor->reset();
  systemID_Accessor.reset();
  subsystemID_Accessor.reset();
  serviceID_Accessor.reset();
}

const uci::type::DataStorageUtilizationRequestStatusMDT::StorageDetail& DataStorageUtilizationRequestStatusMDT::getStorageDetail() const {
  return *storageDetail_Accessor;
}

uci::type::DataStorageUtilizationRequestStatusMDT::StorageDetail& DataStorageUtilizationRequestStatusMDT::getStorageDetail() {
  return *storageDetail_Accessor;
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::setStorageDetail(const uci::type::DataStorageUtilizationRequestStatusMDT::StorageDetail& accessor) {
  if (&accessor != storageDetail_Accessor.get()) {
    storageDetail_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemID_Type& DataStorageUtilizationRequestStatusMDT::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& DataStorageUtilizationRequestStatusMDT::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& DataStorageUtilizationRequestStatusMDT::getSystemID() {
  return getSystemID_();
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataStorageUtilizationRequestStatusMDT::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& DataStorageUtilizationRequestStatusMDT::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::SubsystemID_Type& DataStorageUtilizationRequestStatusMDT::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& DataStorageUtilizationRequestStatusMDT::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& DataStorageUtilizationRequestStatusMDT::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataStorageUtilizationRequestStatusMDT::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& DataStorageUtilizationRequestStatusMDT::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

uci::type::ServiceID_Type& DataStorageUtilizationRequestStatusMDT::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& DataStorageUtilizationRequestStatusMDT::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& DataStorageUtilizationRequestStatusMDT::getServiceID() {
  return getServiceID_();
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataStorageUtilizationRequestStatusMDT::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& DataStorageUtilizationRequestStatusMDT::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::create(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

std::unique_ptr<DataStorageUtilizationRequestStatusMDT> DataStorageUtilizationRequestStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataStorageUtilizationRequestStatusMDT : type};
  return (requestedType == uci::type::accessorType::dataStorageUtilizationRequestStatusMDT) ? boost::make_unique<DataStorageUtilizationRequestStatusMDT>() : nullptr;
}

/**  */
namespace DataStorageUtilizationRequestStatusMDT_Names {

constexpr const char* Extern_Type_Name{"DataStorageUtilizationRequestStatusMDT"};
constexpr const char* StorageDetail_Name{"StorageDetail"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ServiceID_Name{"ServiceID"};

} // namespace DataStorageUtilizationRequestStatusMDT_Names

void DataStorageUtilizationRequestStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataStorageUtilizationRequestStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataStorageUtilizationRequestStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataStorageUtilizationRequestStatusMDT_Names::StorageDetail_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataStorageUtilizationRequestStatusMDT::StorageDetail& boundedList = accessor.getStorageDetail();
        const uci::type::DataStorageUtilizationRequestStatusMDT::StorageDetail::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::StorageDetailType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DataStorageUtilizationRequestStatusMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataStorageUtilizationRequestStatusMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataStorageUtilizationRequestStatusMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    }
  }
  RequestStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string DataStorageUtilizationRequestStatusMDT::serialize(const uci::type::DataStorageUtilizationRequestStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataStorageUtilizationRequestStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataStorageUtilizationRequestStatusMDT_Names::Extern_Type_Name);
  }
  RequestStatusBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::DataStorageUtilizationRequestStatusMDT::StorageDetail& boundedList = accessor.getStorageDetail();
    for (uci::type::DataStorageUtilizationRequestStatusMDT::StorageDetail::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::StorageDetailType::serialize(boundedList.at(i), node, DataStorageUtilizationRequestStatusMDT_Names::StorageDetail_Name);
    }
  }
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, DataStorageUtilizationRequestStatusMDT_Names::SystemID_Name);
  }
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, DataStorageUtilizationRequestStatusMDT_Names::SubsystemID_Name);
  }
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, DataStorageUtilizationRequestStatusMDT_Names::ServiceID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataStorageUtilizationRequestStatusMDT>().release());
}

uci::type::DataStorageUtilizationRequestStatusMDT& DataStorageUtilizationRequestStatusMDT::create(const uci::type::DataStorageUtilizationRequestStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataStorageUtilizationRequestStatusMDT> newAccessor{boost::make_unique<asb_uci::type::DataStorageUtilizationRequestStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataStorageUtilizationRequestStatusMDT::destroy(uci::type::DataStorageUtilizationRequestStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DataStorageUtilizationRequestStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

