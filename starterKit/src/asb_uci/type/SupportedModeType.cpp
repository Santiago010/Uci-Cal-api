/** @file SupportedModeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SupportedModeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommAntennaModeType.h"
#include "../../../include/asb_uci/type/CommCapabilityEnum.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommAntennaModeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommCapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportedModeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SupportedModeType::SupportedModeType()
  : antennaModeIdentifier_Accessor{boost::make_unique<CommAntennaModeType>()},
    waveform_Accessor{boost::make_unique<CommCapabilityEnum>()},
    uplinkFrequencyRange_Accessor{boost::make_unique<FrequencyRangeType>()},
    downlinkFrequencyRange_Accessor{boost::make_unique<FrequencyRangeType>()} {
}

SupportedModeType::~SupportedModeType() = default;

void SupportedModeType::copy(const uci::type::SupportedModeType& accessor) {
  copyImpl(accessor, false);
}

void SupportedModeType::copyImpl(const uci::type::SupportedModeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SupportedModeType&>(accessor);
    setAntennaModeIdentifier(*(accessorImpl.antennaModeIdentifier_Accessor));
    setWaveform(*(accessorImpl.waveform_Accessor));
    setUplinkDataRate(accessorImpl.uplinkDataRate_Accessor);
    setUplinkFrequencyRange(*(accessorImpl.uplinkFrequencyRange_Accessor));
    setDownlinkDataRate(accessorImpl.downlinkDataRate_Accessor);
    setDownlinkFrequencyRange(*(accessorImpl.downlinkFrequencyRange_Accessor));
    setGain(accessorImpl.gain_Accessor);
    setBeamwidth(accessorImpl.beamwidth_Accessor);
  }
}

void SupportedModeType::reset() noexcept {
  antennaModeIdentifier_Accessor->reset();
  waveform_Accessor->reset();
  uplinkDataRate_Accessor = 0;
  uplinkFrequencyRange_Accessor->reset();
  downlinkDataRate_Accessor = 0;
  downlinkFrequencyRange_Accessor->reset();
  gain_Accessor = 0.0;
  beamwidth_Accessor = 0.0;
}

const uci::type::CommAntennaModeType& SupportedModeType::getAntennaModeIdentifier() const {
  return *antennaModeIdentifier_Accessor;
}

uci::type::CommAntennaModeType& SupportedModeType::getAntennaModeIdentifier() {
  return *antennaModeIdentifier_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setAntennaModeIdentifier(const uci::type::CommAntennaModeType& accessor) {
  if (&accessor != antennaModeIdentifier_Accessor.get()) {
    antennaModeIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommCapabilityEnum& SupportedModeType::getWaveform() const {
  return *waveform_Accessor;
}

uci::type::CommCapabilityEnum& SupportedModeType::getWaveform() {
  return *waveform_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setWaveform(const uci::type::CommCapabilityEnum& accessor) {
  if (&accessor != waveform_Accessor.get()) {
    waveform_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SupportedModeType& SupportedModeType::setWaveform(uci::type::CommCapabilityEnum::EnumerationItem value) {
  waveform_Accessor->setValue(value);
  return *this;
}


uci::type::DataRateTypeValue SupportedModeType::getUplinkDataRate() const {
  return uplinkDataRate_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setUplinkDataRate(uci::type::DataRateTypeValue value) {
  uplinkDataRate_Accessor = value;
  return *this;
}


const uci::type::FrequencyRangeType& SupportedModeType::getUplinkFrequencyRange() const {
  return *uplinkFrequencyRange_Accessor;
}

uci::type::FrequencyRangeType& SupportedModeType::getUplinkFrequencyRange() {
  return *uplinkFrequencyRange_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setUplinkFrequencyRange(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != uplinkFrequencyRange_Accessor.get()) {
    uplinkFrequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DataRateTypeValue SupportedModeType::getDownlinkDataRate() const {
  return downlinkDataRate_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setDownlinkDataRate(uci::type::DataRateTypeValue value) {
  downlinkDataRate_Accessor = value;
  return *this;
}


const uci::type::FrequencyRangeType& SupportedModeType::getDownlinkFrequencyRange() const {
  return *downlinkFrequencyRange_Accessor;
}

uci::type::FrequencyRangeType& SupportedModeType::getDownlinkFrequencyRange() {
  return *downlinkFrequencyRange_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setDownlinkFrequencyRange(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != downlinkFrequencyRange_Accessor.get()) {
    downlinkFrequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DecibelTypeValue SupportedModeType::getGain() const {
  return gain_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setGain(uci::type::DecibelTypeValue value) {
  gain_Accessor = value;
  return *this;
}


uci::type::AnglePositiveTypeValue SupportedModeType::getBeamwidth() const {
  return beamwidth_Accessor;
}

uci::type::SupportedModeType& SupportedModeType::setBeamwidth(uci::type::AnglePositiveTypeValue value) {
  beamwidth_Accessor = value;
  return *this;
}


std::unique_ptr<SupportedModeType> SupportedModeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportedModeType : type};
  return (requestedType == uci::type::accessorType::supportedModeType) ? boost::make_unique<SupportedModeType>() : nullptr;
}

/**  */
namespace SupportedModeType_Names {

constexpr const char* Extern_Type_Name{"SupportedModeType"};
constexpr const char* AntennaModeIdentifier_Name{"AntennaModeIdentifier"};
constexpr const char* Waveform_Name{"Waveform"};
constexpr const char* UplinkDataRate_Name{"UplinkDataRate"};
constexpr const char* UplinkFrequencyRange_Name{"UplinkFrequencyRange"};
constexpr const char* DownlinkDataRate_Name{"DownlinkDataRate"};
constexpr const char* DownlinkFrequencyRange_Name{"DownlinkFrequencyRange"};
constexpr const char* Gain_Name{"Gain"};
constexpr const char* Beamwidth_Name{"Beamwidth"};

} // namespace SupportedModeType_Names

void SupportedModeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SupportedModeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SupportedModeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::AntennaModeIdentifier_Name) {
      CommAntennaModeType::deserialize(valueType.second, accessor.getAntennaModeIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::Waveform_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getWaveform().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::UplinkDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUplinkDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::UplinkFrequencyRange_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getUplinkFrequencyRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::DownlinkDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDownlinkDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::DownlinkFrequencyRange_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getDownlinkFrequencyRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::Gain_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGain(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SupportedModeType_Names::Beamwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBeamwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SupportedModeType::serialize(const uci::type::SupportedModeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SupportedModeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SupportedModeType_Names::Extern_Type_Name);
  }
  CommAntennaModeType::serialize(accessor.getAntennaModeIdentifier(), node, SupportedModeType_Names::AntennaModeIdentifier_Name);
  CommCapabilityEnum::serialize(accessor.getWaveform(), node, SupportedModeType_Names::Waveform_Name, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getUplinkDataRate(), node, SupportedModeType_Names::UplinkDataRate_Name);
  FrequencyRangeType::serialize(accessor.getUplinkFrequencyRange(), node, SupportedModeType_Names::UplinkFrequencyRange_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDownlinkDataRate(), node, SupportedModeType_Names::DownlinkDataRate_Name);
  FrequencyRangeType::serialize(accessor.getDownlinkFrequencyRange(), node, SupportedModeType_Names::DownlinkFrequencyRange_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getGain(), node, SupportedModeType_Names::Gain_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getBeamwidth(), node, SupportedModeType_Names::Beamwidth_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SupportedModeType& SupportedModeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SupportedModeType>().release());
}

uci::type::SupportedModeType& SupportedModeType::create(const uci::type::SupportedModeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SupportedModeType> newAccessor{boost::make_unique<asb_uci::type::SupportedModeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SupportedModeType::destroy(uci::type::SupportedModeType& accessor) {
  delete dynamic_cast<asb_uci::type::SupportedModeType*>(&accessor);
}

} // namespace type

} // namespace uci

