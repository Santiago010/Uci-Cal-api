/** @file RequirementChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "asb_uci/type/RequirementTaxonomyChoiceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RequirementChoiceType.h"
#include "uci/type/RequirementInstanceID_ChoiceType.h"
#include "uci/type/RequirementTaxonomyChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementChoiceType::RequirementChoiceType() = default;

RequirementChoiceType::~RequirementChoiceType() = default;

void RequirementChoiceType::copy(const uci::type::RequirementChoiceType& accessor) {
  copyImpl(accessor, false);
}

void RequirementChoiceType::copyImpl(const uci::type::RequirementChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementChoiceType&>(accessor);
    if (accessorImpl.byType_Accessor) {
      setByType(*(accessorImpl.byType_Accessor));
    } else {
      byType_Accessor.reset();
    }
    if (accessorImpl.byInstance_Accessor) {
      setByInstance(*(accessorImpl.byInstance_Accessor));
    } else {
      byInstance_Accessor.reset();
    }
  }
}

void RequirementChoiceType::reset() noexcept {
  byType_Accessor.reset();
  byInstance_Accessor.reset();
}

uci::type::RequirementChoiceType::RequirementChoiceTypeChoice RequirementChoiceType::getRequirementChoiceTypeChoiceOrdinal() const noexcept {
  if (byType_Accessor) {
    return REQUIREMENTCHOICETYPE_CHOICE_BYTYPE;
  }
  if (byInstance_Accessor) {
    return REQUIREMENTCHOICETYPE_CHOICE_BYINSTANCE;
  }
  return REQUIREMENTCHOICETYPE_CHOICE_NONE;
}

uci::type::RequirementChoiceType& RequirementChoiceType::setRequirementChoiceTypeChoiceOrdinal(uci::type::RequirementChoiceType::RequirementChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REQUIREMENTCHOICETYPE_CHOICE_BYTYPE:
      chooseByType("setRequirementChoiceTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTCHOICETYPE_CHOICE_BYINSTANCE:
      chooseByInstance("setRequirementChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRequirementChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RequirementTaxonomyChoiceType& RequirementChoiceType::getByType_() const {
  if (byType_Accessor) {
    return *byType_Accessor;
  }
  throw uci::base::UCIException("Error in getByType(): Unable to get ByType, field not selected");
}

const uci::type::RequirementTaxonomyChoiceType& RequirementChoiceType::getByType() const {
  return getByType_();
}

uci::type::RequirementTaxonomyChoiceType& RequirementChoiceType::getByType() {
  return getByType_();
}

uci::type::RequirementChoiceType& RequirementChoiceType::setByType(const uci::type::RequirementTaxonomyChoiceType& accessor) {
  chooseByType(accessor.getAccessorType());
  if (&accessor != byType_Accessor.get()) {
    byType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementChoiceType::isByType() const noexcept {
  return static_cast<bool>(byType_Accessor);
}

uci::type::RequirementTaxonomyChoiceType& RequirementChoiceType::chooseByType(const std::string& method, uci::base::accessorType::AccessorType type) {
  byInstance_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTaxonomyChoiceType : type};
  if ((!byType_Accessor) || (byType_Accessor->getAccessorType() != requestedType)) {
    byType_Accessor = RequirementTaxonomyChoiceType::create(type);
    if (!byType_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byType_Accessor;
}

uci::type::RequirementTaxonomyChoiceType& RequirementChoiceType::chooseByType(uci::base::accessorType::AccessorType type) {
  return chooseByType("chooseByType", type);
}

uci::type::RequirementInstanceID_ChoiceType& RequirementChoiceType::getByInstance_() const {
  if (byInstance_Accessor) {
    return *byInstance_Accessor;
  }
  throw uci::base::UCIException("Error in getByInstance(): Unable to get ByInstance, field not selected");
}

const uci::type::RequirementInstanceID_ChoiceType& RequirementChoiceType::getByInstance() const {
  return getByInstance_();
}

uci::type::RequirementInstanceID_ChoiceType& RequirementChoiceType::getByInstance() {
  return getByInstance_();
}

uci::type::RequirementChoiceType& RequirementChoiceType::setByInstance(const uci::type::RequirementInstanceID_ChoiceType& accessor) {
  chooseByInstance(accessor.getAccessorType());
  if (&accessor != byInstance_Accessor.get()) {
    byInstance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementChoiceType::isByInstance() const noexcept {
  return static_cast<bool>(byInstance_Accessor);
}

uci::type::RequirementInstanceID_ChoiceType& RequirementChoiceType::chooseByInstance(const std::string& method, uci::base::accessorType::AccessorType type) {
  byType_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementInstanceID_ChoiceType : type};
  if ((!byInstance_Accessor) || (byInstance_Accessor->getAccessorType() != requestedType)) {
    byInstance_Accessor = RequirementInstanceID_ChoiceType::create(type);
    if (!byInstance_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byInstance_Accessor;
}

uci::type::RequirementInstanceID_ChoiceType& RequirementChoiceType::chooseByInstance(uci::base::accessorType::AccessorType type) {
  return chooseByInstance("chooseByInstance", type);
}

std::unique_ptr<RequirementChoiceType> RequirementChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementChoiceType : type};
  return (requestedType == uci::type::accessorType::requirementChoiceType) ? boost::make_unique<RequirementChoiceType>() : nullptr;
}

/**  */
namespace RequirementChoiceType_Names {

constexpr const char* Extern_Type_Name{"RequirementChoiceType"};
constexpr const char* ByType_Name{"ByType"};
constexpr const char* ByInstance_Name{"ByInstance"};

} // namespace RequirementChoiceType_Names

void RequirementChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementChoiceType_Names::ByType_Name) {
      RequirementTaxonomyChoiceType::deserialize(valueType.second, accessor.chooseByType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementChoiceType_Names::ByInstance_Name) {
      RequirementInstanceID_ChoiceType::deserialize(valueType.second, accessor.chooseByInstance(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementChoiceType::serialize(const uci::type::RequirementChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isByType()) {
    RequirementTaxonomyChoiceType::serialize(accessor.getByType(), node, RequirementChoiceType_Names::ByType_Name);
  } else if (accessor.isByInstance()) {
    RequirementInstanceID_ChoiceType::serialize(accessor.getByInstance(), node, RequirementChoiceType_Names::ByInstance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementChoiceType& RequirementChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementChoiceType>().release());
}

uci::type::RequirementChoiceType& RequirementChoiceType::create(const uci::type::RequirementChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementChoiceType> newAccessor{boost::make_unique<asb_uci::type::RequirementChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementChoiceType::destroy(uci::type::RequirementChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

