/** @file BlankingSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/BlankingSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DigitalFunctionType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/BlankingSourceType.h"
#include "uci/type/DigitalFunctionType.h"
#include "uci/type/SubsystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

BlankingSourceType::BlankingSourceType() = default;

BlankingSourceType::~BlankingSourceType() = default;

void BlankingSourceType::copy(const uci::type::BlankingSourceType& accessor) {
  copyImpl(accessor, false);
}

void BlankingSourceType::copyImpl(const uci::type::BlankingSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const BlankingSourceType&>(accessor);
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    if (accessorImpl.digitalPayload_Accessor) {
      setDigitalPayload(*(accessorImpl.digitalPayload_Accessor));
    } else {
      digitalPayload_Accessor.reset();
    }
  }
}

void BlankingSourceType::reset() noexcept {
  subsystemID_Accessor.reset();
  digitalPayload_Accessor.reset();
}

uci::type::BlankingSourceType::BlankingSourceTypeChoice BlankingSourceType::getBlankingSourceTypeChoiceOrdinal() const noexcept {
  if (subsystemID_Accessor) {
    return BLANKINGSOURCETYPE_CHOICE_SUBSYSTEMID;
  }
  if (digitalPayload_Accessor) {
    return BLANKINGSOURCETYPE_CHOICE_DIGITALPAYLOAD;
  }
  return BLANKINGSOURCETYPE_CHOICE_NONE;
}

uci::type::BlankingSourceType& BlankingSourceType::setBlankingSourceTypeChoiceOrdinal(uci::type::BlankingSourceType::BlankingSourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case BLANKINGSOURCETYPE_CHOICE_SUBSYSTEMID:
      chooseSubsystemID("setBlankingSourceTypeChoiceOrdinal", type);
      break;
    case BLANKINGSOURCETYPE_CHOICE_DIGITALPAYLOAD:
      chooseDigitalPayload("setBlankingSourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setBlankingSourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SubsystemID_Type& BlankingSourceType::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): Unable to get SubsystemID, field not selected");
}

const uci::type::SubsystemID_Type& BlankingSourceType::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& BlankingSourceType::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::BlankingSourceType& BlankingSourceType::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  chooseSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BlankingSourceType::isSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& BlankingSourceType::chooseSubsystemID(const std::string& method, uci::base::accessorType::AccessorType type) {
  digitalPayload_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(type);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& BlankingSourceType::chooseSubsystemID(uci::base::accessorType::AccessorType type) {
  return chooseSubsystemID("chooseSubsystemID", type);
}

uci::type::DigitalFunctionType& BlankingSourceType::getDigitalPayload_() const {
  if (digitalPayload_Accessor) {
    return *digitalPayload_Accessor;
  }
  throw uci::base::UCIException("Error in getDigitalPayload(): Unable to get DigitalPayload, field not selected");
}

const uci::type::DigitalFunctionType& BlankingSourceType::getDigitalPayload() const {
  return getDigitalPayload_();
}

uci::type::DigitalFunctionType& BlankingSourceType::getDigitalPayload() {
  return getDigitalPayload_();
}

uci::type::BlankingSourceType& BlankingSourceType::setDigitalPayload(const uci::type::DigitalFunctionType& accessor) {
  chooseDigitalPayload(accessor.getAccessorType());
  if (&accessor != digitalPayload_Accessor.get()) {
    digitalPayload_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BlankingSourceType::isDigitalPayload() const noexcept {
  return static_cast<bool>(digitalPayload_Accessor);
}

uci::type::DigitalFunctionType& BlankingSourceType::chooseDigitalPayload(const std::string& method, uci::base::accessorType::AccessorType type) {
  subsystemID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::digitalFunctionType : type};
  if ((!digitalPayload_Accessor) || (digitalPayload_Accessor->getAccessorType() != requestedType)) {
    digitalPayload_Accessor = DigitalFunctionType::create(type);
    if (!digitalPayload_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *digitalPayload_Accessor;
}

uci::type::DigitalFunctionType& BlankingSourceType::chooseDigitalPayload(uci::base::accessorType::AccessorType type) {
  return chooseDigitalPayload("chooseDigitalPayload", type);
}

std::unique_ptr<BlankingSourceType> BlankingSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::blankingSourceType : type};
  return (requestedType == uci::type::accessorType::blankingSourceType) ? boost::make_unique<BlankingSourceType>() : nullptr;
}

/**  */
namespace BlankingSourceType_Names {

constexpr const char* Extern_Type_Name{"BlankingSourceType"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* DigitalPayload_Name{"DigitalPayload"};

} // namespace BlankingSourceType_Names

void BlankingSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::BlankingSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = BlankingSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + BlankingSourceType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.chooseSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BlankingSourceType_Names::DigitalPayload_Name) {
      DigitalFunctionType::deserialize(valueType.second, accessor.chooseDigitalPayload(), nodeName, nsPrefix);
    }
  }
}

std::string BlankingSourceType::serialize(const uci::type::BlankingSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? BlankingSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, BlankingSourceType_Names::Extern_Type_Name);
  }
  if (accessor.isSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, BlankingSourceType_Names::SubsystemID_Name);
  } else if (accessor.isDigitalPayload()) {
    DigitalFunctionType::serialize(accessor.getDigitalPayload(), node, BlankingSourceType_Names::DigitalPayload_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::BlankingSourceType& BlankingSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::BlankingSourceType>().release());
}

uci::type::BlankingSourceType& BlankingSourceType::create(const uci::type::BlankingSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::BlankingSourceType> newAccessor{boost::make_unique<asb_uci::type::BlankingSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void BlankingSourceType::destroy(uci::type::BlankingSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::BlankingSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

