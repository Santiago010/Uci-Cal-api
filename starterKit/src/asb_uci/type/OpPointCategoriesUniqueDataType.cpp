/** @file OpPointCategoriesUniqueDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OpPointCategoriesUniqueDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmergencyReferencePointType.h"
#include "asb_uci/type/Link16HazardType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EmergencyReferencePointType.h"
#include "uci/type/Link16HazardType.h"
#include "uci/type/OpPointCategoriesUniqueDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpPointCategoriesUniqueDataType::OpPointCategoriesUniqueDataType() = default;

OpPointCategoriesUniqueDataType::~OpPointCategoriesUniqueDataType() = default;

void OpPointCategoriesUniqueDataType::copy(const uci::type::OpPointCategoriesUniqueDataType& accessor) {
  copyImpl(accessor, false);
}

void OpPointCategoriesUniqueDataType::copyImpl(const uci::type::OpPointCategoriesUniqueDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpPointCategoriesUniqueDataType&>(accessor);
    if (accessorImpl.emergency_Accessor) {
      setEmergency(*(accessorImpl.emergency_Accessor));
    } else {
      emergency_Accessor.reset();
    }
    if (accessorImpl.hazard_Accessor) {
      setHazard(*(accessorImpl.hazard_Accessor));
    } else {
      hazard_Accessor.reset();
    }
  }
}

void OpPointCategoriesUniqueDataType::reset() noexcept {
  emergency_Accessor.reset();
  hazard_Accessor.reset();
}

uci::type::OpPointCategoriesUniqueDataType::OpPointCategoriesUniqueDataTypeChoice OpPointCategoriesUniqueDataType::getOpPointCategoriesUniqueDataTypeChoiceOrdinal() const noexcept {
  if (emergency_Accessor) {
    return OPPOINTCATEGORIESUNIQUEDATATYPE_CHOICE_EMERGENCY;
  }
  if (hazard_Accessor) {
    return OPPOINTCATEGORIESUNIQUEDATATYPE_CHOICE_HAZARD;
  }
  return OPPOINTCATEGORIESUNIQUEDATATYPE_CHOICE_NONE;
}

uci::type::OpPointCategoriesUniqueDataType& OpPointCategoriesUniqueDataType::setOpPointCategoriesUniqueDataTypeChoiceOrdinal(uci::type::OpPointCategoriesUniqueDataType::OpPointCategoriesUniqueDataTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPPOINTCATEGORIESUNIQUEDATATYPE_CHOICE_EMERGENCY:
      chooseEmergency("setOpPointCategoriesUniqueDataTypeChoiceOrdinal", type);
      break;
    case OPPOINTCATEGORIESUNIQUEDATATYPE_CHOICE_HAZARD:
      chooseHazard("setOpPointCategoriesUniqueDataTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpPointCategoriesUniqueDataTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmergencyReferencePointType& OpPointCategoriesUniqueDataType::getEmergency_() const {
  if (emergency_Accessor) {
    return *emergency_Accessor;
  }
  throw uci::base::UCIException("Error in getEmergency(): Unable to get Emergency, field not selected");
}

const uci::type::EmergencyReferencePointType& OpPointCategoriesUniqueDataType::getEmergency() const {
  return getEmergency_();
}

uci::type::EmergencyReferencePointType& OpPointCategoriesUniqueDataType::getEmergency() {
  return getEmergency_();
}

uci::type::OpPointCategoriesUniqueDataType& OpPointCategoriesUniqueDataType::setEmergency(const uci::type::EmergencyReferencePointType& accessor) {
  chooseEmergency();
  if (&accessor != emergency_Accessor.get()) {
    emergency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpPointCategoriesUniqueDataType::isEmergency() const noexcept {
  return static_cast<bool>(emergency_Accessor);
}

uci::type::EmergencyReferencePointType& OpPointCategoriesUniqueDataType::chooseEmergency(const std::string& method, uci::base::accessorType::AccessorType type) {
  hazard_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emergencyReferencePointType : type};
  if ((!emergency_Accessor) || (emergency_Accessor->getAccessorType() != requestedType)) {
    emergency_Accessor = EmergencyReferencePointType::create(type);
    if (!emergency_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emergency_Accessor;
}

uci::type::EmergencyReferencePointType& OpPointCategoriesUniqueDataType::chooseEmergency(uci::base::accessorType::AccessorType type) {
  return chooseEmergency("chooseEmergency", type);
}

uci::type::Link16HazardType& OpPointCategoriesUniqueDataType::getHazard_() const {
  if (hazard_Accessor) {
    return *hazard_Accessor;
  }
  throw uci::base::UCIException("Error in getHazard(): Unable to get Hazard, field not selected");
}

const uci::type::Link16HazardType& OpPointCategoriesUniqueDataType::getHazard() const {
  return getHazard_();
}

uci::type::Link16HazardType& OpPointCategoriesUniqueDataType::getHazard() {
  return getHazard_();
}

uci::type::OpPointCategoriesUniqueDataType& OpPointCategoriesUniqueDataType::setHazard(const uci::type::Link16HazardType& accessor) {
  chooseHazard();
  if (&accessor != hazard_Accessor.get()) {
    hazard_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpPointCategoriesUniqueDataType::isHazard() const noexcept {
  return static_cast<bool>(hazard_Accessor);
}

uci::type::Link16HazardType& OpPointCategoriesUniqueDataType::chooseHazard(const std::string& method, uci::base::accessorType::AccessorType type) {
  emergency_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16HazardType : type};
  if ((!hazard_Accessor) || (hazard_Accessor->getAccessorType() != requestedType)) {
    hazard_Accessor = Link16HazardType::create(type);
    if (!hazard_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hazard_Accessor;
}

uci::type::Link16HazardType& OpPointCategoriesUniqueDataType::chooseHazard(uci::base::accessorType::AccessorType type) {
  return chooseHazard("chooseHazard", type);
}

std::unique_ptr<OpPointCategoriesUniqueDataType> OpPointCategoriesUniqueDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointCategoriesUniqueDataType : type};
  return (requestedType == uci::type::accessorType::opPointCategoriesUniqueDataType) ? boost::make_unique<OpPointCategoriesUniqueDataType>() : nullptr;
}

/**  */
namespace OpPointCategoriesUniqueDataType_Names {

constexpr const char* Extern_Type_Name{"OpPointCategoriesUniqueDataType"};
constexpr const char* Emergency_Name{"Emergency"};
constexpr const char* Hazard_Name{"Hazard"};

} // namespace OpPointCategoriesUniqueDataType_Names

void OpPointCategoriesUniqueDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpPointCategoriesUniqueDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpPointCategoriesUniqueDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpPointCategoriesUniqueDataType_Names::Emergency_Name) {
      EmergencyReferencePointType::deserialize(valueType.second, accessor.chooseEmergency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpPointCategoriesUniqueDataType_Names::Hazard_Name) {
      Link16HazardType::deserialize(valueType.second, accessor.chooseHazard(), nodeName, nsPrefix);
    }
  }
}

std::string OpPointCategoriesUniqueDataType::serialize(const uci::type::OpPointCategoriesUniqueDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpPointCategoriesUniqueDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpPointCategoriesUniqueDataType_Names::Extern_Type_Name);
  }
  if (accessor.isEmergency()) {
    EmergencyReferencePointType::serialize(accessor.getEmergency(), node, OpPointCategoriesUniqueDataType_Names::Emergency_Name);
  } else if (accessor.isHazard()) {
    Link16HazardType::serialize(accessor.getHazard(), node, OpPointCategoriesUniqueDataType_Names::Hazard_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpPointCategoriesUniqueDataType& OpPointCategoriesUniqueDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpPointCategoriesUniqueDataType>().release());
}

uci::type::OpPointCategoriesUniqueDataType& OpPointCategoriesUniqueDataType::create(const uci::type::OpPointCategoriesUniqueDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpPointCategoriesUniqueDataType> newAccessor{boost::make_unique<asb_uci::type::OpPointCategoriesUniqueDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpPointCategoriesUniqueDataType::destroy(uci::type::OpPointCategoriesUniqueDataType& accessor) {
  delete dynamic_cast<asb_uci::type::OpPointCategoriesUniqueDataType*>(&accessor);
}

} // namespace type

} // namespace uci

