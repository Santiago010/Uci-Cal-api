/** @file DataPlanOverrideRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DataPlanOverrideRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataPlanOverrideRequestType.h"
#include "../../../include/asb_uci/type/ServiceID_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataPlanOverrideRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataPlanOverrideRequestType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataPlanOverrideRequestMDT::DataPlanOverrideRequestMDT()
  : request_Accessor{boost::make_unique<Request>(1, SIZE_MAX)} {
}

DataPlanOverrideRequestMDT::~DataPlanOverrideRequestMDT() = default;

void DataPlanOverrideRequestMDT::copy(const uci::type::DataPlanOverrideRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void DataPlanOverrideRequestMDT::copyImpl(const uci::type::DataPlanOverrideRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DataPlanOverrideRequestMDT&>(accessor);
    if (accessorImpl.allocatedToSystemID_Accessor) {
      setAllocatedToSystemID(*(accessorImpl.allocatedToSystemID_Accessor));
    } else {
      allocatedToSystemID_Accessor.reset();
    }
    if (accessorImpl.allocatedToServiceID_Accessor) {
      setAllocatedToServiceID(*(accessorImpl.allocatedToServiceID_Accessor));
    } else {
      allocatedToServiceID_Accessor.reset();
    }
    setRequest(*(accessorImpl.request_Accessor));
  }
}

void DataPlanOverrideRequestMDT::reset() noexcept {
  allocatedToSystemID_Accessor.reset();
  allocatedToServiceID_Accessor.reset();
  request_Accessor->reset();
}

uci::type::SystemID_Type& DataPlanOverrideRequestMDT::getAllocatedToSystemID_() const {
  if (allocatedToSystemID_Accessor) {
    return *allocatedToSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getAllocatedToSystemID(): An attempt was made to get an optional field that was not enabled, call hasAllocatedToSystemID() to determine if it is safe to call getAllocatedToSystemID()");
}

const uci::type::SystemID_Type& DataPlanOverrideRequestMDT::getAllocatedToSystemID() const {
  return getAllocatedToSystemID_();
}

uci::type::SystemID_Type& DataPlanOverrideRequestMDT::getAllocatedToSystemID() {
  return getAllocatedToSystemID_();
}

uci::type::DataPlanOverrideRequestMDT& DataPlanOverrideRequestMDT::setAllocatedToSystemID(const uci::type::SystemID_Type& accessor) {
  enableAllocatedToSystemID();
  if (&accessor != allocatedToSystemID_Accessor.get()) {
    allocatedToSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataPlanOverrideRequestMDT::hasAllocatedToSystemID() const noexcept {
  return static_cast<bool>(allocatedToSystemID_Accessor);
}

uci::type::SystemID_Type& DataPlanOverrideRequestMDT::enableAllocatedToSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!allocatedToSystemID_Accessor) || (allocatedToSystemID_Accessor->getAccessorType() != requestedType)) {
    allocatedToSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!allocatedToSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableAllocatedToSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allocatedToSystemID_Accessor;
}

uci::type::DataPlanOverrideRequestMDT& DataPlanOverrideRequestMDT::clearAllocatedToSystemID() noexcept {
  allocatedToSystemID_Accessor.reset();
  return *this;
}

uci::type::ServiceID_Type& DataPlanOverrideRequestMDT::getAllocatedToServiceID_() const {
  if (allocatedToServiceID_Accessor) {
    return *allocatedToServiceID_Accessor;
  }
  throw uci::base::UCIException("Error in getAllocatedToServiceID(): An attempt was made to get an optional field that was not enabled, call hasAllocatedToServiceID() to determine if it is safe to call getAllocatedToServiceID()");
}

const uci::type::ServiceID_Type& DataPlanOverrideRequestMDT::getAllocatedToServiceID() const {
  return getAllocatedToServiceID_();
}

uci::type::ServiceID_Type& DataPlanOverrideRequestMDT::getAllocatedToServiceID() {
  return getAllocatedToServiceID_();
}

uci::type::DataPlanOverrideRequestMDT& DataPlanOverrideRequestMDT::setAllocatedToServiceID(const uci::type::ServiceID_Type& accessor) {
  enableAllocatedToServiceID();
  if (&accessor != allocatedToServiceID_Accessor.get()) {
    allocatedToServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataPlanOverrideRequestMDT::hasAllocatedToServiceID() const noexcept {
  return static_cast<bool>(allocatedToServiceID_Accessor);
}

uci::type::ServiceID_Type& DataPlanOverrideRequestMDT::enableAllocatedToServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!allocatedToServiceID_Accessor) || (allocatedToServiceID_Accessor->getAccessorType() != requestedType)) {
    allocatedToServiceID_Accessor = ServiceID_Type::create(requestedType);
    if (!allocatedToServiceID_Accessor) {
      throw uci::base::UCIException("Error in enableAllocatedToServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allocatedToServiceID_Accessor;
}

uci::type::DataPlanOverrideRequestMDT& DataPlanOverrideRequestMDT::clearAllocatedToServiceID() noexcept {
  allocatedToServiceID_Accessor.reset();
  return *this;
}

const uci::type::DataPlanOverrideRequestMDT::Request& DataPlanOverrideRequestMDT::getRequest() const {
  return *request_Accessor;
}

uci::type::DataPlanOverrideRequestMDT::Request& DataPlanOverrideRequestMDT::getRequest() {
  return *request_Accessor;
}

uci::type::DataPlanOverrideRequestMDT& DataPlanOverrideRequestMDT::setRequest(const uci::type::DataPlanOverrideRequestMDT::Request& accessor) {
  if (&accessor != request_Accessor.get()) {
    request_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<DataPlanOverrideRequestMDT> DataPlanOverrideRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataPlanOverrideRequestMDT : type};
  return (requestedType == uci::type::accessorType::dataPlanOverrideRequestMDT) ? boost::make_unique<DataPlanOverrideRequestMDT>() : nullptr;
}

/**  */
namespace DataPlanOverrideRequestMDT_Names {

constexpr const char* Extern_Type_Name{"DataPlanOverrideRequestMDT"};
constexpr const char* AllocatedToSystemID_Name{"AllocatedToSystemID"};
constexpr const char* AllocatedToServiceID_Name{"AllocatedToServiceID"};
constexpr const char* Request_Name{"Request"};

} // namespace DataPlanOverrideRequestMDT_Names

void DataPlanOverrideRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataPlanOverrideRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataPlanOverrideRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataPlanOverrideRequestMDT_Names::AllocatedToSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableAllocatedToSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataPlanOverrideRequestMDT_Names::AllocatedToServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableAllocatedToServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataPlanOverrideRequestMDT_Names::Request_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataPlanOverrideRequestMDT::Request& boundedList = accessor.getRequest();
        const uci::type::DataPlanOverrideRequestMDT::Request::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DataPlanOverrideRequestType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string DataPlanOverrideRequestMDT::serialize(const uci::type::DataPlanOverrideRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataPlanOverrideRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataPlanOverrideRequestMDT_Names::Extern_Type_Name);
  }
  if (accessor.hasAllocatedToSystemID()) {
    SystemID_Type::serialize(accessor.getAllocatedToSystemID(), node, DataPlanOverrideRequestMDT_Names::AllocatedToSystemID_Name);
  }
  if (accessor.hasAllocatedToServiceID()) {
    ServiceID_Type::serialize(accessor.getAllocatedToServiceID(), node, DataPlanOverrideRequestMDT_Names::AllocatedToServiceID_Name);
  }
  {
    const uci::type::DataPlanOverrideRequestMDT::Request& boundedList = accessor.getRequest();
    for (uci::type::DataPlanOverrideRequestMDT::Request::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DataPlanOverrideRequestType::serialize(boundedList.at(i), node, DataPlanOverrideRequestMDT_Names::Request_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataPlanOverrideRequestMDT& DataPlanOverrideRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataPlanOverrideRequestMDT>().release());
}

uci::type::DataPlanOverrideRequestMDT& DataPlanOverrideRequestMDT::create(const uci::type::DataPlanOverrideRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataPlanOverrideRequestMDT> newAccessor{boost::make_unique<asb_uci::type::DataPlanOverrideRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataPlanOverrideRequestMDT::destroy(uci::type::DataPlanOverrideRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DataPlanOverrideRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

