/** @file PRI_DataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PRI_DataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/PRI_AgilePatternEnum.h"
#include "asb_uci/type/PRI_DataBaseType.h"
#include "asb_uci/type/PRI_MeasurementEnum.h"
#include "asb_uci/type/PRI_SwitchingPatternEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/PRI_AgilePatternEnum.h"
#include "uci/type/PRI_DataType.h"
#include "uci/type/PRI_MeasurementEnum.h"
#include "uci/type/PRI_SwitchingPatternEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PRI_DataType::PRI_DataType()
  : pRI_PatternInterval_Accessor{boost::make_unique<PRI_PatternInterval>(0, SIZE_MAX)} {
}

PRI_DataType::~PRI_DataType() = default;

void PRI_DataType::copy(const uci::type::PRI_DataType& accessor) {
  copyImpl(accessor, false);
}

void PRI_DataType::copyImpl(const uci::type::PRI_DataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    PRI_DataBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PRI_DataType&>(accessor);
    if (accessorImpl.pRI_SwitchingPattern_Accessor) {
      setPRI_SwitchingPattern(*(accessorImpl.pRI_SwitchingPattern_Accessor));
    } else {
      pRI_SwitchingPattern_Accessor.reset();
    }
    if (accessorImpl.pRI_AgilePattern_Accessor) {
      setPRI_AgilePattern(*(accessorImpl.pRI_AgilePattern_Accessor));
    } else {
      pRI_AgilePattern_Accessor.reset();
    }
    if (accessorImpl.pRI_Measurement_Accessor) {
      setPRI_Measurement(*(accessorImpl.pRI_Measurement_Accessor));
    } else {
      pRI_Measurement_Accessor.reset();
    }
    if (accessorImpl.hasPRI_JitterDeviation()) {
      setPRI_JitterDeviation(accessorImpl.getPRI_JitterDeviation());
    } else {
      clearPRI_JitterDeviation();
    }
    if (accessorImpl.hasPRI_PulseGroupsPresent()) {
      setPRI_PulseGroupsPresent(accessorImpl.getPRI_PulseGroupsPresent());
    } else {
      clearPRI_PulseGroupsPresent();
    }
    if (accessorImpl.hasPRI_Quantized()) {
      setPRI_Quantized(accessorImpl.getPRI_Quantized());
    } else {
      clearPRI_Quantized();
    }
    if (accessorImpl.hasPRI_QuantizationPeriod()) {
      setPRI_QuantizationPeriod(accessorImpl.getPRI_QuantizationPeriod());
    } else {
      clearPRI_QuantizationPeriod();
    }
    if (accessorImpl.hasPRI_Squirrelly()) {
      setPRI_Squirrelly(accessorImpl.getPRI_Squirrelly());
    } else {
      clearPRI_Squirrelly();
    }
    if (accessorImpl.hasPRI_MissingPulse()) {
      setPRI_MissingPulse(accessorImpl.getPRI_MissingPulse());
    } else {
      clearPRI_MissingPulse();
    }
    if (accessorImpl.hasPRI_PatternPeriod()) {
      setPRI_PatternPeriod(accessorImpl.getPRI_PatternPeriod());
    } else {
      clearPRI_PatternPeriod();
    }
    if (accessorImpl.hasPRI_PatternLevels()) {
      setPRI_PatternLevels(accessorImpl.getPRI_PatternLevels());
    } else {
      clearPRI_PatternLevels();
    }
    setPRI_PatternInterval(*(accessorImpl.pRI_PatternInterval_Accessor));
    if (accessorImpl.pRI_JitterDetected_Accessor) {
      setPRI_JitterDetected(*(accessorImpl.pRI_JitterDetected_Accessor));
    } else {
      pRI_JitterDetected_Accessor.reset();
    }
  }
}

void PRI_DataType::reset() noexcept {
  PRI_DataBaseType::reset();
  pRI_SwitchingPattern_Accessor.reset();
  pRI_AgilePattern_Accessor.reset();
  pRI_Measurement_Accessor.reset();
  clearPRI_JitterDeviation();
  clearPRI_PulseGroupsPresent();
  clearPRI_Quantized();
  clearPRI_QuantizationPeriod();
  clearPRI_Squirrelly();
  clearPRI_MissingPulse();
  clearPRI_PatternPeriod();
  clearPRI_PatternLevels();
  pRI_PatternInterval_Accessor->reset();
  pRI_JitterDetected_Accessor.reset();
}

uci::type::PRI_SwitchingPatternEnum& PRI_DataType::getPRI_SwitchingPattern_() const {
  if (pRI_SwitchingPattern_Accessor) {
    return *pRI_SwitchingPattern_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_SwitchingPattern(): An attempt was made to get an optional field that was not enabled, call hasPRI_SwitchingPattern() to determine if it is safe to call getPRI_SwitchingPattern()");
}

const uci::type::PRI_SwitchingPatternEnum& PRI_DataType::getPRI_SwitchingPattern() const {
  return getPRI_SwitchingPattern_();
}

uci::type::PRI_SwitchingPatternEnum& PRI_DataType::getPRI_SwitchingPattern() {
  return getPRI_SwitchingPattern_();
}

uci::type::PRI_DataType& PRI_DataType::setPRI_SwitchingPattern(const uci::type::PRI_SwitchingPatternEnum& accessor) {
  enablePRI_SwitchingPattern();
  if (&accessor != pRI_SwitchingPattern_Accessor.get()) {
    pRI_SwitchingPattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PRI_DataType& PRI_DataType::setPRI_SwitchingPattern(const uci::type::PRI_SwitchingPatternEnum::EnumerationItem value) {
  enablePRI_SwitchingPattern().setValue(value);
  return *this;
}

bool PRI_DataType::hasPRI_SwitchingPattern() const noexcept {
  return static_cast<bool>(pRI_SwitchingPattern_Accessor);
}

uci::type::PRI_SwitchingPatternEnum& PRI_DataType::enablePRI_SwitchingPattern(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_SwitchingPatternEnum : type};
  if ((!pRI_SwitchingPattern_Accessor) || (pRI_SwitchingPattern_Accessor->getAccessorType() != requestedType)) {
    pRI_SwitchingPattern_Accessor = PRI_SwitchingPatternEnum::create(requestedType);
    if (!pRI_SwitchingPattern_Accessor) {
      throw uci::base::UCIException("Error in enablePRI_SwitchingPattern(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pRI_SwitchingPattern_Accessor;
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_SwitchingPattern() noexcept {
  pRI_SwitchingPattern_Accessor.reset();
  return *this;
}

uci::type::PRI_AgilePatternEnum& PRI_DataType::getPRI_AgilePattern_() const {
  if (pRI_AgilePattern_Accessor) {
    return *pRI_AgilePattern_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_AgilePattern(): An attempt was made to get an optional field that was not enabled, call hasPRI_AgilePattern() to determine if it is safe to call getPRI_AgilePattern()");
}

const uci::type::PRI_AgilePatternEnum& PRI_DataType::getPRI_AgilePattern() const {
  return getPRI_AgilePattern_();
}

uci::type::PRI_AgilePatternEnum& PRI_DataType::getPRI_AgilePattern() {
  return getPRI_AgilePattern_();
}

uci::type::PRI_DataType& PRI_DataType::setPRI_AgilePattern(const uci::type::PRI_AgilePatternEnum& accessor) {
  enablePRI_AgilePattern();
  if (&accessor != pRI_AgilePattern_Accessor.get()) {
    pRI_AgilePattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PRI_DataType& PRI_DataType::setPRI_AgilePattern(const uci::type::PRI_AgilePatternEnum::EnumerationItem value) {
  enablePRI_AgilePattern().setValue(value);
  return *this;
}

bool PRI_DataType::hasPRI_AgilePattern() const noexcept {
  return static_cast<bool>(pRI_AgilePattern_Accessor);
}

uci::type::PRI_AgilePatternEnum& PRI_DataType::enablePRI_AgilePattern(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_AgilePatternEnum : type};
  if ((!pRI_AgilePattern_Accessor) || (pRI_AgilePattern_Accessor->getAccessorType() != requestedType)) {
    pRI_AgilePattern_Accessor = PRI_AgilePatternEnum::create(requestedType);
    if (!pRI_AgilePattern_Accessor) {
      throw uci::base::UCIException("Error in enablePRI_AgilePattern(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pRI_AgilePattern_Accessor;
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_AgilePattern() noexcept {
  pRI_AgilePattern_Accessor.reset();
  return *this;
}

uci::type::PRI_MeasurementEnum& PRI_DataType::getPRI_Measurement_() const {
  if (pRI_Measurement_Accessor) {
    return *pRI_Measurement_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Measurement(): An attempt was made to get an optional field that was not enabled, call hasPRI_Measurement() to determine if it is safe to call getPRI_Measurement()");
}

const uci::type::PRI_MeasurementEnum& PRI_DataType::getPRI_Measurement() const {
  return getPRI_Measurement_();
}

uci::type::PRI_MeasurementEnum& PRI_DataType::getPRI_Measurement() {
  return getPRI_Measurement_();
}

uci::type::PRI_DataType& PRI_DataType::setPRI_Measurement(const uci::type::PRI_MeasurementEnum& accessor) {
  enablePRI_Measurement();
  if (&accessor != pRI_Measurement_Accessor.get()) {
    pRI_Measurement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PRI_DataType& PRI_DataType::setPRI_Measurement(const uci::type::PRI_MeasurementEnum::EnumerationItem value) {
  enablePRI_Measurement().setValue(value);
  return *this;
}

bool PRI_DataType::hasPRI_Measurement() const noexcept {
  return static_cast<bool>(pRI_Measurement_Accessor);
}

uci::type::PRI_MeasurementEnum& PRI_DataType::enablePRI_Measurement(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_MeasurementEnum : type};
  if ((!pRI_Measurement_Accessor) || (pRI_Measurement_Accessor->getAccessorType() != requestedType)) {
    pRI_Measurement_Accessor = PRI_MeasurementEnum::create(requestedType);
    if (!pRI_Measurement_Accessor) {
      throw uci::base::UCIException("Error in enablePRI_Measurement(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pRI_Measurement_Accessor;
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_Measurement() noexcept {
  pRI_Measurement_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataType::getPRI_JitterDeviation() const {
  if (pRI_JitterDeviation_Accessor) {
    return *pRI_JitterDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_JitterDeviation(): An attempt was made to get an optional field that was not enabled, call hasPRI_JitterDeviation() to determine if it is safe to call getPRI_JitterDeviation()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_JitterDeviation(uci::type::DurationTypeValue value) {
  pRI_JitterDeviation_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_JitterDeviation() const noexcept {
  return pRI_JitterDeviation_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_JitterDeviation() noexcept {
  pRI_JitterDeviation_Accessor.reset();
  return *this;
}

xs::Boolean PRI_DataType::getPRI_PulseGroupsPresent() const {
  if (pRI_PulseGroupsPresent_Accessor) {
    return *pRI_PulseGroupsPresent_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_PulseGroupsPresent(): An attempt was made to get an optional field that was not enabled, call hasPRI_PulseGroupsPresent() to determine if it is safe to call getPRI_PulseGroupsPresent()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_PulseGroupsPresent(xs::Boolean value) {
  pRI_PulseGroupsPresent_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_PulseGroupsPresent() const noexcept {
  return pRI_PulseGroupsPresent_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_PulseGroupsPresent() noexcept {
  pRI_PulseGroupsPresent_Accessor.reset();
  return *this;
}

xs::Boolean PRI_DataType::getPRI_Quantized() const {
  if (pRI_Quantized_Accessor) {
    return *pRI_Quantized_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Quantized(): An attempt was made to get an optional field that was not enabled, call hasPRI_Quantized() to determine if it is safe to call getPRI_Quantized()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_Quantized(xs::Boolean value) {
  pRI_Quantized_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_Quantized() const noexcept {
  return pRI_Quantized_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_Quantized() noexcept {
  pRI_Quantized_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataType::getPRI_QuantizationPeriod() const {
  if (pRI_QuantizationPeriod_Accessor) {
    return *pRI_QuantizationPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_QuantizationPeriod(): An attempt was made to get an optional field that was not enabled, call hasPRI_QuantizationPeriod() to determine if it is safe to call getPRI_QuantizationPeriod()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_QuantizationPeriod(uci::type::DurationTypeValue value) {
  pRI_QuantizationPeriod_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_QuantizationPeriod() const noexcept {
  return pRI_QuantizationPeriod_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_QuantizationPeriod() noexcept {
  pRI_QuantizationPeriod_Accessor.reset();
  return *this;
}

xs::Boolean PRI_DataType::getPRI_Squirrelly() const {
  if (pRI_Squirrelly_Accessor) {
    return *pRI_Squirrelly_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Squirrelly(): An attempt was made to get an optional field that was not enabled, call hasPRI_Squirrelly() to determine if it is safe to call getPRI_Squirrelly()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_Squirrelly(xs::Boolean value) {
  pRI_Squirrelly_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_Squirrelly() const noexcept {
  return pRI_Squirrelly_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_Squirrelly() noexcept {
  pRI_Squirrelly_Accessor.reset();
  return *this;
}

xs::Boolean PRI_DataType::getPRI_MissingPulse() const {
  if (pRI_MissingPulse_Accessor) {
    return *pRI_MissingPulse_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_MissingPulse(): An attempt was made to get an optional field that was not enabled, call hasPRI_MissingPulse() to determine if it is safe to call getPRI_MissingPulse()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_MissingPulse(xs::Boolean value) {
  pRI_MissingPulse_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_MissingPulse() const noexcept {
  return pRI_MissingPulse_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_MissingPulse() noexcept {
  pRI_MissingPulse_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataType::getPRI_PatternPeriod() const {
  if (pRI_PatternPeriod_Accessor) {
    return *pRI_PatternPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_PatternPeriod(): An attempt was made to get an optional field that was not enabled, call hasPRI_PatternPeriod() to determine if it is safe to call getPRI_PatternPeriod()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_PatternPeriod(uci::type::DurationTypeValue value) {
  pRI_PatternPeriod_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_PatternPeriod() const noexcept {
  return pRI_PatternPeriod_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_PatternPeriod() noexcept {
  pRI_PatternPeriod_Accessor.reset();
  return *this;
}

xs::UnsignedInt PRI_DataType::getPRI_PatternLevels() const {
  if (pRI_PatternLevels_Accessor) {
    return *pRI_PatternLevels_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_PatternLevels(): An attempt was made to get an optional field that was not enabled, call hasPRI_PatternLevels() to determine if it is safe to call getPRI_PatternLevels()");
}

uci::type::PRI_DataType& PRI_DataType::setPRI_PatternLevels(xs::UnsignedInt value) {
  pRI_PatternLevels_Accessor = value;
  return *this;
}

bool PRI_DataType::hasPRI_PatternLevels() const noexcept {
  return pRI_PatternLevels_Accessor.has_value();
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_PatternLevels() noexcept {
  pRI_PatternLevels_Accessor.reset();
  return *this;
}

const uci::type::PRI_DataType::PRI_PatternInterval& PRI_DataType::getPRI_PatternInterval() const {
  return *pRI_PatternInterval_Accessor;
}

uci::type::PRI_DataType::PRI_PatternInterval& PRI_DataType::getPRI_PatternInterval() {
  return *pRI_PatternInterval_Accessor;
}

uci::type::PRI_DataType& PRI_DataType::setPRI_PatternInterval(const uci::type::PRI_DataType::PRI_PatternInterval& accessor) {
  if (&accessor != pRI_PatternInterval_Accessor.get()) {
    pRI_PatternInterval_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EmptyType& PRI_DataType::getPRI_JitterDetected_() const {
  if (pRI_JitterDetected_Accessor) {
    return *pRI_JitterDetected_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_JitterDetected(): An attempt was made to get an optional field that was not enabled, call hasPRI_JitterDetected() to determine if it is safe to call getPRI_JitterDetected()");
}

const uci::type::EmptyType& PRI_DataType::getPRI_JitterDetected() const {
  return getPRI_JitterDetected_();
}

uci::type::EmptyType& PRI_DataType::getPRI_JitterDetected() {
  return getPRI_JitterDetected_();
}

uci::type::PRI_DataType& PRI_DataType::setPRI_JitterDetected(const uci::type::EmptyType& value) {
  return setPRI_JitterDetected(value.c_str());
}

uci::type::PRI_DataType& PRI_DataType::setPRI_JitterDetected(const std::string& value) {
  return setPRI_JitterDetected(value.c_str());
}

uci::type::PRI_DataType& PRI_DataType::setPRI_JitterDetected(const char* value) {
  enablePRI_JitterDetected().setStringValue(value);
  return *this;
}

bool PRI_DataType::hasPRI_JitterDetected() const noexcept {
  return static_cast<bool>(pRI_JitterDetected_Accessor);
}

uci::type::EmptyType& PRI_DataType::enablePRI_JitterDetected(uci::base::accessorType::AccessorType type) {
  if (!pRI_JitterDetected_Accessor) {
    pRI_JitterDetected_Accessor = EmptyType::create(type);
  }
  return *pRI_JitterDetected_Accessor;
}

uci::type::PRI_DataType& PRI_DataType::clearPRI_JitterDetected() noexcept {
  pRI_JitterDetected_Accessor.reset();
  return *this;
}

std::unique_ptr<PRI_DataType> PRI_DataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_DataType : type};
  return (requestedType == uci::type::accessorType::pRI_DataType) ? boost::make_unique<PRI_DataType>() : nullptr;
}

/**  */
namespace PRI_DataType_Names {

constexpr const char* Extern_Type_Name{"PRI_DataType"};
constexpr const char* PRI_SwitchingPattern_Name{"PRI_SwitchingPattern"};
constexpr const char* PRI_AgilePattern_Name{"PRI_AgilePattern"};
constexpr const char* PRI_Measurement_Name{"PRI_Measurement"};
constexpr const char* PRI_JitterDeviation_Name{"PRI_JitterDeviation"};
constexpr const char* PRI_PulseGroupsPresent_Name{"PRI_PulseGroupsPresent"};
constexpr const char* PRI_Quantized_Name{"PRI_Quantized"};
constexpr const char* PRI_QuantizationPeriod_Name{"PRI_QuantizationPeriod"};
constexpr const char* PRI_Squirrelly_Name{"PRI_Squirrelly"};
constexpr const char* PRI_MissingPulse_Name{"PRI_MissingPulse"};
constexpr const char* PRI_PatternPeriod_Name{"PRI_PatternPeriod"};
constexpr const char* PRI_PatternLevels_Name{"PRI_PatternLevels"};
constexpr const char* PRI_PatternInterval_Name{"PRI_PatternInterval"};
constexpr const char* PRI_JitterDetected_Name{"PRI_JitterDetected"};

} // namespace PRI_DataType_Names

void PRI_DataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PRI_DataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PRI_DataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_SwitchingPattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_SwitchingPattern().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_AgilePattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_AgilePattern().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_Measurement_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_Measurement().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_JitterDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_JitterDeviation(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PulseGroupsPresent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_PulseGroupsPresent(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_Quantized_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Quantized(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_QuantizationPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_QuantizationPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_Squirrelly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Squirrelly(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_MissingPulse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_MissingPulse(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PatternPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_PatternPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PatternLevels_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_PatternLevels(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PatternInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PRI_DataType::PRI_PatternInterval& boundedList = accessor.getPRI_PatternInterval();
        const uci::type::PRI_DataType::PRI_PatternInterval::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setDurationValue(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_JitterDetected_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_JitterDetected(*value);
      }
    }
  }
  PRI_DataBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PRI_DataType::serialize(const uci::type::PRI_DataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PRI_DataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PRI_DataType_Names::Extern_Type_Name);
  }
  PRI_DataBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPRI_SwitchingPattern()) {
    PRI_SwitchingPatternEnum::serialize(accessor.getPRI_SwitchingPattern(), node, PRI_DataType_Names::PRI_SwitchingPattern_Name, false);
  }
  if (accessor.hasPRI_AgilePattern()) {
    PRI_AgilePatternEnum::serialize(accessor.getPRI_AgilePattern(), node, PRI_DataType_Names::PRI_AgilePattern_Name, false);
  }
  if (accessor.hasPRI_Measurement()) {
    PRI_MeasurementEnum::serialize(accessor.getPRI_Measurement(), node, PRI_DataType_Names::PRI_Measurement_Name, false);
  }
  if (accessor.hasPRI_JitterDeviation()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_JitterDeviation(), node, PRI_DataType_Names::PRI_JitterDeviation_Name);
  }
  if (accessor.hasPRI_PulseGroupsPresent()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_PulseGroupsPresent(), node, PRI_DataType_Names::PRI_PulseGroupsPresent_Name);
  }
  if (accessor.hasPRI_Quantized()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_Quantized(), node, PRI_DataType_Names::PRI_Quantized_Name);
  }
  if (accessor.hasPRI_QuantizationPeriod()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_QuantizationPeriod(), node, PRI_DataType_Names::PRI_QuantizationPeriod_Name);
  }
  if (accessor.hasPRI_Squirrelly()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_Squirrelly(), node, PRI_DataType_Names::PRI_Squirrelly_Name);
  }
  if (accessor.hasPRI_MissingPulse()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_MissingPulse(), node, PRI_DataType_Names::PRI_MissingPulse_Name);
  }
  if (accessor.hasPRI_PatternPeriod()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_PatternPeriod(), node, PRI_DataType_Names::PRI_PatternPeriod_Name);
  }
  if (accessor.hasPRI_PatternLevels()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPRI_PatternLevels(), node, PRI_DataType_Names::PRI_PatternLevels_Name);
  }
  {
    const uci::type::PRI_DataType::PRI_PatternInterval& boundedList = accessor.getPRI_PatternInterval();
    for (uci::type::PRI_DataType::PRI_PatternInterval::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeDuration(boundedList.at(i), node, PRI_DataType_Names::PRI_PatternInterval_Name);
    }
  }
  if (accessor.hasPRI_JitterDetected()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getPRI_JitterDetected(), node, PRI_DataType_Names::PRI_JitterDetected_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PRI_DataType& PRI_DataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PRI_DataType>().release());
}

uci::type::PRI_DataType& PRI_DataType::create(const uci::type::PRI_DataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PRI_DataType> newAccessor{boost::make_unique<asb_uci::type::PRI_DataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PRI_DataType::destroy(uci::type::PRI_DataType& accessor) {
  delete dynamic_cast<asb_uci::type::PRI_DataType*>(&accessor);
}

} // namespace type

} // namespace uci

