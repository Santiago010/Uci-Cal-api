/** @file OrbitConflictObjectType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitConflictObjectType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitKinematicsType.h"
#include "asb_uci/type/SatelliteIdentityChoiceType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MassType.h"
#include "uci/type/OrbitConflictObjectType.h"
#include "uci/type/OrbitKinematicsType.h"
#include "uci/type/PercentType.h"
#include "uci/type/SatelliteIdentityChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitConflictObjectType::OrbitConflictObjectType()
  : identity_Accessor{boost::make_unique<SatelliteIdentityChoiceType>()},
    kinematics_Accessor{boost::make_unique<OrbitKinematicsType>()} {
}

OrbitConflictObjectType::~OrbitConflictObjectType() = default;

void OrbitConflictObjectType::copy(const uci::type::OrbitConflictObjectType& accessor) {
  copyImpl(accessor, false);
}

void OrbitConflictObjectType::copyImpl(const uci::type::OrbitConflictObjectType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitConflictObjectType&>(accessor);
    setIdentity(*(accessorImpl.identity_Accessor));
    setKinematics(*(accessorImpl.kinematics_Accessor));
    setMass(accessorImpl.mass_Accessor);
    if (accessorImpl.hasPercentileCloudBoundary()) {
      setPercentileCloudBoundary(accessorImpl.getPercentileCloudBoundary());
    } else {
      clearPercentileCloudBoundary();
    }
  }
}

void OrbitConflictObjectType::reset() noexcept {
  identity_Accessor->reset();
  if (kinematics_Accessor->getAccessorType() != uci::type::accessorType::orbitKinematicsType) {
    kinematics_Accessor = boost::make_unique<OrbitKinematicsType>();
  } else {
    kinematics_Accessor->reset();
  }
  mass_Accessor = 0.0;
  clearPercentileCloudBoundary();
}

const uci::type::SatelliteIdentityChoiceType& OrbitConflictObjectType::getIdentity() const {
  return *identity_Accessor;
}

uci::type::SatelliteIdentityChoiceType& OrbitConflictObjectType::getIdentity() {
  return *identity_Accessor;
}

uci::type::OrbitConflictObjectType& OrbitConflictObjectType::setIdentity(const uci::type::SatelliteIdentityChoiceType& accessor) {
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitKinematicsType& OrbitConflictObjectType::getKinematics() const {
  return *kinematics_Accessor;
}

uci::type::OrbitKinematicsType& OrbitConflictObjectType::getKinematics() {
  return *kinematics_Accessor;
}

uci::type::OrbitConflictObjectType& OrbitConflictObjectType::setKinematics(const uci::type::OrbitKinematicsType& accessor) {
  enableKinematics(accessor.getAccessorType());
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::OrbitKinematicsType& OrbitConflictObjectType::enableKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsType : type};
  if ((!kinematics_Accessor) || (kinematics_Accessor->getAccessorType() != requestedType)) {
    kinematics_Accessor = OrbitKinematicsType::create(requestedType);
    if (!kinematics_Accessor) {
      throw uci::base::UCIException("Error in enableKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematics_Accessor;
}

uci::type::MassTypeValue OrbitConflictObjectType::getMass() const {
  return mass_Accessor;
}

uci::type::OrbitConflictObjectType& OrbitConflictObjectType::setMass(uci::type::MassTypeValue value) {
  mass_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue OrbitConflictObjectType::getPercentileCloudBoundary() const {
  if (percentileCloudBoundary_Accessor) {
    return *percentileCloudBoundary_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentileCloudBoundary(): An attempt was made to get an optional field that was not enabled, call hasPercentileCloudBoundary() to determine if it is safe to call getPercentileCloudBoundary()");
}

uci::type::OrbitConflictObjectType& OrbitConflictObjectType::setPercentileCloudBoundary(uci::type::PercentTypeValue value) {
  percentileCloudBoundary_Accessor = value;
  return *this;
}

bool OrbitConflictObjectType::hasPercentileCloudBoundary() const noexcept {
  return percentileCloudBoundary_Accessor.has_value();
}

uci::type::OrbitConflictObjectType& OrbitConflictObjectType::clearPercentileCloudBoundary() noexcept {
  percentileCloudBoundary_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitConflictObjectType> OrbitConflictObjectType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitConflictObjectType : type};
  return (requestedType == uci::type::accessorType::orbitConflictObjectType) ? boost::make_unique<OrbitConflictObjectType>() : nullptr;
}

/**  */
namespace OrbitConflictObjectType_Names {

constexpr const char* Extern_Type_Name{"OrbitConflictObjectType"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* PercentileCloudBoundary_Name{"PercentileCloudBoundary"};

} // namespace OrbitConflictObjectType_Names

void OrbitConflictObjectType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitConflictObjectType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitConflictObjectType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitConflictObjectType_Names::Identity_Name) {
      SatelliteIdentityChoiceType::deserialize(valueType.second, accessor.getIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitConflictObjectType_Names::Kinematics_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableKinematics(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitConflictObjectType_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitConflictObjectType_Names::PercentileCloudBoundary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentileCloudBoundary(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitConflictObjectType::serialize(const uci::type::OrbitConflictObjectType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitConflictObjectType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitConflictObjectType_Names::Extern_Type_Name);
  }
  SatelliteIdentityChoiceType::serialize(accessor.getIdentity(), node, OrbitConflictObjectType_Names::Identity_Name);
  OrbitKinematicsType::serialize(accessor.getKinematics(), node, OrbitConflictObjectType_Names::Kinematics_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, OrbitConflictObjectType_Names::Mass_Name);
  if (accessor.hasPercentileCloudBoundary()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentileCloudBoundary(), node, OrbitConflictObjectType_Names::PercentileCloudBoundary_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitConflictObjectType& OrbitConflictObjectType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitConflictObjectType>().release());
}

uci::type::OrbitConflictObjectType& OrbitConflictObjectType::create(const uci::type::OrbitConflictObjectType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitConflictObjectType> newAccessor{boost::make_unique<asb_uci::type::OrbitConflictObjectType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitConflictObjectType::destroy(uci::type::OrbitConflictObjectType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitConflictObjectType*>(&accessor);
}

} // namespace type

} // namespace uci

