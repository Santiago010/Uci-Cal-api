/** @file KinematicsChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/KinematicsChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OpVolumeKinematicsType.h"
#include "asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "asb_uci/type/RTN_LocalPositionType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/KinematicsChoiceType.h"
#include "uci/type/OpVolumeKinematicsType.h"
#include "uci/type/OrbitalKinematicsChoiceType.h"
#include "uci/type/RTN_LocalPositionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

KinematicsChoiceType::KinematicsChoiceType() = default;

KinematicsChoiceType::~KinematicsChoiceType() = default;

void KinematicsChoiceType::copy(const uci::type::KinematicsChoiceType& accessor) {
  copyImpl(accessor, false);
}

void KinematicsChoiceType::copyImpl(const uci::type::KinematicsChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const KinematicsChoiceType&>(accessor);
    if (accessorImpl.volumeKinematics_Accessor) {
      setVolumeKinematics(*(accessorImpl.volumeKinematics_Accessor));
    } else {
      volumeKinematics_Accessor.reset();
    }
    if (accessorImpl.orbitalKinematics_Accessor) {
      setOrbitalKinematics(*(accessorImpl.orbitalKinematics_Accessor));
    } else {
      orbitalKinematics_Accessor.reset();
    }
    if (accessorImpl.localBodyPosition_Accessor) {
      setLocalBodyPosition(*(accessorImpl.localBodyPosition_Accessor));
    } else {
      localBodyPosition_Accessor.reset();
    }
  }
}

void KinematicsChoiceType::reset() noexcept {
  volumeKinematics_Accessor.reset();
  orbitalKinematics_Accessor.reset();
  localBodyPosition_Accessor.reset();
}

uci::type::KinematicsChoiceType::KinematicsChoiceTypeChoice KinematicsChoiceType::getKinematicsChoiceTypeChoiceOrdinal() const noexcept {
  if (volumeKinematics_Accessor) {
    return KINEMATICSCHOICETYPE_CHOICE_VOLUMEKINEMATICS;
  }
  if (orbitalKinematics_Accessor) {
    return KINEMATICSCHOICETYPE_CHOICE_ORBITALKINEMATICS;
  }
  if (localBodyPosition_Accessor) {
    return KINEMATICSCHOICETYPE_CHOICE_LOCALBODYPOSITION;
  }
  return KINEMATICSCHOICETYPE_CHOICE_NONE;
}

uci::type::KinematicsChoiceType& KinematicsChoiceType::setKinematicsChoiceTypeChoiceOrdinal(uci::type::KinematicsChoiceType::KinematicsChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case KINEMATICSCHOICETYPE_CHOICE_VOLUMEKINEMATICS:
      chooseVolumeKinematics("setKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case KINEMATICSCHOICETYPE_CHOICE_ORBITALKINEMATICS:
      chooseOrbitalKinematics("setKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case KINEMATICSCHOICETYPE_CHOICE_LOCALBODYPOSITION:
      chooseLocalBodyPosition("setKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setKinematicsChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OpVolumeKinematicsType& KinematicsChoiceType::getVolumeKinematics_() const {
  if (volumeKinematics_Accessor) {
    return *volumeKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getVolumeKinematics(): Unable to get VolumeKinematics, field not selected");
}

const uci::type::OpVolumeKinematicsType& KinematicsChoiceType::getVolumeKinematics() const {
  return getVolumeKinematics_();
}

uci::type::OpVolumeKinematicsType& KinematicsChoiceType::getVolumeKinematics() {
  return getVolumeKinematics_();
}

uci::type::KinematicsChoiceType& KinematicsChoiceType::setVolumeKinematics(const uci::type::OpVolumeKinematicsType& accessor) {
  chooseVolumeKinematics();
  if (&accessor != volumeKinematics_Accessor.get()) {
    volumeKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsChoiceType::isVolumeKinematics() const noexcept {
  return static_cast<bool>(volumeKinematics_Accessor);
}

uci::type::OpVolumeKinematicsType& KinematicsChoiceType::chooseVolumeKinematics(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbitalKinematics_Accessor.reset();
  localBodyPosition_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeKinematicsType : type};
  if ((!volumeKinematics_Accessor) || (volumeKinematics_Accessor->getAccessorType() != requestedType)) {
    volumeKinematics_Accessor = OpVolumeKinematicsType::create(type);
    if (!volumeKinematics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *volumeKinematics_Accessor;
}

uci::type::OpVolumeKinematicsType& KinematicsChoiceType::chooseVolumeKinematics(uci::base::accessorType::AccessorType type) {
  return chooseVolumeKinematics("chooseVolumeKinematics", type);
}

uci::type::OrbitalKinematicsChoiceType& KinematicsChoiceType::getOrbitalKinematics_() const {
  if (orbitalKinematics_Accessor) {
    return *orbitalKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalKinematics(): Unable to get OrbitalKinematics, field not selected");
}

const uci::type::OrbitalKinematicsChoiceType& KinematicsChoiceType::getOrbitalKinematics() const {
  return getOrbitalKinematics_();
}

uci::type::OrbitalKinematicsChoiceType& KinematicsChoiceType::getOrbitalKinematics() {
  return getOrbitalKinematics_();
}

uci::type::KinematicsChoiceType& KinematicsChoiceType::setOrbitalKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  chooseOrbitalKinematics(accessor.getAccessorType());
  if (&accessor != orbitalKinematics_Accessor.get()) {
    orbitalKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsChoiceType::isOrbitalKinematics() const noexcept {
  return static_cast<bool>(orbitalKinematics_Accessor);
}

uci::type::OrbitalKinematicsChoiceType& KinematicsChoiceType::chooseOrbitalKinematics(const std::string& method, uci::base::accessorType::AccessorType type) {
  volumeKinematics_Accessor.reset();
  localBodyPosition_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsChoiceType : type};
  if ((!orbitalKinematics_Accessor) || (orbitalKinematics_Accessor->getAccessorType() != requestedType)) {
    orbitalKinematics_Accessor = OrbitalKinematicsChoiceType::create(type);
    if (!orbitalKinematics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalKinematics_Accessor;
}

uci::type::OrbitalKinematicsChoiceType& KinematicsChoiceType::chooseOrbitalKinematics(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalKinematics("chooseOrbitalKinematics", type);
}

uci::type::RTN_LocalPositionType& KinematicsChoiceType::getLocalBodyPosition_() const {
  if (localBodyPosition_Accessor) {
    return *localBodyPosition_Accessor;
  }
  throw uci::base::UCIException("Error in getLocalBodyPosition(): Unable to get LocalBodyPosition, field not selected");
}

const uci::type::RTN_LocalPositionType& KinematicsChoiceType::getLocalBodyPosition() const {
  return getLocalBodyPosition_();
}

uci::type::RTN_LocalPositionType& KinematicsChoiceType::getLocalBodyPosition() {
  return getLocalBodyPosition_();
}

uci::type::KinematicsChoiceType& KinematicsChoiceType::setLocalBodyPosition(const uci::type::RTN_LocalPositionType& accessor) {
  chooseLocalBodyPosition();
  if (&accessor != localBodyPosition_Accessor.get()) {
    localBodyPosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsChoiceType::isLocalBodyPosition() const noexcept {
  return static_cast<bool>(localBodyPosition_Accessor);
}

uci::type::RTN_LocalPositionType& KinematicsChoiceType::chooseLocalBodyPosition(const std::string& method, uci::base::accessorType::AccessorType type) {
  volumeKinematics_Accessor.reset();
  orbitalKinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_LocalPositionType : type};
  if ((!localBodyPosition_Accessor) || (localBodyPosition_Accessor->getAccessorType() != requestedType)) {
    localBodyPosition_Accessor = RTN_LocalPositionType::create(type);
    if (!localBodyPosition_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *localBodyPosition_Accessor;
}

uci::type::RTN_LocalPositionType& KinematicsChoiceType::chooseLocalBodyPosition(uci::base::accessorType::AccessorType type) {
  return chooseLocalBodyPosition("chooseLocalBodyPosition", type);
}

std::unique_ptr<KinematicsChoiceType> KinematicsChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsChoiceType : type};
  return (requestedType == uci::type::accessorType::kinematicsChoiceType) ? boost::make_unique<KinematicsChoiceType>() : nullptr;
}

/**  */
namespace KinematicsChoiceType_Names {

constexpr const char* Extern_Type_Name{"KinematicsChoiceType"};
constexpr const char* VolumeKinematics_Name{"VolumeKinematics"};
constexpr const char* OrbitalKinematics_Name{"OrbitalKinematics"};
constexpr const char* LocalBodyPosition_Name{"LocalBodyPosition"};

} // namespace KinematicsChoiceType_Names

void KinematicsChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::KinematicsChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = KinematicsChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + KinematicsChoiceType_Names::VolumeKinematics_Name) {
      OpVolumeKinematicsType::deserialize(valueType.second, accessor.chooseVolumeKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsChoiceType_Names::OrbitalKinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.chooseOrbitalKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsChoiceType_Names::LocalBodyPosition_Name) {
      RTN_LocalPositionType::deserialize(valueType.second, accessor.chooseLocalBodyPosition(), nodeName, nsPrefix);
    }
  }
}

std::string KinematicsChoiceType::serialize(const uci::type::KinematicsChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? KinematicsChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, KinematicsChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isVolumeKinematics()) {
    OpVolumeKinematicsType::serialize(accessor.getVolumeKinematics(), node, KinematicsChoiceType_Names::VolumeKinematics_Name);
  } else if (accessor.isOrbitalKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getOrbitalKinematics(), node, KinematicsChoiceType_Names::OrbitalKinematics_Name);
  } else if (accessor.isLocalBodyPosition()) {
    RTN_LocalPositionType::serialize(accessor.getLocalBodyPosition(), node, KinematicsChoiceType_Names::LocalBodyPosition_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::KinematicsChoiceType& KinematicsChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::KinematicsChoiceType>().release());
}

uci::type::KinematicsChoiceType& KinematicsChoiceType::create(const uci::type::KinematicsChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::KinematicsChoiceType> newAccessor{boost::make_unique<asb_uci::type::KinematicsChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void KinematicsChoiceType::destroy(uci::type::KinematicsChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::KinematicsChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

