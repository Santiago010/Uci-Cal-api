/** @file RadarTaperWeightingFunctionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RadarTaperWeightingFunctionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/RadarWeightingFunctionsEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/RadarTaperWeightingFunctionType.h"
#include "uci/type/RadarWeightingFunctionsEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarTaperWeightingFunctionType::RadarTaperWeightingFunctionType() = default;

RadarTaperWeightingFunctionType::~RadarTaperWeightingFunctionType() = default;

void RadarTaperWeightingFunctionType::copy(const uci::type::RadarTaperWeightingFunctionType& accessor) {
  copyImpl(accessor, false);
}

void RadarTaperWeightingFunctionType::copyImpl(const uci::type::RadarTaperWeightingFunctionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarTaperWeightingFunctionType&>(accessor);
    if (accessorImpl.standardWeightingFunction_Accessor) {
      setStandardWeightingFunction(*(accessorImpl.standardWeightingFunction_Accessor));
    } else {
      standardWeightingFunction_Accessor.reset();
    }
    if (accessorImpl.otherTaper_Accessor) {
      setOtherTaper(*(accessorImpl.otherTaper_Accessor));
    } else {
      otherTaper_Accessor.reset();
    }
  }
}

void RadarTaperWeightingFunctionType::reset() noexcept {
  standardWeightingFunction_Accessor.reset();
  otherTaper_Accessor.reset();
}

uci::type::RadarTaperWeightingFunctionType::RadarTaperWeightingFunctionTypeChoice RadarTaperWeightingFunctionType::getRadarTaperWeightingFunctionTypeChoiceOrdinal() const noexcept {
  if (standardWeightingFunction_Accessor) {
    return RADARTAPERWEIGHTINGFUNCTIONTYPE_CHOICE_STANDARDWEIGHTINGFUNCTION;
  }
  if (otherTaper_Accessor) {
    return RADARTAPERWEIGHTINGFUNCTIONTYPE_CHOICE_OTHERTAPER;
  }
  return RADARTAPERWEIGHTINGFUNCTIONTYPE_CHOICE_NONE;
}

uci::type::RadarTaperWeightingFunctionType& RadarTaperWeightingFunctionType::setRadarTaperWeightingFunctionTypeChoiceOrdinal(uci::type::RadarTaperWeightingFunctionType::RadarTaperWeightingFunctionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case RADARTAPERWEIGHTINGFUNCTIONTYPE_CHOICE_STANDARDWEIGHTINGFUNCTION:
      chooseStandardWeightingFunction("setRadarTaperWeightingFunctionTypeChoiceOrdinal", type);
      break;
    case RADARTAPERWEIGHTINGFUNCTIONTYPE_CHOICE_OTHERTAPER:
      chooseOtherTaper("setRadarTaperWeightingFunctionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRadarTaperWeightingFunctionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RadarWeightingFunctionsEnum& RadarTaperWeightingFunctionType::getStandardWeightingFunction_() const {
  if (standardWeightingFunction_Accessor) {
    return *standardWeightingFunction_Accessor;
  }
  throw uci::base::UCIException("Error in getStandardWeightingFunction(): Unable to get StandardWeightingFunction, field not selected");
}

const uci::type::RadarWeightingFunctionsEnum& RadarTaperWeightingFunctionType::getStandardWeightingFunction() const {
  return getStandardWeightingFunction_();
}

uci::type::RadarWeightingFunctionsEnum& RadarTaperWeightingFunctionType::getStandardWeightingFunction() {
  return getStandardWeightingFunction_();
}

uci::type::RadarTaperWeightingFunctionType& RadarTaperWeightingFunctionType::setStandardWeightingFunction(const uci::type::RadarWeightingFunctionsEnum& accessor) {
  chooseStandardWeightingFunction();
  if (&accessor != standardWeightingFunction_Accessor.get()) {
    standardWeightingFunction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarTaperWeightingFunctionType& RadarTaperWeightingFunctionType::setStandardWeightingFunction(uci::type::RadarWeightingFunctionsEnum::EnumerationItem value) {
  chooseStandardWeightingFunction().setValue(value);
  return *this;
}

bool RadarTaperWeightingFunctionType::isStandardWeightingFunction() const noexcept {
  return static_cast<bool>(standardWeightingFunction_Accessor);
}

uci::type::RadarWeightingFunctionsEnum& RadarTaperWeightingFunctionType::chooseStandardWeightingFunction(const std::string& method, uci::base::accessorType::AccessorType type) {
  otherTaper_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarWeightingFunctionsEnum : type};
  if ((!standardWeightingFunction_Accessor) || (standardWeightingFunction_Accessor->getAccessorType() != requestedType)) {
    standardWeightingFunction_Accessor = RadarWeightingFunctionsEnum::create(type);
    if (!standardWeightingFunction_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *standardWeightingFunction_Accessor;
}

uci::type::RadarWeightingFunctionsEnum& RadarTaperWeightingFunctionType::chooseStandardWeightingFunction(uci::base::accessorType::AccessorType type) {
  return chooseStandardWeightingFunction("chooseStandardWeightingFunction", type);
}

uci::type::ForeignKeyType& RadarTaperWeightingFunctionType::getOtherTaper_() const {
  if (otherTaper_Accessor) {
    return *otherTaper_Accessor;
  }
  throw uci::base::UCIException("Error in getOtherTaper(): Unable to get OtherTaper, field not selected");
}

const uci::type::ForeignKeyType& RadarTaperWeightingFunctionType::getOtherTaper() const {
  return getOtherTaper_();
}

uci::type::ForeignKeyType& RadarTaperWeightingFunctionType::getOtherTaper() {
  return getOtherTaper_();
}

uci::type::RadarTaperWeightingFunctionType& RadarTaperWeightingFunctionType::setOtherTaper(const uci::type::ForeignKeyType& accessor) {
  chooseOtherTaper("setOtherTaper", accessor.getAccessorType());
  if (&accessor != otherTaper_Accessor.get()) {
    otherTaper_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RadarTaperWeightingFunctionType::isOtherTaper() const noexcept {
  return static_cast<bool>(otherTaper_Accessor);
}

uci::type::ForeignKeyType& RadarTaperWeightingFunctionType::chooseOtherTaper(const std::string& method, uci::base::accessorType::AccessorType type) {
  standardWeightingFunction_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!otherTaper_Accessor) || (otherTaper_Accessor->getAccessorType() != requestedType)) {
    otherTaper_Accessor = ForeignKeyType::create(type);
    if (!otherTaper_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *otherTaper_Accessor;
}

uci::type::ForeignKeyType& RadarTaperWeightingFunctionType::chooseOtherTaper(uci::base::accessorType::AccessorType type) {
  return chooseOtherTaper("chooseOtherTaper", type);
}

std::unique_ptr<RadarTaperWeightingFunctionType> RadarTaperWeightingFunctionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarTaperWeightingFunctionType : type};
  return (requestedType == uci::type::accessorType::radarTaperWeightingFunctionType) ? boost::make_unique<RadarTaperWeightingFunctionType>() : nullptr;
}

/**  */
namespace RadarTaperWeightingFunctionType_Names {

constexpr const char* Extern_Type_Name{"RadarTaperWeightingFunctionType"};
constexpr const char* StandardWeightingFunction_Name{"StandardWeightingFunction"};
constexpr const char* OtherTaper_Name{"OtherTaper"};

} // namespace RadarTaperWeightingFunctionType_Names

void RadarTaperWeightingFunctionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarTaperWeightingFunctionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarTaperWeightingFunctionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarTaperWeightingFunctionType_Names::StandardWeightingFunction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseStandardWeightingFunction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarTaperWeightingFunctionType_Names::OtherTaper_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseOtherTaper(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RadarTaperWeightingFunctionType::serialize(const uci::type::RadarTaperWeightingFunctionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarTaperWeightingFunctionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarTaperWeightingFunctionType_Names::Extern_Type_Name);
  }
  if (accessor.isStandardWeightingFunction()) {
    RadarWeightingFunctionsEnum::serialize(accessor.getStandardWeightingFunction(), node, RadarTaperWeightingFunctionType_Names::StandardWeightingFunction_Name, false);
  } else if (accessor.isOtherTaper()) {
    ForeignKeyType::serialize(accessor.getOtherTaper(), node, RadarTaperWeightingFunctionType_Names::OtherTaper_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarTaperWeightingFunctionType& RadarTaperWeightingFunctionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarTaperWeightingFunctionType>().release());
}

uci::type::RadarTaperWeightingFunctionType& RadarTaperWeightingFunctionType::create(const uci::type::RadarTaperWeightingFunctionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarTaperWeightingFunctionType> newAccessor{boost::make_unique<asb_uci::type::RadarTaperWeightingFunctionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarTaperWeightingFunctionType::destroy(uci::type::RadarTaperWeightingFunctionType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarTaperWeightingFunctionType*>(&accessor);
}

} // namespace type

} // namespace uci

