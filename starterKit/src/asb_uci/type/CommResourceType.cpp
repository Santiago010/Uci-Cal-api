/** @file CommResourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommResourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AntennaID_Type.h"
#include "../../../include/asb_uci/type/CommAntennaModeType.h"
#include "../../../include/asb_uci/type/CommAssetID_Type.h"
#include "../../../include/asb_uci/type/CommSystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AntennaID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommAntennaModeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommAssetID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommResourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommSystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommResourceType::CommResourceType()
  : commSystemID_Accessor{boost::make_unique<CommSystemID_Type>()} {
}

CommResourceType::~CommResourceType() = default;

void CommResourceType::copy(const uci::type::CommResourceType& accessor) {
  copyImpl(accessor, false);
}

void CommResourceType::copyImpl(const uci::type::CommResourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommResourceType&>(accessor);
    setCommSystemID(*(accessorImpl.commSystemID_Accessor));
    if (accessorImpl.commAssetID_Accessor) {
      setCommAssetID(*(accessorImpl.commAssetID_Accessor));
    } else {
      commAssetID_Accessor.reset();
    }
    if (accessorImpl.antennaID_Accessor) {
      setAntennaID(*(accessorImpl.antennaID_Accessor));
    } else {
      antennaID_Accessor.reset();
    }
    if (accessorImpl.antennaModeIdentifier_Accessor) {
      setAntennaModeIdentifier(*(accessorImpl.antennaModeIdentifier_Accessor));
    } else {
      antennaModeIdentifier_Accessor.reset();
    }
  }
}

void CommResourceType::reset() noexcept {
  commSystemID_Accessor->reset();
  commAssetID_Accessor.reset();
  antennaID_Accessor.reset();
  antennaModeIdentifier_Accessor.reset();
}

const uci::type::CommSystemID_Type& CommResourceType::getCommSystemID() const {
  return *commSystemID_Accessor;
}

uci::type::CommSystemID_Type& CommResourceType::getCommSystemID() {
  return *commSystemID_Accessor;
}

uci::type::CommResourceType& CommResourceType::setCommSystemID(const uci::type::CommSystemID_Type& accessor) {
  if (&accessor != commSystemID_Accessor.get()) {
    commSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommAssetID_Type& CommResourceType::getCommAssetID_() const {
  if (commAssetID_Accessor) {
    return *commAssetID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommAssetID(): An attempt was made to get an optional field that was not enabled, call hasCommAssetID() to determine if it is safe to call getCommAssetID()");
}

const uci::type::CommAssetID_Type& CommResourceType::getCommAssetID() const {
  return getCommAssetID_();
}

uci::type::CommAssetID_Type& CommResourceType::getCommAssetID() {
  return getCommAssetID_();
}

uci::type::CommResourceType& CommResourceType::setCommAssetID(const uci::type::CommAssetID_Type& accessor) {
  enableCommAssetID();
  if (&accessor != commAssetID_Accessor.get()) {
    commAssetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommResourceType::hasCommAssetID() const noexcept {
  return static_cast<bool>(commAssetID_Accessor);
}

uci::type::CommAssetID_Type& CommResourceType::enableCommAssetID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAssetID_Type : type};
  if ((!commAssetID_Accessor) || (commAssetID_Accessor->getAccessorType() != requestedType)) {
    commAssetID_Accessor = CommAssetID_Type::create(requestedType);
    if (!commAssetID_Accessor) {
      throw uci::base::UCIException("Error in enableCommAssetID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commAssetID_Accessor;
}

uci::type::CommResourceType& CommResourceType::clearCommAssetID() noexcept {
  commAssetID_Accessor.reset();
  return *this;
}

uci::type::AntennaID_Type& CommResourceType::getAntennaID_() const {
  if (antennaID_Accessor) {
    return *antennaID_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaID(): An attempt was made to get an optional field that was not enabled, call hasAntennaID() to determine if it is safe to call getAntennaID()");
}

const uci::type::AntennaID_Type& CommResourceType::getAntennaID() const {
  return getAntennaID_();
}

uci::type::AntennaID_Type& CommResourceType::getAntennaID() {
  return getAntennaID_();
}

uci::type::CommResourceType& CommResourceType::setAntennaID(const uci::type::AntennaID_Type& accessor) {
  enableAntennaID();
  if (&accessor != antennaID_Accessor.get()) {
    antennaID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommResourceType::hasAntennaID() const noexcept {
  return static_cast<bool>(antennaID_Accessor);
}

uci::type::AntennaID_Type& CommResourceType::enableAntennaID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::antennaID_Type : type};
  if ((!antennaID_Accessor) || (antennaID_Accessor->getAccessorType() != requestedType)) {
    antennaID_Accessor = AntennaID_Type::create(requestedType);
    if (!antennaID_Accessor) {
      throw uci::base::UCIException("Error in enableAntennaID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *antennaID_Accessor;
}

uci::type::CommResourceType& CommResourceType::clearAntennaID() noexcept {
  antennaID_Accessor.reset();
  return *this;
}

uci::type::CommAntennaModeType& CommResourceType::getAntennaModeIdentifier_() const {
  if (antennaModeIdentifier_Accessor) {
    return *antennaModeIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaModeIdentifier(): An attempt was made to get an optional field that was not enabled, call hasAntennaModeIdentifier() to determine if it is safe to call getAntennaModeIdentifier()");
}

const uci::type::CommAntennaModeType& CommResourceType::getAntennaModeIdentifier() const {
  return getAntennaModeIdentifier_();
}

uci::type::CommAntennaModeType& CommResourceType::getAntennaModeIdentifier() {
  return getAntennaModeIdentifier_();
}

uci::type::CommResourceType& CommResourceType::setAntennaModeIdentifier(const uci::type::CommAntennaModeType& accessor) {
  enableAntennaModeIdentifier();
  if (&accessor != antennaModeIdentifier_Accessor.get()) {
    antennaModeIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommResourceType::hasAntennaModeIdentifier() const noexcept {
  return static_cast<bool>(antennaModeIdentifier_Accessor);
}

uci::type::CommAntennaModeType& CommResourceType::enableAntennaModeIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAntennaModeType : type};
  if ((!antennaModeIdentifier_Accessor) || (antennaModeIdentifier_Accessor->getAccessorType() != requestedType)) {
    antennaModeIdentifier_Accessor = CommAntennaModeType::create(requestedType);
    if (!antennaModeIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableAntennaModeIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *antennaModeIdentifier_Accessor;
}

uci::type::CommResourceType& CommResourceType::clearAntennaModeIdentifier() noexcept {
  antennaModeIdentifier_Accessor.reset();
  return *this;
}

std::unique_ptr<CommResourceType> CommResourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commResourceType : type};
  return (requestedType == uci::type::accessorType::commResourceType) ? boost::make_unique<CommResourceType>() : nullptr;
}

/**  */
namespace CommResourceType_Names {

constexpr const char* Extern_Type_Name{"CommResourceType"};
constexpr const char* CommSystemID_Name{"CommSystemID"};
constexpr const char* CommAssetID_Name{"CommAssetID"};
constexpr const char* AntennaID_Name{"AntennaID"};
constexpr const char* AntennaModeIdentifier_Name{"AntennaModeIdentifier"};

} // namespace CommResourceType_Names

void CommResourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommResourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommResourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommResourceType_Names::CommSystemID_Name) {
      CommSystemID_Type::deserialize(valueType.second, accessor.getCommSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommResourceType_Names::CommAssetID_Name) {
      CommAssetID_Type::deserialize(valueType.second, accessor.enableCommAssetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommResourceType_Names::AntennaID_Name) {
      AntennaID_Type::deserialize(valueType.second, accessor.enableAntennaID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommResourceType_Names::AntennaModeIdentifier_Name) {
      CommAntennaModeType::deserialize(valueType.second, accessor.enableAntennaModeIdentifier(), nodeName, nsPrefix);
    }
  }
}

std::string CommResourceType::serialize(const uci::type::CommResourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommResourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommResourceType_Names::Extern_Type_Name);
  }
  CommSystemID_Type::serialize(accessor.getCommSystemID(), node, CommResourceType_Names::CommSystemID_Name);
  if (accessor.hasCommAssetID()) {
    CommAssetID_Type::serialize(accessor.getCommAssetID(), node, CommResourceType_Names::CommAssetID_Name);
  }
  if (accessor.hasAntennaID()) {
    AntennaID_Type::serialize(accessor.getAntennaID(), node, CommResourceType_Names::AntennaID_Name);
  }
  if (accessor.hasAntennaModeIdentifier()) {
    CommAntennaModeType::serialize(accessor.getAntennaModeIdentifier(), node, CommResourceType_Names::AntennaModeIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommResourceType& CommResourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommResourceType>().release());
}

uci::type::CommResourceType& CommResourceType::create(const uci::type::CommResourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommResourceType> newAccessor{boost::make_unique<asb_uci::type::CommResourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommResourceType::destroy(uci::type::CommResourceType& accessor) {
  delete dynamic_cast<asb_uci::type::CommResourceType*>(&accessor);
}

} // namespace type

} // namespace uci

