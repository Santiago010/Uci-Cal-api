/** @file SubsystemCompletedBIT_ItemType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SubsystemCompletedBIT_ItemType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/SubsystemBIT_ResultEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemBIT_ResultEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemCompletedBIT_ItemType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemCompletedBIT_ItemType::SubsystemCompletedBIT_ItemType()
  : bIT_ItemName_Accessor{boost::make_unique<VisibleString256Type>()},
    result_Accessor{boost::make_unique<SubsystemBIT_ResultEnum>()} {
}

SubsystemCompletedBIT_ItemType::~SubsystemCompletedBIT_ItemType() = default;

void SubsystemCompletedBIT_ItemType::copy(const uci::type::SubsystemCompletedBIT_ItemType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemCompletedBIT_ItemType::copyImpl(const uci::type::SubsystemCompletedBIT_ItemType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemCompletedBIT_ItemType&>(accessor);
    setBIT_ItemName(*(accessorImpl.bIT_ItemName_Accessor));
    setResult(*(accessorImpl.result_Accessor));
    if (accessorImpl.failReason_Accessor) {
      setFailReason(*(accessorImpl.failReason_Accessor));
    } else {
      failReason_Accessor.reset();
    }
  }
}

void SubsystemCompletedBIT_ItemType::reset() noexcept {
  bIT_ItemName_Accessor->reset();
  result_Accessor->reset();
  failReason_Accessor.reset();
}

const asb_uci::type::VisibleString256Type& SubsystemCompletedBIT_ItemType::getBIT_ItemName() const noexcept {
  return *bIT_ItemName_Accessor;
}

asb_uci::type::VisibleString256Type& SubsystemCompletedBIT_ItemType::getBIT_ItemName() noexcept {
  return *bIT_ItemName_Accessor;
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setBIT_ItemName(const asb_uci::type::VisibleString256Type& value) {
  return setBIT_ItemName(value.c_str());
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setBIT_ItemName(const std::string& value) {
  return setBIT_ItemName(value.c_str());
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setBIT_ItemName(const char* value) {
  bIT_ItemName_Accessor->setStringValue(value);
  return *this;
}

const uci::type::SubsystemBIT_ResultEnum& SubsystemCompletedBIT_ItemType::getResult() const {
  return *result_Accessor;
}

uci::type::SubsystemBIT_ResultEnum& SubsystemCompletedBIT_ItemType::getResult() {
  return *result_Accessor;
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setResult(const uci::type::SubsystemBIT_ResultEnum& accessor) {
  if (&accessor != result_Accessor.get()) {
    result_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setResult(uci::type::SubsystemBIT_ResultEnum::EnumerationItem value) {
  result_Accessor->setValue(value);
  return *this;
}


asb_uci::type::VisibleString256Type& SubsystemCompletedBIT_ItemType::getFailReason_() const {
  if (failReason_Accessor) {
    return *failReason_Accessor;
  }
  throw uci::base::UCIException("Error in getFailReason(): An attempt was made to get an optional field that was not enabled, call hasFailReason() to determine if it is safe to call getFailReason()");
}

const asb_uci::type::VisibleString256Type& SubsystemCompletedBIT_ItemType::getFailReason() const {
  return getFailReason_();
}

asb_uci::type::VisibleString256Type& SubsystemCompletedBIT_ItemType::getFailReason() {
  return getFailReason_();
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setFailReason(const asb_uci::type::VisibleString256Type& value) {
  return setFailReason(value.c_str());
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setFailReason(const std::string& value) {
  return setFailReason(value.c_str());
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::setFailReason(const char* value) {
  enableFailReason().setStringValue(value);
  return *this;
}

bool SubsystemCompletedBIT_ItemType::hasFailReason() const noexcept {
  return static_cast<bool>(failReason_Accessor);
}

asb_uci::type::VisibleString256Type& SubsystemCompletedBIT_ItemType::enableFailReason(uci::base::accessorType::AccessorType type) {
  if (!failReason_Accessor) {
    failReason_Accessor = asb_uci::type::VisibleString256Type::create(type);
  }
  return *failReason_Accessor;
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::clearFailReason() noexcept {
  failReason_Accessor.reset();
  return *this;
}

std::unique_ptr<SubsystemCompletedBIT_ItemType> SubsystemCompletedBIT_ItemType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemCompletedBIT_ItemType : type};
  return (requestedType == uci::type::accessorType::subsystemCompletedBIT_ItemType) ? boost::make_unique<SubsystemCompletedBIT_ItemType>() : nullptr;
}

/**  */
namespace SubsystemCompletedBIT_ItemType_Names {

constexpr const char* Extern_Type_Name{"SubsystemCompletedBIT_ItemType"};
constexpr const char* BIT_ItemName_Name{"BIT_ItemName"};
constexpr const char* Result_Name{"Result"};
constexpr const char* FailReason_Name{"FailReason"};

} // namespace SubsystemCompletedBIT_ItemType_Names

void SubsystemCompletedBIT_ItemType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemCompletedBIT_ItemType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemCompletedBIT_ItemType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_ItemType_Names::BIT_ItemName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBIT_ItemName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_ItemType_Names::Result_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getResult().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_ItemType_Names::FailReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFailReason(*value);
      }
    }
  }
}

std::string SubsystemCompletedBIT_ItemType::serialize(const uci::type::SubsystemCompletedBIT_ItemType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemCompletedBIT_ItemType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemCompletedBIT_ItemType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getBIT_ItemName(), node, SubsystemCompletedBIT_ItemType_Names::BIT_ItemName_Name);
  SubsystemBIT_ResultEnum::serialize(accessor.getResult(), node, SubsystemCompletedBIT_ItemType_Names::Result_Name, false);
  if (accessor.hasFailReason()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getFailReason(), node, SubsystemCompletedBIT_ItemType_Names::FailReason_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemCompletedBIT_ItemType>().release());
}

uci::type::SubsystemCompletedBIT_ItemType& SubsystemCompletedBIT_ItemType::create(const uci::type::SubsystemCompletedBIT_ItemType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemCompletedBIT_ItemType> newAccessor{boost::make_unique<asb_uci::type::SubsystemCompletedBIT_ItemType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemCompletedBIT_ItemType::destroy(uci::type::SubsystemCompletedBIT_ItemType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemCompletedBIT_ItemType*>(&accessor);
}

} // namespace type

} // namespace uci

