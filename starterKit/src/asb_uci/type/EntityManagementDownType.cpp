/** @file EntityManagementDownType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityManagementDownType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityManagementDownType.h"
#include "uci/type/Point2D_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityManagementDownType::EntityManagementDownType()
  : entityID_Accessor{boost::make_unique<EntityID_Type>()} {
}

EntityManagementDownType::~EntityManagementDownType() = default;

void EntityManagementDownType::copy(const uci::type::EntityManagementDownType& accessor) {
  copyImpl(accessor, false);
}

void EntityManagementDownType::copyImpl(const uci::type::EntityManagementDownType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityManagementDownType&>(accessor);
    setEntityID(*(accessorImpl.entityID_Accessor));
    setEnabled(accessorImpl.enabled_Accessor);
    if (accessorImpl.downLocation_Accessor) {
      setDownLocation(*(accessorImpl.downLocation_Accessor));
    } else {
      downLocation_Accessor.reset();
    }
  }
}

void EntityManagementDownType::reset() noexcept {
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  enabled_Accessor = false;
  downLocation_Accessor.reset();
}

const uci::type::EntityID_Type& EntityManagementDownType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityManagementDownType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityManagementDownType& EntityManagementDownType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityManagementDownType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

xs::Boolean EntityManagementDownType::getEnabled() const {
  return enabled_Accessor;
}

uci::type::EntityManagementDownType& EntityManagementDownType::setEnabled(xs::Boolean value) {
  enabled_Accessor = value;
  return *this;
}


uci::type::Point2D_Type& EntityManagementDownType::getDownLocation_() const {
  if (downLocation_Accessor) {
    return *downLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getDownLocation(): An attempt was made to get an optional field that was not enabled, call hasDownLocation() to determine if it is safe to call getDownLocation()");
}

const uci::type::Point2D_Type& EntityManagementDownType::getDownLocation() const {
  return getDownLocation_();
}

uci::type::Point2D_Type& EntityManagementDownType::getDownLocation() {
  return getDownLocation_();
}

uci::type::EntityManagementDownType& EntityManagementDownType::setDownLocation(const uci::type::Point2D_Type& accessor) {
  enableDownLocation(accessor.getAccessorType());
  if (&accessor != downLocation_Accessor.get()) {
    downLocation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityManagementDownType::hasDownLocation() const noexcept {
  return static_cast<bool>(downLocation_Accessor);
}

uci::type::Point2D_Type& EntityManagementDownType::enableDownLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!downLocation_Accessor) || (downLocation_Accessor->getAccessorType() != requestedType)) {
    downLocation_Accessor = Point2D_Type::create(requestedType);
    if (!downLocation_Accessor) {
      throw uci::base::UCIException("Error in enableDownLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *downLocation_Accessor;
}

uci::type::EntityManagementDownType& EntityManagementDownType::clearDownLocation() noexcept {
  downLocation_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityManagementDownType> EntityManagementDownType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityManagementDownType : type};
  return (requestedType == uci::type::accessorType::entityManagementDownType) ? boost::make_unique<EntityManagementDownType>() : nullptr;
}

/**  */
namespace EntityManagementDownType_Names {

constexpr const char* Extern_Type_Name{"EntityManagementDownType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* Enabled_Name{"Enabled"};
constexpr const char* DownLocation_Name{"DownLocation"};

} // namespace EntityManagementDownType_Names

void EntityManagementDownType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityManagementDownType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityManagementDownType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityManagementDownType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityManagementDownType_Names::Enabled_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEnabled(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EntityManagementDownType_Names::DownLocation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDownLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string EntityManagementDownType::serialize(const uci::type::EntityManagementDownType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityManagementDownType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityManagementDownType_Names::Extern_Type_Name);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityManagementDownType_Names::EntityID_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEnabled(), node, EntityManagementDownType_Names::Enabled_Name);
  if (accessor.hasDownLocation()) {
    Point2D_Type::serialize(accessor.getDownLocation(), node, EntityManagementDownType_Names::DownLocation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityManagementDownType& EntityManagementDownType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityManagementDownType>().release());
}

uci::type::EntityManagementDownType& EntityManagementDownType::create(const uci::type::EntityManagementDownType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityManagementDownType> newAccessor{boost::make_unique<asb_uci::type::EntityManagementDownType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityManagementDownType::destroy(uci::type::EntityManagementDownType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityManagementDownType*>(&accessor);
}

} // namespace type

} // namespace uci

