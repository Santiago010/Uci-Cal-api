/** @file OrderOfBattleTimestampsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrderOfBattleTimestampsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeSigmaType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeSigmaType.h"
#include "uci/type/OrderOfBattleTimestampsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrderOfBattleTimestampsType::OrderOfBattleTimestampsType()
  : creationTime_Accessor{boost::make_unique<DateTimeSigmaType>()} {
}

OrderOfBattleTimestampsType::~OrderOfBattleTimestampsType() = default;

void OrderOfBattleTimestampsType::copy(const uci::type::OrderOfBattleTimestampsType& accessor) {
  copyImpl(accessor, false);
}

void OrderOfBattleTimestampsType::copyImpl(const uci::type::OrderOfBattleTimestampsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrderOfBattleTimestampsType&>(accessor);
    setCreationTime(*(accessorImpl.creationTime_Accessor));
    if (accessorImpl.lastUpdateTime_Accessor) {
      setLastUpdateTime(*(accessorImpl.lastUpdateTime_Accessor));
    } else {
      lastUpdateTime_Accessor.reset();
    }
    if (accessorImpl.firstObservationTime_Accessor) {
      setFirstObservationTime(*(accessorImpl.firstObservationTime_Accessor));
    } else {
      firstObservationTime_Accessor.reset();
    }
    if (accessorImpl.lastObservationTime_Accessor) {
      setLastObservationTime(*(accessorImpl.lastObservationTime_Accessor));
    } else {
      lastObservationTime_Accessor.reset();
    }
    if (accessorImpl.lastReviewedTime_Accessor) {
      setLastReviewedTime(*(accessorImpl.lastReviewedTime_Accessor));
    } else {
      lastReviewedTime_Accessor.reset();
    }
  }
}

void OrderOfBattleTimestampsType::reset() noexcept {
  creationTime_Accessor->reset();
  lastUpdateTime_Accessor.reset();
  firstObservationTime_Accessor.reset();
  lastObservationTime_Accessor.reset();
  lastReviewedTime_Accessor.reset();
}

const uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getCreationTime() const {
  return *creationTime_Accessor;
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getCreationTime() {
  return *creationTime_Accessor;
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::setCreationTime(const uci::type::DateTimeSigmaType& accessor) {
  if (&accessor != creationTime_Accessor.get()) {
    creationTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastUpdateTime_() const {
  if (lastUpdateTime_Accessor) {
    return *lastUpdateTime_Accessor;
  }
  throw uci::base::UCIException("Error in getLastUpdateTime(): An attempt was made to get an optional field that was not enabled, call hasLastUpdateTime() to determine if it is safe to call getLastUpdateTime()");
}

const uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastUpdateTime() const {
  return getLastUpdateTime_();
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastUpdateTime() {
  return getLastUpdateTime_();
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::setLastUpdateTime(const uci::type::DateTimeSigmaType& accessor) {
  enableLastUpdateTime();
  if (&accessor != lastUpdateTime_Accessor.get()) {
    lastUpdateTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrderOfBattleTimestampsType::hasLastUpdateTime() const noexcept {
  return static_cast<bool>(lastUpdateTime_Accessor);
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::enableLastUpdateTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeSigmaType : type};
  if ((!lastUpdateTime_Accessor) || (lastUpdateTime_Accessor->getAccessorType() != requestedType)) {
    lastUpdateTime_Accessor = DateTimeSigmaType::create(requestedType);
    if (!lastUpdateTime_Accessor) {
      throw uci::base::UCIException("Error in enableLastUpdateTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lastUpdateTime_Accessor;
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::clearLastUpdateTime() noexcept {
  lastUpdateTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getFirstObservationTime_() const {
  if (firstObservationTime_Accessor) {
    return *firstObservationTime_Accessor;
  }
  throw uci::base::UCIException("Error in getFirstObservationTime(): An attempt was made to get an optional field that was not enabled, call hasFirstObservationTime() to determine if it is safe to call getFirstObservationTime()");
}

const uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getFirstObservationTime() const {
  return getFirstObservationTime_();
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getFirstObservationTime() {
  return getFirstObservationTime_();
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::setFirstObservationTime(const uci::type::DateTimeSigmaType& accessor) {
  enableFirstObservationTime();
  if (&accessor != firstObservationTime_Accessor.get()) {
    firstObservationTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrderOfBattleTimestampsType::hasFirstObservationTime() const noexcept {
  return static_cast<bool>(firstObservationTime_Accessor);
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::enableFirstObservationTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeSigmaType : type};
  if ((!firstObservationTime_Accessor) || (firstObservationTime_Accessor->getAccessorType() != requestedType)) {
    firstObservationTime_Accessor = DateTimeSigmaType::create(requestedType);
    if (!firstObservationTime_Accessor) {
      throw uci::base::UCIException("Error in enableFirstObservationTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *firstObservationTime_Accessor;
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::clearFirstObservationTime() noexcept {
  firstObservationTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastObservationTime_() const {
  if (lastObservationTime_Accessor) {
    return *lastObservationTime_Accessor;
  }
  throw uci::base::UCIException("Error in getLastObservationTime(): An attempt was made to get an optional field that was not enabled, call hasLastObservationTime() to determine if it is safe to call getLastObservationTime()");
}

const uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastObservationTime() const {
  return getLastObservationTime_();
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastObservationTime() {
  return getLastObservationTime_();
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::setLastObservationTime(const uci::type::DateTimeSigmaType& accessor) {
  enableLastObservationTime();
  if (&accessor != lastObservationTime_Accessor.get()) {
    lastObservationTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrderOfBattleTimestampsType::hasLastObservationTime() const noexcept {
  return static_cast<bool>(lastObservationTime_Accessor);
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::enableLastObservationTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeSigmaType : type};
  if ((!lastObservationTime_Accessor) || (lastObservationTime_Accessor->getAccessorType() != requestedType)) {
    lastObservationTime_Accessor = DateTimeSigmaType::create(requestedType);
    if (!lastObservationTime_Accessor) {
      throw uci::base::UCIException("Error in enableLastObservationTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lastObservationTime_Accessor;
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::clearLastObservationTime() noexcept {
  lastObservationTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastReviewedTime_() const {
  if (lastReviewedTime_Accessor) {
    return *lastReviewedTime_Accessor;
  }
  throw uci::base::UCIException("Error in getLastReviewedTime(): An attempt was made to get an optional field that was not enabled, call hasLastReviewedTime() to determine if it is safe to call getLastReviewedTime()");
}

const uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastReviewedTime() const {
  return getLastReviewedTime_();
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::getLastReviewedTime() {
  return getLastReviewedTime_();
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::setLastReviewedTime(const uci::type::DateTimeSigmaType& accessor) {
  enableLastReviewedTime();
  if (&accessor != lastReviewedTime_Accessor.get()) {
    lastReviewedTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrderOfBattleTimestampsType::hasLastReviewedTime() const noexcept {
  return static_cast<bool>(lastReviewedTime_Accessor);
}

uci::type::DateTimeSigmaType& OrderOfBattleTimestampsType::enableLastReviewedTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeSigmaType : type};
  if ((!lastReviewedTime_Accessor) || (lastReviewedTime_Accessor->getAccessorType() != requestedType)) {
    lastReviewedTime_Accessor = DateTimeSigmaType::create(requestedType);
    if (!lastReviewedTime_Accessor) {
      throw uci::base::UCIException("Error in enableLastReviewedTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lastReviewedTime_Accessor;
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::clearLastReviewedTime() noexcept {
  lastReviewedTime_Accessor.reset();
  return *this;
}

std::unique_ptr<OrderOfBattleTimestampsType> OrderOfBattleTimestampsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orderOfBattleTimestampsType : type};
  return (requestedType == uci::type::accessorType::orderOfBattleTimestampsType) ? boost::make_unique<OrderOfBattleTimestampsType>() : nullptr;
}

/**  */
namespace OrderOfBattleTimestampsType_Names {

constexpr const char* Extern_Type_Name{"OrderOfBattleTimestampsType"};
constexpr const char* CreationTime_Name{"CreationTime"};
constexpr const char* LastUpdateTime_Name{"LastUpdateTime"};
constexpr const char* FirstObservationTime_Name{"FirstObservationTime"};
constexpr const char* LastObservationTime_Name{"LastObservationTime"};
constexpr const char* LastReviewedTime_Name{"LastReviewedTime"};

} // namespace OrderOfBattleTimestampsType_Names

void OrderOfBattleTimestampsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrderOfBattleTimestampsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrderOfBattleTimestampsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrderOfBattleTimestampsType_Names::CreationTime_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.getCreationTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderOfBattleTimestampsType_Names::LastUpdateTime_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.enableLastUpdateTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderOfBattleTimestampsType_Names::FirstObservationTime_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.enableFirstObservationTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderOfBattleTimestampsType_Names::LastObservationTime_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.enableLastObservationTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderOfBattleTimestampsType_Names::LastReviewedTime_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.enableLastReviewedTime(), nodeName, nsPrefix);
    }
  }
}

std::string OrderOfBattleTimestampsType::serialize(const uci::type::OrderOfBattleTimestampsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrderOfBattleTimestampsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrderOfBattleTimestampsType_Names::Extern_Type_Name);
  }
  DateTimeSigmaType::serialize(accessor.getCreationTime(), node, OrderOfBattleTimestampsType_Names::CreationTime_Name);
  if (accessor.hasLastUpdateTime()) {
    DateTimeSigmaType::serialize(accessor.getLastUpdateTime(), node, OrderOfBattleTimestampsType_Names::LastUpdateTime_Name);
  }
  if (accessor.hasFirstObservationTime()) {
    DateTimeSigmaType::serialize(accessor.getFirstObservationTime(), node, OrderOfBattleTimestampsType_Names::FirstObservationTime_Name);
  }
  if (accessor.hasLastObservationTime()) {
    DateTimeSigmaType::serialize(accessor.getLastObservationTime(), node, OrderOfBattleTimestampsType_Names::LastObservationTime_Name);
  }
  if (accessor.hasLastReviewedTime()) {
    DateTimeSigmaType::serialize(accessor.getLastReviewedTime(), node, OrderOfBattleTimestampsType_Names::LastReviewedTime_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrderOfBattleTimestampsType>().release());
}

uci::type::OrderOfBattleTimestampsType& OrderOfBattleTimestampsType::create(const uci::type::OrderOfBattleTimestampsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrderOfBattleTimestampsType> newAccessor{boost::make_unique<asb_uci::type::OrderOfBattleTimestampsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrderOfBattleTimestampsType::destroy(uci::type::OrderOfBattleTimestampsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrderOfBattleTimestampsType*>(&accessor);
}

} // namespace type

} // namespace uci

