/** @file COMINT_ReceiveDwellType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/COMINT_ReceiveDwellType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/COMINT_DwellStateEnum.h"
#include "../../../include/asb_uci/type/COMINT_DwellTypeEnum.h"
#include "../../../include/asb_uci/type/COMINT_InteractiveType.h"
#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/DwellID_Type.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/NED_ConeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_DwellStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_DwellTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_InteractiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_ReceiveDwellType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DwellID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MilliwattPowerRatioType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NED_ConeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_ReceiveDwellType::COMINT_ReceiveDwellType()
  : dwellID_Accessor{boost::make_unique<DwellID_Type>()},
    dwellState_Accessor{boost::make_unique<COMINT_DwellStateEnum>()},
    componentID_Accessor{boost::make_unique<ComponentID>(0, SIZE_MAX)},
    frequency_Accessor{boost::make_unique<Frequency>(0, SIZE_MAX)} {
}

COMINT_ReceiveDwellType::~COMINT_ReceiveDwellType() = default;

void COMINT_ReceiveDwellType::copy(const uci::type::COMINT_ReceiveDwellType& accessor) {
  copyImpl(accessor, false);
}

void COMINT_ReceiveDwellType::copyImpl(const uci::type::COMINT_ReceiveDwellType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const COMINT_ReceiveDwellType&>(accessor);
    setDwellID(*(accessorImpl.dwellID_Accessor));
    setDwellState(*(accessorImpl.dwellState_Accessor));
    if (accessorImpl.dwellType_Accessor) {
      setDwellType(*(accessorImpl.dwellType_Accessor));
    } else {
      dwellType_Accessor.reset();
    }
    if (accessorImpl.dwellFOV_Accessor) {
      setDwellFOV(*(accessorImpl.dwellFOV_Accessor));
    } else {
      dwellFOV_Accessor.reset();
    }
    if (accessorImpl.hasStartTime()) {
      setStartTime(accessorImpl.getStartTime());
    } else {
      clearStartTime();
    }
    if (accessorImpl.hasCumulativeDwellTime()) {
      setCumulativeDwellTime(accessorImpl.getCumulativeDwellTime());
    } else {
      clearCumulativeDwellTime();
    }
    setComponentID(*(accessorImpl.componentID_Accessor));
    setFrequency(*(accessorImpl.frequency_Accessor));
    if (accessorImpl.hasDwellRevisitInterval()) {
      setDwellRevisitInterval(accessorImpl.getDwellRevisitInterval());
    } else {
      clearDwellRevisitInterval();
    }
    if (accessorImpl.hasPulseWidthLow()) {
      setPulseWidthLow(accessorImpl.getPulseWidthLow());
    } else {
      clearPulseWidthLow();
    }
    if (accessorImpl.hasPulseWidthHigh()) {
      setPulseWidthHigh(accessorImpl.getPulseWidthHigh());
    } else {
      clearPulseWidthHigh();
    }
    if (accessorImpl.hasPRI_High()) {
      setPRI_High(accessorImpl.getPRI_High());
    } else {
      clearPRI_High();
    }
    if (accessorImpl.hasNativeSensitivity()) {
      setNativeSensitivity(accessorImpl.getNativeSensitivity());
    } else {
      clearNativeSensitivity();
    }
    if (accessorImpl.hasDesensitization()) {
      setDesensitization(accessorImpl.getDesensitization());
    } else {
      clearDesensitization();
    }
    if (accessorImpl.hasVideoBandwidth()) {
      setVideoBandwidth(accessorImpl.getVideoBandwidth());
    } else {
      clearVideoBandwidth();
    }
    if (accessorImpl.cOMINT_Interactive_Accessor) {
      setCOMINT_Interactive(*(accessorImpl.cOMINT_Interactive_Accessor));
    } else {
      cOMINT_Interactive_Accessor.reset();
    }
    if (accessorImpl.hasStopTime()) {
      setStopTime(accessorImpl.getStopTime());
    } else {
      clearStopTime();
    }
    if (accessorImpl.hasSampleRate()) {
      setSampleRate(accessorImpl.getSampleRate());
    } else {
      clearSampleRate();
    }
    if (accessorImpl.hasFFT_PointsPerSample()) {
      setFFT_PointsPerSample(accessorImpl.getFFT_PointsPerSample());
    } else {
      clearFFT_PointsPerSample();
    }
  }
}

void COMINT_ReceiveDwellType::reset() noexcept {
  dwellID_Accessor->reset();
  dwellState_Accessor->reset();
  dwellType_Accessor.reset();
  dwellFOV_Accessor.reset();
  clearStartTime();
  clearCumulativeDwellTime();
  componentID_Accessor->reset();
  frequency_Accessor->reset();
  clearDwellRevisitInterval();
  clearPulseWidthLow();
  clearPulseWidthHigh();
  clearPRI_High();
  clearNativeSensitivity();
  clearDesensitization();
  clearVideoBandwidth();
  cOMINT_Interactive_Accessor.reset();
  clearStopTime();
  clearSampleRate();
  clearFFT_PointsPerSample();
}

const uci::type::DwellID_Type& COMINT_ReceiveDwellType::getDwellID() const {
  return *dwellID_Accessor;
}

uci::type::DwellID_Type& COMINT_ReceiveDwellType::getDwellID() {
  return *dwellID_Accessor;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDwellID(const uci::type::DwellID_Type& accessor) {
  if (&accessor != dwellID_Accessor.get()) {
    dwellID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::COMINT_DwellStateEnum& COMINT_ReceiveDwellType::getDwellState() const {
  return *dwellState_Accessor;
}

uci::type::COMINT_DwellStateEnum& COMINT_ReceiveDwellType::getDwellState() {
  return *dwellState_Accessor;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDwellState(const uci::type::COMINT_DwellStateEnum& accessor) {
  if (&accessor != dwellState_Accessor.get()) {
    dwellState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDwellState(uci::type::COMINT_DwellStateEnum::EnumerationItem value) {
  dwellState_Accessor->setValue(value);
  return *this;
}


uci::type::COMINT_DwellTypeEnum& COMINT_ReceiveDwellType::getDwellType_() const {
  if (dwellType_Accessor) {
    return *dwellType_Accessor;
  }
  throw uci::base::UCIException("Error in getDwellType(): An attempt was made to get an optional field that was not enabled, call hasDwellType() to determine if it is safe to call getDwellType()");
}

const uci::type::COMINT_DwellTypeEnum& COMINT_ReceiveDwellType::getDwellType() const {
  return getDwellType_();
}

uci::type::COMINT_DwellTypeEnum& COMINT_ReceiveDwellType::getDwellType() {
  return getDwellType_();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDwellType(const uci::type::COMINT_DwellTypeEnum& accessor) {
  enableDwellType();
  if (&accessor != dwellType_Accessor.get()) {
    dwellType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDwellType(const uci::type::COMINT_DwellTypeEnum::EnumerationItem value) {
  enableDwellType().setValue(value);
  return *this;
}

bool COMINT_ReceiveDwellType::hasDwellType() const noexcept {
  return static_cast<bool>(dwellType_Accessor);
}

uci::type::COMINT_DwellTypeEnum& COMINT_ReceiveDwellType::enableDwellType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_DwellTypeEnum : type};
  if ((!dwellType_Accessor) || (dwellType_Accessor->getAccessorType() != requestedType)) {
    dwellType_Accessor = COMINT_DwellTypeEnum::create(requestedType);
    if (!dwellType_Accessor) {
      throw uci::base::UCIException("Error in enableDwellType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dwellType_Accessor;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearDwellType() noexcept {
  dwellType_Accessor.reset();
  return *this;
}

uci::type::NED_ConeType& COMINT_ReceiveDwellType::getDwellFOV_() const {
  if (dwellFOV_Accessor) {
    return *dwellFOV_Accessor;
  }
  throw uci::base::UCIException("Error in getDwellFOV(): An attempt was made to get an optional field that was not enabled, call hasDwellFOV() to determine if it is safe to call getDwellFOV()");
}

const uci::type::NED_ConeType& COMINT_ReceiveDwellType::getDwellFOV() const {
  return getDwellFOV_();
}

uci::type::NED_ConeType& COMINT_ReceiveDwellType::getDwellFOV() {
  return getDwellFOV_();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDwellFOV(const uci::type::NED_ConeType& accessor) {
  enableDwellFOV();
  if (&accessor != dwellFOV_Accessor.get()) {
    dwellFOV_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_ReceiveDwellType::hasDwellFOV() const noexcept {
  return static_cast<bool>(dwellFOV_Accessor);
}

uci::type::NED_ConeType& COMINT_ReceiveDwellType::enableDwellFOV(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nED_ConeType : type};
  if ((!dwellFOV_Accessor) || (dwellFOV_Accessor->getAccessorType() != requestedType)) {
    dwellFOV_Accessor = NED_ConeType::create(requestedType);
    if (!dwellFOV_Accessor) {
      throw uci::base::UCIException("Error in enableDwellFOV(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dwellFOV_Accessor;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearDwellFOV() noexcept {
  dwellFOV_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue COMINT_ReceiveDwellType::getStartTime() const {
  if (startTime_Accessor) {
    return *startTime_Accessor;
  }
  throw uci::base::UCIException("Error in getStartTime(): An attempt was made to get an optional field that was not enabled, call hasStartTime() to determine if it is safe to call getStartTime()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setStartTime(uci::type::DateTimeTypeValue value) {
  startTime_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasStartTime() const noexcept {
  return startTime_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearStartTime() noexcept {
  startTime_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue COMINT_ReceiveDwellType::getCumulativeDwellTime() const {
  if (cumulativeDwellTime_Accessor) {
    return *cumulativeDwellTime_Accessor;
  }
  throw uci::base::UCIException("Error in getCumulativeDwellTime(): An attempt was made to get an optional field that was not enabled, call hasCumulativeDwellTime() to determine if it is safe to call getCumulativeDwellTime()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setCumulativeDwellTime(uci::type::DurationTypeValue value) {
  cumulativeDwellTime_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasCumulativeDwellTime() const noexcept {
  return cumulativeDwellTime_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearCumulativeDwellTime() noexcept {
  cumulativeDwellTime_Accessor.reset();
  return *this;
}

const uci::type::COMINT_ReceiveDwellType::ComponentID& COMINT_ReceiveDwellType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::COMINT_ReceiveDwellType::ComponentID& COMINT_ReceiveDwellType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setComponentID(const uci::type::COMINT_ReceiveDwellType::ComponentID& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::COMINT_ReceiveDwellType::Frequency& COMINT_ReceiveDwellType::getFrequency() const {
  return *frequency_Accessor;
}

uci::type::COMINT_ReceiveDwellType::Frequency& COMINT_ReceiveDwellType::getFrequency() {
  return *frequency_Accessor;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setFrequency(const uci::type::COMINT_ReceiveDwellType::Frequency& accessor) {
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue COMINT_ReceiveDwellType::getDwellRevisitInterval() const {
  if (dwellRevisitInterval_Accessor) {
    return *dwellRevisitInterval_Accessor;
  }
  throw uci::base::UCIException("Error in getDwellRevisitInterval(): An attempt was made to get an optional field that was not enabled, call hasDwellRevisitInterval() to determine if it is safe to call getDwellRevisitInterval()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDwellRevisitInterval(uci::type::DurationTypeValue value) {
  dwellRevisitInterval_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasDwellRevisitInterval() const noexcept {
  return dwellRevisitInterval_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearDwellRevisitInterval() noexcept {
  dwellRevisitInterval_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue COMINT_ReceiveDwellType::getPulseWidthLow() const {
  if (pulseWidthLow_Accessor) {
    return *pulseWidthLow_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthLow(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthLow() to determine if it is safe to call getPulseWidthLow()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setPulseWidthLow(uci::type::DurationTypeValue value) {
  pulseWidthLow_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasPulseWidthLow() const noexcept {
  return pulseWidthLow_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearPulseWidthLow() noexcept {
  pulseWidthLow_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue COMINT_ReceiveDwellType::getPulseWidthHigh() const {
  if (pulseWidthHigh_Accessor) {
    return *pulseWidthHigh_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthHigh(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthHigh() to determine if it is safe to call getPulseWidthHigh()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setPulseWidthHigh(uci::type::DurationTypeValue value) {
  pulseWidthHigh_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasPulseWidthHigh() const noexcept {
  return pulseWidthHigh_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearPulseWidthHigh() noexcept {
  pulseWidthHigh_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue COMINT_ReceiveDwellType::getPRI_High() const {
  if (pRI_High_Accessor) {
    return *pRI_High_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_High(): An attempt was made to get an optional field that was not enabled, call hasPRI_High() to determine if it is safe to call getPRI_High()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setPRI_High(uci::type::DurationTypeValue value) {
  pRI_High_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasPRI_High() const noexcept {
  return pRI_High_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearPRI_High() noexcept {
  pRI_High_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue COMINT_ReceiveDwellType::getNativeSensitivity() const {
  if (nativeSensitivity_Accessor) {
    return *nativeSensitivity_Accessor;
  }
  throw uci::base::UCIException("Error in getNativeSensitivity(): An attempt was made to get an optional field that was not enabled, call hasNativeSensitivity() to determine if it is safe to call getNativeSensitivity()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setNativeSensitivity(uci::type::DecibelTypeValue value) {
  nativeSensitivity_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasNativeSensitivity() const noexcept {
  return nativeSensitivity_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearNativeSensitivity() noexcept {
  nativeSensitivity_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue COMINT_ReceiveDwellType::getDesensitization() const {
  if (desensitization_Accessor) {
    return *desensitization_Accessor;
  }
  throw uci::base::UCIException("Error in getDesensitization(): An attempt was made to get an optional field that was not enabled, call hasDesensitization() to determine if it is safe to call getDesensitization()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setDesensitization(uci::type::MilliwattPowerRatioTypeValue value) {
  desensitization_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasDesensitization() const noexcept {
  return desensitization_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearDesensitization() noexcept {
  desensitization_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue COMINT_ReceiveDwellType::getVideoBandwidth() const {
  if (videoBandwidth_Accessor) {
    return *videoBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getVideoBandwidth(): An attempt was made to get an optional field that was not enabled, call hasVideoBandwidth() to determine if it is safe to call getVideoBandwidth()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setVideoBandwidth(uci::type::FrequencyTypeValue value) {
  videoBandwidth_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasVideoBandwidth() const noexcept {
  return videoBandwidth_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearVideoBandwidth() noexcept {
  videoBandwidth_Accessor.reset();
  return *this;
}

uci::type::COMINT_InteractiveType& COMINT_ReceiveDwellType::getCOMINT_Interactive_() const {
  if (cOMINT_Interactive_Accessor) {
    return *cOMINT_Interactive_Accessor;
  }
  throw uci::base::UCIException("Error in getCOMINT_Interactive(): An attempt was made to get an optional field that was not enabled, call hasCOMINT_Interactive() to determine if it is safe to call getCOMINT_Interactive()");
}

const uci::type::COMINT_InteractiveType& COMINT_ReceiveDwellType::getCOMINT_Interactive() const {
  return getCOMINT_Interactive_();
}

uci::type::COMINT_InteractiveType& COMINT_ReceiveDwellType::getCOMINT_Interactive() {
  return getCOMINT_Interactive_();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setCOMINT_Interactive(const uci::type::COMINT_InteractiveType& accessor) {
  enableCOMINT_Interactive();
  if (&accessor != cOMINT_Interactive_Accessor.get()) {
    cOMINT_Interactive_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_ReceiveDwellType::hasCOMINT_Interactive() const noexcept {
  return static_cast<bool>(cOMINT_Interactive_Accessor);
}

uci::type::COMINT_InteractiveType& COMINT_ReceiveDwellType::enableCOMINT_Interactive(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_InteractiveType : type};
  if ((!cOMINT_Interactive_Accessor) || (cOMINT_Interactive_Accessor->getAccessorType() != requestedType)) {
    cOMINT_Interactive_Accessor = COMINT_InteractiveType::create(requestedType);
    if (!cOMINT_Interactive_Accessor) {
      throw uci::base::UCIException("Error in enableCOMINT_Interactive(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cOMINT_Interactive_Accessor;
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearCOMINT_Interactive() noexcept {
  cOMINT_Interactive_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue COMINT_ReceiveDwellType::getStopTime() const {
  if (stopTime_Accessor) {
    return *stopTime_Accessor;
  }
  throw uci::base::UCIException("Error in getStopTime(): An attempt was made to get an optional field that was not enabled, call hasStopTime() to determine if it is safe to call getStopTime()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setStopTime(uci::type::DateTimeTypeValue value) {
  stopTime_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasStopTime() const noexcept {
  return stopTime_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearStopTime() noexcept {
  stopTime_Accessor.reset();
  return *this;
}

xs::Float COMINT_ReceiveDwellType::getSampleRate() const {
  if (sampleRate_Accessor) {
    return *sampleRate_Accessor;
  }
  throw uci::base::UCIException("Error in getSampleRate(): An attempt was made to get an optional field that was not enabled, call hasSampleRate() to determine if it is safe to call getSampleRate()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setSampleRate(xs::Float value) {
  sampleRate_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasSampleRate() const noexcept {
  return sampleRate_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearSampleRate() noexcept {
  sampleRate_Accessor.reset();
  return *this;
}

xs::Int COMINT_ReceiveDwellType::getFFT_PointsPerSample() const {
  if (fFT_PointsPerSample_Accessor) {
    return *fFT_PointsPerSample_Accessor;
  }
  throw uci::base::UCIException("Error in getFFT_PointsPerSample(): An attempt was made to get an optional field that was not enabled, call hasFFT_PointsPerSample() to determine if it is safe to call getFFT_PointsPerSample()");
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::setFFT_PointsPerSample(xs::Int value) {
  fFT_PointsPerSample_Accessor = value;
  return *this;
}

bool COMINT_ReceiveDwellType::hasFFT_PointsPerSample() const noexcept {
  return fFT_PointsPerSample_Accessor.has_value();
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::clearFFT_PointsPerSample() noexcept {
  fFT_PointsPerSample_Accessor.reset();
  return *this;
}

std::unique_ptr<COMINT_ReceiveDwellType> COMINT_ReceiveDwellType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_ReceiveDwellType : type};
  return (requestedType == uci::type::accessorType::cOMINT_ReceiveDwellType) ? boost::make_unique<COMINT_ReceiveDwellType>() : nullptr;
}

/**  */
namespace COMINT_ReceiveDwellType_Names {

constexpr const char* Extern_Type_Name{"COMINT_ReceiveDwellType"};
constexpr const char* DwellID_Name{"DwellID"};
constexpr const char* DwellState_Name{"DwellState"};
constexpr const char* DwellType_Name{"DwellType"};
constexpr const char* DwellFOV_Name{"DwellFOV"};
constexpr const char* StartTime_Name{"StartTime"};
constexpr const char* CumulativeDwellTime_Name{"CumulativeDwellTime"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* DwellRevisitInterval_Name{"DwellRevisitInterval"};
constexpr const char* PulseWidthLow_Name{"PulseWidthLow"};
constexpr const char* PulseWidthHigh_Name{"PulseWidthHigh"};
constexpr const char* PRI_High_Name{"PRI_High"};
constexpr const char* NativeSensitivity_Name{"NativeSensitivity"};
constexpr const char* Desensitization_Name{"Desensitization"};
constexpr const char* VideoBandwidth_Name{"VideoBandwidth"};
constexpr const char* COMINT_Interactive_Name{"COMINT_Interactive"};
constexpr const char* StopTime_Name{"StopTime"};
constexpr const char* SampleRate_Name{"SampleRate"};
constexpr const char* FFT_PointsPerSample_Name{"FFT_PointsPerSample"};

} // namespace COMINT_ReceiveDwellType_Names

void COMINT_ReceiveDwellType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_ReceiveDwellType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_ReceiveDwellType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellID_Name) {
      DwellID_Type::deserialize(valueType.second, accessor.getDwellID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDwellState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDwellType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellFOV_Name) {
      NED_ConeType::deserialize(valueType.second, accessor.enableDwellFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::StartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::CumulativeDwellTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCumulativeDwellTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::ComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_ReceiveDwellType::ComponentID& boundedList = accessor.getComponentID();
        const uci::type::COMINT_ReceiveDwellType::ComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::Frequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_ReceiveDwellType::Frequency& boundedList = accessor.getFrequency();
        const uci::type::COMINT_ReceiveDwellType::Frequency::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellRevisitInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDwellRevisitInterval(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::PulseWidthLow_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthLow(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::PulseWidthHigh_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthHigh(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::PRI_High_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_High(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::NativeSensitivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNativeSensitivity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::Desensitization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDesensitization(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::VideoBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVideoBandwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::COMINT_Interactive_Name) {
      COMINT_InteractiveType::deserialize(valueType.second, accessor.enableCOMINT_Interactive(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::StopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStopTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::SampleRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSampleRate(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::FFT_PointsPerSample_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFFT_PointsPerSample(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
}

std::string COMINT_ReceiveDwellType::serialize(const uci::type::COMINT_ReceiveDwellType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_ReceiveDwellType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_ReceiveDwellType_Names::Extern_Type_Name);
  }
  DwellID_Type::serialize(accessor.getDwellID(), node, COMINT_ReceiveDwellType_Names::DwellID_Name);
  COMINT_DwellStateEnum::serialize(accessor.getDwellState(), node, COMINT_ReceiveDwellType_Names::DwellState_Name, false);
  if (accessor.hasDwellType()) {
    COMINT_DwellTypeEnum::serialize(accessor.getDwellType(), node, COMINT_ReceiveDwellType_Names::DwellType_Name, false);
  }
  if (accessor.hasDwellFOV()) {
    NED_ConeType::serialize(accessor.getDwellFOV(), node, COMINT_ReceiveDwellType_Names::DwellFOV_Name);
  }
  if (accessor.hasStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getStartTime(), node, COMINT_ReceiveDwellType_Names::StartTime_Name);
  }
  if (accessor.hasCumulativeDwellTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getCumulativeDwellTime(), node, COMINT_ReceiveDwellType_Names::CumulativeDwellTime_Name);
  }
  {
    const uci::type::COMINT_ReceiveDwellType::ComponentID& boundedList = accessor.getComponentID();
    for (uci::type::COMINT_ReceiveDwellType::ComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, COMINT_ReceiveDwellType_Names::ComponentID_Name);
    }
  }
  {
    const uci::type::COMINT_ReceiveDwellType::Frequency& boundedList = accessor.getFrequency();
    for (uci::type::COMINT_ReceiveDwellType::Frequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, COMINT_ReceiveDwellType_Names::Frequency_Name);
    }
  }
  if (accessor.hasDwellRevisitInterval()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDwellRevisitInterval(), node, COMINT_ReceiveDwellType_Names::DwellRevisitInterval_Name);
  }
  if (accessor.hasPulseWidthLow()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthLow(), node, COMINT_ReceiveDwellType_Names::PulseWidthLow_Name);
  }
  if (accessor.hasPulseWidthHigh()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthHigh(), node, COMINT_ReceiveDwellType_Names::PulseWidthHigh_Name);
  }
  if (accessor.hasPRI_High()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_High(), node, COMINT_ReceiveDwellType_Names::PRI_High_Name);
  }
  if (accessor.hasNativeSensitivity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getNativeSensitivity(), node, COMINT_ReceiveDwellType_Names::NativeSensitivity_Name);
  }
  if (accessor.hasDesensitization()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDesensitization(), node, COMINT_ReceiveDwellType_Names::Desensitization_Name);
  }
  if (accessor.hasVideoBandwidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVideoBandwidth(), node, COMINT_ReceiveDwellType_Names::VideoBandwidth_Name);
  }
  if (accessor.hasCOMINT_Interactive()) {
    COMINT_InteractiveType::serialize(accessor.getCOMINT_Interactive(), node, COMINT_ReceiveDwellType_Names::COMINT_Interactive_Name);
  }
  if (accessor.hasStopTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getStopTime(), node, COMINT_ReceiveDwellType_Names::StopTime_Name);
  }
  if (accessor.hasSampleRate()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getSampleRate(), node, COMINT_ReceiveDwellType_Names::SampleRate_Name);
  }
  if (accessor.hasFFT_PointsPerSample()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getFFT_PointsPerSample(), node, COMINT_ReceiveDwellType_Names::FFT_PointsPerSample_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_ReceiveDwellType>().release());
}

uci::type::COMINT_ReceiveDwellType& COMINT_ReceiveDwellType::create(const uci::type::COMINT_ReceiveDwellType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_ReceiveDwellType> newAccessor{boost::make_unique<asb_uci::type::COMINT_ReceiveDwellType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_ReceiveDwellType::destroy(uci::type::COMINT_ReceiveDwellType& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_ReceiveDwellType*>(&accessor);
}

} // namespace type

} // namespace uci

