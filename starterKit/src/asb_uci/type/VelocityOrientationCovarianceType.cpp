/** @file VelocityOrientationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/VelocityOrientationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VelocityOrientationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VelocityOrientationCovarianceType::VelocityOrientationCovarianceType() = default;

VelocityOrientationCovarianceType::~VelocityOrientationCovarianceType() = default;

void VelocityOrientationCovarianceType::copy(const uci::type::VelocityOrientationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void VelocityOrientationCovarianceType::copyImpl(const uci::type::VelocityOrientationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VelocityOrientationCovarianceType&>(accessor);
    setVnRr(accessorImpl.vnRr_Accessor);
    setVnRp(accessorImpl.vnRp_Accessor);
    if (accessorImpl.hasVnRy()) {
      setVnRy(accessorImpl.getVnRy());
    } else {
      clearVnRy();
    }
    setVeRr(accessorImpl.veRr_Accessor);
    setVeRp(accessorImpl.veRp_Accessor);
    if (accessorImpl.hasVeRy()) {
      setVeRy(accessorImpl.getVeRy());
    } else {
      clearVeRy();
    }
    setVdRr(accessorImpl.vdRr_Accessor);
    setVdRp(accessorImpl.vdRp_Accessor);
    if (accessorImpl.hasVdRy()) {
      setVdRy(accessorImpl.getVdRy());
    } else {
      clearVdRy();
    }
  }
}

void VelocityOrientationCovarianceType::reset() noexcept {
  vnRr_Accessor = 0.0;
  vnRp_Accessor = 0.0;
  clearVnRy();
  veRr_Accessor = 0.0;
  veRp_Accessor = 0.0;
  clearVeRy();
  vdRr_Accessor = 0.0;
  vdRp_Accessor = 0.0;
  clearVdRy();
}

xs::Double VelocityOrientationCovarianceType::getVnRr() const {
  return vnRr_Accessor;
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVnRr(xs::Double value) {
  vnRr_Accessor = value;
  return *this;
}


xs::Double VelocityOrientationCovarianceType::getVnRp() const {
  return vnRp_Accessor;
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVnRp(xs::Double value) {
  vnRp_Accessor = value;
  return *this;
}


xs::Double VelocityOrientationCovarianceType::getVnRy() const {
  if (vnRy_Accessor) {
    return *vnRy_Accessor;
  }
  throw uci::base::UCIException("Error in getVnRy(): An attempt was made to get an optional field that was not enabled, call hasVnRy() to determine if it is safe to call getVnRy()");
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVnRy(xs::Double value) {
  vnRy_Accessor = value;
  return *this;
}

bool VelocityOrientationCovarianceType::hasVnRy() const noexcept {
  return vnRy_Accessor.has_value();
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::clearVnRy() noexcept {
  vnRy_Accessor.reset();
  return *this;
}

xs::Double VelocityOrientationCovarianceType::getVeRr() const {
  return veRr_Accessor;
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVeRr(xs::Double value) {
  veRr_Accessor = value;
  return *this;
}


xs::Double VelocityOrientationCovarianceType::getVeRp() const {
  return veRp_Accessor;
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVeRp(xs::Double value) {
  veRp_Accessor = value;
  return *this;
}


xs::Double VelocityOrientationCovarianceType::getVeRy() const {
  if (veRy_Accessor) {
    return *veRy_Accessor;
  }
  throw uci::base::UCIException("Error in getVeRy(): An attempt was made to get an optional field that was not enabled, call hasVeRy() to determine if it is safe to call getVeRy()");
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVeRy(xs::Double value) {
  veRy_Accessor = value;
  return *this;
}

bool VelocityOrientationCovarianceType::hasVeRy() const noexcept {
  return veRy_Accessor.has_value();
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::clearVeRy() noexcept {
  veRy_Accessor.reset();
  return *this;
}

xs::Double VelocityOrientationCovarianceType::getVdRr() const {
  return vdRr_Accessor;
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVdRr(xs::Double value) {
  vdRr_Accessor = value;
  return *this;
}


xs::Double VelocityOrientationCovarianceType::getVdRp() const {
  return vdRp_Accessor;
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVdRp(xs::Double value) {
  vdRp_Accessor = value;
  return *this;
}


xs::Double VelocityOrientationCovarianceType::getVdRy() const {
  if (vdRy_Accessor) {
    return *vdRy_Accessor;
  }
  throw uci::base::UCIException("Error in getVdRy(): An attempt was made to get an optional field that was not enabled, call hasVdRy() to determine if it is safe to call getVdRy()");
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::setVdRy(xs::Double value) {
  vdRy_Accessor = value;
  return *this;
}

bool VelocityOrientationCovarianceType::hasVdRy() const noexcept {
  return vdRy_Accessor.has_value();
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::clearVdRy() noexcept {
  vdRy_Accessor.reset();
  return *this;
}

std::unique_ptr<VelocityOrientationCovarianceType> VelocityOrientationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocityOrientationCovarianceType : type};
  return (requestedType == uci::type::accessorType::velocityOrientationCovarianceType) ? boost::make_unique<VelocityOrientationCovarianceType>() : nullptr;
}

/**  */
namespace VelocityOrientationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"VelocityOrientationCovarianceType"};
constexpr const char* VnRr_Name{"VnRr"};
constexpr const char* VnRp_Name{"VnRp"};
constexpr const char* VnRy_Name{"VnRy"};
constexpr const char* VeRr_Name{"VeRr"};
constexpr const char* VeRp_Name{"VeRp"};
constexpr const char* VeRy_Name{"VeRy"};
constexpr const char* VdRr_Name{"VdRr"};
constexpr const char* VdRp_Name{"VdRp"};
constexpr const char* VdRy_Name{"VdRy"};

} // namespace VelocityOrientationCovarianceType_Names

void VelocityOrientationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VelocityOrientationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VelocityOrientationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VnRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VnRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VnRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VeRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VeRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VeRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VdRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVdRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VdRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVdRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityOrientationCovarianceType_Names::VdRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVdRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string VelocityOrientationCovarianceType::serialize(const uci::type::VelocityOrientationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VelocityOrientationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VelocityOrientationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnRr(), node, VelocityOrientationCovarianceType_Names::VnRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnRp(), node, VelocityOrientationCovarianceType_Names::VnRp_Name);
  if (accessor.hasVnRy()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnRy(), node, VelocityOrientationCovarianceType_Names::VnRy_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeRr(), node, VelocityOrientationCovarianceType_Names::VeRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeRp(), node, VelocityOrientationCovarianceType_Names::VeRp_Name);
  if (accessor.hasVeRy()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeRy(), node, VelocityOrientationCovarianceType_Names::VeRy_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVdRr(), node, VelocityOrientationCovarianceType_Names::VdRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVdRp(), node, VelocityOrientationCovarianceType_Names::VdRp_Name);
  if (accessor.hasVdRy()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVdRy(), node, VelocityOrientationCovarianceType_Names::VdRy_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VelocityOrientationCovarianceType>().release());
}

uci::type::VelocityOrientationCovarianceType& VelocityOrientationCovarianceType::create(const uci::type::VelocityOrientationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VelocityOrientationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::VelocityOrientationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VelocityOrientationCovarianceType::destroy(uci::type::VelocityOrientationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::VelocityOrientationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

