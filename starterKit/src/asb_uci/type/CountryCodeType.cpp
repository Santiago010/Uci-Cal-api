/** @file CountryCodeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CountryCodeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/GENC_CountryNameEnum.h"
#include "asb_uci/type/OperatorUniqueNameEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CountryCodeType.h"
#include "uci/type/GENC_CountryNameEnum.h"
#include "uci/type/OperatorUniqueNameEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CountryCodeType::CountryCodeType() = default;

CountryCodeType::~CountryCodeType() = default;

void CountryCodeType::copy(const uci::type::CountryCodeType& accessor) {
  copyImpl(accessor, false);
}

void CountryCodeType::copyImpl(const uci::type::CountryCodeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CountryCodeType&>(accessor);
    if (accessorImpl.countryName_Accessor) {
      setCountryName(*(accessorImpl.countryName_Accessor));
    } else {
      countryName_Accessor.reset();
    }
    if (accessorImpl.operatorUniqueAssetName_Accessor) {
      setOperatorUniqueAssetName(*(accessorImpl.operatorUniqueAssetName_Accessor));
    } else {
      operatorUniqueAssetName_Accessor.reset();
    }
  }
}

void CountryCodeType::reset() noexcept {
  countryName_Accessor.reset();
  operatorUniqueAssetName_Accessor.reset();
}

uci::type::CountryCodeType::CountryCodeTypeChoice CountryCodeType::getCountryCodeTypeChoiceOrdinal() const noexcept {
  if (countryName_Accessor) {
    return COUNTRYCODETYPE_CHOICE_COUNTRYNAME;
  }
  if (operatorUniqueAssetName_Accessor) {
    return COUNTRYCODETYPE_CHOICE_OPERATORUNIQUEASSETNAME;
  }
  return COUNTRYCODETYPE_CHOICE_NONE;
}

uci::type::CountryCodeType& CountryCodeType::setCountryCodeTypeChoiceOrdinal(uci::type::CountryCodeType::CountryCodeTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COUNTRYCODETYPE_CHOICE_COUNTRYNAME:
      chooseCountryName("setCountryCodeTypeChoiceOrdinal", type);
      break;
    case COUNTRYCODETYPE_CHOICE_OPERATORUNIQUEASSETNAME:
      chooseOperatorUniqueAssetName("setCountryCodeTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setCountryCodeTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::GENC_CountryNameEnum& CountryCodeType::getCountryName_() const {
  if (countryName_Accessor) {
    return *countryName_Accessor;
  }
  throw uci::base::UCIException("Error in getCountryName(): Unable to get CountryName, field not selected");
}

const uci::type::GENC_CountryNameEnum& CountryCodeType::getCountryName() const {
  return getCountryName_();
}

uci::type::GENC_CountryNameEnum& CountryCodeType::getCountryName() {
  return getCountryName_();
}

uci::type::CountryCodeType& CountryCodeType::setCountryName(const uci::type::GENC_CountryNameEnum& accessor) {
  chooseCountryName();
  if (&accessor != countryName_Accessor.get()) {
    countryName_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CountryCodeType& CountryCodeType::setCountryName(uci::type::GENC_CountryNameEnum::EnumerationItem value) {
  chooseCountryName().setValue(value);
  return *this;
}

bool CountryCodeType::isCountryName() const noexcept {
  return static_cast<bool>(countryName_Accessor);
}

uci::type::GENC_CountryNameEnum& CountryCodeType::chooseCountryName(const std::string& method, uci::base::accessorType::AccessorType type) {
  operatorUniqueAssetName_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gENC_CountryNameEnum : type};
  if ((!countryName_Accessor) || (countryName_Accessor->getAccessorType() != requestedType)) {
    countryName_Accessor = GENC_CountryNameEnum::create(type);
    if (!countryName_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *countryName_Accessor;
}

uci::type::GENC_CountryNameEnum& CountryCodeType::chooseCountryName(uci::base::accessorType::AccessorType type) {
  return chooseCountryName("chooseCountryName", type);
}

uci::type::OperatorUniqueNameEnum& CountryCodeType::getOperatorUniqueAssetName_() const {
  if (operatorUniqueAssetName_Accessor) {
    return *operatorUniqueAssetName_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorUniqueAssetName(): Unable to get OperatorUniqueAssetName, field not selected");
}

const uci::type::OperatorUniqueNameEnum& CountryCodeType::getOperatorUniqueAssetName() const {
  return getOperatorUniqueAssetName_();
}

uci::type::OperatorUniqueNameEnum& CountryCodeType::getOperatorUniqueAssetName() {
  return getOperatorUniqueAssetName_();
}

uci::type::CountryCodeType& CountryCodeType::setOperatorUniqueAssetName(const uci::type::OperatorUniqueNameEnum& accessor) {
  chooseOperatorUniqueAssetName();
  if (&accessor != operatorUniqueAssetName_Accessor.get()) {
    operatorUniqueAssetName_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CountryCodeType& CountryCodeType::setOperatorUniqueAssetName(uci::type::OperatorUniqueNameEnum::EnumerationItem value) {
  chooseOperatorUniqueAssetName().setValue(value);
  return *this;
}

bool CountryCodeType::isOperatorUniqueAssetName() const noexcept {
  return static_cast<bool>(operatorUniqueAssetName_Accessor);
}

uci::type::OperatorUniqueNameEnum& CountryCodeType::chooseOperatorUniqueAssetName(const std::string& method, uci::base::accessorType::AccessorType type) {
  countryName_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorUniqueNameEnum : type};
  if ((!operatorUniqueAssetName_Accessor) || (operatorUniqueAssetName_Accessor->getAccessorType() != requestedType)) {
    operatorUniqueAssetName_Accessor = OperatorUniqueNameEnum::create(type);
    if (!operatorUniqueAssetName_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorUniqueAssetName_Accessor;
}

uci::type::OperatorUniqueNameEnum& CountryCodeType::chooseOperatorUniqueAssetName(uci::base::accessorType::AccessorType type) {
  return chooseOperatorUniqueAssetName("chooseOperatorUniqueAssetName", type);
}

std::unique_ptr<CountryCodeType> CountryCodeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::countryCodeType : type};
  return (requestedType == uci::type::accessorType::countryCodeType) ? boost::make_unique<CountryCodeType>() : nullptr;
}

/**  */
namespace CountryCodeType_Names {

constexpr const char* Extern_Type_Name{"CountryCodeType"};
constexpr const char* CountryName_Name{"CountryName"};
constexpr const char* OperatorUniqueAssetName_Name{"OperatorUniqueAssetName"};

} // namespace CountryCodeType_Names

void CountryCodeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CountryCodeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CountryCodeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CountryCodeType_Names::CountryName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseCountryName().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CountryCodeType_Names::OperatorUniqueAssetName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseOperatorUniqueAssetName().setValueFromName(*value);
      }
    }
  }
}

std::string CountryCodeType::serialize(const uci::type::CountryCodeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CountryCodeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CountryCodeType_Names::Extern_Type_Name);
  }
  if (accessor.isCountryName()) {
    GENC_CountryNameEnum::serialize(accessor.getCountryName(), node, CountryCodeType_Names::CountryName_Name, false);
  } else if (accessor.isOperatorUniqueAssetName()) {
    OperatorUniqueNameEnum::serialize(accessor.getOperatorUniqueAssetName(), node, CountryCodeType_Names::OperatorUniqueAssetName_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CountryCodeType& CountryCodeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CountryCodeType>().release());
}

uci::type::CountryCodeType& CountryCodeType::create(const uci::type::CountryCodeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CountryCodeType> newAccessor{boost::make_unique<asb_uci::type::CountryCodeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CountryCodeType::destroy(uci::type::CountryCodeType& accessor) {
  delete dynamic_cast<asb_uci::type::CountryCodeType*>(&accessor);
}

} // namespace type

} // namespace uci

