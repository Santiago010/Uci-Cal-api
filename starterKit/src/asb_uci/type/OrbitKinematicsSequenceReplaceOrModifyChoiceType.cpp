/** @file OrbitKinematicsSequenceReplaceOrModifyChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitKinematicsSequenceReplaceOrModifyChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitKinematicsSequenceModificationDetailsType.h"
#include "asb_uci/type/OrbitKinematicsSequenceType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitKinematicsSequenceModificationDetailsType.h"
#include "uci/type/OrbitKinematicsSequenceReplaceOrModifyChoiceType.h"
#include "uci/type/OrbitKinematicsSequenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitKinematicsSequenceReplaceOrModifyChoiceType::OrbitKinematicsSequenceReplaceOrModifyChoiceType() = default;

OrbitKinematicsSequenceReplaceOrModifyChoiceType::~OrbitKinematicsSequenceReplaceOrModifyChoiceType() = default;

void OrbitKinematicsSequenceReplaceOrModifyChoiceType::copy(const uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitKinematicsSequenceReplaceOrModifyChoiceType::copyImpl(const uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitKinematicsSequenceReplaceOrModifyChoiceType&>(accessor);
    if (accessorImpl.replaceOrbitKinematicsSequence_Accessor) {
      setReplaceOrbitKinematicsSequence(*(accessorImpl.replaceOrbitKinematicsSequence_Accessor));
    } else {
      replaceOrbitKinematicsSequence_Accessor.reset();
    }
    if (accessorImpl.modifyOrbitKinematicsSequence_Accessor) {
      setModifyOrbitKinematicsSequence(*(accessorImpl.modifyOrbitKinematicsSequence_Accessor));
    } else {
      modifyOrbitKinematicsSequence_Accessor.reset();
    }
  }
}

void OrbitKinematicsSequenceReplaceOrModifyChoiceType::reset() noexcept {
  replaceOrbitKinematicsSequence_Accessor.reset();
  modifyOrbitKinematicsSequence_Accessor.reset();
}

uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType::OrbitKinematicsSequenceReplaceOrModifyChoiceTypeChoice OrbitKinematicsSequenceReplaceOrModifyChoiceType::getOrbitKinematicsSequenceReplaceOrModifyChoiceTypeChoiceOrdinal() const noexcept {
  if (replaceOrbitKinematicsSequence_Accessor) {
    return ORBITKINEMATICSSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_REPLACEORBITKINEMATICSSEQUENCE;
  }
  if (modifyOrbitKinematicsSequence_Accessor) {
    return ORBITKINEMATICSSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_MODIFYORBITKINEMATICSSEQUENCE;
  }
  return ORBITKINEMATICSSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_NONE;
}

uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::setOrbitKinematicsSequenceReplaceOrModifyChoiceTypeChoiceOrdinal(uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType::OrbitKinematicsSequenceReplaceOrModifyChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITKINEMATICSSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_REPLACEORBITKINEMATICSSEQUENCE:
      chooseReplaceOrbitKinematicsSequence("setOrbitKinematicsSequenceReplaceOrModifyChoiceTypeChoiceOrdinal", type);
      break;
    case ORBITKINEMATICSSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_MODIFYORBITKINEMATICSSEQUENCE:
      chooseModifyOrbitKinematicsSequence("setOrbitKinematicsSequenceReplaceOrModifyChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitKinematicsSequenceReplaceOrModifyChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::getReplaceOrbitKinematicsSequence_() const {
  if (replaceOrbitKinematicsSequence_Accessor) {
    return *replaceOrbitKinematicsSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getReplaceOrbitKinematicsSequence(): Unable to get ReplaceOrbitKinematicsSequence, field not selected");
}

const uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::getReplaceOrbitKinematicsSequence() const {
  return getReplaceOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::getReplaceOrbitKinematicsSequence() {
  return getReplaceOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::setReplaceOrbitKinematicsSequence(const uci::type::OrbitKinematicsSequenceType& accessor) {
  chooseReplaceOrbitKinematicsSequence("setReplaceOrbitKinematicsSequence", accessor.getAccessorType());
  if (&accessor != replaceOrbitKinematicsSequence_Accessor.get()) {
    replaceOrbitKinematicsSequence_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitKinematicsSequenceReplaceOrModifyChoiceType::isReplaceOrbitKinematicsSequence() const noexcept {
  return static_cast<bool>(replaceOrbitKinematicsSequence_Accessor);
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::chooseReplaceOrbitKinematicsSequence(const std::string& method, uci::base::accessorType::AccessorType type) {
  modifyOrbitKinematicsSequence_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceType : type};
  if ((!replaceOrbitKinematicsSequence_Accessor) || (replaceOrbitKinematicsSequence_Accessor->getAccessorType() != requestedType)) {
    replaceOrbitKinematicsSequence_Accessor = OrbitKinematicsSequenceType::create(type);
    if (!replaceOrbitKinematicsSequence_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *replaceOrbitKinematicsSequence_Accessor;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::chooseReplaceOrbitKinematicsSequence(uci::base::accessorType::AccessorType type) {
  return chooseReplaceOrbitKinematicsSequence("chooseReplaceOrbitKinematicsSequence", type);
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::getModifyOrbitKinematicsSequence_() const {
  if (modifyOrbitKinematicsSequence_Accessor) {
    return *modifyOrbitKinematicsSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getModifyOrbitKinematicsSequence(): Unable to get ModifyOrbitKinematicsSequence, field not selected");
}

const uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::getModifyOrbitKinematicsSequence() const {
  return getModifyOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::getModifyOrbitKinematicsSequence() {
  return getModifyOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::setModifyOrbitKinematicsSequence(const uci::type::OrbitKinematicsSequenceModificationDetailsType& accessor) {
  chooseModifyOrbitKinematicsSequence();
  if (&accessor != modifyOrbitKinematicsSequence_Accessor.get()) {
    modifyOrbitKinematicsSequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSequenceReplaceOrModifyChoiceType::isModifyOrbitKinematicsSequence() const noexcept {
  return static_cast<bool>(modifyOrbitKinematicsSequence_Accessor);
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::chooseModifyOrbitKinematicsSequence(const std::string& method, uci::base::accessorType::AccessorType type) {
  replaceOrbitKinematicsSequence_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceModificationDetailsType : type};
  if ((!modifyOrbitKinematicsSequence_Accessor) || (modifyOrbitKinematicsSequence_Accessor->getAccessorType() != requestedType)) {
    modifyOrbitKinematicsSequence_Accessor = OrbitKinematicsSequenceModificationDetailsType::create(type);
    if (!modifyOrbitKinematicsSequence_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modifyOrbitKinematicsSequence_Accessor;
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::chooseModifyOrbitKinematicsSequence(uci::base::accessorType::AccessorType type) {
  return chooseModifyOrbitKinematicsSequence("chooseModifyOrbitKinematicsSequence", type);
}

std::unique_ptr<OrbitKinematicsSequenceReplaceOrModifyChoiceType> OrbitKinematicsSequenceReplaceOrModifyChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceReplaceOrModifyChoiceType : type};
  return (requestedType == uci::type::accessorType::orbitKinematicsSequenceReplaceOrModifyChoiceType) ? boost::make_unique<OrbitKinematicsSequenceReplaceOrModifyChoiceType>() : nullptr;
}

/**  */
namespace OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names {

constexpr const char* Extern_Type_Name{"OrbitKinematicsSequenceReplaceOrModifyChoiceType"};
constexpr const char* ReplaceOrbitKinematicsSequence_Name{"ReplaceOrbitKinematicsSequence"};
constexpr const char* ModifyOrbitKinematicsSequence_Name{"ModifyOrbitKinematicsSequence"};

} // namespace OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names

void OrbitKinematicsSequenceReplaceOrModifyChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names::ReplaceOrbitKinematicsSequence_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseReplaceOrbitKinematicsSequence(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names::ModifyOrbitKinematicsSequence_Name) {
      OrbitKinematicsSequenceModificationDetailsType::deserialize(valueType.second, accessor.chooseModifyOrbitKinematicsSequence(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitKinematicsSequenceReplaceOrModifyChoiceType::serialize(const uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isReplaceOrbitKinematicsSequence()) {
    OrbitKinematicsSequenceType::serialize(accessor.getReplaceOrbitKinematicsSequence(), node, OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names::ReplaceOrbitKinematicsSequence_Name);
  } else if (accessor.isModifyOrbitKinematicsSequence()) {
    OrbitKinematicsSequenceModificationDetailsType::serialize(accessor.getModifyOrbitKinematicsSequence(), node, OrbitKinematicsSequenceReplaceOrModifyChoiceType_Names::ModifyOrbitKinematicsSequence_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType>().release());
}

uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& OrbitKinematicsSequenceReplaceOrModifyChoiceType::create(const uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType> newAccessor{boost::make_unique<asb_uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitKinematicsSequenceReplaceOrModifyChoiceType::destroy(uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

