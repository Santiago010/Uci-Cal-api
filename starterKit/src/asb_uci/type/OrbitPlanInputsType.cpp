/** @file OrbitPlanInputsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitPlanInputsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitPlanPartsType.h"
#include "../../../include/asb_uci/type/OrbitPlanningCandidateType.h"
#include "../../../include/asb_uci/type/PlanInputsCoreType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanInputsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanningCandidateType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitPlanInputsType::OrbitPlanInputsType()
  : planningCandidate_Accessor{boost::make_unique<PlanningCandidate>(0, SIZE_MAX)} {
}

OrbitPlanInputsType::~OrbitPlanInputsType() = default;

void OrbitPlanInputsType::copy(const uci::type::OrbitPlanInputsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitPlanInputsType::copyImpl(const uci::type::OrbitPlanInputsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    PlanInputsCoreType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OrbitPlanInputsType&>(accessor);
    setPlanningCandidate(*(accessorImpl.planningCandidate_Accessor));
    if (accessorImpl.outputParts_Accessor) {
      setOutputParts(*(accessorImpl.outputParts_Accessor));
    } else {
      outputParts_Accessor.reset();
    }
  }
}

void OrbitPlanInputsType::reset() noexcept {
  PlanInputsCoreType::reset();
  planningCandidate_Accessor->reset();
  outputParts_Accessor.reset();
}

const uci::type::OrbitPlanInputsType::PlanningCandidate& OrbitPlanInputsType::getPlanningCandidate() const {
  return *planningCandidate_Accessor;
}

uci::type::OrbitPlanInputsType::PlanningCandidate& OrbitPlanInputsType::getPlanningCandidate() {
  return *planningCandidate_Accessor;
}

uci::type::OrbitPlanInputsType& OrbitPlanInputsType::setPlanningCandidate(const uci::type::OrbitPlanInputsType::PlanningCandidate& accessor) {
  if (&accessor != planningCandidate_Accessor.get()) {
    planningCandidate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitPlanPartsType& OrbitPlanInputsType::getOutputParts_() const {
  if (outputParts_Accessor) {
    return *outputParts_Accessor;
  }
  throw uci::base::UCIException("Error in getOutputParts(): An attempt was made to get an optional field that was not enabled, call hasOutputParts() to determine if it is safe to call getOutputParts()");
}

const uci::type::OrbitPlanPartsType& OrbitPlanInputsType::getOutputParts() const {
  return getOutputParts_();
}

uci::type::OrbitPlanPartsType& OrbitPlanInputsType::getOutputParts() {
  return getOutputParts_();
}

uci::type::OrbitPlanInputsType& OrbitPlanInputsType::setOutputParts(const uci::type::OrbitPlanPartsType& accessor) {
  enableOutputParts();
  if (&accessor != outputParts_Accessor.get()) {
    outputParts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitPlanInputsType::hasOutputParts() const noexcept {
  return static_cast<bool>(outputParts_Accessor);
}

uci::type::OrbitPlanPartsType& OrbitPlanInputsType::enableOutputParts(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanPartsType : type};
  if ((!outputParts_Accessor) || (outputParts_Accessor->getAccessorType() != requestedType)) {
    outputParts_Accessor = OrbitPlanPartsType::create(requestedType);
    if (!outputParts_Accessor) {
      throw uci::base::UCIException("Error in enableOutputParts(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *outputParts_Accessor;
}

uci::type::OrbitPlanInputsType& OrbitPlanInputsType::clearOutputParts() noexcept {
  outputParts_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitPlanInputsType> OrbitPlanInputsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanInputsType : type};
  return (requestedType == uci::type::accessorType::orbitPlanInputsType) ? boost::make_unique<OrbitPlanInputsType>() : nullptr;
}

/**  */
namespace OrbitPlanInputsType_Names {

constexpr const char* Extern_Type_Name{"OrbitPlanInputsType"};
constexpr const char* PlanningCandidate_Name{"PlanningCandidate"};
constexpr const char* OutputParts_Name{"OutputParts"};

} // namespace OrbitPlanInputsType_Names

void OrbitPlanInputsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitPlanInputsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitPlanInputsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitPlanInputsType_Names::PlanningCandidate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitPlanInputsType::PlanningCandidate& boundedList = accessor.getPlanningCandidate();
        const uci::type::OrbitPlanInputsType::PlanningCandidate::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitPlanningCandidateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitPlanInputsType_Names::OutputParts_Name) {
      OrbitPlanPartsType::deserialize(valueType.second, accessor.enableOutputParts(), nodeName, nsPrefix);
    }
  }
  PlanInputsCoreType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OrbitPlanInputsType::serialize(const uci::type::OrbitPlanInputsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitPlanInputsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitPlanInputsType_Names::Extern_Type_Name);
  }
  PlanInputsCoreType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::OrbitPlanInputsType::PlanningCandidate& boundedList = accessor.getPlanningCandidate();
    for (uci::type::OrbitPlanInputsType::PlanningCandidate::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitPlanningCandidateType::serialize(boundedList.at(i), node, OrbitPlanInputsType_Names::PlanningCandidate_Name);
    }
  }
  if (accessor.hasOutputParts()) {
    OrbitPlanPartsType::serialize(accessor.getOutputParts(), node, OrbitPlanInputsType_Names::OutputParts_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitPlanInputsType& OrbitPlanInputsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitPlanInputsType>().release());
}

uci::type::OrbitPlanInputsType& OrbitPlanInputsType::create(const uci::type::OrbitPlanInputsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitPlanInputsType> newAccessor{boost::make_unique<asb_uci::type::OrbitPlanInputsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitPlanInputsType::destroy(uci::type::OrbitPlanInputsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitPlanInputsType*>(&accessor);
}

} // namespace type

} // namespace uci

