/** @file SensorReferencedCoverageAreaType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SensorReferencedCoverageAreaType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AnglePairType.h"
#include "../../../include/asb_uci/type/RangeElevationExtentChoiceType.h"
#include "../../../include/asb_uci/type/SensorReferencedCoverageAreaReferenceEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RangeElevationExtentChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorReferencedCoverageAreaReferenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorReferencedCoverageAreaType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SensorReferencedCoverageAreaType::SensorReferencedCoverageAreaType()
  : reference_Accessor{boost::make_unique<SensorReferencedCoverageAreaReferenceEnum>()},
    azimuthExtent_Accessor{boost::make_unique<AnglePairType>()},
    rangeElevationExtent_Accessor{boost::make_unique<RangeElevationExtentChoiceType>()} {
}

SensorReferencedCoverageAreaType::~SensorReferencedCoverageAreaType() = default;

void SensorReferencedCoverageAreaType::copy(const uci::type::SensorReferencedCoverageAreaType& accessor) {
  copyImpl(accessor, false);
}

void SensorReferencedCoverageAreaType::copyImpl(const uci::type::SensorReferencedCoverageAreaType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SensorReferencedCoverageAreaType&>(accessor);
    setReference(*(accessorImpl.reference_Accessor));
    setAzimuthExtent(*(accessorImpl.azimuthExtent_Accessor));
    setRangeElevationExtent(*(accessorImpl.rangeElevationExtent_Accessor));
  }
}

void SensorReferencedCoverageAreaType::reset() noexcept {
  reference_Accessor->reset();
  if (azimuthExtent_Accessor->getAccessorType() != uci::type::accessorType::anglePairType) {
    azimuthExtent_Accessor = boost::make_unique<AnglePairType>();
  } else {
    azimuthExtent_Accessor->reset();
  }
  rangeElevationExtent_Accessor->reset();
}

const uci::type::SensorReferencedCoverageAreaReferenceEnum& SensorReferencedCoverageAreaType::getReference() const {
  return *reference_Accessor;
}

uci::type::SensorReferencedCoverageAreaReferenceEnum& SensorReferencedCoverageAreaType::getReference() {
  return *reference_Accessor;
}

uci::type::SensorReferencedCoverageAreaType& SensorReferencedCoverageAreaType::setReference(const uci::type::SensorReferencedCoverageAreaReferenceEnum& accessor) {
  if (&accessor != reference_Accessor.get()) {
    reference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SensorReferencedCoverageAreaType& SensorReferencedCoverageAreaType::setReference(uci::type::SensorReferencedCoverageAreaReferenceEnum::EnumerationItem value) {
  reference_Accessor->setValue(value);
  return *this;
}


const uci::type::AnglePairType& SensorReferencedCoverageAreaType::getAzimuthExtent() const {
  return *azimuthExtent_Accessor;
}

uci::type::AnglePairType& SensorReferencedCoverageAreaType::getAzimuthExtent() {
  return *azimuthExtent_Accessor;
}

uci::type::SensorReferencedCoverageAreaType& SensorReferencedCoverageAreaType::setAzimuthExtent(const uci::type::AnglePairType& accessor) {
  enableAzimuthExtent(accessor.getAccessorType());
  if (&accessor != azimuthExtent_Accessor.get()) {
    azimuthExtent_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::AnglePairType& SensorReferencedCoverageAreaType::enableAzimuthExtent(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!azimuthExtent_Accessor) || (azimuthExtent_Accessor->getAccessorType() != requestedType)) {
    azimuthExtent_Accessor = AnglePairType::create(requestedType);
    if (!azimuthExtent_Accessor) {
      throw uci::base::UCIException("Error in enableAzimuthExtent(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *azimuthExtent_Accessor;
}

const uci::type::RangeElevationExtentChoiceType& SensorReferencedCoverageAreaType::getRangeElevationExtent() const {
  return *rangeElevationExtent_Accessor;
}

uci::type::RangeElevationExtentChoiceType& SensorReferencedCoverageAreaType::getRangeElevationExtent() {
  return *rangeElevationExtent_Accessor;
}

uci::type::SensorReferencedCoverageAreaType& SensorReferencedCoverageAreaType::setRangeElevationExtent(const uci::type::RangeElevationExtentChoiceType& accessor) {
  if (&accessor != rangeElevationExtent_Accessor.get()) {
    rangeElevationExtent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SensorReferencedCoverageAreaType> SensorReferencedCoverageAreaType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorReferencedCoverageAreaType : type};
  return (requestedType == uci::type::accessorType::sensorReferencedCoverageAreaType) ? boost::make_unique<SensorReferencedCoverageAreaType>() : nullptr;
}

/**  */
namespace SensorReferencedCoverageAreaType_Names {

constexpr const char* Extern_Type_Name{"SensorReferencedCoverageAreaType"};
constexpr const char* Reference_Name{"Reference"};
constexpr const char* AzimuthExtent_Name{"AzimuthExtent"};
constexpr const char* RangeElevationExtent_Name{"RangeElevationExtent"};

} // namespace SensorReferencedCoverageAreaType_Names

void SensorReferencedCoverageAreaType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorReferencedCoverageAreaType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SensorReferencedCoverageAreaType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SensorReferencedCoverageAreaType_Names::Reference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getReference().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorReferencedCoverageAreaType_Names::AzimuthExtent_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableAzimuthExtent(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorReferencedCoverageAreaType_Names::RangeElevationExtent_Name) {
      RangeElevationExtentChoiceType::deserialize(valueType.second, accessor.getRangeElevationExtent(), nodeName, nsPrefix);
    }
  }
}

std::string SensorReferencedCoverageAreaType::serialize(const uci::type::SensorReferencedCoverageAreaType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SensorReferencedCoverageAreaType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SensorReferencedCoverageAreaType_Names::Extern_Type_Name);
  }
  SensorReferencedCoverageAreaReferenceEnum::serialize(accessor.getReference(), node, SensorReferencedCoverageAreaType_Names::Reference_Name, false);
  AnglePairType::serialize(accessor.getAzimuthExtent(), node, SensorReferencedCoverageAreaType_Names::AzimuthExtent_Name);
  RangeElevationExtentChoiceType::serialize(accessor.getRangeElevationExtent(), node, SensorReferencedCoverageAreaType_Names::RangeElevationExtent_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SensorReferencedCoverageAreaType& SensorReferencedCoverageAreaType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SensorReferencedCoverageAreaType>().release());
}

uci::type::SensorReferencedCoverageAreaType& SensorReferencedCoverageAreaType::create(const uci::type::SensorReferencedCoverageAreaType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SensorReferencedCoverageAreaType> newAccessor{boost::make_unique<asb_uci::type::SensorReferencedCoverageAreaType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SensorReferencedCoverageAreaType::destroy(uci::type::SensorReferencedCoverageAreaType& accessor) {
  delete dynamic_cast<asb_uci::type::SensorReferencedCoverageAreaType*>(&accessor);
}

} // namespace type

} // namespace uci

