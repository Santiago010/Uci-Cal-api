/** @file WeatherEffectsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/WeatherEffectsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/WeatherRoadStateEnum.h"
#include "asb_uci/type/WeatherSeaStateAmplificationEnum.h"
#include "asb_uci/type/WeatherSeaStateEnum.h"
#include "asb_uci/type/WeatherTerrainStateEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/WeatherEffectsType.h"
#include "uci/type/WeatherRoadStateEnum.h"
#include "uci/type/WeatherSeaStateAmplificationEnum.h"
#include "uci/type/WeatherSeaStateEnum.h"
#include "uci/type/WeatherTerrainStateEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherEffectsType::WeatherEffectsType() = default;

WeatherEffectsType::~WeatherEffectsType() = default;

void WeatherEffectsType::copy(const uci::type::WeatherEffectsType& accessor) {
  copyImpl(accessor, false);
}

void WeatherEffectsType::copyImpl(const uci::type::WeatherEffectsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeatherEffectsType&>(accessor);
    if (accessorImpl.roadState_Accessor) {
      setRoadState(*(accessorImpl.roadState_Accessor));
    } else {
      roadState_Accessor.reset();
    }
    if (accessorImpl.terrainState_Accessor) {
      setTerrainState(*(accessorImpl.terrainState_Accessor));
    } else {
      terrainState_Accessor.reset();
    }
    if (accessorImpl.seaState_Accessor) {
      setSeaState(*(accessorImpl.seaState_Accessor));
    } else {
      seaState_Accessor.reset();
    }
    if (accessorImpl.seaStateAmplification_Accessor) {
      setSeaStateAmplification(*(accessorImpl.seaStateAmplification_Accessor));
    } else {
      seaStateAmplification_Accessor.reset();
    }
    if (accessorImpl.hasSystemIcingState()) {
      setSystemIcingState(accessorImpl.getSystemIcingState());
    } else {
      clearSystemIcingState();
    }
  }
}

void WeatherEffectsType::reset() noexcept {
  roadState_Accessor.reset();
  terrainState_Accessor.reset();
  seaState_Accessor.reset();
  seaStateAmplification_Accessor.reset();
  clearSystemIcingState();
}

uci::type::WeatherRoadStateEnum& WeatherEffectsType::getRoadState_() const {
  if (roadState_Accessor) {
    return *roadState_Accessor;
  }
  throw uci::base::UCIException("Error in getRoadState(): An attempt was made to get an optional field that was not enabled, call hasRoadState() to determine if it is safe to call getRoadState()");
}

const uci::type::WeatherRoadStateEnum& WeatherEffectsType::getRoadState() const {
  return getRoadState_();
}

uci::type::WeatherRoadStateEnum& WeatherEffectsType::getRoadState() {
  return getRoadState_();
}

uci::type::WeatherEffectsType& WeatherEffectsType::setRoadState(const uci::type::WeatherRoadStateEnum& accessor) {
  enableRoadState();
  if (&accessor != roadState_Accessor.get()) {
    roadState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherEffectsType& WeatherEffectsType::setRoadState(const uci::type::WeatherRoadStateEnum::EnumerationItem value) {
  enableRoadState().setValue(value);
  return *this;
}

bool WeatherEffectsType::hasRoadState() const noexcept {
  return static_cast<bool>(roadState_Accessor);
}

uci::type::WeatherRoadStateEnum& WeatherEffectsType::enableRoadState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRoadStateEnum : type};
  if ((!roadState_Accessor) || (roadState_Accessor->getAccessorType() != requestedType)) {
    roadState_Accessor = WeatherRoadStateEnum::create(requestedType);
    if (!roadState_Accessor) {
      throw uci::base::UCIException("Error in enableRoadState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *roadState_Accessor;
}

uci::type::WeatherEffectsType& WeatherEffectsType::clearRoadState() noexcept {
  roadState_Accessor.reset();
  return *this;
}

uci::type::WeatherTerrainStateEnum& WeatherEffectsType::getTerrainState_() const {
  if (terrainState_Accessor) {
    return *terrainState_Accessor;
  }
  throw uci::base::UCIException("Error in getTerrainState(): An attempt was made to get an optional field that was not enabled, call hasTerrainState() to determine if it is safe to call getTerrainState()");
}

const uci::type::WeatherTerrainStateEnum& WeatherEffectsType::getTerrainState() const {
  return getTerrainState_();
}

uci::type::WeatherTerrainStateEnum& WeatherEffectsType::getTerrainState() {
  return getTerrainState_();
}

uci::type::WeatherEffectsType& WeatherEffectsType::setTerrainState(const uci::type::WeatherTerrainStateEnum& accessor) {
  enableTerrainState();
  if (&accessor != terrainState_Accessor.get()) {
    terrainState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherEffectsType& WeatherEffectsType::setTerrainState(const uci::type::WeatherTerrainStateEnum::EnumerationItem value) {
  enableTerrainState().setValue(value);
  return *this;
}

bool WeatherEffectsType::hasTerrainState() const noexcept {
  return static_cast<bool>(terrainState_Accessor);
}

uci::type::WeatherTerrainStateEnum& WeatherEffectsType::enableTerrainState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherTerrainStateEnum : type};
  if ((!terrainState_Accessor) || (terrainState_Accessor->getAccessorType() != requestedType)) {
    terrainState_Accessor = WeatherTerrainStateEnum::create(requestedType);
    if (!terrainState_Accessor) {
      throw uci::base::UCIException("Error in enableTerrainState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *terrainState_Accessor;
}

uci::type::WeatherEffectsType& WeatherEffectsType::clearTerrainState() noexcept {
  terrainState_Accessor.reset();
  return *this;
}

uci::type::WeatherSeaStateEnum& WeatherEffectsType::getSeaState_() const {
  if (seaState_Accessor) {
    return *seaState_Accessor;
  }
  throw uci::base::UCIException("Error in getSeaState(): An attempt was made to get an optional field that was not enabled, call hasSeaState() to determine if it is safe to call getSeaState()");
}

const uci::type::WeatherSeaStateEnum& WeatherEffectsType::getSeaState() const {
  return getSeaState_();
}

uci::type::WeatherSeaStateEnum& WeatherEffectsType::getSeaState() {
  return getSeaState_();
}

uci::type::WeatherEffectsType& WeatherEffectsType::setSeaState(const uci::type::WeatherSeaStateEnum& accessor) {
  enableSeaState();
  if (&accessor != seaState_Accessor.get()) {
    seaState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherEffectsType& WeatherEffectsType::setSeaState(const uci::type::WeatherSeaStateEnum::EnumerationItem value) {
  enableSeaState().setValue(value);
  return *this;
}

bool WeatherEffectsType::hasSeaState() const noexcept {
  return static_cast<bool>(seaState_Accessor);
}

uci::type::WeatherSeaStateEnum& WeatherEffectsType::enableSeaState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherSeaStateEnum : type};
  if ((!seaState_Accessor) || (seaState_Accessor->getAccessorType() != requestedType)) {
    seaState_Accessor = WeatherSeaStateEnum::create(requestedType);
    if (!seaState_Accessor) {
      throw uci::base::UCIException("Error in enableSeaState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *seaState_Accessor;
}

uci::type::WeatherEffectsType& WeatherEffectsType::clearSeaState() noexcept {
  seaState_Accessor.reset();
  return *this;
}

uci::type::WeatherSeaStateAmplificationEnum& WeatherEffectsType::getSeaStateAmplification_() const {
  if (seaStateAmplification_Accessor) {
    return *seaStateAmplification_Accessor;
  }
  throw uci::base::UCIException("Error in getSeaStateAmplification(): An attempt was made to get an optional field that was not enabled, call hasSeaStateAmplification() to determine if it is safe to call getSeaStateAmplification()");
}

const uci::type::WeatherSeaStateAmplificationEnum& WeatherEffectsType::getSeaStateAmplification() const {
  return getSeaStateAmplification_();
}

uci::type::WeatherSeaStateAmplificationEnum& WeatherEffectsType::getSeaStateAmplification() {
  return getSeaStateAmplification_();
}

uci::type::WeatherEffectsType& WeatherEffectsType::setSeaStateAmplification(const uci::type::WeatherSeaStateAmplificationEnum& accessor) {
  enableSeaStateAmplification();
  if (&accessor != seaStateAmplification_Accessor.get()) {
    seaStateAmplification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherEffectsType& WeatherEffectsType::setSeaStateAmplification(const uci::type::WeatherSeaStateAmplificationEnum::EnumerationItem value) {
  enableSeaStateAmplification().setValue(value);
  return *this;
}

bool WeatherEffectsType::hasSeaStateAmplification() const noexcept {
  return static_cast<bool>(seaStateAmplification_Accessor);
}

uci::type::WeatherSeaStateAmplificationEnum& WeatherEffectsType::enableSeaStateAmplification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherSeaStateAmplificationEnum : type};
  if ((!seaStateAmplification_Accessor) || (seaStateAmplification_Accessor->getAccessorType() != requestedType)) {
    seaStateAmplification_Accessor = WeatherSeaStateAmplificationEnum::create(requestedType);
    if (!seaStateAmplification_Accessor) {
      throw uci::base::UCIException("Error in enableSeaStateAmplification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *seaStateAmplification_Accessor;
}

uci::type::WeatherEffectsType& WeatherEffectsType::clearSeaStateAmplification() noexcept {
  seaStateAmplification_Accessor.reset();
  return *this;
}

xs::Boolean WeatherEffectsType::getSystemIcingState() const {
  if (systemIcingState_Accessor) {
    return *systemIcingState_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemIcingState(): An attempt was made to get an optional field that was not enabled, call hasSystemIcingState() to determine if it is safe to call getSystemIcingState()");
}

uci::type::WeatherEffectsType& WeatherEffectsType::setSystemIcingState(xs::Boolean value) {
  systemIcingState_Accessor = value;
  return *this;
}

bool WeatherEffectsType::hasSystemIcingState() const noexcept {
  return systemIcingState_Accessor.has_value();
}

uci::type::WeatherEffectsType& WeatherEffectsType::clearSystemIcingState() noexcept {
  systemIcingState_Accessor.reset();
  return *this;
}

std::unique_ptr<WeatherEffectsType> WeatherEffectsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherEffectsType : type};
  return (requestedType == uci::type::accessorType::weatherEffectsType) ? boost::make_unique<WeatherEffectsType>() : nullptr;
}

/**  */
namespace WeatherEffectsType_Names {

constexpr const char* Extern_Type_Name{"WeatherEffectsType"};
constexpr const char* RoadState_Name{"RoadState"};
constexpr const char* TerrainState_Name{"TerrainState"};
constexpr const char* SeaState_Name{"SeaState"};
constexpr const char* SeaStateAmplification_Name{"SeaStateAmplification"};
constexpr const char* SystemIcingState_Name{"SystemIcingState"};

} // namespace WeatherEffectsType_Names

void WeatherEffectsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherEffectsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherEffectsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherEffectsType_Names::RoadState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRoadState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherEffectsType_Names::TerrainState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTerrainState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherEffectsType_Names::SeaState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSeaState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherEffectsType_Names::SeaStateAmplification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSeaStateAmplification().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherEffectsType_Names::SystemIcingState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSystemIcingState(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string WeatherEffectsType::serialize(const uci::type::WeatherEffectsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherEffectsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherEffectsType_Names::Extern_Type_Name);
  }
  if (accessor.hasRoadState()) {
    WeatherRoadStateEnum::serialize(accessor.getRoadState(), node, WeatherEffectsType_Names::RoadState_Name, false);
  }
  if (accessor.hasTerrainState()) {
    WeatherTerrainStateEnum::serialize(accessor.getTerrainState(), node, WeatherEffectsType_Names::TerrainState_Name, false);
  }
  if (accessor.hasSeaState()) {
    WeatherSeaStateEnum::serialize(accessor.getSeaState(), node, WeatherEffectsType_Names::SeaState_Name, false);
  }
  if (accessor.hasSeaStateAmplification()) {
    WeatherSeaStateAmplificationEnum::serialize(accessor.getSeaStateAmplification(), node, WeatherEffectsType_Names::SeaStateAmplification_Name, false);
  }
  if (accessor.hasSystemIcingState()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSystemIcingState(), node, WeatherEffectsType_Names::SystemIcingState_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherEffectsType& WeatherEffectsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherEffectsType>().release());
}

uci::type::WeatherEffectsType& WeatherEffectsType::create(const uci::type::WeatherEffectsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherEffectsType> newAccessor{boost::make_unique<asb_uci::type::WeatherEffectsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherEffectsType::destroy(uci::type::WeatherEffectsType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherEffectsType*>(&accessor);
}

} // namespace type

} // namespace uci

