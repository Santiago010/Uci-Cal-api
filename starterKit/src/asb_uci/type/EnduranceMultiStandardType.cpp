/** @file EnduranceMultiStandardType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EnduranceMultiStandardType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EnduranceType.h"
#include "asb_uci/type/SatelliteEnduranceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EnduranceMultiStandardType.h"
#include "uci/type/EnduranceType.h"
#include "uci/type/SatelliteEnduranceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EnduranceMultiStandardType::EnduranceMultiStandardType() = default;

EnduranceMultiStandardType::~EnduranceMultiStandardType() = default;

void EnduranceMultiStandardType::copy(const uci::type::EnduranceMultiStandardType& accessor) {
  copyImpl(accessor, false);
}

void EnduranceMultiStandardType::copyImpl(const uci::type::EnduranceMultiStandardType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EnduranceMultiStandardType&>(accessor);
    if (accessorImpl.enduranceFootprint_Accessor) {
      setEnduranceFootprint(*(accessorImpl.enduranceFootprint_Accessor));
    } else {
      enduranceFootprint_Accessor.reset();
    }
    if (accessorImpl.satelliteEndurance_Accessor) {
      setSatelliteEndurance(*(accessorImpl.satelliteEndurance_Accessor));
    } else {
      satelliteEndurance_Accessor.reset();
    }
  }
}

void EnduranceMultiStandardType::reset() noexcept {
  enduranceFootprint_Accessor.reset();
  satelliteEndurance_Accessor.reset();
}

uci::type::EnduranceMultiStandardType::EnduranceMultiStandardTypeChoice EnduranceMultiStandardType::getEnduranceMultiStandardTypeChoiceOrdinal() const noexcept {
  if (enduranceFootprint_Accessor) {
    return ENDURANCEMULTISTANDARDTYPE_CHOICE_ENDURANCEFOOTPRINT;
  }
  if (satelliteEndurance_Accessor) {
    return ENDURANCEMULTISTANDARDTYPE_CHOICE_SATELLITEENDURANCE;
  }
  return ENDURANCEMULTISTANDARDTYPE_CHOICE_NONE;
}

uci::type::EnduranceMultiStandardType& EnduranceMultiStandardType::setEnduranceMultiStandardTypeChoiceOrdinal(uci::type::EnduranceMultiStandardType::EnduranceMultiStandardTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ENDURANCEMULTISTANDARDTYPE_CHOICE_ENDURANCEFOOTPRINT:
      chooseEnduranceFootprint("setEnduranceMultiStandardTypeChoiceOrdinal", type);
      break;
    case ENDURANCEMULTISTANDARDTYPE_CHOICE_SATELLITEENDURANCE:
      chooseSatelliteEndurance("setEnduranceMultiStandardTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEnduranceMultiStandardTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EnduranceType& EnduranceMultiStandardType::getEnduranceFootprint_() const {
  if (enduranceFootprint_Accessor) {
    return *enduranceFootprint_Accessor;
  }
  throw uci::base::UCIException("Error in getEnduranceFootprint(): Unable to get EnduranceFootprint, field not selected");
}

const uci::type::EnduranceType& EnduranceMultiStandardType::getEnduranceFootprint() const {
  return getEnduranceFootprint_();
}

uci::type::EnduranceType& EnduranceMultiStandardType::getEnduranceFootprint() {
  return getEnduranceFootprint_();
}

uci::type::EnduranceMultiStandardType& EnduranceMultiStandardType::setEnduranceFootprint(const uci::type::EnduranceType& accessor) {
  chooseEnduranceFootprint();
  if (&accessor != enduranceFootprint_Accessor.get()) {
    enduranceFootprint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EnduranceMultiStandardType::isEnduranceFootprint() const noexcept {
  return static_cast<bool>(enduranceFootprint_Accessor);
}

uci::type::EnduranceType& EnduranceMultiStandardType::chooseEnduranceFootprint(const std::string& method, uci::base::accessorType::AccessorType type) {
  satelliteEndurance_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceType : type};
  if ((!enduranceFootprint_Accessor) || (enduranceFootprint_Accessor->getAccessorType() != requestedType)) {
    enduranceFootprint_Accessor = EnduranceType::create(type);
    if (!enduranceFootprint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *enduranceFootprint_Accessor;
}

uci::type::EnduranceType& EnduranceMultiStandardType::chooseEnduranceFootprint(uci::base::accessorType::AccessorType type) {
  return chooseEnduranceFootprint("chooseEnduranceFootprint", type);
}

uci::type::SatelliteEnduranceType& EnduranceMultiStandardType::getSatelliteEndurance_() const {
  if (satelliteEndurance_Accessor) {
    return *satelliteEndurance_Accessor;
  }
  throw uci::base::UCIException("Error in getSatelliteEndurance(): Unable to get SatelliteEndurance, field not selected");
}

const uci::type::SatelliteEnduranceType& EnduranceMultiStandardType::getSatelliteEndurance() const {
  return getSatelliteEndurance_();
}

uci::type::SatelliteEnduranceType& EnduranceMultiStandardType::getSatelliteEndurance() {
  return getSatelliteEndurance_();
}

uci::type::EnduranceMultiStandardType& EnduranceMultiStandardType::setSatelliteEndurance(const uci::type::SatelliteEnduranceType& accessor) {
  chooseSatelliteEndurance();
  if (&accessor != satelliteEndurance_Accessor.get()) {
    satelliteEndurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EnduranceMultiStandardType::isSatelliteEndurance() const noexcept {
  return static_cast<bool>(satelliteEndurance_Accessor);
}

uci::type::SatelliteEnduranceType& EnduranceMultiStandardType::chooseSatelliteEndurance(const std::string& method, uci::base::accessorType::AccessorType type) {
  enduranceFootprint_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteEnduranceType : type};
  if ((!satelliteEndurance_Accessor) || (satelliteEndurance_Accessor->getAccessorType() != requestedType)) {
    satelliteEndurance_Accessor = SatelliteEnduranceType::create(type);
    if (!satelliteEndurance_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *satelliteEndurance_Accessor;
}

uci::type::SatelliteEnduranceType& EnduranceMultiStandardType::chooseSatelliteEndurance(uci::base::accessorType::AccessorType type) {
  return chooseSatelliteEndurance("chooseSatelliteEndurance", type);
}

std::unique_ptr<EnduranceMultiStandardType> EnduranceMultiStandardType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceMultiStandardType : type};
  return (requestedType == uci::type::accessorType::enduranceMultiStandardType) ? boost::make_unique<EnduranceMultiStandardType>() : nullptr;
}

/**  */
namespace EnduranceMultiStandardType_Names {

constexpr const char* Extern_Type_Name{"EnduranceMultiStandardType"};
constexpr const char* EnduranceFootprint_Name{"EnduranceFootprint"};
constexpr const char* SatelliteEndurance_Name{"SatelliteEndurance"};

} // namespace EnduranceMultiStandardType_Names

void EnduranceMultiStandardType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EnduranceMultiStandardType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EnduranceMultiStandardType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EnduranceMultiStandardType_Names::EnduranceFootprint_Name) {
      EnduranceType::deserialize(valueType.second, accessor.chooseEnduranceFootprint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EnduranceMultiStandardType_Names::SatelliteEndurance_Name) {
      SatelliteEnduranceType::deserialize(valueType.second, accessor.chooseSatelliteEndurance(), nodeName, nsPrefix);
    }
  }
}

std::string EnduranceMultiStandardType::serialize(const uci::type::EnduranceMultiStandardType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EnduranceMultiStandardType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EnduranceMultiStandardType_Names::Extern_Type_Name);
  }
  if (accessor.isEnduranceFootprint()) {
    EnduranceType::serialize(accessor.getEnduranceFootprint(), node, EnduranceMultiStandardType_Names::EnduranceFootprint_Name);
  } else if (accessor.isSatelliteEndurance()) {
    SatelliteEnduranceType::serialize(accessor.getSatelliteEndurance(), node, EnduranceMultiStandardType_Names::SatelliteEndurance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EnduranceMultiStandardType& EnduranceMultiStandardType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EnduranceMultiStandardType>().release());
}

uci::type::EnduranceMultiStandardType& EnduranceMultiStandardType::create(const uci::type::EnduranceMultiStandardType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EnduranceMultiStandardType> newAccessor{boost::make_unique<asb_uci::type::EnduranceMultiStandardType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EnduranceMultiStandardType::destroy(uci::type::EnduranceMultiStandardType& accessor) {
  delete dynamic_cast<asb_uci::type::EnduranceMultiStandardType*>(&accessor);
}

} // namespace type

} // namespace uci

