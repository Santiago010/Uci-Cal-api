/** @file CommDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommCapabilityEnum.h"
#include "../../../include/asb_uci/type/CommResourceType.h"
#include "../../../include/asb_uci/type/CommSpecificRequestDataEXT.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommCapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommResourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommSpecificRequestDataEXT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommDataType::CommDataType()
  : resource_Accessor{boost::make_unique<CommResourceType>()},
    commType_Accessor{boost::make_unique<CommCapabilityEnum>()} {
}

CommDataType::~CommDataType() = default;

void CommDataType::copy(const uci::type::CommDataType& accessor) {
  copyImpl(accessor, false);
}

void CommDataType::copyImpl(const uci::type::CommDataType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::commDataType)) {
      const auto& accessorImpl = dynamic_cast<const CommDataType&>(accessor);
      setResource(*(accessorImpl.resource_Accessor));
      setCommType(*(accessorImpl.commType_Accessor));
      if (accessorImpl.hasUplinkDataRate()) {
        setUplinkDataRate(accessorImpl.getUplinkDataRate());
      } else {
        clearUplinkDataRate();
      }
      if (accessorImpl.hasUplinkFrequency()) {
        setUplinkFrequency(accessorImpl.getUplinkFrequency());
      } else {
        clearUplinkFrequency();
      }
      if (accessorImpl.hasDownlinkDataRate()) {
        setDownlinkDataRate(accessorImpl.getDownlinkDataRate());
      } else {
        clearDownlinkDataRate();
      }
      if (accessorImpl.hasDownlinkFrequency()) {
        setDownlinkFrequency(accessorImpl.getDownlinkFrequency());
      } else {
        clearDownlinkFrequency();
      }
      if (accessorImpl.commSpecificData_Accessor) {
        setCommSpecificData(*(accessorImpl.commSpecificData_Accessor));
      } else {
        commSpecificData_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CommDataType::reset() noexcept {
  resource_Accessor->reset();
  commType_Accessor->reset();
  clearUplinkDataRate();
  clearUplinkFrequency();
  clearDownlinkDataRate();
  clearDownlinkFrequency();
  commSpecificData_Accessor.reset();
}

const uci::type::CommResourceType& CommDataType::getResource() const {
  return *resource_Accessor;
}

uci::type::CommResourceType& CommDataType::getResource() {
  return *resource_Accessor;
}

uci::type::CommDataType& CommDataType::setResource(const uci::type::CommResourceType& accessor) {
  if (&accessor != resource_Accessor.get()) {
    resource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommCapabilityEnum& CommDataType::getCommType() const {
  return *commType_Accessor;
}

uci::type::CommCapabilityEnum& CommDataType::getCommType() {
  return *commType_Accessor;
}

uci::type::CommDataType& CommDataType::setCommType(const uci::type::CommCapabilityEnum& accessor) {
  if (&accessor != commType_Accessor.get()) {
    commType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommDataType& CommDataType::setCommType(uci::type::CommCapabilityEnum::EnumerationItem value) {
  commType_Accessor->setValue(value);
  return *this;
}


uci::type::DataRateTypeValue CommDataType::getUplinkDataRate() const {
  if (uplinkDataRate_Accessor) {
    return *uplinkDataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getUplinkDataRate(): An attempt was made to get an optional field that was not enabled, call hasUplinkDataRate() to determine if it is safe to call getUplinkDataRate()");
}

uci::type::CommDataType& CommDataType::setUplinkDataRate(uci::type::DataRateTypeValue value) {
  uplinkDataRate_Accessor = value;
  return *this;
}

bool CommDataType::hasUplinkDataRate() const noexcept {
  return uplinkDataRate_Accessor.has_value();
}

uci::type::CommDataType& CommDataType::clearUplinkDataRate() noexcept {
  uplinkDataRate_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CommDataType::getUplinkFrequency() const {
  if (uplinkFrequency_Accessor) {
    return *uplinkFrequency_Accessor;
  }
  throw uci::base::UCIException("Error in getUplinkFrequency(): An attempt was made to get an optional field that was not enabled, call hasUplinkFrequency() to determine if it is safe to call getUplinkFrequency()");
}

uci::type::CommDataType& CommDataType::setUplinkFrequency(uci::type::FrequencyTypeValue value) {
  uplinkFrequency_Accessor = value;
  return *this;
}

bool CommDataType::hasUplinkFrequency() const noexcept {
  return uplinkFrequency_Accessor.has_value();
}

uci::type::CommDataType& CommDataType::clearUplinkFrequency() noexcept {
  uplinkFrequency_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue CommDataType::getDownlinkDataRate() const {
  if (downlinkDataRate_Accessor) {
    return *downlinkDataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getDownlinkDataRate(): An attempt was made to get an optional field that was not enabled, call hasDownlinkDataRate() to determine if it is safe to call getDownlinkDataRate()");
}

uci::type::CommDataType& CommDataType::setDownlinkDataRate(uci::type::DataRateTypeValue value) {
  downlinkDataRate_Accessor = value;
  return *this;
}

bool CommDataType::hasDownlinkDataRate() const noexcept {
  return downlinkDataRate_Accessor.has_value();
}

uci::type::CommDataType& CommDataType::clearDownlinkDataRate() noexcept {
  downlinkDataRate_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CommDataType::getDownlinkFrequency() const {
  if (downlinkFrequency_Accessor) {
    return *downlinkFrequency_Accessor;
  }
  throw uci::base::UCIException("Error in getDownlinkFrequency(): An attempt was made to get an optional field that was not enabled, call hasDownlinkFrequency() to determine if it is safe to call getDownlinkFrequency()");
}

uci::type::CommDataType& CommDataType::setDownlinkFrequency(uci::type::FrequencyTypeValue value) {
  downlinkFrequency_Accessor = value;
  return *this;
}

bool CommDataType::hasDownlinkFrequency() const noexcept {
  return downlinkFrequency_Accessor.has_value();
}

uci::type::CommDataType& CommDataType::clearDownlinkFrequency() noexcept {
  downlinkFrequency_Accessor.reset();
  return *this;
}

uci::type::CommSpecificRequestDataEXT& CommDataType::getCommSpecificData_() const {
  if (commSpecificData_Accessor) {
    return *commSpecificData_Accessor;
  }
  throw uci::base::UCIException("Error in getCommSpecificData(): An attempt was made to get an optional field that was not enabled, call hasCommSpecificData() to determine if it is safe to call getCommSpecificData()");
}

const uci::type::CommSpecificRequestDataEXT& CommDataType::getCommSpecificData() const {
  return getCommSpecificData_();
}

uci::type::CommSpecificRequestDataEXT& CommDataType::getCommSpecificData() {
  return getCommSpecificData_();
}

uci::type::CommDataType& CommDataType::setCommSpecificData(const uci::type::CommSpecificRequestDataEXT& accessor) {
  enableCommSpecificData();
  if (&accessor != commSpecificData_Accessor.get()) {
    commSpecificData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommDataType::hasCommSpecificData() const noexcept {
  return static_cast<bool>(commSpecificData_Accessor);
}

uci::type::CommSpecificRequestDataEXT& CommDataType::enableCommSpecificData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commSpecificRequestDataEXT : type};
  if ((!commSpecificData_Accessor) || (commSpecificData_Accessor->getAccessorType() != requestedType)) {
    commSpecificData_Accessor = CommSpecificRequestDataEXT::create(requestedType);
    if (!commSpecificData_Accessor) {
      throw uci::base::UCIException("Error in enableCommSpecificData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commSpecificData_Accessor;
}

uci::type::CommDataType& CommDataType::clearCommSpecificData() noexcept {
  commSpecificData_Accessor.reset();
  return *this;
}

std::unique_ptr<CommDataType> CommDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commDataType : type};
  return std::unique_ptr<CommDataType>(dynamic_cast<CommDataType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CommDataType_Names {

constexpr const char* Extern_Type_Name{"CommDataType"};
constexpr const char* Resource_Name{"Resource"};
constexpr const char* CommType_Name{"CommType"};
constexpr const char* UplinkDataRate_Name{"UplinkDataRate"};
constexpr const char* UplinkFrequency_Name{"UplinkFrequency"};
constexpr const char* DownlinkDataRate_Name{"DownlinkDataRate"};
constexpr const char* DownlinkFrequency_Name{"DownlinkFrequency"};
constexpr const char* CommSpecificData_Name{"CommSpecificData"};

} // namespace CommDataType_Names

void CommDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommDataType_Names::Resource_Name) {
      CommResourceType::deserialize(valueType.second, accessor.getResource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommDataType_Names::CommType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::UplinkDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUplinkDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::UplinkFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUplinkFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::DownlinkDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDownlinkDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::DownlinkFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDownlinkFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::CommSpecificData_Name) {
      CommSpecificRequestDataEXT::deserialize(valueType.second, accessor.enableCommSpecificData(), nodeName, nsPrefix);
    }
  }
}

std::string CommDataType::serialize(const uci::type::CommDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommDataType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::commDataType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommDataType_Names::Extern_Type_Name);
    }
    CommResourceType::serialize(accessor.getResource(), node, CommDataType_Names::Resource_Name);
    CommCapabilityEnum::serialize(accessor.getCommType(), node, CommDataType_Names::CommType_Name, false);
    if (accessor.hasUplinkDataRate()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getUplinkDataRate(), node, CommDataType_Names::UplinkDataRate_Name);
    }
    if (accessor.hasUplinkFrequency()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getUplinkFrequency(), node, CommDataType_Names::UplinkFrequency_Name);
    }
    if (accessor.hasDownlinkDataRate()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDownlinkDataRate(), node, CommDataType_Names::DownlinkDataRate_Name);
    }
    if (accessor.hasDownlinkFrequency()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDownlinkFrequency(), node, CommDataType_Names::DownlinkFrequency_Name);
    }
    if (accessor.hasCommSpecificData()) {
      CommSpecificRequestDataEXT::serialize(accessor.getCommSpecificData(), node, CommDataType_Names::CommSpecificData_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommDataType& CommDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommDataType>().release());
}

uci::type::CommDataType& CommDataType::create(const uci::type::CommDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommDataType> newAccessor{boost::make_unique<asb_uci::type::CommDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommDataType::destroy(uci::type::CommDataType& accessor) {
  delete dynamic_cast<asb_uci::type::CommDataType*>(&accessor);
}

} // namespace type

} // namespace uci

