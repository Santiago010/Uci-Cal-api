/** @file UnitIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/UnitIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/NameSpecialCharacterRestrictionType.h"
#include "asb_uci/type/OrderOfBattleEnum.h"
#include "asb_uci/type/String20Type.h"
#include "asb_uci/type/UnitID_Type.h"
#include "asb_uci/type/UnitIdentifierType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/NameSpecialCharacterRestrictionType.h"
#include "uci/type/OrderOfBattleEnum.h"
#include "uci/type/String20Type.h"
#include "uci/type/UnitID_Type.h"
#include "uci/type/UnitIdentifierType.h"
#include "uci/type/UnitIdentityType.h"
#include "uci/type/UnitNameType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

UnitIdentityType::UnitIdentityType()
  : unitUUID_Accessor{boost::make_unique<UnitID_Type>()},
    identifier_Accessor{boost::make_unique<UnitIdentifierType>()},
    name_Accessor{boost::make_unique<UnitNameType>()},
    surrogateKey_Accessor{boost::make_unique<String20Type>()},
    oB_Type_Accessor{boost::make_unique<OB_Type>(1, 11)} {
}

UnitIdentityType::~UnitIdentityType() = default;

void UnitIdentityType::copy(const uci::type::UnitIdentityType& accessor) {
  copyImpl(accessor, false);
}

void UnitIdentityType::copyImpl(const uci::type::UnitIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const UnitIdentityType&>(accessor);
    setUnitUUID(*(accessorImpl.unitUUID_Accessor));
    setIdentifier(*(accessorImpl.identifier_Accessor));
    setName(*(accessorImpl.name_Accessor));
    setSurrogateKey(*(accessorImpl.surrogateKey_Accessor));
    setOB_Type(*(accessorImpl.oB_Type_Accessor));
    if (accessorImpl.symbolCode_Accessor) {
      setSymbolCode(*(accessorImpl.symbolCode_Accessor));
    } else {
      symbolCode_Accessor.reset();
    }
  }
}

void UnitIdentityType::reset() noexcept {
  unitUUID_Accessor->reset();
  identifier_Accessor->reset();
  name_Accessor->reset();
  surrogateKey_Accessor->reset();
  oB_Type_Accessor->reset();
  symbolCode_Accessor.reset();
}

const uci::type::UnitID_Type& UnitIdentityType::getUnitUUID() const {
  return *unitUUID_Accessor;
}

uci::type::UnitID_Type& UnitIdentityType::getUnitUUID() {
  return *unitUUID_Accessor;
}

uci::type::UnitIdentityType& UnitIdentityType::setUnitUUID(const uci::type::UnitID_Type& accessor) {
  if (&accessor != unitUUID_Accessor.get()) {
    unitUUID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::UnitIdentifierType& UnitIdentityType::getIdentifier() const noexcept {
  return *identifier_Accessor;
}

uci::type::UnitIdentifierType& UnitIdentityType::getIdentifier() noexcept {
  return *identifier_Accessor;
}

uci::type::UnitIdentityType& UnitIdentityType::setIdentifier(const uci::type::UnitIdentifierType& value) {
  return setIdentifier(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setIdentifier(const std::string& value) {
  return setIdentifier(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setIdentifier(const char* value) {
  identifier_Accessor->setStringValue(value);
  return *this;
}

const uci::type::UnitNameType& UnitIdentityType::getName() const noexcept {
  return *name_Accessor;
}

uci::type::UnitNameType& UnitIdentityType::getName() noexcept {
  return *name_Accessor;
}

uci::type::UnitIdentityType& UnitIdentityType::setName(const uci::type::UnitNameType& value) {
  return setName(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setName(const std::string& value) {
  return setName(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setName(const char* value) {
  name_Accessor->setStringValue(value);
  return *this;
}

const uci::type::String20Type& UnitIdentityType::getSurrogateKey() const noexcept {
  return *surrogateKey_Accessor;
}

uci::type::String20Type& UnitIdentityType::getSurrogateKey() noexcept {
  return *surrogateKey_Accessor;
}

uci::type::UnitIdentityType& UnitIdentityType::setSurrogateKey(const uci::type::String20Type& value) {
  return setSurrogateKey(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setSurrogateKey(const std::string& value) {
  return setSurrogateKey(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setSurrogateKey(const char* value) {
  surrogateKey_Accessor->setStringValue(value);
  return *this;
}

const uci::type::UnitIdentityType::OB_Type& UnitIdentityType::getOB_Type() const {
  return *oB_Type_Accessor;
}

uci::type::UnitIdentityType::OB_Type& UnitIdentityType::getOB_Type() {
  return *oB_Type_Accessor;
}

uci::type::UnitIdentityType& UnitIdentityType::setOB_Type(const uci::type::UnitIdentityType::OB_Type& accessor) {
  if (&accessor != oB_Type_Accessor.get()) {
    oB_Type_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NameSpecialCharacterRestrictionType& UnitIdentityType::getSymbolCode_() const {
  if (symbolCode_Accessor) {
    return *symbolCode_Accessor;
  }
  throw uci::base::UCIException("Error in getSymbolCode(): An attempt was made to get an optional field that was not enabled, call hasSymbolCode() to determine if it is safe to call getSymbolCode()");
}

const uci::type::NameSpecialCharacterRestrictionType& UnitIdentityType::getSymbolCode() const {
  return getSymbolCode_();
}

uci::type::NameSpecialCharacterRestrictionType& UnitIdentityType::getSymbolCode() {
  return getSymbolCode_();
}

uci::type::UnitIdentityType& UnitIdentityType::setSymbolCode(const uci::type::NameSpecialCharacterRestrictionType& value) {
  return setSymbolCode(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setSymbolCode(const std::string& value) {
  return setSymbolCode(value.c_str());
}

uci::type::UnitIdentityType& UnitIdentityType::setSymbolCode(const char* value) {
  enableSymbolCode().setStringValue(value);
  return *this;
}

bool UnitIdentityType::hasSymbolCode() const noexcept {
  return static_cast<bool>(symbolCode_Accessor);
}

uci::type::NameSpecialCharacterRestrictionType& UnitIdentityType::enableSymbolCode(uci::base::accessorType::AccessorType type) {
  if (!symbolCode_Accessor) {
    symbolCode_Accessor = NameSpecialCharacterRestrictionType::create(type);
  }
  return *symbolCode_Accessor;
}

uci::type::UnitIdentityType& UnitIdentityType::clearSymbolCode() noexcept {
  symbolCode_Accessor.reset();
  return *this;
}

std::unique_ptr<UnitIdentityType> UnitIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::unitIdentityType : type};
  return (requestedType == uci::type::accessorType::unitIdentityType) ? boost::make_unique<UnitIdentityType>() : nullptr;
}

/**  */
namespace UnitIdentityType_Names {

constexpr const char* Extern_Type_Name{"UnitIdentityType"};
constexpr const char* UnitUUID_Name{"UnitUUID"};
constexpr const char* Identifier_Name{"Identifier"};
constexpr const char* Name_Name{"Name"};
constexpr const char* SurrogateKey_Name{"SurrogateKey"};
constexpr const char* OB_Type_Name{"OB_Type"};
constexpr const char* SymbolCode_Name{"SymbolCode"};

} // namespace UnitIdentityType_Names

void UnitIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::UnitIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = UnitIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + UnitIdentityType_Names::UnitUUID_Name) {
      UnitID_Type::deserialize(valueType.second, accessor.getUnitUUID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitIdentityType_Names::Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + UnitIdentityType_Names::Name_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setName(*value);
      }
    } else if (valueType.first == nsPrefix + UnitIdentityType_Names::SurrogateKey_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSurrogateKey(*value);
      }
    } else if (valueType.first == nsPrefix + UnitIdentityType_Names::OB_Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::UnitIdentityType::OB_Type& boundedList = accessor.getOB_Type();
        const uci::type::UnitIdentityType::OB_Type::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + UnitIdentityType_Names::SymbolCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSymbolCode(*value);
      }
    }
  }
}

std::string UnitIdentityType::serialize(const uci::type::UnitIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? UnitIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, UnitIdentityType_Names::Extern_Type_Name);
  }
  UnitID_Type::serialize(accessor.getUnitUUID(), node, UnitIdentityType_Names::UnitUUID_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getIdentifier(), node, UnitIdentityType_Names::Identifier_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getName(), node, UnitIdentityType_Names::Name_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getSurrogateKey(), node, UnitIdentityType_Names::SurrogateKey_Name);
  {
    const uci::type::UnitIdentityType::OB_Type& boundedList = accessor.getOB_Type();
    for (uci::type::UnitIdentityType::OB_Type::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrderOfBattleEnum::serialize(boundedList.at(i), node, UnitIdentityType_Names::OB_Type_Name, false);
    }
  }
  if (accessor.hasSymbolCode()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSymbolCode(), node, UnitIdentityType_Names::SymbolCode_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::UnitIdentityType& UnitIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::UnitIdentityType>().release());
}

uci::type::UnitIdentityType& UnitIdentityType::create(const uci::type::UnitIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::UnitIdentityType> newAccessor{boost::make_unique<asb_uci::type::UnitIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void UnitIdentityType::destroy(uci::type::UnitIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::UnitIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

