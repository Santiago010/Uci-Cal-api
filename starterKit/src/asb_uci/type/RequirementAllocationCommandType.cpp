/** @file RequirementAllocationCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementAllocationCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionAllocationType.h"
#include "asb_uci/type/EffectAllocationType.h"
#include "asb_uci/type/ResponseAllocationType.h"
#include "asb_uci/type/TaskAllocationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionAllocationType.h"
#include "uci/type/EffectAllocationType.h"
#include "uci/type/RequirementAllocationCommandType.h"
#include "uci/type/ResponseAllocationType.h"
#include "uci/type/TaskAllocationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementAllocationCommandType::RequirementAllocationCommandType()
  : proposedEffect_Accessor{boost::make_unique<ProposedEffect>(0, SIZE_MAX)},
    proposedAction_Accessor{boost::make_unique<ProposedAction>(0, SIZE_MAX)},
    proposedTask_Accessor{boost::make_unique<ProposedTask>(0, SIZE_MAX)},
    proposedResponse_Accessor{boost::make_unique<ProposedResponse>(0, SIZE_MAX)} {
}

RequirementAllocationCommandType::~RequirementAllocationCommandType() = default;

void RequirementAllocationCommandType::copy(const uci::type::RequirementAllocationCommandType& accessor) {
  copyImpl(accessor, false);
}

void RequirementAllocationCommandType::copyImpl(const uci::type::RequirementAllocationCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementAllocationCommandType&>(accessor);
    setProposedEffect(*(accessorImpl.proposedEffect_Accessor));
    setProposedAction(*(accessorImpl.proposedAction_Accessor));
    setProposedTask(*(accessorImpl.proposedTask_Accessor));
    setProposedResponse(*(accessorImpl.proposedResponse_Accessor));
  }
}

void RequirementAllocationCommandType::reset() noexcept {
  proposedEffect_Accessor->reset();
  proposedAction_Accessor->reset();
  proposedTask_Accessor->reset();
  proposedResponse_Accessor->reset();
}

const uci::type::RequirementAllocationCommandType::ProposedEffect& RequirementAllocationCommandType::getProposedEffect() const {
  return *proposedEffect_Accessor;
}

uci::type::RequirementAllocationCommandType::ProposedEffect& RequirementAllocationCommandType::getProposedEffect() {
  return *proposedEffect_Accessor;
}

uci::type::RequirementAllocationCommandType& RequirementAllocationCommandType::setProposedEffect(const uci::type::RequirementAllocationCommandType::ProposedEffect& accessor) {
  if (&accessor != proposedEffect_Accessor.get()) {
    proposedEffect_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementAllocationCommandType::ProposedAction& RequirementAllocationCommandType::getProposedAction() const {
  return *proposedAction_Accessor;
}

uci::type::RequirementAllocationCommandType::ProposedAction& RequirementAllocationCommandType::getProposedAction() {
  return *proposedAction_Accessor;
}

uci::type::RequirementAllocationCommandType& RequirementAllocationCommandType::setProposedAction(const uci::type::RequirementAllocationCommandType::ProposedAction& accessor) {
  if (&accessor != proposedAction_Accessor.get()) {
    proposedAction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementAllocationCommandType::ProposedTask& RequirementAllocationCommandType::getProposedTask() const {
  return *proposedTask_Accessor;
}

uci::type::RequirementAllocationCommandType::ProposedTask& RequirementAllocationCommandType::getProposedTask() {
  return *proposedTask_Accessor;
}

uci::type::RequirementAllocationCommandType& RequirementAllocationCommandType::setProposedTask(const uci::type::RequirementAllocationCommandType::ProposedTask& accessor) {
  if (&accessor != proposedTask_Accessor.get()) {
    proposedTask_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementAllocationCommandType::ProposedResponse& RequirementAllocationCommandType::getProposedResponse() const {
  return *proposedResponse_Accessor;
}

uci::type::RequirementAllocationCommandType::ProposedResponse& RequirementAllocationCommandType::getProposedResponse() {
  return *proposedResponse_Accessor;
}

uci::type::RequirementAllocationCommandType& RequirementAllocationCommandType::setProposedResponse(const uci::type::RequirementAllocationCommandType::ProposedResponse& accessor) {
  if (&accessor != proposedResponse_Accessor.get()) {
    proposedResponse_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RequirementAllocationCommandType> RequirementAllocationCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementAllocationCommandType : type};
  return (requestedType == uci::type::accessorType::requirementAllocationCommandType) ? boost::make_unique<RequirementAllocationCommandType>() : nullptr;
}

/**  */
namespace RequirementAllocationCommandType_Names {

constexpr const char* Extern_Type_Name{"RequirementAllocationCommandType"};
constexpr const char* ProposedEffect_Name{"ProposedEffect"};
constexpr const char* ProposedAction_Name{"ProposedAction"};
constexpr const char* ProposedTask_Name{"ProposedTask"};
constexpr const char* ProposedResponse_Name{"ProposedResponse"};

} // namespace RequirementAllocationCommandType_Names

void RequirementAllocationCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementAllocationCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementAllocationCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementAllocationCommandType_Names::ProposedEffect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementAllocationCommandType::ProposedEffect& boundedList = accessor.getProposedEffect();
        const uci::type::RequirementAllocationCommandType::ProposedEffect::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EffectAllocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementAllocationCommandType_Names::ProposedAction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementAllocationCommandType::ProposedAction& boundedList = accessor.getProposedAction();
        const uci::type::RequirementAllocationCommandType::ProposedAction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActionAllocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementAllocationCommandType_Names::ProposedTask_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementAllocationCommandType::ProposedTask& boundedList = accessor.getProposedTask();
        const uci::type::RequirementAllocationCommandType::ProposedTask::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::TaskAllocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementAllocationCommandType_Names::ProposedResponse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementAllocationCommandType::ProposedResponse& boundedList = accessor.getProposedResponse();
        const uci::type::RequirementAllocationCommandType::ProposedResponse::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResponseAllocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RequirementAllocationCommandType::serialize(const uci::type::RequirementAllocationCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementAllocationCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementAllocationCommandType_Names::Extern_Type_Name);
  }
  {
    const uci::type::RequirementAllocationCommandType::ProposedEffect& boundedList = accessor.getProposedEffect();
    for (uci::type::RequirementAllocationCommandType::ProposedEffect::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EffectAllocationType::serialize(boundedList.at(i), node, RequirementAllocationCommandType_Names::ProposedEffect_Name);
    }
  }
  {
    const uci::type::RequirementAllocationCommandType::ProposedAction& boundedList = accessor.getProposedAction();
    for (uci::type::RequirementAllocationCommandType::ProposedAction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActionAllocationType::serialize(boundedList.at(i), node, RequirementAllocationCommandType_Names::ProposedAction_Name);
    }
  }
  {
    const uci::type::RequirementAllocationCommandType::ProposedTask& boundedList = accessor.getProposedTask();
    for (uci::type::RequirementAllocationCommandType::ProposedTask::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::TaskAllocationType::serialize(boundedList.at(i), node, RequirementAllocationCommandType_Names::ProposedTask_Name);
    }
  }
  {
    const uci::type::RequirementAllocationCommandType::ProposedResponse& boundedList = accessor.getProposedResponse();
    for (uci::type::RequirementAllocationCommandType::ProposedResponse::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResponseAllocationType::serialize(boundedList.at(i), node, RequirementAllocationCommandType_Names::ProposedResponse_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementAllocationCommandType& RequirementAllocationCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementAllocationCommandType>().release());
}

uci::type::RequirementAllocationCommandType& RequirementAllocationCommandType::create(const uci::type::RequirementAllocationCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementAllocationCommandType> newAccessor{boost::make_unique<asb_uci::type::RequirementAllocationCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementAllocationCommandType::destroy(uci::type::RequirementAllocationCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementAllocationCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

