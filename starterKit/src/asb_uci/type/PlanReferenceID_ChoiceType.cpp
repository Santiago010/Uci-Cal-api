/** @file PlanReferenceID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanReferenceID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionPlanID_Type.h"
#include "asb_uci/type/ActivityPlanID_Type.h"
#include "asb_uci/type/CommScheduleAllocationID_Type.h"
#include "asb_uci/type/EffectPlanID_Type.h"
#include "asb_uci/type/MissionPlanID_Type.h"
#include "asb_uci/type/OrbitActivityPlanID_Type.h"
#include "asb_uci/type/OrbitPlanID_Type.h"
#include "asb_uci/type/ResponsePlanID_Type.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/type/RoutePlanID_Type.h"
#include "asb_uci/type/TaskPlanID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionPlanID_Type.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/EffectPlanID_Type.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/PlanReferenceID_ChoiceType.h"
#include "uci/type/ResponsePlanID_Type.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/TaskPlanID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanReferenceID_ChoiceType::PlanReferenceID_ChoiceType() = default;

PlanReferenceID_ChoiceType::~PlanReferenceID_ChoiceType() = default;

void PlanReferenceID_ChoiceType::copy(const uci::type::PlanReferenceID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void PlanReferenceID_ChoiceType::copyImpl(const uci::type::PlanReferenceID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanReferenceID_ChoiceType&>(accessor);
    if (accessorImpl.missionPlanID_Accessor) {
      setMissionPlanID(*(accessorImpl.missionPlanID_Accessor));
    } else {
      missionPlanID_Accessor.reset();
    }
    if (accessorImpl.taskPlanID_Accessor) {
      setTaskPlanID(*(accessorImpl.taskPlanID_Accessor));
    } else {
      taskPlanID_Accessor.reset();
    }
    if (accessorImpl.orbitPlanID_Accessor) {
      setOrbitPlanID(*(accessorImpl.orbitPlanID_Accessor));
    } else {
      orbitPlanID_Accessor.reset();
    }
    if (accessorImpl.orbitActivityPlanID_Accessor) {
      setOrbitActivityPlanID(*(accessorImpl.orbitActivityPlanID_Accessor));
    } else {
      orbitActivityPlanID_Accessor.reset();
    }
    if (accessorImpl.routePlanID_Accessor) {
      setRoutePlanID(*(accessorImpl.routePlanID_Accessor));
    } else {
      routePlanID_Accessor.reset();
    }
    if (accessorImpl.routeActivityPlanID_Accessor) {
      setRouteActivityPlanID(*(accessorImpl.routeActivityPlanID_Accessor));
    } else {
      routeActivityPlanID_Accessor.reset();
    }
    if (accessorImpl.commScheduleAllocationID_Accessor) {
      setCommScheduleAllocationID(*(accessorImpl.commScheduleAllocationID_Accessor));
    } else {
      commScheduleAllocationID_Accessor.reset();
    }
    if (accessorImpl.activityPlanID_Accessor) {
      setActivityPlanID(*(accessorImpl.activityPlanID_Accessor));
    } else {
      activityPlanID_Accessor.reset();
    }
    if (accessorImpl.effectPlanID_Accessor) {
      setEffectPlanID(*(accessorImpl.effectPlanID_Accessor));
    } else {
      effectPlanID_Accessor.reset();
    }
    if (accessorImpl.actionPlanID_Accessor) {
      setActionPlanID(*(accessorImpl.actionPlanID_Accessor));
    } else {
      actionPlanID_Accessor.reset();
    }
    if (accessorImpl.responsePlanID_Accessor) {
      setResponsePlanID(*(accessorImpl.responsePlanID_Accessor));
    } else {
      responsePlanID_Accessor.reset();
    }
  }
}

void PlanReferenceID_ChoiceType::reset() noexcept {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
}

uci::type::PlanReferenceID_ChoiceType::PlanReferenceID_ChoiceTypeChoice PlanReferenceID_ChoiceType::getPlanReferenceID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (missionPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_MISSIONPLANID;
  }
  if (taskPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_TASKPLANID;
  }
  if (orbitPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_ORBITPLANID;
  }
  if (orbitActivityPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_ORBITACTIVITYPLANID;
  }
  if (routePlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_ROUTEPLANID;
  }
  if (routeActivityPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_ROUTEACTIVITYPLANID;
  }
  if (commScheduleAllocationID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_COMMSCHEDULEALLOCATIONID;
  }
  if (activityPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_ACTIVITYPLANID;
  }
  if (effectPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_EFFECTPLANID;
  }
  if (actionPlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_ACTIONPLANID;
  }
  if (responsePlanID_Accessor) {
    return PLANREFERENCEID_CHOICETYPE_CHOICE_RESPONSEPLANID;
  }
  return PLANREFERENCEID_CHOICETYPE_CHOICE_NONE;
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setPlanReferenceID_ChoiceTypeChoiceOrdinal(uci::type::PlanReferenceID_ChoiceType::PlanReferenceID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PLANREFERENCEID_CHOICETYPE_CHOICE_MISSIONPLANID:
      chooseMissionPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_TASKPLANID:
      chooseTaskPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_ORBITPLANID:
      chooseOrbitPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_ORBITACTIVITYPLANID:
      chooseOrbitActivityPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_ROUTEPLANID:
      chooseRoutePlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_ROUTEACTIVITYPLANID:
      chooseRouteActivityPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_COMMSCHEDULEALLOCATIONID:
      chooseCommScheduleAllocationID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_ACTIVITYPLANID:
      chooseActivityPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_EFFECTPLANID:
      chooseEffectPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_ACTIONPLANID:
      chooseActionPlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case PLANREFERENCEID_CHOICETYPE_CHOICE_RESPONSEPLANID:
      chooseResponsePlanID("setPlanReferenceID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPlanReferenceID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MissionPlanID_Type& PlanReferenceID_ChoiceType::getMissionPlanID_() const {
  if (missionPlanID_Accessor) {
    return *missionPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanID(): Unable to get MissionPlanID, field not selected");
}

const uci::type::MissionPlanID_Type& PlanReferenceID_ChoiceType::getMissionPlanID() const {
  return getMissionPlanID_();
}

uci::type::MissionPlanID_Type& PlanReferenceID_ChoiceType::getMissionPlanID() {
  return getMissionPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setMissionPlanID(const uci::type::MissionPlanID_Type& accessor) {
  chooseMissionPlanID();
  if (&accessor != missionPlanID_Accessor.get()) {
    missionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isMissionPlanID() const noexcept {
  return static_cast<bool>(missionPlanID_Accessor);
}

uci::type::MissionPlanID_Type& PlanReferenceID_ChoiceType::chooseMissionPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanID_Type : type};
  if ((!missionPlanID_Accessor) || (missionPlanID_Accessor->getAccessorType() != requestedType)) {
    missionPlanID_Accessor = MissionPlanID_Type::create(type);
    if (!missionPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanID_Accessor;
}

uci::type::MissionPlanID_Type& PlanReferenceID_ChoiceType::chooseMissionPlanID(uci::base::accessorType::AccessorType type) {
  return chooseMissionPlanID("chooseMissionPlanID", type);
}

uci::type::TaskPlanID_Type& PlanReferenceID_ChoiceType::getTaskPlanID_() const {
  if (taskPlanID_Accessor) {
    return *taskPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskPlanID(): Unable to get TaskPlanID, field not selected");
}

const uci::type::TaskPlanID_Type& PlanReferenceID_ChoiceType::getTaskPlanID() const {
  return getTaskPlanID_();
}

uci::type::TaskPlanID_Type& PlanReferenceID_ChoiceType::getTaskPlanID() {
  return getTaskPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setTaskPlanID(const uci::type::TaskPlanID_Type& accessor) {
  chooseTaskPlanID();
  if (&accessor != taskPlanID_Accessor.get()) {
    taskPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isTaskPlanID() const noexcept {
  return static_cast<bool>(taskPlanID_Accessor);
}

uci::type::TaskPlanID_Type& PlanReferenceID_ChoiceType::chooseTaskPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskPlanID_Type : type};
  if ((!taskPlanID_Accessor) || (taskPlanID_Accessor->getAccessorType() != requestedType)) {
    taskPlanID_Accessor = TaskPlanID_Type::create(type);
    if (!taskPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskPlanID_Accessor;
}

uci::type::TaskPlanID_Type& PlanReferenceID_ChoiceType::chooseTaskPlanID(uci::base::accessorType::AccessorType type) {
  return chooseTaskPlanID("chooseTaskPlanID", type);
}

uci::type::OrbitPlanID_Type& PlanReferenceID_ChoiceType::getOrbitPlanID_() const {
  if (orbitPlanID_Accessor) {
    return *orbitPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlanID(): Unable to get OrbitPlanID, field not selected");
}

const uci::type::OrbitPlanID_Type& PlanReferenceID_ChoiceType::getOrbitPlanID() const {
  return getOrbitPlanID_();
}

uci::type::OrbitPlanID_Type& PlanReferenceID_ChoiceType::getOrbitPlanID() {
  return getOrbitPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setOrbitPlanID(const uci::type::OrbitPlanID_Type& accessor) {
  chooseOrbitPlanID();
  if (&accessor != orbitPlanID_Accessor.get()) {
    orbitPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isOrbitPlanID() const noexcept {
  return static_cast<bool>(orbitPlanID_Accessor);
}

uci::type::OrbitPlanID_Type& PlanReferenceID_ChoiceType::chooseOrbitPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanID_Type : type};
  if ((!orbitPlanID_Accessor) || (orbitPlanID_Accessor->getAccessorType() != requestedType)) {
    orbitPlanID_Accessor = OrbitPlanID_Type::create(type);
    if (!orbitPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlanID_Accessor;
}

uci::type::OrbitPlanID_Type& PlanReferenceID_ChoiceType::chooseOrbitPlanID(uci::base::accessorType::AccessorType type) {
  return chooseOrbitPlanID("chooseOrbitPlanID", type);
}

uci::type::OrbitActivityPlanID_Type& PlanReferenceID_ChoiceType::getOrbitActivityPlanID_() const {
  if (orbitActivityPlanID_Accessor) {
    return *orbitActivityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitActivityPlanID(): Unable to get OrbitActivityPlanID, field not selected");
}

const uci::type::OrbitActivityPlanID_Type& PlanReferenceID_ChoiceType::getOrbitActivityPlanID() const {
  return getOrbitActivityPlanID_();
}

uci::type::OrbitActivityPlanID_Type& PlanReferenceID_ChoiceType::getOrbitActivityPlanID() {
  return getOrbitActivityPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setOrbitActivityPlanID(const uci::type::OrbitActivityPlanID_Type& accessor) {
  chooseOrbitActivityPlanID();
  if (&accessor != orbitActivityPlanID_Accessor.get()) {
    orbitActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isOrbitActivityPlanID() const noexcept {
  return static_cast<bool>(orbitActivityPlanID_Accessor);
}

uci::type::OrbitActivityPlanID_Type& PlanReferenceID_ChoiceType::chooseOrbitActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitActivityPlanID_Type : type};
  if ((!orbitActivityPlanID_Accessor) || (orbitActivityPlanID_Accessor->getAccessorType() != requestedType)) {
    orbitActivityPlanID_Accessor = OrbitActivityPlanID_Type::create(type);
    if (!orbitActivityPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitActivityPlanID_Type& PlanReferenceID_ChoiceType::chooseOrbitActivityPlanID(uci::base::accessorType::AccessorType type) {
  return chooseOrbitActivityPlanID("chooseOrbitActivityPlanID", type);
}

uci::type::RoutePlanID_Type& PlanReferenceID_ChoiceType::getRoutePlanID_() const {
  if (routePlanID_Accessor) {
    return *routePlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlanID(): Unable to get RoutePlanID, field not selected");
}

const uci::type::RoutePlanID_Type& PlanReferenceID_ChoiceType::getRoutePlanID() const {
  return getRoutePlanID_();
}

uci::type::RoutePlanID_Type& PlanReferenceID_ChoiceType::getRoutePlanID() {
  return getRoutePlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setRoutePlanID(const uci::type::RoutePlanID_Type& accessor) {
  chooseRoutePlanID();
  if (&accessor != routePlanID_Accessor.get()) {
    routePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isRoutePlanID() const noexcept {
  return static_cast<bool>(routePlanID_Accessor);
}

uci::type::RoutePlanID_Type& PlanReferenceID_ChoiceType::chooseRoutePlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanID_Type : type};
  if ((!routePlanID_Accessor) || (routePlanID_Accessor->getAccessorType() != requestedType)) {
    routePlanID_Accessor = RoutePlanID_Type::create(type);
    if (!routePlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlanID_Accessor;
}

uci::type::RoutePlanID_Type& PlanReferenceID_ChoiceType::chooseRoutePlanID(uci::base::accessorType::AccessorType type) {
  return chooseRoutePlanID("chooseRoutePlanID", type);
}

uci::type::RouteActivityPlanID_Type& PlanReferenceID_ChoiceType::getRouteActivityPlanID_() const {
  if (routeActivityPlanID_Accessor) {
    return *routeActivityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteActivityPlanID(): Unable to get RouteActivityPlanID, field not selected");
}

const uci::type::RouteActivityPlanID_Type& PlanReferenceID_ChoiceType::getRouteActivityPlanID() const {
  return getRouteActivityPlanID_();
}

uci::type::RouteActivityPlanID_Type& PlanReferenceID_ChoiceType::getRouteActivityPlanID() {
  return getRouteActivityPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setRouteActivityPlanID(const uci::type::RouteActivityPlanID_Type& accessor) {
  chooseRouteActivityPlanID();
  if (&accessor != routeActivityPlanID_Accessor.get()) {
    routeActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isRouteActivityPlanID() const noexcept {
  return static_cast<bool>(routeActivityPlanID_Accessor);
}

uci::type::RouteActivityPlanID_Type& PlanReferenceID_ChoiceType::chooseRouteActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanID_Type : type};
  if ((!routeActivityPlanID_Accessor) || (routeActivityPlanID_Accessor->getAccessorType() != requestedType)) {
    routeActivityPlanID_Accessor = RouteActivityPlanID_Type::create(type);
    if (!routeActivityPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeActivityPlanID_Accessor;
}

uci::type::RouteActivityPlanID_Type& PlanReferenceID_ChoiceType::chooseRouteActivityPlanID(uci::base::accessorType::AccessorType type) {
  return chooseRouteActivityPlanID("chooseRouteActivityPlanID", type);
}

uci::type::CommScheduleAllocationID_Type& PlanReferenceID_ChoiceType::getCommScheduleAllocationID_() const {
  if (commScheduleAllocationID_Accessor) {
    return *commScheduleAllocationID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommScheduleAllocationID(): Unable to get CommScheduleAllocationID, field not selected");
}

const uci::type::CommScheduleAllocationID_Type& PlanReferenceID_ChoiceType::getCommScheduleAllocationID() const {
  return getCommScheduleAllocationID_();
}

uci::type::CommScheduleAllocationID_Type& PlanReferenceID_ChoiceType::getCommScheduleAllocationID() {
  return getCommScheduleAllocationID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setCommScheduleAllocationID(const uci::type::CommScheduleAllocationID_Type& accessor) {
  chooseCommScheduleAllocationID();
  if (&accessor != commScheduleAllocationID_Accessor.get()) {
    commScheduleAllocationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isCommScheduleAllocationID() const noexcept {
  return static_cast<bool>(commScheduleAllocationID_Accessor);
}

uci::type::CommScheduleAllocationID_Type& PlanReferenceID_ChoiceType::chooseCommScheduleAllocationID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commScheduleAllocationID_Type : type};
  if ((!commScheduleAllocationID_Accessor) || (commScheduleAllocationID_Accessor->getAccessorType() != requestedType)) {
    commScheduleAllocationID_Accessor = CommScheduleAllocationID_Type::create(type);
    if (!commScheduleAllocationID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commScheduleAllocationID_Accessor;
}

uci::type::CommScheduleAllocationID_Type& PlanReferenceID_ChoiceType::chooseCommScheduleAllocationID(uci::base::accessorType::AccessorType type) {
  return chooseCommScheduleAllocationID("chooseCommScheduleAllocationID", type);
}

uci::type::ActivityPlanID_Type& PlanReferenceID_ChoiceType::getActivityPlanID_() const {
  if (activityPlanID_Accessor) {
    return *activityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityPlanID(): Unable to get ActivityPlanID, field not selected");
}

const uci::type::ActivityPlanID_Type& PlanReferenceID_ChoiceType::getActivityPlanID() const {
  return getActivityPlanID_();
}

uci::type::ActivityPlanID_Type& PlanReferenceID_ChoiceType::getActivityPlanID() {
  return getActivityPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setActivityPlanID(const uci::type::ActivityPlanID_Type& accessor) {
  chooseActivityPlanID();
  if (&accessor != activityPlanID_Accessor.get()) {
    activityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isActivityPlanID() const noexcept {
  return static_cast<bool>(activityPlanID_Accessor);
}

uci::type::ActivityPlanID_Type& PlanReferenceID_ChoiceType::chooseActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanID_Type : type};
  if ((!activityPlanID_Accessor) || (activityPlanID_Accessor->getAccessorType() != requestedType)) {
    activityPlanID_Accessor = ActivityPlanID_Type::create(type);
    if (!activityPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityPlanID_Accessor;
}

uci::type::ActivityPlanID_Type& PlanReferenceID_ChoiceType::chooseActivityPlanID(uci::base::accessorType::AccessorType type) {
  return chooseActivityPlanID("chooseActivityPlanID", type);
}

uci::type::EffectPlanID_Type& PlanReferenceID_ChoiceType::getEffectPlanID_() const {
  if (effectPlanID_Accessor) {
    return *effectPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectPlanID(): Unable to get EffectPlanID, field not selected");
}

const uci::type::EffectPlanID_Type& PlanReferenceID_ChoiceType::getEffectPlanID() const {
  return getEffectPlanID_();
}

uci::type::EffectPlanID_Type& PlanReferenceID_ChoiceType::getEffectPlanID() {
  return getEffectPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setEffectPlanID(const uci::type::EffectPlanID_Type& accessor) {
  chooseEffectPlanID();
  if (&accessor != effectPlanID_Accessor.get()) {
    effectPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isEffectPlanID() const noexcept {
  return static_cast<bool>(effectPlanID_Accessor);
}

uci::type::EffectPlanID_Type& PlanReferenceID_ChoiceType::chooseEffectPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanID_Type : type};
  if ((!effectPlanID_Accessor) || (effectPlanID_Accessor->getAccessorType() != requestedType)) {
    effectPlanID_Accessor = EffectPlanID_Type::create(type);
    if (!effectPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectPlanID_Accessor;
}

uci::type::EffectPlanID_Type& PlanReferenceID_ChoiceType::chooseEffectPlanID(uci::base::accessorType::AccessorType type) {
  return chooseEffectPlanID("chooseEffectPlanID", type);
}

uci::type::ActionPlanID_Type& PlanReferenceID_ChoiceType::getActionPlanID_() const {
  if (actionPlanID_Accessor) {
    return *actionPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getActionPlanID(): Unable to get ActionPlanID, field not selected");
}

const uci::type::ActionPlanID_Type& PlanReferenceID_ChoiceType::getActionPlanID() const {
  return getActionPlanID_();
}

uci::type::ActionPlanID_Type& PlanReferenceID_ChoiceType::getActionPlanID() {
  return getActionPlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setActionPlanID(const uci::type::ActionPlanID_Type& accessor) {
  chooseActionPlanID();
  if (&accessor != actionPlanID_Accessor.get()) {
    actionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isActionPlanID() const noexcept {
  return static_cast<bool>(actionPlanID_Accessor);
}

uci::type::ActionPlanID_Type& PlanReferenceID_ChoiceType::chooseActionPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanID_Type : type};
  if ((!actionPlanID_Accessor) || (actionPlanID_Accessor->getAccessorType() != requestedType)) {
    actionPlanID_Accessor = ActionPlanID_Type::create(type);
    if (!actionPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionPlanID_Accessor;
}

uci::type::ActionPlanID_Type& PlanReferenceID_ChoiceType::chooseActionPlanID(uci::base::accessorType::AccessorType type) {
  return chooseActionPlanID("chooseActionPlanID", type);
}

uci::type::ResponsePlanID_Type& PlanReferenceID_ChoiceType::getResponsePlanID_() const {
  if (responsePlanID_Accessor) {
    return *responsePlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getResponsePlanID(): Unable to get ResponsePlanID, field not selected");
}

const uci::type::ResponsePlanID_Type& PlanReferenceID_ChoiceType::getResponsePlanID() const {
  return getResponsePlanID_();
}

uci::type::ResponsePlanID_Type& PlanReferenceID_ChoiceType::getResponsePlanID() {
  return getResponsePlanID_();
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::setResponsePlanID(const uci::type::ResponsePlanID_Type& accessor) {
  chooseResponsePlanID();
  if (&accessor != responsePlanID_Accessor.get()) {
    responsePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceID_ChoiceType::isResponsePlanID() const noexcept {
  return static_cast<bool>(responsePlanID_Accessor);
}

uci::type::ResponsePlanID_Type& PlanReferenceID_ChoiceType::chooseResponsePlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responsePlanID_Type : type};
  if ((!responsePlanID_Accessor) || (responsePlanID_Accessor->getAccessorType() != requestedType)) {
    responsePlanID_Accessor = ResponsePlanID_Type::create(type);
    if (!responsePlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responsePlanID_Accessor;
}

uci::type::ResponsePlanID_Type& PlanReferenceID_ChoiceType::chooseResponsePlanID(uci::base::accessorType::AccessorType type) {
  return chooseResponsePlanID("chooseResponsePlanID", type);
}

std::unique_ptr<PlanReferenceID_ChoiceType> PlanReferenceID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planReferenceID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::planReferenceID_ChoiceType) ? boost::make_unique<PlanReferenceID_ChoiceType>() : nullptr;
}

/**  */
namespace PlanReferenceID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"PlanReferenceID_ChoiceType"};
constexpr const char* MissionPlanID_Name{"MissionPlanID"};
constexpr const char* TaskPlanID_Name{"TaskPlanID"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* CommScheduleAllocationID_Name{"CommScheduleAllocationID"};
constexpr const char* ActivityPlanID_Name{"ActivityPlanID"};
constexpr const char* EffectPlanID_Name{"EffectPlanID"};
constexpr const char* ActionPlanID_Name{"ActionPlanID"};
constexpr const char* ResponsePlanID_Name{"ResponsePlanID"};

} // namespace PlanReferenceID_ChoiceType_Names

void PlanReferenceID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanReferenceID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanReferenceID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::MissionPlanID_Name) {
      MissionPlanID_Type::deserialize(valueType.second, accessor.chooseMissionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::TaskPlanID_Name) {
      TaskPlanID_Type::deserialize(valueType.second, accessor.chooseTaskPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::OrbitPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.chooseOrbitPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::OrbitActivityPlanID_Name) {
      OrbitActivityPlanID_Type::deserialize(valueType.second, accessor.chooseOrbitActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::RoutePlanID_Name) {
      RoutePlanID_Type::deserialize(valueType.second, accessor.chooseRoutePlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::RouteActivityPlanID_Name) {
      RouteActivityPlanID_Type::deserialize(valueType.second, accessor.chooseRouteActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::CommScheduleAllocationID_Name) {
      CommScheduleAllocationID_Type::deserialize(valueType.second, accessor.chooseCommScheduleAllocationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::ActivityPlanID_Name) {
      ActivityPlanID_Type::deserialize(valueType.second, accessor.chooseActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::EffectPlanID_Name) {
      EffectPlanID_Type::deserialize(valueType.second, accessor.chooseEffectPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::ActionPlanID_Name) {
      ActionPlanID_Type::deserialize(valueType.second, accessor.chooseActionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::ResponsePlanID_Name) {
      ResponsePlanID_Type::deserialize(valueType.second, accessor.chooseResponsePlanID(), nodeName, nsPrefix);
    }
  }
}

std::string PlanReferenceID_ChoiceType::serialize(const uci::type::PlanReferenceID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanReferenceID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanReferenceID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isMissionPlanID()) {
    MissionPlanID_Type::serialize(accessor.getMissionPlanID(), node, PlanReferenceID_ChoiceType_Names::MissionPlanID_Name);
  } else if (accessor.isTaskPlanID()) {
    TaskPlanID_Type::serialize(accessor.getTaskPlanID(), node, PlanReferenceID_ChoiceType_Names::TaskPlanID_Name);
  } else if (accessor.isOrbitPlanID()) {
    OrbitPlanID_Type::serialize(accessor.getOrbitPlanID(), node, PlanReferenceID_ChoiceType_Names::OrbitPlanID_Name);
  } else if (accessor.isOrbitActivityPlanID()) {
    OrbitActivityPlanID_Type::serialize(accessor.getOrbitActivityPlanID(), node, PlanReferenceID_ChoiceType_Names::OrbitActivityPlanID_Name);
  } else if (accessor.isRoutePlanID()) {
    RoutePlanID_Type::serialize(accessor.getRoutePlanID(), node, PlanReferenceID_ChoiceType_Names::RoutePlanID_Name);
  } else if (accessor.isRouteActivityPlanID()) {
    RouteActivityPlanID_Type::serialize(accessor.getRouteActivityPlanID(), node, PlanReferenceID_ChoiceType_Names::RouteActivityPlanID_Name);
  } else if (accessor.isCommScheduleAllocationID()) {
    CommScheduleAllocationID_Type::serialize(accessor.getCommScheduleAllocationID(), node, PlanReferenceID_ChoiceType_Names::CommScheduleAllocationID_Name);
  } else if (accessor.isActivityPlanID()) {
    ActivityPlanID_Type::serialize(accessor.getActivityPlanID(), node, PlanReferenceID_ChoiceType_Names::ActivityPlanID_Name);
  } else if (accessor.isEffectPlanID()) {
    EffectPlanID_Type::serialize(accessor.getEffectPlanID(), node, PlanReferenceID_ChoiceType_Names::EffectPlanID_Name);
  } else if (accessor.isActionPlanID()) {
    ActionPlanID_Type::serialize(accessor.getActionPlanID(), node, PlanReferenceID_ChoiceType_Names::ActionPlanID_Name);
  } else if (accessor.isResponsePlanID()) {
    ResponsePlanID_Type::serialize(accessor.getResponsePlanID(), node, PlanReferenceID_ChoiceType_Names::ResponsePlanID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanReferenceID_ChoiceType>().release());
}

uci::type::PlanReferenceID_ChoiceType& PlanReferenceID_ChoiceType::create(const uci::type::PlanReferenceID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanReferenceID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::PlanReferenceID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanReferenceID_ChoiceType::destroy(uci::type::PlanReferenceID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanReferenceID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

