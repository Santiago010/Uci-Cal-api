/** @file ServiceLifecycleCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ServiceLifecycleCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommandBaseType.h"
#include "../../../include/asb_uci/type/MissionID_Type.h"
#include "../../../include/asb_uci/type/ServiceID_Type.h"
#include "../../../include/asb_uci/type/ServiceLifecycleStateEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceLifecycleCommandMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceLifecycleStateEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ServiceLifecycleCommandMDT::ServiceLifecycleCommandMDT()
  : missionID_Accessor{boost::make_unique<MissionID_Type>()},
    affectedServiceID_Accessor{boost::make_unique<AffectedServiceID>(1, SIZE_MAX)},
    lifecycleState_Accessor{boost::make_unique<ServiceLifecycleStateEnum>()} {
}

ServiceLifecycleCommandMDT::~ServiceLifecycleCommandMDT() = default;

void ServiceLifecycleCommandMDT::copy(const uci::type::ServiceLifecycleCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void ServiceLifecycleCommandMDT::copyImpl(const uci::type::ServiceLifecycleCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ServiceLifecycleCommandMDT&>(accessor);
    setMissionID(*(accessorImpl.missionID_Accessor));
    if (accessorImpl.effectingServiceID_Accessor) {
      setEffectingServiceID(*(accessorImpl.effectingServiceID_Accessor));
    } else {
      effectingServiceID_Accessor.reset();
    }
    setAffectedServiceID(*(accessorImpl.affectedServiceID_Accessor));
    setLifecycleState(*(accessorImpl.lifecycleState_Accessor));
  }
}

void ServiceLifecycleCommandMDT::reset() noexcept {
  CommandBaseType::reset();
  missionID_Accessor->reset();
  effectingServiceID_Accessor.reset();
  affectedServiceID_Accessor->reset();
  lifecycleState_Accessor->reset();
}

const uci::type::MissionID_Type& ServiceLifecycleCommandMDT::getMissionID() const {
  return *missionID_Accessor;
}

uci::type::MissionID_Type& ServiceLifecycleCommandMDT::getMissionID() {
  return *missionID_Accessor;
}

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::setMissionID(const uci::type::MissionID_Type& accessor) {
  if (&accessor != missionID_Accessor.get()) {
    missionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ServiceID_Type& ServiceLifecycleCommandMDT::getEffectingServiceID_() const {
  if (effectingServiceID_Accessor) {
    return *effectingServiceID_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectingServiceID(): An attempt was made to get an optional field that was not enabled, call hasEffectingServiceID() to determine if it is safe to call getEffectingServiceID()");
}

const uci::type::ServiceID_Type& ServiceLifecycleCommandMDT::getEffectingServiceID() const {
  return getEffectingServiceID_();
}

uci::type::ServiceID_Type& ServiceLifecycleCommandMDT::getEffectingServiceID() {
  return getEffectingServiceID_();
}

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::setEffectingServiceID(const uci::type::ServiceID_Type& accessor) {
  enableEffectingServiceID();
  if (&accessor != effectingServiceID_Accessor.get()) {
    effectingServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ServiceLifecycleCommandMDT::hasEffectingServiceID() const noexcept {
  return static_cast<bool>(effectingServiceID_Accessor);
}

uci::type::ServiceID_Type& ServiceLifecycleCommandMDT::enableEffectingServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!effectingServiceID_Accessor) || (effectingServiceID_Accessor->getAccessorType() != requestedType)) {
    effectingServiceID_Accessor = ServiceID_Type::create(requestedType);
    if (!effectingServiceID_Accessor) {
      throw uci::base::UCIException("Error in enableEffectingServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectingServiceID_Accessor;
}

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::clearEffectingServiceID() noexcept {
  effectingServiceID_Accessor.reset();
  return *this;
}

const uci::type::ServiceLifecycleCommandMDT::AffectedServiceID& ServiceLifecycleCommandMDT::getAffectedServiceID() const {
  return *affectedServiceID_Accessor;
}

uci::type::ServiceLifecycleCommandMDT::AffectedServiceID& ServiceLifecycleCommandMDT::getAffectedServiceID() {
  return *affectedServiceID_Accessor;
}

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::setAffectedServiceID(const uci::type::ServiceLifecycleCommandMDT::AffectedServiceID& accessor) {
  if (&accessor != affectedServiceID_Accessor.get()) {
    affectedServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ServiceLifecycleStateEnum& ServiceLifecycleCommandMDT::getLifecycleState() const {
  return *lifecycleState_Accessor;
}

uci::type::ServiceLifecycleStateEnum& ServiceLifecycleCommandMDT::getLifecycleState() {
  return *lifecycleState_Accessor;
}

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::setLifecycleState(const uci::type::ServiceLifecycleStateEnum& accessor) {
  if (&accessor != lifecycleState_Accessor.get()) {
    lifecycleState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::setLifecycleState(uci::type::ServiceLifecycleStateEnum::EnumerationItem value) {
  lifecycleState_Accessor->setValue(value);
  return *this;
}


std::unique_ptr<ServiceLifecycleCommandMDT> ServiceLifecycleCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceLifecycleCommandMDT : type};
  return (requestedType == uci::type::accessorType::serviceLifecycleCommandMDT) ? boost::make_unique<ServiceLifecycleCommandMDT>() : nullptr;
}

/**  */
namespace ServiceLifecycleCommandMDT_Names {

constexpr const char* Extern_Type_Name{"ServiceLifecycleCommandMDT"};
constexpr const char* MissionID_Name{"MissionID"};
constexpr const char* EffectingServiceID_Name{"EffectingServiceID"};
constexpr const char* AffectedServiceID_Name{"AffectedServiceID"};
constexpr const char* LifecycleState_Name{"LifecycleState"};

} // namespace ServiceLifecycleCommandMDT_Names

void ServiceLifecycleCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ServiceLifecycleCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ServiceLifecycleCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ServiceLifecycleCommandMDT_Names::MissionID_Name) {
      MissionID_Type::deserialize(valueType.second, accessor.getMissionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ServiceLifecycleCommandMDT_Names::EffectingServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableEffectingServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ServiceLifecycleCommandMDT_Names::AffectedServiceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ServiceLifecycleCommandMDT::AffectedServiceID& boundedList = accessor.getAffectedServiceID();
        const uci::type::ServiceLifecycleCommandMDT::AffectedServiceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ServiceID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ServiceLifecycleCommandMDT_Names::LifecycleState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLifecycleState().setValueFromName(*value);
      }
    }
  }
  CommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ServiceLifecycleCommandMDT::serialize(const uci::type::ServiceLifecycleCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ServiceLifecycleCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ServiceLifecycleCommandMDT_Names::Extern_Type_Name);
  }
  CommandBaseType::serialize(accessor, node, "", false, false, false);
  MissionID_Type::serialize(accessor.getMissionID(), node, ServiceLifecycleCommandMDT_Names::MissionID_Name);
  if (accessor.hasEffectingServiceID()) {
    ServiceID_Type::serialize(accessor.getEffectingServiceID(), node, ServiceLifecycleCommandMDT_Names::EffectingServiceID_Name);
  }
  {
    const uci::type::ServiceLifecycleCommandMDT::AffectedServiceID& boundedList = accessor.getAffectedServiceID();
    for (uci::type::ServiceLifecycleCommandMDT::AffectedServiceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ServiceID_Type::serialize(boundedList.at(i), node, ServiceLifecycleCommandMDT_Names::AffectedServiceID_Name);
    }
  }
  ServiceLifecycleStateEnum::serialize(accessor.getLifecycleState(), node, ServiceLifecycleCommandMDT_Names::LifecycleState_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ServiceLifecycleCommandMDT>().release());
}

uci::type::ServiceLifecycleCommandMDT& ServiceLifecycleCommandMDT::create(const uci::type::ServiceLifecycleCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ServiceLifecycleCommandMDT> newAccessor{boost::make_unique<asb_uci::type::ServiceLifecycleCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ServiceLifecycleCommandMDT::destroy(uci::type::ServiceLifecycleCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ServiceLifecycleCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

