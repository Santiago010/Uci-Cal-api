/** @file RF_ThreadFeedbackType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RF_ThreadFeedbackType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ThreadAvailabiltyEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RF_ThreadFeedbackType.h"
#include "uci/type/ThreadAvailabiltyEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_ThreadFeedbackType::RF_ThreadFeedbackType()
  : availability_Accessor{boost::make_unique<ThreadAvailabiltyEnum>()} {
}

RF_ThreadFeedbackType::~RF_ThreadFeedbackType() = default;

void RF_ThreadFeedbackType::copy(const uci::type::RF_ThreadFeedbackType& accessor) {
  copyImpl(accessor, false);
}

void RF_ThreadFeedbackType::copyImpl(const uci::type::RF_ThreadFeedbackType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_ThreadFeedbackType&>(accessor);
    setRF_ThreadIndex(accessorImpl.rF_ThreadIndex_Accessor);
    setAvailability(*(accessorImpl.availability_Accessor));
    if (accessorImpl.hasPercentAccess()) {
      setPercentAccess(accessorImpl.getPercentAccess());
    } else {
      clearPercentAccess();
    }
  }
}

void RF_ThreadFeedbackType::reset() noexcept {
  rF_ThreadIndex_Accessor = 0;
  availability_Accessor->reset();
  clearPercentAccess();
}

xs::UnsignedInt RF_ThreadFeedbackType::getRF_ThreadIndex() const {
  return rF_ThreadIndex_Accessor;
}

uci::type::RF_ThreadFeedbackType& RF_ThreadFeedbackType::setRF_ThreadIndex(xs::UnsignedInt value) {
  rF_ThreadIndex_Accessor = value;
  return *this;
}


const uci::type::ThreadAvailabiltyEnum& RF_ThreadFeedbackType::getAvailability() const {
  return *availability_Accessor;
}

uci::type::ThreadAvailabiltyEnum& RF_ThreadFeedbackType::getAvailability() {
  return *availability_Accessor;
}

uci::type::RF_ThreadFeedbackType& RF_ThreadFeedbackType::setAvailability(const uci::type::ThreadAvailabiltyEnum& accessor) {
  if (&accessor != availability_Accessor.get()) {
    availability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RF_ThreadFeedbackType& RF_ThreadFeedbackType::setAvailability(uci::type::ThreadAvailabiltyEnum::EnumerationItem value) {
  availability_Accessor->setValue(value);
  return *this;
}


uci::type::PercentTypeValue RF_ThreadFeedbackType::getPercentAccess() const {
  if (percentAccess_Accessor) {
    return *percentAccess_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentAccess(): An attempt was made to get an optional field that was not enabled, call hasPercentAccess() to determine if it is safe to call getPercentAccess()");
}

uci::type::RF_ThreadFeedbackType& RF_ThreadFeedbackType::setPercentAccess(uci::type::PercentTypeValue value) {
  percentAccess_Accessor = value;
  return *this;
}

bool RF_ThreadFeedbackType::hasPercentAccess() const noexcept {
  return percentAccess_Accessor.has_value();
}

uci::type::RF_ThreadFeedbackType& RF_ThreadFeedbackType::clearPercentAccess() noexcept {
  percentAccess_Accessor.reset();
  return *this;
}

std::unique_ptr<RF_ThreadFeedbackType> RF_ThreadFeedbackType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_ThreadFeedbackType : type};
  return (requestedType == uci::type::accessorType::rF_ThreadFeedbackType) ? boost::make_unique<RF_ThreadFeedbackType>() : nullptr;
}

/**  */
namespace RF_ThreadFeedbackType_Names {

constexpr const char* Extern_Type_Name{"RF_ThreadFeedbackType"};
constexpr const char* RF_ThreadIndex_Name{"RF_ThreadIndex"};
constexpr const char* Availability_Name{"Availability"};
constexpr const char* PercentAccess_Name{"PercentAccess"};

} // namespace RF_ThreadFeedbackType_Names

void RF_ThreadFeedbackType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_ThreadFeedbackType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_ThreadFeedbackType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_ThreadFeedbackType_Names::RF_ThreadIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRF_ThreadIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RF_ThreadFeedbackType_Names::Availability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAvailability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RF_ThreadFeedbackType_Names::PercentAccess_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAccess(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string RF_ThreadFeedbackType::serialize(const uci::type::RF_ThreadFeedbackType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_ThreadFeedbackType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_ThreadFeedbackType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRF_ThreadIndex(), node, RF_ThreadFeedbackType_Names::RF_ThreadIndex_Name);
  ThreadAvailabiltyEnum::serialize(accessor.getAvailability(), node, RF_ThreadFeedbackType_Names::Availability_Name, false);
  if (accessor.hasPercentAccess()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAccess(), node, RF_ThreadFeedbackType_Names::PercentAccess_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_ThreadFeedbackType& RF_ThreadFeedbackType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_ThreadFeedbackType>().release());
}

uci::type::RF_ThreadFeedbackType& RF_ThreadFeedbackType::create(const uci::type::RF_ThreadFeedbackType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_ThreadFeedbackType> newAccessor{boost::make_unique<asb_uci::type::RF_ThreadFeedbackType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_ThreadFeedbackType::destroy(uci::type::RF_ThreadFeedbackType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_ThreadFeedbackType*>(&accessor);
}

} // namespace type

} // namespace uci

