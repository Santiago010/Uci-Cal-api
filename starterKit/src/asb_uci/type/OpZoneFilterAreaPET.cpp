/** @file OpZoneFilterAreaPET.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpZoneFilterAreaPET.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComparableRankingType.h"
#include "../../../include/asb_uci/type/OpZoneFilterEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComparableRankingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpZoneFilterAreaPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpZoneFilterEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpZoneFilterAreaPET::OpZoneFilterAreaPET()
  : filterType_Accessor{boost::make_unique<OpZoneFilterEnum>()} {
}

OpZoneFilterAreaPET::~OpZoneFilterAreaPET() = default;

void OpZoneFilterAreaPET::copy(const uci::type::OpZoneFilterAreaPET& accessor) {
  copyImpl(accessor, false);
}

void OpZoneFilterAreaPET::copyImpl(const uci::type::OpZoneFilterAreaPET& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::opZoneFilterAreaPET)) {
      const auto& accessorImpl = dynamic_cast<const OpZoneFilterAreaPET&>(accessor);
      setFilterType(*(accessorImpl.filterType_Accessor));
      if (accessorImpl.ranking_Accessor) {
        setRanking(*(accessorImpl.ranking_Accessor));
      } else {
        ranking_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OpZoneFilterAreaPET::reset() noexcept {
  filterType_Accessor->reset();
  ranking_Accessor.reset();
}

const uci::type::OpZoneFilterEnum& OpZoneFilterAreaPET::getFilterType() const {
  return *filterType_Accessor;
}

uci::type::OpZoneFilterEnum& OpZoneFilterAreaPET::getFilterType() {
  return *filterType_Accessor;
}

uci::type::OpZoneFilterAreaPET& OpZoneFilterAreaPET::setFilterType(const uci::type::OpZoneFilterEnum& accessor) {
  if (&accessor != filterType_Accessor.get()) {
    filterType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpZoneFilterAreaPET& OpZoneFilterAreaPET::setFilterType(uci::type::OpZoneFilterEnum::EnumerationItem value) {
  filterType_Accessor->setValue(value);
  return *this;
}


uci::type::ComparableRankingType& OpZoneFilterAreaPET::getRanking_() const {
  if (ranking_Accessor) {
    return *ranking_Accessor;
  }
  throw uci::base::UCIException("Error in getRanking(): An attempt was made to get an optional field that was not enabled, call hasRanking() to determine if it is safe to call getRanking()");
}

const uci::type::ComparableRankingType& OpZoneFilterAreaPET::getRanking() const {
  return getRanking_();
}

uci::type::ComparableRankingType& OpZoneFilterAreaPET::getRanking() {
  return getRanking_();
}

uci::type::OpZoneFilterAreaPET& OpZoneFilterAreaPET::setRanking(const uci::type::ComparableRankingType& accessor) {
  enableRanking();
  if (&accessor != ranking_Accessor.get()) {
    ranking_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneFilterAreaPET::hasRanking() const noexcept {
  return static_cast<bool>(ranking_Accessor);
}

uci::type::ComparableRankingType& OpZoneFilterAreaPET::enableRanking(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::comparableRankingType : type};
  if ((!ranking_Accessor) || (ranking_Accessor->getAccessorType() != requestedType)) {
    ranking_Accessor = ComparableRankingType::create(requestedType);
    if (!ranking_Accessor) {
      throw uci::base::UCIException("Error in enableRanking(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ranking_Accessor;
}

uci::type::OpZoneFilterAreaPET& OpZoneFilterAreaPET::clearRanking() noexcept {
  ranking_Accessor.reset();
  return *this;
}

std::unique_ptr<OpZoneFilterAreaPET> OpZoneFilterAreaPET::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneFilterAreaPET : type};
  return std::unique_ptr<OpZoneFilterAreaPET>(dynamic_cast<OpZoneFilterAreaPET*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OpZoneFilterAreaPET_Names {

constexpr const char* Extern_Type_Name{"OpZoneFilterAreaPET"};
constexpr const char* FilterType_Name{"FilterType"};
constexpr const char* Ranking_Name{"Ranking"};

} // namespace OpZoneFilterAreaPET_Names

void OpZoneFilterAreaPET::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpZoneFilterAreaPET& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpZoneFilterAreaPET_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpZoneFilterAreaPET_Names::FilterType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getFilterType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpZoneFilterAreaPET_Names::Ranking_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.enableRanking(), nodeName, nsPrefix);
    }
  }
}

std::string OpZoneFilterAreaPET::serialize(const uci::type::OpZoneFilterAreaPET& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpZoneFilterAreaPET_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::opZoneFilterAreaPET)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpZoneFilterAreaPET_Names::Extern_Type_Name);
    }
    OpZoneFilterEnum::serialize(accessor.getFilterType(), node, OpZoneFilterAreaPET_Names::FilterType_Name, false);
    if (accessor.hasRanking()) {
      ComparableRankingType::serialize(accessor.getRanking(), node, OpZoneFilterAreaPET_Names::Ranking_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

