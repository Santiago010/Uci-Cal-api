/** @file StrikeCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StrikeCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AO_CodeType.h"
#include "../../../include/asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "../../../include/asb_uci/type/StoreInformationType.h"
#include "../../../include/asb_uci/type/StoreType.h"
#include "../../../include/asb_uci/type/StoreVerificationStatusType.h"
#include "../../../include/asb_uci/type/StrikeCapabilityOptionsType.h"
#include "../../../include/asb_uci/type/StrikeMessageOutputsEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_CodeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreVerificationStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeCapabilityOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeMessageOutputsEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrikeCapabilityType::StrikeCapabilityType()
  : capabilityType_Accessor{boost::make_unique<StoreType>()},
    capabilityOptions_Accessor{boost::make_unique<StrikeCapabilityOptionsType>()},
    supportedCode_Accessor{boost::make_unique<SupportedCode>(0, SIZE_MAX)} {
}

StrikeCapabilityType::~StrikeCapabilityType() = default;

void StrikeCapabilityType::copy(const uci::type::StrikeCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void StrikeCapabilityType::copyImpl(const uci::type::StrikeCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandableCapabilityDeclarationType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const StrikeCapabilityType&>(accessor);
    setCapabilityType(*(accessorImpl.capabilityType_Accessor));
    setCapabilityOptions(*(accessorImpl.capabilityOptions_Accessor));
    setSupportedCode(*(accessorImpl.supportedCode_Accessor));
    if (accessorImpl.messageOutput_Accessor) {
      setMessageOutput(*(accessorImpl.messageOutput_Accessor));
    } else {
      messageOutput_Accessor.reset();
    }
    if (accessorImpl.storeInformation_Accessor) {
      setStoreInformation(*(accessorImpl.storeInformation_Accessor));
    } else {
      storeInformation_Accessor.reset();
    }
    if (accessorImpl.verification_Accessor) {
      setVerification(*(accessorImpl.verification_Accessor));
    } else {
      verification_Accessor.reset();
    }
  }
}

void StrikeCapabilityType::reset() noexcept {
  CommandableCapabilityDeclarationType::reset();
  if (capabilityType_Accessor->getAccessorType() != uci::type::accessorType::storeType) {
    capabilityType_Accessor = boost::make_unique<StoreType>();
  } else {
    capabilityType_Accessor->reset();
  }
  capabilityOptions_Accessor->reset();
  supportedCode_Accessor->reset();
  messageOutput_Accessor.reset();
  storeInformation_Accessor.reset();
  verification_Accessor.reset();
}

const uci::type::StoreType& StrikeCapabilityType::getCapabilityType() const {
  return *capabilityType_Accessor;
}

uci::type::StoreType& StrikeCapabilityType::getCapabilityType() {
  return *capabilityType_Accessor;
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::setCapabilityType(const uci::type::StoreType& accessor) {
  enableCapabilityType(accessor.getAccessorType());
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::StoreType& StrikeCapabilityType::enableCapabilityType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeType : type};
  if ((!capabilityType_Accessor) || (capabilityType_Accessor->getAccessorType() != requestedType)) {
    capabilityType_Accessor = StoreType::create(requestedType);
    if (!capabilityType_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityType_Accessor;
}

const uci::type::StrikeCapabilityOptionsType& StrikeCapabilityType::getCapabilityOptions() const {
  return *capabilityOptions_Accessor;
}

uci::type::StrikeCapabilityOptionsType& StrikeCapabilityType::getCapabilityOptions() {
  return *capabilityOptions_Accessor;
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::setCapabilityOptions(const uci::type::StrikeCapabilityOptionsType& accessor) {
  if (&accessor != capabilityOptions_Accessor.get()) {
    capabilityOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::StrikeCapabilityType::SupportedCode& StrikeCapabilityType::getSupportedCode() const {
  return *supportedCode_Accessor;
}

uci::type::StrikeCapabilityType::SupportedCode& StrikeCapabilityType::getSupportedCode() {
  return *supportedCode_Accessor;
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::setSupportedCode(const uci::type::StrikeCapabilityType::SupportedCode& accessor) {
  if (&accessor != supportedCode_Accessor.get()) {
    supportedCode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StrikeMessageOutputsEnum& StrikeCapabilityType::getMessageOutput_() const {
  if (messageOutput_Accessor) {
    return *messageOutput_Accessor;
  }
  throw uci::base::UCIException("Error in getMessageOutput(): An attempt was made to get an optional field that was not enabled, call hasMessageOutput() to determine if it is safe to call getMessageOutput()");
}

const uci::type::StrikeMessageOutputsEnum& StrikeCapabilityType::getMessageOutput() const {
  return getMessageOutput_();
}

uci::type::StrikeMessageOutputsEnum& StrikeCapabilityType::getMessageOutput() {
  return getMessageOutput_();
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::setMessageOutput(const uci::type::StrikeMessageOutputsEnum& accessor) {
  enableMessageOutput();
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::setMessageOutput(const uci::type::StrikeMessageOutputsEnum::EnumerationItem value) {
  enableMessageOutput().setValue(value);
  return *this;
}

bool StrikeCapabilityType::hasMessageOutput() const noexcept {
  return static_cast<bool>(messageOutput_Accessor);
}

uci::type::StrikeMessageOutputsEnum& StrikeCapabilityType::enableMessageOutput(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeMessageOutputsEnum : type};
  if ((!messageOutput_Accessor) || (messageOutput_Accessor->getAccessorType() != requestedType)) {
    messageOutput_Accessor = StrikeMessageOutputsEnum::create(requestedType);
    if (!messageOutput_Accessor) {
      throw uci::base::UCIException("Error in enableMessageOutput(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *messageOutput_Accessor;
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::clearMessageOutput() noexcept {
  messageOutput_Accessor.reset();
  return *this;
}

uci::type::StoreInformationType& StrikeCapabilityType::getStoreInformation_() const {
  if (storeInformation_Accessor) {
    return *storeInformation_Accessor;
  }
  throw uci::base::UCIException("Error in getStoreInformation(): An attempt was made to get an optional field that was not enabled, call hasStoreInformation() to determine if it is safe to call getStoreInformation()");
}

const uci::type::StoreInformationType& StrikeCapabilityType::getStoreInformation() const {
  return getStoreInformation_();
}

uci::type::StoreInformationType& StrikeCapabilityType::getStoreInformation() {
  return getStoreInformation_();
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::setStoreInformation(const uci::type::StoreInformationType& accessor) {
  enableStoreInformation();
  if (&accessor != storeInformation_Accessor.get()) {
    storeInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeCapabilityType::hasStoreInformation() const noexcept {
  return static_cast<bool>(storeInformation_Accessor);
}

uci::type::StoreInformationType& StrikeCapabilityType::enableStoreInformation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeInformationType : type};
  if ((!storeInformation_Accessor) || (storeInformation_Accessor->getAccessorType() != requestedType)) {
    storeInformation_Accessor = StoreInformationType::create(requestedType);
    if (!storeInformation_Accessor) {
      throw uci::base::UCIException("Error in enableStoreInformation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *storeInformation_Accessor;
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::clearStoreInformation() noexcept {
  storeInformation_Accessor.reset();
  return *this;
}

uci::type::StoreVerificationStatusType& StrikeCapabilityType::getVerification_() const {
  if (verification_Accessor) {
    return *verification_Accessor;
  }
  throw uci::base::UCIException("Error in getVerification(): An attempt was made to get an optional field that was not enabled, call hasVerification() to determine if it is safe to call getVerification()");
}

const uci::type::StoreVerificationStatusType& StrikeCapabilityType::getVerification() const {
  return getVerification_();
}

uci::type::StoreVerificationStatusType& StrikeCapabilityType::getVerification() {
  return getVerification_();
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::setVerification(const uci::type::StoreVerificationStatusType& accessor) {
  enableVerification();
  if (&accessor != verification_Accessor.get()) {
    verification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeCapabilityType::hasVerification() const noexcept {
  return static_cast<bool>(verification_Accessor);
}

uci::type::StoreVerificationStatusType& StrikeCapabilityType::enableVerification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeVerificationStatusType : type};
  if ((!verification_Accessor) || (verification_Accessor->getAccessorType() != requestedType)) {
    verification_Accessor = StoreVerificationStatusType::create(requestedType);
    if (!verification_Accessor) {
      throw uci::base::UCIException("Error in enableVerification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *verification_Accessor;
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::clearVerification() noexcept {
  verification_Accessor.reset();
  return *this;
}

std::unique_ptr<StrikeCapabilityType> StrikeCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeCapabilityType : type};
  return (requestedType == uci::type::accessorType::strikeCapabilityType) ? boost::make_unique<StrikeCapabilityType>() : nullptr;
}

/**  */
namespace StrikeCapabilityType_Names {

constexpr const char* Extern_Type_Name{"StrikeCapabilityType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* CapabilityOptions_Name{"CapabilityOptions"};
constexpr const char* SupportedCode_Name{"SupportedCode"};
constexpr const char* MessageOutput_Name{"MessageOutput"};
constexpr const char* StoreInformation_Name{"StoreInformation"};
constexpr const char* Verification_Name{"Verification"};

} // namespace StrikeCapabilityType_Names

void StrikeCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeCapabilityType_Names::CapabilityType_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCapabilityType(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeCapabilityType_Names::CapabilityOptions_Name) {
      StrikeCapabilityOptionsType::deserialize(valueType.second, accessor.getCapabilityOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeCapabilityType_Names::SupportedCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::StrikeCapabilityType::SupportedCode& boundedList = accessor.getSupportedCode();
        const uci::type::StrikeCapabilityType::SupportedCode::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AO_CodeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + StrikeCapabilityType_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMessageOutput().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + StrikeCapabilityType_Names::StoreInformation_Name) {
      StoreInformationType::deserialize(valueType.second, accessor.enableStoreInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeCapabilityType_Names::Verification_Name) {
      StoreVerificationStatusType::deserialize(valueType.second, accessor.enableVerification(), nodeName, nsPrefix);
    }
  }
  CommandableCapabilityDeclarationType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string StrikeCapabilityType::serialize(const uci::type::StrikeCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrikeCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeCapabilityType_Names::Extern_Type_Name);
  }
  CommandableCapabilityDeclarationType::serialize(accessor, node, "", false, false, false);
  StoreType::serialize(accessor.getCapabilityType(), node, StrikeCapabilityType_Names::CapabilityType_Name);
  StrikeCapabilityOptionsType::serialize(accessor.getCapabilityOptions(), node, StrikeCapabilityType_Names::CapabilityOptions_Name);
  {
    const uci::type::StrikeCapabilityType::SupportedCode& boundedList = accessor.getSupportedCode();
    for (uci::type::StrikeCapabilityType::SupportedCode::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AO_CodeType::serialize(boundedList.at(i), node, StrikeCapabilityType_Names::SupportedCode_Name);
    }
  }
  if (accessor.hasMessageOutput()) {
    StrikeMessageOutputsEnum::serialize(accessor.getMessageOutput(), node, StrikeCapabilityType_Names::MessageOutput_Name, false);
  }
  if (accessor.hasStoreInformation()) {
    StoreInformationType::serialize(accessor.getStoreInformation(), node, StrikeCapabilityType_Names::StoreInformation_Name);
  }
  if (accessor.hasVerification()) {
    StoreVerificationStatusType::serialize(accessor.getVerification(), node, StrikeCapabilityType_Names::Verification_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrikeCapabilityType& StrikeCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrikeCapabilityType>().release());
}

uci::type::StrikeCapabilityType& StrikeCapabilityType::create(const uci::type::StrikeCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrikeCapabilityType> newAccessor{boost::make_unique<asb_uci::type::StrikeCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrikeCapabilityType::destroy(uci::type::StrikeCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::StrikeCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

