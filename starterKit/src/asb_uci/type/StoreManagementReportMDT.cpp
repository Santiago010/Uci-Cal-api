/** @file StoreManagementReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StoreManagementReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/LAR_CalculationWindType.h"
#include "asb_uci/type/StoreManagementReportID_Type.h"
#include "asb_uci/type/StoreType.h"
#include "asb_uci/type/SupportCapabilityID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/LAR_CalculationWindType.h"
#include "uci/type/StoreManagementReportID_Type.h"
#include "uci/type/StoreManagementReportMDT.h"
#include "uci/type/StoreType.h"
#include "uci/type/SupportCapabilityID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StoreManagementReportMDT::StoreManagementReportMDT()
  : storeManagementReportID_Accessor{boost::make_unique<StoreManagementReportID_Type>()},
    supportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID_Type>()} {
}

StoreManagementReportMDT::~StoreManagementReportMDT() = default;

void StoreManagementReportMDT::copy(const uci::type::StoreManagementReportMDT& accessor) {
  copyImpl(accessor, false);
}

void StoreManagementReportMDT::copyImpl(const uci::type::StoreManagementReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StoreManagementReportMDT&>(accessor);
    setStoreManagementReportID(*(accessorImpl.storeManagementReportID_Accessor));
    setSupportCapabilityID(*(accessorImpl.supportCapabilityID_Accessor));
    setMasterArm(accessorImpl.masterArm_Accessor);
    setReleaseConsent(accessorImpl.releaseConsent_Accessor);
    setLAR_ConstraintsEnforced(accessorImpl.lAR_ConstraintsEnforced_Accessor);
    setAttitudeConstraintsEnforced(accessorImpl.attitudeConstraintsEnforced_Accessor);
    if (accessorImpl.currentStoreStation_Accessor) {
      setCurrentStoreStation(*(accessorImpl.currentStoreStation_Accessor));
    } else {
      currentStoreStation_Accessor.reset();
    }
    if (accessorImpl.selectedStoreType_Accessor) {
      setSelectedStoreType(*(accessorImpl.selectedStoreType_Accessor));
    } else {
      selectedStoreType_Accessor.reset();
    }
    if (accessorImpl.lAR_CalculationWind_Accessor) {
      setLAR_CalculationWind(*(accessorImpl.lAR_CalculationWind_Accessor));
    } else {
      lAR_CalculationWind_Accessor.reset();
    }
  }
}

void StoreManagementReportMDT::reset() noexcept {
  storeManagementReportID_Accessor->reset();
  supportCapabilityID_Accessor->reset();
  masterArm_Accessor = false;
  releaseConsent_Accessor = false;
  lAR_ConstraintsEnforced_Accessor = false;
  attitudeConstraintsEnforced_Accessor = false;
  currentStoreStation_Accessor.reset();
  selectedStoreType_Accessor.reset();
  lAR_CalculationWind_Accessor.reset();
}

const uci::type::StoreManagementReportID_Type& StoreManagementReportMDT::getStoreManagementReportID() const {
  return *storeManagementReportID_Accessor;
}

uci::type::StoreManagementReportID_Type& StoreManagementReportMDT::getStoreManagementReportID() {
  return *storeManagementReportID_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setStoreManagementReportID(const uci::type::StoreManagementReportID_Type& accessor) {
  if (&accessor != storeManagementReportID_Accessor.get()) {
    storeManagementReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SupportCapabilityID_Type& StoreManagementReportMDT::getSupportCapabilityID() const {
  return *supportCapabilityID_Accessor;
}

uci::type::SupportCapabilityID_Type& StoreManagementReportMDT::getSupportCapabilityID() {
  return *supportCapabilityID_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setSupportCapabilityID(const uci::type::SupportCapabilityID_Type& accessor) {
  if (&accessor != supportCapabilityID_Accessor.get()) {
    supportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean StoreManagementReportMDT::getMasterArm() const {
  return masterArm_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setMasterArm(xs::Boolean value) {
  masterArm_Accessor = value;
  return *this;
}


xs::Boolean StoreManagementReportMDT::getReleaseConsent() const {
  return releaseConsent_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setReleaseConsent(xs::Boolean value) {
  releaseConsent_Accessor = value;
  return *this;
}


xs::Boolean StoreManagementReportMDT::getLAR_ConstraintsEnforced() const {
  return lAR_ConstraintsEnforced_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setLAR_ConstraintsEnforced(xs::Boolean value) {
  lAR_ConstraintsEnforced_Accessor = value;
  return *this;
}


xs::Boolean StoreManagementReportMDT::getAttitudeConstraintsEnforced() const {
  return attitudeConstraintsEnforced_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setAttitudeConstraintsEnforced(xs::Boolean value) {
  attitudeConstraintsEnforced_Accessor = value;
  return *this;
}


uci::type::ForeignKeyType& StoreManagementReportMDT::getCurrentStoreStation_() const {
  if (currentStoreStation_Accessor) {
    return *currentStoreStation_Accessor;
  }
  throw uci::base::UCIException("Error in getCurrentStoreStation(): An attempt was made to get an optional field that was not enabled, call hasCurrentStoreStation() to determine if it is safe to call getCurrentStoreStation()");
}

const uci::type::ForeignKeyType& StoreManagementReportMDT::getCurrentStoreStation() const {
  return getCurrentStoreStation_();
}

uci::type::ForeignKeyType& StoreManagementReportMDT::getCurrentStoreStation() {
  return getCurrentStoreStation_();
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setCurrentStoreStation(const uci::type::ForeignKeyType& accessor) {
  enableCurrentStoreStation(accessor.getAccessorType());
  if (&accessor != currentStoreStation_Accessor.get()) {
    currentStoreStation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StoreManagementReportMDT::hasCurrentStoreStation() const noexcept {
  return static_cast<bool>(currentStoreStation_Accessor);
}

uci::type::ForeignKeyType& StoreManagementReportMDT::enableCurrentStoreStation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!currentStoreStation_Accessor) || (currentStoreStation_Accessor->getAccessorType() != requestedType)) {
    currentStoreStation_Accessor = ForeignKeyType::create(requestedType);
    if (!currentStoreStation_Accessor) {
      throw uci::base::UCIException("Error in enableCurrentStoreStation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *currentStoreStation_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::clearCurrentStoreStation() noexcept {
  currentStoreStation_Accessor.reset();
  return *this;
}

uci::type::StoreType& StoreManagementReportMDT::getSelectedStoreType_() const {
  if (selectedStoreType_Accessor) {
    return *selectedStoreType_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectedStoreType(): An attempt was made to get an optional field that was not enabled, call hasSelectedStoreType() to determine if it is safe to call getSelectedStoreType()");
}

const uci::type::StoreType& StoreManagementReportMDT::getSelectedStoreType() const {
  return getSelectedStoreType_();
}

uci::type::StoreType& StoreManagementReportMDT::getSelectedStoreType() {
  return getSelectedStoreType_();
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setSelectedStoreType(const uci::type::StoreType& accessor) {
  enableSelectedStoreType(accessor.getAccessorType());
  if (&accessor != selectedStoreType_Accessor.get()) {
    selectedStoreType_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StoreManagementReportMDT::hasSelectedStoreType() const noexcept {
  return static_cast<bool>(selectedStoreType_Accessor);
}

uci::type::StoreType& StoreManagementReportMDT::enableSelectedStoreType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeType : type};
  if ((!selectedStoreType_Accessor) || (selectedStoreType_Accessor->getAccessorType() != requestedType)) {
    selectedStoreType_Accessor = StoreType::create(requestedType);
    if (!selectedStoreType_Accessor) {
      throw uci::base::UCIException("Error in enableSelectedStoreType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *selectedStoreType_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::clearSelectedStoreType() noexcept {
  selectedStoreType_Accessor.reset();
  return *this;
}

uci::type::LAR_CalculationWindType& StoreManagementReportMDT::getLAR_CalculationWind_() const {
  if (lAR_CalculationWind_Accessor) {
    return *lAR_CalculationWind_Accessor;
  }
  throw uci::base::UCIException("Error in getLAR_CalculationWind(): An attempt was made to get an optional field that was not enabled, call hasLAR_CalculationWind() to determine if it is safe to call getLAR_CalculationWind()");
}

const uci::type::LAR_CalculationWindType& StoreManagementReportMDT::getLAR_CalculationWind() const {
  return getLAR_CalculationWind_();
}

uci::type::LAR_CalculationWindType& StoreManagementReportMDT::getLAR_CalculationWind() {
  return getLAR_CalculationWind_();
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::setLAR_CalculationWind(const uci::type::LAR_CalculationWindType& accessor) {
  enableLAR_CalculationWind();
  if (&accessor != lAR_CalculationWind_Accessor.get()) {
    lAR_CalculationWind_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StoreManagementReportMDT::hasLAR_CalculationWind() const noexcept {
  return static_cast<bool>(lAR_CalculationWind_Accessor);
}

uci::type::LAR_CalculationWindType& StoreManagementReportMDT::enableLAR_CalculationWind(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lAR_CalculationWindType : type};
  if ((!lAR_CalculationWind_Accessor) || (lAR_CalculationWind_Accessor->getAccessorType() != requestedType)) {
    lAR_CalculationWind_Accessor = LAR_CalculationWindType::create(requestedType);
    if (!lAR_CalculationWind_Accessor) {
      throw uci::base::UCIException("Error in enableLAR_CalculationWind(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lAR_CalculationWind_Accessor;
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::clearLAR_CalculationWind() noexcept {
  lAR_CalculationWind_Accessor.reset();
  return *this;
}

std::unique_ptr<StoreManagementReportMDT> StoreManagementReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeManagementReportMDT : type};
  return (requestedType == uci::type::accessorType::storeManagementReportMDT) ? boost::make_unique<StoreManagementReportMDT>() : nullptr;
}

/**  */
namespace StoreManagementReportMDT_Names {

constexpr const char* Extern_Type_Name{"StoreManagementReportMDT"};
constexpr const char* StoreManagementReportID_Name{"StoreManagementReportID"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* MasterArm_Name{"MasterArm"};
constexpr const char* ReleaseConsent_Name{"ReleaseConsent"};
constexpr const char* LAR_ConstraintsEnforced_Name{"LAR_ConstraintsEnforced"};
constexpr const char* AttitudeConstraintsEnforced_Name{"AttitudeConstraintsEnforced"};
constexpr const char* CurrentStoreStation_Name{"CurrentStoreStation"};
constexpr const char* SelectedStoreType_Name{"SelectedStoreType"};
constexpr const char* LAR_CalculationWind_Name{"LAR_CalculationWind"};

} // namespace StoreManagementReportMDT_Names

void StoreManagementReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::StoreManagementReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StoreManagementReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::StoreManagementReportID_Name) {
      StoreManagementReportID_Type::deserialize(valueType.second, accessor.getStoreManagementReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.getSupportCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::MasterArm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMasterArm(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::ReleaseConsent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReleaseConsent(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::LAR_ConstraintsEnforced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLAR_ConstraintsEnforced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::AttitudeConstraintsEnforced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttitudeConstraintsEnforced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::CurrentStoreStation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCurrentStoreStation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::SelectedStoreType_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSelectedStoreType(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreManagementReportMDT_Names::LAR_CalculationWind_Name) {
      LAR_CalculationWindType::deserialize(valueType.second, accessor.enableLAR_CalculationWind(), nodeName, nsPrefix);
    }
  }
}

std::string StoreManagementReportMDT::serialize(const uci::type::StoreManagementReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StoreManagementReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StoreManagementReportMDT_Names::Extern_Type_Name);
  }
  StoreManagementReportID_Type::serialize(accessor.getStoreManagementReportID(), node, StoreManagementReportMDT_Names::StoreManagementReportID_Name);
  SupportCapabilityID_Type::serialize(accessor.getSupportCapabilityID(), node, StoreManagementReportMDT_Names::SupportCapabilityID_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getMasterArm(), node, StoreManagementReportMDT_Names::MasterArm_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getReleaseConsent(), node, StoreManagementReportMDT_Names::ReleaseConsent_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLAR_ConstraintsEnforced(), node, StoreManagementReportMDT_Names::LAR_ConstraintsEnforced_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAttitudeConstraintsEnforced(), node, StoreManagementReportMDT_Names::AttitudeConstraintsEnforced_Name);
  if (accessor.hasCurrentStoreStation()) {
    ForeignKeyType::serialize(accessor.getCurrentStoreStation(), node, StoreManagementReportMDT_Names::CurrentStoreStation_Name);
  }
  if (accessor.hasSelectedStoreType()) {
    StoreType::serialize(accessor.getSelectedStoreType(), node, StoreManagementReportMDT_Names::SelectedStoreType_Name);
  }
  if (accessor.hasLAR_CalculationWind()) {
    LAR_CalculationWindType::serialize(accessor.getLAR_CalculationWind(), node, StoreManagementReportMDT_Names::LAR_CalculationWind_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StoreManagementReportMDT>().release());
}

uci::type::StoreManagementReportMDT& StoreManagementReportMDT::create(const uci::type::StoreManagementReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StoreManagementReportMDT> newAccessor{boost::make_unique<asb_uci::type::StoreManagementReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StoreManagementReportMDT::destroy(uci::type::StoreManagementReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::StoreManagementReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

