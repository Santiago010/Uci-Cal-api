/** @file OrbitKinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitKinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitalEphemerisChoiceType.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/OrbitalVCM_Type.h"
#include "../../../include/asb_uci/type/TLE_BaseType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalEphemerisChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalVCM_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TLE_BaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitKinematicsType::OrbitKinematicsType() = default;

OrbitKinematicsType::~OrbitKinematicsType() = default;

void OrbitKinematicsType::copy(const uci::type::OrbitKinematicsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitKinematicsType::copyImpl(const uci::type::OrbitKinematicsType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitKinematicsType)) {
      const auto& accessorImpl = dynamic_cast<const OrbitKinematicsType&>(accessor);
      if (accessorImpl.elementSet_Accessor) {
        setElementSet(*(accessorImpl.elementSet_Accessor));
      } else {
        elementSet_Accessor.reset();
      }
      if (accessorImpl.ephemeris_Accessor) {
        setEphemeris(*(accessorImpl.ephemeris_Accessor));
      } else {
        ephemeris_Accessor.reset();
      }
      if (accessorImpl.vCM_Accessor) {
        setVCM(*(accessorImpl.vCM_Accessor));
      } else {
        vCM_Accessor.reset();
      }
      if (accessorImpl.singleVector_Accessor) {
        setSingleVector(*(accessorImpl.singleVector_Accessor));
      } else {
        singleVector_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OrbitKinematicsType::reset() noexcept {
  elementSet_Accessor.reset();
  ephemeris_Accessor.reset();
  vCM_Accessor.reset();
  singleVector_Accessor.reset();
}

uci::type::TLE_BaseType& OrbitKinematicsType::getElementSet_() const {
  if (elementSet_Accessor) {
    return *elementSet_Accessor;
  }
  throw uci::base::UCIException("Error in getElementSet(): An attempt was made to get an optional field that was not enabled, call hasElementSet() to determine if it is safe to call getElementSet()");
}

const uci::type::TLE_BaseType& OrbitKinematicsType::getElementSet() const {
  return getElementSet_();
}

uci::type::TLE_BaseType& OrbitKinematicsType::getElementSet() {
  return getElementSet_();
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::setElementSet(const uci::type::TLE_BaseType& accessor) {
  enableElementSet(accessor.getAccessorType());
  if (&accessor != elementSet_Accessor.get()) {
    elementSet_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitKinematicsType::hasElementSet() const noexcept {
  return static_cast<bool>(elementSet_Accessor);
}

uci::type::TLE_BaseType& OrbitKinematicsType::enableElementSet(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tLE_BaseType : type};
  if ((!elementSet_Accessor) || (elementSet_Accessor->getAccessorType() != requestedType)) {
    elementSet_Accessor = TLE_BaseType::create(requestedType);
    if (!elementSet_Accessor) {
      throw uci::base::UCIException("Error in enableElementSet(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elementSet_Accessor;
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::clearElementSet() noexcept {
  elementSet_Accessor.reset();
  return *this;
}

uci::type::OrbitalEphemerisChoiceType& OrbitKinematicsType::getEphemeris_() const {
  if (ephemeris_Accessor) {
    return *ephemeris_Accessor;
  }
  throw uci::base::UCIException("Error in getEphemeris(): An attempt was made to get an optional field that was not enabled, call hasEphemeris() to determine if it is safe to call getEphemeris()");
}

const uci::type::OrbitalEphemerisChoiceType& OrbitKinematicsType::getEphemeris() const {
  return getEphemeris_();
}

uci::type::OrbitalEphemerisChoiceType& OrbitKinematicsType::getEphemeris() {
  return getEphemeris_();
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::setEphemeris(const uci::type::OrbitalEphemerisChoiceType& accessor) {
  enableEphemeris();
  if (&accessor != ephemeris_Accessor.get()) {
    ephemeris_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsType::hasEphemeris() const noexcept {
  return static_cast<bool>(ephemeris_Accessor);
}

uci::type::OrbitalEphemerisChoiceType& OrbitKinematicsType::enableEphemeris(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalEphemerisChoiceType : type};
  if ((!ephemeris_Accessor) || (ephemeris_Accessor->getAccessorType() != requestedType)) {
    ephemeris_Accessor = OrbitalEphemerisChoiceType::create(requestedType);
    if (!ephemeris_Accessor) {
      throw uci::base::UCIException("Error in enableEphemeris(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ephemeris_Accessor;
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::clearEphemeris() noexcept {
  ephemeris_Accessor.reset();
  return *this;
}

uci::type::OrbitalVCM_Type& OrbitKinematicsType::getVCM_() const {
  if (vCM_Accessor) {
    return *vCM_Accessor;
  }
  throw uci::base::UCIException("Error in getVCM(): An attempt was made to get an optional field that was not enabled, call hasVCM() to determine if it is safe to call getVCM()");
}

const uci::type::OrbitalVCM_Type& OrbitKinematicsType::getVCM() const {
  return getVCM_();
}

uci::type::OrbitalVCM_Type& OrbitKinematicsType::getVCM() {
  return getVCM_();
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::setVCM(const uci::type::OrbitalVCM_Type& accessor) {
  enableVCM();
  if (&accessor != vCM_Accessor.get()) {
    vCM_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsType::hasVCM() const noexcept {
  return static_cast<bool>(vCM_Accessor);
}

uci::type::OrbitalVCM_Type& OrbitKinematicsType::enableVCM(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalVCM_Type : type};
  if ((!vCM_Accessor) || (vCM_Accessor->getAccessorType() != requestedType)) {
    vCM_Accessor = OrbitalVCM_Type::create(requestedType);
    if (!vCM_Accessor) {
      throw uci::base::UCIException("Error in enableVCM(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vCM_Accessor;
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::clearVCM() noexcept {
  vCM_Accessor.reset();
  return *this;
}

uci::type::OrbitalKinematicsChoiceType& OrbitKinematicsType::getSingleVector_() const {
  if (singleVector_Accessor) {
    return *singleVector_Accessor;
  }
  throw uci::base::UCIException("Error in getSingleVector(): An attempt was made to get an optional field that was not enabled, call hasSingleVector() to determine if it is safe to call getSingleVector()");
}

const uci::type::OrbitalKinematicsChoiceType& OrbitKinematicsType::getSingleVector() const {
  return getSingleVector_();
}

uci::type::OrbitalKinematicsChoiceType& OrbitKinematicsType::getSingleVector() {
  return getSingleVector_();
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::setSingleVector(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  enableSingleVector();
  if (&accessor != singleVector_Accessor.get()) {
    singleVector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsType::hasSingleVector() const noexcept {
  return static_cast<bool>(singleVector_Accessor);
}

uci::type::OrbitalKinematicsChoiceType& OrbitKinematicsType::enableSingleVector(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsChoiceType : type};
  if ((!singleVector_Accessor) || (singleVector_Accessor->getAccessorType() != requestedType)) {
    singleVector_Accessor = OrbitalKinematicsChoiceType::create(requestedType);
    if (!singleVector_Accessor) {
      throw uci::base::UCIException("Error in enableSingleVector(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *singleVector_Accessor;
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::clearSingleVector() noexcept {
  singleVector_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitKinematicsType> OrbitKinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsType : type};
  return std::unique_ptr<OrbitKinematicsType>(dynamic_cast<OrbitKinematicsType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OrbitKinematicsType_Names {

constexpr const char* Extern_Type_Name{"OrbitKinematicsType"};
constexpr const char* ElementSet_Name{"ElementSet"};
constexpr const char* Ephemeris_Name{"Ephemeris"};
constexpr const char* VCM_Name{"VCM"};
constexpr const char* SingleVector_Name{"SingleVector"};

} // namespace OrbitKinematicsType_Names

void OrbitKinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitKinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitKinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitKinematicsType_Names::ElementSet_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableElementSet(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsType_Names::Ephemeris_Name) {
      OrbitalEphemerisChoiceType::deserialize(valueType.second, accessor.enableEphemeris(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsType_Names::VCM_Name) {
      OrbitalVCM_Type::deserialize(valueType.second, accessor.enableVCM(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsType_Names::SingleVector_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableSingleVector(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitKinematicsType::serialize(const uci::type::OrbitKinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitKinematicsType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitKinematicsType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitKinematicsType_Names::Extern_Type_Name);
    }
    if (accessor.hasElementSet()) {
      TLE_BaseType::serialize(accessor.getElementSet(), node, OrbitKinematicsType_Names::ElementSet_Name);
    }
    if (accessor.hasEphemeris()) {
      OrbitalEphemerisChoiceType::serialize(accessor.getEphemeris(), node, OrbitKinematicsType_Names::Ephemeris_Name);
    }
    if (accessor.hasVCM()) {
      OrbitalVCM_Type::serialize(accessor.getVCM(), node, OrbitKinematicsType_Names::VCM_Name);
    }
    if (accessor.hasSingleVector()) {
      OrbitalKinematicsChoiceType::serialize(accessor.getSingleVector(), node, OrbitKinematicsType_Names::SingleVector_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitKinematicsType& OrbitKinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitKinematicsType>().release());
}

uci::type::OrbitKinematicsType& OrbitKinematicsType::create(const uci::type::OrbitKinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitKinematicsType> newAccessor{boost::make_unique<asb_uci::type::OrbitKinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitKinematicsType::destroy(uci::type::OrbitKinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitKinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

