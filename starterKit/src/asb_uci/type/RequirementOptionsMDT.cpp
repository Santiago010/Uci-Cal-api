/** @file RequirementOptionsMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementOptionsMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DuplicateRequirementType.h"
#include "asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "asb_uci/type/RequirementOptionsID_Type.h"
#include "asb_uci/type/RequirementOptionsInputsType.h"
#include "asb_uci/type/RequirementOptionsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DuplicateRequirementType.h"
#include "uci/type/RequirementInstanceID_ChoiceType.h"
#include "uci/type/RequirementOptionsID_Type.h"
#include "uci/type/RequirementOptionsInputsType.h"
#include "uci/type/RequirementOptionsMDT.h"
#include "uci/type/RequirementOptionsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementOptionsMDT::RequirementOptionsMDT()
  : optionsID_Accessor{boost::make_unique<RequirementOptionsID_Type>()},
    inputs_Accessor{boost::make_unique<RequirementOptionsInputsType>()},
    systemOption_Accessor{boost::make_unique<SystemOption>(1, SIZE_MAX)},
    optionlessRequirement_Accessor{boost::make_unique<OptionlessRequirement>(0, SIZE_MAX)},
    duplicatedRequirement_Accessor{boost::make_unique<DuplicatedRequirement>(0, SIZE_MAX)} {
}

RequirementOptionsMDT::~RequirementOptionsMDT() = default;

void RequirementOptionsMDT::copy(const uci::type::RequirementOptionsMDT& accessor) {
  copyImpl(accessor, false);
}

void RequirementOptionsMDT::copyImpl(const uci::type::RequirementOptionsMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementOptionsMDT&>(accessor);
    setOptionsID(*(accessorImpl.optionsID_Accessor));
    setInputs(*(accessorImpl.inputs_Accessor));
    setSystemOption(*(accessorImpl.systemOption_Accessor));
    setOptionlessRequirement(*(accessorImpl.optionlessRequirement_Accessor));
    setDuplicatedRequirement(*(accessorImpl.duplicatedRequirement_Accessor));
  }
}

void RequirementOptionsMDT::reset() noexcept {
  optionsID_Accessor->reset();
  inputs_Accessor->reset();
  systemOption_Accessor->reset();
  optionlessRequirement_Accessor->reset();
  duplicatedRequirement_Accessor->reset();
}

const uci::type::RequirementOptionsID_Type& RequirementOptionsMDT::getOptionsID() const {
  return *optionsID_Accessor;
}

uci::type::RequirementOptionsID_Type& RequirementOptionsMDT::getOptionsID() {
  return *optionsID_Accessor;
}

uci::type::RequirementOptionsMDT& RequirementOptionsMDT::setOptionsID(const uci::type::RequirementOptionsID_Type& accessor) {
  if (&accessor != optionsID_Accessor.get()) {
    optionsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementOptionsInputsType& RequirementOptionsMDT::getInputs() const {
  return *inputs_Accessor;
}

uci::type::RequirementOptionsInputsType& RequirementOptionsMDT::getInputs() {
  return *inputs_Accessor;
}

uci::type::RequirementOptionsMDT& RequirementOptionsMDT::setInputs(const uci::type::RequirementOptionsInputsType& accessor) {
  if (&accessor != inputs_Accessor.get()) {
    inputs_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementOptionsMDT::SystemOption& RequirementOptionsMDT::getSystemOption() const {
  return *systemOption_Accessor;
}

uci::type::RequirementOptionsMDT::SystemOption& RequirementOptionsMDT::getSystemOption() {
  return *systemOption_Accessor;
}

uci::type::RequirementOptionsMDT& RequirementOptionsMDT::setSystemOption(const uci::type::RequirementOptionsMDT::SystemOption& accessor) {
  if (&accessor != systemOption_Accessor.get()) {
    systemOption_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementOptionsMDT::OptionlessRequirement& RequirementOptionsMDT::getOptionlessRequirement() const {
  return *optionlessRequirement_Accessor;
}

uci::type::RequirementOptionsMDT::OptionlessRequirement& RequirementOptionsMDT::getOptionlessRequirement() {
  return *optionlessRequirement_Accessor;
}

uci::type::RequirementOptionsMDT& RequirementOptionsMDT::setOptionlessRequirement(const uci::type::RequirementOptionsMDT::OptionlessRequirement& accessor) {
  if (&accessor != optionlessRequirement_Accessor.get()) {
    optionlessRequirement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementOptionsMDT::DuplicatedRequirement& RequirementOptionsMDT::getDuplicatedRequirement() const {
  return *duplicatedRequirement_Accessor;
}

uci::type::RequirementOptionsMDT::DuplicatedRequirement& RequirementOptionsMDT::getDuplicatedRequirement() {
  return *duplicatedRequirement_Accessor;
}

uci::type::RequirementOptionsMDT& RequirementOptionsMDT::setDuplicatedRequirement(const uci::type::RequirementOptionsMDT::DuplicatedRequirement& accessor) {
  if (&accessor != duplicatedRequirement_Accessor.get()) {
    duplicatedRequirement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RequirementOptionsMDT> RequirementOptionsMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementOptionsMDT : type};
  return (requestedType == uci::type::accessorType::requirementOptionsMDT) ? boost::make_unique<RequirementOptionsMDT>() : nullptr;
}

/**  */
namespace RequirementOptionsMDT_Names {

constexpr const char* Extern_Type_Name{"RequirementOptionsMDT"};
constexpr const char* OptionsID_Name{"OptionsID"};
constexpr const char* Inputs_Name{"Inputs"};
constexpr const char* SystemOption_Name{"SystemOption"};
constexpr const char* OptionlessRequirement_Name{"OptionlessRequirement"};
constexpr const char* DuplicatedRequirement_Name{"DuplicatedRequirement"};

} // namespace RequirementOptionsMDT_Names

void RequirementOptionsMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementOptionsMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementOptionsMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementOptionsMDT_Names::OptionsID_Name) {
      RequirementOptionsID_Type::deserialize(valueType.second, accessor.getOptionsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementOptionsMDT_Names::Inputs_Name) {
      RequirementOptionsInputsType::deserialize(valueType.second, accessor.getInputs(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementOptionsMDT_Names::SystemOption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementOptionsMDT::SystemOption& boundedList = accessor.getSystemOption();
        const uci::type::RequirementOptionsMDT::SystemOption::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementOptionsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementOptionsMDT_Names::OptionlessRequirement_Name) {
      uci::type::RequirementOptionsMDT::OptionlessRequirement& boundedList = accessor.getOptionlessRequirement();
      const uci::type::RequirementOptionsMDT::OptionlessRequirement::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::RequirementInstanceID_ChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementOptionsMDT_Names::DuplicatedRequirement_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementOptionsMDT::DuplicatedRequirement& boundedList = accessor.getDuplicatedRequirement();
        const uci::type::RequirementOptionsMDT::DuplicatedRequirement::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DuplicateRequirementType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RequirementOptionsMDT::serialize(const uci::type::RequirementOptionsMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementOptionsMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementOptionsMDT_Names::Extern_Type_Name);
  }
  RequirementOptionsID_Type::serialize(accessor.getOptionsID(), node, RequirementOptionsMDT_Names::OptionsID_Name);
  RequirementOptionsInputsType::serialize(accessor.getInputs(), node, RequirementOptionsMDT_Names::Inputs_Name);
  {
    const uci::type::RequirementOptionsMDT::SystemOption& boundedList = accessor.getSystemOption();
    for (uci::type::RequirementOptionsMDT::SystemOption::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementOptionsType::serialize(boundedList.at(i), node, RequirementOptionsMDT_Names::SystemOption_Name);
    }
  }
  {
    const uci::type::RequirementOptionsMDT::OptionlessRequirement& boundedList = accessor.getOptionlessRequirement();
    for (uci::type::RequirementOptionsMDT::OptionlessRequirement::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementInstanceID_ChoiceType::serialize(boundedList.at(i), node, RequirementOptionsMDT_Names::OptionlessRequirement_Name);
    }
  }
  {
    const uci::type::RequirementOptionsMDT::DuplicatedRequirement& boundedList = accessor.getDuplicatedRequirement();
    for (uci::type::RequirementOptionsMDT::DuplicatedRequirement::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DuplicateRequirementType::serialize(boundedList.at(i), node, RequirementOptionsMDT_Names::DuplicatedRequirement_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementOptionsMDT& RequirementOptionsMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementOptionsMDT>().release());
}

uci::type::RequirementOptionsMDT& RequirementOptionsMDT::create(const uci::type::RequirementOptionsMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementOptionsMDT> newAccessor{boost::make_unique<asb_uci::type::RequirementOptionsMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementOptionsMDT::destroy(uci::type::RequirementOptionsMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementOptionsMDT*>(&accessor);
}

} // namespace type

} // namespace uci

