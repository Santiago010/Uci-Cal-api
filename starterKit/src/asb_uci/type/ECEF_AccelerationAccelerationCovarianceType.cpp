/** @file ECEF_AccelerationAccelerationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ECEF_AccelerationAccelerationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_AccelerationAccelerationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_AccelerationAccelerationCovarianceType::ECEF_AccelerationAccelerationCovarianceType() = default;

ECEF_AccelerationAccelerationCovarianceType::~ECEF_AccelerationAccelerationCovarianceType() = default;

void ECEF_AccelerationAccelerationCovarianceType::copy(const uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_AccelerationAccelerationCovarianceType::copyImpl(const uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_AccelerationAccelerationCovarianceType&>(accessor);
    setAxAx(accessorImpl.axAx_Accessor);
    setAxAy(accessorImpl.axAy_Accessor);
    setAxAz(accessorImpl.axAz_Accessor);
    setAyAy(accessorImpl.ayAy_Accessor);
    setAyAz(accessorImpl.ayAz_Accessor);
    setAzAz(accessorImpl.azAz_Accessor);
  }
}

void ECEF_AccelerationAccelerationCovarianceType::reset() noexcept {
  axAx_Accessor = 0.0;
  axAy_Accessor = 0.0;
  axAz_Accessor = 0.0;
  ayAy_Accessor = 0.0;
  ayAz_Accessor = 0.0;
  azAz_Accessor = 0.0;
}

xs::Double ECEF_AccelerationAccelerationCovarianceType::getAxAx() const {
  return axAx_Accessor;
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::setAxAx(xs::Double value) {
  axAx_Accessor = value;
  return *this;
}


xs::Double ECEF_AccelerationAccelerationCovarianceType::getAxAy() const {
  return axAy_Accessor;
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::setAxAy(xs::Double value) {
  axAy_Accessor = value;
  return *this;
}


xs::Double ECEF_AccelerationAccelerationCovarianceType::getAxAz() const {
  return axAz_Accessor;
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::setAxAz(xs::Double value) {
  axAz_Accessor = value;
  return *this;
}


xs::Double ECEF_AccelerationAccelerationCovarianceType::getAyAy() const {
  return ayAy_Accessor;
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::setAyAy(xs::Double value) {
  ayAy_Accessor = value;
  return *this;
}


xs::Double ECEF_AccelerationAccelerationCovarianceType::getAyAz() const {
  return ayAz_Accessor;
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::setAyAz(xs::Double value) {
  ayAz_Accessor = value;
  return *this;
}


xs::Double ECEF_AccelerationAccelerationCovarianceType::getAzAz() const {
  return azAz_Accessor;
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::setAzAz(xs::Double value) {
  azAz_Accessor = value;
  return *this;
}


std::unique_ptr<ECEF_AccelerationAccelerationCovarianceType> ECEF_AccelerationAccelerationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_AccelerationAccelerationCovarianceType : type};
  return (requestedType == uci::type::accessorType::eCEF_AccelerationAccelerationCovarianceType) ? boost::make_unique<ECEF_AccelerationAccelerationCovarianceType>() : nullptr;
}

/**  */
namespace ECEF_AccelerationAccelerationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_AccelerationAccelerationCovarianceType"};
constexpr const char* AxAx_Name{"AxAx"};
constexpr const char* AxAy_Name{"AxAy"};
constexpr const char* AxAz_Name{"AxAz"};
constexpr const char* AyAy_Name{"AyAy"};
constexpr const char* AyAz_Name{"AyAz"};
constexpr const char* AzAz_Name{"AzAz"};

} // namespace ECEF_AccelerationAccelerationCovarianceType_Names

void ECEF_AccelerationAccelerationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_AccelerationAccelerationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AxAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAxAx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AxAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAxAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AxAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAxAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AyAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAyAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AyAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAyAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AzAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ECEF_AccelerationAccelerationCovarianceType::serialize(const uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_AccelerationAccelerationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_AccelerationAccelerationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAxAx(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AxAx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAxAy(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AxAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAxAz(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AxAz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAyAy(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AyAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAyAz(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AyAz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzAz(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AzAz_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_AccelerationAccelerationCovarianceType>().release());
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_AccelerationAccelerationCovarianceType::create(const uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_AccelerationAccelerationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::ECEF_AccelerationAccelerationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_AccelerationAccelerationCovarianceType::destroy(uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_AccelerationAccelerationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

