/** @file TurnPointType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/TurnPointType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/TurnGeometryChoiceType.h"
#include "asb_uci/type/TurnPointTypeEnum.h"
#include "asb_uci/type/WayPointPointChoiceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleType.h"
#include "uci/type/TurnGeometryChoiceType.h"
#include "uci/type/TurnPointType.h"
#include "uci/type/TurnPointTypeEnum.h"
#include "uci/type/WayPointPointChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TurnPointType::TurnPointType()
  : waypoint_Accessor{boost::make_unique<WayPointPointChoiceType>()},
    turnPointType_Accessor{boost::make_unique<TurnPointTypeEnum>()} {
}

TurnPointType::~TurnPointType() = default;

void TurnPointType::copy(const uci::type::TurnPointType& accessor) {
  copyImpl(accessor, false);
}

void TurnPointType::copyImpl(const uci::type::TurnPointType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TurnPointType&>(accessor);
    setWaypoint(*(accessorImpl.waypoint_Accessor));
    setTurnPointType(*(accessorImpl.turnPointType_Accessor));
    if (accessorImpl.hasCourse()) {
      setCourse(accessorImpl.getCourse());
    } else {
      clearCourse();
    }
    if (accessorImpl.turnGeometry_Accessor) {
      setTurnGeometry(*(accessorImpl.turnGeometry_Accessor));
    } else {
      turnGeometry_Accessor.reset();
    }
  }
}

void TurnPointType::reset() noexcept {
  waypoint_Accessor->reset();
  turnPointType_Accessor->reset();
  clearCourse();
  turnGeometry_Accessor.reset();
}

const uci::type::WayPointPointChoiceType& TurnPointType::getWaypoint() const {
  return *waypoint_Accessor;
}

uci::type::WayPointPointChoiceType& TurnPointType::getWaypoint() {
  return *waypoint_Accessor;
}

uci::type::TurnPointType& TurnPointType::setWaypoint(const uci::type::WayPointPointChoiceType& accessor) {
  if (&accessor != waypoint_Accessor.get()) {
    waypoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TurnPointTypeEnum& TurnPointType::getTurnPointType() const {
  return *turnPointType_Accessor;
}

uci::type::TurnPointTypeEnum& TurnPointType::getTurnPointType() {
  return *turnPointType_Accessor;
}

uci::type::TurnPointType& TurnPointType::setTurnPointType(const uci::type::TurnPointTypeEnum& accessor) {
  if (&accessor != turnPointType_Accessor.get()) {
    turnPointType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TurnPointType& TurnPointType::setTurnPointType(uci::type::TurnPointTypeEnum::EnumerationItem value) {
  turnPointType_Accessor->setValue(value);
  return *this;
}


uci::type::AngleTypeValue TurnPointType::getCourse() const {
  if (course_Accessor) {
    return *course_Accessor;
  }
  throw uci::base::UCIException("Error in getCourse(): An attempt was made to get an optional field that was not enabled, call hasCourse() to determine if it is safe to call getCourse()");
}

uci::type::TurnPointType& TurnPointType::setCourse(uci::type::AngleTypeValue value) {
  course_Accessor = value;
  return *this;
}

bool TurnPointType::hasCourse() const noexcept {
  return course_Accessor.has_value();
}

uci::type::TurnPointType& TurnPointType::clearCourse() noexcept {
  course_Accessor.reset();
  return *this;
}

uci::type::TurnGeometryChoiceType& TurnPointType::getTurnGeometry_() const {
  if (turnGeometry_Accessor) {
    return *turnGeometry_Accessor;
  }
  throw uci::base::UCIException("Error in getTurnGeometry(): An attempt was made to get an optional field that was not enabled, call hasTurnGeometry() to determine if it is safe to call getTurnGeometry()");
}

const uci::type::TurnGeometryChoiceType& TurnPointType::getTurnGeometry() const {
  return getTurnGeometry_();
}

uci::type::TurnGeometryChoiceType& TurnPointType::getTurnGeometry() {
  return getTurnGeometry_();
}

uci::type::TurnPointType& TurnPointType::setTurnGeometry(const uci::type::TurnGeometryChoiceType& accessor) {
  enableTurnGeometry();
  if (&accessor != turnGeometry_Accessor.get()) {
    turnGeometry_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TurnPointType::hasTurnGeometry() const noexcept {
  return static_cast<bool>(turnGeometry_Accessor);
}

uci::type::TurnGeometryChoiceType& TurnPointType::enableTurnGeometry(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turnGeometryChoiceType : type};
  if ((!turnGeometry_Accessor) || (turnGeometry_Accessor->getAccessorType() != requestedType)) {
    turnGeometry_Accessor = TurnGeometryChoiceType::create(requestedType);
    if (!turnGeometry_Accessor) {
      throw uci::base::UCIException("Error in enableTurnGeometry(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *turnGeometry_Accessor;
}

uci::type::TurnPointType& TurnPointType::clearTurnGeometry() noexcept {
  turnGeometry_Accessor.reset();
  return *this;
}

std::unique_ptr<TurnPointType> TurnPointType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turnPointType : type};
  return (requestedType == uci::type::accessorType::turnPointType) ? boost::make_unique<TurnPointType>() : nullptr;
}

/**  */
namespace TurnPointType_Names {

constexpr const char* Extern_Type_Name{"TurnPointType"};
constexpr const char* Waypoint_Name{"Waypoint"};
constexpr const char* TurnPointType_Name{"TurnPointType"};
constexpr const char* Course_Name{"Course"};
constexpr const char* TurnGeometry_Name{"TurnGeometry"};

} // namespace TurnPointType_Names

void TurnPointType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TurnPointType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TurnPointType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TurnPointType_Names::Waypoint_Name) {
      WayPointPointChoiceType::deserialize(valueType.second, accessor.getWaypoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurnPointType_Names::TurnPointType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTurnPointType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + TurnPointType_Names::Course_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCourse(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TurnPointType_Names::TurnGeometry_Name) {
      TurnGeometryChoiceType::deserialize(valueType.second, accessor.enableTurnGeometry(), nodeName, nsPrefix);
    }
  }
}

std::string TurnPointType::serialize(const uci::type::TurnPointType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TurnPointType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TurnPointType_Names::Extern_Type_Name);
  }
  WayPointPointChoiceType::serialize(accessor.getWaypoint(), node, TurnPointType_Names::Waypoint_Name);
  TurnPointTypeEnum::serialize(accessor.getTurnPointType(), node, TurnPointType_Names::TurnPointType_Name, false);
  if (accessor.hasCourse()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCourse(), node, TurnPointType_Names::Course_Name);
  }
  if (accessor.hasTurnGeometry()) {
    TurnGeometryChoiceType::serialize(accessor.getTurnGeometry(), node, TurnPointType_Names::TurnGeometry_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TurnPointType& TurnPointType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TurnPointType>().release());
}

uci::type::TurnPointType& TurnPointType::create(const uci::type::TurnPointType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TurnPointType> newAccessor{boost::make_unique<asb_uci::type::TurnPointType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TurnPointType::destroy(uci::type::TurnPointType& accessor) {
  delete dynamic_cast<asb_uci::type::TurnPointType*>(&accessor);
}

} // namespace type

} // namespace uci

