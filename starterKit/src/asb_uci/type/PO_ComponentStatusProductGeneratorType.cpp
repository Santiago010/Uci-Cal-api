/** @file PO_ComponentStatusProductGeneratorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentStatusProductGeneratorType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsStatusType.h"
#include "../../../include/asb_uci/type/PO_ComponentStatusOutputProductSettingsType.h"
#include "../../../include/asb_uci/type/PO_ComponentStatusProductGeneratorSettingsType.h"
#include "../../../include/asb_uci/type/PO_FPA_ID_Type.h"
#include "../../../include/asb_uci/type/PO_ProductGeneratorID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusOutputProductSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusProductGeneratorSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusProductGeneratorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_FPA_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProductGeneratorID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentStatusProductGeneratorType::PO_ComponentStatusProductGeneratorType()
  : generatorID_Accessor{boost::make_unique<PO_ProductGeneratorID_Type>()},
    fPA_ID_Accessor{boost::make_unique<FPA_ID>(0, SIZE_MAX)},
    productGeneratorStatus_Accessor{boost::make_unique<ComponentControlsStatusType>()},
    outputProductSettings_Accessor{boost::make_unique<OutputProductSettings>(0, SIZE_MAX)} {
}

PO_ComponentStatusProductGeneratorType::~PO_ComponentStatusProductGeneratorType() = default;

void PO_ComponentStatusProductGeneratorType::copy(const uci::type::PO_ComponentStatusProductGeneratorType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentStatusProductGeneratorType::copyImpl(const uci::type::PO_ComponentStatusProductGeneratorType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentStatusProductGeneratorType&>(accessor);
    setGeneratorID(*(accessorImpl.generatorID_Accessor));
    setFPA_ID(*(accessorImpl.fPA_ID_Accessor));
    setProductGeneratorStatus(*(accessorImpl.productGeneratorStatus_Accessor));
    if (accessorImpl.productGeneratorSettings_Accessor) {
      setProductGeneratorSettings(*(accessorImpl.productGeneratorSettings_Accessor));
    } else {
      productGeneratorSettings_Accessor.reset();
    }
    setOutputProductSettings(*(accessorImpl.outputProductSettings_Accessor));
  }
}

void PO_ComponentStatusProductGeneratorType::reset() noexcept {
  generatorID_Accessor->reset();
  fPA_ID_Accessor->reset();
  productGeneratorStatus_Accessor->reset();
  productGeneratorSettings_Accessor.reset();
  outputProductSettings_Accessor->reset();
}

const uci::type::PO_ProductGeneratorID_Type& PO_ComponentStatusProductGeneratorType::getGeneratorID() const {
  return *generatorID_Accessor;
}

uci::type::PO_ProductGeneratorID_Type& PO_ComponentStatusProductGeneratorType::getGeneratorID() {
  return *generatorID_Accessor;
}

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::setGeneratorID(const uci::type::PO_ProductGeneratorID_Type& accessor) {
  if (&accessor != generatorID_Accessor.get()) {
    generatorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusProductGeneratorType::FPA_ID& PO_ComponentStatusProductGeneratorType::getFPA_ID() const {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentStatusProductGeneratorType::FPA_ID& PO_ComponentStatusProductGeneratorType::getFPA_ID() {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::setFPA_ID(const uci::type::PO_ComponentStatusProductGeneratorType::FPA_ID& accessor) {
  if (&accessor != fPA_ID_Accessor.get()) {
    fPA_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentControlsStatusType& PO_ComponentStatusProductGeneratorType::getProductGeneratorStatus() const {
  return *productGeneratorStatus_Accessor;
}

uci::type::ComponentControlsStatusType& PO_ComponentStatusProductGeneratorType::getProductGeneratorStatus() {
  return *productGeneratorStatus_Accessor;
}

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::setProductGeneratorStatus(const uci::type::ComponentControlsStatusType& accessor) {
  if (&accessor != productGeneratorStatus_Accessor.get()) {
    productGeneratorStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentStatusProductGeneratorSettingsType& PO_ComponentStatusProductGeneratorType::getProductGeneratorSettings_() const {
  if (productGeneratorSettings_Accessor) {
    return *productGeneratorSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getProductGeneratorSettings(): An attempt was made to get an optional field that was not enabled, call hasProductGeneratorSettings() to determine if it is safe to call getProductGeneratorSettings()");
}

const uci::type::PO_ComponentStatusProductGeneratorSettingsType& PO_ComponentStatusProductGeneratorType::getProductGeneratorSettings() const {
  return getProductGeneratorSettings_();
}

uci::type::PO_ComponentStatusProductGeneratorSettingsType& PO_ComponentStatusProductGeneratorType::getProductGeneratorSettings() {
  return getProductGeneratorSettings_();
}

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::setProductGeneratorSettings(const uci::type::PO_ComponentStatusProductGeneratorSettingsType& accessor) {
  enableProductGeneratorSettings();
  if (&accessor != productGeneratorSettings_Accessor.get()) {
    productGeneratorSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusProductGeneratorType::hasProductGeneratorSettings() const noexcept {
  return static_cast<bool>(productGeneratorSettings_Accessor);
}

uci::type::PO_ComponentStatusProductGeneratorSettingsType& PO_ComponentStatusProductGeneratorType::enableProductGeneratorSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusProductGeneratorSettingsType : type};
  if ((!productGeneratorSettings_Accessor) || (productGeneratorSettings_Accessor->getAccessorType() != requestedType)) {
    productGeneratorSettings_Accessor = PO_ComponentStatusProductGeneratorSettingsType::create(requestedType);
    if (!productGeneratorSettings_Accessor) {
      throw uci::base::UCIException("Error in enableProductGeneratorSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productGeneratorSettings_Accessor;
}

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::clearProductGeneratorSettings() noexcept {
  productGeneratorSettings_Accessor.reset();
  return *this;
}

const uci::type::PO_ComponentStatusProductGeneratorType::OutputProductSettings& PO_ComponentStatusProductGeneratorType::getOutputProductSettings() const {
  return *outputProductSettings_Accessor;
}

uci::type::PO_ComponentStatusProductGeneratorType::OutputProductSettings& PO_ComponentStatusProductGeneratorType::getOutputProductSettings() {
  return *outputProductSettings_Accessor;
}

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::setOutputProductSettings(const uci::type::PO_ComponentStatusProductGeneratorType::OutputProductSettings& accessor) {
  if (&accessor != outputProductSettings_Accessor.get()) {
    outputProductSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_ComponentStatusProductGeneratorType> PO_ComponentStatusProductGeneratorType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusProductGeneratorType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentStatusProductGeneratorType) ? boost::make_unique<PO_ComponentStatusProductGeneratorType>() : nullptr;
}

/**  */
namespace PO_ComponentStatusProductGeneratorType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusProductGeneratorType"};
constexpr const char* GeneratorID_Name{"GeneratorID"};
constexpr const char* FPA_ID_Name{"FPA_ID"};
constexpr const char* ProductGeneratorStatus_Name{"ProductGeneratorStatus"};
constexpr const char* ProductGeneratorSettings_Name{"ProductGeneratorSettings"};
constexpr const char* OutputProductSettings_Name{"OutputProductSettings"};

} // namespace PO_ComponentStatusProductGeneratorType_Names

void PO_ComponentStatusProductGeneratorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusProductGeneratorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusProductGeneratorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentStatusProductGeneratorType_Names::GeneratorID_Name) {
      PO_ProductGeneratorID_Type::deserialize(valueType.second, accessor.getGeneratorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusProductGeneratorType_Names::FPA_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusProductGeneratorType::FPA_ID& boundedList = accessor.getFPA_ID();
        const uci::type::PO_ComponentStatusProductGeneratorType::FPA_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_FPA_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusProductGeneratorType_Names::ProductGeneratorStatus_Name) {
      ComponentControlsStatusType::deserialize(valueType.second, accessor.getProductGeneratorStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusProductGeneratorType_Names::ProductGeneratorSettings_Name) {
      PO_ComponentStatusProductGeneratorSettingsType::deserialize(valueType.second, accessor.enableProductGeneratorSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusProductGeneratorType_Names::OutputProductSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusProductGeneratorType::OutputProductSettings& boundedList = accessor.getOutputProductSettings();
        const uci::type::PO_ComponentStatusProductGeneratorType::OutputProductSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentStatusOutputProductSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PO_ComponentStatusProductGeneratorType::serialize(const uci::type::PO_ComponentStatusProductGeneratorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentStatusProductGeneratorType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusProductGeneratorType_Names::Extern_Type_Name);
  }
  PO_ProductGeneratorID_Type::serialize(accessor.getGeneratorID(), node, PO_ComponentStatusProductGeneratorType_Names::GeneratorID_Name);
  {
    const uci::type::PO_ComponentStatusProductGeneratorType::FPA_ID& boundedList = accessor.getFPA_ID();
    for (uci::type::PO_ComponentStatusProductGeneratorType::FPA_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_FPA_ID_Type::serialize(boundedList.at(i), node, PO_ComponentStatusProductGeneratorType_Names::FPA_ID_Name);
    }
  }
  ComponentControlsStatusType::serialize(accessor.getProductGeneratorStatus(), node, PO_ComponentStatusProductGeneratorType_Names::ProductGeneratorStatus_Name);
  if (accessor.hasProductGeneratorSettings()) {
    PO_ComponentStatusProductGeneratorSettingsType::serialize(accessor.getProductGeneratorSettings(), node, PO_ComponentStatusProductGeneratorType_Names::ProductGeneratorSettings_Name);
  }
  {
    const uci::type::PO_ComponentStatusProductGeneratorType::OutputProductSettings& boundedList = accessor.getOutputProductSettings();
    for (uci::type::PO_ComponentStatusProductGeneratorType::OutputProductSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentStatusOutputProductSettingsType::serialize(boundedList.at(i), node, PO_ComponentStatusProductGeneratorType_Names::OutputProductSettings_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentStatusProductGeneratorType>().release());
}

uci::type::PO_ComponentStatusProductGeneratorType& PO_ComponentStatusProductGeneratorType::create(const uci::type::PO_ComponentStatusProductGeneratorType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentStatusProductGeneratorType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentStatusProductGeneratorType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentStatusProductGeneratorType::destroy(uci::type::PO_ComponentStatusProductGeneratorType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentStatusProductGeneratorType*>(&accessor);
}

} // namespace type

} // namespace uci

