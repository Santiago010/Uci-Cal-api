/** @file OrbitConjunctionAssessmentMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitConjunctionAssessmentMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "asb_uci/type/OrbitalConjunctionType.h"
#include "asb_uci/type/RequestID_Type.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "uci/type/OrbitConjunctionAssessmentMDT.h"
#include "uci/type/OrbitalConjunctionType.h"
#include "uci/type/RequestID_Type.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitConjunctionAssessmentMDT::OrbitConjunctionAssessmentMDT()
  : orbitConjunctionAssessmentID_Accessor{boost::make_unique<OrbitConjunctionAssessmentID_Type>()},
    conjunction_Accessor{boost::make_unique<Conjunction>(1, SIZE_MAX)} {
}

OrbitConjunctionAssessmentMDT::~OrbitConjunctionAssessmentMDT() = default;

void OrbitConjunctionAssessmentMDT::copy(const uci::type::OrbitConjunctionAssessmentMDT& accessor) {
  copyImpl(accessor, false);
}

void OrbitConjunctionAssessmentMDT::copyImpl(const uci::type::OrbitConjunctionAssessmentMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitConjunctionAssessmentMDT&>(accessor);
    setOrbitConjunctionAssessmentID(*(accessorImpl.orbitConjunctionAssessmentID_Accessor));
    if (accessorImpl.requestID_Accessor) {
      setRequestID(*(accessorImpl.requestID_Accessor));
    } else {
      requestID_Accessor.reset();
    }
    setConjunction(*(accessorImpl.conjunction_Accessor));
    setCompletionTime(accessorImpl.completionTime_Accessor);
    if (accessorImpl.estimateNarrative_Accessor) {
      setEstimateNarrative(*(accessorImpl.estimateNarrative_Accessor));
    } else {
      estimateNarrative_Accessor.reset();
    }
  }
}

void OrbitConjunctionAssessmentMDT::reset() noexcept {
  orbitConjunctionAssessmentID_Accessor->reset();
  requestID_Accessor.reset();
  conjunction_Accessor->reset();
  completionTime_Accessor = 0;
  estimateNarrative_Accessor.reset();
}

const uci::type::OrbitConjunctionAssessmentID_Type& OrbitConjunctionAssessmentMDT::getOrbitConjunctionAssessmentID() const {
  return *orbitConjunctionAssessmentID_Accessor;
}

uci::type::OrbitConjunctionAssessmentID_Type& OrbitConjunctionAssessmentMDT::getOrbitConjunctionAssessmentID() {
  return *orbitConjunctionAssessmentID_Accessor;
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::setOrbitConjunctionAssessmentID(const uci::type::OrbitConjunctionAssessmentID_Type& accessor) {
  if (&accessor != orbitConjunctionAssessmentID_Accessor.get()) {
    orbitConjunctionAssessmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequestID_Type& OrbitConjunctionAssessmentMDT::getRequestID_() const {
  if (requestID_Accessor) {
    return *requestID_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestID(): An attempt was made to get an optional field that was not enabled, call hasRequestID() to determine if it is safe to call getRequestID()");
}

const uci::type::RequestID_Type& OrbitConjunctionAssessmentMDT::getRequestID() const {
  return getRequestID_();
}

uci::type::RequestID_Type& OrbitConjunctionAssessmentMDT::getRequestID() {
  return getRequestID_();
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::setRequestID(const uci::type::RequestID_Type& accessor) {
  enableRequestID();
  if (&accessor != requestID_Accessor.get()) {
    requestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitConjunctionAssessmentMDT::hasRequestID() const noexcept {
  return static_cast<bool>(requestID_Accessor);
}

uci::type::RequestID_Type& OrbitConjunctionAssessmentMDT::enableRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!requestID_Accessor) || (requestID_Accessor->getAccessorType() != requestedType)) {
    requestID_Accessor = RequestID_Type::create(requestedType);
    if (!requestID_Accessor) {
      throw uci::base::UCIException("Error in enableRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requestID_Accessor;
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::clearRequestID() noexcept {
  requestID_Accessor.reset();
  return *this;
}

const uci::type::OrbitConjunctionAssessmentMDT::Conjunction& OrbitConjunctionAssessmentMDT::getConjunction() const {
  return *conjunction_Accessor;
}

uci::type::OrbitConjunctionAssessmentMDT::Conjunction& OrbitConjunctionAssessmentMDT::getConjunction() {
  return *conjunction_Accessor;
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::setConjunction(const uci::type::OrbitConjunctionAssessmentMDT::Conjunction& accessor) {
  if (&accessor != conjunction_Accessor.get()) {
    conjunction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue OrbitConjunctionAssessmentMDT::getCompletionTime() const {
  return completionTime_Accessor;
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::setCompletionTime(uci::type::DateTimeTypeValue value) {
  completionTime_Accessor = value;
  return *this;
}


uci::type::VisibleString1024Type& OrbitConjunctionAssessmentMDT::getEstimateNarrative_() const {
  if (estimateNarrative_Accessor) {
    return *estimateNarrative_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimateNarrative(): An attempt was made to get an optional field that was not enabled, call hasEstimateNarrative() to determine if it is safe to call getEstimateNarrative()");
}

const uci::type::VisibleString1024Type& OrbitConjunctionAssessmentMDT::getEstimateNarrative() const {
  return getEstimateNarrative_();
}

uci::type::VisibleString1024Type& OrbitConjunctionAssessmentMDT::getEstimateNarrative() {
  return getEstimateNarrative_();
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::setEstimateNarrative(const uci::type::VisibleString1024Type& value) {
  return setEstimateNarrative(value.c_str());
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::setEstimateNarrative(const std::string& value) {
  return setEstimateNarrative(value.c_str());
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::setEstimateNarrative(const char* value) {
  enableEstimateNarrative().setStringValue(value);
  return *this;
}

bool OrbitConjunctionAssessmentMDT::hasEstimateNarrative() const noexcept {
  return static_cast<bool>(estimateNarrative_Accessor);
}

uci::type::VisibleString1024Type& OrbitConjunctionAssessmentMDT::enableEstimateNarrative(uci::base::accessorType::AccessorType type) {
  if (!estimateNarrative_Accessor) {
    estimateNarrative_Accessor = VisibleString1024Type::create(type);
  }
  return *estimateNarrative_Accessor;
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::clearEstimateNarrative() noexcept {
  estimateNarrative_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitConjunctionAssessmentMDT> OrbitConjunctionAssessmentMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitConjunctionAssessmentMDT : type};
  return (requestedType == uci::type::accessorType::orbitConjunctionAssessmentMDT) ? boost::make_unique<OrbitConjunctionAssessmentMDT>() : nullptr;
}

/**  */
namespace OrbitConjunctionAssessmentMDT_Names {

constexpr const char* Extern_Type_Name{"OrbitConjunctionAssessmentMDT"};
constexpr const char* OrbitConjunctionAssessmentID_Name{"OrbitConjunctionAssessmentID"};
constexpr const char* RequestID_Name{"RequestID"};
constexpr const char* Conjunction_Name{"Conjunction"};
constexpr const char* CompletionTime_Name{"CompletionTime"};
constexpr const char* EstimateNarrative_Name{"EstimateNarrative"};

} // namespace OrbitConjunctionAssessmentMDT_Names

void OrbitConjunctionAssessmentMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitConjunctionAssessmentMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitConjunctionAssessmentMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentMDT_Names::OrbitConjunctionAssessmentID_Name) {
      OrbitConjunctionAssessmentID_Type::deserialize(valueType.second, accessor.getOrbitConjunctionAssessmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentMDT_Names::RequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentMDT_Names::Conjunction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitConjunctionAssessmentMDT::Conjunction& boundedList = accessor.getConjunction();
        const uci::type::OrbitConjunctionAssessmentMDT::Conjunction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalConjunctionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentMDT_Names::CompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentMDT_Names::EstimateNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimateNarrative(*value);
      }
    }
  }
}

std::string OrbitConjunctionAssessmentMDT::serialize(const uci::type::OrbitConjunctionAssessmentMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitConjunctionAssessmentMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitConjunctionAssessmentMDT_Names::Extern_Type_Name);
  }
  OrbitConjunctionAssessmentID_Type::serialize(accessor.getOrbitConjunctionAssessmentID(), node, OrbitConjunctionAssessmentMDT_Names::OrbitConjunctionAssessmentID_Name);
  if (accessor.hasRequestID()) {
    RequestID_Type::serialize(accessor.getRequestID(), node, OrbitConjunctionAssessmentMDT_Names::RequestID_Name);
  }
  {
    const uci::type::OrbitConjunctionAssessmentMDT::Conjunction& boundedList = accessor.getConjunction();
    for (uci::type::OrbitConjunctionAssessmentMDT::Conjunction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalConjunctionType::serialize(boundedList.at(i), node, OrbitConjunctionAssessmentMDT_Names::Conjunction_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getCompletionTime(), node, OrbitConjunctionAssessmentMDT_Names::CompletionTime_Name);
  if (accessor.hasEstimateNarrative()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getEstimateNarrative(), node, OrbitConjunctionAssessmentMDT_Names::EstimateNarrative_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitConjunctionAssessmentMDT>().release());
}

uci::type::OrbitConjunctionAssessmentMDT& OrbitConjunctionAssessmentMDT::create(const uci::type::OrbitConjunctionAssessmentMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitConjunctionAssessmentMDT> newAccessor{boost::make_unique<asb_uci::type::OrbitConjunctionAssessmentMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitConjunctionAssessmentMDT::destroy(uci::type::OrbitConjunctionAssessmentMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitConjunctionAssessmentMDT*>(&accessor);
}

} // namespace type

} // namespace uci

