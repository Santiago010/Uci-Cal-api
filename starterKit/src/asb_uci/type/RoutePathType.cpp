/** @file RoutePathType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RoutePathType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AirfieldID_Type.h"
#include "../../../include/asb_uci/type/PathID_Type.h"
#include "../../../include/asb_uci/type/PathSegmentType.h"
#include "../../../include/asb_uci/type/PathTypeEnum.h"
#include "../../../include/asb_uci/type/PlanningLocationType.h"
#include "../../../include/asb_uci/type/RemarksType.h"
#include "../../../include/asb_uci/type/RunwayID_Type.h"
#include "../../../include/asb_uci/type/SegmentID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathSegmentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RemarksType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePathType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RunwayID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SegmentID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RoutePathType::RoutePathType()
  : pathID_Accessor{boost::make_unique<PathID_Type>()},
    pathType_Accessor{boost::make_unique<PathTypeEnum>()},
    firstInPathSegmentID_Accessor{boost::make_unique<SegmentID_Type>()},
    pathSegment_Accessor{boost::make_unique<PathSegment>(1, SIZE_MAX)} {
}

RoutePathType::~RoutePathType() = default;

void RoutePathType::copy(const uci::type::RoutePathType& accessor) {
  copyImpl(accessor, false);
}

void RoutePathType::copyImpl(const uci::type::RoutePathType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RoutePathType&>(accessor);
    setPathID(*(accessorImpl.pathID_Accessor));
    setPathType(*(accessorImpl.pathType_Accessor));
    setFirstInPathSegmentID(*(accessorImpl.firstInPathSegmentID_Accessor));
    setPathSegment(*(accessorImpl.pathSegment_Accessor));
    if (accessorImpl.initialConditions_Accessor) {
      setInitialConditions(*(accessorImpl.initialConditions_Accessor));
    } else {
      initialConditions_Accessor.reset();
    }
    if (accessorImpl.airfieldID_Accessor) {
      setAirfieldID(*(accessorImpl.airfieldID_Accessor));
    } else {
      airfieldID_Accessor.reset();
    }
    if (accessorImpl.runwayID_Accessor) {
      setRunwayID(*(accessorImpl.runwayID_Accessor));
    } else {
      runwayID_Accessor.reset();
    }
    if (accessorImpl.remarks_Accessor) {
      setRemarks(*(accessorImpl.remarks_Accessor));
    } else {
      remarks_Accessor.reset();
    }
  }
}

void RoutePathType::reset() noexcept {
  pathID_Accessor->reset();
  pathType_Accessor->reset();
  firstInPathSegmentID_Accessor->reset();
  pathSegment_Accessor->reset();
  initialConditions_Accessor.reset();
  airfieldID_Accessor.reset();
  runwayID_Accessor.reset();
  remarks_Accessor.reset();
}

const uci::type::PathID_Type& RoutePathType::getPathID() const {
  return *pathID_Accessor;
}

uci::type::PathID_Type& RoutePathType::getPathID() {
  return *pathID_Accessor;
}

uci::type::RoutePathType& RoutePathType::setPathID(const uci::type::PathID_Type& accessor) {
  if (&accessor != pathID_Accessor.get()) {
    pathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathTypeEnum& RoutePathType::getPathType() const {
  return *pathType_Accessor;
}

uci::type::PathTypeEnum& RoutePathType::getPathType() {
  return *pathType_Accessor;
}

uci::type::RoutePathType& RoutePathType::setPathType(const uci::type::PathTypeEnum& accessor) {
  if (&accessor != pathType_Accessor.get()) {
    pathType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RoutePathType& RoutePathType::setPathType(uci::type::PathTypeEnum::EnumerationItem value) {
  pathType_Accessor->setValue(value);
  return *this;
}


const uci::type::SegmentID_Type& RoutePathType::getFirstInPathSegmentID() const {
  return *firstInPathSegmentID_Accessor;
}

uci::type::SegmentID_Type& RoutePathType::getFirstInPathSegmentID() {
  return *firstInPathSegmentID_Accessor;
}

uci::type::RoutePathType& RoutePathType::setFirstInPathSegmentID(const uci::type::SegmentID_Type& accessor) {
  if (&accessor != firstInPathSegmentID_Accessor.get()) {
    firstInPathSegmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RoutePathType::PathSegment& RoutePathType::getPathSegment() const {
  return *pathSegment_Accessor;
}

uci::type::RoutePathType::PathSegment& RoutePathType::getPathSegment() {
  return *pathSegment_Accessor;
}

uci::type::RoutePathType& RoutePathType::setPathSegment(const uci::type::RoutePathType::PathSegment& accessor) {
  if (&accessor != pathSegment_Accessor.get()) {
    pathSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanningLocationType& RoutePathType::getInitialConditions_() const {
  if (initialConditions_Accessor) {
    return *initialConditions_Accessor;
  }
  throw uci::base::UCIException("Error in getInitialConditions(): An attempt was made to get an optional field that was not enabled, call hasInitialConditions() to determine if it is safe to call getInitialConditions()");
}

const uci::type::PlanningLocationType& RoutePathType::getInitialConditions() const {
  return getInitialConditions_();
}

uci::type::PlanningLocationType& RoutePathType::getInitialConditions() {
  return getInitialConditions_();
}

uci::type::RoutePathType& RoutePathType::setInitialConditions(const uci::type::PlanningLocationType& accessor) {
  enableInitialConditions();
  if (&accessor != initialConditions_Accessor.get()) {
    initialConditions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePathType::hasInitialConditions() const noexcept {
  return static_cast<bool>(initialConditions_Accessor);
}

uci::type::PlanningLocationType& RoutePathType::enableInitialConditions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningLocationType : type};
  if ((!initialConditions_Accessor) || (initialConditions_Accessor->getAccessorType() != requestedType)) {
    initialConditions_Accessor = PlanningLocationType::create(requestedType);
    if (!initialConditions_Accessor) {
      throw uci::base::UCIException("Error in enableInitialConditions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *initialConditions_Accessor;
}

uci::type::RoutePathType& RoutePathType::clearInitialConditions() noexcept {
  initialConditions_Accessor.reset();
  return *this;
}

uci::type::AirfieldID_Type& RoutePathType::getAirfieldID_() const {
  if (airfieldID_Accessor) {
    return *airfieldID_Accessor;
  }
  throw uci::base::UCIException("Error in getAirfieldID(): An attempt was made to get an optional field that was not enabled, call hasAirfieldID() to determine if it is safe to call getAirfieldID()");
}

const uci::type::AirfieldID_Type& RoutePathType::getAirfieldID() const {
  return getAirfieldID_();
}

uci::type::AirfieldID_Type& RoutePathType::getAirfieldID() {
  return getAirfieldID_();
}

uci::type::RoutePathType& RoutePathType::setAirfieldID(const uci::type::AirfieldID_Type& accessor) {
  enableAirfieldID();
  if (&accessor != airfieldID_Accessor.get()) {
    airfieldID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePathType::hasAirfieldID() const noexcept {
  return static_cast<bool>(airfieldID_Accessor);
}

uci::type::AirfieldID_Type& RoutePathType::enableAirfieldID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airfieldID_Type : type};
  if ((!airfieldID_Accessor) || (airfieldID_Accessor->getAccessorType() != requestedType)) {
    airfieldID_Accessor = AirfieldID_Type::create(requestedType);
    if (!airfieldID_Accessor) {
      throw uci::base::UCIException("Error in enableAirfieldID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airfieldID_Accessor;
}

uci::type::RoutePathType& RoutePathType::clearAirfieldID() noexcept {
  airfieldID_Accessor.reset();
  return *this;
}

uci::type::RunwayID_Type& RoutePathType::getRunwayID_() const {
  if (runwayID_Accessor) {
    return *runwayID_Accessor;
  }
  throw uci::base::UCIException("Error in getRunwayID(): An attempt was made to get an optional field that was not enabled, call hasRunwayID() to determine if it is safe to call getRunwayID()");
}

const uci::type::RunwayID_Type& RoutePathType::getRunwayID() const {
  return getRunwayID_();
}

uci::type::RunwayID_Type& RoutePathType::getRunwayID() {
  return getRunwayID_();
}

uci::type::RoutePathType& RoutePathType::setRunwayID(const uci::type::RunwayID_Type& accessor) {
  enableRunwayID();
  if (&accessor != runwayID_Accessor.get()) {
    runwayID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePathType::hasRunwayID() const noexcept {
  return static_cast<bool>(runwayID_Accessor);
}

uci::type::RunwayID_Type& RoutePathType::enableRunwayID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::runwayID_Type : type};
  if ((!runwayID_Accessor) || (runwayID_Accessor->getAccessorType() != requestedType)) {
    runwayID_Accessor = RunwayID_Type::create(requestedType);
    if (!runwayID_Accessor) {
      throw uci::base::UCIException("Error in enableRunwayID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *runwayID_Accessor;
}

uci::type::RoutePathType& RoutePathType::clearRunwayID() noexcept {
  runwayID_Accessor.reset();
  return *this;
}

uci::type::RemarksType& RoutePathType::getRemarks_() const {
  if (remarks_Accessor) {
    return *remarks_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarks(): An attempt was made to get an optional field that was not enabled, call hasRemarks() to determine if it is safe to call getRemarks()");
}

const uci::type::RemarksType& RoutePathType::getRemarks() const {
  return getRemarks_();
}

uci::type::RemarksType& RoutePathType::getRemarks() {
  return getRemarks_();
}

uci::type::RoutePathType& RoutePathType::setRemarks(const uci::type::RemarksType& accessor) {
  enableRemarks();
  if (&accessor != remarks_Accessor.get()) {
    remarks_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePathType::hasRemarks() const noexcept {
  return static_cast<bool>(remarks_Accessor);
}

uci::type::RemarksType& RoutePathType::enableRemarks(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remarksType : type};
  if ((!remarks_Accessor) || (remarks_Accessor->getAccessorType() != requestedType)) {
    remarks_Accessor = RemarksType::create(requestedType);
    if (!remarks_Accessor) {
      throw uci::base::UCIException("Error in enableRemarks(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remarks_Accessor;
}

uci::type::RoutePathType& RoutePathType::clearRemarks() noexcept {
  remarks_Accessor.reset();
  return *this;
}

std::unique_ptr<RoutePathType> RoutePathType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePathType : type};
  return (requestedType == uci::type::accessorType::routePathType) ? boost::make_unique<RoutePathType>() : nullptr;
}

/**  */
namespace RoutePathType_Names {

constexpr const char* Extern_Type_Name{"RoutePathType"};
constexpr const char* PathID_Name{"PathID"};
constexpr const char* PathType_Name{"PathType"};
constexpr const char* FirstInPathSegmentID_Name{"FirstInPathSegmentID"};
constexpr const char* PathSegment_Name{"PathSegment"};
constexpr const char* InitialConditions_Name{"InitialConditions"};
constexpr const char* AirfieldID_Name{"AirfieldID"};
constexpr const char* RunwayID_Name{"RunwayID"};
constexpr const char* Remarks_Name{"Remarks"};

} // namespace RoutePathType_Names

void RoutePathType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RoutePathType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RoutePathType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RoutePathType_Names::PathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.getPathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePathType_Names::PathType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPathType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RoutePathType_Names::FirstInPathSegmentID_Name) {
      SegmentID_Type::deserialize(valueType.second, accessor.getFirstInPathSegmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePathType_Names::PathSegment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RoutePathType::PathSegment& boundedList = accessor.getPathSegment();
        const uci::type::RoutePathType::PathSegment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PathSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RoutePathType_Names::InitialConditions_Name) {
      PlanningLocationType::deserialize(valueType.second, accessor.enableInitialConditions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePathType_Names::AirfieldID_Name) {
      AirfieldID_Type::deserialize(valueType.second, accessor.enableAirfieldID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePathType_Names::RunwayID_Name) {
      RunwayID_Type::deserialize(valueType.second, accessor.enableRunwayID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePathType_Names::Remarks_Name) {
      RemarksType::deserialize(valueType.second, accessor.enableRemarks(), nodeName, nsPrefix);
    }
  }
}

std::string RoutePathType::serialize(const uci::type::RoutePathType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RoutePathType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RoutePathType_Names::Extern_Type_Name);
  }
  PathID_Type::serialize(accessor.getPathID(), node, RoutePathType_Names::PathID_Name);
  PathTypeEnum::serialize(accessor.getPathType(), node, RoutePathType_Names::PathType_Name, false);
  SegmentID_Type::serialize(accessor.getFirstInPathSegmentID(), node, RoutePathType_Names::FirstInPathSegmentID_Name);
  {
    const uci::type::RoutePathType::PathSegment& boundedList = accessor.getPathSegment();
    for (uci::type::RoutePathType::PathSegment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PathSegmentType::serialize(boundedList.at(i), node, RoutePathType_Names::PathSegment_Name);
    }
  }
  if (accessor.hasInitialConditions()) {
    PlanningLocationType::serialize(accessor.getInitialConditions(), node, RoutePathType_Names::InitialConditions_Name);
  }
  if (accessor.hasAirfieldID()) {
    AirfieldID_Type::serialize(accessor.getAirfieldID(), node, RoutePathType_Names::AirfieldID_Name);
  }
  if (accessor.hasRunwayID()) {
    RunwayID_Type::serialize(accessor.getRunwayID(), node, RoutePathType_Names::RunwayID_Name);
  }
  if (accessor.hasRemarks()) {
    RemarksType::serialize(accessor.getRemarks(), node, RoutePathType_Names::Remarks_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RoutePathType& RoutePathType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RoutePathType>().release());
}

uci::type::RoutePathType& RoutePathType::create(const uci::type::RoutePathType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RoutePathType> newAccessor{boost::make_unique<asb_uci::type::RoutePathType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RoutePathType::destroy(uci::type::RoutePathType& accessor) {
  delete dynamic_cast<asb_uci::type::RoutePathType*>(&accessor);
}

} // namespace type

} // namespace uci

