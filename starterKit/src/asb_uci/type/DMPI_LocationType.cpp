/** @file DMPI_LocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DMPI_LocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_LocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_LocationType::DMPI_LocationType()
  : dMPI_Coordinates_Accessor{boost::make_unique<Point3D_Type>()} {
}

DMPI_LocationType::~DMPI_LocationType() = default;

void DMPI_LocationType::copy(const uci::type::DMPI_LocationType& accessor) {
  copyImpl(accessor, false);
}

void DMPI_LocationType::copyImpl(const uci::type::DMPI_LocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DMPI_LocationType&>(accessor);
    setDMPI_Coordinates(*(accessorImpl.dMPI_Coordinates_Accessor));
    if (accessorImpl.hasLinearErrorProbable()) {
      setLinearErrorProbable(accessorImpl.getLinearErrorProbable());
    } else {
      clearLinearErrorProbable();
    }
    if (accessorImpl.hasCircularErrorProbable()) {
      setCircularErrorProbable(accessorImpl.getCircularErrorProbable());
    } else {
      clearCircularErrorProbable();
    }
    if (accessorImpl.hasConfidence()) {
      setConfidence(accessorImpl.getConfidence());
    } else {
      clearConfidence();
    }
  }
}

void DMPI_LocationType::reset() noexcept {
  if (dMPI_Coordinates_Accessor->getAccessorType() != uci::type::accessorType::point3D_Type) {
    dMPI_Coordinates_Accessor = boost::make_unique<Point3D_Type>();
  } else {
    dMPI_Coordinates_Accessor->reset();
  }
  clearLinearErrorProbable();
  clearCircularErrorProbable();
  clearConfidence();
}

const uci::type::Point3D_Type& DMPI_LocationType::getDMPI_Coordinates() const {
  return *dMPI_Coordinates_Accessor;
}

uci::type::Point3D_Type& DMPI_LocationType::getDMPI_Coordinates() {
  return *dMPI_Coordinates_Accessor;
}

uci::type::DMPI_LocationType& DMPI_LocationType::setDMPI_Coordinates(const uci::type::Point3D_Type& accessor) {
  enableDMPI_Coordinates(accessor.getAccessorType());
  if (&accessor != dMPI_Coordinates_Accessor.get()) {
    dMPI_Coordinates_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point3D_Type& DMPI_LocationType::enableDMPI_Coordinates(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!dMPI_Coordinates_Accessor) || (dMPI_Coordinates_Accessor->getAccessorType() != requestedType)) {
    dMPI_Coordinates_Accessor = Point3D_Type::create(requestedType);
    if (!dMPI_Coordinates_Accessor) {
      throw uci::base::UCIException("Error in enableDMPI_Coordinates(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dMPI_Coordinates_Accessor;
}

uci::type::DistanceTypeValue DMPI_LocationType::getLinearErrorProbable() const {
  if (linearErrorProbable_Accessor) {
    return *linearErrorProbable_Accessor;
  }
  throw uci::base::UCIException("Error in getLinearErrorProbable(): An attempt was made to get an optional field that was not enabled, call hasLinearErrorProbable() to determine if it is safe to call getLinearErrorProbable()");
}

uci::type::DMPI_LocationType& DMPI_LocationType::setLinearErrorProbable(uci::type::DistanceTypeValue value) {
  linearErrorProbable_Accessor = value;
  return *this;
}

bool DMPI_LocationType::hasLinearErrorProbable() const noexcept {
  return linearErrorProbable_Accessor.has_value();
}

uci::type::DMPI_LocationType& DMPI_LocationType::clearLinearErrorProbable() noexcept {
  linearErrorProbable_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue DMPI_LocationType::getCircularErrorProbable() const {
  if (circularErrorProbable_Accessor) {
    return *circularErrorProbable_Accessor;
  }
  throw uci::base::UCIException("Error in getCircularErrorProbable(): An attempt was made to get an optional field that was not enabled, call hasCircularErrorProbable() to determine if it is safe to call getCircularErrorProbable()");
}

uci::type::DMPI_LocationType& DMPI_LocationType::setCircularErrorProbable(uci::type::DistanceTypeValue value) {
  circularErrorProbable_Accessor = value;
  return *this;
}

bool DMPI_LocationType::hasCircularErrorProbable() const noexcept {
  return circularErrorProbable_Accessor.has_value();
}

uci::type::DMPI_LocationType& DMPI_LocationType::clearCircularErrorProbable() noexcept {
  circularErrorProbable_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue DMPI_LocationType::getConfidence() const {
  if (confidence_Accessor) {
    return *confidence_Accessor;
  }
  throw uci::base::UCIException("Error in getConfidence(): An attempt was made to get an optional field that was not enabled, call hasConfidence() to determine if it is safe to call getConfidence()");
}

uci::type::DMPI_LocationType& DMPI_LocationType::setConfidence(uci::type::PercentTypeValue value) {
  confidence_Accessor = value;
  return *this;
}

bool DMPI_LocationType::hasConfidence() const noexcept {
  return confidence_Accessor.has_value();
}

uci::type::DMPI_LocationType& DMPI_LocationType::clearConfidence() noexcept {
  confidence_Accessor.reset();
  return *this;
}

std::unique_ptr<DMPI_LocationType> DMPI_LocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_LocationType : type};
  return (requestedType == uci::type::accessorType::dMPI_LocationType) ? boost::make_unique<DMPI_LocationType>() : nullptr;
}

/**  */
namespace DMPI_LocationType_Names {

constexpr const char* Extern_Type_Name{"DMPI_LocationType"};
constexpr const char* DMPI_Coordinates_Name{"DMPI_Coordinates"};
constexpr const char* LinearErrorProbable_Name{"LinearErrorProbable"};
constexpr const char* CircularErrorProbable_Name{"CircularErrorProbable"};
constexpr const char* Confidence_Name{"Confidence"};

} // namespace DMPI_LocationType_Names

void DMPI_LocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_LocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_LocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_LocationType_Names::DMPI_Coordinates_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDMPI_Coordinates(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_LocationType_Names::LinearErrorProbable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLinearErrorProbable(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DMPI_LocationType_Names::CircularErrorProbable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCircularErrorProbable(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DMPI_LocationType_Names::Confidence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConfidence(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string DMPI_LocationType::serialize(const uci::type::DMPI_LocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_LocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_LocationType_Names::Extern_Type_Name);
  }
  Point3D_Type::serialize(accessor.getDMPI_Coordinates(), node, DMPI_LocationType_Names::DMPI_Coordinates_Name);
  if (accessor.hasLinearErrorProbable()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLinearErrorProbable(), node, DMPI_LocationType_Names::LinearErrorProbable_Name);
  }
  if (accessor.hasCircularErrorProbable()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCircularErrorProbable(), node, DMPI_LocationType_Names::CircularErrorProbable_Name);
  }
  if (accessor.hasConfidence()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getConfidence(), node, DMPI_LocationType_Names::Confidence_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_LocationType& DMPI_LocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_LocationType>().release());
}

uci::type::DMPI_LocationType& DMPI_LocationType::create(const uci::type::DMPI_LocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_LocationType> newAccessor{boost::make_unique<asb_uci::type::DMPI_LocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_LocationType::destroy(uci::type::DMPI_LocationType& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_LocationType*>(&accessor);
}

} // namespace type

} // namespace uci

