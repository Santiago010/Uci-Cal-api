/** @file EntityFusionSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityFusionSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/EntityContributorID_ChoiceType.h"
#include "../../../include/asb_uci/type/EntitySourceEnum.h"
#include "../../../include/asb_uci/type/IdentityConfidenceType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityContributorID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityFusionSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntitySourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityFusionSourceType::EntityFusionSourceType()
  : contributor_Accessor{boost::make_unique<EntityContributorID_ChoiceType>()} {
}

EntityFusionSourceType::~EntityFusionSourceType() = default;

void EntityFusionSourceType::copy(const uci::type::EntityFusionSourceType& accessor) {
  copyImpl(accessor, false);
}

void EntityFusionSourceType::copyImpl(const uci::type::EntityFusionSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityFusionSourceType&>(accessor);
    setContributor(*(accessorImpl.contributor_Accessor));
    setFusionContributor(accessorImpl.fusionContributor_Accessor);
    setProbabilityOfCorrectAssociation(accessorImpl.probabilityOfCorrectAssociation_Accessor);
    if (accessorImpl.contributorCapabilityID_Accessor) {
      setContributorCapabilityID(*(accessorImpl.contributorCapabilityID_Accessor));
    } else {
      contributorCapabilityID_Accessor.reset();
    }
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
    if (accessorImpl.sourceType_Accessor) {
      setSourceType(*(accessorImpl.sourceType_Accessor));
    } else {
      sourceType_Accessor.reset();
    }
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.hasTimestamp()) {
      setTimestamp(accessorImpl.getTimestamp());
    } else {
      clearTimestamp();
    }
  }
}

void EntityFusionSourceType::reset() noexcept {
  contributor_Accessor->reset();
  fusionContributor_Accessor = false;
  probabilityOfCorrectAssociation_Accessor = 0.0;
  contributorCapabilityID_Accessor.reset();
  identity_Accessor.reset();
  sourceType_Accessor.reset();
  systemID_Accessor.reset();
  clearTimestamp();
}

const uci::type::EntityContributorID_ChoiceType& EntityFusionSourceType::getContributor() const {
  return *contributor_Accessor;
}

uci::type::EntityContributorID_ChoiceType& EntityFusionSourceType::getContributor() {
  return *contributor_Accessor;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setContributor(const uci::type::EntityContributorID_ChoiceType& accessor) {
  if (&accessor != contributor_Accessor.get()) {
    contributor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean EntityFusionSourceType::getFusionContributor() const {
  return fusionContributor_Accessor;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setFusionContributor(xs::Boolean value) {
  fusionContributor_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue EntityFusionSourceType::getProbabilityOfCorrectAssociation() const {
  return probabilityOfCorrectAssociation_Accessor;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setProbabilityOfCorrectAssociation(uci::type::PercentTypeValue value) {
  probabilityOfCorrectAssociation_Accessor = value;
  return *this;
}


uci::type::CapabilityID_Type& EntityFusionSourceType::getContributorCapabilityID_() const {
  if (contributorCapabilityID_Accessor) {
    return *contributorCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getContributorCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasContributorCapabilityID() to determine if it is safe to call getContributorCapabilityID()");
}

const uci::type::CapabilityID_Type& EntityFusionSourceType::getContributorCapabilityID() const {
  return getContributorCapabilityID_();
}

uci::type::CapabilityID_Type& EntityFusionSourceType::getContributorCapabilityID() {
  return getContributorCapabilityID_();
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setContributorCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableContributorCapabilityID();
  if (&accessor != contributorCapabilityID_Accessor.get()) {
    contributorCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityFusionSourceType::hasContributorCapabilityID() const noexcept {
  return static_cast<bool>(contributorCapabilityID_Accessor);
}

uci::type::CapabilityID_Type& EntityFusionSourceType::enableContributorCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!contributorCapabilityID_Accessor) || (contributorCapabilityID_Accessor->getAccessorType() != requestedType)) {
    contributorCapabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!contributorCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableContributorCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *contributorCapabilityID_Accessor;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::clearContributorCapabilityID() noexcept {
  contributorCapabilityID_Accessor.reset();
  return *this;
}

uci::type::IdentityConfidenceType& EntityFusionSourceType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::IdentityConfidenceType& EntityFusionSourceType::getIdentity() const {
  return getIdentity_();
}

uci::type::IdentityConfidenceType& EntityFusionSourceType::getIdentity() {
  return getIdentity_();
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setIdentity(const uci::type::IdentityConfidenceType& accessor) {
  enableIdentity(accessor.getAccessorType());
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityFusionSourceType::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::IdentityConfidenceType& EntityFusionSourceType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityConfidenceType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = IdentityConfidenceType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

uci::type::EntitySourceEnum& EntityFusionSourceType::getSourceType_() const {
  if (sourceType_Accessor) {
    return *sourceType_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceType(): An attempt was made to get an optional field that was not enabled, call hasSourceType() to determine if it is safe to call getSourceType()");
}

const uci::type::EntitySourceEnum& EntityFusionSourceType::getSourceType() const {
  return getSourceType_();
}

uci::type::EntitySourceEnum& EntityFusionSourceType::getSourceType() {
  return getSourceType_();
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setSourceType(const uci::type::EntitySourceEnum& accessor) {
  enableSourceType();
  if (&accessor != sourceType_Accessor.get()) {
    sourceType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setSourceType(const uci::type::EntitySourceEnum::EnumerationItem value) {
  enableSourceType().setValue(value);
  return *this;
}

bool EntityFusionSourceType::hasSourceType() const noexcept {
  return static_cast<bool>(sourceType_Accessor);
}

uci::type::EntitySourceEnum& EntityFusionSourceType::enableSourceType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entitySourceEnum : type};
  if ((!sourceType_Accessor) || (sourceType_Accessor->getAccessorType() != requestedType)) {
    sourceType_Accessor = EntitySourceEnum::create(requestedType);
    if (!sourceType_Accessor) {
      throw uci::base::UCIException("Error in enableSourceType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceType_Accessor;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::clearSourceType() noexcept {
  sourceType_Accessor.reset();
  return *this;
}

uci::type::SystemID_Type& EntityFusionSourceType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& EntityFusionSourceType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& EntityFusionSourceType::getSystemID() {
  return getSystemID_();
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityFusionSourceType::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& EntityFusionSourceType::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue EntityFusionSourceType::getTimestamp() const {
  if (timestamp_Accessor) {
    return *timestamp_Accessor;
  }
  throw uci::base::UCIException("Error in getTimestamp(): An attempt was made to get an optional field that was not enabled, call hasTimestamp() to determine if it is safe to call getTimestamp()");
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}

bool EntityFusionSourceType::hasTimestamp() const noexcept {
  return timestamp_Accessor.has_value();
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::clearTimestamp() noexcept {
  timestamp_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityFusionSourceType> EntityFusionSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityFusionSourceType : type};
  return (requestedType == uci::type::accessorType::entityFusionSourceType) ? boost::make_unique<EntityFusionSourceType>() : nullptr;
}

/**  */
namespace EntityFusionSourceType_Names {

constexpr const char* Extern_Type_Name{"EntityFusionSourceType"};
constexpr const char* Contributor_Name{"Contributor"};
constexpr const char* FusionContributor_Name{"FusionContributor"};
constexpr const char* ProbabilityOfCorrectAssociation_Name{"ProbabilityOfCorrectAssociation"};
constexpr const char* ContributorCapabilityID_Name{"ContributorCapabilityID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* SourceType_Name{"SourceType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Timestamp_Name{"Timestamp"};

} // namespace EntityFusionSourceType_Names

void EntityFusionSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityFusionSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityFusionSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::Contributor_Name) {
      EntityContributorID_ChoiceType::deserialize(valueType.second, accessor.getContributor(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::FusionContributor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFusionContributor(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::ProbabilityOfCorrectAssociation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfCorrectAssociation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::ContributorCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableContributorCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::Identity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIdentity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::SourceType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSourceType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityFusionSourceType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
}

std::string EntityFusionSourceType::serialize(const uci::type::EntityFusionSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityFusionSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityFusionSourceType_Names::Extern_Type_Name);
  }
  EntityContributorID_ChoiceType::serialize(accessor.getContributor(), node, EntityFusionSourceType_Names::Contributor_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getFusionContributor(), node, EntityFusionSourceType_Names::FusionContributor_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfCorrectAssociation(), node, EntityFusionSourceType_Names::ProbabilityOfCorrectAssociation_Name);
  if (accessor.hasContributorCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getContributorCapabilityID(), node, EntityFusionSourceType_Names::ContributorCapabilityID_Name);
  }
  if (accessor.hasIdentity()) {
    IdentityConfidenceType::serialize(accessor.getIdentity(), node, EntityFusionSourceType_Names::Identity_Name);
  }
  if (accessor.hasSourceType()) {
    EntitySourceEnum::serialize(accessor.getSourceType(), node, EntityFusionSourceType_Names::SourceType_Name, false);
  }
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, EntityFusionSourceType_Names::SystemID_Name);
  }
  if (accessor.hasTimestamp()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, EntityFusionSourceType_Names::Timestamp_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityFusionSourceType& EntityFusionSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityFusionSourceType>().release());
}

uci::type::EntityFusionSourceType& EntityFusionSourceType::create(const uci::type::EntityFusionSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityFusionSourceType> newAccessor{boost::make_unique<asb_uci::type::EntityFusionSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityFusionSourceType::destroy(uci::type::EntityFusionSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityFusionSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

