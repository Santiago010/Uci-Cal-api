/** @file SignalSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SignalSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityID_Type.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/DwellID_Type.h"
#include "asb_uci/type/EW_ParameterSourceEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/DwellID_Type.h"
#include "uci/type/EW_ParameterSourceEnum.h"
#include "uci/type/SignalSourceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SignalSourceType::SignalSourceType()
  : activityID_Accessor{boost::make_unique<ActivityID>(0, SIZE_MAX)},
    dwellID_Accessor{boost::make_unique<DwellID>(0, SIZE_MAX)} {
}

SignalSourceType::~SignalSourceType() = default;

void SignalSourceType::copy(const uci::type::SignalSourceType& accessor) {
  copyImpl(accessor, false);
}

void SignalSourceType::copyImpl(const uci::type::SignalSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SignalSourceType&>(accessor);
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    setActivityID(*(accessorImpl.activityID_Accessor));
    setDwellID(*(accessorImpl.dwellID_Accessor));
    if (accessorImpl.parameterSource_Accessor) {
      setParameterSource(*(accessorImpl.parameterSource_Accessor));
    } else {
      parameterSource_Accessor.reset();
    }
  }
}

void SignalSourceType::reset() noexcept {
  capabilityID_Accessor.reset();
  activityID_Accessor->reset();
  dwellID_Accessor->reset();
  parameterSource_Accessor.reset();
}

uci::type::CapabilityID_Type& SignalSourceType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& SignalSourceType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& SignalSourceType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::SignalSourceType& SignalSourceType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SignalSourceType::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& SignalSourceType::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::SignalSourceType& SignalSourceType::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

const uci::type::SignalSourceType::ActivityID& SignalSourceType::getActivityID() const {
  return *activityID_Accessor;
}

uci::type::SignalSourceType::ActivityID& SignalSourceType::getActivityID() {
  return *activityID_Accessor;
}

uci::type::SignalSourceType& SignalSourceType::setActivityID(const uci::type::SignalSourceType::ActivityID& accessor) {
  if (&accessor != activityID_Accessor.get()) {
    activityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SignalSourceType::DwellID& SignalSourceType::getDwellID() const {
  return *dwellID_Accessor;
}

uci::type::SignalSourceType::DwellID& SignalSourceType::getDwellID() {
  return *dwellID_Accessor;
}

uci::type::SignalSourceType& SignalSourceType::setDwellID(const uci::type::SignalSourceType::DwellID& accessor) {
  if (&accessor != dwellID_Accessor.get()) {
    dwellID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EW_ParameterSourceEnum& SignalSourceType::getParameterSource_() const {
  if (parameterSource_Accessor) {
    return *parameterSource_Accessor;
  }
  throw uci::base::UCIException("Error in getParameterSource(): An attempt was made to get an optional field that was not enabled, call hasParameterSource() to determine if it is safe to call getParameterSource()");
}

const uci::type::EW_ParameterSourceEnum& SignalSourceType::getParameterSource() const {
  return getParameterSource_();
}

uci::type::EW_ParameterSourceEnum& SignalSourceType::getParameterSource() {
  return getParameterSource_();
}

uci::type::SignalSourceType& SignalSourceType::setParameterSource(const uci::type::EW_ParameterSourceEnum& accessor) {
  enableParameterSource();
  if (&accessor != parameterSource_Accessor.get()) {
    parameterSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SignalSourceType& SignalSourceType::setParameterSource(const uci::type::EW_ParameterSourceEnum::EnumerationItem value) {
  enableParameterSource().setValue(value);
  return *this;
}

bool SignalSourceType::hasParameterSource() const noexcept {
  return static_cast<bool>(parameterSource_Accessor);
}

uci::type::EW_ParameterSourceEnum& SignalSourceType::enableParameterSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eW_ParameterSourceEnum : type};
  if ((!parameterSource_Accessor) || (parameterSource_Accessor->getAccessorType() != requestedType)) {
    parameterSource_Accessor = EW_ParameterSourceEnum::create(requestedType);
    if (!parameterSource_Accessor) {
      throw uci::base::UCIException("Error in enableParameterSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *parameterSource_Accessor;
}

uci::type::SignalSourceType& SignalSourceType::clearParameterSource() noexcept {
  parameterSource_Accessor.reset();
  return *this;
}

std::unique_ptr<SignalSourceType> SignalSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalSourceType : type};
  return (requestedType == uci::type::accessorType::signalSourceType) ? boost::make_unique<SignalSourceType>() : nullptr;
}

/**  */
namespace SignalSourceType_Names {

constexpr const char* Extern_Type_Name{"SignalSourceType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ActivityID_Name{"ActivityID"};
constexpr const char* DwellID_Name{"DwellID"};
constexpr const char* ParameterSource_Name{"ParameterSource"};

} // namespace SignalSourceType_Names

void SignalSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalSourceType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalSourceType_Names::ActivityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalSourceType::ActivityID& boundedList = accessor.getActivityID();
        const uci::type::SignalSourceType::ActivityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SignalSourceType_Names::DwellID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalSourceType::DwellID& boundedList = accessor.getDwellID();
        const uci::type::SignalSourceType::DwellID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DwellID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SignalSourceType_Names::ParameterSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableParameterSource().setValueFromName(*value);
      }
    }
  }
}

std::string SignalSourceType::serialize(const uci::type::SignalSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SignalSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SignalSourceType_Names::Extern_Type_Name);
  }
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, SignalSourceType_Names::CapabilityID_Name);
  }
  {
    const uci::type::SignalSourceType::ActivityID& boundedList = accessor.getActivityID();
    for (uci::type::SignalSourceType::ActivityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityID_Type::serialize(boundedList.at(i), node, SignalSourceType_Names::ActivityID_Name);
    }
  }
  {
    const uci::type::SignalSourceType::DwellID& boundedList = accessor.getDwellID();
    for (uci::type::SignalSourceType::DwellID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DwellID_Type::serialize(boundedList.at(i), node, SignalSourceType_Names::DwellID_Name);
    }
  }
  if (accessor.hasParameterSource()) {
    EW_ParameterSourceEnum::serialize(accessor.getParameterSource(), node, SignalSourceType_Names::ParameterSource_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SignalSourceType& SignalSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SignalSourceType>().release());
}

uci::type::SignalSourceType& SignalSourceType::create(const uci::type::SignalSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SignalSourceType> newAccessor{boost::make_unique<asb_uci::type::SignalSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SignalSourceType::destroy(uci::type::SignalSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::SignalSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

