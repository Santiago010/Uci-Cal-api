/** @file ManeuverConstraintsChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ManeuverConstraintsChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/BasicManeuverConstraintsType.h"
#include "asb_uci/type/OrbitalManeuverDetailsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/BasicManeuverConstraintsType.h"
#include "uci/type/ManeuverConstraintsChoiceType.h"
#include "uci/type/OrbitalManeuverDetailsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ManeuverConstraintsChoiceType::ManeuverConstraintsChoiceType() = default;

ManeuverConstraintsChoiceType::~ManeuverConstraintsChoiceType() = default;

void ManeuverConstraintsChoiceType::copy(const uci::type::ManeuverConstraintsChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ManeuverConstraintsChoiceType::copyImpl(const uci::type::ManeuverConstraintsChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ManeuverConstraintsChoiceType&>(accessor);
    if (accessorImpl.basicManeuverConstraints_Accessor) {
      setBasicManeuverConstraints(*(accessorImpl.basicManeuverConstraints_Accessor));
    } else {
      basicManeuverConstraints_Accessor.reset();
    }
    if (accessorImpl.predictedManeuverConstraints_Accessor) {
      setPredictedManeuverConstraints(*(accessorImpl.predictedManeuverConstraints_Accessor));
    } else {
      predictedManeuverConstraints_Accessor.reset();
    }
  }
}

void ManeuverConstraintsChoiceType::reset() noexcept {
  basicManeuverConstraints_Accessor.reset();
  predictedManeuverConstraints_Accessor.reset();
}

uci::type::ManeuverConstraintsChoiceType::ManeuverConstraintsChoiceTypeChoice ManeuverConstraintsChoiceType::getManeuverConstraintsChoiceTypeChoiceOrdinal() const noexcept {
  if (basicManeuverConstraints_Accessor) {
    return MANEUVERCONSTRAINTSCHOICETYPE_CHOICE_BASICMANEUVERCONSTRAINTS;
  }
  if (predictedManeuverConstraints_Accessor) {
    return MANEUVERCONSTRAINTSCHOICETYPE_CHOICE_PREDICTEDMANEUVERCONSTRAINTS;
  }
  return MANEUVERCONSTRAINTSCHOICETYPE_CHOICE_NONE;
}

uci::type::ManeuverConstraintsChoiceType& ManeuverConstraintsChoiceType::setManeuverConstraintsChoiceTypeChoiceOrdinal(uci::type::ManeuverConstraintsChoiceType::ManeuverConstraintsChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case MANEUVERCONSTRAINTSCHOICETYPE_CHOICE_BASICMANEUVERCONSTRAINTS:
      chooseBasicManeuverConstraints("setManeuverConstraintsChoiceTypeChoiceOrdinal", type);
      break;
    case MANEUVERCONSTRAINTSCHOICETYPE_CHOICE_PREDICTEDMANEUVERCONSTRAINTS:
      choosePredictedManeuverConstraints("setManeuverConstraintsChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setManeuverConstraintsChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::BasicManeuverConstraintsType& ManeuverConstraintsChoiceType::getBasicManeuverConstraints_() const {
  if (basicManeuverConstraints_Accessor) {
    return *basicManeuverConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getBasicManeuverConstraints(): Unable to get BasicManeuverConstraints, field not selected");
}

const uci::type::BasicManeuverConstraintsType& ManeuverConstraintsChoiceType::getBasicManeuverConstraints() const {
  return getBasicManeuverConstraints_();
}

uci::type::BasicManeuverConstraintsType& ManeuverConstraintsChoiceType::getBasicManeuverConstraints() {
  return getBasicManeuverConstraints_();
}

uci::type::ManeuverConstraintsChoiceType& ManeuverConstraintsChoiceType::setBasicManeuverConstraints(const uci::type::BasicManeuverConstraintsType& accessor) {
  chooseBasicManeuverConstraints();
  if (&accessor != basicManeuverConstraints_Accessor.get()) {
    basicManeuverConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ManeuverConstraintsChoiceType::isBasicManeuverConstraints() const noexcept {
  return static_cast<bool>(basicManeuverConstraints_Accessor);
}

uci::type::BasicManeuverConstraintsType& ManeuverConstraintsChoiceType::chooseBasicManeuverConstraints(const std::string& method, uci::base::accessorType::AccessorType type) {
  predictedManeuverConstraints_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::basicManeuverConstraintsType : type};
  if ((!basicManeuverConstraints_Accessor) || (basicManeuverConstraints_Accessor->getAccessorType() != requestedType)) {
    basicManeuverConstraints_Accessor = BasicManeuverConstraintsType::create(type);
    if (!basicManeuverConstraints_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *basicManeuverConstraints_Accessor;
}

uci::type::BasicManeuverConstraintsType& ManeuverConstraintsChoiceType::chooseBasicManeuverConstraints(uci::base::accessorType::AccessorType type) {
  return chooseBasicManeuverConstraints("chooseBasicManeuverConstraints", type);
}

uci::type::OrbitalManeuverDetailsType& ManeuverConstraintsChoiceType::getPredictedManeuverConstraints_() const {
  if (predictedManeuverConstraints_Accessor) {
    return *predictedManeuverConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getPredictedManeuverConstraints(): Unable to get PredictedManeuverConstraints, field not selected");
}

const uci::type::OrbitalManeuverDetailsType& ManeuverConstraintsChoiceType::getPredictedManeuverConstraints() const {
  return getPredictedManeuverConstraints_();
}

uci::type::OrbitalManeuverDetailsType& ManeuverConstraintsChoiceType::getPredictedManeuverConstraints() {
  return getPredictedManeuverConstraints_();
}

uci::type::ManeuverConstraintsChoiceType& ManeuverConstraintsChoiceType::setPredictedManeuverConstraints(const uci::type::OrbitalManeuverDetailsType& accessor) {
  choosePredictedManeuverConstraints();
  if (&accessor != predictedManeuverConstraints_Accessor.get()) {
    predictedManeuverConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ManeuverConstraintsChoiceType::isPredictedManeuverConstraints() const noexcept {
  return static_cast<bool>(predictedManeuverConstraints_Accessor);
}

uci::type::OrbitalManeuverDetailsType& ManeuverConstraintsChoiceType::choosePredictedManeuverConstraints(const std::string& method, uci::base::accessorType::AccessorType type) {
  basicManeuverConstraints_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsType : type};
  if ((!predictedManeuverConstraints_Accessor) || (predictedManeuverConstraints_Accessor->getAccessorType() != requestedType)) {
    predictedManeuverConstraints_Accessor = OrbitalManeuverDetailsType::create(type);
    if (!predictedManeuverConstraints_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *predictedManeuverConstraints_Accessor;
}

uci::type::OrbitalManeuverDetailsType& ManeuverConstraintsChoiceType::choosePredictedManeuverConstraints(uci::base::accessorType::AccessorType type) {
  return choosePredictedManeuverConstraints("choosePredictedManeuverConstraints", type);
}

std::unique_ptr<ManeuverConstraintsChoiceType> ManeuverConstraintsChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::maneuverConstraintsChoiceType : type};
  return (requestedType == uci::type::accessorType::maneuverConstraintsChoiceType) ? boost::make_unique<ManeuverConstraintsChoiceType>() : nullptr;
}

/**  */
namespace ManeuverConstraintsChoiceType_Names {

constexpr const char* Extern_Type_Name{"ManeuverConstraintsChoiceType"};
constexpr const char* BasicManeuverConstraints_Name{"BasicManeuverConstraints"};
constexpr const char* PredictedManeuverConstraints_Name{"PredictedManeuverConstraints"};

} // namespace ManeuverConstraintsChoiceType_Names

void ManeuverConstraintsChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ManeuverConstraintsChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ManeuverConstraintsChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ManeuverConstraintsChoiceType_Names::BasicManeuverConstraints_Name) {
      BasicManeuverConstraintsType::deserialize(valueType.second, accessor.chooseBasicManeuverConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ManeuverConstraintsChoiceType_Names::PredictedManeuverConstraints_Name) {
      OrbitalManeuverDetailsType::deserialize(valueType.second, accessor.choosePredictedManeuverConstraints(), nodeName, nsPrefix);
    }
  }
}

std::string ManeuverConstraintsChoiceType::serialize(const uci::type::ManeuverConstraintsChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ManeuverConstraintsChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ManeuverConstraintsChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isBasicManeuverConstraints()) {
    BasicManeuverConstraintsType::serialize(accessor.getBasicManeuverConstraints(), node, ManeuverConstraintsChoiceType_Names::BasicManeuverConstraints_Name);
  } else if (accessor.isPredictedManeuverConstraints()) {
    OrbitalManeuverDetailsType::serialize(accessor.getPredictedManeuverConstraints(), node, ManeuverConstraintsChoiceType_Names::PredictedManeuverConstraints_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ManeuverConstraintsChoiceType& ManeuverConstraintsChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ManeuverConstraintsChoiceType>().release());
}

uci::type::ManeuverConstraintsChoiceType& ManeuverConstraintsChoiceType::create(const uci::type::ManeuverConstraintsChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ManeuverConstraintsChoiceType> newAccessor{boost::make_unique<asb_uci::type::ManeuverConstraintsChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ManeuverConstraintsChoiceType::destroy(uci::type::ManeuverConstraintsChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ManeuverConstraintsChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

