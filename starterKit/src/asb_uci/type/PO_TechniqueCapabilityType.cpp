/** @file PO_TechniqueCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_TechniqueCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FloatMinMaxType.h"
#include "../../../include/asb_uci/type/PO_TechniqueEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FloatMinMaxType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TechniqueCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TechniqueEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_TechniqueCapabilityType::PO_TechniqueCapabilityType()
  : technique_Accessor{boost::make_unique<PO_TechniqueEnum>()} {
}

PO_TechniqueCapabilityType::~PO_TechniqueCapabilityType() = default;

void PO_TechniqueCapabilityType::copy(const uci::type::PO_TechniqueCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void PO_TechniqueCapabilityType::copyImpl(const uci::type::PO_TechniqueCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_TechniqueCapabilityType&>(accessor);
    setTechnique(*(accessorImpl.technique_Accessor));
    if (accessorImpl.intensity_Accessor) {
      setIntensity(*(accessorImpl.intensity_Accessor));
    } else {
      intensity_Accessor.reset();
    }
    if (accessorImpl.constellation_Accessor) {
      setConstellation(*(accessorImpl.constellation_Accessor));
    } else {
      constellation_Accessor.reset();
    }
    if (accessorImpl.stride_Accessor) {
      setStride(*(accessorImpl.stride_Accessor));
    } else {
      stride_Accessor.reset();
    }
    if (accessorImpl.pointIntensity_Accessor) {
      setPointIntensity(*(accessorImpl.pointIntensity_Accessor));
    } else {
      pointIntensity_Accessor.reset();
    }
    if (accessorImpl.edgeIntensity_Accessor) {
      setEdgeIntensity(*(accessorImpl.edgeIntensity_Accessor));
    } else {
      edgeIntensity_Accessor.reset();
    }
    if (accessorImpl.hasFalseAlarmLevelUpperLimit()) {
      setFalseAlarmLevelUpperLimit(accessorImpl.getFalseAlarmLevelUpperLimit());
    } else {
      clearFalseAlarmLevelUpperLimit();
    }
  }
}

void PO_TechniqueCapabilityType::reset() noexcept {
  technique_Accessor->reset();
  intensity_Accessor.reset();
  constellation_Accessor.reset();
  stride_Accessor.reset();
  pointIntensity_Accessor.reset();
  edgeIntensity_Accessor.reset();
  clearFalseAlarmLevelUpperLimit();
}

const uci::type::PO_TechniqueEnum& PO_TechniqueCapabilityType::getTechnique() const {
  return *technique_Accessor;
}

uci::type::PO_TechniqueEnum& PO_TechniqueCapabilityType::getTechnique() {
  return *technique_Accessor;
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setTechnique(const uci::type::PO_TechniqueEnum& accessor) {
  if (&accessor != technique_Accessor.get()) {
    technique_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setTechnique(uci::type::PO_TechniqueEnum::EnumerationItem value) {
  technique_Accessor->setValue(value);
  return *this;
}


uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getIntensity_() const {
  if (intensity_Accessor) {
    return *intensity_Accessor;
  }
  throw uci::base::UCIException("Error in getIntensity(): An attempt was made to get an optional field that was not enabled, call hasIntensity() to determine if it is safe to call getIntensity()");
}

const uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getIntensity() const {
  return getIntensity_();
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getIntensity() {
  return getIntensity_();
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setIntensity(const uci::type::FloatMinMaxType& accessor) {
  enableIntensity(accessor.getAccessorType());
  if (&accessor != intensity_Accessor.get()) {
    intensity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_TechniqueCapabilityType::hasIntensity() const noexcept {
  return static_cast<bool>(intensity_Accessor);
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::enableIntensity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::floatMinMaxType : type};
  if ((!intensity_Accessor) || (intensity_Accessor->getAccessorType() != requestedType)) {
    intensity_Accessor = FloatMinMaxType::create(requestedType);
    if (!intensity_Accessor) {
      throw uci::base::UCIException("Error in enableIntensity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *intensity_Accessor;
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::clearIntensity() noexcept {
  intensity_Accessor.reset();
  return *this;
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getConstellation_() const {
  if (constellation_Accessor) {
    return *constellation_Accessor;
  }
  throw uci::base::UCIException("Error in getConstellation(): An attempt was made to get an optional field that was not enabled, call hasConstellation() to determine if it is safe to call getConstellation()");
}

const uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getConstellation() const {
  return getConstellation_();
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getConstellation() {
  return getConstellation_();
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setConstellation(const uci::type::FloatMinMaxType& accessor) {
  enableConstellation(accessor.getAccessorType());
  if (&accessor != constellation_Accessor.get()) {
    constellation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_TechniqueCapabilityType::hasConstellation() const noexcept {
  return static_cast<bool>(constellation_Accessor);
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::enableConstellation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::floatMinMaxType : type};
  if ((!constellation_Accessor) || (constellation_Accessor->getAccessorType() != requestedType)) {
    constellation_Accessor = FloatMinMaxType::create(requestedType);
    if (!constellation_Accessor) {
      throw uci::base::UCIException("Error in enableConstellation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *constellation_Accessor;
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::clearConstellation() noexcept {
  constellation_Accessor.reset();
  return *this;
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getStride_() const {
  if (stride_Accessor) {
    return *stride_Accessor;
  }
  throw uci::base::UCIException("Error in getStride(): An attempt was made to get an optional field that was not enabled, call hasStride() to determine if it is safe to call getStride()");
}

const uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getStride() const {
  return getStride_();
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getStride() {
  return getStride_();
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setStride(const uci::type::FloatMinMaxType& accessor) {
  enableStride(accessor.getAccessorType());
  if (&accessor != stride_Accessor.get()) {
    stride_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_TechniqueCapabilityType::hasStride() const noexcept {
  return static_cast<bool>(stride_Accessor);
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::enableStride(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::floatMinMaxType : type};
  if ((!stride_Accessor) || (stride_Accessor->getAccessorType() != requestedType)) {
    stride_Accessor = FloatMinMaxType::create(requestedType);
    if (!stride_Accessor) {
      throw uci::base::UCIException("Error in enableStride(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stride_Accessor;
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::clearStride() noexcept {
  stride_Accessor.reset();
  return *this;
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getPointIntensity_() const {
  if (pointIntensity_Accessor) {
    return *pointIntensity_Accessor;
  }
  throw uci::base::UCIException("Error in getPointIntensity(): An attempt was made to get an optional field that was not enabled, call hasPointIntensity() to determine if it is safe to call getPointIntensity()");
}

const uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getPointIntensity() const {
  return getPointIntensity_();
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getPointIntensity() {
  return getPointIntensity_();
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setPointIntensity(const uci::type::FloatMinMaxType& accessor) {
  enablePointIntensity(accessor.getAccessorType());
  if (&accessor != pointIntensity_Accessor.get()) {
    pointIntensity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_TechniqueCapabilityType::hasPointIntensity() const noexcept {
  return static_cast<bool>(pointIntensity_Accessor);
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::enablePointIntensity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::floatMinMaxType : type};
  if ((!pointIntensity_Accessor) || (pointIntensity_Accessor->getAccessorType() != requestedType)) {
    pointIntensity_Accessor = FloatMinMaxType::create(requestedType);
    if (!pointIntensity_Accessor) {
      throw uci::base::UCIException("Error in enablePointIntensity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointIntensity_Accessor;
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::clearPointIntensity() noexcept {
  pointIntensity_Accessor.reset();
  return *this;
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getEdgeIntensity_() const {
  if (edgeIntensity_Accessor) {
    return *edgeIntensity_Accessor;
  }
  throw uci::base::UCIException("Error in getEdgeIntensity(): An attempt was made to get an optional field that was not enabled, call hasEdgeIntensity() to determine if it is safe to call getEdgeIntensity()");
}

const uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getEdgeIntensity() const {
  return getEdgeIntensity_();
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::getEdgeIntensity() {
  return getEdgeIntensity_();
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setEdgeIntensity(const uci::type::FloatMinMaxType& accessor) {
  enableEdgeIntensity(accessor.getAccessorType());
  if (&accessor != edgeIntensity_Accessor.get()) {
    edgeIntensity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_TechniqueCapabilityType::hasEdgeIntensity() const noexcept {
  return static_cast<bool>(edgeIntensity_Accessor);
}

uci::type::FloatMinMaxType& PO_TechniqueCapabilityType::enableEdgeIntensity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::floatMinMaxType : type};
  if ((!edgeIntensity_Accessor) || (edgeIntensity_Accessor->getAccessorType() != requestedType)) {
    edgeIntensity_Accessor = FloatMinMaxType::create(requestedType);
    if (!edgeIntensity_Accessor) {
      throw uci::base::UCIException("Error in enableEdgeIntensity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *edgeIntensity_Accessor;
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::clearEdgeIntensity() noexcept {
  edgeIntensity_Accessor.reset();
  return *this;
}

xs::UnsignedByte PO_TechniqueCapabilityType::getFalseAlarmLevelUpperLimit() const {
  if (falseAlarmLevelUpperLimit_Accessor) {
    return *falseAlarmLevelUpperLimit_Accessor;
  }
  throw uci::base::UCIException("Error in getFalseAlarmLevelUpperLimit(): An attempt was made to get an optional field that was not enabled, call hasFalseAlarmLevelUpperLimit() to determine if it is safe to call getFalseAlarmLevelUpperLimit()");
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::setFalseAlarmLevelUpperLimit(xs::UnsignedByte value) {
  falseAlarmLevelUpperLimit_Accessor = value;
  return *this;
}

bool PO_TechniqueCapabilityType::hasFalseAlarmLevelUpperLimit() const noexcept {
  return falseAlarmLevelUpperLimit_Accessor.has_value();
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::clearFalseAlarmLevelUpperLimit() noexcept {
  falseAlarmLevelUpperLimit_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_TechniqueCapabilityType> PO_TechniqueCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TechniqueCapabilityType : type};
  return (requestedType == uci::type::accessorType::pO_TechniqueCapabilityType) ? boost::make_unique<PO_TechniqueCapabilityType>() : nullptr;
}

/**  */
namespace PO_TechniqueCapabilityType_Names {

constexpr const char* Extern_Type_Name{"PO_TechniqueCapabilityType"};
constexpr const char* Technique_Name{"Technique"};
constexpr const char* Intensity_Name{"Intensity"};
constexpr const char* Constellation_Name{"Constellation"};
constexpr const char* Stride_Name{"Stride"};
constexpr const char* PointIntensity_Name{"PointIntensity"};
constexpr const char* EdgeIntensity_Name{"EdgeIntensity"};
constexpr const char* FalseAlarmLevelUpperLimit_Name{"FalseAlarmLevelUpperLimit"};

} // namespace PO_TechniqueCapabilityType_Names

void PO_TechniqueCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TechniqueCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_TechniqueCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_TechniqueCapabilityType_Names::Technique_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTechnique().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TechniqueCapabilityType_Names::Intensity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIntensity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TechniqueCapabilityType_Names::Constellation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableConstellation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TechniqueCapabilityType_Names::Stride_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStride(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TechniqueCapabilityType_Names::PointIntensity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePointIntensity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TechniqueCapabilityType_Names::EdgeIntensity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEdgeIntensity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TechniqueCapabilityType_Names::FalseAlarmLevelUpperLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFalseAlarmLevelUpperLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    }
  }
}

std::string PO_TechniqueCapabilityType::serialize(const uci::type::PO_TechniqueCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_TechniqueCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_TechniqueCapabilityType_Names::Extern_Type_Name);
  }
  PO_TechniqueEnum::serialize(accessor.getTechnique(), node, PO_TechniqueCapabilityType_Names::Technique_Name, false);
  if (accessor.hasIntensity()) {
    FloatMinMaxType::serialize(accessor.getIntensity(), node, PO_TechniqueCapabilityType_Names::Intensity_Name);
  }
  if (accessor.hasConstellation()) {
    FloatMinMaxType::serialize(accessor.getConstellation(), node, PO_TechniqueCapabilityType_Names::Constellation_Name);
  }
  if (accessor.hasStride()) {
    FloatMinMaxType::serialize(accessor.getStride(), node, PO_TechniqueCapabilityType_Names::Stride_Name);
  }
  if (accessor.hasPointIntensity()) {
    FloatMinMaxType::serialize(accessor.getPointIntensity(), node, PO_TechniqueCapabilityType_Names::PointIntensity_Name);
  }
  if (accessor.hasEdgeIntensity()) {
    FloatMinMaxType::serialize(accessor.getEdgeIntensity(), node, PO_TechniqueCapabilityType_Names::EdgeIntensity_Name);
  }
  if (accessor.hasFalseAlarmLevelUpperLimit()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getFalseAlarmLevelUpperLimit(), node, PO_TechniqueCapabilityType_Names::FalseAlarmLevelUpperLimit_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_TechniqueCapabilityType>().release());
}

uci::type::PO_TechniqueCapabilityType& PO_TechniqueCapabilityType::create(const uci::type::PO_TechniqueCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_TechniqueCapabilityType> newAccessor{boost::make_unique<asb_uci::type::PO_TechniqueCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_TechniqueCapabilityType::destroy(uci::type::PO_TechniqueCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_TechniqueCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

