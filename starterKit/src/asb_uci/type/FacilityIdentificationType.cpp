/** @file FacilityIdentificationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FacilityIdentificationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FacilityIdentificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FacilityIdentificationType::FacilityIdentificationType() = default;

FacilityIdentificationType::~FacilityIdentificationType() = default;

void FacilityIdentificationType::copy(const uci::type::FacilityIdentificationType& accessor) {
  copyImpl(accessor, false);
}

void FacilityIdentificationType::copyImpl(const uci::type::FacilityIdentificationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FacilityIdentificationType&>(accessor);
    aFSPC_SiteIdentifier_Accessor = (accessorImpl.aFSPC_SiteIdentifier_Accessor ? accessorImpl.aFSPC_SiteIdentifier_Accessor : boost::none);
    aFSPC_SensorIdentifier_Accessor = (accessorImpl.aFSPC_SensorIdentifier_Accessor ? accessorImpl.aFSPC_SensorIdentifier_Accessor : boost::none);
    if (accessorImpl.foreignFacilityKey_Accessor) {
      setForeignFacilityKey(*(accessorImpl.foreignFacilityKey_Accessor));
    } else {
      foreignFacilityKey_Accessor.reset();
    }
  }
}

void FacilityIdentificationType::reset() noexcept {
  aFSPC_SiteIdentifier_Accessor.reset();
  aFSPC_SensorIdentifier_Accessor.reset();
  foreignFacilityKey_Accessor.reset();
}

uci::type::FacilityIdentificationType::FacilityIdentificationTypeChoice FacilityIdentificationType::getFacilityIdentificationTypeChoiceOrdinal() const noexcept {
  if (aFSPC_SiteIdentifier_Accessor) {
    return FACILITYIDENTIFICATIONTYPE_CHOICE_AFSPC_SITEIDENTIFIER;
  }
  if (aFSPC_SensorIdentifier_Accessor) {
    return FACILITYIDENTIFICATIONTYPE_CHOICE_AFSPC_SENSORIDENTIFIER;
  }
  if (foreignFacilityKey_Accessor) {
    return FACILITYIDENTIFICATIONTYPE_CHOICE_FOREIGNFACILITYKEY;
  }
  return FACILITYIDENTIFICATIONTYPE_CHOICE_NONE;
}

uci::type::FacilityIdentificationType& FacilityIdentificationType::setFacilityIdentificationTypeChoiceOrdinal(uci::type::FacilityIdentificationType::FacilityIdentificationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case FACILITYIDENTIFICATIONTYPE_CHOICE_AFSPC_SITEIDENTIFIER:
      chooseAFSPC_SiteIdentifier();
      break;
    case FACILITYIDENTIFICATIONTYPE_CHOICE_AFSPC_SENSORIDENTIFIER:
      chooseAFSPC_SensorIdentifier();
      break;
    case FACILITYIDENTIFICATIONTYPE_CHOICE_FOREIGNFACILITYKEY:
      chooseForeignFacilityKey("setFacilityIdentificationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setFacilityIdentificationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::UnsignedShort FacilityIdentificationType::getAFSPC_SiteIdentifier() const {
  if (aFSPC_SiteIdentifier_Accessor) {
    return *aFSPC_SiteIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getAFSPC_SiteIdentifier(): Unable to get AFSPC_SiteIdentifier, field not selected");
}

uci::type::FacilityIdentificationType& FacilityIdentificationType::setAFSPC_SiteIdentifier(xs::UnsignedShort value) {
  chooseAFSPC_SiteIdentifier();
  aFSPC_SiteIdentifier_Accessor = value;
  return *this;
}

bool FacilityIdentificationType::isAFSPC_SiteIdentifier() const noexcept {
  return static_cast<bool>(aFSPC_SiteIdentifier_Accessor);
}

void FacilityIdentificationType::chooseAFSPC_SiteIdentifier() {
  aFSPC_SensorIdentifier_Accessor.reset();
  foreignFacilityKey_Accessor.reset();
  if (!aFSPC_SiteIdentifier_Accessor) {
    aFSPC_SiteIdentifier_Accessor = boost::optional<asb_xs::UnsignedShort>();
  }
}

xs::UnsignedShort FacilityIdentificationType::getAFSPC_SensorIdentifier() const {
  if (aFSPC_SensorIdentifier_Accessor) {
    return *aFSPC_SensorIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getAFSPC_SensorIdentifier(): Unable to get AFSPC_SensorIdentifier, field not selected");
}

uci::type::FacilityIdentificationType& FacilityIdentificationType::setAFSPC_SensorIdentifier(xs::UnsignedShort value) {
  chooseAFSPC_SensorIdentifier();
  aFSPC_SensorIdentifier_Accessor = value;
  return *this;
}

bool FacilityIdentificationType::isAFSPC_SensorIdentifier() const noexcept {
  return static_cast<bool>(aFSPC_SensorIdentifier_Accessor);
}

void FacilityIdentificationType::chooseAFSPC_SensorIdentifier() {
  aFSPC_SiteIdentifier_Accessor.reset();
  foreignFacilityKey_Accessor.reset();
  if (!aFSPC_SensorIdentifier_Accessor) {
    aFSPC_SensorIdentifier_Accessor = boost::optional<asb_xs::UnsignedShort>();
  }
}

uci::type::ForeignKeyType& FacilityIdentificationType::getForeignFacilityKey_() const {
  if (foreignFacilityKey_Accessor) {
    return *foreignFacilityKey_Accessor;
  }
  throw uci::base::UCIException("Error in getForeignFacilityKey(): Unable to get ForeignFacilityKey, field not selected");
}

const uci::type::ForeignKeyType& FacilityIdentificationType::getForeignFacilityKey() const {
  return getForeignFacilityKey_();
}

uci::type::ForeignKeyType& FacilityIdentificationType::getForeignFacilityKey() {
  return getForeignFacilityKey_();
}

uci::type::FacilityIdentificationType& FacilityIdentificationType::setForeignFacilityKey(const uci::type::ForeignKeyType& accessor) {
  chooseForeignFacilityKey("setForeignFacilityKey", accessor.getAccessorType());
  if (&accessor != foreignFacilityKey_Accessor.get()) {
    foreignFacilityKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool FacilityIdentificationType::isForeignFacilityKey() const noexcept {
  return static_cast<bool>(foreignFacilityKey_Accessor);
}

uci::type::ForeignKeyType& FacilityIdentificationType::chooseForeignFacilityKey(const std::string& method, uci::base::accessorType::AccessorType type) {
  aFSPC_SiteIdentifier_Accessor.reset();
  aFSPC_SensorIdentifier_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!foreignFacilityKey_Accessor) || (foreignFacilityKey_Accessor->getAccessorType() != requestedType)) {
    foreignFacilityKey_Accessor = ForeignKeyType::create(type);
    if (!foreignFacilityKey_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *foreignFacilityKey_Accessor;
}

uci::type::ForeignKeyType& FacilityIdentificationType::chooseForeignFacilityKey(uci::base::accessorType::AccessorType type) {
  return chooseForeignFacilityKey("chooseForeignFacilityKey", type);
}

std::unique_ptr<FacilityIdentificationType> FacilityIdentificationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::facilityIdentificationType : type};
  return (requestedType == uci::type::accessorType::facilityIdentificationType) ? boost::make_unique<FacilityIdentificationType>() : nullptr;
}

/**  */
namespace FacilityIdentificationType_Names {

constexpr const char* Extern_Type_Name{"FacilityIdentificationType"};
constexpr const char* AFSPC_SiteIdentifier_Name{"AFSPC_SiteIdentifier"};
constexpr const char* AFSPC_SensorIdentifier_Name{"AFSPC_SensorIdentifier"};
constexpr const char* ForeignFacilityKey_Name{"ForeignFacilityKey"};

} // namespace FacilityIdentificationType_Names

void FacilityIdentificationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FacilityIdentificationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FacilityIdentificationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FacilityIdentificationType_Names::AFSPC_SiteIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAFSPC_SiteIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + FacilityIdentificationType_Names::AFSPC_SensorIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAFSPC_SensorIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + FacilityIdentificationType_Names::ForeignFacilityKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseForeignFacilityKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string FacilityIdentificationType::serialize(const uci::type::FacilityIdentificationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FacilityIdentificationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FacilityIdentificationType_Names::Extern_Type_Name);
  }
  if (accessor.isAFSPC_SiteIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getAFSPC_SiteIdentifier(), node, FacilityIdentificationType_Names::AFSPC_SiteIdentifier_Name);
  } else if (accessor.isAFSPC_SensorIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getAFSPC_SensorIdentifier(), node, FacilityIdentificationType_Names::AFSPC_SensorIdentifier_Name);
  } else if (accessor.isForeignFacilityKey()) {
    ForeignKeyType::serialize(accessor.getForeignFacilityKey(), node, FacilityIdentificationType_Names::ForeignFacilityKey_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FacilityIdentificationType& FacilityIdentificationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FacilityIdentificationType>().release());
}

uci::type::FacilityIdentificationType& FacilityIdentificationType::create(const uci::type::FacilityIdentificationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FacilityIdentificationType> newAccessor{boost::make_unique<asb_uci::type::FacilityIdentificationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FacilityIdentificationType::destroy(uci::type::FacilityIdentificationType& accessor) {
  delete dynamic_cast<asb_uci::type::FacilityIdentificationType*>(&accessor);
}

} // namespace type

} // namespace uci

