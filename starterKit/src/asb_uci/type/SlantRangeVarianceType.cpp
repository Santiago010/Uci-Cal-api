/** @file SlantRangeVarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SlantRangeVarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/SlantRangeVarianceRatesAndAccelerationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SlantRangeVarianceRatesAndAccelerationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SlantRangeVarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SlantRangeVarianceType::SlantRangeVarianceType() = default;

SlantRangeVarianceType::~SlantRangeVarianceType() = default;

void SlantRangeVarianceType::copy(const uci::type::SlantRangeVarianceType& accessor) {
  copyImpl(accessor, false);
}

void SlantRangeVarianceType::copyImpl(const uci::type::SlantRangeVarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SlantRangeVarianceType&>(accessor);
    if (accessorImpl.hasSlantRange()) {
      setSlantRange(accessorImpl.getSlantRange());
    } else {
      clearSlantRange();
    }
    if (accessorImpl.ratesAndAcceleration_Accessor) {
      setRatesAndAcceleration(*(accessorImpl.ratesAndAcceleration_Accessor));
    } else {
      ratesAndAcceleration_Accessor.reset();
    }
  }
}

void SlantRangeVarianceType::reset() noexcept {
  clearSlantRange();
  ratesAndAcceleration_Accessor.reset();
}

xs::Double SlantRangeVarianceType::getSlantRange() const {
  if (slantRange_Accessor) {
    return *slantRange_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRange(): An attempt was made to get an optional field that was not enabled, call hasSlantRange() to determine if it is safe to call getSlantRange()");
}

uci::type::SlantRangeVarianceType& SlantRangeVarianceType::setSlantRange(xs::Double value) {
  slantRange_Accessor = value;
  return *this;
}

bool SlantRangeVarianceType::hasSlantRange() const noexcept {
  return slantRange_Accessor.has_value();
}

uci::type::SlantRangeVarianceType& SlantRangeVarianceType::clearSlantRange() noexcept {
  slantRange_Accessor.reset();
  return *this;
}

uci::type::SlantRangeVarianceRatesAndAccelerationType& SlantRangeVarianceType::getRatesAndAcceleration_() const {
  if (ratesAndAcceleration_Accessor) {
    return *ratesAndAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getRatesAndAcceleration(): An attempt was made to get an optional field that was not enabled, call hasRatesAndAcceleration() to determine if it is safe to call getRatesAndAcceleration()");
}

const uci::type::SlantRangeVarianceRatesAndAccelerationType& SlantRangeVarianceType::getRatesAndAcceleration() const {
  return getRatesAndAcceleration_();
}

uci::type::SlantRangeVarianceRatesAndAccelerationType& SlantRangeVarianceType::getRatesAndAcceleration() {
  return getRatesAndAcceleration_();
}

uci::type::SlantRangeVarianceType& SlantRangeVarianceType::setRatesAndAcceleration(const uci::type::SlantRangeVarianceRatesAndAccelerationType& accessor) {
  enableRatesAndAcceleration();
  if (&accessor != ratesAndAcceleration_Accessor.get()) {
    ratesAndAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SlantRangeVarianceType::hasRatesAndAcceleration() const noexcept {
  return static_cast<bool>(ratesAndAcceleration_Accessor);
}

uci::type::SlantRangeVarianceRatesAndAccelerationType& SlantRangeVarianceType::enableRatesAndAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeVarianceRatesAndAccelerationType : type};
  if ((!ratesAndAcceleration_Accessor) || (ratesAndAcceleration_Accessor->getAccessorType() != requestedType)) {
    ratesAndAcceleration_Accessor = SlantRangeVarianceRatesAndAccelerationType::create(requestedType);
    if (!ratesAndAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enableRatesAndAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ratesAndAcceleration_Accessor;
}

uci::type::SlantRangeVarianceType& SlantRangeVarianceType::clearRatesAndAcceleration() noexcept {
  ratesAndAcceleration_Accessor.reset();
  return *this;
}

std::unique_ptr<SlantRangeVarianceType> SlantRangeVarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeVarianceType : type};
  return (requestedType == uci::type::accessorType::slantRangeVarianceType) ? boost::make_unique<SlantRangeVarianceType>() : nullptr;
}

/**  */
namespace SlantRangeVarianceType_Names {

constexpr const char* Extern_Type_Name{"SlantRangeVarianceType"};
constexpr const char* SlantRange_Name{"SlantRange"};
constexpr const char* RatesAndAcceleration_Name{"RatesAndAcceleration"};

} // namespace SlantRangeVarianceType_Names

void SlantRangeVarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SlantRangeVarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SlantRangeVarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SlantRangeVarianceType_Names::SlantRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlantRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SlantRangeVarianceType_Names::RatesAndAcceleration_Name) {
      SlantRangeVarianceRatesAndAccelerationType::deserialize(valueType.second, accessor.enableRatesAndAcceleration(), nodeName, nsPrefix);
    }
  }
}

std::string SlantRangeVarianceType::serialize(const uci::type::SlantRangeVarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SlantRangeVarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SlantRangeVarianceType_Names::Extern_Type_Name);
  }
  if (accessor.hasSlantRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSlantRange(), node, SlantRangeVarianceType_Names::SlantRange_Name);
  }
  if (accessor.hasRatesAndAcceleration()) {
    SlantRangeVarianceRatesAndAccelerationType::serialize(accessor.getRatesAndAcceleration(), node, SlantRangeVarianceType_Names::RatesAndAcceleration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SlantRangeVarianceType& SlantRangeVarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SlantRangeVarianceType>().release());
}

uci::type::SlantRangeVarianceType& SlantRangeVarianceType::create(const uci::type::SlantRangeVarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SlantRangeVarianceType> newAccessor{boost::make_unique<asb_uci::type::SlantRangeVarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SlantRangeVarianceType::destroy(uci::type::SlantRangeVarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::SlantRangeVarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

