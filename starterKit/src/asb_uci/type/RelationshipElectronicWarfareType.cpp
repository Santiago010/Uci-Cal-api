/** @file RelationshipElectronicWarfareType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RelationshipElectronicWarfareType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ElectronicWarfareRelationshipEnum.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ElectronicWarfareRelationshipEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/RelationshipElectronicWarfareType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RelationshipElectronicWarfareType::RelationshipElectronicWarfareType()
  : type_Accessor{boost::make_unique<ElectronicWarfareRelationshipEnum>()} {
}

RelationshipElectronicWarfareType::~RelationshipElectronicWarfareType() = default;

void RelationshipElectronicWarfareType::copy(const uci::type::RelationshipElectronicWarfareType& accessor) {
  copyImpl(accessor, false);
}

void RelationshipElectronicWarfareType::copyImpl(const uci::type::RelationshipElectronicWarfareType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RelationshipElectronicWarfareType&>(accessor);
    setType(*(accessorImpl.type_Accessor));
    if (accessorImpl.eWC_Commanded_Accessor) {
      setEWC_Commanded(*(accessorImpl.eWC_Commanded_Accessor));
    } else {
      eWC_Commanded_Accessor.reset();
    }
    if (accessorImpl.externalIdentifier_Accessor) {
      setExternalIdentifier(*(accessorImpl.externalIdentifier_Accessor));
    } else {
      externalIdentifier_Accessor.reset();
    }
  }
}

void RelationshipElectronicWarfareType::reset() noexcept {
  type_Accessor->reset();
  eWC_Commanded_Accessor.reset();
  externalIdentifier_Accessor.reset();
}

const uci::type::ElectronicWarfareRelationshipEnum& RelationshipElectronicWarfareType::getType() const {
  return *type_Accessor;
}

uci::type::ElectronicWarfareRelationshipEnum& RelationshipElectronicWarfareType::getType() {
  return *type_Accessor;
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::setType(const uci::type::ElectronicWarfareRelationshipEnum& accessor) {
  if (&accessor != type_Accessor.get()) {
    type_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::setType(uci::type::ElectronicWarfareRelationshipEnum::EnumerationItem value) {
  type_Accessor->setValue(value);
  return *this;
}


uci::type::EmptyType& RelationshipElectronicWarfareType::getEWC_Commanded_() const {
  if (eWC_Commanded_Accessor) {
    return *eWC_Commanded_Accessor;
  }
  throw uci::base::UCIException("Error in getEWC_Commanded(): An attempt was made to get an optional field that was not enabled, call hasEWC_Commanded() to determine if it is safe to call getEWC_Commanded()");
}

const uci::type::EmptyType& RelationshipElectronicWarfareType::getEWC_Commanded() const {
  return getEWC_Commanded_();
}

uci::type::EmptyType& RelationshipElectronicWarfareType::getEWC_Commanded() {
  return getEWC_Commanded_();
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::setEWC_Commanded(const uci::type::EmptyType& value) {
  return setEWC_Commanded(value.c_str());
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::setEWC_Commanded(const std::string& value) {
  return setEWC_Commanded(value.c_str());
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::setEWC_Commanded(const char* value) {
  enableEWC_Commanded().setStringValue(value);
  return *this;
}

bool RelationshipElectronicWarfareType::hasEWC_Commanded() const noexcept {
  return static_cast<bool>(eWC_Commanded_Accessor);
}

uci::type::EmptyType& RelationshipElectronicWarfareType::enableEWC_Commanded(uci::base::accessorType::AccessorType type) {
  if (!eWC_Commanded_Accessor) {
    eWC_Commanded_Accessor = EmptyType::create(type);
  }
  return *eWC_Commanded_Accessor;
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::clearEWC_Commanded() noexcept {
  eWC_Commanded_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& RelationshipElectronicWarfareType::getExternalIdentifier_() const {
  if (externalIdentifier_Accessor) {
    return *externalIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getExternalIdentifier(): An attempt was made to get an optional field that was not enabled, call hasExternalIdentifier() to determine if it is safe to call getExternalIdentifier()");
}

const uci::type::ForeignKeyType& RelationshipElectronicWarfareType::getExternalIdentifier() const {
  return getExternalIdentifier_();
}

uci::type::ForeignKeyType& RelationshipElectronicWarfareType::getExternalIdentifier() {
  return getExternalIdentifier_();
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::setExternalIdentifier(const uci::type::ForeignKeyType& accessor) {
  enableExternalIdentifier(accessor.getAccessorType());
  if (&accessor != externalIdentifier_Accessor.get()) {
    externalIdentifier_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RelationshipElectronicWarfareType::hasExternalIdentifier() const noexcept {
  return static_cast<bool>(externalIdentifier_Accessor);
}

uci::type::ForeignKeyType& RelationshipElectronicWarfareType::enableExternalIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!externalIdentifier_Accessor) || (externalIdentifier_Accessor->getAccessorType() != requestedType)) {
    externalIdentifier_Accessor = ForeignKeyType::create(requestedType);
    if (!externalIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableExternalIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *externalIdentifier_Accessor;
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::clearExternalIdentifier() noexcept {
  externalIdentifier_Accessor.reset();
  return *this;
}

std::unique_ptr<RelationshipElectronicWarfareType> RelationshipElectronicWarfareType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relationshipElectronicWarfareType : type};
  return (requestedType == uci::type::accessorType::relationshipElectronicWarfareType) ? boost::make_unique<RelationshipElectronicWarfareType>() : nullptr;
}

/**  */
namespace RelationshipElectronicWarfareType_Names {

constexpr const char* Extern_Type_Name{"RelationshipElectronicWarfareType"};
constexpr const char* Type_Name{"Type"};
constexpr const char* EWC_Commanded_Name{"EWC_Commanded"};
constexpr const char* ExternalIdentifier_Name{"ExternalIdentifier"};

} // namespace RelationshipElectronicWarfareType_Names

void RelationshipElectronicWarfareType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RelationshipElectronicWarfareType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RelationshipElectronicWarfareType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RelationshipElectronicWarfareType_Names::Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RelationshipElectronicWarfareType_Names::EWC_Commanded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEWC_Commanded(*value);
      }
    } else if (valueType.first == nsPrefix + RelationshipElectronicWarfareType_Names::ExternalIdentifier_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExternalIdentifier(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RelationshipElectronicWarfareType::serialize(const uci::type::RelationshipElectronicWarfareType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RelationshipElectronicWarfareType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RelationshipElectronicWarfareType_Names::Extern_Type_Name);
  }
  ElectronicWarfareRelationshipEnum::serialize(accessor.getType(), node, RelationshipElectronicWarfareType_Names::Type_Name, false);
  if (accessor.hasEWC_Commanded()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getEWC_Commanded(), node, RelationshipElectronicWarfareType_Names::EWC_Commanded_Name);
  }
  if (accessor.hasExternalIdentifier()) {
    ForeignKeyType::serialize(accessor.getExternalIdentifier(), node, RelationshipElectronicWarfareType_Names::ExternalIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RelationshipElectronicWarfareType>().release());
}

uci::type::RelationshipElectronicWarfareType& RelationshipElectronicWarfareType::create(const uci::type::RelationshipElectronicWarfareType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RelationshipElectronicWarfareType> newAccessor{boost::make_unique<asb_uci::type::RelationshipElectronicWarfareType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RelationshipElectronicWarfareType::destroy(uci::type::RelationshipElectronicWarfareType& accessor) {
  delete dynamic_cast<asb_uci::type::RelationshipElectronicWarfareType*>(&accessor);
}

} // namespace type

} // namespace uci

