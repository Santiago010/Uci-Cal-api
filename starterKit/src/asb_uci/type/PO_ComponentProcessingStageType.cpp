/** @file PO_ComponentProcessingStageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentProcessingStageType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControllabilityA_Type.h"
#include "../../../include/asb_uci/type/DoubleMinMaxType.h"
#include "../../../include/asb_uci/type/PO_FPA_ID_Type.h"
#include "../../../include/asb_uci/type/PO_ProcessingStageID_Type.h"
#include "../../../include/asb_uci/type/PO_ProcessingStageTypeEnum.h"
#include "../../../include/asb_uci/type/PixelScalingSettingsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControllabilityA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DoubleMinMaxType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentProcessingStageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_FPA_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProcessingStageID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProcessingStageTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PixelScalingSettingsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentProcessingStageType::PO_ComponentProcessingStageType()
  : stageID_Accessor{boost::make_unique<PO_ProcessingStageID_Type>()},
    fPA_ID_Accessor{boost::make_unique<FPA_ID>(1, SIZE_MAX)},
    stageType_Accessor{boost::make_unique<PO_ProcessingStageTypeEnum>()} {
}

PO_ComponentProcessingStageType::~PO_ComponentProcessingStageType() = default;

void PO_ComponentProcessingStageType::copy(const uci::type::PO_ComponentProcessingStageType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentProcessingStageType::copyImpl(const uci::type::PO_ComponentProcessingStageType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentProcessingStageType&>(accessor);
    setStageID(*(accessorImpl.stageID_Accessor));
    setFPA_ID(*(accessorImpl.fPA_ID_Accessor));
    setStageType(*(accessorImpl.stageType_Accessor));
    if (accessorImpl.pixelScalingSettings_Accessor) {
      setPixelScalingSettings(*(accessorImpl.pixelScalingSettings_Accessor));
    } else {
      pixelScalingSettings_Accessor.reset();
    }
    if (accessorImpl.gammaValueSettings_Accessor) {
      setGammaValueSettings(*(accessorImpl.gammaValueSettings_Accessor));
    } else {
      gammaValueSettings_Accessor.reset();
    }
    if (accessorImpl.controllability_Accessor) {
      setControllability(*(accessorImpl.controllability_Accessor));
    } else {
      controllability_Accessor.reset();
    }
  }
}

void PO_ComponentProcessingStageType::reset() noexcept {
  stageID_Accessor->reset();
  fPA_ID_Accessor->reset();
  stageType_Accessor->reset();
  pixelScalingSettings_Accessor.reset();
  gammaValueSettings_Accessor.reset();
  controllability_Accessor.reset();
}

const uci::type::PO_ProcessingStageID_Type& PO_ComponentProcessingStageType::getStageID() const {
  return *stageID_Accessor;
}

uci::type::PO_ProcessingStageID_Type& PO_ComponentProcessingStageType::getStageID() {
  return *stageID_Accessor;
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::setStageID(const uci::type::PO_ProcessingStageID_Type& accessor) {
  if (&accessor != stageID_Accessor.get()) {
    stageID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentProcessingStageType::FPA_ID& PO_ComponentProcessingStageType::getFPA_ID() const {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentProcessingStageType::FPA_ID& PO_ComponentProcessingStageType::getFPA_ID() {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::setFPA_ID(const uci::type::PO_ComponentProcessingStageType::FPA_ID& accessor) {
  if (&accessor != fPA_ID_Accessor.get()) {
    fPA_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ProcessingStageTypeEnum& PO_ComponentProcessingStageType::getStageType() const {
  return *stageType_Accessor;
}

uci::type::PO_ProcessingStageTypeEnum& PO_ComponentProcessingStageType::getStageType() {
  return *stageType_Accessor;
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::setStageType(const uci::type::PO_ProcessingStageTypeEnum& accessor) {
  if (&accessor != stageType_Accessor.get()) {
    stageType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::setStageType(uci::type::PO_ProcessingStageTypeEnum::EnumerationItem value) {
  stageType_Accessor->setValue(value);
  return *this;
}


uci::type::PixelScalingSettingsType& PO_ComponentProcessingStageType::getPixelScalingSettings_() const {
  if (pixelScalingSettings_Accessor) {
    return *pixelScalingSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelScalingSettings(): An attempt was made to get an optional field that was not enabled, call hasPixelScalingSettings() to determine if it is safe to call getPixelScalingSettings()");
}

const uci::type::PixelScalingSettingsType& PO_ComponentProcessingStageType::getPixelScalingSettings() const {
  return getPixelScalingSettings_();
}

uci::type::PixelScalingSettingsType& PO_ComponentProcessingStageType::getPixelScalingSettings() {
  return getPixelScalingSettings_();
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::setPixelScalingSettings(const uci::type::PixelScalingSettingsType& accessor) {
  enablePixelScalingSettings();
  if (&accessor != pixelScalingSettings_Accessor.get()) {
    pixelScalingSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentProcessingStageType::hasPixelScalingSettings() const noexcept {
  return static_cast<bool>(pixelScalingSettings_Accessor);
}

uci::type::PixelScalingSettingsType& PO_ComponentProcessingStageType::enablePixelScalingSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pixelScalingSettingsType : type};
  if ((!pixelScalingSettings_Accessor) || (pixelScalingSettings_Accessor->getAccessorType() != requestedType)) {
    pixelScalingSettings_Accessor = PixelScalingSettingsType::create(requestedType);
    if (!pixelScalingSettings_Accessor) {
      throw uci::base::UCIException("Error in enablePixelScalingSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelScalingSettings_Accessor;
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::clearPixelScalingSettings() noexcept {
  pixelScalingSettings_Accessor.reset();
  return *this;
}

uci::type::DoubleMinMaxType& PO_ComponentProcessingStageType::getGammaValueSettings_() const {
  if (gammaValueSettings_Accessor) {
    return *gammaValueSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getGammaValueSettings(): An attempt was made to get an optional field that was not enabled, call hasGammaValueSettings() to determine if it is safe to call getGammaValueSettings()");
}

const uci::type::DoubleMinMaxType& PO_ComponentProcessingStageType::getGammaValueSettings() const {
  return getGammaValueSettings_();
}

uci::type::DoubleMinMaxType& PO_ComponentProcessingStageType::getGammaValueSettings() {
  return getGammaValueSettings_();
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::setGammaValueSettings(const uci::type::DoubleMinMaxType& accessor) {
  enableGammaValueSettings();
  if (&accessor != gammaValueSettings_Accessor.get()) {
    gammaValueSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentProcessingStageType::hasGammaValueSettings() const noexcept {
  return static_cast<bool>(gammaValueSettings_Accessor);
}

uci::type::DoubleMinMaxType& PO_ComponentProcessingStageType::enableGammaValueSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::doubleMinMaxType : type};
  if ((!gammaValueSettings_Accessor) || (gammaValueSettings_Accessor->getAccessorType() != requestedType)) {
    gammaValueSettings_Accessor = DoubleMinMaxType::create(requestedType);
    if (!gammaValueSettings_Accessor) {
      throw uci::base::UCIException("Error in enableGammaValueSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gammaValueSettings_Accessor;
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::clearGammaValueSettings() noexcept {
  gammaValueSettings_Accessor.reset();
  return *this;
}

uci::type::ComponentControllabilityA_Type& PO_ComponentProcessingStageType::getControllability_() const {
  if (controllability_Accessor) {
    return *controllability_Accessor;
  }
  throw uci::base::UCIException("Error in getControllability(): An attempt was made to get an optional field that was not enabled, call hasControllability() to determine if it is safe to call getControllability()");
}

const uci::type::ComponentControllabilityA_Type& PO_ComponentProcessingStageType::getControllability() const {
  return getControllability_();
}

uci::type::ComponentControllabilityA_Type& PO_ComponentProcessingStageType::getControllability() {
  return getControllability_();
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::setControllability(const uci::type::ComponentControllabilityA_Type& accessor) {
  enableControllability();
  if (&accessor != controllability_Accessor.get()) {
    controllability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentProcessingStageType::hasControllability() const noexcept {
  return static_cast<bool>(controllability_Accessor);
}

uci::type::ComponentControllabilityA_Type& PO_ComponentProcessingStageType::enableControllability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControllabilityA_Type : type};
  if ((!controllability_Accessor) || (controllability_Accessor->getAccessorType() != requestedType)) {
    controllability_Accessor = ComponentControllabilityA_Type::create(requestedType);
    if (!controllability_Accessor) {
      throw uci::base::UCIException("Error in enableControllability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controllability_Accessor;
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::clearControllability() noexcept {
  controllability_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentProcessingStageType> PO_ComponentProcessingStageType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentProcessingStageType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentProcessingStageType) ? boost::make_unique<PO_ComponentProcessingStageType>() : nullptr;
}

/**  */
namespace PO_ComponentProcessingStageType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentProcessingStageType"};
constexpr const char* StageID_Name{"StageID"};
constexpr const char* FPA_ID_Name{"FPA_ID"};
constexpr const char* StageType_Name{"StageType"};
constexpr const char* PixelScalingSettings_Name{"PixelScalingSettings"};
constexpr const char* GammaValueSettings_Name{"GammaValueSettings"};
constexpr const char* Controllability_Name{"Controllability"};

} // namespace PO_ComponentProcessingStageType_Names

void PO_ComponentProcessingStageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentProcessingStageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentProcessingStageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentProcessingStageType_Names::StageID_Name) {
      PO_ProcessingStageID_Type::deserialize(valueType.second, accessor.getStageID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentProcessingStageType_Names::FPA_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentProcessingStageType::FPA_ID& boundedList = accessor.getFPA_ID();
        const uci::type::PO_ComponentProcessingStageType::FPA_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_FPA_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentProcessingStageType_Names::StageType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getStageType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentProcessingStageType_Names::PixelScalingSettings_Name) {
      PixelScalingSettingsType::deserialize(valueType.second, accessor.enablePixelScalingSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentProcessingStageType_Names::GammaValueSettings_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableGammaValueSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentProcessingStageType_Names::Controllability_Name) {
      ComponentControllabilityA_Type::deserialize(valueType.second, accessor.enableControllability(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentProcessingStageType::serialize(const uci::type::PO_ComponentProcessingStageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentProcessingStageType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentProcessingStageType_Names::Extern_Type_Name);
  }
  PO_ProcessingStageID_Type::serialize(accessor.getStageID(), node, PO_ComponentProcessingStageType_Names::StageID_Name);
  {
    const uci::type::PO_ComponentProcessingStageType::FPA_ID& boundedList = accessor.getFPA_ID();
    for (uci::type::PO_ComponentProcessingStageType::FPA_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_FPA_ID_Type::serialize(boundedList.at(i), node, PO_ComponentProcessingStageType_Names::FPA_ID_Name);
    }
  }
  PO_ProcessingStageTypeEnum::serialize(accessor.getStageType(), node, PO_ComponentProcessingStageType_Names::StageType_Name, false);
  if (accessor.hasPixelScalingSettings()) {
    PixelScalingSettingsType::serialize(accessor.getPixelScalingSettings(), node, PO_ComponentProcessingStageType_Names::PixelScalingSettings_Name);
  }
  if (accessor.hasGammaValueSettings()) {
    DoubleMinMaxType::serialize(accessor.getGammaValueSettings(), node, PO_ComponentProcessingStageType_Names::GammaValueSettings_Name);
  }
  if (accessor.hasControllability()) {
    ComponentControllabilityA_Type::serialize(accessor.getControllability(), node, PO_ComponentProcessingStageType_Names::Controllability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentProcessingStageType>().release());
}

uci::type::PO_ComponentProcessingStageType& PO_ComponentProcessingStageType::create(const uci::type::PO_ComponentProcessingStageType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentProcessingStageType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentProcessingStageType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentProcessingStageType::destroy(uci::type::PO_ComponentProcessingStageType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentProcessingStageType*>(&accessor);
}

} // namespace type

} // namespace uci

