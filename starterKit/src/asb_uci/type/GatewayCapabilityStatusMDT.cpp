/** @file GatewayCapabilityStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/GatewayCapabilityStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AvailableConnectionType.h"
#include "asb_uci/type/CapabilityStatusBaseType.h"
#include "asb_uci/type/GatewayCapabilityStatusType.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AvailableConnectionType.h"
#include "uci/type/GatewayCapabilityStatusMDT.h"
#include "uci/type/GatewayCapabilityStatusType.h"
#include "uci/type/ServiceID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayCapabilityStatusMDT::GatewayCapabilityStatusMDT()
  : gatewayServiceID_Accessor{boost::make_unique<ServiceID_Type>()},
    capabilityStatus_Accessor{boost::make_unique<CapabilityStatus>(1, SIZE_MAX)} {
}

GatewayCapabilityStatusMDT::~GatewayCapabilityStatusMDT() = default;

void GatewayCapabilityStatusMDT::copy(const uci::type::GatewayCapabilityStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void GatewayCapabilityStatusMDT::copyImpl(const uci::type::GatewayCapabilityStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const GatewayCapabilityStatusMDT&>(accessor);
    setGatewayServiceID(*(accessorImpl.gatewayServiceID_Accessor));
    setCapabilityStatus(*(accessorImpl.capabilityStatus_Accessor));
    if (accessorImpl.availConnections_Accessor) {
      setAvailConnections(*(accessorImpl.availConnections_Accessor));
    } else {
      availConnections_Accessor.reset();
    }
  }
}

void GatewayCapabilityStatusMDT::reset() noexcept {
  CapabilityStatusBaseType::reset();
  gatewayServiceID_Accessor->reset();
  capabilityStatus_Accessor->reset();
  availConnections_Accessor.reset();
}

const uci::type::ServiceID_Type& GatewayCapabilityStatusMDT::getGatewayServiceID() const {
  return *gatewayServiceID_Accessor;
}

uci::type::ServiceID_Type& GatewayCapabilityStatusMDT::getGatewayServiceID() {
  return *gatewayServiceID_Accessor;
}

uci::type::GatewayCapabilityStatusMDT& GatewayCapabilityStatusMDT::setGatewayServiceID(const uci::type::ServiceID_Type& accessor) {
  if (&accessor != gatewayServiceID_Accessor.get()) {
    gatewayServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::GatewayCapabilityStatusMDT::CapabilityStatus& GatewayCapabilityStatusMDT::getCapabilityStatus() const {
  return *capabilityStatus_Accessor;
}

uci::type::GatewayCapabilityStatusMDT::CapabilityStatus& GatewayCapabilityStatusMDT::getCapabilityStatus() {
  return *capabilityStatus_Accessor;
}

uci::type::GatewayCapabilityStatusMDT& GatewayCapabilityStatusMDT::setCapabilityStatus(const uci::type::GatewayCapabilityStatusMDT::CapabilityStatus& accessor) {
  if (&accessor != capabilityStatus_Accessor.get()) {
    capabilityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AvailableConnectionType& GatewayCapabilityStatusMDT::getAvailConnections_() const {
  if (availConnections_Accessor) {
    return *availConnections_Accessor;
  }
  throw uci::base::UCIException("Error in getAvailConnections(): An attempt was made to get an optional field that was not enabled, call hasAvailConnections() to determine if it is safe to call getAvailConnections()");
}

const uci::type::AvailableConnectionType& GatewayCapabilityStatusMDT::getAvailConnections() const {
  return getAvailConnections_();
}

uci::type::AvailableConnectionType& GatewayCapabilityStatusMDT::getAvailConnections() {
  return getAvailConnections_();
}

uci::type::GatewayCapabilityStatusMDT& GatewayCapabilityStatusMDT::setAvailConnections(const uci::type::AvailableConnectionType& accessor) {
  enableAvailConnections();
  if (&accessor != availConnections_Accessor.get()) {
    availConnections_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayCapabilityStatusMDT::hasAvailConnections() const noexcept {
  return static_cast<bool>(availConnections_Accessor);
}

uci::type::AvailableConnectionType& GatewayCapabilityStatusMDT::enableAvailConnections(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::availableConnectionType : type};
  if ((!availConnections_Accessor) || (availConnections_Accessor->getAccessorType() != requestedType)) {
    availConnections_Accessor = AvailableConnectionType::create(requestedType);
    if (!availConnections_Accessor) {
      throw uci::base::UCIException("Error in enableAvailConnections(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *availConnections_Accessor;
}

uci::type::GatewayCapabilityStatusMDT& GatewayCapabilityStatusMDT::clearAvailConnections() noexcept {
  availConnections_Accessor.reset();
  return *this;
}

std::unique_ptr<GatewayCapabilityStatusMDT> GatewayCapabilityStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayCapabilityStatusMDT : type};
  return (requestedType == uci::type::accessorType::gatewayCapabilityStatusMDT) ? boost::make_unique<GatewayCapabilityStatusMDT>() : nullptr;
}

/**  */
namespace GatewayCapabilityStatusMDT_Names {

constexpr const char* Extern_Type_Name{"GatewayCapabilityStatusMDT"};
constexpr const char* GatewayServiceID_Name{"GatewayServiceID"};
constexpr const char* CapabilityStatus_Name{"CapabilityStatus"};
constexpr const char* AvailConnections_Name{"AvailConnections"};

} // namespace GatewayCapabilityStatusMDT_Names

void GatewayCapabilityStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayCapabilityStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayCapabilityStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayCapabilityStatusMDT_Names::GatewayServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.getGatewayServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayCapabilityStatusMDT_Names::CapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::GatewayCapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
        const uci::type::GatewayCapabilityStatusMDT::CapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GatewayCapabilityStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + GatewayCapabilityStatusMDT_Names::AvailConnections_Name) {
      AvailableConnectionType::deserialize(valueType.second, accessor.enableAvailConnections(), nodeName, nsPrefix);
    }
  }
  CapabilityStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string GatewayCapabilityStatusMDT::serialize(const uci::type::GatewayCapabilityStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayCapabilityStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayCapabilityStatusMDT_Names::Extern_Type_Name);
  }
  CapabilityStatusBaseType::serialize(accessor, node, "", false, false, false);
  ServiceID_Type::serialize(accessor.getGatewayServiceID(), node, GatewayCapabilityStatusMDT_Names::GatewayServiceID_Name);
  {
    const uci::type::GatewayCapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
    for (uci::type::GatewayCapabilityStatusMDT::CapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::GatewayCapabilityStatusType::serialize(boundedList.at(i), node, GatewayCapabilityStatusMDT_Names::CapabilityStatus_Name);
    }
  }
  if (accessor.hasAvailConnections()) {
    AvailableConnectionType::serialize(accessor.getAvailConnections(), node, GatewayCapabilityStatusMDT_Names::AvailConnections_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayCapabilityStatusMDT& GatewayCapabilityStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayCapabilityStatusMDT>().release());
}

uci::type::GatewayCapabilityStatusMDT& GatewayCapabilityStatusMDT::create(const uci::type::GatewayCapabilityStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayCapabilityStatusMDT> newAccessor{boost::make_unique<asb_uci::type::GatewayCapabilityStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayCapabilityStatusMDT::destroy(uci::type::GatewayCapabilityStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayCapabilityStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

