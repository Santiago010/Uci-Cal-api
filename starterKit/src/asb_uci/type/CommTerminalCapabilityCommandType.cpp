/** @file CommTerminalCapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommTerminalCapabilityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityCommandFrequencyType.h"
#include "../../../include/asb_uci/type/CommConnectionCommandEnum.h"
#include "../../../include/asb_uci/type/CommControlType.h"
#include "../../../include/asb_uci/type/CommLinkPortMapType.h"
#include "../../../include/asb_uci/type/CommProfileID_Type.h"
#include "../../../include/asb_uci/type/CommWaveformCapabilityCommandPET.h"
#include "../../../include/asb_uci/type/DependentActivityType.h"
#include "../../../include/asb_uci/type/NetworkLinkID_Type.h"
#include "../../../include/asb_uci/type/ResourceSelectionType.h"
#include "../../../include/asb_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "../../../include/asb_uci/type/SubsystemID_Type.h"
#include "../../../include/asb_uci/type/VerboseStatusType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConnectionCommandEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLinkPortMapType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommProfileID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommTerminalCapabilityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommWaveformCapabilityCommandPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DependentActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkLinkID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceSelectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VerboseStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommTerminalCapabilityCommandType::CommTerminalCapabilityCommandType()
  : subsystemID_Accessor{boost::make_unique<SubsystemID_Type>()},
    resourceSelection_Accessor{boost::make_unique<ResourceSelection>(0, SIZE_MAX)} {
}

CommTerminalCapabilityCommandType::~CommTerminalCapabilityCommandType() = default;

void CommTerminalCapabilityCommandType::copy(const uci::type::CommTerminalCapabilityCommandType& accessor) {
  copyImpl(accessor, false);
}

void CommTerminalCapabilityCommandType::copyImpl(const uci::type::CommTerminalCapabilityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureCapabilityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommTerminalCapabilityCommandType&>(accessor);
    setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    setResourceSelection(*(accessorImpl.resourceSelection_Accessor));
    if (accessorImpl.dependentActivity_Accessor) {
      setDependentActivity(*(accessorImpl.dependentActivity_Accessor));
    } else {
      dependentActivity_Accessor.reset();
    }
    if (accessorImpl.connectionRequest_Accessor) {
      setConnectionRequest(*(accessorImpl.connectionRequest_Accessor));
    } else {
      connectionRequest_Accessor.reset();
    }
    if (accessorImpl.commonSettingsChange_Accessor) {
      setCommonSettingsChange(*(accessorImpl.commonSettingsChange_Accessor));
    } else {
      commonSettingsChange_Accessor.reset();
    }
    if (accessorImpl.activateProfileID_Accessor) {
      setActivateProfileID(*(accessorImpl.activateProfileID_Accessor));
    } else {
      activateProfileID_Accessor.reset();
    }
    if (accessorImpl.linkPortAssignments_Accessor) {
      setLinkPortAssignments(*(accessorImpl.linkPortAssignments_Accessor));
    } else {
      linkPortAssignments_Accessor.reset();
    }
    if (accessorImpl.networkLinkID_Accessor) {
      setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    } else {
      networkLinkID_Accessor.reset();
    }
    if (accessorImpl.verboseStatus_Accessor) {
      setVerboseStatus(*(accessorImpl.verboseStatus_Accessor));
    } else {
      verboseStatus_Accessor.reset();
    }
    if (accessorImpl.waveformSpecificSettings_Accessor) {
      setWaveformSpecificSettings(*(accessorImpl.waveformSpecificSettings_Accessor));
    } else {
      waveformSpecificSettings_Accessor.reset();
    }
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
  }
}

void CommTerminalCapabilityCommandType::reset() noexcept {
  SharedRF_ApertureCapabilityCommandBaseType::reset();
  subsystemID_Accessor->reset();
  resourceSelection_Accessor->reset();
  dependentActivity_Accessor.reset();
  connectionRequest_Accessor.reset();
  commonSettingsChange_Accessor.reset();
  activateProfileID_Accessor.reset();
  linkPortAssignments_Accessor.reset();
  networkLinkID_Accessor.reset();
  verboseStatus_Accessor.reset();
  waveformSpecificSettings_Accessor.reset();
  frequency_Accessor.reset();
}

const uci::type::SubsystemID_Type& CommTerminalCapabilityCommandType::getSubsystemID() const {
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& CommTerminalCapabilityCommandType::getSubsystemID() {
  return *subsystemID_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityCommandType::ResourceSelection& CommTerminalCapabilityCommandType::getResourceSelection() const {
  return *resourceSelection_Accessor;
}

uci::type::CommTerminalCapabilityCommandType::ResourceSelection& CommTerminalCapabilityCommandType::getResourceSelection() {
  return *resourceSelection_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setResourceSelection(const uci::type::CommTerminalCapabilityCommandType::ResourceSelection& accessor) {
  if (&accessor != resourceSelection_Accessor.get()) {
    resourceSelection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DependentActivityType& CommTerminalCapabilityCommandType::getDependentActivity_() const {
  if (dependentActivity_Accessor) {
    return *dependentActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getDependentActivity(): An attempt was made to get an optional field that was not enabled, call hasDependentActivity() to determine if it is safe to call getDependentActivity()");
}

const uci::type::DependentActivityType& CommTerminalCapabilityCommandType::getDependentActivity() const {
  return getDependentActivity_();
}

uci::type::DependentActivityType& CommTerminalCapabilityCommandType::getDependentActivity() {
  return getDependentActivity_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setDependentActivity(const uci::type::DependentActivityType& accessor) {
  enableDependentActivity();
  if (&accessor != dependentActivity_Accessor.get()) {
    dependentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasDependentActivity() const noexcept {
  return static_cast<bool>(dependentActivity_Accessor);
}

uci::type::DependentActivityType& CommTerminalCapabilityCommandType::enableDependentActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dependentActivityType : type};
  if ((!dependentActivity_Accessor) || (dependentActivity_Accessor->getAccessorType() != requestedType)) {
    dependentActivity_Accessor = DependentActivityType::create(requestedType);
    if (!dependentActivity_Accessor) {
      throw uci::base::UCIException("Error in enableDependentActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dependentActivity_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearDependentActivity() noexcept {
  dependentActivity_Accessor.reset();
  return *this;
}

uci::type::CommConnectionCommandEnum& CommTerminalCapabilityCommandType::getConnectionRequest_() const {
  if (connectionRequest_Accessor) {
    return *connectionRequest_Accessor;
  }
  throw uci::base::UCIException("Error in getConnectionRequest(): An attempt was made to get an optional field that was not enabled, call hasConnectionRequest() to determine if it is safe to call getConnectionRequest()");
}

const uci::type::CommConnectionCommandEnum& CommTerminalCapabilityCommandType::getConnectionRequest() const {
  return getConnectionRequest_();
}

uci::type::CommConnectionCommandEnum& CommTerminalCapabilityCommandType::getConnectionRequest() {
  return getConnectionRequest_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setConnectionRequest(const uci::type::CommConnectionCommandEnum& accessor) {
  enableConnectionRequest();
  if (&accessor != connectionRequest_Accessor.get()) {
    connectionRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setConnectionRequest(const uci::type::CommConnectionCommandEnum::EnumerationItem value) {
  enableConnectionRequest().setValue(value);
  return *this;
}

bool CommTerminalCapabilityCommandType::hasConnectionRequest() const noexcept {
  return static_cast<bool>(connectionRequest_Accessor);
}

uci::type::CommConnectionCommandEnum& CommTerminalCapabilityCommandType::enableConnectionRequest(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConnectionCommandEnum : type};
  if ((!connectionRequest_Accessor) || (connectionRequest_Accessor->getAccessorType() != requestedType)) {
    connectionRequest_Accessor = CommConnectionCommandEnum::create(requestedType);
    if (!connectionRequest_Accessor) {
      throw uci::base::UCIException("Error in enableConnectionRequest(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *connectionRequest_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearConnectionRequest() noexcept {
  connectionRequest_Accessor.reset();
  return *this;
}

uci::type::CommControlType& CommTerminalCapabilityCommandType::getCommonSettingsChange_() const {
  if (commonSettingsChange_Accessor) {
    return *commonSettingsChange_Accessor;
  }
  throw uci::base::UCIException("Error in getCommonSettingsChange(): An attempt was made to get an optional field that was not enabled, call hasCommonSettingsChange() to determine if it is safe to call getCommonSettingsChange()");
}

const uci::type::CommControlType& CommTerminalCapabilityCommandType::getCommonSettingsChange() const {
  return getCommonSettingsChange_();
}

uci::type::CommControlType& CommTerminalCapabilityCommandType::getCommonSettingsChange() {
  return getCommonSettingsChange_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setCommonSettingsChange(const uci::type::CommControlType& accessor) {
  enableCommonSettingsChange();
  if (&accessor != commonSettingsChange_Accessor.get()) {
    commonSettingsChange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasCommonSettingsChange() const noexcept {
  return static_cast<bool>(commonSettingsChange_Accessor);
}

uci::type::CommControlType& CommTerminalCapabilityCommandType::enableCommonSettingsChange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commControlType : type};
  if ((!commonSettingsChange_Accessor) || (commonSettingsChange_Accessor->getAccessorType() != requestedType)) {
    commonSettingsChange_Accessor = CommControlType::create(requestedType);
    if (!commonSettingsChange_Accessor) {
      throw uci::base::UCIException("Error in enableCommonSettingsChange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commonSettingsChange_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearCommonSettingsChange() noexcept {
  commonSettingsChange_Accessor.reset();
  return *this;
}

uci::type::CommProfileID_Type& CommTerminalCapabilityCommandType::getActivateProfileID_() const {
  if (activateProfileID_Accessor) {
    return *activateProfileID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivateProfileID(): An attempt was made to get an optional field that was not enabled, call hasActivateProfileID() to determine if it is safe to call getActivateProfileID()");
}

const uci::type::CommProfileID_Type& CommTerminalCapabilityCommandType::getActivateProfileID() const {
  return getActivateProfileID_();
}

uci::type::CommProfileID_Type& CommTerminalCapabilityCommandType::getActivateProfileID() {
  return getActivateProfileID_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setActivateProfileID(const uci::type::CommProfileID_Type& accessor) {
  enableActivateProfileID();
  if (&accessor != activateProfileID_Accessor.get()) {
    activateProfileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasActivateProfileID() const noexcept {
  return static_cast<bool>(activateProfileID_Accessor);
}

uci::type::CommProfileID_Type& CommTerminalCapabilityCommandType::enableActivateProfileID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commProfileID_Type : type};
  if ((!activateProfileID_Accessor) || (activateProfileID_Accessor->getAccessorType() != requestedType)) {
    activateProfileID_Accessor = CommProfileID_Type::create(requestedType);
    if (!activateProfileID_Accessor) {
      throw uci::base::UCIException("Error in enableActivateProfileID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activateProfileID_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearActivateProfileID() noexcept {
  activateProfileID_Accessor.reset();
  return *this;
}

uci::type::CommLinkPortMapType& CommTerminalCapabilityCommandType::getLinkPortAssignments_() const {
  if (linkPortAssignments_Accessor) {
    return *linkPortAssignments_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkPortAssignments(): An attempt was made to get an optional field that was not enabled, call hasLinkPortAssignments() to determine if it is safe to call getLinkPortAssignments()");
}

const uci::type::CommLinkPortMapType& CommTerminalCapabilityCommandType::getLinkPortAssignments() const {
  return getLinkPortAssignments_();
}

uci::type::CommLinkPortMapType& CommTerminalCapabilityCommandType::getLinkPortAssignments() {
  return getLinkPortAssignments_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setLinkPortAssignments(const uci::type::CommLinkPortMapType& accessor) {
  enableLinkPortAssignments();
  if (&accessor != linkPortAssignments_Accessor.get()) {
    linkPortAssignments_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasLinkPortAssignments() const noexcept {
  return static_cast<bool>(linkPortAssignments_Accessor);
}

uci::type::CommLinkPortMapType& CommTerminalCapabilityCommandType::enableLinkPortAssignments(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkPortMapType : type};
  if ((!linkPortAssignments_Accessor) || (linkPortAssignments_Accessor->getAccessorType() != requestedType)) {
    linkPortAssignments_Accessor = CommLinkPortMapType::create(requestedType);
    if (!linkPortAssignments_Accessor) {
      throw uci::base::UCIException("Error in enableLinkPortAssignments(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *linkPortAssignments_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearLinkPortAssignments() noexcept {
  linkPortAssignments_Accessor.reset();
  return *this;
}

uci::type::NetworkLinkID_Type& CommTerminalCapabilityCommandType::getNetworkLinkID_() const {
  if (networkLinkID_Accessor) {
    return *networkLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkLinkID(): An attempt was made to get an optional field that was not enabled, call hasNetworkLinkID() to determine if it is safe to call getNetworkLinkID()");
}

const uci::type::NetworkLinkID_Type& CommTerminalCapabilityCommandType::getNetworkLinkID() const {
  return getNetworkLinkID_();
}

uci::type::NetworkLinkID_Type& CommTerminalCapabilityCommandType::getNetworkLinkID() {
  return getNetworkLinkID_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  enableNetworkLinkID();
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasNetworkLinkID() const noexcept {
  return static_cast<bool>(networkLinkID_Accessor);
}

uci::type::NetworkLinkID_Type& CommTerminalCapabilityCommandType::enableNetworkLinkID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkLinkID_Type : type};
  if ((!networkLinkID_Accessor) || (networkLinkID_Accessor->getAccessorType() != requestedType)) {
    networkLinkID_Accessor = NetworkLinkID_Type::create(requestedType);
    if (!networkLinkID_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkLinkID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkLinkID_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearNetworkLinkID() noexcept {
  networkLinkID_Accessor.reset();
  return *this;
}

uci::type::VerboseStatusType& CommTerminalCapabilityCommandType::getVerboseStatus_() const {
  if (verboseStatus_Accessor) {
    return *verboseStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getVerboseStatus(): An attempt was made to get an optional field that was not enabled, call hasVerboseStatus() to determine if it is safe to call getVerboseStatus()");
}

const uci::type::VerboseStatusType& CommTerminalCapabilityCommandType::getVerboseStatus() const {
  return getVerboseStatus_();
}

uci::type::VerboseStatusType& CommTerminalCapabilityCommandType::getVerboseStatus() {
  return getVerboseStatus_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setVerboseStatus(const uci::type::VerboseStatusType& accessor) {
  enableVerboseStatus();
  if (&accessor != verboseStatus_Accessor.get()) {
    verboseStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasVerboseStatus() const noexcept {
  return static_cast<bool>(verboseStatus_Accessor);
}

uci::type::VerboseStatusType& CommTerminalCapabilityCommandType::enableVerboseStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::verboseStatusType : type};
  if ((!verboseStatus_Accessor) || (verboseStatus_Accessor->getAccessorType() != requestedType)) {
    verboseStatus_Accessor = VerboseStatusType::create(requestedType);
    if (!verboseStatus_Accessor) {
      throw uci::base::UCIException("Error in enableVerboseStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *verboseStatus_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearVerboseStatus() noexcept {
  verboseStatus_Accessor.reset();
  return *this;
}

uci::type::CommWaveformCapabilityCommandPET& CommTerminalCapabilityCommandType::getWaveformSpecificSettings_() const {
  if (waveformSpecificSettings_Accessor) {
    return *waveformSpecificSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getWaveformSpecificSettings(): An attempt was made to get an optional field that was not enabled, call hasWaveformSpecificSettings() to determine if it is safe to call getWaveformSpecificSettings()");
}

const uci::type::CommWaveformCapabilityCommandPET& CommTerminalCapabilityCommandType::getWaveformSpecificSettings() const {
  return getWaveformSpecificSettings_();
}

uci::type::CommWaveformCapabilityCommandPET& CommTerminalCapabilityCommandType::getWaveformSpecificSettings() {
  return getWaveformSpecificSettings_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setWaveformSpecificSettings(const uci::type::CommWaveformCapabilityCommandPET& accessor) {
  enableWaveformSpecificSettings(accessor.getAccessorType());
  if (&accessor != waveformSpecificSettings_Accessor.get()) {
    waveformSpecificSettings_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasWaveformSpecificSettings() const noexcept {
  return static_cast<bool>(waveformSpecificSettings_Accessor);
}

uci::type::CommWaveformCapabilityCommandPET& CommTerminalCapabilityCommandType::enableWaveformSpecificSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commWaveformCapabilityCommandPET : type};
  if ((!waveformSpecificSettings_Accessor) || (waveformSpecificSettings_Accessor->getAccessorType() != requestedType)) {
    waveformSpecificSettings_Accessor = CommWaveformCapabilityCommandPET::create(requestedType);
    if (!waveformSpecificSettings_Accessor) {
      throw uci::base::UCIException("Error in enableWaveformSpecificSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *waveformSpecificSettings_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearWaveformSpecificSettings() noexcept {
  waveformSpecificSettings_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandFrequencyType& CommTerminalCapabilityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& CommTerminalCapabilityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& CommTerminalCapabilityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& CommTerminalCapabilityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

std::unique_ptr<CommTerminalCapabilityCommandType> CommTerminalCapabilityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commTerminalCapabilityCommandType : type};
  return (requestedType == uci::type::accessorType::commTerminalCapabilityCommandType) ? boost::make_unique<CommTerminalCapabilityCommandType>() : nullptr;
}

/**  */
namespace CommTerminalCapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"CommTerminalCapabilityCommandType"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ResourceSelection_Name{"ResourceSelection"};
constexpr const char* DependentActivity_Name{"DependentActivity"};
constexpr const char* ConnectionRequest_Name{"ConnectionRequest"};
constexpr const char* CommonSettingsChange_Name{"CommonSettingsChange"};
constexpr const char* ActivateProfileID_Name{"ActivateProfileID"};
constexpr const char* LinkPortAssignments_Name{"LinkPortAssignments"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* VerboseStatus_Name{"VerboseStatus"};
constexpr const char* WaveformSpecificSettings_Name{"WaveformSpecificSettings"};
constexpr const char* Frequency_Name{"Frequency"};

} // namespace CommTerminalCapabilityCommandType_Names

void CommTerminalCapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalCapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalCapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::ResourceSelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
        const uci::type::CommTerminalCapabilityCommandType::ResourceSelection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceSelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::DependentActivity_Name) {
      DependentActivityType::deserialize(valueType.second, accessor.enableDependentActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::ConnectionRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConnectionRequest().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::CommonSettingsChange_Name) {
      CommControlType::deserialize(valueType.second, accessor.enableCommonSettingsChange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::ActivateProfileID_Name) {
      CommProfileID_Type::deserialize(valueType.second, accessor.enableActivateProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::LinkPortAssignments_Name) {
      CommLinkPortMapType::deserialize(valueType.second, accessor.enableLinkPortAssignments(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::VerboseStatus_Name) {
      VerboseStatusType::deserialize(valueType.second, accessor.enableVerboseStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::WaveformSpecificSettings_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWaveformSpecificSettings(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    }
  }
  SharedRF_ApertureCapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommTerminalCapabilityCommandType::serialize(const uci::type::CommTerminalCapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommTerminalCapabilityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalCapabilityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureCapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, CommTerminalCapabilityCommandType_Names::SubsystemID_Name);
  {
    const uci::type::CommTerminalCapabilityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
    for (uci::type::CommTerminalCapabilityCommandType::ResourceSelection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResourceSelectionType::serialize(boundedList.at(i), node, CommTerminalCapabilityCommandType_Names::ResourceSelection_Name);
    }
  }
  if (accessor.hasDependentActivity()) {
    DependentActivityType::serialize(accessor.getDependentActivity(), node, CommTerminalCapabilityCommandType_Names::DependentActivity_Name);
  }
  if (accessor.hasConnectionRequest()) {
    CommConnectionCommandEnum::serialize(accessor.getConnectionRequest(), node, CommTerminalCapabilityCommandType_Names::ConnectionRequest_Name, false);
  }
  if (accessor.hasCommonSettingsChange()) {
    CommControlType::serialize(accessor.getCommonSettingsChange(), node, CommTerminalCapabilityCommandType_Names::CommonSettingsChange_Name);
  }
  if (accessor.hasActivateProfileID()) {
    CommProfileID_Type::serialize(accessor.getActivateProfileID(), node, CommTerminalCapabilityCommandType_Names::ActivateProfileID_Name);
  }
  if (accessor.hasLinkPortAssignments()) {
    CommLinkPortMapType::serialize(accessor.getLinkPortAssignments(), node, CommTerminalCapabilityCommandType_Names::LinkPortAssignments_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, CommTerminalCapabilityCommandType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasVerboseStatus()) {
    VerboseStatusType::serialize(accessor.getVerboseStatus(), node, CommTerminalCapabilityCommandType_Names::VerboseStatus_Name);
  }
  if (accessor.hasWaveformSpecificSettings()) {
    CommWaveformCapabilityCommandPET::serialize(accessor.getWaveformSpecificSettings(), node, CommTerminalCapabilityCommandType_Names::WaveformSpecificSettings_Name);
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, CommTerminalCapabilityCommandType_Names::Frequency_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommTerminalCapabilityCommandType>().release());
}

uci::type::CommTerminalCapabilityCommandType& CommTerminalCapabilityCommandType::create(const uci::type::CommTerminalCapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommTerminalCapabilityCommandType> newAccessor{boost::make_unique<asb_uci::type::CommTerminalCapabilityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommTerminalCapabilityCommandType::destroy(uci::type::CommTerminalCapabilityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::CommTerminalCapabilityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

