/** @file PrioritizationListMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PrioritizationListMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/OpDescriptionType.h"
#include "asb_uci/type/OrderTraceabilityType.h"
#include "asb_uci/type/PrioritizationListEnum.h"
#include "asb_uci/type/PrioritizationListID_Type.h"
#include "asb_uci/type/PrioritizationListItemType.h"
#include "asb_uci/type/ScheduleType.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OpDescriptionType.h"
#include "uci/type/OrderTraceabilityType.h"
#include "uci/type/PrioritizationListEnum.h"
#include "uci/type/PrioritizationListID_Type.h"
#include "uci/type/PrioritizationListItemType.h"
#include "uci/type/PrioritizationListMDT.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PrioritizationListMDT::PrioritizationListMDT()
  : prioritizationListID_Accessor{boost::make_unique<PrioritizationListID_Type>()},
    listType_Accessor{boost::make_unique<PrioritizationListEnum>()},
    listItem_Accessor{boost::make_unique<ListItem>(1, SIZE_MAX)},
    opOrderTraceability_Accessor{boost::make_unique<OpOrderTraceability>(0, SIZE_MAX)},
    applicableSystemID_Accessor{boost::make_unique<ApplicableSystemID>(0, SIZE_MAX)},
    applicableServiceID_Accessor{boost::make_unique<ApplicableServiceID>(0, SIZE_MAX)} {
}

PrioritizationListMDT::~PrioritizationListMDT() = default;

void PrioritizationListMDT::copy(const uci::type::PrioritizationListMDT& accessor) {
  copyImpl(accessor, false);
}

void PrioritizationListMDT::copyImpl(const uci::type::PrioritizationListMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PrioritizationListMDT&>(accessor);
    setPrioritizationListID(*(accessorImpl.prioritizationListID_Accessor));
    setListType(*(accessorImpl.listType_Accessor));
    setListItem(*(accessorImpl.listItem_Accessor));
    setOpOrderTraceability(*(accessorImpl.opOrderTraceability_Accessor));
    if (accessorImpl.opDescription_Accessor) {
      setOpDescription(*(accessorImpl.opDescription_Accessor));
    } else {
      opDescription_Accessor.reset();
    }
    setApplicableSystemID(*(accessorImpl.applicableSystemID_Accessor));
    setApplicableServiceID(*(accessorImpl.applicableServiceID_Accessor));
    if (accessorImpl.applicableZone_Accessor) {
      setApplicableZone(*(accessorImpl.applicableZone_Accessor));
    } else {
      applicableZone_Accessor.reset();
    }
    if (accessorImpl.schedule_Accessor) {
      setSchedule(*(accessorImpl.schedule_Accessor));
    } else {
      schedule_Accessor.reset();
    }
  }
}

void PrioritizationListMDT::reset() noexcept {
  DataRecordBaseType::reset();
  prioritizationListID_Accessor->reset();
  listType_Accessor->reset();
  listItem_Accessor->reset();
  opOrderTraceability_Accessor->reset();
  opDescription_Accessor.reset();
  applicableSystemID_Accessor->reset();
  applicableServiceID_Accessor->reset();
  applicableZone_Accessor.reset();
  schedule_Accessor.reset();
}

const uci::type::PrioritizationListID_Type& PrioritizationListMDT::getPrioritizationListID() const {
  return *prioritizationListID_Accessor;
}

uci::type::PrioritizationListID_Type& PrioritizationListMDT::getPrioritizationListID() {
  return *prioritizationListID_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setPrioritizationListID(const uci::type::PrioritizationListID_Type& accessor) {
  if (&accessor != prioritizationListID_Accessor.get()) {
    prioritizationListID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PrioritizationListEnum& PrioritizationListMDT::getListType() const {
  return *listType_Accessor;
}

uci::type::PrioritizationListEnum& PrioritizationListMDT::getListType() {
  return *listType_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setListType(const uci::type::PrioritizationListEnum& accessor) {
  if (&accessor != listType_Accessor.get()) {
    listType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setListType(uci::type::PrioritizationListEnum::EnumerationItem value) {
  listType_Accessor->setValue(value);
  return *this;
}


const uci::type::PrioritizationListMDT::ListItem& PrioritizationListMDT::getListItem() const {
  return *listItem_Accessor;
}

uci::type::PrioritizationListMDT::ListItem& PrioritizationListMDT::getListItem() {
  return *listItem_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setListItem(const uci::type::PrioritizationListMDT::ListItem& accessor) {
  if (&accessor != listItem_Accessor.get()) {
    listItem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PrioritizationListMDT::OpOrderTraceability& PrioritizationListMDT::getOpOrderTraceability() const {
  return *opOrderTraceability_Accessor;
}

uci::type::PrioritizationListMDT::OpOrderTraceability& PrioritizationListMDT::getOpOrderTraceability() {
  return *opOrderTraceability_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setOpOrderTraceability(const uci::type::PrioritizationListMDT::OpOrderTraceability& accessor) {
  if (&accessor != opOrderTraceability_Accessor.get()) {
    opOrderTraceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpDescriptionType& PrioritizationListMDT::getOpDescription_() const {
  if (opDescription_Accessor) {
    return *opDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getOpDescription(): An attempt was made to get an optional field that was not enabled, call hasOpDescription() to determine if it is safe to call getOpDescription()");
}

const uci::type::OpDescriptionType& PrioritizationListMDT::getOpDescription() const {
  return getOpDescription_();
}

uci::type::OpDescriptionType& PrioritizationListMDT::getOpDescription() {
  return getOpDescription_();
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setOpDescription(const uci::type::OpDescriptionType& accessor) {
  enableOpDescription();
  if (&accessor != opDescription_Accessor.get()) {
    opDescription_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PrioritizationListMDT::hasOpDescription() const noexcept {
  return static_cast<bool>(opDescription_Accessor);
}

uci::type::OpDescriptionType& PrioritizationListMDT::enableOpDescription(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opDescriptionType : type};
  if ((!opDescription_Accessor) || (opDescription_Accessor->getAccessorType() != requestedType)) {
    opDescription_Accessor = OpDescriptionType::create(requestedType);
    if (!opDescription_Accessor) {
      throw uci::base::UCIException("Error in enableOpDescription(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opDescription_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::clearOpDescription() noexcept {
  opDescription_Accessor.reset();
  return *this;
}

const uci::type::PrioritizationListMDT::ApplicableSystemID& PrioritizationListMDT::getApplicableSystemID() const {
  return *applicableSystemID_Accessor;
}

uci::type::PrioritizationListMDT::ApplicableSystemID& PrioritizationListMDT::getApplicableSystemID() {
  return *applicableSystemID_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setApplicableSystemID(const uci::type::PrioritizationListMDT::ApplicableSystemID& accessor) {
  if (&accessor != applicableSystemID_Accessor.get()) {
    applicableSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PrioritizationListMDT::ApplicableServiceID& PrioritizationListMDT::getApplicableServiceID() const {
  return *applicableServiceID_Accessor;
}

uci::type::PrioritizationListMDT::ApplicableServiceID& PrioritizationListMDT::getApplicableServiceID() {
  return *applicableServiceID_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setApplicableServiceID(const uci::type::PrioritizationListMDT::ApplicableServiceID& accessor) {
  if (&accessor != applicableServiceID_Accessor.get()) {
    applicableServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ZoneType& PrioritizationListMDT::getApplicableZone_() const {
  if (applicableZone_Accessor) {
    return *applicableZone_Accessor;
  }
  throw uci::base::UCIException("Error in getApplicableZone(): An attempt was made to get an optional field that was not enabled, call hasApplicableZone() to determine if it is safe to call getApplicableZone()");
}

const uci::type::ZoneType& PrioritizationListMDT::getApplicableZone() const {
  return getApplicableZone_();
}

uci::type::ZoneType& PrioritizationListMDT::getApplicableZone() {
  return getApplicableZone_();
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setApplicableZone(const uci::type::ZoneType& accessor) {
  enableApplicableZone(accessor.getAccessorType());
  if (&accessor != applicableZone_Accessor.get()) {
    applicableZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PrioritizationListMDT::hasApplicableZone() const noexcept {
  return static_cast<bool>(applicableZone_Accessor);
}

uci::type::ZoneType& PrioritizationListMDT::enableApplicableZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!applicableZone_Accessor) || (applicableZone_Accessor->getAccessorType() != requestedType)) {
    applicableZone_Accessor = ZoneType::create(requestedType);
    if (!applicableZone_Accessor) {
      throw uci::base::UCIException("Error in enableApplicableZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *applicableZone_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::clearApplicableZone() noexcept {
  applicableZone_Accessor.reset();
  return *this;
}

uci::type::ScheduleType& PrioritizationListMDT::getSchedule_() const {
  if (schedule_Accessor) {
    return *schedule_Accessor;
  }
  throw uci::base::UCIException("Error in getSchedule(): An attempt was made to get an optional field that was not enabled, call hasSchedule() to determine if it is safe to call getSchedule()");
}

const uci::type::ScheduleType& PrioritizationListMDT::getSchedule() const {
  return getSchedule_();
}

uci::type::ScheduleType& PrioritizationListMDT::getSchedule() {
  return getSchedule_();
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::setSchedule(const uci::type::ScheduleType& accessor) {
  enableSchedule();
  if (&accessor != schedule_Accessor.get()) {
    schedule_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PrioritizationListMDT::hasSchedule() const noexcept {
  return static_cast<bool>(schedule_Accessor);
}

uci::type::ScheduleType& PrioritizationListMDT::enableSchedule(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  if ((!schedule_Accessor) || (schedule_Accessor->getAccessorType() != requestedType)) {
    schedule_Accessor = ScheduleType::create(requestedType);
    if (!schedule_Accessor) {
      throw uci::base::UCIException("Error in enableSchedule(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *schedule_Accessor;
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::clearSchedule() noexcept {
  schedule_Accessor.reset();
  return *this;
}

std::unique_ptr<PrioritizationListMDT> PrioritizationListMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::prioritizationListMDT : type};
  return (requestedType == uci::type::accessorType::prioritizationListMDT) ? boost::make_unique<PrioritizationListMDT>() : nullptr;
}

/**  */
namespace PrioritizationListMDT_Names {

constexpr const char* Extern_Type_Name{"PrioritizationListMDT"};
constexpr const char* PrioritizationListID_Name{"PrioritizationListID"};
constexpr const char* ListType_Name{"ListType"};
constexpr const char* ListItem_Name{"ListItem"};
constexpr const char* OpOrderTraceability_Name{"OpOrderTraceability"};
constexpr const char* OpDescription_Name{"OpDescription"};
constexpr const char* ApplicableSystemID_Name{"ApplicableSystemID"};
constexpr const char* ApplicableServiceID_Name{"ApplicableServiceID"};
constexpr const char* ApplicableZone_Name{"ApplicableZone"};
constexpr const char* Schedule_Name{"Schedule"};

} // namespace PrioritizationListMDT_Names

void PrioritizationListMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PrioritizationListMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PrioritizationListMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::PrioritizationListID_Name) {
      PrioritizationListID_Type::deserialize(valueType.second, accessor.getPrioritizationListID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::ListType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getListType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::ListItem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PrioritizationListMDT::ListItem& boundedList = accessor.getListItem();
        const uci::type::PrioritizationListMDT::ListItem::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PrioritizationListItemType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::OpOrderTraceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PrioritizationListMDT::OpOrderTraceability& boundedList = accessor.getOpOrderTraceability();
        const uci::type::PrioritizationListMDT::OpOrderTraceability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrderTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::OpDescription_Name) {
      OpDescriptionType::deserialize(valueType.second, accessor.enableOpDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::ApplicableSystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PrioritizationListMDT::ApplicableSystemID& boundedList = accessor.getApplicableSystemID();
        const uci::type::PrioritizationListMDT::ApplicableSystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::ApplicableServiceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PrioritizationListMDT::ApplicableServiceID& boundedList = accessor.getApplicableServiceID();
        const uci::type::PrioritizationListMDT::ApplicableServiceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ServiceID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::ApplicableZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableApplicableZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PrioritizationListMDT_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PrioritizationListMDT::serialize(const uci::type::PrioritizationListMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PrioritizationListMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PrioritizationListMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  PrioritizationListID_Type::serialize(accessor.getPrioritizationListID(), node, PrioritizationListMDT_Names::PrioritizationListID_Name);
  PrioritizationListEnum::serialize(accessor.getListType(), node, PrioritizationListMDT_Names::ListType_Name, false);
  {
    const uci::type::PrioritizationListMDT::ListItem& boundedList = accessor.getListItem();
    for (uci::type::PrioritizationListMDT::ListItem::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PrioritizationListItemType::serialize(boundedList.at(i), node, PrioritizationListMDT_Names::ListItem_Name);
    }
  }
  {
    const uci::type::PrioritizationListMDT::OpOrderTraceability& boundedList = accessor.getOpOrderTraceability();
    for (uci::type::PrioritizationListMDT::OpOrderTraceability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrderTraceabilityType::serialize(boundedList.at(i), node, PrioritizationListMDT_Names::OpOrderTraceability_Name);
    }
  }
  if (accessor.hasOpDescription()) {
    OpDescriptionType::serialize(accessor.getOpDescription(), node, PrioritizationListMDT_Names::OpDescription_Name);
  }
  {
    const uci::type::PrioritizationListMDT::ApplicableSystemID& boundedList = accessor.getApplicableSystemID();
    for (uci::type::PrioritizationListMDT::ApplicableSystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, PrioritizationListMDT_Names::ApplicableSystemID_Name);
    }
  }
  {
    const uci::type::PrioritizationListMDT::ApplicableServiceID& boundedList = accessor.getApplicableServiceID();
    for (uci::type::PrioritizationListMDT::ApplicableServiceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ServiceID_Type::serialize(boundedList.at(i), node, PrioritizationListMDT_Names::ApplicableServiceID_Name);
    }
  }
  if (accessor.hasApplicableZone()) {
    ZoneType::serialize(accessor.getApplicableZone(), node, PrioritizationListMDT_Names::ApplicableZone_Name);
  }
  if (accessor.hasSchedule()) {
    ScheduleType::serialize(accessor.getSchedule(), node, PrioritizationListMDT_Names::Schedule_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PrioritizationListMDT& PrioritizationListMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PrioritizationListMDT>().release());
}

uci::type::PrioritizationListMDT& PrioritizationListMDT::create(const uci::type::PrioritizationListMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PrioritizationListMDT> newAccessor{boost::make_unique<asb_uci::type::PrioritizationListMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PrioritizationListMDT::destroy(uci::type::PrioritizationListMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PrioritizationListMDT*>(&accessor);
}

} // namespace type

} // namespace uci

