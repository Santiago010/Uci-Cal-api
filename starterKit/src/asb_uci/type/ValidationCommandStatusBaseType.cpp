/** @file ValidationCommandStatusBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ValidationCommandStatusBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommandStatusBaseType.h"
#include "../../../include/asb_uci/type/CompletionStatusType.h"
#include "../../../include/asb_uci/type/IncompleteProcessingType.h"
#include "../../../include/asb_uci/type/ProcessingStatusEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CompletionStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IncompleteProcessingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProcessingStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ValidationCommandStatusBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ValidationCommandStatusBaseType::ValidationCommandStatusBaseType()
  : incompleteItem_Accessor{boost::make_unique<IncompleteItem>(0, SIZE_MAX)} {
}

ValidationCommandStatusBaseType::~ValidationCommandStatusBaseType() = default;

void ValidationCommandStatusBaseType::copy(const uci::type::ValidationCommandStatusBaseType& accessor) {
  copyImpl(accessor, false);
}

void ValidationCommandStatusBaseType::copyImpl(const uci::type::ValidationCommandStatusBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::validationCommandStatusBaseType)) {
      CommandStatusBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const ValidationCommandStatusBaseType&>(accessor);
      if (accessorImpl.commandStatus_Accessor) {
        setCommandStatus(*(accessorImpl.commandStatus_Accessor));
      } else {
        commandStatus_Accessor.reset();
      }
      if (accessorImpl.completionStatus_Accessor) {
        setCompletionStatus(*(accessorImpl.completionStatus_Accessor));
      } else {
        completionStatus_Accessor.reset();
      }
      setIncompleteItem(*(accessorImpl.incompleteItem_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ValidationCommandStatusBaseType::reset() noexcept {
  CommandStatusBaseType::reset();
  commandStatus_Accessor.reset();
  completionStatus_Accessor.reset();
  incompleteItem_Accessor->reset();
}

uci::type::ProcessingStatusEnum& ValidationCommandStatusBaseType::getCommandStatus_() const {
  if (commandStatus_Accessor) {
    return *commandStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCommandStatus(): An attempt was made to get an optional field that was not enabled, call hasCommandStatus() to determine if it is safe to call getCommandStatus()");
}

const uci::type::ProcessingStatusEnum& ValidationCommandStatusBaseType::getCommandStatus() const {
  return getCommandStatus_();
}

uci::type::ProcessingStatusEnum& ValidationCommandStatusBaseType::getCommandStatus() {
  return getCommandStatus_();
}

uci::type::ValidationCommandStatusBaseType& ValidationCommandStatusBaseType::setCommandStatus(const uci::type::ProcessingStatusEnum& accessor) {
  enableCommandStatus();
  if (&accessor != commandStatus_Accessor.get()) {
    commandStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ValidationCommandStatusBaseType& ValidationCommandStatusBaseType::setCommandStatus(const uci::type::ProcessingStatusEnum::EnumerationItem value) {
  enableCommandStatus().setValue(value);
  return *this;
}

bool ValidationCommandStatusBaseType::hasCommandStatus() const noexcept {
  return static_cast<bool>(commandStatus_Accessor);
}

uci::type::ProcessingStatusEnum& ValidationCommandStatusBaseType::enableCommandStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::processingStatusEnum : type};
  if ((!commandStatus_Accessor) || (commandStatus_Accessor->getAccessorType() != requestedType)) {
    commandStatus_Accessor = ProcessingStatusEnum::create(requestedType);
    if (!commandStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCommandStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commandStatus_Accessor;
}

uci::type::ValidationCommandStatusBaseType& ValidationCommandStatusBaseType::clearCommandStatus() noexcept {
  commandStatus_Accessor.reset();
  return *this;
}

uci::type::CompletionStatusType& ValidationCommandStatusBaseType::getCompletionStatus_() const {
  if (completionStatus_Accessor) {
    return *completionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCompletionStatus(): An attempt was made to get an optional field that was not enabled, call hasCompletionStatus() to determine if it is safe to call getCompletionStatus()");
}

const uci::type::CompletionStatusType& ValidationCommandStatusBaseType::getCompletionStatus() const {
  return getCompletionStatus_();
}

uci::type::CompletionStatusType& ValidationCommandStatusBaseType::getCompletionStatus() {
  return getCompletionStatus_();
}

uci::type::ValidationCommandStatusBaseType& ValidationCommandStatusBaseType::setCompletionStatus(const uci::type::CompletionStatusType& accessor) {
  enableCompletionStatus();
  if (&accessor != completionStatus_Accessor.get()) {
    completionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ValidationCommandStatusBaseType::hasCompletionStatus() const noexcept {
  return static_cast<bool>(completionStatus_Accessor);
}

uci::type::CompletionStatusType& ValidationCommandStatusBaseType::enableCompletionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  if ((!completionStatus_Accessor) || (completionStatus_Accessor->getAccessorType() != requestedType)) {
    completionStatus_Accessor = CompletionStatusType::create(requestedType);
    if (!completionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCompletionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *completionStatus_Accessor;
}

uci::type::ValidationCommandStatusBaseType& ValidationCommandStatusBaseType::clearCompletionStatus() noexcept {
  completionStatus_Accessor.reset();
  return *this;
}

const uci::type::ValidationCommandStatusBaseType::IncompleteItem& ValidationCommandStatusBaseType::getIncompleteItem() const {
  return *incompleteItem_Accessor;
}

uci::type::ValidationCommandStatusBaseType::IncompleteItem& ValidationCommandStatusBaseType::getIncompleteItem() {
  return *incompleteItem_Accessor;
}

uci::type::ValidationCommandStatusBaseType& ValidationCommandStatusBaseType::setIncompleteItem(const uci::type::ValidationCommandStatusBaseType::IncompleteItem& accessor) {
  if (&accessor != incompleteItem_Accessor.get()) {
    incompleteItem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ValidationCommandStatusBaseType> ValidationCommandStatusBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::validationCommandStatusBaseType : type};
  return std::unique_ptr<ValidationCommandStatusBaseType>(dynamic_cast<ValidationCommandStatusBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ValidationCommandStatusBaseType_Names {

constexpr const char* Extern_Type_Name{"ValidationCommandStatusBaseType"};
constexpr const char* CommandStatus_Name{"CommandStatus"};
constexpr const char* CompletionStatus_Name{"CompletionStatus"};
constexpr const char* IncompleteItem_Name{"IncompleteItem"};

} // namespace ValidationCommandStatusBaseType_Names

void ValidationCommandStatusBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ValidationCommandStatusBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ValidationCommandStatusBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ValidationCommandStatusBaseType_Names::CommandStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCommandStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ValidationCommandStatusBaseType_Names::CompletionStatus_Name) {
      CompletionStatusType::deserialize(valueType.second, accessor.enableCompletionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ValidationCommandStatusBaseType_Names::IncompleteItem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ValidationCommandStatusBaseType::IncompleteItem& boundedList = accessor.getIncompleteItem();
        const uci::type::ValidationCommandStatusBaseType::IncompleteItem::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::IncompleteProcessingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CommandStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ValidationCommandStatusBaseType::serialize(const uci::type::ValidationCommandStatusBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ValidationCommandStatusBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::validationCommandStatusBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ValidationCommandStatusBaseType_Names::Extern_Type_Name);
    }
    CommandStatusBaseType::serialize(accessor, node, "", false, false, false);
    if (accessor.hasCommandStatus()) {
      ProcessingStatusEnum::serialize(accessor.getCommandStatus(), node, ValidationCommandStatusBaseType_Names::CommandStatus_Name, false);
    }
    if (accessor.hasCompletionStatus()) {
      CompletionStatusType::serialize(accessor.getCompletionStatus(), node, ValidationCommandStatusBaseType_Names::CompletionStatus_Name);
    }
    {
      const uci::type::ValidationCommandStatusBaseType::IncompleteItem& boundedList = accessor.getIncompleteItem();
      for (uci::type::ValidationCommandStatusBaseType::IncompleteItem::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::IncompleteProcessingType::serialize(boundedList.at(i), node, ValidationCommandStatusBaseType_Names::IncompleteItem_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

