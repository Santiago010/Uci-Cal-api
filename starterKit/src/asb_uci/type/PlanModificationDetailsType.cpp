/** @file PlanModificationDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanModificationDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ExecutionSequenceReplaceOrModifyChoiceType.h"
#include "asb_uci/type/HierarchyModificationType.h"
#include "asb_uci/type/PlanApplicabilityModificationType.h"
#include "asb_uci/type/PlanWindowModificationTypeChoiceType.h"
#include "asb_uci/type/RequirementAllocationLockDetailsType.h"
#include "asb_uci/type/SubPlansModificationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ExecutionSequenceReplaceOrModifyChoiceType.h"
#include "uci/type/HierarchyModificationType.h"
#include "uci/type/PlanApplicabilityModificationType.h"
#include "uci/type/PlanModificationDetailsType.h"
#include "uci/type/PlanWindowModificationTypeChoiceType.h"
#include "uci/type/RequirementAllocationLockDetailsType.h"
#include "uci/type/SubPlansModificationType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanModificationDetailsType::PlanModificationDetailsType() = default;

PlanModificationDetailsType::~PlanModificationDetailsType() = default;

void PlanModificationDetailsType::copy(const uci::type::PlanModificationDetailsType& accessor) {
  copyImpl(accessor, false);
}

void PlanModificationDetailsType::copyImpl(const uci::type::PlanModificationDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanModificationDetailsType&>(accessor);
    if (accessorImpl.hasForPlanningUseOnly()) {
      setForPlanningUseOnly(accessorImpl.getForPlanningUseOnly());
    } else {
      clearForPlanningUseOnly();
    }
    if (accessorImpl.windowModification_Accessor) {
      setWindowModification(*(accessorImpl.windowModification_Accessor));
    } else {
      windowModification_Accessor.reset();
    }
    if (accessorImpl.applicabilityModification_Accessor) {
      setApplicabilityModification(*(accessorImpl.applicabilityModification_Accessor));
    } else {
      applicabilityModification_Accessor.reset();
    }
    if (accessorImpl.subPlansModification_Accessor) {
      setSubPlansModification(*(accessorImpl.subPlansModification_Accessor));
    } else {
      subPlansModification_Accessor.reset();
    }
    if (accessorImpl.hierarchyModification_Accessor) {
      setHierarchyModification(*(accessorImpl.hierarchyModification_Accessor));
    } else {
      hierarchyModification_Accessor.reset();
    }
    if (accessorImpl.executionSequenceModification_Accessor) {
      setExecutionSequenceModification(*(accessorImpl.executionSequenceModification_Accessor));
    } else {
      executionSequenceModification_Accessor.reset();
    }
    if (accessorImpl.requirementAllocationLock_Accessor) {
      setRequirementAllocationLock(*(accessorImpl.requirementAllocationLock_Accessor));
    } else {
      requirementAllocationLock_Accessor.reset();
    }
  }
}

void PlanModificationDetailsType::reset() noexcept {
  clearForPlanningUseOnly();
  windowModification_Accessor.reset();
  applicabilityModification_Accessor.reset();
  subPlansModification_Accessor.reset();
  hierarchyModification_Accessor.reset();
  executionSequenceModification_Accessor.reset();
  requirementAllocationLock_Accessor.reset();
}

xs::Boolean PlanModificationDetailsType::getForPlanningUseOnly() const {
  if (forPlanningUseOnly_Accessor) {
    return *forPlanningUseOnly_Accessor;
  }
  throw uci::base::UCIException("Error in getForPlanningUseOnly(): An attempt was made to get an optional field that was not enabled, call hasForPlanningUseOnly() to determine if it is safe to call getForPlanningUseOnly()");
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::setForPlanningUseOnly(xs::Boolean value) {
  forPlanningUseOnly_Accessor = value;
  return *this;
}

bool PlanModificationDetailsType::hasForPlanningUseOnly() const noexcept {
  return forPlanningUseOnly_Accessor.has_value();
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::clearForPlanningUseOnly() noexcept {
  forPlanningUseOnly_Accessor.reset();
  return *this;
}

uci::type::PlanWindowModificationTypeChoiceType& PlanModificationDetailsType::getWindowModification_() const {
  if (windowModification_Accessor) {
    return *windowModification_Accessor;
  }
  throw uci::base::UCIException("Error in getWindowModification(): An attempt was made to get an optional field that was not enabled, call hasWindowModification() to determine if it is safe to call getWindowModification()");
}

const uci::type::PlanWindowModificationTypeChoiceType& PlanModificationDetailsType::getWindowModification() const {
  return getWindowModification_();
}

uci::type::PlanWindowModificationTypeChoiceType& PlanModificationDetailsType::getWindowModification() {
  return getWindowModification_();
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::setWindowModification(const uci::type::PlanWindowModificationTypeChoiceType& accessor) {
  enableWindowModification();
  if (&accessor != windowModification_Accessor.get()) {
    windowModification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanModificationDetailsType::hasWindowModification() const noexcept {
  return static_cast<bool>(windowModification_Accessor);
}

uci::type::PlanWindowModificationTypeChoiceType& PlanModificationDetailsType::enableWindowModification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planWindowModificationTypeChoiceType : type};
  if ((!windowModification_Accessor) || (windowModification_Accessor->getAccessorType() != requestedType)) {
    windowModification_Accessor = PlanWindowModificationTypeChoiceType::create(requestedType);
    if (!windowModification_Accessor) {
      throw uci::base::UCIException("Error in enableWindowModification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *windowModification_Accessor;
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::clearWindowModification() noexcept {
  windowModification_Accessor.reset();
  return *this;
}

uci::type::PlanApplicabilityModificationType& PlanModificationDetailsType::getApplicabilityModification_() const {
  if (applicabilityModification_Accessor) {
    return *applicabilityModification_Accessor;
  }
  throw uci::base::UCIException("Error in getApplicabilityModification(): An attempt was made to get an optional field that was not enabled, call hasApplicabilityModification() to determine if it is safe to call getApplicabilityModification()");
}

const uci::type::PlanApplicabilityModificationType& PlanModificationDetailsType::getApplicabilityModification() const {
  return getApplicabilityModification_();
}

uci::type::PlanApplicabilityModificationType& PlanModificationDetailsType::getApplicabilityModification() {
  return getApplicabilityModification_();
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::setApplicabilityModification(const uci::type::PlanApplicabilityModificationType& accessor) {
  enableApplicabilityModification();
  if (&accessor != applicabilityModification_Accessor.get()) {
    applicabilityModification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanModificationDetailsType::hasApplicabilityModification() const noexcept {
  return static_cast<bool>(applicabilityModification_Accessor);
}

uci::type::PlanApplicabilityModificationType& PlanModificationDetailsType::enableApplicabilityModification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planApplicabilityModificationType : type};
  if ((!applicabilityModification_Accessor) || (applicabilityModification_Accessor->getAccessorType() != requestedType)) {
    applicabilityModification_Accessor = PlanApplicabilityModificationType::create(requestedType);
    if (!applicabilityModification_Accessor) {
      throw uci::base::UCIException("Error in enableApplicabilityModification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *applicabilityModification_Accessor;
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::clearApplicabilityModification() noexcept {
  applicabilityModification_Accessor.reset();
  return *this;
}

uci::type::SubPlansModificationType& PlanModificationDetailsType::getSubPlansModification_() const {
  if (subPlansModification_Accessor) {
    return *subPlansModification_Accessor;
  }
  throw uci::base::UCIException("Error in getSubPlansModification(): An attempt was made to get an optional field that was not enabled, call hasSubPlansModification() to determine if it is safe to call getSubPlansModification()");
}

const uci::type::SubPlansModificationType& PlanModificationDetailsType::getSubPlansModification() const {
  return getSubPlansModification_();
}

uci::type::SubPlansModificationType& PlanModificationDetailsType::getSubPlansModification() {
  return getSubPlansModification_();
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::setSubPlansModification(const uci::type::SubPlansModificationType& accessor) {
  enableSubPlansModification();
  if (&accessor != subPlansModification_Accessor.get()) {
    subPlansModification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanModificationDetailsType::hasSubPlansModification() const noexcept {
  return static_cast<bool>(subPlansModification_Accessor);
}

uci::type::SubPlansModificationType& PlanModificationDetailsType::enableSubPlansModification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subPlansModificationType : type};
  if ((!subPlansModification_Accessor) || (subPlansModification_Accessor->getAccessorType() != requestedType)) {
    subPlansModification_Accessor = SubPlansModificationType::create(requestedType);
    if (!subPlansModification_Accessor) {
      throw uci::base::UCIException("Error in enableSubPlansModification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subPlansModification_Accessor;
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::clearSubPlansModification() noexcept {
  subPlansModification_Accessor.reset();
  return *this;
}

uci::type::HierarchyModificationType& PlanModificationDetailsType::getHierarchyModification_() const {
  if (hierarchyModification_Accessor) {
    return *hierarchyModification_Accessor;
  }
  throw uci::base::UCIException("Error in getHierarchyModification(): An attempt was made to get an optional field that was not enabled, call hasHierarchyModification() to determine if it is safe to call getHierarchyModification()");
}

const uci::type::HierarchyModificationType& PlanModificationDetailsType::getHierarchyModification() const {
  return getHierarchyModification_();
}

uci::type::HierarchyModificationType& PlanModificationDetailsType::getHierarchyModification() {
  return getHierarchyModification_();
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::setHierarchyModification(const uci::type::HierarchyModificationType& accessor) {
  enableHierarchyModification();
  if (&accessor != hierarchyModification_Accessor.get()) {
    hierarchyModification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanModificationDetailsType::hasHierarchyModification() const noexcept {
  return static_cast<bool>(hierarchyModification_Accessor);
}

uci::type::HierarchyModificationType& PlanModificationDetailsType::enableHierarchyModification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::hierarchyModificationType : type};
  if ((!hierarchyModification_Accessor) || (hierarchyModification_Accessor->getAccessorType() != requestedType)) {
    hierarchyModification_Accessor = HierarchyModificationType::create(requestedType);
    if (!hierarchyModification_Accessor) {
      throw uci::base::UCIException("Error in enableHierarchyModification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hierarchyModification_Accessor;
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::clearHierarchyModification() noexcept {
  hierarchyModification_Accessor.reset();
  return *this;
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& PlanModificationDetailsType::getExecutionSequenceModification_() const {
  if (executionSequenceModification_Accessor) {
    return *executionSequenceModification_Accessor;
  }
  throw uci::base::UCIException("Error in getExecutionSequenceModification(): An attempt was made to get an optional field that was not enabled, call hasExecutionSequenceModification() to determine if it is safe to call getExecutionSequenceModification()");
}

const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& PlanModificationDetailsType::getExecutionSequenceModification() const {
  return getExecutionSequenceModification_();
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& PlanModificationDetailsType::getExecutionSequenceModification() {
  return getExecutionSequenceModification_();
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::setExecutionSequenceModification(const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& accessor) {
  enableExecutionSequenceModification();
  if (&accessor != executionSequenceModification_Accessor.get()) {
    executionSequenceModification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanModificationDetailsType::hasExecutionSequenceModification() const noexcept {
  return static_cast<bool>(executionSequenceModification_Accessor);
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& PlanModificationDetailsType::enableExecutionSequenceModification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::executionSequenceReplaceOrModifyChoiceType : type};
  if ((!executionSequenceModification_Accessor) || (executionSequenceModification_Accessor->getAccessorType() != requestedType)) {
    executionSequenceModification_Accessor = ExecutionSequenceReplaceOrModifyChoiceType::create(requestedType);
    if (!executionSequenceModification_Accessor) {
      throw uci::base::UCIException("Error in enableExecutionSequenceModification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *executionSequenceModification_Accessor;
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::clearExecutionSequenceModification() noexcept {
  executionSequenceModification_Accessor.reset();
  return *this;
}

uci::type::RequirementAllocationLockDetailsType& PlanModificationDetailsType::getRequirementAllocationLock_() const {
  if (requirementAllocationLock_Accessor) {
    return *requirementAllocationLock_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementAllocationLock(): An attempt was made to get an optional field that was not enabled, call hasRequirementAllocationLock() to determine if it is safe to call getRequirementAllocationLock()");
}

const uci::type::RequirementAllocationLockDetailsType& PlanModificationDetailsType::getRequirementAllocationLock() const {
  return getRequirementAllocationLock_();
}

uci::type::RequirementAllocationLockDetailsType& PlanModificationDetailsType::getRequirementAllocationLock() {
  return getRequirementAllocationLock_();
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::setRequirementAllocationLock(const uci::type::RequirementAllocationLockDetailsType& accessor) {
  enableRequirementAllocationLock();
  if (&accessor != requirementAllocationLock_Accessor.get()) {
    requirementAllocationLock_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanModificationDetailsType::hasRequirementAllocationLock() const noexcept {
  return static_cast<bool>(requirementAllocationLock_Accessor);
}

uci::type::RequirementAllocationLockDetailsType& PlanModificationDetailsType::enableRequirementAllocationLock(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementAllocationLockDetailsType : type};
  if ((!requirementAllocationLock_Accessor) || (requirementAllocationLock_Accessor->getAccessorType() != requestedType)) {
    requirementAllocationLock_Accessor = RequirementAllocationLockDetailsType::create(requestedType);
    if (!requirementAllocationLock_Accessor) {
      throw uci::base::UCIException("Error in enableRequirementAllocationLock(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementAllocationLock_Accessor;
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::clearRequirementAllocationLock() noexcept {
  requirementAllocationLock_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanModificationDetailsType> PlanModificationDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planModificationDetailsType : type};
  return (requestedType == uci::type::accessorType::planModificationDetailsType) ? boost::make_unique<PlanModificationDetailsType>() : nullptr;
}

/**  */
namespace PlanModificationDetailsType_Names {

constexpr const char* Extern_Type_Name{"PlanModificationDetailsType"};
constexpr const char* ForPlanningUseOnly_Name{"ForPlanningUseOnly"};
constexpr const char* WindowModification_Name{"WindowModification"};
constexpr const char* ApplicabilityModification_Name{"ApplicabilityModification"};
constexpr const char* SubPlansModification_Name{"SubPlansModification"};
constexpr const char* HierarchyModification_Name{"HierarchyModification"};
constexpr const char* ExecutionSequenceModification_Name{"ExecutionSequenceModification"};
constexpr const char* RequirementAllocationLock_Name{"RequirementAllocationLock"};

} // namespace PlanModificationDetailsType_Names

void PlanModificationDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanModificationDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanModificationDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanModificationDetailsType_Names::ForPlanningUseOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForPlanningUseOnly(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlanModificationDetailsType_Names::WindowModification_Name) {
      PlanWindowModificationTypeChoiceType::deserialize(valueType.second, accessor.enableWindowModification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanModificationDetailsType_Names::ApplicabilityModification_Name) {
      PlanApplicabilityModificationType::deserialize(valueType.second, accessor.enableApplicabilityModification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanModificationDetailsType_Names::SubPlansModification_Name) {
      SubPlansModificationType::deserialize(valueType.second, accessor.enableSubPlansModification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanModificationDetailsType_Names::HierarchyModification_Name) {
      HierarchyModificationType::deserialize(valueType.second, accessor.enableHierarchyModification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanModificationDetailsType_Names::ExecutionSequenceModification_Name) {
      ExecutionSequenceReplaceOrModifyChoiceType::deserialize(valueType.second, accessor.enableExecutionSequenceModification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanModificationDetailsType_Names::RequirementAllocationLock_Name) {
      RequirementAllocationLockDetailsType::deserialize(valueType.second, accessor.enableRequirementAllocationLock(), nodeName, nsPrefix);
    }
  }
}

std::string PlanModificationDetailsType::serialize(const uci::type::PlanModificationDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanModificationDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanModificationDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.hasForPlanningUseOnly()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getForPlanningUseOnly(), node, PlanModificationDetailsType_Names::ForPlanningUseOnly_Name);
  }
  if (accessor.hasWindowModification()) {
    PlanWindowModificationTypeChoiceType::serialize(accessor.getWindowModification(), node, PlanModificationDetailsType_Names::WindowModification_Name);
  }
  if (accessor.hasApplicabilityModification()) {
    PlanApplicabilityModificationType::serialize(accessor.getApplicabilityModification(), node, PlanModificationDetailsType_Names::ApplicabilityModification_Name);
  }
  if (accessor.hasSubPlansModification()) {
    SubPlansModificationType::serialize(accessor.getSubPlansModification(), node, PlanModificationDetailsType_Names::SubPlansModification_Name);
  }
  if (accessor.hasHierarchyModification()) {
    HierarchyModificationType::serialize(accessor.getHierarchyModification(), node, PlanModificationDetailsType_Names::HierarchyModification_Name);
  }
  if (accessor.hasExecutionSequenceModification()) {
    ExecutionSequenceReplaceOrModifyChoiceType::serialize(accessor.getExecutionSequenceModification(), node, PlanModificationDetailsType_Names::ExecutionSequenceModification_Name);
  }
  if (accessor.hasRequirementAllocationLock()) {
    RequirementAllocationLockDetailsType::serialize(accessor.getRequirementAllocationLock(), node, PlanModificationDetailsType_Names::RequirementAllocationLock_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanModificationDetailsType>().release());
}

uci::type::PlanModificationDetailsType& PlanModificationDetailsType::create(const uci::type::PlanModificationDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanModificationDetailsType> newAccessor{boost::make_unique<asb_uci::type::PlanModificationDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanModificationDetailsType::destroy(uci::type::PlanModificationDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanModificationDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

