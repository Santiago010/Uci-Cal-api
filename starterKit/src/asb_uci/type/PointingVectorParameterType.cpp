/** @file PointingVectorParameterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PointingVectorParameterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EllipseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DataRateType.h"
#include "uci/type/DoubleNonNegativeType.h"
#include "uci/type/EllipseType.h"
#include "uci/type/PointingVectorParameterType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PointingVectorParameterType::PointingVectorParameterType() = default;

PointingVectorParameterType::~PointingVectorParameterType() = default;

void PointingVectorParameterType::copy(const uci::type::PointingVectorParameterType& accessor) {
  copyImpl(accessor, false);
}

void PointingVectorParameterType::copyImpl(const uci::type::PointingVectorParameterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PointingVectorParameterType&>(accessor);
    if (accessorImpl.hasDataRate()) {
      setDataRate(accessorImpl.getDataRate());
    } else {
      clearDataRate();
    }
    if (accessorImpl.hasLossParameter()) {
      setLossParameter(accessorImpl.getLossParameter());
    } else {
      clearLossParameter();
    }
    if (accessorImpl.ellipse_Accessor) {
      setEllipse(*(accessorImpl.ellipse_Accessor));
    } else {
      ellipse_Accessor.reset();
    }
  }
}

void PointingVectorParameterType::reset() noexcept {
  clearDataRate();
  clearLossParameter();
  ellipse_Accessor.reset();
}

uci::type::DataRateTypeValue PointingVectorParameterType::getDataRate() const {
  if (dataRate_Accessor) {
    return *dataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getDataRate(): An attempt was made to get an optional field that was not enabled, call hasDataRate() to determine if it is safe to call getDataRate()");
}

uci::type::PointingVectorParameterType& PointingVectorParameterType::setDataRate(uci::type::DataRateTypeValue value) {
  dataRate_Accessor = value;
  return *this;
}

bool PointingVectorParameterType::hasDataRate() const noexcept {
  return dataRate_Accessor.has_value();
}

uci::type::PointingVectorParameterType& PointingVectorParameterType::clearDataRate() noexcept {
  dataRate_Accessor.reset();
  return *this;
}

uci::type::DoubleNonNegativeTypeValue PointingVectorParameterType::getLossParameter() const {
  if (lossParameter_Accessor) {
    return *lossParameter_Accessor;
  }
  throw uci::base::UCIException("Error in getLossParameter(): An attempt was made to get an optional field that was not enabled, call hasLossParameter() to determine if it is safe to call getLossParameter()");
}

uci::type::PointingVectorParameterType& PointingVectorParameterType::setLossParameter(uci::type::DoubleNonNegativeTypeValue value) {
  lossParameter_Accessor = value;
  return *this;
}

bool PointingVectorParameterType::hasLossParameter() const noexcept {
  return lossParameter_Accessor.has_value();
}

uci::type::PointingVectorParameterType& PointingVectorParameterType::clearLossParameter() noexcept {
  lossParameter_Accessor.reset();
  return *this;
}

uci::type::EllipseType& PointingVectorParameterType::getEllipse_() const {
  if (ellipse_Accessor) {
    return *ellipse_Accessor;
  }
  throw uci::base::UCIException("Error in getEllipse(): An attempt was made to get an optional field that was not enabled, call hasEllipse() to determine if it is safe to call getEllipse()");
}

const uci::type::EllipseType& PointingVectorParameterType::getEllipse() const {
  return getEllipse_();
}

uci::type::EllipseType& PointingVectorParameterType::getEllipse() {
  return getEllipse_();
}

uci::type::PointingVectorParameterType& PointingVectorParameterType::setEllipse(const uci::type::EllipseType& accessor) {
  enableEllipse(accessor.getAccessorType());
  if (&accessor != ellipse_Accessor.get()) {
    ellipse_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PointingVectorParameterType::hasEllipse() const noexcept {
  return static_cast<bool>(ellipse_Accessor);
}

uci::type::EllipseType& PointingVectorParameterType::enableEllipse(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ellipseType : type};
  if ((!ellipse_Accessor) || (ellipse_Accessor->getAccessorType() != requestedType)) {
    ellipse_Accessor = EllipseType::create(requestedType);
    if (!ellipse_Accessor) {
      throw uci::base::UCIException("Error in enableEllipse(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ellipse_Accessor;
}

uci::type::PointingVectorParameterType& PointingVectorParameterType::clearEllipse() noexcept {
  ellipse_Accessor.reset();
  return *this;
}

std::unique_ptr<PointingVectorParameterType> PointingVectorParameterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pointingVectorParameterType : type};
  return (requestedType == uci::type::accessorType::pointingVectorParameterType) ? boost::make_unique<PointingVectorParameterType>() : nullptr;
}

/**  */
namespace PointingVectorParameterType_Names {

constexpr const char* Extern_Type_Name{"PointingVectorParameterType"};
constexpr const char* DataRate_Name{"DataRate"};
constexpr const char* LossParameter_Name{"LossParameter"};
constexpr const char* Ellipse_Name{"Ellipse"};

} // namespace PointingVectorParameterType_Names

void PointingVectorParameterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PointingVectorParameterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PointingVectorParameterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PointingVectorParameterType_Names::DataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PointingVectorParameterType_Names::LossParameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLossParameter(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PointingVectorParameterType_Names::Ellipse_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEllipse(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string PointingVectorParameterType::serialize(const uci::type::PointingVectorParameterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PointingVectorParameterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PointingVectorParameterType_Names::Extern_Type_Name);
  }
  if (accessor.hasDataRate()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDataRate(), node, PointingVectorParameterType_Names::DataRate_Name);
  }
  if (accessor.hasLossParameter()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLossParameter(), node, PointingVectorParameterType_Names::LossParameter_Name);
  }
  if (accessor.hasEllipse()) {
    EllipseType::serialize(accessor.getEllipse(), node, PointingVectorParameterType_Names::Ellipse_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PointingVectorParameterType& PointingVectorParameterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PointingVectorParameterType>().release());
}

uci::type::PointingVectorParameterType& PointingVectorParameterType::create(const uci::type::PointingVectorParameterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PointingVectorParameterType> newAccessor{boost::make_unique<asb_uci::type::PointingVectorParameterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PointingVectorParameterType::destroy(uci::type::PointingVectorParameterType& accessor) {
  delete dynamic_cast<asb_uci::type::PointingVectorParameterType*>(&accessor);
}

} // namespace type

} // namespace uci

