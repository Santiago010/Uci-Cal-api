/** @file SOB_CorrelationRecordType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SOB_CorrelationRecordType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EOB_SignalType.h"
#include "../../../include/asb_uci/type/IdentityConfidenceType.h"
#include "../../../include/asb_uci/type/OB_CorrelationInputType.h"
#include "../../../include/asb_uci/type/OrbitalEphemerisChoiceType.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/SOB_CorrelatedToType.h"
#include "../../../include/asb_uci/type/SOB_CorrelationRecordID_Type.h"
#include "../../../include/asb_uci/type/SOB_CorrelationTypeEnum.h"
#include "../../../include/asb_uci/type/SecurityInformationType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_SignalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OB_CorrelationInputType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalEphemerisChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_CorrelatedToType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_CorrelationRecordID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_CorrelationRecordType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_CorrelationTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityInformationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SOB_CorrelationRecordType::SOB_CorrelationRecordType()
  : securityInformation_Accessor{boost::make_unique<SecurityInformationType>()},
    sOB_CorrelationRecordID_Accessor{boost::make_unique<SOB_CorrelationRecordID_Type>()},
    correlationType_Accessor{boost::make_unique<SOB_CorrelationTypeEnum>()} {
}

SOB_CorrelationRecordType::~SOB_CorrelationRecordType() = default;

void SOB_CorrelationRecordType::copy(const uci::type::SOB_CorrelationRecordType& accessor) {
  copyImpl(accessor, false);
}

void SOB_CorrelationRecordType::copyImpl(const uci::type::SOB_CorrelationRecordType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SOB_CorrelationRecordType&>(accessor);
    setSecurityInformation(*(accessorImpl.securityInformation_Accessor));
    setSOB_CorrelationRecordID(*(accessorImpl.sOB_CorrelationRecordID_Accessor));
    setCorrelationType(*(accessorImpl.correlationType_Accessor));
    setCorrelationTimestamp(accessorImpl.correlationTimestamp_Accessor);
    if (accessorImpl.correlatedTo_Accessor) {
      setCorrelatedTo(*(accessorImpl.correlatedTo_Accessor));
    } else {
      correlatedTo_Accessor.reset();
    }
    if (accessorImpl.correlationInput_Accessor) {
      setCorrelationInput(*(accessorImpl.correlationInput_Accessor));
    } else {
      correlationInput_Accessor.reset();
    }
    if (accessorImpl.signal_Accessor) {
      setSignal(*(accessorImpl.signal_Accessor));
    } else {
      signal_Accessor.reset();
    }
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
    if (accessorImpl.singlePositionKinematics_Accessor) {
      setSinglePositionKinematics(*(accessorImpl.singlePositionKinematics_Accessor));
    } else {
      singlePositionKinematics_Accessor.reset();
    }
    if (accessorImpl.ephemeris_Accessor) {
      setEphemeris(*(accessorImpl.ephemeris_Accessor));
    } else {
      ephemeris_Accessor.reset();
    }
  }
}

void SOB_CorrelationRecordType::reset() noexcept {
  securityInformation_Accessor->reset();
  sOB_CorrelationRecordID_Accessor->reset();
  correlationType_Accessor->reset();
  correlationTimestamp_Accessor = 0;
  correlatedTo_Accessor.reset();
  correlationInput_Accessor.reset();
  signal_Accessor.reset();
  identity_Accessor.reset();
  singlePositionKinematics_Accessor.reset();
  ephemeris_Accessor.reset();
}

const uci::type::SecurityInformationType& SOB_CorrelationRecordType::getSecurityInformation() const {
  return *securityInformation_Accessor;
}

uci::type::SecurityInformationType& SOB_CorrelationRecordType::getSecurityInformation() {
  return *securityInformation_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setSecurityInformation(const uci::type::SecurityInformationType& accessor) {
  if (&accessor != securityInformation_Accessor.get()) {
    securityInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_CorrelationRecordID_Type& SOB_CorrelationRecordType::getSOB_CorrelationRecordID() const {
  return *sOB_CorrelationRecordID_Accessor;
}

uci::type::SOB_CorrelationRecordID_Type& SOB_CorrelationRecordType::getSOB_CorrelationRecordID() {
  return *sOB_CorrelationRecordID_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setSOB_CorrelationRecordID(const uci::type::SOB_CorrelationRecordID_Type& accessor) {
  if (&accessor != sOB_CorrelationRecordID_Accessor.get()) {
    sOB_CorrelationRecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_CorrelationTypeEnum& SOB_CorrelationRecordType::getCorrelationType() const {
  return *correlationType_Accessor;
}

uci::type::SOB_CorrelationTypeEnum& SOB_CorrelationRecordType::getCorrelationType() {
  return *correlationType_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setCorrelationType(const uci::type::SOB_CorrelationTypeEnum& accessor) {
  if (&accessor != correlationType_Accessor.get()) {
    correlationType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setCorrelationType(uci::type::SOB_CorrelationTypeEnum::EnumerationItem value) {
  correlationType_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeTypeValue SOB_CorrelationRecordType::getCorrelationTimestamp() const {
  return correlationTimestamp_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setCorrelationTimestamp(uci::type::DateTimeTypeValue value) {
  correlationTimestamp_Accessor = value;
  return *this;
}


uci::type::SOB_CorrelatedToType& SOB_CorrelationRecordType::getCorrelatedTo_() const {
  if (correlatedTo_Accessor) {
    return *correlatedTo_Accessor;
  }
  throw uci::base::UCIException("Error in getCorrelatedTo(): An attempt was made to get an optional field that was not enabled, call hasCorrelatedTo() to determine if it is safe to call getCorrelatedTo()");
}

const uci::type::SOB_CorrelatedToType& SOB_CorrelationRecordType::getCorrelatedTo() const {
  return getCorrelatedTo_();
}

uci::type::SOB_CorrelatedToType& SOB_CorrelationRecordType::getCorrelatedTo() {
  return getCorrelatedTo_();
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setCorrelatedTo(const uci::type::SOB_CorrelatedToType& accessor) {
  enableCorrelatedTo();
  if (&accessor != correlatedTo_Accessor.get()) {
    correlatedTo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_CorrelationRecordType::hasCorrelatedTo() const noexcept {
  return static_cast<bool>(correlatedTo_Accessor);
}

uci::type::SOB_CorrelatedToType& SOB_CorrelationRecordType::enableCorrelatedTo(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_CorrelatedToType : type};
  if ((!correlatedTo_Accessor) || (correlatedTo_Accessor->getAccessorType() != requestedType)) {
    correlatedTo_Accessor = SOB_CorrelatedToType::create(requestedType);
    if (!correlatedTo_Accessor) {
      throw uci::base::UCIException("Error in enableCorrelatedTo(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *correlatedTo_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::clearCorrelatedTo() noexcept {
  correlatedTo_Accessor.reset();
  return *this;
}

uci::type::OB_CorrelationInputType& SOB_CorrelationRecordType::getCorrelationInput_() const {
  if (correlationInput_Accessor) {
    return *correlationInput_Accessor;
  }
  throw uci::base::UCIException("Error in getCorrelationInput(): An attempt was made to get an optional field that was not enabled, call hasCorrelationInput() to determine if it is safe to call getCorrelationInput()");
}

const uci::type::OB_CorrelationInputType& SOB_CorrelationRecordType::getCorrelationInput() const {
  return getCorrelationInput_();
}

uci::type::OB_CorrelationInputType& SOB_CorrelationRecordType::getCorrelationInput() {
  return getCorrelationInput_();
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setCorrelationInput(const uci::type::OB_CorrelationInputType& accessor) {
  enableCorrelationInput();
  if (&accessor != correlationInput_Accessor.get()) {
    correlationInput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_CorrelationRecordType::hasCorrelationInput() const noexcept {
  return static_cast<bool>(correlationInput_Accessor);
}

uci::type::OB_CorrelationInputType& SOB_CorrelationRecordType::enableCorrelationInput(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::oB_CorrelationInputType : type};
  if ((!correlationInput_Accessor) || (correlationInput_Accessor->getAccessorType() != requestedType)) {
    correlationInput_Accessor = OB_CorrelationInputType::create(requestedType);
    if (!correlationInput_Accessor) {
      throw uci::base::UCIException("Error in enableCorrelationInput(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *correlationInput_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::clearCorrelationInput() noexcept {
  correlationInput_Accessor.reset();
  return *this;
}

uci::type::EOB_SignalType& SOB_CorrelationRecordType::getSignal_() const {
  if (signal_Accessor) {
    return *signal_Accessor;
  }
  throw uci::base::UCIException("Error in getSignal(): An attempt was made to get an optional field that was not enabled, call hasSignal() to determine if it is safe to call getSignal()");
}

const uci::type::EOB_SignalType& SOB_CorrelationRecordType::getSignal() const {
  return getSignal_();
}

uci::type::EOB_SignalType& SOB_CorrelationRecordType::getSignal() {
  return getSignal_();
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setSignal(const uci::type::EOB_SignalType& accessor) {
  enableSignal(accessor.getAccessorType());
  if (&accessor != signal_Accessor.get()) {
    signal_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SOB_CorrelationRecordType::hasSignal() const noexcept {
  return static_cast<bool>(signal_Accessor);
}

uci::type::EOB_SignalType& SOB_CorrelationRecordType::enableSignal(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_SignalType : type};
  if ((!signal_Accessor) || (signal_Accessor->getAccessorType() != requestedType)) {
    signal_Accessor = EOB_SignalType::create(requestedType);
    if (!signal_Accessor) {
      throw uci::base::UCIException("Error in enableSignal(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signal_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::clearSignal() noexcept {
  signal_Accessor.reset();
  return *this;
}

uci::type::IdentityConfidenceType& SOB_CorrelationRecordType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::IdentityConfidenceType& SOB_CorrelationRecordType::getIdentity() const {
  return getIdentity_();
}

uci::type::IdentityConfidenceType& SOB_CorrelationRecordType::getIdentity() {
  return getIdentity_();
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setIdentity(const uci::type::IdentityConfidenceType& accessor) {
  enableIdentity(accessor.getAccessorType());
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SOB_CorrelationRecordType::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::IdentityConfidenceType& SOB_CorrelationRecordType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityConfidenceType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = IdentityConfidenceType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

uci::type::OrbitalKinematicsChoiceType& SOB_CorrelationRecordType::getSinglePositionKinematics_() const {
  if (singlePositionKinematics_Accessor) {
    return *singlePositionKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getSinglePositionKinematics(): An attempt was made to get an optional field that was not enabled, call hasSinglePositionKinematics() to determine if it is safe to call getSinglePositionKinematics()");
}

const uci::type::OrbitalKinematicsChoiceType& SOB_CorrelationRecordType::getSinglePositionKinematics() const {
  return getSinglePositionKinematics_();
}

uci::type::OrbitalKinematicsChoiceType& SOB_CorrelationRecordType::getSinglePositionKinematics() {
  return getSinglePositionKinematics_();
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setSinglePositionKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  enableSinglePositionKinematics();
  if (&accessor != singlePositionKinematics_Accessor.get()) {
    singlePositionKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_CorrelationRecordType::hasSinglePositionKinematics() const noexcept {
  return static_cast<bool>(singlePositionKinematics_Accessor);
}

uci::type::OrbitalKinematicsChoiceType& SOB_CorrelationRecordType::enableSinglePositionKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsChoiceType : type};
  if ((!singlePositionKinematics_Accessor) || (singlePositionKinematics_Accessor->getAccessorType() != requestedType)) {
    singlePositionKinematics_Accessor = OrbitalKinematicsChoiceType::create(requestedType);
    if (!singlePositionKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableSinglePositionKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *singlePositionKinematics_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::clearSinglePositionKinematics() noexcept {
  singlePositionKinematics_Accessor.reset();
  return *this;
}

uci::type::OrbitalEphemerisChoiceType& SOB_CorrelationRecordType::getEphemeris_() const {
  if (ephemeris_Accessor) {
    return *ephemeris_Accessor;
  }
  throw uci::base::UCIException("Error in getEphemeris(): An attempt was made to get an optional field that was not enabled, call hasEphemeris() to determine if it is safe to call getEphemeris()");
}

const uci::type::OrbitalEphemerisChoiceType& SOB_CorrelationRecordType::getEphemeris() const {
  return getEphemeris_();
}

uci::type::OrbitalEphemerisChoiceType& SOB_CorrelationRecordType::getEphemeris() {
  return getEphemeris_();
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::setEphemeris(const uci::type::OrbitalEphemerisChoiceType& accessor) {
  enableEphemeris();
  if (&accessor != ephemeris_Accessor.get()) {
    ephemeris_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_CorrelationRecordType::hasEphemeris() const noexcept {
  return static_cast<bool>(ephemeris_Accessor);
}

uci::type::OrbitalEphemerisChoiceType& SOB_CorrelationRecordType::enableEphemeris(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalEphemerisChoiceType : type};
  if ((!ephemeris_Accessor) || (ephemeris_Accessor->getAccessorType() != requestedType)) {
    ephemeris_Accessor = OrbitalEphemerisChoiceType::create(requestedType);
    if (!ephemeris_Accessor) {
      throw uci::base::UCIException("Error in enableEphemeris(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ephemeris_Accessor;
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::clearEphemeris() noexcept {
  ephemeris_Accessor.reset();
  return *this;
}

std::unique_ptr<SOB_CorrelationRecordType> SOB_CorrelationRecordType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_CorrelationRecordType : type};
  return (requestedType == uci::type::accessorType::sOB_CorrelationRecordType) ? boost::make_unique<SOB_CorrelationRecordType>() : nullptr;
}

/**  */
namespace SOB_CorrelationRecordType_Names {

constexpr const char* Extern_Type_Name{"SOB_CorrelationRecordType"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* SOB_CorrelationRecordID_Name{"SOB_CorrelationRecordID"};
constexpr const char* CorrelationType_Name{"CorrelationType"};
constexpr const char* CorrelationTimestamp_Name{"CorrelationTimestamp"};
constexpr const char* CorrelatedTo_Name{"CorrelatedTo"};
constexpr const char* CorrelationInput_Name{"CorrelationInput"};
constexpr const char* Signal_Name{"Signal"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* SinglePositionKinematics_Name{"SinglePositionKinematics"};
constexpr const char* Ephemeris_Name{"Ephemeris"};

} // namespace SOB_CorrelationRecordType_Names

void SOB_CorrelationRecordType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_CorrelationRecordType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SOB_CorrelationRecordType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::SOB_CorrelationRecordID_Name) {
      SOB_CorrelationRecordID_Type::deserialize(valueType.second, accessor.getSOB_CorrelationRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelationType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCorrelationType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelationTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCorrelationTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelatedTo_Name) {
      SOB_CorrelatedToType::deserialize(valueType.second, accessor.enableCorrelatedTo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelationInput_Name) {
      OB_CorrelationInputType::deserialize(valueType.second, accessor.enableCorrelationInput(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::Signal_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSignal(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::Identity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIdentity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::SinglePositionKinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableSinglePositionKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::Ephemeris_Name) {
      OrbitalEphemerisChoiceType::deserialize(valueType.second, accessor.enableEphemeris(), nodeName, nsPrefix);
    }
  }
}

std::string SOB_CorrelationRecordType::serialize(const uci::type::SOB_CorrelationRecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SOB_CorrelationRecordType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SOB_CorrelationRecordType_Names::Extern_Type_Name);
  }
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, SOB_CorrelationRecordType_Names::SecurityInformation_Name);
  SOB_CorrelationRecordID_Type::serialize(accessor.getSOB_CorrelationRecordID(), node, SOB_CorrelationRecordType_Names::SOB_CorrelationRecordID_Name);
  SOB_CorrelationTypeEnum::serialize(accessor.getCorrelationType(), node, SOB_CorrelationRecordType_Names::CorrelationType_Name, false);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getCorrelationTimestamp(), node, SOB_CorrelationRecordType_Names::CorrelationTimestamp_Name);
  if (accessor.hasCorrelatedTo()) {
    SOB_CorrelatedToType::serialize(accessor.getCorrelatedTo(), node, SOB_CorrelationRecordType_Names::CorrelatedTo_Name);
  }
  if (accessor.hasCorrelationInput()) {
    OB_CorrelationInputType::serialize(accessor.getCorrelationInput(), node, SOB_CorrelationRecordType_Names::CorrelationInput_Name);
  }
  if (accessor.hasSignal()) {
    EOB_SignalType::serialize(accessor.getSignal(), node, SOB_CorrelationRecordType_Names::Signal_Name);
  }
  if (accessor.hasIdentity()) {
    IdentityConfidenceType::serialize(accessor.getIdentity(), node, SOB_CorrelationRecordType_Names::Identity_Name);
  }
  if (accessor.hasSinglePositionKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getSinglePositionKinematics(), node, SOB_CorrelationRecordType_Names::SinglePositionKinematics_Name);
  }
  if (accessor.hasEphemeris()) {
    OrbitalEphemerisChoiceType::serialize(accessor.getEphemeris(), node, SOB_CorrelationRecordType_Names::Ephemeris_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SOB_CorrelationRecordType>().release());
}

uci::type::SOB_CorrelationRecordType& SOB_CorrelationRecordType::create(const uci::type::SOB_CorrelationRecordType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SOB_CorrelationRecordType> newAccessor{boost::make_unique<asb_uci::type::SOB_CorrelationRecordType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SOB_CorrelationRecordType::destroy(uci::type::SOB_CorrelationRecordType& accessor) {
  delete dynamic_cast<asb_uci::type::SOB_CorrelationRecordType*>(&accessor);
}

} // namespace type

} // namespace uci

