/** @file RequirementDependencyBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementDependencyBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OpConstraintTypeEnum.h"
#include "asb_uci/type/RequirementDependencyEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/OpConstraintTypeEnum.h"
#include "uci/type/RequirementDependencyBaseType.h"
#include "uci/type/RequirementDependencyEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementDependencyBaseType::RequirementDependencyBaseType()
  : dependencyType_Accessor{boost::make_unique<RequirementDependencyEnum>()},
    dependencyExtent_Accessor{boost::make_unique<OpConstraintTypeEnum>()} {
}

RequirementDependencyBaseType::~RequirementDependencyBaseType() = default;

void RequirementDependencyBaseType::copy(const uci::type::RequirementDependencyBaseType& accessor) {
  copyImpl(accessor, false);
}

void RequirementDependencyBaseType::copyImpl(const uci::type::RequirementDependencyBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementDependencyBaseType)) {
      const auto& accessorImpl = dynamic_cast<const RequirementDependencyBaseType&>(accessor);
      setDependencyType(*(accessorImpl.dependencyType_Accessor));
      setDependencyExtent(*(accessorImpl.dependencyExtent_Accessor));
      if (accessorImpl.hasEarliestTime()) {
        setEarliestTime(accessorImpl.getEarliestTime());
      } else {
        clearEarliestTime();
      }
      if (accessorImpl.hasLatestTime()) {
        setLatestTime(accessorImpl.getLatestTime());
      } else {
        clearLatestTime();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RequirementDependencyBaseType::reset() noexcept {
  dependencyType_Accessor->reset();
  dependencyExtent_Accessor->reset();
  clearEarliestTime();
  clearLatestTime();
}

const uci::type::RequirementDependencyEnum& RequirementDependencyBaseType::getDependencyType() const {
  return *dependencyType_Accessor;
}

uci::type::RequirementDependencyEnum& RequirementDependencyBaseType::getDependencyType() {
  return *dependencyType_Accessor;
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::setDependencyType(const uci::type::RequirementDependencyEnum& accessor) {
  if (&accessor != dependencyType_Accessor.get()) {
    dependencyType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::setDependencyType(uci::type::RequirementDependencyEnum::EnumerationItem value) {
  dependencyType_Accessor->setValue(value);
  return *this;
}


const uci::type::OpConstraintTypeEnum& RequirementDependencyBaseType::getDependencyExtent() const {
  return *dependencyExtent_Accessor;
}

uci::type::OpConstraintTypeEnum& RequirementDependencyBaseType::getDependencyExtent() {
  return *dependencyExtent_Accessor;
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::setDependencyExtent(const uci::type::OpConstraintTypeEnum& accessor) {
  if (&accessor != dependencyExtent_Accessor.get()) {
    dependencyExtent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::setDependencyExtent(uci::type::OpConstraintTypeEnum::EnumerationItem value) {
  dependencyExtent_Accessor->setValue(value);
  return *this;
}


uci::type::DurationTypeValue RequirementDependencyBaseType::getEarliestTime() const {
  if (earliestTime_Accessor) {
    return *earliestTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEarliestTime(): An attempt was made to get an optional field that was not enabled, call hasEarliestTime() to determine if it is safe to call getEarliestTime()");
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::setEarliestTime(uci::type::DurationTypeValue value) {
  earliestTime_Accessor = value;
  return *this;
}

bool RequirementDependencyBaseType::hasEarliestTime() const noexcept {
  return earliestTime_Accessor.has_value();
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::clearEarliestTime() noexcept {
  earliestTime_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue RequirementDependencyBaseType::getLatestTime() const {
  if (latestTime_Accessor) {
    return *latestTime_Accessor;
  }
  throw uci::base::UCIException("Error in getLatestTime(): An attempt was made to get an optional field that was not enabled, call hasLatestTime() to determine if it is safe to call getLatestTime()");
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::setLatestTime(uci::type::DurationTypeValue value) {
  latestTime_Accessor = value;
  return *this;
}

bool RequirementDependencyBaseType::hasLatestTime() const noexcept {
  return latestTime_Accessor.has_value();
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::clearLatestTime() noexcept {
  latestTime_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementDependencyBaseType> RequirementDependencyBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementDependencyBaseType : type};
  return std::unique_ptr<RequirementDependencyBaseType>(dynamic_cast<RequirementDependencyBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RequirementDependencyBaseType_Names {

constexpr const char* Extern_Type_Name{"RequirementDependencyBaseType"};
constexpr const char* DependencyType_Name{"DependencyType"};
constexpr const char* DependencyExtent_Name{"DependencyExtent"};
constexpr const char* EarliestTime_Name{"EarliestTime"};
constexpr const char* LatestTime_Name{"LatestTime"};

} // namespace RequirementDependencyBaseType_Names

void RequirementDependencyBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementDependencyBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementDependencyBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementDependencyBaseType_Names::DependencyType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDependencyType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementDependencyBaseType_Names::DependencyExtent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDependencyExtent().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementDependencyBaseType_Names::EarliestTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEarliestTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RequirementDependencyBaseType_Names::LatestTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLatestTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string RequirementDependencyBaseType::serialize(const uci::type::RequirementDependencyBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementDependencyBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementDependencyBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementDependencyBaseType_Names::Extern_Type_Name);
    }
    RequirementDependencyEnum::serialize(accessor.getDependencyType(), node, RequirementDependencyBaseType_Names::DependencyType_Name, false);
    OpConstraintTypeEnum::serialize(accessor.getDependencyExtent(), node, RequirementDependencyBaseType_Names::DependencyExtent_Name, false);
    if (accessor.hasEarliestTime()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getEarliestTime(), node, RequirementDependencyBaseType_Names::EarliestTime_Name);
    }
    if (accessor.hasLatestTime()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getLatestTime(), node, RequirementDependencyBaseType_Names::LatestTime_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementDependencyBaseType>().release());
}

uci::type::RequirementDependencyBaseType& RequirementDependencyBaseType::create(const uci::type::RequirementDependencyBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementDependencyBaseType> newAccessor{boost::make_unique<asb_uci::type::RequirementDependencyBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementDependencyBaseType::destroy(uci::type::RequirementDependencyBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementDependencyBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

