/** @file OrbitalManeuverDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalManeuverDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitalManeuverDetailsBaseType.h"
#include "../../../include/asb_uci/type/OrbitalManeuverTypeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalManeuverDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalManeuverTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalManeuverDetailsType::OrbitalManeuverDetailsType() = default;

OrbitalManeuverDetailsType::~OrbitalManeuverDetailsType() = default;

void OrbitalManeuverDetailsType::copy(const uci::type::OrbitalManeuverDetailsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalManeuverDetailsType::copyImpl(const uci::type::OrbitalManeuverDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    OrbitalManeuverDetailsBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OrbitalManeuverDetailsType&>(accessor);
    setStartEpoch(accessorImpl.startEpoch_Accessor);
    if (accessorImpl.maneuverType_Accessor) {
      setManeuverType(*(accessorImpl.maneuverType_Accessor));
    } else {
      maneuverType_Accessor.reset();
    }
  }
}

void OrbitalManeuverDetailsType::reset() noexcept {
  OrbitalManeuverDetailsBaseType::reset();
  startEpoch_Accessor = 0;
  maneuverType_Accessor.reset();
}

uci::type::DateTimeTypeValue OrbitalManeuverDetailsType::getStartEpoch() const {
  return startEpoch_Accessor;
}

uci::type::OrbitalManeuverDetailsType& OrbitalManeuverDetailsType::setStartEpoch(uci::type::DateTimeTypeValue value) {
  startEpoch_Accessor = value;
  return *this;
}


uci::type::OrbitalManeuverTypeEnum& OrbitalManeuverDetailsType::getManeuverType_() const {
  if (maneuverType_Accessor) {
    return *maneuverType_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuverType(): An attempt was made to get an optional field that was not enabled, call hasManeuverType() to determine if it is safe to call getManeuverType()");
}

const uci::type::OrbitalManeuverTypeEnum& OrbitalManeuverDetailsType::getManeuverType() const {
  return getManeuverType_();
}

uci::type::OrbitalManeuverTypeEnum& OrbitalManeuverDetailsType::getManeuverType() {
  return getManeuverType_();
}

uci::type::OrbitalManeuverDetailsType& OrbitalManeuverDetailsType::setManeuverType(const uci::type::OrbitalManeuverTypeEnum& accessor) {
  enableManeuverType();
  if (&accessor != maneuverType_Accessor.get()) {
    maneuverType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalManeuverDetailsType& OrbitalManeuverDetailsType::setManeuverType(const uci::type::OrbitalManeuverTypeEnum::EnumerationItem value) {
  enableManeuverType().setValue(value);
  return *this;
}

bool OrbitalManeuverDetailsType::hasManeuverType() const noexcept {
  return static_cast<bool>(maneuverType_Accessor);
}

uci::type::OrbitalManeuverTypeEnum& OrbitalManeuverDetailsType::enableManeuverType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverTypeEnum : type};
  if ((!maneuverType_Accessor) || (maneuverType_Accessor->getAccessorType() != requestedType)) {
    maneuverType_Accessor = OrbitalManeuverTypeEnum::create(requestedType);
    if (!maneuverType_Accessor) {
      throw uci::base::UCIException("Error in enableManeuverType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuverType_Accessor;
}

uci::type::OrbitalManeuverDetailsType& OrbitalManeuverDetailsType::clearManeuverType() noexcept {
  maneuverType_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalManeuverDetailsType> OrbitalManeuverDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsType : type};
  return (requestedType == uci::type::accessorType::orbitalManeuverDetailsType) ? boost::make_unique<OrbitalManeuverDetailsType>() : nullptr;
}

/**  */
namespace OrbitalManeuverDetailsType_Names {

constexpr const char* Extern_Type_Name{"OrbitalManeuverDetailsType"};
constexpr const char* StartEpoch_Name{"StartEpoch"};
constexpr const char* ManeuverType_Name{"ManeuverType"};

} // namespace OrbitalManeuverDetailsType_Names

void OrbitalManeuverDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalManeuverDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalManeuverDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalManeuverDetailsType_Names::StartEpoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStartEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalManeuverDetailsType_Names::ManeuverType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableManeuverType().setValueFromName(*value);
      }
    }
  }
  OrbitalManeuverDetailsBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OrbitalManeuverDetailsType::serialize(const uci::type::OrbitalManeuverDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalManeuverDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalManeuverDetailsType_Names::Extern_Type_Name);
  }
  OrbitalManeuverDetailsBaseType::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getStartEpoch(), node, OrbitalManeuverDetailsType_Names::StartEpoch_Name);
  if (accessor.hasManeuverType()) {
    OrbitalManeuverTypeEnum::serialize(accessor.getManeuverType(), node, OrbitalManeuverDetailsType_Names::ManeuverType_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalManeuverDetailsType& OrbitalManeuverDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalManeuverDetailsType>().release());
}

uci::type::OrbitalManeuverDetailsType& OrbitalManeuverDetailsType::create(const uci::type::OrbitalManeuverDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalManeuverDetailsType> newAccessor{boost::make_unique<asb_uci::type::OrbitalManeuverDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalManeuverDetailsType::destroy(uci::type::OrbitalManeuverDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalManeuverDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

