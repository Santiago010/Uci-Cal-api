/** @file WeatherReportDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WeatherReportDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/WeatherReportType.h"
#include "../../../include/asb_uci/type/WeatherReportTypeEnum.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherReportDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherReportType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherReportTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherReportDataType::WeatherReportDataType()
  : weatherReportType_Accessor{boost::make_unique<WeatherReportTypeEnum>()},
    schedule_Accessor{boost::make_unique<Schedule>(1, SIZE_MAX)},
    weatherArea_Accessor{boost::make_unique<ZoneType>()},
    weatherData_Accessor{boost::make_unique<WeatherReportType>()} {
}

WeatherReportDataType::~WeatherReportDataType() = default;

void WeatherReportDataType::copy(const uci::type::WeatherReportDataType& accessor) {
  copyImpl(accessor, false);
}

void WeatherReportDataType::copyImpl(const uci::type::WeatherReportDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeatherReportDataType&>(accessor);
    setWeatherReportType(*(accessorImpl.weatherReportType_Accessor));
    setCreated(accessorImpl.created_Accessor);
    setSchedule(*(accessorImpl.schedule_Accessor));
    setWeatherArea(*(accessorImpl.weatherArea_Accessor));
    if (accessorImpl.hasQNH()) {
      setQNH(accessorImpl.getQNH());
    } else {
      clearQNH();
    }
    setWeatherData(*(accessorImpl.weatherData_Accessor));
  }
}

void WeatherReportDataType::reset() noexcept {
  weatherReportType_Accessor->reset();
  created_Accessor = 0;
  schedule_Accessor->reset();
  if (weatherArea_Accessor->getAccessorType() != uci::type::accessorType::zoneType) {
    weatherArea_Accessor = boost::make_unique<ZoneType>();
  } else {
    weatherArea_Accessor->reset();
  }
  clearQNH();
  weatherData_Accessor->reset();
}

const uci::type::WeatherReportTypeEnum& WeatherReportDataType::getWeatherReportType() const {
  return *weatherReportType_Accessor;
}

uci::type::WeatherReportTypeEnum& WeatherReportDataType::getWeatherReportType() {
  return *weatherReportType_Accessor;
}

uci::type::WeatherReportDataType& WeatherReportDataType::setWeatherReportType(const uci::type::WeatherReportTypeEnum& accessor) {
  if (&accessor != weatherReportType_Accessor.get()) {
    weatherReportType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherReportDataType& WeatherReportDataType::setWeatherReportType(uci::type::WeatherReportTypeEnum::EnumerationItem value) {
  weatherReportType_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeTypeValue WeatherReportDataType::getCreated() const {
  return created_Accessor;
}

uci::type::WeatherReportDataType& WeatherReportDataType::setCreated(uci::type::DateTimeTypeValue value) {
  created_Accessor = value;
  return *this;
}


const uci::type::WeatherReportDataType::Schedule& WeatherReportDataType::getSchedule() const {
  return *schedule_Accessor;
}

uci::type::WeatherReportDataType::Schedule& WeatherReportDataType::getSchedule() {
  return *schedule_Accessor;
}

uci::type::WeatherReportDataType& WeatherReportDataType::setSchedule(const uci::type::WeatherReportDataType::Schedule& accessor) {
  if (&accessor != schedule_Accessor.get()) {
    schedule_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ZoneType& WeatherReportDataType::getWeatherArea() const {
  return *weatherArea_Accessor;
}

uci::type::ZoneType& WeatherReportDataType::getWeatherArea() {
  return *weatherArea_Accessor;
}

uci::type::WeatherReportDataType& WeatherReportDataType::setWeatherArea(const uci::type::ZoneType& accessor) {
  enableWeatherArea(accessor.getAccessorType());
  if (&accessor != weatherArea_Accessor.get()) {
    weatherArea_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ZoneType& WeatherReportDataType::enableWeatherArea(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!weatherArea_Accessor) || (weatherArea_Accessor->getAccessorType() != requestedType)) {
    weatherArea_Accessor = ZoneType::create(requestedType);
    if (!weatherArea_Accessor) {
      throw uci::base::UCIException("Error in enableWeatherArea(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherArea_Accessor;
}

xs::Float WeatherReportDataType::getQNH() const {
  if (qNH_Accessor) {
    return *qNH_Accessor;
  }
  throw uci::base::UCIException("Error in getQNH(): An attempt was made to get an optional field that was not enabled, call hasQNH() to determine if it is safe to call getQNH()");
}

uci::type::WeatherReportDataType& WeatherReportDataType::setQNH(xs::Float value) {
  qNH_Accessor = value;
  return *this;
}

bool WeatherReportDataType::hasQNH() const noexcept {
  return qNH_Accessor.has_value();
}

uci::type::WeatherReportDataType& WeatherReportDataType::clearQNH() noexcept {
  qNH_Accessor.reset();
  return *this;
}

const uci::type::WeatherReportType& WeatherReportDataType::getWeatherData() const {
  return *weatherData_Accessor;
}

uci::type::WeatherReportType& WeatherReportDataType::getWeatherData() {
  return *weatherData_Accessor;
}

uci::type::WeatherReportDataType& WeatherReportDataType::setWeatherData(const uci::type::WeatherReportType& accessor) {
  if (&accessor != weatherData_Accessor.get()) {
    weatherData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<WeatherReportDataType> WeatherReportDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherReportDataType : type};
  return (requestedType == uci::type::accessorType::weatherReportDataType) ? boost::make_unique<WeatherReportDataType>() : nullptr;
}

/**  */
namespace WeatherReportDataType_Names {

constexpr const char* Extern_Type_Name{"WeatherReportDataType"};
constexpr const char* WeatherReportType_Name{"WeatherReportType"};
constexpr const char* Created_Name{"Created"};
constexpr const char* Schedule_Name{"Schedule"};
constexpr const char* WeatherArea_Name{"WeatherArea"};
constexpr const char* QNH_Name{"QNH"};
constexpr const char* WeatherData_Name{"WeatherData"};

} // namespace WeatherReportDataType_Names

void WeatherReportDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherReportDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherReportDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherReportDataType_Names::WeatherReportType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getWeatherReportType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherReportDataType_Names::Created_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCreated(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherReportDataType_Names::Schedule_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherReportDataType::Schedule& boundedList = accessor.getSchedule();
        const uci::type::WeatherReportDataType::Schedule::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DateTimeRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WeatherReportDataType_Names::WeatherArea_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWeatherArea(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherReportDataType_Names::QNH_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setQNH(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherReportDataType_Names::WeatherData_Name) {
      WeatherReportType::deserialize(valueType.second, accessor.getWeatherData(), nodeName, nsPrefix);
    }
  }
}

std::string WeatherReportDataType::serialize(const uci::type::WeatherReportDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherReportDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherReportDataType_Names::Extern_Type_Name);
  }
  WeatherReportTypeEnum::serialize(accessor.getWeatherReportType(), node, WeatherReportDataType_Names::WeatherReportType_Name, false);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getCreated(), node, WeatherReportDataType_Names::Created_Name);
  {
    const uci::type::WeatherReportDataType::Schedule& boundedList = accessor.getSchedule();
    for (uci::type::WeatherReportDataType::Schedule::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DateTimeRangeType::serialize(boundedList.at(i), node, WeatherReportDataType_Names::Schedule_Name);
    }
  }
  ZoneType::serialize(accessor.getWeatherArea(), node, WeatherReportDataType_Names::WeatherArea_Name);
  if (accessor.hasQNH()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getQNH(), node, WeatherReportDataType_Names::QNH_Name);
  }
  WeatherReportType::serialize(accessor.getWeatherData(), node, WeatherReportDataType_Names::WeatherData_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherReportDataType& WeatherReportDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherReportDataType>().release());
}

uci::type::WeatherReportDataType& WeatherReportDataType::create(const uci::type::WeatherReportDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherReportDataType> newAccessor{boost::make_unique<asb_uci::type::WeatherReportDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherReportDataType::destroy(uci::type::WeatherReportDataType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherReportDataType*>(&accessor);
}

} // namespace type

} // namespace uci

