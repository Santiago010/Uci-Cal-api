/** @file OrbitObjectBreakupType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitObjectBreakupType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitConflictObjectType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitConflictObjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitObjectBreakupType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitObjectBreakupType::OrbitObjectBreakupType()
  : breakupObject_Accessor{boost::make_unique<OrbitConflictObjectType>()} {
}

OrbitObjectBreakupType::~OrbitObjectBreakupType() = default;

void OrbitObjectBreakupType::copy(const uci::type::OrbitObjectBreakupType& accessor) {
  copyImpl(accessor, false);
}

void OrbitObjectBreakupType::copyImpl(const uci::type::OrbitObjectBreakupType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitObjectBreakupType&>(accessor);
    setBreakupObject(*(accessorImpl.breakupObject_Accessor));
    if (accessorImpl.hasPercentageOfFragmentation()) {
      setPercentageOfFragmentation(accessorImpl.getPercentageOfFragmentation());
    } else {
      clearPercentageOfFragmentation();
    }
    if (accessorImpl.hasTotalEnergy()) {
      setTotalEnergy(accessorImpl.getTotalEnergy());
    } else {
      clearTotalEnergy();
    }
    if (accessorImpl.hasPercentileCloudBoundary()) {
      setPercentileCloudBoundary(accessorImpl.getPercentileCloudBoundary());
    } else {
      clearPercentileCloudBoundary();
    }
  }
}

void OrbitObjectBreakupType::reset() noexcept {
  breakupObject_Accessor->reset();
  clearPercentageOfFragmentation();
  clearTotalEnergy();
  clearPercentileCloudBoundary();
}

const uci::type::OrbitConflictObjectType& OrbitObjectBreakupType::getBreakupObject() const {
  return *breakupObject_Accessor;
}

uci::type::OrbitConflictObjectType& OrbitObjectBreakupType::getBreakupObject() {
  return *breakupObject_Accessor;
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::setBreakupObject(const uci::type::OrbitConflictObjectType& accessor) {
  if (&accessor != breakupObject_Accessor.get()) {
    breakupObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue OrbitObjectBreakupType::getPercentageOfFragmentation() const {
  if (percentageOfFragmentation_Accessor) {
    return *percentageOfFragmentation_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageOfFragmentation(): An attempt was made to get an optional field that was not enabled, call hasPercentageOfFragmentation() to determine if it is safe to call getPercentageOfFragmentation()");
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::setPercentageOfFragmentation(uci::type::PercentTypeValue value) {
  percentageOfFragmentation_Accessor = value;
  return *this;
}

bool OrbitObjectBreakupType::hasPercentageOfFragmentation() const noexcept {
  return percentageOfFragmentation_Accessor.has_value();
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::clearPercentageOfFragmentation() noexcept {
  percentageOfFragmentation_Accessor.reset();
  return *this;
}

xs::Float OrbitObjectBreakupType::getTotalEnergy() const {
  if (totalEnergy_Accessor) {
    return *totalEnergy_Accessor;
  }
  throw uci::base::UCIException("Error in getTotalEnergy(): An attempt was made to get an optional field that was not enabled, call hasTotalEnergy() to determine if it is safe to call getTotalEnergy()");
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::setTotalEnergy(xs::Float value) {
  totalEnergy_Accessor = value;
  return *this;
}

bool OrbitObjectBreakupType::hasTotalEnergy() const noexcept {
  return totalEnergy_Accessor.has_value();
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::clearTotalEnergy() noexcept {
  totalEnergy_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue OrbitObjectBreakupType::getPercentileCloudBoundary() const {
  if (percentileCloudBoundary_Accessor) {
    return *percentileCloudBoundary_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentileCloudBoundary(): An attempt was made to get an optional field that was not enabled, call hasPercentileCloudBoundary() to determine if it is safe to call getPercentileCloudBoundary()");
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::setPercentileCloudBoundary(uci::type::PercentTypeValue value) {
  percentileCloudBoundary_Accessor = value;
  return *this;
}

bool OrbitObjectBreakupType::hasPercentileCloudBoundary() const noexcept {
  return percentileCloudBoundary_Accessor.has_value();
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::clearPercentileCloudBoundary() noexcept {
  percentileCloudBoundary_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitObjectBreakupType> OrbitObjectBreakupType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitObjectBreakupType : type};
  return (requestedType == uci::type::accessorType::orbitObjectBreakupType) ? boost::make_unique<OrbitObjectBreakupType>() : nullptr;
}

/**  */
namespace OrbitObjectBreakupType_Names {

constexpr const char* Extern_Type_Name{"OrbitObjectBreakupType"};
constexpr const char* BreakupObject_Name{"BreakupObject"};
constexpr const char* PercentageOfFragmentation_Name{"PercentageOfFragmentation"};
constexpr const char* TotalEnergy_Name{"TotalEnergy"};
constexpr const char* PercentileCloudBoundary_Name{"PercentileCloudBoundary"};

} // namespace OrbitObjectBreakupType_Names

void OrbitObjectBreakupType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitObjectBreakupType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitObjectBreakupType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitObjectBreakupType_Names::BreakupObject_Name) {
      OrbitConflictObjectType::deserialize(valueType.second, accessor.getBreakupObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitObjectBreakupType_Names::PercentageOfFragmentation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageOfFragmentation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitObjectBreakupType_Names::TotalEnergy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTotalEnergy(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitObjectBreakupType_Names::PercentileCloudBoundary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentileCloudBoundary(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitObjectBreakupType::serialize(const uci::type::OrbitObjectBreakupType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitObjectBreakupType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitObjectBreakupType_Names::Extern_Type_Name);
  }
  OrbitConflictObjectType::serialize(accessor.getBreakupObject(), node, OrbitObjectBreakupType_Names::BreakupObject_Name);
  if (accessor.hasPercentageOfFragmentation()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageOfFragmentation(), node, OrbitObjectBreakupType_Names::PercentageOfFragmentation_Name);
  }
  if (accessor.hasTotalEnergy()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getTotalEnergy(), node, OrbitObjectBreakupType_Names::TotalEnergy_Name);
  }
  if (accessor.hasPercentileCloudBoundary()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentileCloudBoundary(), node, OrbitObjectBreakupType_Names::PercentileCloudBoundary_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitObjectBreakupType>().release());
}

uci::type::OrbitObjectBreakupType& OrbitObjectBreakupType::create(const uci::type::OrbitObjectBreakupType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitObjectBreakupType> newAccessor{boost::make_unique<asb_uci::type::OrbitObjectBreakupType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitObjectBreakupType::destroy(uci::type::OrbitObjectBreakupType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitObjectBreakupType*>(&accessor);
}

} // namespace type

} // namespace uci

