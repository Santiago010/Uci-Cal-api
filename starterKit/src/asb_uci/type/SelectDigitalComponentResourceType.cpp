/** @file SelectDigitalComponentResourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SelectDigitalComponentResourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BeamBandWidthAndSampleRateType.h"
#include "../../../include/asb_uci/type/MFA_AddressType.h"
#include "../../../include/asb_uci/type/MFP_AddressType.h"
#include "../../../include/asb_uci/type/NetworkDataRateRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamBandWidthAndSampleRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MFA_AddressType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MFP_AddressType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkDataRateRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SelectDigitalComponentResourceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SelectDigitalComponentResourceType::SelectDigitalComponentResourceType()
  : mFP_Address_Accessor{boost::make_unique<MFP_Address>(0, SIZE_MAX)},
    beamBandWidthAndSampleRate_Accessor{boost::make_unique<BeamBandWidthAndSampleRate>(0, SIZE_MAX)} {
}

SelectDigitalComponentResourceType::~SelectDigitalComponentResourceType() = default;

void SelectDigitalComponentResourceType::copy(const uci::type::SelectDigitalComponentResourceType& accessor) {
  copyImpl(accessor, false);
}

void SelectDigitalComponentResourceType::copyImpl(const uci::type::SelectDigitalComponentResourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SelectDigitalComponentResourceType&>(accessor);
    if (accessorImpl.mFA_Address_Accessor) {
      setMFA_Address(*(accessorImpl.mFA_Address_Accessor));
    } else {
      mFA_Address_Accessor.reset();
    }
    setMFP_Address(*(accessorImpl.mFP_Address_Accessor));
    setBeamBandWidthAndSampleRate(*(accessorImpl.beamBandWidthAndSampleRate_Accessor));
    if (accessorImpl.networkDataRate_Accessor) {
      setNetworkDataRate(*(accessorImpl.networkDataRate_Accessor));
    } else {
      networkDataRate_Accessor.reset();
    }
  }
}

void SelectDigitalComponentResourceType::reset() noexcept {
  mFA_Address_Accessor.reset();
  mFP_Address_Accessor->reset();
  beamBandWidthAndSampleRate_Accessor->reset();
  networkDataRate_Accessor.reset();
}

uci::type::MFA_AddressType& SelectDigitalComponentResourceType::getMFA_Address_() const {
  if (mFA_Address_Accessor) {
    return *mFA_Address_Accessor;
  }
  throw uci::base::UCIException("Error in getMFA_Address(): An attempt was made to get an optional field that was not enabled, call hasMFA_Address() to determine if it is safe to call getMFA_Address()");
}

const uci::type::MFA_AddressType& SelectDigitalComponentResourceType::getMFA_Address() const {
  return getMFA_Address_();
}

uci::type::MFA_AddressType& SelectDigitalComponentResourceType::getMFA_Address() {
  return getMFA_Address_();
}

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::setMFA_Address(const uci::type::MFA_AddressType& accessor) {
  enableMFA_Address();
  if (&accessor != mFA_Address_Accessor.get()) {
    mFA_Address_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SelectDigitalComponentResourceType::hasMFA_Address() const noexcept {
  return static_cast<bool>(mFA_Address_Accessor);
}

uci::type::MFA_AddressType& SelectDigitalComponentResourceType::enableMFA_Address(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mFA_AddressType : type};
  if ((!mFA_Address_Accessor) || (mFA_Address_Accessor->getAccessorType() != requestedType)) {
    mFA_Address_Accessor = MFA_AddressType::create(requestedType);
    if (!mFA_Address_Accessor) {
      throw uci::base::UCIException("Error in enableMFA_Address(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mFA_Address_Accessor;
}

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::clearMFA_Address() noexcept {
  mFA_Address_Accessor.reset();
  return *this;
}

const uci::type::SelectDigitalComponentResourceType::MFP_Address& SelectDigitalComponentResourceType::getMFP_Address() const {
  return *mFP_Address_Accessor;
}

uci::type::SelectDigitalComponentResourceType::MFP_Address& SelectDigitalComponentResourceType::getMFP_Address() {
  return *mFP_Address_Accessor;
}

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::setMFP_Address(const uci::type::SelectDigitalComponentResourceType::MFP_Address& accessor) {
  if (&accessor != mFP_Address_Accessor.get()) {
    mFP_Address_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& SelectDigitalComponentResourceType::getBeamBandWidthAndSampleRate() const {
  return *beamBandWidthAndSampleRate_Accessor;
}

uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& SelectDigitalComponentResourceType::getBeamBandWidthAndSampleRate() {
  return *beamBandWidthAndSampleRate_Accessor;
}

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::setBeamBandWidthAndSampleRate(const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& accessor) {
  if (&accessor != beamBandWidthAndSampleRate_Accessor.get()) {
    beamBandWidthAndSampleRate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NetworkDataRateRangeType& SelectDigitalComponentResourceType::getNetworkDataRate_() const {
  if (networkDataRate_Accessor) {
    return *networkDataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkDataRate(): An attempt was made to get an optional field that was not enabled, call hasNetworkDataRate() to determine if it is safe to call getNetworkDataRate()");
}

const uci::type::NetworkDataRateRangeType& SelectDigitalComponentResourceType::getNetworkDataRate() const {
  return getNetworkDataRate_();
}

uci::type::NetworkDataRateRangeType& SelectDigitalComponentResourceType::getNetworkDataRate() {
  return getNetworkDataRate_();
}

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::setNetworkDataRate(const uci::type::NetworkDataRateRangeType& accessor) {
  enableNetworkDataRate();
  if (&accessor != networkDataRate_Accessor.get()) {
    networkDataRate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SelectDigitalComponentResourceType::hasNetworkDataRate() const noexcept {
  return static_cast<bool>(networkDataRate_Accessor);
}

uci::type::NetworkDataRateRangeType& SelectDigitalComponentResourceType::enableNetworkDataRate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkDataRateRangeType : type};
  if ((!networkDataRate_Accessor) || (networkDataRate_Accessor->getAccessorType() != requestedType)) {
    networkDataRate_Accessor = NetworkDataRateRangeType::create(requestedType);
    if (!networkDataRate_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkDataRate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkDataRate_Accessor;
}

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::clearNetworkDataRate() noexcept {
  networkDataRate_Accessor.reset();
  return *this;
}

std::unique_ptr<SelectDigitalComponentResourceType> SelectDigitalComponentResourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::selectDigitalComponentResourceType : type};
  return (requestedType == uci::type::accessorType::selectDigitalComponentResourceType) ? boost::make_unique<SelectDigitalComponentResourceType>() : nullptr;
}

/**  */
namespace SelectDigitalComponentResourceType_Names {

constexpr const char* Extern_Type_Name{"SelectDigitalComponentResourceType"};
constexpr const char* MFA_Address_Name{"MFA_Address"};
constexpr const char* MFP_Address_Name{"MFP_Address"};
constexpr const char* BeamBandWidthAndSampleRate_Name{"BeamBandWidthAndSampleRate"};
constexpr const char* NetworkDataRate_Name{"NetworkDataRate"};

} // namespace SelectDigitalComponentResourceType_Names

void SelectDigitalComponentResourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SelectDigitalComponentResourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SelectDigitalComponentResourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SelectDigitalComponentResourceType_Names::MFA_Address_Name) {
      MFA_AddressType::deserialize(valueType.second, accessor.enableMFA_Address(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SelectDigitalComponentResourceType_Names::MFP_Address_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SelectDigitalComponentResourceType::MFP_Address& boundedList = accessor.getMFP_Address();
        const uci::type::SelectDigitalComponentResourceType::MFP_Address::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MFP_AddressType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SelectDigitalComponentResourceType_Names::BeamBandWidthAndSampleRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& boundedList = accessor.getBeamBandWidthAndSampleRate();
        const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BeamBandWidthAndSampleRateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SelectDigitalComponentResourceType_Names::NetworkDataRate_Name) {
      NetworkDataRateRangeType::deserialize(valueType.second, accessor.enableNetworkDataRate(), nodeName, nsPrefix);
    }
  }
}

std::string SelectDigitalComponentResourceType::serialize(const uci::type::SelectDigitalComponentResourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SelectDigitalComponentResourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SelectDigitalComponentResourceType_Names::Extern_Type_Name);
  }
  if (accessor.hasMFA_Address()) {
    MFA_AddressType::serialize(accessor.getMFA_Address(), node, SelectDigitalComponentResourceType_Names::MFA_Address_Name);
  }
  {
    const uci::type::SelectDigitalComponentResourceType::MFP_Address& boundedList = accessor.getMFP_Address();
    for (uci::type::SelectDigitalComponentResourceType::MFP_Address::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MFP_AddressType::serialize(boundedList.at(i), node, SelectDigitalComponentResourceType_Names::MFP_Address_Name);
    }
  }
  {
    const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& boundedList = accessor.getBeamBandWidthAndSampleRate();
    for (uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::BeamBandWidthAndSampleRateType::serialize(boundedList.at(i), node, SelectDigitalComponentResourceType_Names::BeamBandWidthAndSampleRate_Name);
    }
  }
  if (accessor.hasNetworkDataRate()) {
    NetworkDataRateRangeType::serialize(accessor.getNetworkDataRate(), node, SelectDigitalComponentResourceType_Names::NetworkDataRate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SelectDigitalComponentResourceType>().release());
}

uci::type::SelectDigitalComponentResourceType& SelectDigitalComponentResourceType::create(const uci::type::SelectDigitalComponentResourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SelectDigitalComponentResourceType> newAccessor{boost::make_unique<asb_uci::type::SelectDigitalComponentResourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SelectDigitalComponentResourceType::destroy(uci::type::SelectDigitalComponentResourceType& accessor) {
  delete dynamic_cast<asb_uci::type::SelectDigitalComponentResourceType*>(&accessor);
}

} // namespace type

} // namespace uci

