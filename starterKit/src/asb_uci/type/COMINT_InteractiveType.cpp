/** @file COMINT_InteractiveType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/COMINT_InteractiveType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/COMINT_AcquisitionTargetType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/type/GainControlMethodEnum.h"
#include "asb_uci/type/NoiseAdaptiveThresholdStatusEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/COMINT_AcquisitionTargetType.h"
#include "uci/type/COMINT_InteractiveType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/GainControlMethodEnum.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "uci/type/NoiseAdaptiveThresholdStatusEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_InteractiveType::COMINT_InteractiveType()
  : centerFrequency_Accessor{boost::make_unique<CenterFrequency>(0, SIZE_MAX)},
    scanRange_Accessor{boost::make_unique<ScanRange>(0, SIZE_MAX)},
    scanLockout_Accessor{boost::make_unique<ScanLockout>(0, SIZE_MAX)},
    ignoreTarget_Accessor{boost::make_unique<IgnoreTarget>(0, SIZE_MAX)},
    techniqueInUse_Accessor{boost::make_unique<TechniqueInUse>(0, SIZE_MAX)},
    techniqueParameters_Accessor{boost::make_unique<TechniqueParameters>(0, SIZE_MAX)} {
}

COMINT_InteractiveType::~COMINT_InteractiveType() = default;

void COMINT_InteractiveType::copy(const uci::type::COMINT_InteractiveType& accessor) {
  copyImpl(accessor, false);
}

void COMINT_InteractiveType::copyImpl(const uci::type::COMINT_InteractiveType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const COMINT_InteractiveType&>(accessor);
    if (accessorImpl.hasThreshold()) {
      setThreshold(accessorImpl.getThreshold());
    } else {
      clearThreshold();
    }
    if (accessorImpl.noiseAdaptiveThresholdStatus_Accessor) {
      setNoiseAdaptiveThresholdStatus(*(accessorImpl.noiseAdaptiveThresholdStatus_Accessor));
    } else {
      noiseAdaptiveThresholdStatus_Accessor.reset();
    }
    if (accessorImpl.gainControlMethod_Accessor) {
      setGainControlMethod(*(accessorImpl.gainControlMethod_Accessor));
    } else {
      gainControlMethod_Accessor.reset();
    }
    if (accessorImpl.hasGain()) {
      setGain(accessorImpl.getGain());
    } else {
      clearGain();
    }
    setCenterFrequency(*(accessorImpl.centerFrequency_Accessor));
    setScanRange(*(accessorImpl.scanRange_Accessor));
    setScanLockout(*(accessorImpl.scanLockout_Accessor));
    if (accessorImpl.dwellTarget_Accessor) {
      setDwellTarget(*(accessorImpl.dwellTarget_Accessor));
    } else {
      dwellTarget_Accessor.reset();
    }
    setIgnoreTarget(*(accessorImpl.ignoreTarget_Accessor));
    setTechniqueInUse(*(accessorImpl.techniqueInUse_Accessor));
    setTechniqueParameters(*(accessorImpl.techniqueParameters_Accessor));
    if (accessorImpl.hasAudioEnable()) {
      setAudioEnable(accessorImpl.getAudioEnable());
    } else {
      clearAudioEnable();
    }
    if (accessorImpl.hasIQ_Enable()) {
      setIQ_Enable(accessorImpl.getIQ_Enable());
    } else {
      clearIQ_Enable();
    }
  }
}

void COMINT_InteractiveType::reset() noexcept {
  clearThreshold();
  noiseAdaptiveThresholdStatus_Accessor.reset();
  gainControlMethod_Accessor.reset();
  clearGain();
  centerFrequency_Accessor->reset();
  scanRange_Accessor->reset();
  scanLockout_Accessor->reset();
  dwellTarget_Accessor.reset();
  ignoreTarget_Accessor->reset();
  techniqueInUse_Accessor->reset();
  techniqueParameters_Accessor->reset();
  clearAudioEnable();
  clearIQ_Enable();
}

uci::type::MilliwattPowerRatioTypeValue COMINT_InteractiveType::getThreshold() const {
  if (threshold_Accessor) {
    return *threshold_Accessor;
  }
  throw uci::base::UCIException("Error in getThreshold(): An attempt was made to get an optional field that was not enabled, call hasThreshold() to determine if it is safe to call getThreshold()");
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setThreshold(uci::type::MilliwattPowerRatioTypeValue value) {
  threshold_Accessor = value;
  return *this;
}

bool COMINT_InteractiveType::hasThreshold() const noexcept {
  return threshold_Accessor.has_value();
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::clearThreshold() noexcept {
  threshold_Accessor.reset();
  return *this;
}

uci::type::NoiseAdaptiveThresholdStatusEnum& COMINT_InteractiveType::getNoiseAdaptiveThresholdStatus_() const {
  if (noiseAdaptiveThresholdStatus_Accessor) {
    return *noiseAdaptiveThresholdStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getNoiseAdaptiveThresholdStatus(): An attempt was made to get an optional field that was not enabled, call hasNoiseAdaptiveThresholdStatus() to determine if it is safe to call getNoiseAdaptiveThresholdStatus()");
}

const uci::type::NoiseAdaptiveThresholdStatusEnum& COMINT_InteractiveType::getNoiseAdaptiveThresholdStatus() const {
  return getNoiseAdaptiveThresholdStatus_();
}

uci::type::NoiseAdaptiveThresholdStatusEnum& COMINT_InteractiveType::getNoiseAdaptiveThresholdStatus() {
  return getNoiseAdaptiveThresholdStatus_();
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setNoiseAdaptiveThresholdStatus(const uci::type::NoiseAdaptiveThresholdStatusEnum& accessor) {
  enableNoiseAdaptiveThresholdStatus();
  if (&accessor != noiseAdaptiveThresholdStatus_Accessor.get()) {
    noiseAdaptiveThresholdStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setNoiseAdaptiveThresholdStatus(const uci::type::NoiseAdaptiveThresholdStatusEnum::EnumerationItem value) {
  enableNoiseAdaptiveThresholdStatus().setValue(value);
  return *this;
}

bool COMINT_InteractiveType::hasNoiseAdaptiveThresholdStatus() const noexcept {
  return static_cast<bool>(noiseAdaptiveThresholdStatus_Accessor);
}

uci::type::NoiseAdaptiveThresholdStatusEnum& COMINT_InteractiveType::enableNoiseAdaptiveThresholdStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::noiseAdaptiveThresholdStatusEnum : type};
  if ((!noiseAdaptiveThresholdStatus_Accessor) || (noiseAdaptiveThresholdStatus_Accessor->getAccessorType() != requestedType)) {
    noiseAdaptiveThresholdStatus_Accessor = NoiseAdaptiveThresholdStatusEnum::create(requestedType);
    if (!noiseAdaptiveThresholdStatus_Accessor) {
      throw uci::base::UCIException("Error in enableNoiseAdaptiveThresholdStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *noiseAdaptiveThresholdStatus_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::clearNoiseAdaptiveThresholdStatus() noexcept {
  noiseAdaptiveThresholdStatus_Accessor.reset();
  return *this;
}

uci::type::GainControlMethodEnum& COMINT_InteractiveType::getGainControlMethod_() const {
  if (gainControlMethod_Accessor) {
    return *gainControlMethod_Accessor;
  }
  throw uci::base::UCIException("Error in getGainControlMethod(): An attempt was made to get an optional field that was not enabled, call hasGainControlMethod() to determine if it is safe to call getGainControlMethod()");
}

const uci::type::GainControlMethodEnum& COMINT_InteractiveType::getGainControlMethod() const {
  return getGainControlMethod_();
}

uci::type::GainControlMethodEnum& COMINT_InteractiveType::getGainControlMethod() {
  return getGainControlMethod_();
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setGainControlMethod(const uci::type::GainControlMethodEnum& accessor) {
  enableGainControlMethod();
  if (&accessor != gainControlMethod_Accessor.get()) {
    gainControlMethod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setGainControlMethod(const uci::type::GainControlMethodEnum::EnumerationItem value) {
  enableGainControlMethod().setValue(value);
  return *this;
}

bool COMINT_InteractiveType::hasGainControlMethod() const noexcept {
  return static_cast<bool>(gainControlMethod_Accessor);
}

uci::type::GainControlMethodEnum& COMINT_InteractiveType::enableGainControlMethod(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gainControlMethodEnum : type};
  if ((!gainControlMethod_Accessor) || (gainControlMethod_Accessor->getAccessorType() != requestedType)) {
    gainControlMethod_Accessor = GainControlMethodEnum::create(requestedType);
    if (!gainControlMethod_Accessor) {
      throw uci::base::UCIException("Error in enableGainControlMethod(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gainControlMethod_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::clearGainControlMethod() noexcept {
  gainControlMethod_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue COMINT_InteractiveType::getGain() const {
  if (gain_Accessor) {
    return *gain_Accessor;
  }
  throw uci::base::UCIException("Error in getGain(): An attempt was made to get an optional field that was not enabled, call hasGain() to determine if it is safe to call getGain()");
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setGain(uci::type::MilliwattPowerRatioTypeValue value) {
  gain_Accessor = value;
  return *this;
}

bool COMINT_InteractiveType::hasGain() const noexcept {
  return gain_Accessor.has_value();
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::clearGain() noexcept {
  gain_Accessor.reset();
  return *this;
}

const uci::type::COMINT_InteractiveType::CenterFrequency& COMINT_InteractiveType::getCenterFrequency() const {
  return *centerFrequency_Accessor;
}

uci::type::COMINT_InteractiveType::CenterFrequency& COMINT_InteractiveType::getCenterFrequency() {
  return *centerFrequency_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setCenterFrequency(const uci::type::COMINT_InteractiveType::CenterFrequency& accessor) {
  if (&accessor != centerFrequency_Accessor.get()) {
    centerFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::COMINT_InteractiveType::ScanRange& COMINT_InteractiveType::getScanRange() const {
  return *scanRange_Accessor;
}

uci::type::COMINT_InteractiveType::ScanRange& COMINT_InteractiveType::getScanRange() {
  return *scanRange_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setScanRange(const uci::type::COMINT_InteractiveType::ScanRange& accessor) {
  if (&accessor != scanRange_Accessor.get()) {
    scanRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::COMINT_InteractiveType::ScanLockout& COMINT_InteractiveType::getScanLockout() const {
  return *scanLockout_Accessor;
}

uci::type::COMINT_InteractiveType::ScanLockout& COMINT_InteractiveType::getScanLockout() {
  return *scanLockout_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setScanLockout(const uci::type::COMINT_InteractiveType::ScanLockout& accessor) {
  if (&accessor != scanLockout_Accessor.get()) {
    scanLockout_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::COMINT_AcquisitionTargetType& COMINT_InteractiveType::getDwellTarget_() const {
  if (dwellTarget_Accessor) {
    return *dwellTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getDwellTarget(): An attempt was made to get an optional field that was not enabled, call hasDwellTarget() to determine if it is safe to call getDwellTarget()");
}

const uci::type::COMINT_AcquisitionTargetType& COMINT_InteractiveType::getDwellTarget() const {
  return getDwellTarget_();
}

uci::type::COMINT_AcquisitionTargetType& COMINT_InteractiveType::getDwellTarget() {
  return getDwellTarget_();
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setDwellTarget(const uci::type::COMINT_AcquisitionTargetType& accessor) {
  enableDwellTarget();
  if (&accessor != dwellTarget_Accessor.get()) {
    dwellTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_InteractiveType::hasDwellTarget() const noexcept {
  return static_cast<bool>(dwellTarget_Accessor);
}

uci::type::COMINT_AcquisitionTargetType& COMINT_InteractiveType::enableDwellTarget(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_AcquisitionTargetType : type};
  if ((!dwellTarget_Accessor) || (dwellTarget_Accessor->getAccessorType() != requestedType)) {
    dwellTarget_Accessor = COMINT_AcquisitionTargetType::create(requestedType);
    if (!dwellTarget_Accessor) {
      throw uci::base::UCIException("Error in enableDwellTarget(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dwellTarget_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::clearDwellTarget() noexcept {
  dwellTarget_Accessor.reset();
  return *this;
}

const uci::type::COMINT_InteractiveType::IgnoreTarget& COMINT_InteractiveType::getIgnoreTarget() const {
  return *ignoreTarget_Accessor;
}

uci::type::COMINT_InteractiveType::IgnoreTarget& COMINT_InteractiveType::getIgnoreTarget() {
  return *ignoreTarget_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setIgnoreTarget(const uci::type::COMINT_InteractiveType::IgnoreTarget& accessor) {
  if (&accessor != ignoreTarget_Accessor.get()) {
    ignoreTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::COMINT_InteractiveType::TechniqueInUse& COMINT_InteractiveType::getTechniqueInUse() const {
  return *techniqueInUse_Accessor;
}

uci::type::COMINT_InteractiveType::TechniqueInUse& COMINT_InteractiveType::getTechniqueInUse() {
  return *techniqueInUse_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setTechniqueInUse(const uci::type::COMINT_InteractiveType::TechniqueInUse& accessor) {
  if (&accessor != techniqueInUse_Accessor.get()) {
    techniqueInUse_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::COMINT_InteractiveType::TechniqueParameters& COMINT_InteractiveType::getTechniqueParameters() const {
  return *techniqueParameters_Accessor;
}

uci::type::COMINT_InteractiveType::TechniqueParameters& COMINT_InteractiveType::getTechniqueParameters() {
  return *techniqueParameters_Accessor;
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setTechniqueParameters(const uci::type::COMINT_InteractiveType::TechniqueParameters& accessor) {
  if (&accessor != techniqueParameters_Accessor.get()) {
    techniqueParameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean COMINT_InteractiveType::getAudioEnable() const {
  if (audioEnable_Accessor) {
    return *audioEnable_Accessor;
  }
  throw uci::base::UCIException("Error in getAudioEnable(): An attempt was made to get an optional field that was not enabled, call hasAudioEnable() to determine if it is safe to call getAudioEnable()");
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setAudioEnable(xs::Boolean value) {
  audioEnable_Accessor = value;
  return *this;
}

bool COMINT_InteractiveType::hasAudioEnable() const noexcept {
  return audioEnable_Accessor.has_value();
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::clearAudioEnable() noexcept {
  audioEnable_Accessor.reset();
  return *this;
}

xs::Boolean COMINT_InteractiveType::getIQ_Enable() const {
  if (iQ_Enable_Accessor) {
    return *iQ_Enable_Accessor;
  }
  throw uci::base::UCIException("Error in getIQ_Enable(): An attempt was made to get an optional field that was not enabled, call hasIQ_Enable() to determine if it is safe to call getIQ_Enable()");
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::setIQ_Enable(xs::Boolean value) {
  iQ_Enable_Accessor = value;
  return *this;
}

bool COMINT_InteractiveType::hasIQ_Enable() const noexcept {
  return iQ_Enable_Accessor.has_value();
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::clearIQ_Enable() noexcept {
  iQ_Enable_Accessor.reset();
  return *this;
}

std::unique_ptr<COMINT_InteractiveType> COMINT_InteractiveType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_InteractiveType : type};
  return (requestedType == uci::type::accessorType::cOMINT_InteractiveType) ? boost::make_unique<COMINT_InteractiveType>() : nullptr;
}

/**  */
namespace COMINT_InteractiveType_Names {

constexpr const char* Extern_Type_Name{"COMINT_InteractiveType"};
constexpr const char* Threshold_Name{"Threshold"};
constexpr const char* NoiseAdaptiveThresholdStatus_Name{"NoiseAdaptiveThresholdStatus"};
constexpr const char* GainControlMethod_Name{"GainControlMethod"};
constexpr const char* Gain_Name{"Gain"};
constexpr const char* CenterFrequency_Name{"CenterFrequency"};
constexpr const char* ScanRange_Name{"ScanRange"};
constexpr const char* ScanLockout_Name{"ScanLockout"};
constexpr const char* DwellTarget_Name{"DwellTarget"};
constexpr const char* IgnoreTarget_Name{"IgnoreTarget"};
constexpr const char* TechniqueInUse_Name{"TechniqueInUse"};
constexpr const char* TechniqueParameters_Name{"TechniqueParameters"};
constexpr const char* AudioEnable_Name{"AudioEnable"};
constexpr const char* IQ_Enable_Name{"IQ_Enable"};

} // namespace COMINT_InteractiveType_Names

void COMINT_InteractiveType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_InteractiveType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_InteractiveType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::Threshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setThreshold(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::NoiseAdaptiveThresholdStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNoiseAdaptiveThresholdStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::GainControlMethod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableGainControlMethod().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::Gain_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGain(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::CenterFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::CenterFrequency& boundedList = accessor.getCenterFrequency();
        const uci::type::COMINT_InteractiveType::CenterFrequency::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setDoubleValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::ScanRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::ScanRange& boundedList = accessor.getScanRange();
        const uci::type::COMINT_InteractiveType::ScanRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::ScanLockout_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::ScanLockout& boundedList = accessor.getScanLockout();
        const uci::type::COMINT_InteractiveType::ScanLockout::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::DwellTarget_Name) {
      COMINT_AcquisitionTargetType::deserialize(valueType.second, accessor.enableDwellTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::IgnoreTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::IgnoreTarget& boundedList = accessor.getIgnoreTarget();
        const uci::type::COMINT_InteractiveType::IgnoreTarget::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::COMINT_AcquisitionTargetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::TechniqueInUse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::TechniqueInUse& boundedList = accessor.getTechniqueInUse();
        const uci::type::COMINT_InteractiveType::TechniqueInUse::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::TechniqueParameters_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::TechniqueParameters& boundedList = accessor.getTechniqueParameters();
        const uci::type::COMINT_InteractiveType::TechniqueParameters::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::AudioEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAudioEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::IQ_Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIQ_Enable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string COMINT_InteractiveType::serialize(const uci::type::COMINT_InteractiveType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_InteractiveType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_InteractiveType_Names::Extern_Type_Name);
  }
  if (accessor.hasThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getThreshold(), node, COMINT_InteractiveType_Names::Threshold_Name);
  }
  if (accessor.hasNoiseAdaptiveThresholdStatus()) {
    NoiseAdaptiveThresholdStatusEnum::serialize(accessor.getNoiseAdaptiveThresholdStatus(), node, COMINT_InteractiveType_Names::NoiseAdaptiveThresholdStatus_Name, false);
  }
  if (accessor.hasGainControlMethod()) {
    GainControlMethodEnum::serialize(accessor.getGainControlMethod(), node, COMINT_InteractiveType_Names::GainControlMethod_Name, false);
  }
  if (accessor.hasGain()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getGain(), node, COMINT_InteractiveType_Names::Gain_Name);
  }
  {
    const uci::type::COMINT_InteractiveType::CenterFrequency& boundedList = accessor.getCenterFrequency();
    for (uci::type::COMINT_InteractiveType::CenterFrequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeDouble(boundedList.at(i), node, COMINT_InteractiveType_Names::CenterFrequency_Name);
    }
  }
  {
    const uci::type::COMINT_InteractiveType::ScanRange& boundedList = accessor.getScanRange();
    for (uci::type::COMINT_InteractiveType::ScanRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::ScanRange_Name);
    }
  }
  {
    const uci::type::COMINT_InteractiveType::ScanLockout& boundedList = accessor.getScanLockout();
    for (uci::type::COMINT_InteractiveType::ScanLockout::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::ScanLockout_Name);
    }
  }
  if (accessor.hasDwellTarget()) {
    COMINT_AcquisitionTargetType::serialize(accessor.getDwellTarget(), node, COMINT_InteractiveType_Names::DwellTarget_Name);
  }
  {
    const uci::type::COMINT_InteractiveType::IgnoreTarget& boundedList = accessor.getIgnoreTarget();
    for (uci::type::COMINT_InteractiveType::IgnoreTarget::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::COMINT_AcquisitionTargetType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::IgnoreTarget_Name);
    }
  }
  {
    const uci::type::COMINT_InteractiveType::TechniqueInUse& boundedList = accessor.getTechniqueInUse();
    for (uci::type::COMINT_InteractiveType::TechniqueInUse::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::TechniqueInUse_Name);
    }
  }
  {
    const uci::type::COMINT_InteractiveType::TechniqueParameters& boundedList = accessor.getTechniqueParameters();
    for (uci::type::COMINT_InteractiveType::TechniqueParameters::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::TechniqueParameters_Name);
    }
  }
  if (accessor.hasAudioEnable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAudioEnable(), node, COMINT_InteractiveType_Names::AudioEnable_Name);
  }
  if (accessor.hasIQ_Enable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIQ_Enable(), node, COMINT_InteractiveType_Names::IQ_Enable_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_InteractiveType>().release());
}

uci::type::COMINT_InteractiveType& COMINT_InteractiveType::create(const uci::type::COMINT_InteractiveType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_InteractiveType> newAccessor{boost::make_unique<asb_uci::type::COMINT_InteractiveType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_InteractiveType::destroy(uci::type::COMINT_InteractiveType& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_InteractiveType*>(&accessor);
}

} // namespace type

} // namespace uci

