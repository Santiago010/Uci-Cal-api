/** @file MessageDestinationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MessageDestinationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DataDestinationID_Type.h"
#include "asb_uci/type/DataLinkNativeInfoPET.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DataDestinationID_Type.h"
#include "uci/type/DataLinkNativeInfoPET.h"
#include "uci/type/MessageDestinationType.h"
#include "uci/type/SystemID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MessageDestinationType::MessageDestinationType()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    dataLinkNativeInfo_Accessor{boost::make_unique<DataLinkNativeInfo>(1, SIZE_MAX)} {
}

MessageDestinationType::~MessageDestinationType() = default;

void MessageDestinationType::copy(const uci::type::MessageDestinationType& accessor) {
  copyImpl(accessor, false);
}

void MessageDestinationType::copyImpl(const uci::type::MessageDestinationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MessageDestinationType&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    if (accessorImpl.hasValidSystemStatus()) {
      setValidSystemStatus(accessorImpl.getValidSystemStatus());
    } else {
      clearValidSystemStatus();
    }
    if (accessorImpl.dataDestinationID_Accessor) {
      setDataDestinationID(*(accessorImpl.dataDestinationID_Accessor));
    } else {
      dataDestinationID_Accessor.reset();
    }
    setDataLinkNativeInfo(*(accessorImpl.dataLinkNativeInfo_Accessor));
  }
}

void MessageDestinationType::reset() noexcept {
  systemID_Accessor->reset();
  clearValidSystemStatus();
  dataDestinationID_Accessor.reset();
  dataLinkNativeInfo_Accessor->reset();
}

const uci::type::SystemID_Type& MessageDestinationType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& MessageDestinationType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::MessageDestinationType& MessageDestinationType::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean MessageDestinationType::getValidSystemStatus() const {
  if (validSystemStatus_Accessor) {
    return *validSystemStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getValidSystemStatus(): An attempt was made to get an optional field that was not enabled, call hasValidSystemStatus() to determine if it is safe to call getValidSystemStatus()");
}

uci::type::MessageDestinationType& MessageDestinationType::setValidSystemStatus(xs::Boolean value) {
  validSystemStatus_Accessor = value;
  return *this;
}

bool MessageDestinationType::hasValidSystemStatus() const noexcept {
  return validSystemStatus_Accessor.has_value();
}

uci::type::MessageDestinationType& MessageDestinationType::clearValidSystemStatus() noexcept {
  validSystemStatus_Accessor.reset();
  return *this;
}

uci::type::DataDestinationID_Type& MessageDestinationType::getDataDestinationID_() const {
  if (dataDestinationID_Accessor) {
    return *dataDestinationID_Accessor;
  }
  throw uci::base::UCIException("Error in getDataDestinationID(): An attempt was made to get an optional field that was not enabled, call hasDataDestinationID() to determine if it is safe to call getDataDestinationID()");
}

const uci::type::DataDestinationID_Type& MessageDestinationType::getDataDestinationID() const {
  return getDataDestinationID_();
}

uci::type::DataDestinationID_Type& MessageDestinationType::getDataDestinationID() {
  return getDataDestinationID_();
}

uci::type::MessageDestinationType& MessageDestinationType::setDataDestinationID(const uci::type::DataDestinationID_Type& accessor) {
  enableDataDestinationID();
  if (&accessor != dataDestinationID_Accessor.get()) {
    dataDestinationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MessageDestinationType::hasDataDestinationID() const noexcept {
  return static_cast<bool>(dataDestinationID_Accessor);
}

uci::type::DataDestinationID_Type& MessageDestinationType::enableDataDestinationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataDestinationID_Type : type};
  if ((!dataDestinationID_Accessor) || (dataDestinationID_Accessor->getAccessorType() != requestedType)) {
    dataDestinationID_Accessor = DataDestinationID_Type::create(requestedType);
    if (!dataDestinationID_Accessor) {
      throw uci::base::UCIException("Error in enableDataDestinationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataDestinationID_Accessor;
}

uci::type::MessageDestinationType& MessageDestinationType::clearDataDestinationID() noexcept {
  dataDestinationID_Accessor.reset();
  return *this;
}

const uci::type::MessageDestinationType::DataLinkNativeInfo& MessageDestinationType::getDataLinkNativeInfo() const {
  return *dataLinkNativeInfo_Accessor;
}

uci::type::MessageDestinationType::DataLinkNativeInfo& MessageDestinationType::getDataLinkNativeInfo() {
  return *dataLinkNativeInfo_Accessor;
}

uci::type::MessageDestinationType& MessageDestinationType::setDataLinkNativeInfo(const uci::type::MessageDestinationType::DataLinkNativeInfo& accessor) {
  if (&accessor != dataLinkNativeInfo_Accessor.get()) {
    dataLinkNativeInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MessageDestinationType> MessageDestinationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::messageDestinationType : type};
  return (requestedType == uci::type::accessorType::messageDestinationType) ? boost::make_unique<MessageDestinationType>() : nullptr;
}

/**  */
namespace MessageDestinationType_Names {

constexpr const char* Extern_Type_Name{"MessageDestinationType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ValidSystemStatus_Name{"ValidSystemStatus"};
constexpr const char* DataDestinationID_Name{"DataDestinationID"};
constexpr const char* DataLinkNativeInfo_Name{"DataLinkNativeInfo"};

} // namespace MessageDestinationType_Names

void MessageDestinationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MessageDestinationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MessageDestinationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MessageDestinationType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageDestinationType_Names::ValidSystemStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setValidSystemStatus(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + MessageDestinationType_Names::DataDestinationID_Name) {
      DataDestinationID_Type::deserialize(valueType.second, accessor.enableDataDestinationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageDestinationType_Names::DataLinkNativeInfo_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MessageDestinationType::DataLinkNativeInfo& boundedList = accessor.getDataLinkNativeInfo();
        const uci::type::MessageDestinationType::DataLinkNativeInfo::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string MessageDestinationType::serialize(const uci::type::MessageDestinationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MessageDestinationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MessageDestinationType_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, MessageDestinationType_Names::SystemID_Name);
  if (accessor.hasValidSystemStatus()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getValidSystemStatus(), node, MessageDestinationType_Names::ValidSystemStatus_Name);
  }
  if (accessor.hasDataDestinationID()) {
    DataDestinationID_Type::serialize(accessor.getDataDestinationID(), node, MessageDestinationType_Names::DataDestinationID_Name);
  }
  {
    const uci::type::MessageDestinationType::DataLinkNativeInfo& boundedList = accessor.getDataLinkNativeInfo();
    for (uci::type::MessageDestinationType::DataLinkNativeInfo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DataLinkNativeInfoPET::serialize(boundedList.at(i), node, MessageDestinationType_Names::DataLinkNativeInfo_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MessageDestinationType& MessageDestinationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MessageDestinationType>().release());
}

uci::type::MessageDestinationType& MessageDestinationType::create(const uci::type::MessageDestinationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MessageDestinationType> newAccessor{boost::make_unique<asb_uci::type::MessageDestinationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MessageDestinationType::destroy(uci::type::MessageDestinationType& accessor) {
  delete dynamic_cast<asb_uci::type::MessageDestinationType*>(&accessor);
}

} // namespace type

} // namespace uci

