/** @file EA_PowerType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EA_PowerType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_PowerType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_PowerType::EA_PowerType() = default;

EA_PowerType::~EA_PowerType() = default;

void EA_PowerType::copy(const uci::type::EA_PowerType& accessor) {
  copyImpl(accessor, false);
}

void EA_PowerType::copyImpl(const uci::type::EA_PowerType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_PowerType&>(accessor);
    powerAtTarget_Accessor = (accessorImpl.powerAtTarget_Accessor ? accessorImpl.powerAtTarget_Accessor : boost::none);
    eRP_Accessor = (accessorImpl.eRP_Accessor ? accessorImpl.eRP_Accessor : boost::none);
    jtoS_Accessor = (accessorImpl.jtoS_Accessor ? accessorImpl.jtoS_Accessor : boost::none);
  }
}

void EA_PowerType::reset() noexcept {
  powerAtTarget_Accessor.reset();
  eRP_Accessor.reset();
  jtoS_Accessor.reset();
}

uci::type::EA_PowerType::EA_PowerTypeChoice EA_PowerType::getEA_PowerTypeChoiceOrdinal() const noexcept {
  if (powerAtTarget_Accessor) {
    return EA_POWERTYPE_CHOICE_POWERATTARGET;
  }
  if (eRP_Accessor) {
    return EA_POWERTYPE_CHOICE_ERP;
  }
  if (jtoS_Accessor) {
    return EA_POWERTYPE_CHOICE_JTOS;
  }
  return EA_POWERTYPE_CHOICE_NONE;
}

uci::type::EA_PowerType& EA_PowerType::setEA_PowerTypeChoiceOrdinal(uci::type::EA_PowerType::EA_PowerTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case EA_POWERTYPE_CHOICE_POWERATTARGET:
      choosePowerAtTarget();
      break;
    case EA_POWERTYPE_CHOICE_ERP:
      chooseERP();
      break;
    case EA_POWERTYPE_CHOICE_JTOS:
      chooseJtoS();
      break;
    default:
      throw uci::base::UCIException("Error in setEA_PowerTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DecibelTypeValue EA_PowerType::getPowerAtTarget() const {
  if (powerAtTarget_Accessor) {
    return *powerAtTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getPowerAtTarget(): Unable to get PowerAtTarget, field not selected");
}

uci::type::EA_PowerType& EA_PowerType::setPowerAtTarget(uci::type::DecibelTypeValue value) {
  choosePowerAtTarget();
  powerAtTarget_Accessor = value;
  return *this;
}

bool EA_PowerType::isPowerAtTarget() const noexcept {
  return static_cast<bool>(powerAtTarget_Accessor);
}

void EA_PowerType::choosePowerAtTarget() {
  eRP_Accessor.reset();
  jtoS_Accessor.reset();
  if (!powerAtTarget_Accessor) {
    powerAtTarget_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::DecibelTypeValue EA_PowerType::getERP() const {
  if (eRP_Accessor) {
    return *eRP_Accessor;
  }
  throw uci::base::UCIException("Error in getERP(): Unable to get ERP, field not selected");
}

uci::type::EA_PowerType& EA_PowerType::setERP(uci::type::DecibelTypeValue value) {
  chooseERP();
  eRP_Accessor = value;
  return *this;
}

bool EA_PowerType::isERP() const noexcept {
  return static_cast<bool>(eRP_Accessor);
}

void EA_PowerType::chooseERP() {
  powerAtTarget_Accessor.reset();
  jtoS_Accessor.reset();
  if (!eRP_Accessor) {
    eRP_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::DecibelTypeValue EA_PowerType::getJtoS() const {
  if (jtoS_Accessor) {
    return *jtoS_Accessor;
  }
  throw uci::base::UCIException("Error in getJtoS(): Unable to get JtoS, field not selected");
}

uci::type::EA_PowerType& EA_PowerType::setJtoS(uci::type::DecibelTypeValue value) {
  chooseJtoS();
  jtoS_Accessor = value;
  return *this;
}

bool EA_PowerType::isJtoS() const noexcept {
  return static_cast<bool>(jtoS_Accessor);
}

void EA_PowerType::chooseJtoS() {
  powerAtTarget_Accessor.reset();
  eRP_Accessor.reset();
  if (!jtoS_Accessor) {
    jtoS_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<EA_PowerType> EA_PowerType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_PowerType : type};
  return (requestedType == uci::type::accessorType::eA_PowerType) ? boost::make_unique<EA_PowerType>() : nullptr;
}

/**  */
namespace EA_PowerType_Names {

constexpr const char* Extern_Type_Name{"EA_PowerType"};
constexpr const char* PowerAtTarget_Name{"PowerAtTarget"};
constexpr const char* ERP_Name{"ERP"};
constexpr const char* JtoS_Name{"JtoS"};

} // namespace EA_PowerType_Names

void EA_PowerType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_PowerType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_PowerType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_PowerType_Names::PowerAtTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPowerAtTarget(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EA_PowerType_Names::ERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EA_PowerType_Names::JtoS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setJtoS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EA_PowerType::serialize(const uci::type::EA_PowerType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_PowerType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_PowerType_Names::Extern_Type_Name);
  }
  if (accessor.isPowerAtTarget()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPowerAtTarget(), node, EA_PowerType_Names::PowerAtTarget_Name);
  } else if (accessor.isERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getERP(), node, EA_PowerType_Names::ERP_Name);
  } else if (accessor.isJtoS()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getJtoS(), node, EA_PowerType_Names::JtoS_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_PowerType& EA_PowerType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_PowerType>().release());
}

uci::type::EA_PowerType& EA_PowerType::create(const uci::type::EA_PowerType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_PowerType> newAccessor{boost::make_unique<asb_uci::type::EA_PowerType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_PowerType::destroy(uci::type::EA_PowerType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_PowerType*>(&accessor);
}

} // namespace type

} // namespace uci

