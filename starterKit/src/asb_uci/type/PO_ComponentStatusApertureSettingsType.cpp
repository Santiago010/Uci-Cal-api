/** @file PO_ComponentStatusApertureSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentStatusApertureSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsStatusType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/PO_ApertureID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ApertureID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusApertureSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentStatusApertureSettingsType::PO_ComponentStatusApertureSettingsType()
  : apertureID_Accessor{boost::make_unique<PO_ApertureID_Type>()},
    apertureControlsStatus_Accessor{boost::make_unique<ComponentControlsStatusType>()} {
}

PO_ComponentStatusApertureSettingsType::~PO_ComponentStatusApertureSettingsType() = default;

void PO_ComponentStatusApertureSettingsType::copy(const uci::type::PO_ComponentStatusApertureSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentStatusApertureSettingsType::copyImpl(const uci::type::PO_ComponentStatusApertureSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentStatusApertureSettingsType&>(accessor);
    setApertureID(*(accessorImpl.apertureID_Accessor));
    setApertureControlsStatus(*(accessorImpl.apertureControlsStatus_Accessor));
    if (accessorImpl.hasF_StopSetting()) {
      setF_StopSetting(accessorImpl.getF_StopSetting());
    } else {
      clearF_StopSetting();
    }
    if (accessorImpl.reset_Accessor) {
      setReset(*(accessorImpl.reset_Accessor));
    } else {
      reset_Accessor.reset();
    }
  }
}

void PO_ComponentStatusApertureSettingsType::reset() noexcept {
  apertureID_Accessor->reset();
  apertureControlsStatus_Accessor->reset();
  clearF_StopSetting();
  reset_Accessor.reset();
}

const uci::type::PO_ApertureID_Type& PO_ComponentStatusApertureSettingsType::getApertureID() const {
  return *apertureID_Accessor;
}

uci::type::PO_ApertureID_Type& PO_ComponentStatusApertureSettingsType::getApertureID() {
  return *apertureID_Accessor;
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::setApertureID(const uci::type::PO_ApertureID_Type& accessor) {
  if (&accessor != apertureID_Accessor.get()) {
    apertureID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentControlsStatusType& PO_ComponentStatusApertureSettingsType::getApertureControlsStatus() const {
  return *apertureControlsStatus_Accessor;
}

uci::type::ComponentControlsStatusType& PO_ComponentStatusApertureSettingsType::getApertureControlsStatus() {
  return *apertureControlsStatus_Accessor;
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::setApertureControlsStatus(const uci::type::ComponentControlsStatusType& accessor) {
  if (&accessor != apertureControlsStatus_Accessor.get()) {
    apertureControlsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Float PO_ComponentStatusApertureSettingsType::getF_StopSetting() const {
  if (f_StopSetting_Accessor) {
    return *f_StopSetting_Accessor;
  }
  throw uci::base::UCIException("Error in getF_StopSetting(): An attempt was made to get an optional field that was not enabled, call hasF_StopSetting() to determine if it is safe to call getF_StopSetting()");
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::setF_StopSetting(xs::Float value) {
  f_StopSetting_Accessor = value;
  return *this;
}

bool PO_ComponentStatusApertureSettingsType::hasF_StopSetting() const noexcept {
  return f_StopSetting_Accessor.has_value();
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::clearF_StopSetting() noexcept {
  f_StopSetting_Accessor.reset();
  return *this;
}

uci::type::EmptyType& PO_ComponentStatusApertureSettingsType::getReset_() const {
  if (reset_Accessor) {
    return *reset_Accessor;
  }
  throw uci::base::UCIException("Error in getReset(): An attempt was made to get an optional field that was not enabled, call hasReset() to determine if it is safe to call getReset()");
}

const uci::type::EmptyType& PO_ComponentStatusApertureSettingsType::getReset() const {
  return getReset_();
}

uci::type::EmptyType& PO_ComponentStatusApertureSettingsType::getReset() {
  return getReset_();
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::setReset(const uci::type::EmptyType& value) {
  return setReset(value.c_str());
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::setReset(const std::string& value) {
  return setReset(value.c_str());
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::setReset(const char* value) {
  enableReset().setStringValue(value);
  return *this;
}

bool PO_ComponentStatusApertureSettingsType::hasReset() const noexcept {
  return static_cast<bool>(reset_Accessor);
}

uci::type::EmptyType& PO_ComponentStatusApertureSettingsType::enableReset(uci::base::accessorType::AccessorType type) {
  if (!reset_Accessor) {
    reset_Accessor = EmptyType::create(type);
  }
  return *reset_Accessor;
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::clearReset() noexcept {
  reset_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentStatusApertureSettingsType> PO_ComponentStatusApertureSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusApertureSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentStatusApertureSettingsType) ? boost::make_unique<PO_ComponentStatusApertureSettingsType>() : nullptr;
}

/**  */
namespace PO_ComponentStatusApertureSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusApertureSettingsType"};
constexpr const char* ApertureID_Name{"ApertureID"};
constexpr const char* ApertureControlsStatus_Name{"ApertureControlsStatus"};
constexpr const char* F_StopSetting_Name{"F_StopSetting"};
constexpr const char* Reset_Name{"Reset"};

} // namespace PO_ComponentStatusApertureSettingsType_Names

void PO_ComponentStatusApertureSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusApertureSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusApertureSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentStatusApertureSettingsType_Names::ApertureID_Name) {
      PO_ApertureID_Type::deserialize(valueType.second, accessor.getApertureID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusApertureSettingsType_Names::ApertureControlsStatus_Name) {
      ComponentControlsStatusType::deserialize(valueType.second, accessor.getApertureControlsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusApertureSettingsType_Names::F_StopSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setF_StopSetting(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusApertureSettingsType_Names::Reset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReset(*value);
      }
    }
  }
}

std::string PO_ComponentStatusApertureSettingsType::serialize(const uci::type::PO_ComponentStatusApertureSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentStatusApertureSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusApertureSettingsType_Names::Extern_Type_Name);
  }
  PO_ApertureID_Type::serialize(accessor.getApertureID(), node, PO_ComponentStatusApertureSettingsType_Names::ApertureID_Name);
  ComponentControlsStatusType::serialize(accessor.getApertureControlsStatus(), node, PO_ComponentStatusApertureSettingsType_Names::ApertureControlsStatus_Name);
  if (accessor.hasF_StopSetting()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getF_StopSetting(), node, PO_ComponentStatusApertureSettingsType_Names::F_StopSetting_Name);
  }
  if (accessor.hasReset()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getReset(), node, PO_ComponentStatusApertureSettingsType_Names::Reset_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentStatusApertureSettingsType>().release());
}

uci::type::PO_ComponentStatusApertureSettingsType& PO_ComponentStatusApertureSettingsType::create(const uci::type::PO_ComponentStatusApertureSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentStatusApertureSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentStatusApertureSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentStatusApertureSettingsType::destroy(uci::type::PO_ComponentStatusApertureSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentStatusApertureSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

