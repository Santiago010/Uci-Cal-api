/** @file AssessmentMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AssessmentMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AnalysisRouteID_Type.h"
#include "asb_uci/type/AssessmentID_Type.h"
#include "asb_uci/type/AssessmentType.h"
#include "asb_uci/type/RequestID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnalysisRouteID_Type.h"
#include "uci/type/AssessmentID_Type.h"
#include "uci/type/AssessmentMDT.h"
#include "uci/type/AssessmentType.h"
#include "uci/type/RequestID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AssessmentMDT::AssessmentMDT()
  : assessmentID_Accessor{boost::make_unique<AssessmentID_Type>()},
    assessment_Accessor{boost::make_unique<AssessmentType>()} {
}

AssessmentMDT::~AssessmentMDT() = default;

void AssessmentMDT::copy(const uci::type::AssessmentMDT& accessor) {
  copyImpl(accessor, false);
}

void AssessmentMDT::copyImpl(const uci::type::AssessmentMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AssessmentMDT&>(accessor);
    setAssessmentID(*(accessorImpl.assessmentID_Accessor));
    if (accessorImpl.assessmentRequestID_Accessor) {
      setAssessmentRequestID(*(accessorImpl.assessmentRequestID_Accessor));
    } else {
      assessmentRequestID_Accessor.reset();
    }
    if (accessorImpl.analysisRouteID_Accessor) {
      setAnalysisRouteID(*(accessorImpl.analysisRouteID_Accessor));
    } else {
      analysisRouteID_Accessor.reset();
    }
    setAssessment(*(accessorImpl.assessment_Accessor));
  }
}

void AssessmentMDT::reset() noexcept {
  assessmentID_Accessor->reset();
  assessmentRequestID_Accessor.reset();
  analysisRouteID_Accessor.reset();
  assessment_Accessor->reset();
}

const uci::type::AssessmentID_Type& AssessmentMDT::getAssessmentID() const {
  return *assessmentID_Accessor;
}

uci::type::AssessmentID_Type& AssessmentMDT::getAssessmentID() {
  return *assessmentID_Accessor;
}

uci::type::AssessmentMDT& AssessmentMDT::setAssessmentID(const uci::type::AssessmentID_Type& accessor) {
  if (&accessor != assessmentID_Accessor.get()) {
    assessmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequestID_Type& AssessmentMDT::getAssessmentRequestID_() const {
  if (assessmentRequestID_Accessor) {
    return *assessmentRequestID_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentRequestID(): An attempt was made to get an optional field that was not enabled, call hasAssessmentRequestID() to determine if it is safe to call getAssessmentRequestID()");
}

const uci::type::RequestID_Type& AssessmentMDT::getAssessmentRequestID() const {
  return getAssessmentRequestID_();
}

uci::type::RequestID_Type& AssessmentMDT::getAssessmentRequestID() {
  return getAssessmentRequestID_();
}

uci::type::AssessmentMDT& AssessmentMDT::setAssessmentRequestID(const uci::type::RequestID_Type& accessor) {
  enableAssessmentRequestID();
  if (&accessor != assessmentRequestID_Accessor.get()) {
    assessmentRequestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentMDT::hasAssessmentRequestID() const noexcept {
  return static_cast<bool>(assessmentRequestID_Accessor);
}

uci::type::RequestID_Type& AssessmentMDT::enableAssessmentRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!assessmentRequestID_Accessor) || (assessmentRequestID_Accessor->getAccessorType() != requestedType)) {
    assessmentRequestID_Accessor = RequestID_Type::create(requestedType);
    if (!assessmentRequestID_Accessor) {
      throw uci::base::UCIException("Error in enableAssessmentRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *assessmentRequestID_Accessor;
}

uci::type::AssessmentMDT& AssessmentMDT::clearAssessmentRequestID() noexcept {
  assessmentRequestID_Accessor.reset();
  return *this;
}

uci::type::AnalysisRouteID_Type& AssessmentMDT::getAnalysisRouteID_() const {
  if (analysisRouteID_Accessor) {
    return *analysisRouteID_Accessor;
  }
  throw uci::base::UCIException("Error in getAnalysisRouteID(): An attempt was made to get an optional field that was not enabled, call hasAnalysisRouteID() to determine if it is safe to call getAnalysisRouteID()");
}

const uci::type::AnalysisRouteID_Type& AssessmentMDT::getAnalysisRouteID() const {
  return getAnalysisRouteID_();
}

uci::type::AnalysisRouteID_Type& AssessmentMDT::getAnalysisRouteID() {
  return getAnalysisRouteID_();
}

uci::type::AssessmentMDT& AssessmentMDT::setAnalysisRouteID(const uci::type::AnalysisRouteID_Type& accessor) {
  enableAnalysisRouteID();
  if (&accessor != analysisRouteID_Accessor.get()) {
    analysisRouteID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentMDT::hasAnalysisRouteID() const noexcept {
  return static_cast<bool>(analysisRouteID_Accessor);
}

uci::type::AnalysisRouteID_Type& AssessmentMDT::enableAnalysisRouteID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::analysisRouteID_Type : type};
  if ((!analysisRouteID_Accessor) || (analysisRouteID_Accessor->getAccessorType() != requestedType)) {
    analysisRouteID_Accessor = AnalysisRouteID_Type::create(requestedType);
    if (!analysisRouteID_Accessor) {
      throw uci::base::UCIException("Error in enableAnalysisRouteID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *analysisRouteID_Accessor;
}

uci::type::AssessmentMDT& AssessmentMDT::clearAnalysisRouteID() noexcept {
  analysisRouteID_Accessor.reset();
  return *this;
}

const uci::type::AssessmentType& AssessmentMDT::getAssessment() const {
  return *assessment_Accessor;
}

uci::type::AssessmentType& AssessmentMDT::getAssessment() {
  return *assessment_Accessor;
}

uci::type::AssessmentMDT& AssessmentMDT::setAssessment(const uci::type::AssessmentType& accessor) {
  if (&accessor != assessment_Accessor.get()) {
    assessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AssessmentMDT> AssessmentMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assessmentMDT : type};
  return (requestedType == uci::type::accessorType::assessmentMDT) ? boost::make_unique<AssessmentMDT>() : nullptr;
}

/**  */
namespace AssessmentMDT_Names {

constexpr const char* Extern_Type_Name{"AssessmentMDT"};
constexpr const char* AssessmentID_Name{"AssessmentID"};
constexpr const char* AssessmentRequestID_Name{"AssessmentRequestID"};
constexpr const char* AnalysisRouteID_Name{"AnalysisRouteID"};
constexpr const char* Assessment_Name{"Assessment"};

} // namespace AssessmentMDT_Names

void AssessmentMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::AssessmentMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AssessmentMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AssessmentMDT_Names::AssessmentID_Name) {
      AssessmentID_Type::deserialize(valueType.second, accessor.getAssessmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentMDT_Names::AssessmentRequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableAssessmentRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentMDT_Names::AnalysisRouteID_Name) {
      AnalysisRouteID_Type::deserialize(valueType.second, accessor.enableAnalysisRouteID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentMDT_Names::Assessment_Name) {
      AssessmentType::deserialize(valueType.second, accessor.getAssessment(), nodeName, nsPrefix);
    }
  }
}

std::string AssessmentMDT::serialize(const uci::type::AssessmentMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AssessmentMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AssessmentMDT_Names::Extern_Type_Name);
  }
  AssessmentID_Type::serialize(accessor.getAssessmentID(), node, AssessmentMDT_Names::AssessmentID_Name);
  if (accessor.hasAssessmentRequestID()) {
    RequestID_Type::serialize(accessor.getAssessmentRequestID(), node, AssessmentMDT_Names::AssessmentRequestID_Name);
  }
  if (accessor.hasAnalysisRouteID()) {
    AnalysisRouteID_Type::serialize(accessor.getAnalysisRouteID(), node, AssessmentMDT_Names::AnalysisRouteID_Name);
  }
  AssessmentType::serialize(accessor.getAssessment(), node, AssessmentMDT_Names::Assessment_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AssessmentMDT& AssessmentMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AssessmentMDT>().release());
}

uci::type::AssessmentMDT& AssessmentMDT::create(const uci::type::AssessmentMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AssessmentMDT> newAccessor{boost::make_unique<asb_uci::type::AssessmentMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AssessmentMDT::destroy(uci::type::AssessmentMDT& accessor) {
  delete dynamic_cast<asb_uci::type::AssessmentMDT*>(&accessor);
}

} // namespace type

} // namespace uci

