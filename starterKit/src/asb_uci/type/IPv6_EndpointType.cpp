/** @file IPv6_EndpointType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IPv6_EndpointType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IPv6_AddressType.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IPv6_AddressType.h"
#include "uci/type/IPv6_EndpointType.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IPv6_EndpointType::IPv6_EndpointType()
  : iP_Address_Accessor{boost::make_unique<IPv6_AddressType>()} {
}

IPv6_EndpointType::~IPv6_EndpointType() = default;

void IPv6_EndpointType::copy(const uci::type::IPv6_EndpointType& accessor) {
  copyImpl(accessor, false);
}

void IPv6_EndpointType::copyImpl(const uci::type::IPv6_EndpointType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IPv6_EndpointType&>(accessor);
    setIP_Address(*(accessorImpl.iP_Address_Accessor));
    if (accessorImpl.subnetMask_Accessor) {
      setSubnetMask(*(accessorImpl.subnetMask_Accessor));
    } else {
      subnetMask_Accessor.reset();
    }
    if (accessorImpl.description_Accessor) {
      setDescription(*(accessorImpl.description_Accessor));
    } else {
      description_Accessor.reset();
    }
  }
}

void IPv6_EndpointType::reset() noexcept {
  iP_Address_Accessor->reset();
  subnetMask_Accessor.reset();
  description_Accessor.reset();
}

const uci::type::IPv6_AddressType& IPv6_EndpointType::getIP_Address() const noexcept {
  return *iP_Address_Accessor;
}

uci::type::IPv6_AddressType& IPv6_EndpointType::getIP_Address() noexcept {
  return *iP_Address_Accessor;
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setIP_Address(const uci::type::IPv6_AddressType& value) {
  return setIP_Address(value.c_str());
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setIP_Address(const std::string& value) {
  return setIP_Address(value.c_str());
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setIP_Address(const char* value) {
  iP_Address_Accessor->setStringValue(value);
  return *this;
}

uci::type::IPv6_AddressType& IPv6_EndpointType::getSubnetMask_() const {
  if (subnetMask_Accessor) {
    return *subnetMask_Accessor;
  }
  throw uci::base::UCIException("Error in getSubnetMask(): An attempt was made to get an optional field that was not enabled, call hasSubnetMask() to determine if it is safe to call getSubnetMask()");
}

const uci::type::IPv6_AddressType& IPv6_EndpointType::getSubnetMask() const {
  return getSubnetMask_();
}

uci::type::IPv6_AddressType& IPv6_EndpointType::getSubnetMask() {
  return getSubnetMask_();
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setSubnetMask(const uci::type::IPv6_AddressType& value) {
  return setSubnetMask(value.c_str());
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setSubnetMask(const std::string& value) {
  return setSubnetMask(value.c_str());
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setSubnetMask(const char* value) {
  enableSubnetMask().setStringValue(value);
  return *this;
}

bool IPv6_EndpointType::hasSubnetMask() const noexcept {
  return static_cast<bool>(subnetMask_Accessor);
}

uci::type::IPv6_AddressType& IPv6_EndpointType::enableSubnetMask(uci::base::accessorType::AccessorType type) {
  if (!subnetMask_Accessor) {
    subnetMask_Accessor = IPv6_AddressType::create(type);
  }
  return *subnetMask_Accessor;
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::clearSubnetMask() noexcept {
  subnetMask_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& IPv6_EndpointType::getDescription_() const {
  if (description_Accessor) {
    return *description_Accessor;
  }
  throw uci::base::UCIException("Error in getDescription(): An attempt was made to get an optional field that was not enabled, call hasDescription() to determine if it is safe to call getDescription()");
}

const uci::type::VisibleString1024Type& IPv6_EndpointType::getDescription() const {
  return getDescription_();
}

uci::type::VisibleString1024Type& IPv6_EndpointType::getDescription() {
  return getDescription_();
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setDescription(const uci::type::VisibleString1024Type& value) {
  return setDescription(value.c_str());
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setDescription(const std::string& value) {
  return setDescription(value.c_str());
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::setDescription(const char* value) {
  enableDescription().setStringValue(value);
  return *this;
}

bool IPv6_EndpointType::hasDescription() const noexcept {
  return static_cast<bool>(description_Accessor);
}

uci::type::VisibleString1024Type& IPv6_EndpointType::enableDescription(uci::base::accessorType::AccessorType type) {
  if (!description_Accessor) {
    description_Accessor = VisibleString1024Type::create(type);
  }
  return *description_Accessor;
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::clearDescription() noexcept {
  description_Accessor.reset();
  return *this;
}

std::unique_ptr<IPv6_EndpointType> IPv6_EndpointType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPv6_EndpointType : type};
  return (requestedType == uci::type::accessorType::iPv6_EndpointType) ? boost::make_unique<IPv6_EndpointType>() : nullptr;
}

/**  */
namespace IPv6_EndpointType_Names {

constexpr const char* Extern_Type_Name{"IPv6_EndpointType"};
constexpr const char* IP_Address_Name{"IP_Address"};
constexpr const char* SubnetMask_Name{"SubnetMask"};
constexpr const char* Description_Name{"Description"};

} // namespace IPv6_EndpointType_Names

void IPv6_EndpointType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IPv6_EndpointType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IPv6_EndpointType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IPv6_EndpointType_Names::IP_Address_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIP_Address(*value);
      }
    } else if (valueType.first == nsPrefix + IPv6_EndpointType_Names::SubnetMask_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSubnetMask(*value);
      }
    } else if (valueType.first == nsPrefix + IPv6_EndpointType_Names::Description_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescription(*value);
      }
    }
  }
}

std::string IPv6_EndpointType::serialize(const uci::type::IPv6_EndpointType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IPv6_EndpointType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IPv6_EndpointType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getIP_Address(), node, IPv6_EndpointType_Names::IP_Address_Name);
  if (accessor.hasSubnetMask()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSubnetMask(), node, IPv6_EndpointType_Names::SubnetMask_Name);
  }
  if (accessor.hasDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescription(), node, IPv6_EndpointType_Names::Description_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IPv6_EndpointType& IPv6_EndpointType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IPv6_EndpointType>().release());
}

uci::type::IPv6_EndpointType& IPv6_EndpointType::create(const uci::type::IPv6_EndpointType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IPv6_EndpointType> newAccessor{boost::make_unique<asb_uci::type::IPv6_EndpointType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IPv6_EndpointType::destroy(uci::type::IPv6_EndpointType& accessor) {
  delete dynamic_cast<asb_uci::type::IPv6_EndpointType*>(&accessor);
}

} // namespace type

} // namespace uci

