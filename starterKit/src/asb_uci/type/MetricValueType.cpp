/** @file MetricValueType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MetricValueType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/NegotiableOptionsEnum.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/MetricValueType.h"
#include "uci/type/NegotiableOptionsEnum.h"
#include "uci/type/UnitIntervalFloatType.h"
#include "uci/type/VisibleString256Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MetricValueType::MetricValueType()
  : metricIdentifier_Accessor{boost::make_unique<ForeignKeyType>()} {
}

MetricValueType::~MetricValueType() = default;

void MetricValueType::copy(const uci::type::MetricValueType& accessor) {
  copyImpl(accessor, false);
}

void MetricValueType::copyImpl(const uci::type::MetricValueType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MetricValueType&>(accessor);
    setMetricIdentifier(*(accessorImpl.metricIdentifier_Accessor));
    if (accessorImpl.descriptionOfMetric_Accessor) {
      setDescriptionOfMetric(*(accessorImpl.descriptionOfMetric_Accessor));
    } else {
      descriptionOfMetric_Accessor.reset();
    }
    if (accessorImpl.negotiableOptions_Accessor) {
      setNegotiableOptions(*(accessorImpl.negotiableOptions_Accessor));
    } else {
      negotiableOptions_Accessor.reset();
    }
    setWeight(accessorImpl.weight_Accessor);
    setValue(accessorImpl.value_Accessor);
  }
}

void MetricValueType::reset() noexcept {
  if (metricIdentifier_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    metricIdentifier_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    metricIdentifier_Accessor->reset();
  }
  descriptionOfMetric_Accessor.reset();
  negotiableOptions_Accessor.reset();
  weight_Accessor = 0.0;
  value_Accessor = 0.0;
}

const uci::type::ForeignKeyType& MetricValueType::getMetricIdentifier() const {
  return *metricIdentifier_Accessor;
}

uci::type::ForeignKeyType& MetricValueType::getMetricIdentifier() {
  return *metricIdentifier_Accessor;
}

uci::type::MetricValueType& MetricValueType::setMetricIdentifier(const uci::type::ForeignKeyType& accessor) {
  enableMetricIdentifier(accessor.getAccessorType());
  if (&accessor != metricIdentifier_Accessor.get()) {
    metricIdentifier_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& MetricValueType::enableMetricIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!metricIdentifier_Accessor) || (metricIdentifier_Accessor->getAccessorType() != requestedType)) {
    metricIdentifier_Accessor = ForeignKeyType::create(requestedType);
    if (!metricIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableMetricIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metricIdentifier_Accessor;
}

uci::type::VisibleString256Type& MetricValueType::getDescriptionOfMetric_() const {
  if (descriptionOfMetric_Accessor) {
    return *descriptionOfMetric_Accessor;
  }
  throw uci::base::UCIException("Error in getDescriptionOfMetric(): An attempt was made to get an optional field that was not enabled, call hasDescriptionOfMetric() to determine if it is safe to call getDescriptionOfMetric()");
}

const uci::type::VisibleString256Type& MetricValueType::getDescriptionOfMetric() const {
  return getDescriptionOfMetric_();
}

uci::type::VisibleString256Type& MetricValueType::getDescriptionOfMetric() {
  return getDescriptionOfMetric_();
}

uci::type::MetricValueType& MetricValueType::setDescriptionOfMetric(const uci::type::VisibleString256Type& value) {
  return setDescriptionOfMetric(value.c_str());
}

uci::type::MetricValueType& MetricValueType::setDescriptionOfMetric(const std::string& value) {
  return setDescriptionOfMetric(value.c_str());
}

uci::type::MetricValueType& MetricValueType::setDescriptionOfMetric(const char* value) {
  enableDescriptionOfMetric().setStringValue(value);
  return *this;
}

bool MetricValueType::hasDescriptionOfMetric() const noexcept {
  return static_cast<bool>(descriptionOfMetric_Accessor);
}

uci::type::VisibleString256Type& MetricValueType::enableDescriptionOfMetric(uci::base::accessorType::AccessorType type) {
  if (!descriptionOfMetric_Accessor) {
    descriptionOfMetric_Accessor = VisibleString256Type::create(type);
  }
  return *descriptionOfMetric_Accessor;
}

uci::type::MetricValueType& MetricValueType::clearDescriptionOfMetric() noexcept {
  descriptionOfMetric_Accessor.reset();
  return *this;
}

uci::type::NegotiableOptionsEnum& MetricValueType::getNegotiableOptions_() const {
  if (negotiableOptions_Accessor) {
    return *negotiableOptions_Accessor;
  }
  throw uci::base::UCIException("Error in getNegotiableOptions(): An attempt was made to get an optional field that was not enabled, call hasNegotiableOptions() to determine if it is safe to call getNegotiableOptions()");
}

const uci::type::NegotiableOptionsEnum& MetricValueType::getNegotiableOptions() const {
  return getNegotiableOptions_();
}

uci::type::NegotiableOptionsEnum& MetricValueType::getNegotiableOptions() {
  return getNegotiableOptions_();
}

uci::type::MetricValueType& MetricValueType::setNegotiableOptions(const uci::type::NegotiableOptionsEnum& accessor) {
  enableNegotiableOptions();
  if (&accessor != negotiableOptions_Accessor.get()) {
    negotiableOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MetricValueType& MetricValueType::setNegotiableOptions(const uci::type::NegotiableOptionsEnum::EnumerationItem value) {
  enableNegotiableOptions().setValue(value);
  return *this;
}

bool MetricValueType::hasNegotiableOptions() const noexcept {
  return static_cast<bool>(negotiableOptions_Accessor);
}

uci::type::NegotiableOptionsEnum& MetricValueType::enableNegotiableOptions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::negotiableOptionsEnum : type};
  if ((!negotiableOptions_Accessor) || (negotiableOptions_Accessor->getAccessorType() != requestedType)) {
    negotiableOptions_Accessor = NegotiableOptionsEnum::create(requestedType);
    if (!negotiableOptions_Accessor) {
      throw uci::base::UCIException("Error in enableNegotiableOptions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *negotiableOptions_Accessor;
}

uci::type::MetricValueType& MetricValueType::clearNegotiableOptions() noexcept {
  negotiableOptions_Accessor.reset();
  return *this;
}

uci::type::UnitIntervalFloatTypeValue MetricValueType::getWeight() const {
  return weight_Accessor;
}

uci::type::MetricValueType& MetricValueType::setWeight(uci::type::UnitIntervalFloatTypeValue value) {
  weight_Accessor = value;
  return *this;
}


xs::Float MetricValueType::getValue() const {
  return value_Accessor;
}

uci::type::MetricValueType& MetricValueType::setValue(xs::Float value) {
  value_Accessor = value;
  return *this;
}


std::unique_ptr<MetricValueType> MetricValueType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::metricValueType : type};
  return (requestedType == uci::type::accessorType::metricValueType) ? boost::make_unique<MetricValueType>() : nullptr;
}

/**  */
namespace MetricValueType_Names {

constexpr const char* Extern_Type_Name{"MetricValueType"};
constexpr const char* MetricIdentifier_Name{"MetricIdentifier"};
constexpr const char* DescriptionOfMetric_Name{"DescriptionOfMetric"};
constexpr const char* NegotiableOptions_Name{"NegotiableOptions"};
constexpr const char* Weight_Name{"Weight"};
constexpr const char* Value_Name{"Value"};

} // namespace MetricValueType_Names

void MetricValueType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MetricValueType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MetricValueType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MetricValueType_Names::MetricIdentifier_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableMetricIdentifier(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MetricValueType_Names::DescriptionOfMetric_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescriptionOfMetric(*value);
      }
    } else if (valueType.first == nsPrefix + MetricValueType_Names::NegotiableOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNegotiableOptions().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MetricValueType_Names::Weight_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeight(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + MetricValueType_Names::Value_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setValue(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    }
  }
}

std::string MetricValueType::serialize(const uci::type::MetricValueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MetricValueType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MetricValueType_Names::Extern_Type_Name);
  }
  ForeignKeyType::serialize(accessor.getMetricIdentifier(), node, MetricValueType_Names::MetricIdentifier_Name);
  if (accessor.hasDescriptionOfMetric()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescriptionOfMetric(), node, MetricValueType_Names::DescriptionOfMetric_Name);
  }
  if (accessor.hasNegotiableOptions()) {
    NegotiableOptionsEnum::serialize(accessor.getNegotiableOptions(), node, MetricValueType_Names::NegotiableOptions_Name, false);
  }
  asb_uci::util::SerializationHelpers::serializeFloat(accessor.getWeight(), node, MetricValueType_Names::Weight_Name);
  asb_uci::util::SerializationHelpers::serializeFloat(accessor.getValue(), node, MetricValueType_Names::Value_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MetricValueType& MetricValueType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MetricValueType>().release());
}

uci::type::MetricValueType& MetricValueType::create(const uci::type::MetricValueType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MetricValueType> newAccessor{boost::make_unique<asb_uci::type::MetricValueType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MetricValueType::destroy(uci::type::MetricValueType& accessor) {
  delete dynamic_cast<asb_uci::type::MetricValueType*>(&accessor);
}

} // namespace type

} // namespace uci

