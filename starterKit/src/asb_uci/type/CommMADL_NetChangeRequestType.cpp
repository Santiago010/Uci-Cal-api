/** @file CommMADL_NetChangeRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommMADL_NetChangeRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommMADL_NetChangeOpEnum.h"
#include "../../../include/asb_uci/type/CommMADL_NetChangeSelectionListType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetChangeOpEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetChangeRequestType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetChangeSelectionListType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MADL_NetChangeSelectorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommMADL_NetChangeRequestType::CommMADL_NetChangeRequestType()
  : changeOperator_Accessor{boost::make_unique<CommMADL_NetChangeOpEnum>()},
    netChangeSelection_Accessor{boost::make_unique<CommMADL_NetChangeSelectionListType>()} {
}

CommMADL_NetChangeRequestType::~CommMADL_NetChangeRequestType() = default;

void CommMADL_NetChangeRequestType::copy(const uci::type::CommMADL_NetChangeRequestType& accessor) {
  copyImpl(accessor, false);
}

void CommMADL_NetChangeRequestType::copyImpl(const uci::type::CommMADL_NetChangeRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommMADL_NetChangeRequestType&>(accessor);
    setChangeOperator(*(accessorImpl.changeOperator_Accessor));
    setNumSelections(accessorImpl.numSelections_Accessor);
    setNetChangeSelection(*(accessorImpl.netChangeSelection_Accessor));
  }
}

void CommMADL_NetChangeRequestType::reset() noexcept {
  changeOperator_Accessor->reset();
  numSelections_Accessor = 0;
  netChangeSelection_Accessor->reset();
}

const uci::type::CommMADL_NetChangeOpEnum& CommMADL_NetChangeRequestType::getChangeOperator() const {
  return *changeOperator_Accessor;
}

uci::type::CommMADL_NetChangeOpEnum& CommMADL_NetChangeRequestType::getChangeOperator() {
  return *changeOperator_Accessor;
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_NetChangeRequestType::setChangeOperator(const uci::type::CommMADL_NetChangeOpEnum& accessor) {
  if (&accessor != changeOperator_Accessor.get()) {
    changeOperator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_NetChangeRequestType::setChangeOperator(uci::type::CommMADL_NetChangeOpEnum::EnumerationItem value) {
  changeOperator_Accessor->setValue(value);
  return *this;
}


uci::type::MADL_NetChangeSelectorTypeValue CommMADL_NetChangeRequestType::getNumSelections() const {
  return numSelections_Accessor;
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_NetChangeRequestType::setNumSelections(uci::type::MADL_NetChangeSelectorTypeValue value) {
  numSelections_Accessor = value;
  return *this;
}


const uci::type::CommMADL_NetChangeSelectionListType& CommMADL_NetChangeRequestType::getNetChangeSelection() const {
  return *netChangeSelection_Accessor;
}

uci::type::CommMADL_NetChangeSelectionListType& CommMADL_NetChangeRequestType::getNetChangeSelection() {
  return *netChangeSelection_Accessor;
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_NetChangeRequestType::setNetChangeSelection(const uci::type::CommMADL_NetChangeSelectionListType& accessor) {
  if (&accessor != netChangeSelection_Accessor.get()) {
    netChangeSelection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommMADL_NetChangeRequestType> CommMADL_NetChangeRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_NetChangeRequestType : type};
  return (requestedType == uci::type::accessorType::commMADL_NetChangeRequestType) ? boost::make_unique<CommMADL_NetChangeRequestType>() : nullptr;
}

/**  */
namespace CommMADL_NetChangeRequestType_Names {

constexpr const char* Extern_Type_Name{"CommMADL_NetChangeRequestType"};
constexpr const char* ChangeOperator_Name{"ChangeOperator"};
constexpr const char* NumSelections_Name{"NumSelections"};
constexpr const char* NetChangeSelection_Name{"NetChangeSelection"};

} // namespace CommMADL_NetChangeRequestType_Names

void CommMADL_NetChangeRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_NetChangeRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommMADL_NetChangeRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeRequestType_Names::ChangeOperator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getChangeOperator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeRequestType_Names::NumSelections_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumSelections(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeRequestType_Names::NetChangeSelection_Name) {
      CommMADL_NetChangeSelectionListType::deserialize(valueType.second, accessor.getNetChangeSelection(), nodeName, nsPrefix);
    }
  }
}

std::string CommMADL_NetChangeRequestType::serialize(const uci::type::CommMADL_NetChangeRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommMADL_NetChangeRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommMADL_NetChangeRequestType_Names::Extern_Type_Name);
  }
  CommMADL_NetChangeOpEnum::serialize(accessor.getChangeOperator(), node, CommMADL_NetChangeRequestType_Names::ChangeOperator_Name, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getNumSelections(), node, CommMADL_NetChangeRequestType_Names::NumSelections_Name);
  CommMADL_NetChangeSelectionListType::serialize(accessor.getNetChangeSelection(), node, CommMADL_NetChangeRequestType_Names::NetChangeSelection_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommMADL_NetChangeRequestType& CommMADL_NetChangeRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommMADL_NetChangeRequestType>().release());
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_NetChangeRequestType::create(const uci::type::CommMADL_NetChangeRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommMADL_NetChangeRequestType> newAccessor{boost::make_unique<asb_uci::type::CommMADL_NetChangeRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommMADL_NetChangeRequestType::destroy(uci::type::CommMADL_NetChangeRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::CommMADL_NetChangeRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

