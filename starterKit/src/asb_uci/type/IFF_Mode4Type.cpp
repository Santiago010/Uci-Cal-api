/** @file IFF_Mode4Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IFF_Mode4Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/InterrogationStatusEnum.h"
#include "../../../include/asb_uci/type/Mode4CodeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_Mode4Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/InterrogationStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Mode4CodeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_Mode4Type::IFF_Mode4Type() = default;

IFF_Mode4Type::~IFF_Mode4Type() = default;

void IFF_Mode4Type::copy(const uci::type::IFF_Mode4Type& accessor) {
  copyImpl(accessor, false);
}

void IFF_Mode4Type::copyImpl(const uci::type::IFF_Mode4Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_Mode4Type&>(accessor);
    if (accessorImpl.mode4Indicator_Accessor) {
      setMode4Indicator(*(accessorImpl.mode4Indicator_Accessor));
    } else {
      mode4Indicator_Accessor.reset();
    }
    if (accessorImpl.mode4Code_Accessor) {
      setMode4Code(*(accessorImpl.mode4Code_Accessor));
    } else {
      mode4Code_Accessor.reset();
    }
  }
}

void IFF_Mode4Type::reset() noexcept {
  mode4Indicator_Accessor.reset();
  mode4Code_Accessor.reset();
}

uci::type::InterrogationStatusEnum& IFF_Mode4Type::getMode4Indicator_() const {
  if (mode4Indicator_Accessor) {
    return *mode4Indicator_Accessor;
  }
  throw uci::base::UCIException("Error in getMode4Indicator(): An attempt was made to get an optional field that was not enabled, call hasMode4Indicator() to determine if it is safe to call getMode4Indicator()");
}

const uci::type::InterrogationStatusEnum& IFF_Mode4Type::getMode4Indicator() const {
  return getMode4Indicator_();
}

uci::type::InterrogationStatusEnum& IFF_Mode4Type::getMode4Indicator() {
  return getMode4Indicator_();
}

uci::type::IFF_Mode4Type& IFF_Mode4Type::setMode4Indicator(const uci::type::InterrogationStatusEnum& accessor) {
  enableMode4Indicator();
  if (&accessor != mode4Indicator_Accessor.get()) {
    mode4Indicator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_Mode4Type& IFF_Mode4Type::setMode4Indicator(const uci::type::InterrogationStatusEnum::EnumerationItem value) {
  enableMode4Indicator().setValue(value);
  return *this;
}

bool IFF_Mode4Type::hasMode4Indicator() const noexcept {
  return static_cast<bool>(mode4Indicator_Accessor);
}

uci::type::InterrogationStatusEnum& IFF_Mode4Type::enableMode4Indicator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::interrogationStatusEnum : type};
  if ((!mode4Indicator_Accessor) || (mode4Indicator_Accessor->getAccessorType() != requestedType)) {
    mode4Indicator_Accessor = InterrogationStatusEnum::create(requestedType);
    if (!mode4Indicator_Accessor) {
      throw uci::base::UCIException("Error in enableMode4Indicator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode4Indicator_Accessor;
}

uci::type::IFF_Mode4Type& IFF_Mode4Type::clearMode4Indicator() noexcept {
  mode4Indicator_Accessor.reset();
  return *this;
}

uci::type::Mode4CodeEnum& IFF_Mode4Type::getMode4Code_() const {
  if (mode4Code_Accessor) {
    return *mode4Code_Accessor;
  }
  throw uci::base::UCIException("Error in getMode4Code(): An attempt was made to get an optional field that was not enabled, call hasMode4Code() to determine if it is safe to call getMode4Code()");
}

const uci::type::Mode4CodeEnum& IFF_Mode4Type::getMode4Code() const {
  return getMode4Code_();
}

uci::type::Mode4CodeEnum& IFF_Mode4Type::getMode4Code() {
  return getMode4Code_();
}

uci::type::IFF_Mode4Type& IFF_Mode4Type::setMode4Code(const uci::type::Mode4CodeEnum& accessor) {
  enableMode4Code();
  if (&accessor != mode4Code_Accessor.get()) {
    mode4Code_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_Mode4Type& IFF_Mode4Type::setMode4Code(const uci::type::Mode4CodeEnum::EnumerationItem value) {
  enableMode4Code().setValue(value);
  return *this;
}

bool IFF_Mode4Type::hasMode4Code() const noexcept {
  return static_cast<bool>(mode4Code_Accessor);
}

uci::type::Mode4CodeEnum& IFF_Mode4Type::enableMode4Code(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mode4CodeEnum : type};
  if ((!mode4Code_Accessor) || (mode4Code_Accessor->getAccessorType() != requestedType)) {
    mode4Code_Accessor = Mode4CodeEnum::create(requestedType);
    if (!mode4Code_Accessor) {
      throw uci::base::UCIException("Error in enableMode4Code(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode4Code_Accessor;
}

uci::type::IFF_Mode4Type& IFF_Mode4Type::clearMode4Code() noexcept {
  mode4Code_Accessor.reset();
  return *this;
}

std::unique_ptr<IFF_Mode4Type> IFF_Mode4Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Mode4Type : type};
  return (requestedType == uci::type::accessorType::iFF_Mode4Type) ? boost::make_unique<IFF_Mode4Type>() : nullptr;
}

/**  */
namespace IFF_Mode4Type_Names {

constexpr const char* Extern_Type_Name{"IFF_Mode4Type"};
constexpr const char* Mode4Indicator_Name{"Mode4Indicator"};
constexpr const char* Mode4Code_Name{"Mode4Code"};

} // namespace IFF_Mode4Type_Names

void IFF_Mode4Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_Mode4Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_Mode4Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_Mode4Type_Names::Mode4Indicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMode4Indicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_Mode4Type_Names::Mode4Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMode4Code().setValueFromName(*value);
      }
    }
  }
}

std::string IFF_Mode4Type::serialize(const uci::type::IFF_Mode4Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_Mode4Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_Mode4Type_Names::Extern_Type_Name);
  }
  if (accessor.hasMode4Indicator()) {
    InterrogationStatusEnum::serialize(accessor.getMode4Indicator(), node, IFF_Mode4Type_Names::Mode4Indicator_Name, false);
  }
  if (accessor.hasMode4Code()) {
    Mode4CodeEnum::serialize(accessor.getMode4Code(), node, IFF_Mode4Type_Names::Mode4Code_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_Mode4Type& IFF_Mode4Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_Mode4Type>().release());
}

uci::type::IFF_Mode4Type& IFF_Mode4Type::create(const uci::type::IFF_Mode4Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_Mode4Type> newAccessor{boost::make_unique<asb_uci::type::IFF_Mode4Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_Mode4Type::destroy(uci::type::IFF_Mode4Type& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_Mode4Type*>(&accessor);
}

} // namespace type

} // namespace uci

