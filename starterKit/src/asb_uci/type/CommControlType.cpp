/** @file CommControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommConnectionType.h"
#include "asb_uci/type/CommReceiverStateEnum.h"
#include "asb_uci/type/CommTransmitterStateEnum.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/RemoteDestinationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommConnectionType.h"
#include "uci/type/CommControlType.h"
#include "uci/type/CommReceiverStateEnum.h"
#include "uci/type/CommTransmitterStateEnum.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DataRateType.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "uci/type/RemoteDestinationType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommControlType::CommControlType()
  : antennaID_Accessor{boost::make_unique<AntennaID>(0, SIZE_MAX)} {
}

CommControlType::~CommControlType() = default;

void CommControlType::copy(const uci::type::CommControlType& accessor) {
  copyImpl(accessor, false);
}

void CommControlType::copyImpl(const uci::type::CommControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommControlType&>(accessor);
    if (accessorImpl.hasInhibitTransmit()) {
      setInhibitTransmit(accessorImpl.getInhibitTransmit());
    } else {
      clearInhibitTransmit();
    }
    if (accessorImpl.hasInhibitReceive()) {
      setInhibitReceive(accessorImpl.getInhibitReceive());
    } else {
      clearInhibitReceive();
    }
    if (accessorImpl.hasInhibitRelay()) {
      setInhibitRelay(accessorImpl.getInhibitRelay());
    } else {
      clearInhibitRelay();
    }
    if (accessorImpl.connectionSettings_Accessor) {
      setConnectionSettings(*(accessorImpl.connectionSettings_Accessor));
    } else {
      connectionSettings_Accessor.reset();
    }
    if (accessorImpl.receiverState_Accessor) {
      setReceiverState(*(accessorImpl.receiverState_Accessor));
    } else {
      receiverState_Accessor.reset();
    }
    if (accessorImpl.hasRxPowerLevel()) {
      setRxPowerLevel(accessorImpl.getRxPowerLevel());
    } else {
      clearRxPowerLevel();
    }
    if (accessorImpl.hasSquelchLevel()) {
      setSquelchLevel(accessorImpl.getSquelchLevel());
    } else {
      clearSquelchLevel();
    }
    if (accessorImpl.transmitterState_Accessor) {
      setTransmitterState(*(accessorImpl.transmitterState_Accessor));
    } else {
      transmitterState_Accessor.reset();
    }
    if (accessorImpl.hasTxPowerLevel()) {
      setTxPowerLevel(accessorImpl.getTxPowerLevel());
    } else {
      clearTxPowerLevel();
    }
    if (accessorImpl.hasVolumeLevel()) {
      setVolumeLevel(accessorImpl.getVolumeLevel());
    } else {
      clearVolumeLevel();
    }
    if (accessorImpl.hasRF_DataRate()) {
      setRF_DataRate(accessorImpl.getRF_DataRate());
    } else {
      clearRF_DataRate();
    }
    setAntennaID(*(accessorImpl.antennaID_Accessor));
    if (accessorImpl.remoteDestination_Accessor) {
      setRemoteDestination(*(accessorImpl.remoteDestination_Accessor));
    } else {
      remoteDestination_Accessor.reset();
    }
  }
}

void CommControlType::reset() noexcept {
  clearInhibitTransmit();
  clearInhibitReceive();
  clearInhibitRelay();
  connectionSettings_Accessor.reset();
  receiverState_Accessor.reset();
  clearRxPowerLevel();
  clearSquelchLevel();
  transmitterState_Accessor.reset();
  clearTxPowerLevel();
  clearVolumeLevel();
  clearRF_DataRate();
  antennaID_Accessor->reset();
  remoteDestination_Accessor.reset();
}

xs::Boolean CommControlType::getInhibitTransmit() const {
  if (inhibitTransmit_Accessor) {
    return *inhibitTransmit_Accessor;
  }
  throw uci::base::UCIException("Error in getInhibitTransmit(): An attempt was made to get an optional field that was not enabled, call hasInhibitTransmit() to determine if it is safe to call getInhibitTransmit()");
}

uci::type::CommControlType& CommControlType::setInhibitTransmit(xs::Boolean value) {
  inhibitTransmit_Accessor = value;
  return *this;
}

bool CommControlType::hasInhibitTransmit() const noexcept {
  return inhibitTransmit_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearInhibitTransmit() noexcept {
  inhibitTransmit_Accessor.reset();
  return *this;
}

xs::Boolean CommControlType::getInhibitReceive() const {
  if (inhibitReceive_Accessor) {
    return *inhibitReceive_Accessor;
  }
  throw uci::base::UCIException("Error in getInhibitReceive(): An attempt was made to get an optional field that was not enabled, call hasInhibitReceive() to determine if it is safe to call getInhibitReceive()");
}

uci::type::CommControlType& CommControlType::setInhibitReceive(xs::Boolean value) {
  inhibitReceive_Accessor = value;
  return *this;
}

bool CommControlType::hasInhibitReceive() const noexcept {
  return inhibitReceive_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearInhibitReceive() noexcept {
  inhibitReceive_Accessor.reset();
  return *this;
}

xs::Boolean CommControlType::getInhibitRelay() const {
  if (inhibitRelay_Accessor) {
    return *inhibitRelay_Accessor;
  }
  throw uci::base::UCIException("Error in getInhibitRelay(): An attempt was made to get an optional field that was not enabled, call hasInhibitRelay() to determine if it is safe to call getInhibitRelay()");
}

uci::type::CommControlType& CommControlType::setInhibitRelay(xs::Boolean value) {
  inhibitRelay_Accessor = value;
  return *this;
}

bool CommControlType::hasInhibitRelay() const noexcept {
  return inhibitRelay_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearInhibitRelay() noexcept {
  inhibitRelay_Accessor.reset();
  return *this;
}

uci::type::CommConnectionType& CommControlType::getConnectionSettings_() const {
  if (connectionSettings_Accessor) {
    return *connectionSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getConnectionSettings(): An attempt was made to get an optional field that was not enabled, call hasConnectionSettings() to determine if it is safe to call getConnectionSettings()");
}

const uci::type::CommConnectionType& CommControlType::getConnectionSettings() const {
  return getConnectionSettings_();
}

uci::type::CommConnectionType& CommControlType::getConnectionSettings() {
  return getConnectionSettings_();
}

uci::type::CommControlType& CommControlType::setConnectionSettings(const uci::type::CommConnectionType& accessor) {
  enableConnectionSettings();
  if (&accessor != connectionSettings_Accessor.get()) {
    connectionSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommControlType::hasConnectionSettings() const noexcept {
  return static_cast<bool>(connectionSettings_Accessor);
}

uci::type::CommConnectionType& CommControlType::enableConnectionSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConnectionType : type};
  if ((!connectionSettings_Accessor) || (connectionSettings_Accessor->getAccessorType() != requestedType)) {
    connectionSettings_Accessor = CommConnectionType::create(requestedType);
    if (!connectionSettings_Accessor) {
      throw uci::base::UCIException("Error in enableConnectionSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *connectionSettings_Accessor;
}

uci::type::CommControlType& CommControlType::clearConnectionSettings() noexcept {
  connectionSettings_Accessor.reset();
  return *this;
}

uci::type::CommReceiverStateEnum& CommControlType::getReceiverState_() const {
  if (receiverState_Accessor) {
    return *receiverState_Accessor;
  }
  throw uci::base::UCIException("Error in getReceiverState(): An attempt was made to get an optional field that was not enabled, call hasReceiverState() to determine if it is safe to call getReceiverState()");
}

const uci::type::CommReceiverStateEnum& CommControlType::getReceiverState() const {
  return getReceiverState_();
}

uci::type::CommReceiverStateEnum& CommControlType::getReceiverState() {
  return getReceiverState_();
}

uci::type::CommControlType& CommControlType::setReceiverState(const uci::type::CommReceiverStateEnum& accessor) {
  enableReceiverState();
  if (&accessor != receiverState_Accessor.get()) {
    receiverState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommControlType& CommControlType::setReceiverState(const uci::type::CommReceiverStateEnum::EnumerationItem value) {
  enableReceiverState().setValue(value);
  return *this;
}

bool CommControlType::hasReceiverState() const noexcept {
  return static_cast<bool>(receiverState_Accessor);
}

uci::type::CommReceiverStateEnum& CommControlType::enableReceiverState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commReceiverStateEnum : type};
  if ((!receiverState_Accessor) || (receiverState_Accessor->getAccessorType() != requestedType)) {
    receiverState_Accessor = CommReceiverStateEnum::create(requestedType);
    if (!receiverState_Accessor) {
      throw uci::base::UCIException("Error in enableReceiverState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *receiverState_Accessor;
}

uci::type::CommControlType& CommControlType::clearReceiverState() noexcept {
  receiverState_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue CommControlType::getRxPowerLevel() const {
  if (rxPowerLevel_Accessor) {
    return *rxPowerLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getRxPowerLevel(): An attempt was made to get an optional field that was not enabled, call hasRxPowerLevel() to determine if it is safe to call getRxPowerLevel()");
}

uci::type::CommControlType& CommControlType::setRxPowerLevel(uci::type::MilliwattPowerRatioTypeValue value) {
  rxPowerLevel_Accessor = value;
  return *this;
}

bool CommControlType::hasRxPowerLevel() const noexcept {
  return rxPowerLevel_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearRxPowerLevel() noexcept {
  rxPowerLevel_Accessor.reset();
  return *this;
}

xs::UnsignedByte CommControlType::getSquelchLevel() const {
  if (squelchLevel_Accessor) {
    return *squelchLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getSquelchLevel(): An attempt was made to get an optional field that was not enabled, call hasSquelchLevel() to determine if it is safe to call getSquelchLevel()");
}

uci::type::CommControlType& CommControlType::setSquelchLevel(xs::UnsignedByte value) {
  squelchLevel_Accessor = value;
  return *this;
}

bool CommControlType::hasSquelchLevel() const noexcept {
  return squelchLevel_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearSquelchLevel() noexcept {
  squelchLevel_Accessor.reset();
  return *this;
}

uci::type::CommTransmitterStateEnum& CommControlType::getTransmitterState_() const {
  if (transmitterState_Accessor) {
    return *transmitterState_Accessor;
  }
  throw uci::base::UCIException("Error in getTransmitterState(): An attempt was made to get an optional field that was not enabled, call hasTransmitterState() to determine if it is safe to call getTransmitterState()");
}

const uci::type::CommTransmitterStateEnum& CommControlType::getTransmitterState() const {
  return getTransmitterState_();
}

uci::type::CommTransmitterStateEnum& CommControlType::getTransmitterState() {
  return getTransmitterState_();
}

uci::type::CommControlType& CommControlType::setTransmitterState(const uci::type::CommTransmitterStateEnum& accessor) {
  enableTransmitterState();
  if (&accessor != transmitterState_Accessor.get()) {
    transmitterState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommControlType& CommControlType::setTransmitterState(const uci::type::CommTransmitterStateEnum::EnumerationItem value) {
  enableTransmitterState().setValue(value);
  return *this;
}

bool CommControlType::hasTransmitterState() const noexcept {
  return static_cast<bool>(transmitterState_Accessor);
}

uci::type::CommTransmitterStateEnum& CommControlType::enableTransmitterState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commTransmitterStateEnum : type};
  if ((!transmitterState_Accessor) || (transmitterState_Accessor->getAccessorType() != requestedType)) {
    transmitterState_Accessor = CommTransmitterStateEnum::create(requestedType);
    if (!transmitterState_Accessor) {
      throw uci::base::UCIException("Error in enableTransmitterState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transmitterState_Accessor;
}

uci::type::CommControlType& CommControlType::clearTransmitterState() noexcept {
  transmitterState_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue CommControlType::getTxPowerLevel() const {
  if (txPowerLevel_Accessor) {
    return *txPowerLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getTxPowerLevel(): An attempt was made to get an optional field that was not enabled, call hasTxPowerLevel() to determine if it is safe to call getTxPowerLevel()");
}

uci::type::CommControlType& CommControlType::setTxPowerLevel(uci::type::MilliwattPowerRatioTypeValue value) {
  txPowerLevel_Accessor = value;
  return *this;
}

bool CommControlType::hasTxPowerLevel() const noexcept {
  return txPowerLevel_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearTxPowerLevel() noexcept {
  txPowerLevel_Accessor.reset();
  return *this;
}

xs::UnsignedByte CommControlType::getVolumeLevel() const {
  if (volumeLevel_Accessor) {
    return *volumeLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getVolumeLevel(): An attempt was made to get an optional field that was not enabled, call hasVolumeLevel() to determine if it is safe to call getVolumeLevel()");
}

uci::type::CommControlType& CommControlType::setVolumeLevel(xs::UnsignedByte value) {
  volumeLevel_Accessor = value;
  return *this;
}

bool CommControlType::hasVolumeLevel() const noexcept {
  return volumeLevel_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearVolumeLevel() noexcept {
  volumeLevel_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue CommControlType::getRF_DataRate() const {
  if (rF_DataRate_Accessor) {
    return *rF_DataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getRF_DataRate(): An attempt was made to get an optional field that was not enabled, call hasRF_DataRate() to determine if it is safe to call getRF_DataRate()");
}

uci::type::CommControlType& CommControlType::setRF_DataRate(uci::type::DataRateTypeValue value) {
  rF_DataRate_Accessor = value;
  return *this;
}

bool CommControlType::hasRF_DataRate() const noexcept {
  return rF_DataRate_Accessor.has_value();
}

uci::type::CommControlType& CommControlType::clearRF_DataRate() noexcept {
  rF_DataRate_Accessor.reset();
  return *this;
}

const uci::type::CommControlType::AntennaID& CommControlType::getAntennaID() const {
  return *antennaID_Accessor;
}

uci::type::CommControlType::AntennaID& CommControlType::getAntennaID() {
  return *antennaID_Accessor;
}

uci::type::CommControlType& CommControlType::setAntennaID(const uci::type::CommControlType::AntennaID& accessor) {
  if (&accessor != antennaID_Accessor.get()) {
    antennaID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RemoteDestinationType& CommControlType::getRemoteDestination_() const {
  if (remoteDestination_Accessor) {
    return *remoteDestination_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoteDestination(): An attempt was made to get an optional field that was not enabled, call hasRemoteDestination() to determine if it is safe to call getRemoteDestination()");
}

const uci::type::RemoteDestinationType& CommControlType::getRemoteDestination() const {
  return getRemoteDestination_();
}

uci::type::RemoteDestinationType& CommControlType::getRemoteDestination() {
  return getRemoteDestination_();
}

uci::type::CommControlType& CommControlType::setRemoteDestination(const uci::type::RemoteDestinationType& accessor) {
  enableRemoteDestination();
  if (&accessor != remoteDestination_Accessor.get()) {
    remoteDestination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommControlType::hasRemoteDestination() const noexcept {
  return static_cast<bool>(remoteDestination_Accessor);
}

uci::type::RemoteDestinationType& CommControlType::enableRemoteDestination(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remoteDestinationType : type};
  if ((!remoteDestination_Accessor) || (remoteDestination_Accessor->getAccessorType() != requestedType)) {
    remoteDestination_Accessor = RemoteDestinationType::create(requestedType);
    if (!remoteDestination_Accessor) {
      throw uci::base::UCIException("Error in enableRemoteDestination(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remoteDestination_Accessor;
}

uci::type::CommControlType& CommControlType::clearRemoteDestination() noexcept {
  remoteDestination_Accessor.reset();
  return *this;
}

std::unique_ptr<CommControlType> CommControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commControlType : type};
  return (requestedType == uci::type::accessorType::commControlType) ? boost::make_unique<CommControlType>() : nullptr;
}

/**  */
namespace CommControlType_Names {

constexpr const char* Extern_Type_Name{"CommControlType"};
constexpr const char* InhibitTransmit_Name{"InhibitTransmit"};
constexpr const char* InhibitReceive_Name{"InhibitReceive"};
constexpr const char* InhibitRelay_Name{"InhibitRelay"};
constexpr const char* ConnectionSettings_Name{"ConnectionSettings"};
constexpr const char* ReceiverState_Name{"ReceiverState"};
constexpr const char* RxPowerLevel_Name{"RxPowerLevel"};
constexpr const char* SquelchLevel_Name{"SquelchLevel"};
constexpr const char* TransmitterState_Name{"TransmitterState"};
constexpr const char* TxPowerLevel_Name{"TxPowerLevel"};
constexpr const char* VolumeLevel_Name{"VolumeLevel"};
constexpr const char* RF_DataRate_Name{"RF_DataRate"};
constexpr const char* AntennaID_Name{"AntennaID"};
constexpr const char* RemoteDestination_Name{"RemoteDestination"};

} // namespace CommControlType_Names

void CommControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommControlType_Names::InhibitTransmit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInhibitTransmit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::InhibitReceive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInhibitReceive(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::InhibitRelay_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInhibitRelay(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::ConnectionSettings_Name) {
      CommConnectionType::deserialize(valueType.second, accessor.enableConnectionSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommControlType_Names::ReceiverState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableReceiverState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::RxPowerLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxPowerLevel(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::SquelchLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSquelchLevel(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::TransmitterState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitterState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::TxPowerLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxPowerLevel(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::VolumeLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVolumeLevel(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::RF_DataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRF_DataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::AntennaID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommControlType::AntennaID& boundedList = accessor.getAntennaID();
        const uci::type::CommControlType::AntennaID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommControlType_Names::RemoteDestination_Name) {
      RemoteDestinationType::deserialize(valueType.second, accessor.enableRemoteDestination(), nodeName, nsPrefix);
    }
  }
}

std::string CommControlType::serialize(const uci::type::CommControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommControlType_Names::Extern_Type_Name);
  }
  if (accessor.hasInhibitTransmit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInhibitTransmit(), node, CommControlType_Names::InhibitTransmit_Name);
  }
  if (accessor.hasInhibitReceive()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInhibitReceive(), node, CommControlType_Names::InhibitReceive_Name);
  }
  if (accessor.hasInhibitRelay()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInhibitRelay(), node, CommControlType_Names::InhibitRelay_Name);
  }
  if (accessor.hasConnectionSettings()) {
    CommConnectionType::serialize(accessor.getConnectionSettings(), node, CommControlType_Names::ConnectionSettings_Name);
  }
  if (accessor.hasReceiverState()) {
    CommReceiverStateEnum::serialize(accessor.getReceiverState(), node, CommControlType_Names::ReceiverState_Name, false);
  }
  if (accessor.hasRxPowerLevel()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRxPowerLevel(), node, CommControlType_Names::RxPowerLevel_Name);
  }
  if (accessor.hasSquelchLevel()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getSquelchLevel(), node, CommControlType_Names::SquelchLevel_Name);
  }
  if (accessor.hasTransmitterState()) {
    CommTransmitterStateEnum::serialize(accessor.getTransmitterState(), node, CommControlType_Names::TransmitterState_Name, false);
  }
  if (accessor.hasTxPowerLevel()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTxPowerLevel(), node, CommControlType_Names::TxPowerLevel_Name);
  }
  if (accessor.hasVolumeLevel()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getVolumeLevel(), node, CommControlType_Names::VolumeLevel_Name);
  }
  if (accessor.hasRF_DataRate()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRF_DataRate(), node, CommControlType_Names::RF_DataRate_Name);
  }
  {
    const uci::type::CommControlType::AntennaID& boundedList = accessor.getAntennaID();
    for (uci::type::CommControlType::AntennaID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, CommControlType_Names::AntennaID_Name);
    }
  }
  if (accessor.hasRemoteDestination()) {
    RemoteDestinationType::serialize(accessor.getRemoteDestination(), node, CommControlType_Names::RemoteDestination_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommControlType& CommControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommControlType>().release());
}

uci::type::CommControlType& CommControlType::create(const uci::type::CommControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommControlType> newAccessor{boost::make_unique<asb_uci::type::CommControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommControlType::destroy(uci::type::CommControlType& accessor) {
  delete dynamic_cast<asb_uci::type::CommControlType*>(&accessor);
}

} // namespace type

} // namespace uci

