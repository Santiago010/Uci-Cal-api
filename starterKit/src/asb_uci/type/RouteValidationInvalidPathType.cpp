/** @file RouteValidationInvalidPathType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RouteValidationInvalidPathType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CannotComplyType.h"
#include "../../../include/asb_uci/type/LAR_MDT.h"
#include "../../../include/asb_uci/type/PathID_Type.h"
#include "../../../include/asb_uci/type/RouteValidationErrorType.h"
#include "../../../include/asb_uci/type/RouteValidationInvalidSegmentType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CannotComplyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LAR_MDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RouteValidationErrorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RouteValidationInvalidPathType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RouteValidationInvalidSegmentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RouteValidationInvalidPathType::RouteValidationInvalidPathType()
  : pathID_Accessor{boost::make_unique<PathID_Type>()},
    invalidSegment_Accessor{boost::make_unique<InvalidSegment>(0, SIZE_MAX)} {
}

RouteValidationInvalidPathType::~RouteValidationInvalidPathType() = default;

void RouteValidationInvalidPathType::copy(const uci::type::RouteValidationInvalidPathType& accessor) {
  copyImpl(accessor, false);
}

void RouteValidationInvalidPathType::copyImpl(const uci::type::RouteValidationInvalidPathType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RouteValidationInvalidPathType&>(accessor);
    setPathID(*(accessorImpl.pathID_Accessor));
    if (accessorImpl.kinematicInvalidReason_Accessor) {
      setKinematicInvalidReason(*(accessorImpl.kinematicInvalidReason_Accessor));
    } else {
      kinematicInvalidReason_Accessor.reset();
    }
    setInvalidSegment(*(accessorImpl.invalidSegment_Accessor));
    if (accessorImpl.validLAR_Accessor) {
      setValidLAR(*(accessorImpl.validLAR_Accessor));
    } else {
      validLAR_Accessor.reset();
    }
    if (accessorImpl.otherInvalidReason_Accessor) {
      setOtherInvalidReason(*(accessorImpl.otherInvalidReason_Accessor));
    } else {
      otherInvalidReason_Accessor.reset();
    }
  }
}

void RouteValidationInvalidPathType::reset() noexcept {
  pathID_Accessor->reset();
  kinematicInvalidReason_Accessor.reset();
  invalidSegment_Accessor->reset();
  validLAR_Accessor.reset();
  otherInvalidReason_Accessor.reset();
}

const uci::type::PathID_Type& RouteValidationInvalidPathType::getPathID() const {
  return *pathID_Accessor;
}

uci::type::PathID_Type& RouteValidationInvalidPathType::getPathID() {
  return *pathID_Accessor;
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::setPathID(const uci::type::PathID_Type& accessor) {
  if (&accessor != pathID_Accessor.get()) {
    pathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RouteValidationErrorType& RouteValidationInvalidPathType::getKinematicInvalidReason_() const {
  if (kinematicInvalidReason_Accessor) {
    return *kinematicInvalidReason_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematicInvalidReason(): An attempt was made to get an optional field that was not enabled, call hasKinematicInvalidReason() to determine if it is safe to call getKinematicInvalidReason()");
}

const uci::type::RouteValidationErrorType& RouteValidationInvalidPathType::getKinematicInvalidReason() const {
  return getKinematicInvalidReason_();
}

uci::type::RouteValidationErrorType& RouteValidationInvalidPathType::getKinematicInvalidReason() {
  return getKinematicInvalidReason_();
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::setKinematicInvalidReason(const uci::type::RouteValidationErrorType& accessor) {
  enableKinematicInvalidReason();
  if (&accessor != kinematicInvalidReason_Accessor.get()) {
    kinematicInvalidReason_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteValidationInvalidPathType::hasKinematicInvalidReason() const noexcept {
  return static_cast<bool>(kinematicInvalidReason_Accessor);
}

uci::type::RouteValidationErrorType& RouteValidationInvalidPathType::enableKinematicInvalidReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeValidationErrorType : type};
  if ((!kinematicInvalidReason_Accessor) || (kinematicInvalidReason_Accessor->getAccessorType() != requestedType)) {
    kinematicInvalidReason_Accessor = RouteValidationErrorType::create(requestedType);
    if (!kinematicInvalidReason_Accessor) {
      throw uci::base::UCIException("Error in enableKinematicInvalidReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematicInvalidReason_Accessor;
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::clearKinematicInvalidReason() noexcept {
  kinematicInvalidReason_Accessor.reset();
  return *this;
}

const uci::type::RouteValidationInvalidPathType::InvalidSegment& RouteValidationInvalidPathType::getInvalidSegment() const {
  return *invalidSegment_Accessor;
}

uci::type::RouteValidationInvalidPathType::InvalidSegment& RouteValidationInvalidPathType::getInvalidSegment() {
  return *invalidSegment_Accessor;
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::setInvalidSegment(const uci::type::RouteValidationInvalidPathType::InvalidSegment& accessor) {
  if (&accessor != invalidSegment_Accessor.get()) {
    invalidSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LAR_MDT& RouteValidationInvalidPathType::getValidLAR_() const {
  if (validLAR_Accessor) {
    return *validLAR_Accessor;
  }
  throw uci::base::UCIException("Error in getValidLAR(): An attempt was made to get an optional field that was not enabled, call hasValidLAR() to determine if it is safe to call getValidLAR()");
}

const uci::type::LAR_MDT& RouteValidationInvalidPathType::getValidLAR() const {
  return getValidLAR_();
}

uci::type::LAR_MDT& RouteValidationInvalidPathType::getValidLAR() {
  return getValidLAR_();
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::setValidLAR(const uci::type::LAR_MDT& accessor) {
  enableValidLAR();
  if (&accessor != validLAR_Accessor.get()) {
    validLAR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteValidationInvalidPathType::hasValidLAR() const noexcept {
  return static_cast<bool>(validLAR_Accessor);
}

uci::type::LAR_MDT& RouteValidationInvalidPathType::enableValidLAR(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lAR_MDT : type};
  if ((!validLAR_Accessor) || (validLAR_Accessor->getAccessorType() != requestedType)) {
    validLAR_Accessor = LAR_MDT::create(requestedType);
    if (!validLAR_Accessor) {
      throw uci::base::UCIException("Error in enableValidLAR(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *validLAR_Accessor;
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::clearValidLAR() noexcept {
  validLAR_Accessor.reset();
  return *this;
}

uci::type::CannotComplyType& RouteValidationInvalidPathType::getOtherInvalidReason_() const {
  if (otherInvalidReason_Accessor) {
    return *otherInvalidReason_Accessor;
  }
  throw uci::base::UCIException("Error in getOtherInvalidReason(): An attempt was made to get an optional field that was not enabled, call hasOtherInvalidReason() to determine if it is safe to call getOtherInvalidReason()");
}

const uci::type::CannotComplyType& RouteValidationInvalidPathType::getOtherInvalidReason() const {
  return getOtherInvalidReason_();
}

uci::type::CannotComplyType& RouteValidationInvalidPathType::getOtherInvalidReason() {
  return getOtherInvalidReason_();
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::setOtherInvalidReason(const uci::type::CannotComplyType& accessor) {
  enableOtherInvalidReason(accessor.getAccessorType());
  if (&accessor != otherInvalidReason_Accessor.get()) {
    otherInvalidReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RouteValidationInvalidPathType::hasOtherInvalidReason() const noexcept {
  return static_cast<bool>(otherInvalidReason_Accessor);
}

uci::type::CannotComplyType& RouteValidationInvalidPathType::enableOtherInvalidReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!otherInvalidReason_Accessor) || (otherInvalidReason_Accessor->getAccessorType() != requestedType)) {
    otherInvalidReason_Accessor = CannotComplyType::create(requestedType);
    if (!otherInvalidReason_Accessor) {
      throw uci::base::UCIException("Error in enableOtherInvalidReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *otherInvalidReason_Accessor;
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::clearOtherInvalidReason() noexcept {
  otherInvalidReason_Accessor.reset();
  return *this;
}

std::unique_ptr<RouteValidationInvalidPathType> RouteValidationInvalidPathType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeValidationInvalidPathType : type};
  return (requestedType == uci::type::accessorType::routeValidationInvalidPathType) ? boost::make_unique<RouteValidationInvalidPathType>() : nullptr;
}

/**  */
namespace RouteValidationInvalidPathType_Names {

constexpr const char* Extern_Type_Name{"RouteValidationInvalidPathType"};
constexpr const char* PathID_Name{"PathID"};
constexpr const char* KinematicInvalidReason_Name{"KinematicInvalidReason"};
constexpr const char* InvalidSegment_Name{"InvalidSegment"};
constexpr const char* ValidLAR_Name{"ValidLAR"};
constexpr const char* OtherInvalidReason_Name{"OtherInvalidReason"};

} // namespace RouteValidationInvalidPathType_Names

void RouteValidationInvalidPathType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RouteValidationInvalidPathType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RouteValidationInvalidPathType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RouteValidationInvalidPathType_Names::PathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.getPathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteValidationInvalidPathType_Names::KinematicInvalidReason_Name) {
      RouteValidationErrorType::deserialize(valueType.second, accessor.enableKinematicInvalidReason(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteValidationInvalidPathType_Names::InvalidSegment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteValidationInvalidPathType::InvalidSegment& boundedList = accessor.getInvalidSegment();
        const uci::type::RouteValidationInvalidPathType::InvalidSegment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RouteValidationInvalidSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RouteValidationInvalidPathType_Names::ValidLAR_Name) {
      LAR_MDT::deserialize(valueType.second, accessor.enableValidLAR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteValidationInvalidPathType_Names::OtherInvalidReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOtherInvalidReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RouteValidationInvalidPathType::serialize(const uci::type::RouteValidationInvalidPathType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RouteValidationInvalidPathType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RouteValidationInvalidPathType_Names::Extern_Type_Name);
  }
  PathID_Type::serialize(accessor.getPathID(), node, RouteValidationInvalidPathType_Names::PathID_Name);
  if (accessor.hasKinematicInvalidReason()) {
    RouteValidationErrorType::serialize(accessor.getKinematicInvalidReason(), node, RouteValidationInvalidPathType_Names::KinematicInvalidReason_Name);
  }
  {
    const uci::type::RouteValidationInvalidPathType::InvalidSegment& boundedList = accessor.getInvalidSegment();
    for (uci::type::RouteValidationInvalidPathType::InvalidSegment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RouteValidationInvalidSegmentType::serialize(boundedList.at(i), node, RouteValidationInvalidPathType_Names::InvalidSegment_Name);
    }
  }
  if (accessor.hasValidLAR()) {
    LAR_MDT::serialize(accessor.getValidLAR(), node, RouteValidationInvalidPathType_Names::ValidLAR_Name);
  }
  if (accessor.hasOtherInvalidReason()) {
    CannotComplyType::serialize(accessor.getOtherInvalidReason(), node, RouteValidationInvalidPathType_Names::OtherInvalidReason_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RouteValidationInvalidPathType>().release());
}

uci::type::RouteValidationInvalidPathType& RouteValidationInvalidPathType::create(const uci::type::RouteValidationInvalidPathType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RouteValidationInvalidPathType> newAccessor{boost::make_unique<asb_uci::type::RouteValidationInvalidPathType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RouteValidationInvalidPathType::destroy(uci::type::RouteValidationInvalidPathType& accessor) {
  delete dynamic_cast<asb_uci::type::RouteValidationInvalidPathType*>(&accessor);
}

} // namespace type

} // namespace uci

