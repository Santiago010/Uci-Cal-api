/** @file OrbitActivityPlanActivationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitActivityPlanActivationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivationOrbitSequenceType.h"
#include "asb_uci/type/OrbitActivityPlanID_Type.h"
#include "asb_uci/type/PlanActivationCommandEnum.h"
#include "asb_uci/type/PlannedActivityID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivationOrbitSequenceType.h"
#include "uci/type/OrbitActivityPlanActivationType.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/PlanActivationCommandEnum.h"
#include "uci/type/PlannedActivityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitActivityPlanActivationType::OrbitActivityPlanActivationType()
  : orbitActivityPlanID_Accessor{boost::make_unique<OrbitActivityPlanID_Type>()},
    commandType_Accessor{boost::make_unique<PlanActivationCommandEnum>()} {
}

OrbitActivityPlanActivationType::~OrbitActivityPlanActivationType() = default;

void OrbitActivityPlanActivationType::copy(const uci::type::OrbitActivityPlanActivationType& accessor) {
  copyImpl(accessor, false);
}

void OrbitActivityPlanActivationType::copyImpl(const uci::type::OrbitActivityPlanActivationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitActivityPlanActivationType&>(accessor);
    setOrbitActivityPlanID(*(accessorImpl.orbitActivityPlanID_Accessor));
    setCommandType(*(accessorImpl.commandType_Accessor));
    if (accessorImpl.activationActivityID_Accessor) {
      setActivationActivityID(*(accessorImpl.activationActivityID_Accessor));
    } else {
      activationActivityID_Accessor.reset();
    }
    if (accessorImpl.activationOrbitSequence_Accessor) {
      setActivationOrbitSequence(*(accessorImpl.activationOrbitSequence_Accessor));
    } else {
      activationOrbitSequence_Accessor.reset();
    }
  }
}

void OrbitActivityPlanActivationType::reset() noexcept {
  orbitActivityPlanID_Accessor->reset();
  commandType_Accessor->reset();
  activationActivityID_Accessor.reset();
  activationOrbitSequence_Accessor.reset();
}

const uci::type::OrbitActivityPlanID_Type& OrbitActivityPlanActivationType::getOrbitActivityPlanID() const {
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitActivityPlanID_Type& OrbitActivityPlanActivationType::getOrbitActivityPlanID() {
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::setOrbitActivityPlanID(const uci::type::OrbitActivityPlanID_Type& accessor) {
  if (&accessor != orbitActivityPlanID_Accessor.get()) {
    orbitActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanActivationCommandEnum& OrbitActivityPlanActivationType::getCommandType() const {
  return *commandType_Accessor;
}

uci::type::PlanActivationCommandEnum& OrbitActivityPlanActivationType::getCommandType() {
  return *commandType_Accessor;
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::setCommandType(const uci::type::PlanActivationCommandEnum& accessor) {
  if (&accessor != commandType_Accessor.get()) {
    commandType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::setCommandType(uci::type::PlanActivationCommandEnum::EnumerationItem value) {
  commandType_Accessor->setValue(value);
  return *this;
}


uci::type::PlannedActivityID_Type& OrbitActivityPlanActivationType::getActivationActivityID_() const {
  if (activationActivityID_Accessor) {
    return *activationActivityID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivationActivityID(): An attempt was made to get an optional field that was not enabled, call hasActivationActivityID() to determine if it is safe to call getActivationActivityID()");
}

const uci::type::PlannedActivityID_Type& OrbitActivityPlanActivationType::getActivationActivityID() const {
  return getActivationActivityID_();
}

uci::type::PlannedActivityID_Type& OrbitActivityPlanActivationType::getActivationActivityID() {
  return getActivationActivityID_();
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::setActivationActivityID(const uci::type::PlannedActivityID_Type& accessor) {
  enableActivationActivityID();
  if (&accessor != activationActivityID_Accessor.get()) {
    activationActivityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitActivityPlanActivationType::hasActivationActivityID() const noexcept {
  return static_cast<bool>(activationActivityID_Accessor);
}

uci::type::PlannedActivityID_Type& OrbitActivityPlanActivationType::enableActivationActivityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plannedActivityID_Type : type};
  if ((!activationActivityID_Accessor) || (activationActivityID_Accessor->getAccessorType() != requestedType)) {
    activationActivityID_Accessor = PlannedActivityID_Type::create(requestedType);
    if (!activationActivityID_Accessor) {
      throw uci::base::UCIException("Error in enableActivationActivityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activationActivityID_Accessor;
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::clearActivationActivityID() noexcept {
  activationActivityID_Accessor.reset();
  return *this;
}

uci::type::ActivationOrbitSequenceType& OrbitActivityPlanActivationType::getActivationOrbitSequence_() const {
  if (activationOrbitSequence_Accessor) {
    return *activationOrbitSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getActivationOrbitSequence(): An attempt was made to get an optional field that was not enabled, call hasActivationOrbitSequence() to determine if it is safe to call getActivationOrbitSequence()");
}

const uci::type::ActivationOrbitSequenceType& OrbitActivityPlanActivationType::getActivationOrbitSequence() const {
  return getActivationOrbitSequence_();
}

uci::type::ActivationOrbitSequenceType& OrbitActivityPlanActivationType::getActivationOrbitSequence() {
  return getActivationOrbitSequence_();
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::setActivationOrbitSequence(const uci::type::ActivationOrbitSequenceType& accessor) {
  enableActivationOrbitSequence();
  if (&accessor != activationOrbitSequence_Accessor.get()) {
    activationOrbitSequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitActivityPlanActivationType::hasActivationOrbitSequence() const noexcept {
  return static_cast<bool>(activationOrbitSequence_Accessor);
}

uci::type::ActivationOrbitSequenceType& OrbitActivityPlanActivationType::enableActivationOrbitSequence(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activationOrbitSequenceType : type};
  if ((!activationOrbitSequence_Accessor) || (activationOrbitSequence_Accessor->getAccessorType() != requestedType)) {
    activationOrbitSequence_Accessor = ActivationOrbitSequenceType::create(requestedType);
    if (!activationOrbitSequence_Accessor) {
      throw uci::base::UCIException("Error in enableActivationOrbitSequence(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activationOrbitSequence_Accessor;
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::clearActivationOrbitSequence() noexcept {
  activationOrbitSequence_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitActivityPlanActivationType> OrbitActivityPlanActivationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitActivityPlanActivationType : type};
  return (requestedType == uci::type::accessorType::orbitActivityPlanActivationType) ? boost::make_unique<OrbitActivityPlanActivationType>() : nullptr;
}

/**  */
namespace OrbitActivityPlanActivationType_Names {

constexpr const char* Extern_Type_Name{"OrbitActivityPlanActivationType"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* CommandType_Name{"CommandType"};
constexpr const char* ActivationActivityID_Name{"ActivationActivityID"};
constexpr const char* ActivationOrbitSequence_Name{"ActivationOrbitSequence"};

} // namespace OrbitActivityPlanActivationType_Names

void OrbitActivityPlanActivationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitActivityPlanActivationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitActivityPlanActivationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitActivityPlanActivationType_Names::OrbitActivityPlanID_Name) {
      OrbitActivityPlanID_Type::deserialize(valueType.second, accessor.getOrbitActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitActivityPlanActivationType_Names::CommandType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommandType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitActivityPlanActivationType_Names::ActivationActivityID_Name) {
      PlannedActivityID_Type::deserialize(valueType.second, accessor.enableActivationActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitActivityPlanActivationType_Names::ActivationOrbitSequence_Name) {
      ActivationOrbitSequenceType::deserialize(valueType.second, accessor.enableActivationOrbitSequence(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitActivityPlanActivationType::serialize(const uci::type::OrbitActivityPlanActivationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitActivityPlanActivationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitActivityPlanActivationType_Names::Extern_Type_Name);
  }
  OrbitActivityPlanID_Type::serialize(accessor.getOrbitActivityPlanID(), node, OrbitActivityPlanActivationType_Names::OrbitActivityPlanID_Name);
  PlanActivationCommandEnum::serialize(accessor.getCommandType(), node, OrbitActivityPlanActivationType_Names::CommandType_Name, false);
  if (accessor.hasActivationActivityID()) {
    PlannedActivityID_Type::serialize(accessor.getActivationActivityID(), node, OrbitActivityPlanActivationType_Names::ActivationActivityID_Name);
  }
  if (accessor.hasActivationOrbitSequence()) {
    ActivationOrbitSequenceType::serialize(accessor.getActivationOrbitSequence(), node, OrbitActivityPlanActivationType_Names::ActivationOrbitSequence_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitActivityPlanActivationType>().release());
}

uci::type::OrbitActivityPlanActivationType& OrbitActivityPlanActivationType::create(const uci::type::OrbitActivityPlanActivationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitActivityPlanActivationType> newAccessor{boost::make_unique<asb_uci::type::OrbitActivityPlanActivationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitActivityPlanActivationType::destroy(uci::type::OrbitActivityPlanActivationType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitActivityPlanActivationType*>(&accessor);
}

} // namespace type

} // namespace uci

