/** @file SMTI_CollectionConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SMTI_CollectionConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CollectionConstraintsType.h"
#include "../../../include/asb_uci/type/EmconConstraintType.h"
#include "../../../include/asb_uci/type/FalseAlarmType.h"
#include "../../../include/asb_uci/type/PositionLocationUncertaintyType.h"
#include "../../../include/asb_uci/type/SMTI_CollectionConstraintsQualityType.h"
#include "../../../include/asb_uci/type/SpeedRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmconConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FalseAlarmType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionLocationUncertaintyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SMTI_CollectionConstraintsQualityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SMTI_CollectionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SMTI_CollectionConstraintsType::SMTI_CollectionConstraintsType() = default;

SMTI_CollectionConstraintsType::~SMTI_CollectionConstraintsType() = default;

void SMTI_CollectionConstraintsType::copy(const uci::type::SMTI_CollectionConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void SMTI_CollectionConstraintsType::copyImpl(const uci::type::SMTI_CollectionConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CollectionConstraintsType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SMTI_CollectionConstraintsType&>(accessor);
    if (accessorImpl.quality_Accessor) {
      setQuality(*(accessorImpl.quality_Accessor));
    } else {
      quality_Accessor.reset();
    }
    if (accessorImpl.targetSpeed_Accessor) {
      setTargetSpeed(*(accessorImpl.targetSpeed_Accessor));
    } else {
      targetSpeed_Accessor.reset();
    }
    if (accessorImpl.hasTargetRCS()) {
      setTargetRCS(accessorImpl.getTargetRCS());
    } else {
      clearTargetRCS();
    }
    if (accessorImpl.falseAlarm_Accessor) {
      setFalseAlarm(*(accessorImpl.falseAlarm_Accessor));
    } else {
      falseAlarm_Accessor.reset();
    }
    if (accessorImpl.hasProbabilityOfDetection()) {
      setProbabilityOfDetection(accessorImpl.getProbabilityOfDetection());
    } else {
      clearProbabilityOfDetection();
    }
    if (accessorImpl.emcon_Accessor) {
      setEmcon(*(accessorImpl.emcon_Accessor));
    } else {
      emcon_Accessor.reset();
    }
    if (accessorImpl.ownshipLocationConstraint_Accessor) {
      setOwnshipLocationConstraint(*(accessorImpl.ownshipLocationConstraint_Accessor));
    } else {
      ownshipLocationConstraint_Accessor.reset();
    }
  }
}

void SMTI_CollectionConstraintsType::reset() noexcept {
  CollectionConstraintsType::reset();
  quality_Accessor.reset();
  targetSpeed_Accessor.reset();
  clearTargetRCS();
  falseAlarm_Accessor.reset();
  clearProbabilityOfDetection();
  emcon_Accessor.reset();
  ownshipLocationConstraint_Accessor.reset();
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsType::getQuality_() const {
  if (quality_Accessor) {
    return *quality_Accessor;
  }
  throw uci::base::UCIException("Error in getQuality(): An attempt was made to get an optional field that was not enabled, call hasQuality() to determine if it is safe to call getQuality()");
}

const uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsType::getQuality() const {
  return getQuality_();
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsType::getQuality() {
  return getQuality_();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::setQuality(const uci::type::SMTI_CollectionConstraintsQualityType& accessor) {
  enableQuality();
  if (&accessor != quality_Accessor.get()) {
    quality_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_CollectionConstraintsType::hasQuality() const noexcept {
  return static_cast<bool>(quality_Accessor);
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsType::enableQuality(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_CollectionConstraintsQualityType : type};
  if ((!quality_Accessor) || (quality_Accessor->getAccessorType() != requestedType)) {
    quality_Accessor = SMTI_CollectionConstraintsQualityType::create(requestedType);
    if (!quality_Accessor) {
      throw uci::base::UCIException("Error in enableQuality(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *quality_Accessor;
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::clearQuality() noexcept {
  quality_Accessor.reset();
  return *this;
}

uci::type::SpeedRangeType& SMTI_CollectionConstraintsType::getTargetSpeed_() const {
  if (targetSpeed_Accessor) {
    return *targetSpeed_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetSpeed(): An attempt was made to get an optional field that was not enabled, call hasTargetSpeed() to determine if it is safe to call getTargetSpeed()");
}

const uci::type::SpeedRangeType& SMTI_CollectionConstraintsType::getTargetSpeed() const {
  return getTargetSpeed_();
}

uci::type::SpeedRangeType& SMTI_CollectionConstraintsType::getTargetSpeed() {
  return getTargetSpeed_();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::setTargetSpeed(const uci::type::SpeedRangeType& accessor) {
  enableTargetSpeed();
  if (&accessor != targetSpeed_Accessor.get()) {
    targetSpeed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_CollectionConstraintsType::hasTargetSpeed() const noexcept {
  return static_cast<bool>(targetSpeed_Accessor);
}

uci::type::SpeedRangeType& SMTI_CollectionConstraintsType::enableTargetSpeed(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::speedRangeType : type};
  if ((!targetSpeed_Accessor) || (targetSpeed_Accessor->getAccessorType() != requestedType)) {
    targetSpeed_Accessor = SpeedRangeType::create(requestedType);
    if (!targetSpeed_Accessor) {
      throw uci::base::UCIException("Error in enableTargetSpeed(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetSpeed_Accessor;
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::clearTargetSpeed() noexcept {
  targetSpeed_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SMTI_CollectionConstraintsType::getTargetRCS() const {
  if (targetRCS_Accessor) {
    return *targetRCS_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetRCS(): An attempt was made to get an optional field that was not enabled, call hasTargetRCS() to determine if it is safe to call getTargetRCS()");
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::setTargetRCS(uci::type::DecibelTypeValue value) {
  targetRCS_Accessor = value;
  return *this;
}

bool SMTI_CollectionConstraintsType::hasTargetRCS() const noexcept {
  return targetRCS_Accessor.has_value();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::clearTargetRCS() noexcept {
  targetRCS_Accessor.reset();
  return *this;
}

uci::type::FalseAlarmType& SMTI_CollectionConstraintsType::getFalseAlarm_() const {
  if (falseAlarm_Accessor) {
    return *falseAlarm_Accessor;
  }
  throw uci::base::UCIException("Error in getFalseAlarm(): An attempt was made to get an optional field that was not enabled, call hasFalseAlarm() to determine if it is safe to call getFalseAlarm()");
}

const uci::type::FalseAlarmType& SMTI_CollectionConstraintsType::getFalseAlarm() const {
  return getFalseAlarm_();
}

uci::type::FalseAlarmType& SMTI_CollectionConstraintsType::getFalseAlarm() {
  return getFalseAlarm_();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::setFalseAlarm(const uci::type::FalseAlarmType& accessor) {
  enableFalseAlarm();
  if (&accessor != falseAlarm_Accessor.get()) {
    falseAlarm_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_CollectionConstraintsType::hasFalseAlarm() const noexcept {
  return static_cast<bool>(falseAlarm_Accessor);
}

uci::type::FalseAlarmType& SMTI_CollectionConstraintsType::enableFalseAlarm(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::falseAlarmType : type};
  if ((!falseAlarm_Accessor) || (falseAlarm_Accessor->getAccessorType() != requestedType)) {
    falseAlarm_Accessor = FalseAlarmType::create(requestedType);
    if (!falseAlarm_Accessor) {
      throw uci::base::UCIException("Error in enableFalseAlarm(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *falseAlarm_Accessor;
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::clearFalseAlarm() noexcept {
  falseAlarm_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue SMTI_CollectionConstraintsType::getProbabilityOfDetection() const {
  if (probabilityOfDetection_Accessor) {
    return *probabilityOfDetection_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfDetection(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfDetection() to determine if it is safe to call getProbabilityOfDetection()");
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::setProbabilityOfDetection(uci::type::PercentTypeValue value) {
  probabilityOfDetection_Accessor = value;
  return *this;
}

bool SMTI_CollectionConstraintsType::hasProbabilityOfDetection() const noexcept {
  return probabilityOfDetection_Accessor.has_value();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::clearProbabilityOfDetection() noexcept {
  probabilityOfDetection_Accessor.reset();
  return *this;
}

uci::type::EmconConstraintType& SMTI_CollectionConstraintsType::getEmcon_() const {
  if (emcon_Accessor) {
    return *emcon_Accessor;
  }
  throw uci::base::UCIException("Error in getEmcon(): An attempt was made to get an optional field that was not enabled, call hasEmcon() to determine if it is safe to call getEmcon()");
}

const uci::type::EmconConstraintType& SMTI_CollectionConstraintsType::getEmcon() const {
  return getEmcon_();
}

uci::type::EmconConstraintType& SMTI_CollectionConstraintsType::getEmcon() {
  return getEmcon_();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::setEmcon(const uci::type::EmconConstraintType& accessor) {
  enableEmcon();
  if (&accessor != emcon_Accessor.get()) {
    emcon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_CollectionConstraintsType::hasEmcon() const noexcept {
  return static_cast<bool>(emcon_Accessor);
}

uci::type::EmconConstraintType& SMTI_CollectionConstraintsType::enableEmcon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconConstraintType : type};
  if ((!emcon_Accessor) || (emcon_Accessor->getAccessorType() != requestedType)) {
    emcon_Accessor = EmconConstraintType::create(requestedType);
    if (!emcon_Accessor) {
      throw uci::base::UCIException("Error in enableEmcon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emcon_Accessor;
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::clearEmcon() noexcept {
  emcon_Accessor.reset();
  return *this;
}

uci::type::PositionLocationUncertaintyType& SMTI_CollectionConstraintsType::getOwnshipLocationConstraint_() const {
  if (ownshipLocationConstraint_Accessor) {
    return *ownshipLocationConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getOwnshipLocationConstraint(): An attempt was made to get an optional field that was not enabled, call hasOwnshipLocationConstraint() to determine if it is safe to call getOwnshipLocationConstraint()");
}

const uci::type::PositionLocationUncertaintyType& SMTI_CollectionConstraintsType::getOwnshipLocationConstraint() const {
  return getOwnshipLocationConstraint_();
}

uci::type::PositionLocationUncertaintyType& SMTI_CollectionConstraintsType::getOwnshipLocationConstraint() {
  return getOwnshipLocationConstraint_();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::setOwnshipLocationConstraint(const uci::type::PositionLocationUncertaintyType& accessor) {
  enableOwnshipLocationConstraint();
  if (&accessor != ownshipLocationConstraint_Accessor.get()) {
    ownshipLocationConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_CollectionConstraintsType::hasOwnshipLocationConstraint() const noexcept {
  return static_cast<bool>(ownshipLocationConstraint_Accessor);
}

uci::type::PositionLocationUncertaintyType& SMTI_CollectionConstraintsType::enableOwnshipLocationConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionLocationUncertaintyType : type};
  if ((!ownshipLocationConstraint_Accessor) || (ownshipLocationConstraint_Accessor->getAccessorType() != requestedType)) {
    ownshipLocationConstraint_Accessor = PositionLocationUncertaintyType::create(requestedType);
    if (!ownshipLocationConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableOwnshipLocationConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ownshipLocationConstraint_Accessor;
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::clearOwnshipLocationConstraint() noexcept {
  ownshipLocationConstraint_Accessor.reset();
  return *this;
}

std::unique_ptr<SMTI_CollectionConstraintsType> SMTI_CollectionConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_CollectionConstraintsType : type};
  return (requestedType == uci::type::accessorType::sMTI_CollectionConstraintsType) ? boost::make_unique<SMTI_CollectionConstraintsType>() : nullptr;
}

/**  */
namespace SMTI_CollectionConstraintsType_Names {

constexpr const char* Extern_Type_Name{"SMTI_CollectionConstraintsType"};
constexpr const char* Quality_Name{"Quality"};
constexpr const char* TargetSpeed_Name{"TargetSpeed"};
constexpr const char* TargetRCS_Name{"TargetRCS"};
constexpr const char* FalseAlarm_Name{"FalseAlarm"};
constexpr const char* ProbabilityOfDetection_Name{"ProbabilityOfDetection"};
constexpr const char* Emcon_Name{"Emcon"};
constexpr const char* OwnshipLocationConstraint_Name{"OwnshipLocationConstraint"};

} // namespace SMTI_CollectionConstraintsType_Names

void SMTI_CollectionConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_CollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SMTI_CollectionConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsType_Names::Quality_Name) {
      SMTI_CollectionConstraintsQualityType::deserialize(valueType.second, accessor.enableQuality(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsType_Names::TargetSpeed_Name) {
      SpeedRangeType::deserialize(valueType.second, accessor.enableTargetSpeed(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsType_Names::TargetRCS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetRCS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsType_Names::FalseAlarm_Name) {
      FalseAlarmType::deserialize(valueType.second, accessor.enableFalseAlarm(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsType_Names::ProbabilityOfDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfDetection(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsType_Names::Emcon_Name) {
      EmconConstraintType::deserialize(valueType.second, accessor.enableEmcon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsType_Names::OwnshipLocationConstraint_Name) {
      PositionLocationUncertaintyType::deserialize(valueType.second, accessor.enableOwnshipLocationConstraint(), nodeName, nsPrefix);
    }
  }
  CollectionConstraintsType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SMTI_CollectionConstraintsType::serialize(const uci::type::SMTI_CollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SMTI_CollectionConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SMTI_CollectionConstraintsType_Names::Extern_Type_Name);
  }
  CollectionConstraintsType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasQuality()) {
    SMTI_CollectionConstraintsQualityType::serialize(accessor.getQuality(), node, SMTI_CollectionConstraintsType_Names::Quality_Name);
  }
  if (accessor.hasTargetSpeed()) {
    SpeedRangeType::serialize(accessor.getTargetSpeed(), node, SMTI_CollectionConstraintsType_Names::TargetSpeed_Name);
  }
  if (accessor.hasTargetRCS()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTargetRCS(), node, SMTI_CollectionConstraintsType_Names::TargetRCS_Name);
  }
  if (accessor.hasFalseAlarm()) {
    FalseAlarmType::serialize(accessor.getFalseAlarm(), node, SMTI_CollectionConstraintsType_Names::FalseAlarm_Name);
  }
  if (accessor.hasProbabilityOfDetection()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfDetection(), node, SMTI_CollectionConstraintsType_Names::ProbabilityOfDetection_Name);
  }
  if (accessor.hasEmcon()) {
    EmconConstraintType::serialize(accessor.getEmcon(), node, SMTI_CollectionConstraintsType_Names::Emcon_Name);
  }
  if (accessor.hasOwnshipLocationConstraint()) {
    PositionLocationUncertaintyType::serialize(accessor.getOwnshipLocationConstraint(), node, SMTI_CollectionConstraintsType_Names::OwnshipLocationConstraint_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SMTI_CollectionConstraintsType>().release());
}

uci::type::SMTI_CollectionConstraintsType& SMTI_CollectionConstraintsType::create(const uci::type::SMTI_CollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SMTI_CollectionConstraintsType> newAccessor{boost::make_unique<asb_uci::type::SMTI_CollectionConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SMTI_CollectionConstraintsType::destroy(uci::type::SMTI_CollectionConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::SMTI_CollectionConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

