/** @file OrbitalDebrisType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalDebrisType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitalDebrisID_Type.h"
#include "asb_uci/type/OrbitalKinematicsTLE_SV_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/MassType.h"
#include "uci/type/OrbitalDebrisID_Type.h"
#include "uci/type/OrbitalDebrisType.h"
#include "uci/type/OrbitalKinematicsTLE_SV_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalDebrisType::OrbitalDebrisType()
  : orbitalDebrisID_Accessor{boost::make_unique<OrbitalDebrisID_Type>()},
    kinematics_Accessor{boost::make_unique<OrbitalKinematicsTLE_SV_Type>()} {
}

OrbitalDebrisType::~OrbitalDebrisType() = default;

void OrbitalDebrisType::copy(const uci::type::OrbitalDebrisType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalDebrisType::copyImpl(const uci::type::OrbitalDebrisType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalDebrisType&>(accessor);
    setOrbitalDebrisID(*(accessorImpl.orbitalDebrisID_Accessor));
    setKinematics(*(accessorImpl.kinematics_Accessor));
    if (accessorImpl.hasMass()) {
      setMass(accessorImpl.getMass());
    } else {
      clearMass();
    }
    if (accessorImpl.hasSize()) {
      setSize(accessorImpl.getSize());
    } else {
      clearSize();
    }
  }
}

void OrbitalDebrisType::reset() noexcept {
  orbitalDebrisID_Accessor->reset();
  kinematics_Accessor->reset();
  clearMass();
  clearSize();
}

const uci::type::OrbitalDebrisID_Type& OrbitalDebrisType::getOrbitalDebrisID() const {
  return *orbitalDebrisID_Accessor;
}

uci::type::OrbitalDebrisID_Type& OrbitalDebrisType::getOrbitalDebrisID() {
  return *orbitalDebrisID_Accessor;
}

uci::type::OrbitalDebrisType& OrbitalDebrisType::setOrbitalDebrisID(const uci::type::OrbitalDebrisID_Type& accessor) {
  if (&accessor != orbitalDebrisID_Accessor.get()) {
    orbitalDebrisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalKinematicsTLE_SV_Type& OrbitalDebrisType::getKinematics() const {
  return *kinematics_Accessor;
}

uci::type::OrbitalKinematicsTLE_SV_Type& OrbitalDebrisType::getKinematics() {
  return *kinematics_Accessor;
}

uci::type::OrbitalDebrisType& OrbitalDebrisType::setKinematics(const uci::type::OrbitalKinematicsTLE_SV_Type& accessor) {
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MassTypeValue OrbitalDebrisType::getMass() const {
  if (mass_Accessor) {
    return *mass_Accessor;
  }
  throw uci::base::UCIException("Error in getMass(): An attempt was made to get an optional field that was not enabled, call hasMass() to determine if it is safe to call getMass()");
}

uci::type::OrbitalDebrisType& OrbitalDebrisType::setMass(uci::type::MassTypeValue value) {
  mass_Accessor = value;
  return *this;
}

bool OrbitalDebrisType::hasMass() const noexcept {
  return mass_Accessor.has_value();
}

uci::type::OrbitalDebrisType& OrbitalDebrisType::clearMass() noexcept {
  mass_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue OrbitalDebrisType::getSize() const {
  if (size_Accessor) {
    return *size_Accessor;
  }
  throw uci::base::UCIException("Error in getSize(): An attempt was made to get an optional field that was not enabled, call hasSize() to determine if it is safe to call getSize()");
}

uci::type::OrbitalDebrisType& OrbitalDebrisType::setSize(uci::type::DistanceTypeValue value) {
  size_Accessor = value;
  return *this;
}

bool OrbitalDebrisType::hasSize() const noexcept {
  return size_Accessor.has_value();
}

uci::type::OrbitalDebrisType& OrbitalDebrisType::clearSize() noexcept {
  size_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalDebrisType> OrbitalDebrisType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalDebrisType : type};
  return (requestedType == uci::type::accessorType::orbitalDebrisType) ? boost::make_unique<OrbitalDebrisType>() : nullptr;
}

/**  */
namespace OrbitalDebrisType_Names {

constexpr const char* Extern_Type_Name{"OrbitalDebrisType"};
constexpr const char* OrbitalDebrisID_Name{"OrbitalDebrisID"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* Size_Name{"Size"};

} // namespace OrbitalDebrisType_Names

void OrbitalDebrisType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalDebrisType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalDebrisType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalDebrisType_Names::OrbitalDebrisID_Name) {
      OrbitalDebrisID_Type::deserialize(valueType.second, accessor.getOrbitalDebrisID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisType_Names::Kinematics_Name) {
      OrbitalKinematicsTLE_SV_Type::deserialize(valueType.second, accessor.getKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisType_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalDebrisType_Names::Size_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSize(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitalDebrisType::serialize(const uci::type::OrbitalDebrisType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalDebrisType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalDebrisType_Names::Extern_Type_Name);
  }
  OrbitalDebrisID_Type::serialize(accessor.getOrbitalDebrisID(), node, OrbitalDebrisType_Names::OrbitalDebrisID_Name);
  OrbitalKinematicsTLE_SV_Type::serialize(accessor.getKinematics(), node, OrbitalDebrisType_Names::Kinematics_Name);
  if (accessor.hasMass()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, OrbitalDebrisType_Names::Mass_Name);
  }
  if (accessor.hasSize()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSize(), node, OrbitalDebrisType_Names::Size_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalDebrisType& OrbitalDebrisType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalDebrisType>().release());
}

uci::type::OrbitalDebrisType& OrbitalDebrisType::create(const uci::type::OrbitalDebrisType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalDebrisType> newAccessor{boost::make_unique<asb_uci::type::OrbitalDebrisType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalDebrisType::destroy(uci::type::OrbitalDebrisType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalDebrisType*>(&accessor);
}

} // namespace type

} // namespace uci

