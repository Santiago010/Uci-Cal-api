/** @file WeatherDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WeatherDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ProductMetadataID_Type.h"
#include "../../../include/asb_uci/type/WeatherReportDataType.h"
#include "../../../include/asb_uci/type/WeatherWarningDataType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherReportDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherWarningDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherDataType::WeatherDataType() = default;

WeatherDataType::~WeatherDataType() = default;

void WeatherDataType::copy(const uci::type::WeatherDataType& accessor) {
  copyImpl(accessor, false);
}

void WeatherDataType::copyImpl(const uci::type::WeatherDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeatherDataType&>(accessor);
    if (accessorImpl.weatherReport_Accessor) {
      setWeatherReport(*(accessorImpl.weatherReport_Accessor));
    } else {
      weatherReport_Accessor.reset();
    }
    if (accessorImpl.weatherWarning_Accessor) {
      setWeatherWarning(*(accessorImpl.weatherWarning_Accessor));
    } else {
      weatherWarning_Accessor.reset();
    }
    if (accessorImpl.weatherProductID_Accessor) {
      setWeatherProductID(*(accessorImpl.weatherProductID_Accessor));
    } else {
      weatherProductID_Accessor.reset();
    }
  }
}

void WeatherDataType::reset() noexcept {
  weatherReport_Accessor.reset();
  weatherWarning_Accessor.reset();
  weatherProductID_Accessor.reset();
}

uci::type::WeatherDataType::WeatherDataTypeChoice WeatherDataType::getWeatherDataTypeChoiceOrdinal() const noexcept {
  if (weatherReport_Accessor) {
    return WEATHERDATATYPE_CHOICE_WEATHERREPORT;
  }
  if (weatherWarning_Accessor) {
    return WEATHERDATATYPE_CHOICE_WEATHERWARNING;
  }
  if (weatherProductID_Accessor) {
    return WEATHERDATATYPE_CHOICE_WEATHERPRODUCTID;
  }
  return WEATHERDATATYPE_CHOICE_NONE;
}

uci::type::WeatherDataType& WeatherDataType::setWeatherDataTypeChoiceOrdinal(uci::type::WeatherDataType::WeatherDataTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case WEATHERDATATYPE_CHOICE_WEATHERREPORT:
      chooseWeatherReport("setWeatherDataTypeChoiceOrdinal", type);
      break;
    case WEATHERDATATYPE_CHOICE_WEATHERWARNING:
      chooseWeatherWarning("setWeatherDataTypeChoiceOrdinal", type);
      break;
    case WEATHERDATATYPE_CHOICE_WEATHERPRODUCTID:
      chooseWeatherProductID("setWeatherDataTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setWeatherDataTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::WeatherReportDataType& WeatherDataType::getWeatherReport_() const {
  if (weatherReport_Accessor) {
    return *weatherReport_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherReport(): Unable to get WeatherReport, field not selected");
}

const uci::type::WeatherReportDataType& WeatherDataType::getWeatherReport() const {
  return getWeatherReport_();
}

uci::type::WeatherReportDataType& WeatherDataType::getWeatherReport() {
  return getWeatherReport_();
}

uci::type::WeatherDataType& WeatherDataType::setWeatherReport(const uci::type::WeatherReportDataType& accessor) {
  chooseWeatherReport();
  if (&accessor != weatherReport_Accessor.get()) {
    weatherReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherDataType::isWeatherReport() const noexcept {
  return static_cast<bool>(weatherReport_Accessor);
}

uci::type::WeatherReportDataType& WeatherDataType::chooseWeatherReport(const std::string& method, uci::base::accessorType::AccessorType type) {
  weatherWarning_Accessor.reset();
  weatherProductID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherReportDataType : type};
  if ((!weatherReport_Accessor) || (weatherReport_Accessor->getAccessorType() != requestedType)) {
    weatherReport_Accessor = WeatherReportDataType::create(type);
    if (!weatherReport_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherReport_Accessor;
}

uci::type::WeatherReportDataType& WeatherDataType::chooseWeatherReport(uci::base::accessorType::AccessorType type) {
  return chooseWeatherReport("chooseWeatherReport", type);
}

uci::type::WeatherWarningDataType& WeatherDataType::getWeatherWarning_() const {
  if (weatherWarning_Accessor) {
    return *weatherWarning_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherWarning(): Unable to get WeatherWarning, field not selected");
}

const uci::type::WeatherWarningDataType& WeatherDataType::getWeatherWarning() const {
  return getWeatherWarning_();
}

uci::type::WeatherWarningDataType& WeatherDataType::getWeatherWarning() {
  return getWeatherWarning_();
}

uci::type::WeatherDataType& WeatherDataType::setWeatherWarning(const uci::type::WeatherWarningDataType& accessor) {
  chooseWeatherWarning();
  if (&accessor != weatherWarning_Accessor.get()) {
    weatherWarning_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherDataType::isWeatherWarning() const noexcept {
  return static_cast<bool>(weatherWarning_Accessor);
}

uci::type::WeatherWarningDataType& WeatherDataType::chooseWeatherWarning(const std::string& method, uci::base::accessorType::AccessorType type) {
  weatherReport_Accessor.reset();
  weatherProductID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherWarningDataType : type};
  if ((!weatherWarning_Accessor) || (weatherWarning_Accessor->getAccessorType() != requestedType)) {
    weatherWarning_Accessor = WeatherWarningDataType::create(type);
    if (!weatherWarning_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherWarning_Accessor;
}

uci::type::WeatherWarningDataType& WeatherDataType::chooseWeatherWarning(uci::base::accessorType::AccessorType type) {
  return chooseWeatherWarning("chooseWeatherWarning", type);
}

uci::type::ProductMetadataID_Type& WeatherDataType::getWeatherProductID_() const {
  if (weatherProductID_Accessor) {
    return *weatherProductID_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherProductID(): Unable to get WeatherProductID, field not selected");
}

const uci::type::ProductMetadataID_Type& WeatherDataType::getWeatherProductID() const {
  return getWeatherProductID_();
}

uci::type::ProductMetadataID_Type& WeatherDataType::getWeatherProductID() {
  return getWeatherProductID_();
}

uci::type::WeatherDataType& WeatherDataType::setWeatherProductID(const uci::type::ProductMetadataID_Type& accessor) {
  chooseWeatherProductID();
  if (&accessor != weatherProductID_Accessor.get()) {
    weatherProductID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherDataType::isWeatherProductID() const noexcept {
  return static_cast<bool>(weatherProductID_Accessor);
}

uci::type::ProductMetadataID_Type& WeatherDataType::chooseWeatherProductID(const std::string& method, uci::base::accessorType::AccessorType type) {
  weatherReport_Accessor.reset();
  weatherWarning_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productMetadataID_Type : type};
  if ((!weatherProductID_Accessor) || (weatherProductID_Accessor->getAccessorType() != requestedType)) {
    weatherProductID_Accessor = ProductMetadataID_Type::create(type);
    if (!weatherProductID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherProductID_Accessor;
}

uci::type::ProductMetadataID_Type& WeatherDataType::chooseWeatherProductID(uci::base::accessorType::AccessorType type) {
  return chooseWeatherProductID("chooseWeatherProductID", type);
}

std::unique_ptr<WeatherDataType> WeatherDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherDataType : type};
  return (requestedType == uci::type::accessorType::weatherDataType) ? boost::make_unique<WeatherDataType>() : nullptr;
}

/**  */
namespace WeatherDataType_Names {

constexpr const char* Extern_Type_Name{"WeatherDataType"};
constexpr const char* WeatherReport_Name{"WeatherReport"};
constexpr const char* WeatherWarning_Name{"WeatherWarning"};
constexpr const char* WeatherProductID_Name{"WeatherProductID"};

} // namespace WeatherDataType_Names

void WeatherDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherDataType_Names::WeatherReport_Name) {
      WeatherReportDataType::deserialize(valueType.second, accessor.chooseWeatherReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDataType_Names::WeatherWarning_Name) {
      WeatherWarningDataType::deserialize(valueType.second, accessor.chooseWeatherWarning(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDataType_Names::WeatherProductID_Name) {
      ProductMetadataID_Type::deserialize(valueType.second, accessor.chooseWeatherProductID(), nodeName, nsPrefix);
    }
  }
}

std::string WeatherDataType::serialize(const uci::type::WeatherDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherDataType_Names::Extern_Type_Name);
  }
  if (accessor.isWeatherReport()) {
    WeatherReportDataType::serialize(accessor.getWeatherReport(), node, WeatherDataType_Names::WeatherReport_Name);
  } else if (accessor.isWeatherWarning()) {
    WeatherWarningDataType::serialize(accessor.getWeatherWarning(), node, WeatherDataType_Names::WeatherWarning_Name);
  } else if (accessor.isWeatherProductID()) {
    ProductMetadataID_Type::serialize(accessor.getWeatherProductID(), node, WeatherDataType_Names::WeatherProductID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherDataType& WeatherDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherDataType>().release());
}

uci::type::WeatherDataType& WeatherDataType::create(const uci::type::WeatherDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherDataType> newAccessor{boost::make_unique<asb_uci::type::WeatherDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherDataType::destroy(uci::type::WeatherDataType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherDataType*>(&accessor);
}

} // namespace type

} // namespace uci

