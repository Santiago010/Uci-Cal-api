/** @file RF_BandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RF_BandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/RFD_GainSettingType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RFD_GainSettingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_BandType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_BandType::RF_BandType()
  : bandwidth_Accessor{boost::make_unique<FrequencyRangeType>()},
    rFD_GainSettings_Accessor{boost::make_unique<RFD_GainSettingType>()} {
}

RF_BandType::~RF_BandType() = default;

void RF_BandType::copy(const uci::type::RF_BandType& accessor) {
  copyImpl(accessor, false);
}

void RF_BandType::copyImpl(const uci::type::RF_BandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_BandType&>(accessor);
    setBandIdentifier(accessorImpl.bandIdentifier_Accessor);
    setBandwidth(*(accessorImpl.bandwidth_Accessor));
    setRFD_GainSettings(*(accessorImpl.rFD_GainSettings_Accessor));
  }
}

void RF_BandType::reset() noexcept {
  bandIdentifier_Accessor = 0;
  bandwidth_Accessor->reset();
  rFD_GainSettings_Accessor->reset();
}

xs::UnsignedInt RF_BandType::getBandIdentifier() const {
  return bandIdentifier_Accessor;
}

uci::type::RF_BandType& RF_BandType::setBandIdentifier(xs::UnsignedInt value) {
  bandIdentifier_Accessor = value;
  return *this;
}


const uci::type::FrequencyRangeType& RF_BandType::getBandwidth() const {
  return *bandwidth_Accessor;
}

uci::type::FrequencyRangeType& RF_BandType::getBandwidth() {
  return *bandwidth_Accessor;
}

uci::type::RF_BandType& RF_BandType::setBandwidth(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != bandwidth_Accessor.get()) {
    bandwidth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RFD_GainSettingType& RF_BandType::getRFD_GainSettings() const {
  return *rFD_GainSettings_Accessor;
}

uci::type::RFD_GainSettingType& RF_BandType::getRFD_GainSettings() {
  return *rFD_GainSettings_Accessor;
}

uci::type::RF_BandType& RF_BandType::setRFD_GainSettings(const uci::type::RFD_GainSettingType& accessor) {
  if (&accessor != rFD_GainSettings_Accessor.get()) {
    rFD_GainSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RF_BandType> RF_BandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_BandType : type};
  return (requestedType == uci::type::accessorType::rF_BandType) ? boost::make_unique<RF_BandType>() : nullptr;
}

/**  */
namespace RF_BandType_Names {

constexpr const char* Extern_Type_Name{"RF_BandType"};
constexpr const char* BandIdentifier_Name{"BandIdentifier"};
constexpr const char* Bandwidth_Name{"Bandwidth"};
constexpr const char* RFD_GainSettings_Name{"RFD_GainSettings"};

} // namespace RF_BandType_Names

void RF_BandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_BandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_BandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_BandType_Names::BandIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBandIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RF_BandType_Names::Bandwidth_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getBandwidth(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_BandType_Names::RFD_GainSettings_Name) {
      RFD_GainSettingType::deserialize(valueType.second, accessor.getRFD_GainSettings(), nodeName, nsPrefix);
    }
  }
}

std::string RF_BandType::serialize(const uci::type::RF_BandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_BandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_BandType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBandIdentifier(), node, RF_BandType_Names::BandIdentifier_Name);
  FrequencyRangeType::serialize(accessor.getBandwidth(), node, RF_BandType_Names::Bandwidth_Name);
  RFD_GainSettingType::serialize(accessor.getRFD_GainSettings(), node, RF_BandType_Names::RFD_GainSettings_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_BandType& RF_BandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_BandType>().release());
}

uci::type::RF_BandType& RF_BandType::create(const uci::type::RF_BandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_BandType> newAccessor{boost::make_unique<asb_uci::type::RF_BandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_BandType::destroy(uci::type::RF_BandType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_BandType*>(&accessor);
}

} // namespace type

} // namespace uci

