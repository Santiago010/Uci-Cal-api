/** @file PlatformStatusSAM_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlatformStatusSAM_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommunicationsImpairmentEnum.h"
#include "../../../include/asb_uci/type/OperationalImpairmentEnum.h"
#include "../../../include/asb_uci/type/RadiationModeEnum.h"
#include "../../../include/asb_uci/type/SAM_ModeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommunicationsImpairmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperationalImpairmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlatformStatusSAM_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadiationModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAM_ModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlatformStatusSAM_Type::PlatformStatusSAM_Type() = default;

PlatformStatusSAM_Type::~PlatformStatusSAM_Type() = default;

void PlatformStatusSAM_Type::copy(const uci::type::PlatformStatusSAM_Type& accessor) {
  copyImpl(accessor, false);
}

void PlatformStatusSAM_Type::copyImpl(const uci::type::PlatformStatusSAM_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlatformStatusSAM_Type&>(accessor);
    if (accessorImpl.hasHotInventory()) {
      setHotInventory(accessorImpl.getHotInventory());
    } else {
      clearHotInventory();
    }
    if (accessorImpl.hasColdInventory()) {
      setColdInventory(accessorImpl.getColdInventory());
    } else {
      clearColdInventory();
    }
    if (accessorImpl.sAM_Mode_Accessor) {
      setSAM_Mode(*(accessorImpl.sAM_Mode_Accessor));
    } else {
      sAM_Mode_Accessor.reset();
    }
    if (accessorImpl.operationalImpairment_Accessor) {
      setOperationalImpairment(*(accessorImpl.operationalImpairment_Accessor));
    } else {
      operationalImpairment_Accessor.reset();
    }
    if (accessorImpl.communicationsImpairment_Accessor) {
      setCommunicationsImpairment(*(accessorImpl.communicationsImpairment_Accessor));
    } else {
      communicationsImpairment_Accessor.reset();
    }
    if (accessorImpl.hasControlPositions()) {
      setControlPositions(accessorImpl.getControlPositions());
    } else {
      clearControlPositions();
    }
    if (accessorImpl.radiationMode_Accessor) {
      setRadiationMode(*(accessorImpl.radiationMode_Accessor));
    } else {
      radiationMode_Accessor.reset();
    }
  }
}

void PlatformStatusSAM_Type::reset() noexcept {
  clearHotInventory();
  clearColdInventory();
  sAM_Mode_Accessor.reset();
  operationalImpairment_Accessor.reset();
  communicationsImpairment_Accessor.reset();
  clearControlPositions();
  radiationMode_Accessor.reset();
}

xs::UnsignedInt PlatformStatusSAM_Type::getHotInventory() const {
  if (hotInventory_Accessor) {
    return *hotInventory_Accessor;
  }
  throw uci::base::UCIException("Error in getHotInventory(): An attempt was made to get an optional field that was not enabled, call hasHotInventory() to determine if it is safe to call getHotInventory()");
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setHotInventory(xs::UnsignedInt value) {
  hotInventory_Accessor = value;
  return *this;
}

bool PlatformStatusSAM_Type::hasHotInventory() const noexcept {
  return hotInventory_Accessor.has_value();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::clearHotInventory() noexcept {
  hotInventory_Accessor.reset();
  return *this;
}

xs::UnsignedInt PlatformStatusSAM_Type::getColdInventory() const {
  if (coldInventory_Accessor) {
    return *coldInventory_Accessor;
  }
  throw uci::base::UCIException("Error in getColdInventory(): An attempt was made to get an optional field that was not enabled, call hasColdInventory() to determine if it is safe to call getColdInventory()");
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setColdInventory(xs::UnsignedInt value) {
  coldInventory_Accessor = value;
  return *this;
}

bool PlatformStatusSAM_Type::hasColdInventory() const noexcept {
  return coldInventory_Accessor.has_value();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::clearColdInventory() noexcept {
  coldInventory_Accessor.reset();
  return *this;
}

uci::type::SAM_ModeEnum& PlatformStatusSAM_Type::getSAM_Mode_() const {
  if (sAM_Mode_Accessor) {
    return *sAM_Mode_Accessor;
  }
  throw uci::base::UCIException("Error in getSAM_Mode(): An attempt was made to get an optional field that was not enabled, call hasSAM_Mode() to determine if it is safe to call getSAM_Mode()");
}

const uci::type::SAM_ModeEnum& PlatformStatusSAM_Type::getSAM_Mode() const {
  return getSAM_Mode_();
}

uci::type::SAM_ModeEnum& PlatformStatusSAM_Type::getSAM_Mode() {
  return getSAM_Mode_();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setSAM_Mode(const uci::type::SAM_ModeEnum& accessor) {
  enableSAM_Mode();
  if (&accessor != sAM_Mode_Accessor.get()) {
    sAM_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setSAM_Mode(const uci::type::SAM_ModeEnum::EnumerationItem value) {
  enableSAM_Mode().setValue(value);
  return *this;
}

bool PlatformStatusSAM_Type::hasSAM_Mode() const noexcept {
  return static_cast<bool>(sAM_Mode_Accessor);
}

uci::type::SAM_ModeEnum& PlatformStatusSAM_Type::enableSAM_Mode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAM_ModeEnum : type};
  if ((!sAM_Mode_Accessor) || (sAM_Mode_Accessor->getAccessorType() != requestedType)) {
    sAM_Mode_Accessor = SAM_ModeEnum::create(requestedType);
    if (!sAM_Mode_Accessor) {
      throw uci::base::UCIException("Error in enableSAM_Mode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sAM_Mode_Accessor;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::clearSAM_Mode() noexcept {
  sAM_Mode_Accessor.reset();
  return *this;
}

uci::type::OperationalImpairmentEnum& PlatformStatusSAM_Type::getOperationalImpairment_() const {
  if (operationalImpairment_Accessor) {
    return *operationalImpairment_Accessor;
  }
  throw uci::base::UCIException("Error in getOperationalImpairment(): An attempt was made to get an optional field that was not enabled, call hasOperationalImpairment() to determine if it is safe to call getOperationalImpairment()");
}

const uci::type::OperationalImpairmentEnum& PlatformStatusSAM_Type::getOperationalImpairment() const {
  return getOperationalImpairment_();
}

uci::type::OperationalImpairmentEnum& PlatformStatusSAM_Type::getOperationalImpairment() {
  return getOperationalImpairment_();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setOperationalImpairment(const uci::type::OperationalImpairmentEnum& accessor) {
  enableOperationalImpairment();
  if (&accessor != operationalImpairment_Accessor.get()) {
    operationalImpairment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setOperationalImpairment(const uci::type::OperationalImpairmentEnum::EnumerationItem value) {
  enableOperationalImpairment().setValue(value);
  return *this;
}

bool PlatformStatusSAM_Type::hasOperationalImpairment() const noexcept {
  return static_cast<bool>(operationalImpairment_Accessor);
}

uci::type::OperationalImpairmentEnum& PlatformStatusSAM_Type::enableOperationalImpairment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operationalImpairmentEnum : type};
  if ((!operationalImpairment_Accessor) || (operationalImpairment_Accessor->getAccessorType() != requestedType)) {
    operationalImpairment_Accessor = OperationalImpairmentEnum::create(requestedType);
    if (!operationalImpairment_Accessor) {
      throw uci::base::UCIException("Error in enableOperationalImpairment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operationalImpairment_Accessor;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::clearOperationalImpairment() noexcept {
  operationalImpairment_Accessor.reset();
  return *this;
}

uci::type::CommunicationsImpairmentEnum& PlatformStatusSAM_Type::getCommunicationsImpairment_() const {
  if (communicationsImpairment_Accessor) {
    return *communicationsImpairment_Accessor;
  }
  throw uci::base::UCIException("Error in getCommunicationsImpairment(): An attempt was made to get an optional field that was not enabled, call hasCommunicationsImpairment() to determine if it is safe to call getCommunicationsImpairment()");
}

const uci::type::CommunicationsImpairmentEnum& PlatformStatusSAM_Type::getCommunicationsImpairment() const {
  return getCommunicationsImpairment_();
}

uci::type::CommunicationsImpairmentEnum& PlatformStatusSAM_Type::getCommunicationsImpairment() {
  return getCommunicationsImpairment_();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setCommunicationsImpairment(const uci::type::CommunicationsImpairmentEnum& accessor) {
  enableCommunicationsImpairment();
  if (&accessor != communicationsImpairment_Accessor.get()) {
    communicationsImpairment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setCommunicationsImpairment(const uci::type::CommunicationsImpairmentEnum::EnumerationItem value) {
  enableCommunicationsImpairment().setValue(value);
  return *this;
}

bool PlatformStatusSAM_Type::hasCommunicationsImpairment() const noexcept {
  return static_cast<bool>(communicationsImpairment_Accessor);
}

uci::type::CommunicationsImpairmentEnum& PlatformStatusSAM_Type::enableCommunicationsImpairment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::communicationsImpairmentEnum : type};
  if ((!communicationsImpairment_Accessor) || (communicationsImpairment_Accessor->getAccessorType() != requestedType)) {
    communicationsImpairment_Accessor = CommunicationsImpairmentEnum::create(requestedType);
    if (!communicationsImpairment_Accessor) {
      throw uci::base::UCIException("Error in enableCommunicationsImpairment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *communicationsImpairment_Accessor;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::clearCommunicationsImpairment() noexcept {
  communicationsImpairment_Accessor.reset();
  return *this;
}

xs::UnsignedInt PlatformStatusSAM_Type::getControlPositions() const {
  if (controlPositions_Accessor) {
    return *controlPositions_Accessor;
  }
  throw uci::base::UCIException("Error in getControlPositions(): An attempt was made to get an optional field that was not enabled, call hasControlPositions() to determine if it is safe to call getControlPositions()");
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setControlPositions(xs::UnsignedInt value) {
  controlPositions_Accessor = value;
  return *this;
}

bool PlatformStatusSAM_Type::hasControlPositions() const noexcept {
  return controlPositions_Accessor.has_value();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::clearControlPositions() noexcept {
  controlPositions_Accessor.reset();
  return *this;
}

uci::type::RadiationModeEnum& PlatformStatusSAM_Type::getRadiationMode_() const {
  if (radiationMode_Accessor) {
    return *radiationMode_Accessor;
  }
  throw uci::base::UCIException("Error in getRadiationMode(): An attempt was made to get an optional field that was not enabled, call hasRadiationMode() to determine if it is safe to call getRadiationMode()");
}

const uci::type::RadiationModeEnum& PlatformStatusSAM_Type::getRadiationMode() const {
  return getRadiationMode_();
}

uci::type::RadiationModeEnum& PlatformStatusSAM_Type::getRadiationMode() {
  return getRadiationMode_();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setRadiationMode(const uci::type::RadiationModeEnum& accessor) {
  enableRadiationMode();
  if (&accessor != radiationMode_Accessor.get()) {
    radiationMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::setRadiationMode(const uci::type::RadiationModeEnum::EnumerationItem value) {
  enableRadiationMode().setValue(value);
  return *this;
}

bool PlatformStatusSAM_Type::hasRadiationMode() const noexcept {
  return static_cast<bool>(radiationMode_Accessor);
}

uci::type::RadiationModeEnum& PlatformStatusSAM_Type::enableRadiationMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radiationModeEnum : type};
  if ((!radiationMode_Accessor) || (radiationMode_Accessor->getAccessorType() != requestedType)) {
    radiationMode_Accessor = RadiationModeEnum::create(requestedType);
    if (!radiationMode_Accessor) {
      throw uci::base::UCIException("Error in enableRadiationMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *radiationMode_Accessor;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::clearRadiationMode() noexcept {
  radiationMode_Accessor.reset();
  return *this;
}

std::unique_ptr<PlatformStatusSAM_Type> PlatformStatusSAM_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformStatusSAM_Type : type};
  return (requestedType == uci::type::accessorType::platformStatusSAM_Type) ? boost::make_unique<PlatformStatusSAM_Type>() : nullptr;
}

/**  */
namespace PlatformStatusSAM_Type_Names {

constexpr const char* Extern_Type_Name{"PlatformStatusSAM_Type"};
constexpr const char* HotInventory_Name{"HotInventory"};
constexpr const char* ColdInventory_Name{"ColdInventory"};
constexpr const char* SAM_Mode_Name{"SAM_Mode"};
constexpr const char* OperationalImpairment_Name{"OperationalImpairment"};
constexpr const char* CommunicationsImpairment_Name{"CommunicationsImpairment"};
constexpr const char* ControlPositions_Name{"ControlPositions"};
constexpr const char* RadiationMode_Name{"RadiationMode"};

} // namespace PlatformStatusSAM_Type_Names

void PlatformStatusSAM_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlatformStatusSAM_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlatformStatusSAM_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlatformStatusSAM_Type_Names::HotInventory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHotInventory(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusSAM_Type_Names::ColdInventory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setColdInventory(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusSAM_Type_Names::SAM_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSAM_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformStatusSAM_Type_Names::OperationalImpairment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableOperationalImpairment().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformStatusSAM_Type_Names::CommunicationsImpairment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCommunicationsImpairment().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformStatusSAM_Type_Names::ControlPositions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setControlPositions(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusSAM_Type_Names::RadiationMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRadiationMode().setValueFromName(*value);
      }
    }
  }
}

std::string PlatformStatusSAM_Type::serialize(const uci::type::PlatformStatusSAM_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlatformStatusSAM_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlatformStatusSAM_Type_Names::Extern_Type_Name);
  }
  if (accessor.hasHotInventory()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHotInventory(), node, PlatformStatusSAM_Type_Names::HotInventory_Name);
  }
  if (accessor.hasColdInventory()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getColdInventory(), node, PlatformStatusSAM_Type_Names::ColdInventory_Name);
  }
  if (accessor.hasSAM_Mode()) {
    SAM_ModeEnum::serialize(accessor.getSAM_Mode(), node, PlatformStatusSAM_Type_Names::SAM_Mode_Name, false);
  }
  if (accessor.hasOperationalImpairment()) {
    OperationalImpairmentEnum::serialize(accessor.getOperationalImpairment(), node, PlatformStatusSAM_Type_Names::OperationalImpairment_Name, false);
  }
  if (accessor.hasCommunicationsImpairment()) {
    CommunicationsImpairmentEnum::serialize(accessor.getCommunicationsImpairment(), node, PlatformStatusSAM_Type_Names::CommunicationsImpairment_Name, false);
  }
  if (accessor.hasControlPositions()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getControlPositions(), node, PlatformStatusSAM_Type_Names::ControlPositions_Name);
  }
  if (accessor.hasRadiationMode()) {
    RadiationModeEnum::serialize(accessor.getRadiationMode(), node, PlatformStatusSAM_Type_Names::RadiationMode_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlatformStatusSAM_Type>().release());
}

uci::type::PlatformStatusSAM_Type& PlatformStatusSAM_Type::create(const uci::type::PlatformStatusSAM_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlatformStatusSAM_Type> newAccessor{boost::make_unique<asb_uci::type::PlatformStatusSAM_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlatformStatusSAM_Type::destroy(uci::type::PlatformStatusSAM_Type& accessor) {
  delete dynamic_cast<asb_uci::type::PlatformStatusSAM_Type*>(&accessor);
}

} // namespace type

} // namespace uci

