/** @file IntegratorSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IntegratorSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IntegrationMethodEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DoublePositiveType.h"
#include "uci/type/IntegrationMethodEnum.h"
#include "uci/type/IntegratorSettingsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IntegratorSettingsType::IntegratorSettingsType()
  : integrationMethod_Accessor{boost::make_unique<IntegrationMethodEnum>()} {
}

IntegratorSettingsType::~IntegratorSettingsType() = default;

void IntegratorSettingsType::copy(const uci::type::IntegratorSettingsType& accessor) {
  copyImpl(accessor, false);
}

void IntegratorSettingsType::copyImpl(const uci::type::IntegratorSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IntegratorSettingsType&>(accessor);
    setIntegrationMethod(*(accessorImpl.integrationMethod_Accessor));
    setIsFixedStepSize(accessorImpl.isFixedStepSize_Accessor);
    setInitialStepSize(accessorImpl.initialStepSize_Accessor);
    if (accessorImpl.hasErrorTolerance()) {
      setErrorTolerance(accessorImpl.getErrorTolerance());
    } else {
      clearErrorTolerance();
    }
    if (accessorImpl.hasMinimumStepSize()) {
      setMinimumStepSize(accessorImpl.getMinimumStepSize());
    } else {
      clearMinimumStepSize();
    }
    if (accessorImpl.hasMaximumStepSize()) {
      setMaximumStepSize(accessorImpl.getMaximumStepSize());
    } else {
      clearMaximumStepSize();
    }
  }
}

void IntegratorSettingsType::reset() noexcept {
  integrationMethod_Accessor->reset();
  isFixedStepSize_Accessor = false;
  initialStepSize_Accessor = 0.0;
  clearErrorTolerance();
  clearMinimumStepSize();
  clearMaximumStepSize();
}

const uci::type::IntegrationMethodEnum& IntegratorSettingsType::getIntegrationMethod() const {
  return *integrationMethod_Accessor;
}

uci::type::IntegrationMethodEnum& IntegratorSettingsType::getIntegrationMethod() {
  return *integrationMethod_Accessor;
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::setIntegrationMethod(const uci::type::IntegrationMethodEnum& accessor) {
  if (&accessor != integrationMethod_Accessor.get()) {
    integrationMethod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::setIntegrationMethod(uci::type::IntegrationMethodEnum::EnumerationItem value) {
  integrationMethod_Accessor->setValue(value);
  return *this;
}


xs::Boolean IntegratorSettingsType::getIsFixedStepSize() const {
  return isFixedStepSize_Accessor;
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::setIsFixedStepSize(xs::Boolean value) {
  isFixedStepSize_Accessor = value;
  return *this;
}


uci::type::DoublePositiveTypeValue IntegratorSettingsType::getInitialStepSize() const {
  return initialStepSize_Accessor;
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::setInitialStepSize(uci::type::DoublePositiveTypeValue value) {
  initialStepSize_Accessor = value;
  return *this;
}


xs::Double IntegratorSettingsType::getErrorTolerance() const {
  if (errorTolerance_Accessor) {
    return *errorTolerance_Accessor;
  }
  throw uci::base::UCIException("Error in getErrorTolerance(): An attempt was made to get an optional field that was not enabled, call hasErrorTolerance() to determine if it is safe to call getErrorTolerance()");
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::setErrorTolerance(xs::Double value) {
  errorTolerance_Accessor = value;
  return *this;
}

bool IntegratorSettingsType::hasErrorTolerance() const noexcept {
  return errorTolerance_Accessor.has_value();
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::clearErrorTolerance() noexcept {
  errorTolerance_Accessor.reset();
  return *this;
}

uci::type::DoublePositiveTypeValue IntegratorSettingsType::getMinimumStepSize() const {
  if (minimumStepSize_Accessor) {
    return *minimumStepSize_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumStepSize(): An attempt was made to get an optional field that was not enabled, call hasMinimumStepSize() to determine if it is safe to call getMinimumStepSize()");
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::setMinimumStepSize(uci::type::DoublePositiveTypeValue value) {
  minimumStepSize_Accessor = value;
  return *this;
}

bool IntegratorSettingsType::hasMinimumStepSize() const noexcept {
  return minimumStepSize_Accessor.has_value();
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::clearMinimumStepSize() noexcept {
  minimumStepSize_Accessor.reset();
  return *this;
}

uci::type::DoublePositiveTypeValue IntegratorSettingsType::getMaximumStepSize() const {
  if (maximumStepSize_Accessor) {
    return *maximumStepSize_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumStepSize(): An attempt was made to get an optional field that was not enabled, call hasMaximumStepSize() to determine if it is safe to call getMaximumStepSize()");
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::setMaximumStepSize(uci::type::DoublePositiveTypeValue value) {
  maximumStepSize_Accessor = value;
  return *this;
}

bool IntegratorSettingsType::hasMaximumStepSize() const noexcept {
  return maximumStepSize_Accessor.has_value();
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::clearMaximumStepSize() noexcept {
  maximumStepSize_Accessor.reset();
  return *this;
}

std::unique_ptr<IntegratorSettingsType> IntegratorSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::integratorSettingsType : type};
  return (requestedType == uci::type::accessorType::integratorSettingsType) ? boost::make_unique<IntegratorSettingsType>() : nullptr;
}

/**  */
namespace IntegratorSettingsType_Names {

constexpr const char* Extern_Type_Name{"IntegratorSettingsType"};
constexpr const char* IntegrationMethod_Name{"IntegrationMethod"};
constexpr const char* IsFixedStepSize_Name{"IsFixedStepSize"};
constexpr const char* InitialStepSize_Name{"InitialStepSize"};
constexpr const char* ErrorTolerance_Name{"ErrorTolerance"};
constexpr const char* MinimumStepSize_Name{"MinimumStepSize"};
constexpr const char* MaximumStepSize_Name{"MaximumStepSize"};

} // namespace IntegratorSettingsType_Names

void IntegratorSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IntegratorSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IntegratorSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IntegratorSettingsType_Names::IntegrationMethod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getIntegrationMethod().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IntegratorSettingsType_Names::IsFixedStepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsFixedStepSize(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + IntegratorSettingsType_Names::InitialStepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitialStepSize(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + IntegratorSettingsType_Names::ErrorTolerance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setErrorTolerance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + IntegratorSettingsType_Names::MinimumStepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumStepSize(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + IntegratorSettingsType_Names::MaximumStepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumStepSize(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string IntegratorSettingsType::serialize(const uci::type::IntegratorSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IntegratorSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IntegratorSettingsType_Names::Extern_Type_Name);
  }
  IntegrationMethodEnum::serialize(accessor.getIntegrationMethod(), node, IntegratorSettingsType_Names::IntegrationMethod_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIsFixedStepSize(), node, IntegratorSettingsType_Names::IsFixedStepSize_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInitialStepSize(), node, IntegratorSettingsType_Names::InitialStepSize_Name);
  if (accessor.hasErrorTolerance()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getErrorTolerance(), node, IntegratorSettingsType_Names::ErrorTolerance_Name);
  }
  if (accessor.hasMinimumStepSize()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumStepSize(), node, IntegratorSettingsType_Names::MinimumStepSize_Name);
  }
  if (accessor.hasMaximumStepSize()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumStepSize(), node, IntegratorSettingsType_Names::MaximumStepSize_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IntegratorSettingsType& IntegratorSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IntegratorSettingsType>().release());
}

uci::type::IntegratorSettingsType& IntegratorSettingsType::create(const uci::type::IntegratorSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IntegratorSettingsType> newAccessor{boost::make_unique<asb_uci::type::IntegratorSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IntegratorSettingsType::destroy(uci::type::IntegratorSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::IntegratorSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

