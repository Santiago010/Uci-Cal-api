/** @file AssessmentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AssessmentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AchievabilityAssessmentPET.h"
#include "asb_uci/type/CapabilityUtilizationAssessmentType.h"
#include "asb_uci/type/CommPointingPlanAssessmentType.h"
#include "asb_uci/type/RouteDeconflictionAssessmentType.h"
#include "asb_uci/type/RouteThreatAssessmentType.h"
#include "asb_uci/type/RouteVulnerabilityMetricsAssessmentType.h"
#include "asb_uci/type/TargetMobilityAssessmentType.h"
#include "asb_uci/type/ThreatNominationAssessmentType.h"
#include "asb_uci/type/VehicleThreatAssessmentType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AchievabilityAssessmentPET.h"
#include "uci/type/AssessmentType.h"
#include "uci/type/CapabilityUtilizationAssessmentType.h"
#include "uci/type/CommPointingPlanAssessmentType.h"
#include "uci/type/RouteDeconflictionAssessmentType.h"
#include "uci/type/RouteThreatAssessmentType.h"
#include "uci/type/RouteVulnerabilityMetricsAssessmentType.h"
#include "uci/type/TargetMobilityAssessmentType.h"
#include "uci/type/ThreatNominationAssessmentType.h"
#include "uci/type/VehicleThreatAssessmentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AssessmentType::AssessmentType() = default;

AssessmentType::~AssessmentType() = default;

void AssessmentType::copy(const uci::type::AssessmentType& accessor) {
  copyImpl(accessor, false);
}

void AssessmentType::copyImpl(const uci::type::AssessmentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AssessmentType&>(accessor);
    if (accessorImpl.commPointingPlan_Accessor) {
      setCommPointingPlan(*(accessorImpl.commPointingPlan_Accessor));
    } else {
      commPointingPlan_Accessor.reset();
    }
    if (accessorImpl.capabilityUtilization_Accessor) {
      setCapabilityUtilization(*(accessorImpl.capabilityUtilization_Accessor));
    } else {
      capabilityUtilization_Accessor.reset();
    }
    if (accessorImpl.routeDeconfliction_Accessor) {
      setRouteDeconfliction(*(accessorImpl.routeDeconfliction_Accessor));
    } else {
      routeDeconfliction_Accessor.reset();
    }
    if (accessorImpl.routeVulnerabilityMetrics_Accessor) {
      setRouteVulnerabilityMetrics(*(accessorImpl.routeVulnerabilityMetrics_Accessor));
    } else {
      routeVulnerabilityMetrics_Accessor.reset();
    }
    if (accessorImpl.routeThreatAssessment_Accessor) {
      setRouteThreatAssessment(*(accessorImpl.routeThreatAssessment_Accessor));
    } else {
      routeThreatAssessment_Accessor.reset();
    }
    if (accessorImpl.targetMobility_Accessor) {
      setTargetMobility(*(accessorImpl.targetMobility_Accessor));
    } else {
      targetMobility_Accessor.reset();
    }
    if (accessorImpl.vehicleThreatAssessment_Accessor) {
      setVehicleThreatAssessment(*(accessorImpl.vehicleThreatAssessment_Accessor));
    } else {
      vehicleThreatAssessment_Accessor.reset();
    }
    if (accessorImpl.threatNominationAssessment_Accessor) {
      setThreatNominationAssessment(*(accessorImpl.threatNominationAssessment_Accessor));
    } else {
      threatNominationAssessment_Accessor.reset();
    }
    if (accessorImpl.achievabilityAssessment_Accessor) {
      setAchievabilityAssessment(*(accessorImpl.achievabilityAssessment_Accessor));
    } else {
      achievabilityAssessment_Accessor.reset();
    }
  }
}

void AssessmentType::reset() noexcept {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
}

uci::type::AssessmentType::AssessmentTypeChoice AssessmentType::getAssessmentTypeChoiceOrdinal() const noexcept {
  if (commPointingPlan_Accessor) {
    return ASSESSMENTTYPE_CHOICE_COMMPOINTINGPLAN;
  }
  if (capabilityUtilization_Accessor) {
    return ASSESSMENTTYPE_CHOICE_CAPABILITYUTILIZATION;
  }
  if (routeDeconfliction_Accessor) {
    return ASSESSMENTTYPE_CHOICE_ROUTEDECONFLICTION;
  }
  if (routeVulnerabilityMetrics_Accessor) {
    return ASSESSMENTTYPE_CHOICE_ROUTEVULNERABILITYMETRICS;
  }
  if (routeThreatAssessment_Accessor) {
    return ASSESSMENTTYPE_CHOICE_ROUTETHREATASSESSMENT;
  }
  if (targetMobility_Accessor) {
    return ASSESSMENTTYPE_CHOICE_TARGETMOBILITY;
  }
  if (vehicleThreatAssessment_Accessor) {
    return ASSESSMENTTYPE_CHOICE_VEHICLETHREATASSESSMENT;
  }
  if (threatNominationAssessment_Accessor) {
    return ASSESSMENTTYPE_CHOICE_THREATNOMINATIONASSESSMENT;
  }
  if (achievabilityAssessment_Accessor) {
    return ASSESSMENTTYPE_CHOICE_ACHIEVABILITYASSESSMENT;
  }
  return ASSESSMENTTYPE_CHOICE_NONE;
}

uci::type::AssessmentType& AssessmentType::setAssessmentTypeChoiceOrdinal(uci::type::AssessmentType::AssessmentTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ASSESSMENTTYPE_CHOICE_COMMPOINTINGPLAN:
      chooseCommPointingPlan("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_CAPABILITYUTILIZATION:
      chooseCapabilityUtilization("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_ROUTEDECONFLICTION:
      chooseRouteDeconfliction("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_ROUTEVULNERABILITYMETRICS:
      chooseRouteVulnerabilityMetrics("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_ROUTETHREATASSESSMENT:
      chooseRouteThreatAssessment("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_TARGETMOBILITY:
      chooseTargetMobility("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_VEHICLETHREATASSESSMENT:
      chooseVehicleThreatAssessment("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_THREATNOMINATIONASSESSMENT:
      chooseThreatNominationAssessment("setAssessmentTypeChoiceOrdinal", type);
      break;
    case ASSESSMENTTYPE_CHOICE_ACHIEVABILITYASSESSMENT:
      chooseAchievabilityAssessment("setAssessmentTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setAssessmentTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CommPointingPlanAssessmentType& AssessmentType::getCommPointingPlan_() const {
  if (commPointingPlan_Accessor) {
    return *commPointingPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getCommPointingPlan(): Unable to get CommPointingPlan, field not selected");
}

const uci::type::CommPointingPlanAssessmentType& AssessmentType::getCommPointingPlan() const {
  return getCommPointingPlan_();
}

uci::type::CommPointingPlanAssessmentType& AssessmentType::getCommPointingPlan() {
  return getCommPointingPlan_();
}

uci::type::AssessmentType& AssessmentType::setCommPointingPlan(const uci::type::CommPointingPlanAssessmentType& accessor) {
  chooseCommPointingPlan();
  if (&accessor != commPointingPlan_Accessor.get()) {
    commPointingPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isCommPointingPlan() const noexcept {
  return static_cast<bool>(commPointingPlan_Accessor);
}

uci::type::CommPointingPlanAssessmentType& AssessmentType::chooseCommPointingPlan(const std::string& method, uci::base::accessorType::AccessorType type) {
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commPointingPlanAssessmentType : type};
  if ((!commPointingPlan_Accessor) || (commPointingPlan_Accessor->getAccessorType() != requestedType)) {
    commPointingPlan_Accessor = CommPointingPlanAssessmentType::create(type);
    if (!commPointingPlan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commPointingPlan_Accessor;
}

uci::type::CommPointingPlanAssessmentType& AssessmentType::chooseCommPointingPlan(uci::base::accessorType::AccessorType type) {
  return chooseCommPointingPlan("chooseCommPointingPlan", type);
}

uci::type::CapabilityUtilizationAssessmentType& AssessmentType::getCapabilityUtilization_() const {
  if (capabilityUtilization_Accessor) {
    return *capabilityUtilization_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityUtilization(): Unable to get CapabilityUtilization, field not selected");
}

const uci::type::CapabilityUtilizationAssessmentType& AssessmentType::getCapabilityUtilization() const {
  return getCapabilityUtilization_();
}

uci::type::CapabilityUtilizationAssessmentType& AssessmentType::getCapabilityUtilization() {
  return getCapabilityUtilization_();
}

uci::type::AssessmentType& AssessmentType::setCapabilityUtilization(const uci::type::CapabilityUtilizationAssessmentType& accessor) {
  chooseCapabilityUtilization();
  if (&accessor != capabilityUtilization_Accessor.get()) {
    capabilityUtilization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isCapabilityUtilization() const noexcept {
  return static_cast<bool>(capabilityUtilization_Accessor);
}

uci::type::CapabilityUtilizationAssessmentType& AssessmentType::chooseCapabilityUtilization(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityUtilizationAssessmentType : type};
  if ((!capabilityUtilization_Accessor) || (capabilityUtilization_Accessor->getAccessorType() != requestedType)) {
    capabilityUtilization_Accessor = CapabilityUtilizationAssessmentType::create(type);
    if (!capabilityUtilization_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityUtilization_Accessor;
}

uci::type::CapabilityUtilizationAssessmentType& AssessmentType::chooseCapabilityUtilization(uci::base::accessorType::AccessorType type) {
  return chooseCapabilityUtilization("chooseCapabilityUtilization", type);
}

uci::type::RouteDeconflictionAssessmentType& AssessmentType::getRouteDeconfliction_() const {
  if (routeDeconfliction_Accessor) {
    return *routeDeconfliction_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteDeconfliction(): Unable to get RouteDeconfliction, field not selected");
}

const uci::type::RouteDeconflictionAssessmentType& AssessmentType::getRouteDeconfliction() const {
  return getRouteDeconfliction_();
}

uci::type::RouteDeconflictionAssessmentType& AssessmentType::getRouteDeconfliction() {
  return getRouteDeconfliction_();
}

uci::type::AssessmentType& AssessmentType::setRouteDeconfliction(const uci::type::RouteDeconflictionAssessmentType& accessor) {
  chooseRouteDeconfliction();
  if (&accessor != routeDeconfliction_Accessor.get()) {
    routeDeconfliction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isRouteDeconfliction() const noexcept {
  return static_cast<bool>(routeDeconfliction_Accessor);
}

uci::type::RouteDeconflictionAssessmentType& AssessmentType::chooseRouteDeconfliction(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeDeconflictionAssessmentType : type};
  if ((!routeDeconfliction_Accessor) || (routeDeconfliction_Accessor->getAccessorType() != requestedType)) {
    routeDeconfliction_Accessor = RouteDeconflictionAssessmentType::create(type);
    if (!routeDeconfliction_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeDeconfliction_Accessor;
}

uci::type::RouteDeconflictionAssessmentType& AssessmentType::chooseRouteDeconfliction(uci::base::accessorType::AccessorType type) {
  return chooseRouteDeconfliction("chooseRouteDeconfliction", type);
}

uci::type::RouteVulnerabilityMetricsAssessmentType& AssessmentType::getRouteVulnerabilityMetrics_() const {
  if (routeVulnerabilityMetrics_Accessor) {
    return *routeVulnerabilityMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteVulnerabilityMetrics(): Unable to get RouteVulnerabilityMetrics, field not selected");
}

const uci::type::RouteVulnerabilityMetricsAssessmentType& AssessmentType::getRouteVulnerabilityMetrics() const {
  return getRouteVulnerabilityMetrics_();
}

uci::type::RouteVulnerabilityMetricsAssessmentType& AssessmentType::getRouteVulnerabilityMetrics() {
  return getRouteVulnerabilityMetrics_();
}

uci::type::AssessmentType& AssessmentType::setRouteVulnerabilityMetrics(const uci::type::RouteVulnerabilityMetricsAssessmentType& accessor) {
  chooseRouteVulnerabilityMetrics();
  if (&accessor != routeVulnerabilityMetrics_Accessor.get()) {
    routeVulnerabilityMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isRouteVulnerabilityMetrics() const noexcept {
  return static_cast<bool>(routeVulnerabilityMetrics_Accessor);
}

uci::type::RouteVulnerabilityMetricsAssessmentType& AssessmentType::chooseRouteVulnerabilityMetrics(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeVulnerabilityMetricsAssessmentType : type};
  if ((!routeVulnerabilityMetrics_Accessor) || (routeVulnerabilityMetrics_Accessor->getAccessorType() != requestedType)) {
    routeVulnerabilityMetrics_Accessor = RouteVulnerabilityMetricsAssessmentType::create(type);
    if (!routeVulnerabilityMetrics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeVulnerabilityMetrics_Accessor;
}

uci::type::RouteVulnerabilityMetricsAssessmentType& AssessmentType::chooseRouteVulnerabilityMetrics(uci::base::accessorType::AccessorType type) {
  return chooseRouteVulnerabilityMetrics("chooseRouteVulnerabilityMetrics", type);
}

uci::type::RouteThreatAssessmentType& AssessmentType::getRouteThreatAssessment_() const {
  if (routeThreatAssessment_Accessor) {
    return *routeThreatAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteThreatAssessment(): Unable to get RouteThreatAssessment, field not selected");
}

const uci::type::RouteThreatAssessmentType& AssessmentType::getRouteThreatAssessment() const {
  return getRouteThreatAssessment_();
}

uci::type::RouteThreatAssessmentType& AssessmentType::getRouteThreatAssessment() {
  return getRouteThreatAssessment_();
}

uci::type::AssessmentType& AssessmentType::setRouteThreatAssessment(const uci::type::RouteThreatAssessmentType& accessor) {
  chooseRouteThreatAssessment();
  if (&accessor != routeThreatAssessment_Accessor.get()) {
    routeThreatAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isRouteThreatAssessment() const noexcept {
  return static_cast<bool>(routeThreatAssessment_Accessor);
}

uci::type::RouteThreatAssessmentType& AssessmentType::chooseRouteThreatAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeThreatAssessmentType : type};
  if ((!routeThreatAssessment_Accessor) || (routeThreatAssessment_Accessor->getAccessorType() != requestedType)) {
    routeThreatAssessment_Accessor = RouteThreatAssessmentType::create(type);
    if (!routeThreatAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeThreatAssessment_Accessor;
}

uci::type::RouteThreatAssessmentType& AssessmentType::chooseRouteThreatAssessment(uci::base::accessorType::AccessorType type) {
  return chooseRouteThreatAssessment("chooseRouteThreatAssessment", type);
}

uci::type::TargetMobilityAssessmentType& AssessmentType::getTargetMobility_() const {
  if (targetMobility_Accessor) {
    return *targetMobility_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetMobility(): Unable to get TargetMobility, field not selected");
}

const uci::type::TargetMobilityAssessmentType& AssessmentType::getTargetMobility() const {
  return getTargetMobility_();
}

uci::type::TargetMobilityAssessmentType& AssessmentType::getTargetMobility() {
  return getTargetMobility_();
}

uci::type::AssessmentType& AssessmentType::setTargetMobility(const uci::type::TargetMobilityAssessmentType& accessor) {
  chooseTargetMobility();
  if (&accessor != targetMobility_Accessor.get()) {
    targetMobility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isTargetMobility() const noexcept {
  return static_cast<bool>(targetMobility_Accessor);
}

uci::type::TargetMobilityAssessmentType& AssessmentType::chooseTargetMobility(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetMobilityAssessmentType : type};
  if ((!targetMobility_Accessor) || (targetMobility_Accessor->getAccessorType() != requestedType)) {
    targetMobility_Accessor = TargetMobilityAssessmentType::create(type);
    if (!targetMobility_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetMobility_Accessor;
}

uci::type::TargetMobilityAssessmentType& AssessmentType::chooseTargetMobility(uci::base::accessorType::AccessorType type) {
  return chooseTargetMobility("chooseTargetMobility", type);
}

uci::type::VehicleThreatAssessmentType& AssessmentType::getVehicleThreatAssessment_() const {
  if (vehicleThreatAssessment_Accessor) {
    return *vehicleThreatAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleThreatAssessment(): Unable to get VehicleThreatAssessment, field not selected");
}

const uci::type::VehicleThreatAssessmentType& AssessmentType::getVehicleThreatAssessment() const {
  return getVehicleThreatAssessment_();
}

uci::type::VehicleThreatAssessmentType& AssessmentType::getVehicleThreatAssessment() {
  return getVehicleThreatAssessment_();
}

uci::type::AssessmentType& AssessmentType::setVehicleThreatAssessment(const uci::type::VehicleThreatAssessmentType& accessor) {
  chooseVehicleThreatAssessment();
  if (&accessor != vehicleThreatAssessment_Accessor.get()) {
    vehicleThreatAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isVehicleThreatAssessment() const noexcept {
  return static_cast<bool>(vehicleThreatAssessment_Accessor);
}

uci::type::VehicleThreatAssessmentType& AssessmentType::chooseVehicleThreatAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleThreatAssessmentType : type};
  if ((!vehicleThreatAssessment_Accessor) || (vehicleThreatAssessment_Accessor->getAccessorType() != requestedType)) {
    vehicleThreatAssessment_Accessor = VehicleThreatAssessmentType::create(type);
    if (!vehicleThreatAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleThreatAssessment_Accessor;
}

uci::type::VehicleThreatAssessmentType& AssessmentType::chooseVehicleThreatAssessment(uci::base::accessorType::AccessorType type) {
  return chooseVehicleThreatAssessment("chooseVehicleThreatAssessment", type);
}

uci::type::ThreatNominationAssessmentType& AssessmentType::getThreatNominationAssessment_() const {
  if (threatNominationAssessment_Accessor) {
    return *threatNominationAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getThreatNominationAssessment(): Unable to get ThreatNominationAssessment, field not selected");
}

const uci::type::ThreatNominationAssessmentType& AssessmentType::getThreatNominationAssessment() const {
  return getThreatNominationAssessment_();
}

uci::type::ThreatNominationAssessmentType& AssessmentType::getThreatNominationAssessment() {
  return getThreatNominationAssessment_();
}

uci::type::AssessmentType& AssessmentType::setThreatNominationAssessment(const uci::type::ThreatNominationAssessmentType& accessor) {
  chooseThreatNominationAssessment();
  if (&accessor != threatNominationAssessment_Accessor.get()) {
    threatNominationAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentType::isThreatNominationAssessment() const noexcept {
  return static_cast<bool>(threatNominationAssessment_Accessor);
}

uci::type::ThreatNominationAssessmentType& AssessmentType::chooseThreatNominationAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  achievabilityAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatNominationAssessmentType : type};
  if ((!threatNominationAssessment_Accessor) || (threatNominationAssessment_Accessor->getAccessorType() != requestedType)) {
    threatNominationAssessment_Accessor = ThreatNominationAssessmentType::create(type);
    if (!threatNominationAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threatNominationAssessment_Accessor;
}

uci::type::ThreatNominationAssessmentType& AssessmentType::chooseThreatNominationAssessment(uci::base::accessorType::AccessorType type) {
  return chooseThreatNominationAssessment("chooseThreatNominationAssessment", type);
}

uci::type::AchievabilityAssessmentPET& AssessmentType::getAchievabilityAssessment_() const {
  if (achievabilityAssessment_Accessor) {
    return *achievabilityAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getAchievabilityAssessment(): Unable to get AchievabilityAssessment, field not selected");
}

const uci::type::AchievabilityAssessmentPET& AssessmentType::getAchievabilityAssessment() const {
  return getAchievabilityAssessment_();
}

uci::type::AchievabilityAssessmentPET& AssessmentType::getAchievabilityAssessment() {
  return getAchievabilityAssessment_();
}

uci::type::AssessmentType& AssessmentType::setAchievabilityAssessment(const uci::type::AchievabilityAssessmentPET& accessor) {
  chooseAchievabilityAssessment("setAchievabilityAssessment", accessor.getAccessorType());
  if (&accessor != achievabilityAssessment_Accessor.get()) {
    achievabilityAssessment_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AssessmentType::isAchievabilityAssessment() const noexcept {
  return static_cast<bool>(achievabilityAssessment_Accessor);
}

uci::type::AchievabilityAssessmentPET& AssessmentType::chooseAchievabilityAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  commPointingPlan_Accessor.reset();
  capabilityUtilization_Accessor.reset();
  routeDeconfliction_Accessor.reset();
  routeVulnerabilityMetrics_Accessor.reset();
  routeThreatAssessment_Accessor.reset();
  targetMobility_Accessor.reset();
  vehicleThreatAssessment_Accessor.reset();
  threatNominationAssessment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::achievabilityAssessmentPET : type};
  if ((!achievabilityAssessment_Accessor) || (achievabilityAssessment_Accessor->getAccessorType() != requestedType)) {
    achievabilityAssessment_Accessor = AchievabilityAssessmentPET::create(type);
    if (!achievabilityAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *achievabilityAssessment_Accessor;
}

uci::type::AchievabilityAssessmentPET& AssessmentType::chooseAchievabilityAssessment(uci::base::accessorType::AccessorType type) {
  return chooseAchievabilityAssessment("chooseAchievabilityAssessment", type);
}

std::unique_ptr<AssessmentType> AssessmentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assessmentType : type};
  return (requestedType == uci::type::accessorType::assessmentType) ? boost::make_unique<AssessmentType>() : nullptr;
}

/**  */
namespace AssessmentType_Names {

constexpr const char* Extern_Type_Name{"AssessmentType"};
constexpr const char* CommPointingPlan_Name{"CommPointingPlan"};
constexpr const char* CapabilityUtilization_Name{"CapabilityUtilization"};
constexpr const char* RouteDeconfliction_Name{"RouteDeconfliction"};
constexpr const char* RouteVulnerabilityMetrics_Name{"RouteVulnerabilityMetrics"};
constexpr const char* RouteThreatAssessment_Name{"RouteThreatAssessment"};
constexpr const char* TargetMobility_Name{"TargetMobility"};
constexpr const char* VehicleThreatAssessment_Name{"VehicleThreatAssessment"};
constexpr const char* ThreatNominationAssessment_Name{"ThreatNominationAssessment"};
constexpr const char* AchievabilityAssessment_Name{"AchievabilityAssessment"};

} // namespace AssessmentType_Names

void AssessmentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AssessmentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AssessmentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AssessmentType_Names::CommPointingPlan_Name) {
      CommPointingPlanAssessmentType::deserialize(valueType.second, accessor.chooseCommPointingPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::CapabilityUtilization_Name) {
      CapabilityUtilizationAssessmentType::deserialize(valueType.second, accessor.chooseCapabilityUtilization(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::RouteDeconfliction_Name) {
      RouteDeconflictionAssessmentType::deserialize(valueType.second, accessor.chooseRouteDeconfliction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::RouteVulnerabilityMetrics_Name) {
      RouteVulnerabilityMetricsAssessmentType::deserialize(valueType.second, accessor.chooseRouteVulnerabilityMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::RouteThreatAssessment_Name) {
      RouteThreatAssessmentType::deserialize(valueType.second, accessor.chooseRouteThreatAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::TargetMobility_Name) {
      TargetMobilityAssessmentType::deserialize(valueType.second, accessor.chooseTargetMobility(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::VehicleThreatAssessment_Name) {
      VehicleThreatAssessmentType::deserialize(valueType.second, accessor.chooseVehicleThreatAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::ThreatNominationAssessment_Name) {
      ThreatNominationAssessmentType::deserialize(valueType.second, accessor.chooseThreatNominationAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentType_Names::AchievabilityAssessment_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAchievabilityAssessment(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string AssessmentType::serialize(const uci::type::AssessmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AssessmentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AssessmentType_Names::Extern_Type_Name);
  }
  if (accessor.isCommPointingPlan()) {
    CommPointingPlanAssessmentType::serialize(accessor.getCommPointingPlan(), node, AssessmentType_Names::CommPointingPlan_Name);
  } else if (accessor.isCapabilityUtilization()) {
    CapabilityUtilizationAssessmentType::serialize(accessor.getCapabilityUtilization(), node, AssessmentType_Names::CapabilityUtilization_Name);
  } else if (accessor.isRouteDeconfliction()) {
    RouteDeconflictionAssessmentType::serialize(accessor.getRouteDeconfliction(), node, AssessmentType_Names::RouteDeconfliction_Name);
  } else if (accessor.isRouteVulnerabilityMetrics()) {
    RouteVulnerabilityMetricsAssessmentType::serialize(accessor.getRouteVulnerabilityMetrics(), node, AssessmentType_Names::RouteVulnerabilityMetrics_Name);
  } else if (accessor.isRouteThreatAssessment()) {
    RouteThreatAssessmentType::serialize(accessor.getRouteThreatAssessment(), node, AssessmentType_Names::RouteThreatAssessment_Name);
  } else if (accessor.isTargetMobility()) {
    TargetMobilityAssessmentType::serialize(accessor.getTargetMobility(), node, AssessmentType_Names::TargetMobility_Name);
  } else if (accessor.isVehicleThreatAssessment()) {
    VehicleThreatAssessmentType::serialize(accessor.getVehicleThreatAssessment(), node, AssessmentType_Names::VehicleThreatAssessment_Name);
  } else if (accessor.isThreatNominationAssessment()) {
    ThreatNominationAssessmentType::serialize(accessor.getThreatNominationAssessment(), node, AssessmentType_Names::ThreatNominationAssessment_Name);
  } else if (accessor.isAchievabilityAssessment()) {
    AchievabilityAssessmentPET::serialize(accessor.getAchievabilityAssessment(), node, AssessmentType_Names::AchievabilityAssessment_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AssessmentType& AssessmentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AssessmentType>().release());
}

uci::type::AssessmentType& AssessmentType::create(const uci::type::AssessmentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AssessmentType> newAccessor{boost::make_unique<asb_uci::type::AssessmentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AssessmentType::destroy(uci::type::AssessmentType& accessor) {
  delete dynamic_cast<asb_uci::type::AssessmentType*>(&accessor);
}

} // namespace type

} // namespace uci

