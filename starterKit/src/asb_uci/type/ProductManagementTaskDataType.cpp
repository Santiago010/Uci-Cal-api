/** @file ProductManagementTaskDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductManagementTaskDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComparableRankingType.h"
#include "asb_uci/type/ConcurrentTaskReferenceType.h"
#include "asb_uci/type/DependentTaskType.h"
#include "asb_uci/type/DownloadPriorityEnum.h"
#include "asb_uci/type/RemarksType.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/type/TraceabilityType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComparableRankingType.h"
#include "uci/type/ConcurrentTaskReferenceType.h"
#include "uci/type/DependentTaskType.h"
#include "uci/type/DownloadPriorityEnum.h"
#include "uci/type/ProductManagementTaskDataType.h"
#include "uci/type/RemarksType.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/TraceabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductManagementTaskDataType::ProductManagementTaskDataType()
  : taskID_Accessor{boost::make_unique<TaskID_Type>()},
    dependentTask_Accessor{boost::make_unique<DependentTask>(0, SIZE_MAX)},
    concurrentTask_Accessor{boost::make_unique<ConcurrentTask>(0, SIZE_MAX)},
    rank_Accessor{boost::make_unique<ComparableRankingType>()},
    preemptLowerRank_Accessor{boost::make_unique<DownloadPriorityEnum>()} {
}

ProductManagementTaskDataType::~ProductManagementTaskDataType() = default;

void ProductManagementTaskDataType::copy(const uci::type::ProductManagementTaskDataType& accessor) {
  copyImpl(accessor, false);
}

void ProductManagementTaskDataType::copyImpl(const uci::type::ProductManagementTaskDataType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::productManagementTaskDataType)) {
      const auto& accessorImpl = dynamic_cast<const ProductManagementTaskDataType&>(accessor);
      setTaskID(*(accessorImpl.taskID_Accessor));
      if (accessorImpl.traceability_Accessor) {
        setTraceability(*(accessorImpl.traceability_Accessor));
      } else {
        traceability_Accessor.reset();
      }
      setDependentTask(*(accessorImpl.dependentTask_Accessor));
      setConcurrentTask(*(accessorImpl.concurrentTask_Accessor));
      setRank(*(accessorImpl.rank_Accessor));
      setPreemptLowerRank(*(accessorImpl.preemptLowerRank_Accessor));
      if (accessorImpl.remarks_Accessor) {
        setRemarks(*(accessorImpl.remarks_Accessor));
      } else {
        remarks_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ProductManagementTaskDataType::reset() noexcept {
  taskID_Accessor->reset();
  traceability_Accessor.reset();
  dependentTask_Accessor->reset();
  concurrentTask_Accessor->reset();
  rank_Accessor->reset();
  preemptLowerRank_Accessor->reset();
  remarks_Accessor.reset();
}

const uci::type::TaskID_Type& ProductManagementTaskDataType::getTaskID() const {
  return *taskID_Accessor;
}

uci::type::TaskID_Type& ProductManagementTaskDataType::getTaskID() {
  return *taskID_Accessor;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setTaskID(const uci::type::TaskID_Type& accessor) {
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TraceabilityType& ProductManagementTaskDataType::getTraceability_() const {
  if (traceability_Accessor) {
    return *traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getTraceability(): An attempt was made to get an optional field that was not enabled, call hasTraceability() to determine if it is safe to call getTraceability()");
}

const uci::type::TraceabilityType& ProductManagementTaskDataType::getTraceability() const {
  return getTraceability_();
}

uci::type::TraceabilityType& ProductManagementTaskDataType::getTraceability() {
  return getTraceability_();
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setTraceability(const uci::type::TraceabilityType& accessor) {
  enableTraceability();
  if (&accessor != traceability_Accessor.get()) {
    traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductManagementTaskDataType::hasTraceability() const noexcept {
  return static_cast<bool>(traceability_Accessor);
}

uci::type::TraceabilityType& ProductManagementTaskDataType::enableTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::traceabilityType : type};
  if ((!traceability_Accessor) || (traceability_Accessor->getAccessorType() != requestedType)) {
    traceability_Accessor = TraceabilityType::create(requestedType);
    if (!traceability_Accessor) {
      throw uci::base::UCIException("Error in enableTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *traceability_Accessor;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::clearTraceability() noexcept {
  traceability_Accessor.reset();
  return *this;
}

const uci::type::ProductManagementTaskDataType::DependentTask& ProductManagementTaskDataType::getDependentTask() const {
  return *dependentTask_Accessor;
}

uci::type::ProductManagementTaskDataType::DependentTask& ProductManagementTaskDataType::getDependentTask() {
  return *dependentTask_Accessor;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setDependentTask(const uci::type::ProductManagementTaskDataType::DependentTask& accessor) {
  if (&accessor != dependentTask_Accessor.get()) {
    dependentTask_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductManagementTaskDataType::ConcurrentTask& ProductManagementTaskDataType::getConcurrentTask() const {
  return *concurrentTask_Accessor;
}

uci::type::ProductManagementTaskDataType::ConcurrentTask& ProductManagementTaskDataType::getConcurrentTask() {
  return *concurrentTask_Accessor;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setConcurrentTask(const uci::type::ProductManagementTaskDataType::ConcurrentTask& accessor) {
  if (&accessor != concurrentTask_Accessor.get()) {
    concurrentTask_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComparableRankingType& ProductManagementTaskDataType::getRank() const {
  return *rank_Accessor;
}

uci::type::ComparableRankingType& ProductManagementTaskDataType::getRank() {
  return *rank_Accessor;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setRank(const uci::type::ComparableRankingType& accessor) {
  if (&accessor != rank_Accessor.get()) {
    rank_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DownloadPriorityEnum& ProductManagementTaskDataType::getPreemptLowerRank() const {
  return *preemptLowerRank_Accessor;
}

uci::type::DownloadPriorityEnum& ProductManagementTaskDataType::getPreemptLowerRank() {
  return *preemptLowerRank_Accessor;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setPreemptLowerRank(const uci::type::DownloadPriorityEnum& accessor) {
  if (&accessor != preemptLowerRank_Accessor.get()) {
    preemptLowerRank_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setPreemptLowerRank(uci::type::DownloadPriorityEnum::EnumerationItem value) {
  preemptLowerRank_Accessor->setValue(value);
  return *this;
}


uci::type::RemarksType& ProductManagementTaskDataType::getRemarks_() const {
  if (remarks_Accessor) {
    return *remarks_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarks(): An attempt was made to get an optional field that was not enabled, call hasRemarks() to determine if it is safe to call getRemarks()");
}

const uci::type::RemarksType& ProductManagementTaskDataType::getRemarks() const {
  return getRemarks_();
}

uci::type::RemarksType& ProductManagementTaskDataType::getRemarks() {
  return getRemarks_();
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::setRemarks(const uci::type::RemarksType& accessor) {
  enableRemarks();
  if (&accessor != remarks_Accessor.get()) {
    remarks_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductManagementTaskDataType::hasRemarks() const noexcept {
  return static_cast<bool>(remarks_Accessor);
}

uci::type::RemarksType& ProductManagementTaskDataType::enableRemarks(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remarksType : type};
  if ((!remarks_Accessor) || (remarks_Accessor->getAccessorType() != requestedType)) {
    remarks_Accessor = RemarksType::create(requestedType);
    if (!remarks_Accessor) {
      throw uci::base::UCIException("Error in enableRemarks(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remarks_Accessor;
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::clearRemarks() noexcept {
  remarks_Accessor.reset();
  return *this;
}

std::unique_ptr<ProductManagementTaskDataType> ProductManagementTaskDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productManagementTaskDataType : type};
  return std::unique_ptr<ProductManagementTaskDataType>(dynamic_cast<ProductManagementTaskDataType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ProductManagementTaskDataType_Names {

constexpr const char* Extern_Type_Name{"ProductManagementTaskDataType"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* DependentTask_Name{"DependentTask"};
constexpr const char* ConcurrentTask_Name{"ConcurrentTask"};
constexpr const char* Rank_Name{"Rank"};
constexpr const char* PreemptLowerRank_Name{"PreemptLowerRank"};
constexpr const char* Remarks_Name{"Remarks"};

} // namespace ProductManagementTaskDataType_Names

void ProductManagementTaskDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductManagementTaskDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductManagementTaskDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductManagementTaskDataType_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductManagementTaskDataType_Names::Traceability_Name) {
      TraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductManagementTaskDataType_Names::DependentTask_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductManagementTaskDataType::DependentTask& boundedList = accessor.getDependentTask();
        const uci::type::ProductManagementTaskDataType::DependentTask::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DependentTaskType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductManagementTaskDataType_Names::ConcurrentTask_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductManagementTaskDataType::ConcurrentTask& boundedList = accessor.getConcurrentTask();
        const uci::type::ProductManagementTaskDataType::ConcurrentTask::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ConcurrentTaskReferenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductManagementTaskDataType_Names::Rank_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.getRank(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductManagementTaskDataType_Names::PreemptLowerRank_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPreemptLowerRank().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductManagementTaskDataType_Names::Remarks_Name) {
      RemarksType::deserialize(valueType.second, accessor.enableRemarks(), nodeName, nsPrefix);
    }
  }
}

std::string ProductManagementTaskDataType::serialize(const uci::type::ProductManagementTaskDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductManagementTaskDataType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::productManagementTaskDataType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductManagementTaskDataType_Names::Extern_Type_Name);
    }
    TaskID_Type::serialize(accessor.getTaskID(), node, ProductManagementTaskDataType_Names::TaskID_Name);
    if (accessor.hasTraceability()) {
      TraceabilityType::serialize(accessor.getTraceability(), node, ProductManagementTaskDataType_Names::Traceability_Name);
    }
    {
      const uci::type::ProductManagementTaskDataType::DependentTask& boundedList = accessor.getDependentTask();
      for (uci::type::ProductManagementTaskDataType::DependentTask::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::DependentTaskType::serialize(boundedList.at(i), node, ProductManagementTaskDataType_Names::DependentTask_Name);
      }
    }
    {
      const uci::type::ProductManagementTaskDataType::ConcurrentTask& boundedList = accessor.getConcurrentTask();
      for (uci::type::ProductManagementTaskDataType::ConcurrentTask::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ConcurrentTaskReferenceType::serialize(boundedList.at(i), node, ProductManagementTaskDataType_Names::ConcurrentTask_Name);
      }
    }
    ComparableRankingType::serialize(accessor.getRank(), node, ProductManagementTaskDataType_Names::Rank_Name);
    DownloadPriorityEnum::serialize(accessor.getPreemptLowerRank(), node, ProductManagementTaskDataType_Names::PreemptLowerRank_Name, false);
    if (accessor.hasRemarks()) {
      RemarksType::serialize(accessor.getRemarks(), node, ProductManagementTaskDataType_Names::Remarks_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductManagementTaskDataType>().release());
}

uci::type::ProductManagementTaskDataType& ProductManagementTaskDataType::create(const uci::type::ProductManagementTaskDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductManagementTaskDataType> newAccessor{boost::make_unique<asb_uci::type::ProductManagementTaskDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductManagementTaskDataType::destroy(uci::type::ProductManagementTaskDataType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductManagementTaskDataType*>(&accessor);
}

} // namespace type

} // namespace uci

