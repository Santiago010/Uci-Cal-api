/** @file HeaderType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/HeaderType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/MessageModeEnum.h"
#include "../../../include/asb_uci/type/MissionID_Type.h"
#include "../../../include/asb_uci/type/ServiceID_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/UCI_SchemaVersionStringType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/HeaderType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MessageModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UCI_SchemaVersionStringType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

HeaderType::HeaderType()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    schemaVersion_Accessor{boost::make_unique<UCI_SchemaVersionStringType>()},
    mode_Accessor{boost::make_unique<MessageModeEnum>()} {
}

HeaderType::HeaderType(const HeaderType& rhs)
    : uci::type::HeaderType(rhs)  // Llama al constructor de copia de la clase base
{
    // Copia profunda de los miembros Ãºnicos
    if (rhs.systemID_Accessor) {
        systemID_Accessor = boost::make_unique<SystemID_Type>(*rhs.systemID_Accessor);
    } else {
        systemID_Accessor.reset();
    }

    timestamp_Accessor = rhs.timestamp_Accessor;

    if (rhs.schemaVersion_Accessor) {
        schemaVersion_Accessor = boost::make_unique<UCI_SchemaVersionStringType>(*rhs.schemaVersion_Accessor);
    } else {
        schemaVersion_Accessor.reset();
    }

    if (rhs.mode_Accessor) {
        mode_Accessor = boost::make_unique<MessageModeEnum>(*rhs.mode_Accessor);
    } else {
        mode_Accessor.reset();
    }

    if (rhs.serviceID_Accessor) {
        serviceID_Accessor = boost::make_unique<ServiceID_Type>(*rhs.serviceID_Accessor);
    } else {
        serviceID_Accessor.reset();
    }

    if (rhs.missionID_Accessor) {
        missionID_Accessor = boost::make_unique<MissionID_Type>(*rhs.missionID_Accessor);
    } else {
        missionID_Accessor.reset();
    }
}

HeaderType::~HeaderType() = default;

void HeaderType::copy(const uci::type::HeaderType& accessor) {
  copyImpl(accessor, false);
}

void HeaderType::copyImpl(const uci::type::HeaderType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const HeaderType&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setTimestamp(accessorImpl.timestamp_Accessor);
    setSchemaVersion(*(accessorImpl.schemaVersion_Accessor));
    setMode(*(accessorImpl.mode_Accessor));
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
    if (accessorImpl.missionID_Accessor) {
      setMissionID(*(accessorImpl.missionID_Accessor));
    } else {
      missionID_Accessor.reset();
    }
  }
}

void HeaderType::reset() noexcept {
  systemID_Accessor->reset();
  timestamp_Accessor = 0;
  schemaVersion_Accessor->reset();
  mode_Accessor->reset();
  serviceID_Accessor.reset();
  missionID_Accessor.reset();
}

const uci::type::SystemID_Type& HeaderType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& HeaderType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::HeaderType& HeaderType::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue HeaderType::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::HeaderType& HeaderType::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


const uci::type::UCI_SchemaVersionStringType& HeaderType::getSchemaVersion() const noexcept {
  return *schemaVersion_Accessor;
}

uci::type::UCI_SchemaVersionStringType& HeaderType::getSchemaVersion() noexcept {
  return *schemaVersion_Accessor;
}

uci::type::HeaderType& HeaderType::setSchemaVersion(const uci::type::UCI_SchemaVersionStringType& value) {
  return setSchemaVersion(value.c_str());
}

uci::type::HeaderType& HeaderType::setSchemaVersion(const std::string& value) {
  return setSchemaVersion(value.c_str());
}

uci::type::HeaderType& HeaderType::setSchemaVersion(const char* value) {
  schemaVersion_Accessor->setStringValue(value);
  return *this;
}

const uci::type::MessageModeEnum& HeaderType::getMode() const {
  return *mode_Accessor;
}

uci::type::MessageModeEnum& HeaderType::getMode() {
  return *mode_Accessor;
}

uci::type::HeaderType& HeaderType::setMode(const uci::type::MessageModeEnum& accessor) {
  if (&accessor != mode_Accessor.get()) {
    mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::HeaderType& HeaderType::setMode(uci::type::MessageModeEnum::EnumerationItem value) {
  mode_Accessor->setValue(value);
  return *this;
}


uci::type::ServiceID_Type& HeaderType::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& HeaderType::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& HeaderType::getServiceID() {
  return getServiceID_();
}

uci::type::HeaderType& HeaderType::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool HeaderType::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& HeaderType::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::createServiceIDType(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::HeaderType& HeaderType::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

uci::type::MissionID_Type& HeaderType::getMissionID_() const {
  if (missionID_Accessor) {
    return *missionID_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionID(): An attempt was made to get an optional field that was not enabled, call hasMissionID() to determine if it is safe to call getMissionID()");
}

const uci::type::MissionID_Type& HeaderType::getMissionID() const {
  return getMissionID_();
}

uci::type::MissionID_Type& HeaderType::getMissionID() {
  return getMissionID_();
}

uci::type::HeaderType& HeaderType::setMissionID(const uci::type::MissionID_Type& accessor) {
  enableMissionID();
  if (&accessor != missionID_Accessor.get()) {
    missionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool HeaderType::hasMissionID() const noexcept {
  return static_cast<bool>(missionID_Accessor);
}

uci::type::MissionID_Type& HeaderType::enableMissionID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionID_Type : type};
  if ((!missionID_Accessor) || (missionID_Accessor->getAccessorType() != requestedType)) {
    missionID_Accessor = MissionID_Type::create(requestedType);
    if (!missionID_Accessor) {
      throw uci::base::UCIException("Error in enableMissionID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionID_Accessor;
}

uci::type::HeaderType& HeaderType::clearMissionID() noexcept {
  missionID_Accessor.reset();
  return *this;
}

std::unique_ptr<HeaderType> HeaderType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::headerType : type};
  return (requestedType == uci::type::accessorType::headerType) ? boost::make_unique<HeaderType>() : nullptr;
}

/**  */
namespace HeaderType_Names {

constexpr const char* Extern_Type_Name{"HeaderType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* SchemaVersion_Name{"SchemaVersion"};
constexpr const char* Mode_Name{"Mode"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* MissionID_Name{"MissionID"};

} // namespace HeaderType_Names

void HeaderType::deserialize(const boost::property_tree::ptree& propTree, uci::type::HeaderType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = HeaderType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + HeaderType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + HeaderType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + HeaderType_Names::SchemaVersion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSchemaVersion(*value);
      }
    } else if (valueType.first == nsPrefix + HeaderType_Names::Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + HeaderType_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + HeaderType_Names::MissionID_Name) {
      MissionID_Type::deserialize(valueType.second, accessor.enableMissionID(), nodeName, nsPrefix);
    }
  }
}

std::string HeaderType::serialize(const uci::type::HeaderType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? HeaderType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, HeaderType_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, HeaderType_Names::SystemID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, HeaderType_Names::Timestamp_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getSchemaVersion(), node, HeaderType_Names::SchemaVersion_Name);
  MessageModeEnum::serialize(accessor.getMode(), node, HeaderType_Names::Mode_Name, false);
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, HeaderType_Names::ServiceID_Name);
  }
  if (accessor.hasMissionID()) {
    MissionID_Type::serialize(accessor.getMissionID(), node, HeaderType_Names::MissionID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::HeaderType& HeaderType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::HeaderType>().release());
}

uci::type::HeaderType& HeaderType::create(const uci::type::HeaderType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::HeaderType> newAccessor{boost::make_unique<asb_uci::type::HeaderType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void HeaderType::destroy(uci::type::HeaderType& accessor) {
  delete dynamic_cast<asb_uci::type::HeaderType*>(&accessor);
}

} // namespace type

} // namespace uci

