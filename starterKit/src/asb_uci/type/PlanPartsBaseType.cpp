/** @file PlanPartsBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanPartsBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActionPlanPartsType.h"
#include "../../../include/asb_uci/type/EffectPlanPartsType.h"
#include "../../../include/asb_uci/type/ResponsePlanPartsType.h"
#include "../../../include/asb_uci/type/TaskPlanPartsType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActionPlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectPlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanPartsBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponsePlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskPlanPartsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanPartsBaseType::PlanPartsBaseType() = default;

PlanPartsBaseType::~PlanPartsBaseType() = default;

void PlanPartsBaseType::copy(const uci::type::PlanPartsBaseType& accessor) {
  copyImpl(accessor, false);
}

void PlanPartsBaseType::copyImpl(const uci::type::PlanPartsBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planPartsBaseType)) {
      const auto& accessorImpl = dynamic_cast<const PlanPartsBaseType&>(accessor);
      if (accessorImpl.effectPlan_Accessor) {
        setEffectPlan(*(accessorImpl.effectPlan_Accessor));
      } else {
        effectPlan_Accessor.reset();
      }
      if (accessorImpl.actionPlan_Accessor) {
        setActionPlan(*(accessorImpl.actionPlan_Accessor));
      } else {
        actionPlan_Accessor.reset();
      }
      if (accessorImpl.taskPlan_Accessor) {
        setTaskPlan(*(accessorImpl.taskPlan_Accessor));
      } else {
        taskPlan_Accessor.reset();
      }
      if (accessorImpl.responsePlan_Accessor) {
        setResponsePlan(*(accessorImpl.responsePlan_Accessor));
      } else {
        responsePlan_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlanPartsBaseType::reset() noexcept {
  effectPlan_Accessor.reset();
  actionPlan_Accessor.reset();
  taskPlan_Accessor.reset();
  responsePlan_Accessor.reset();
}

uci::type::EffectPlanPartsType& PlanPartsBaseType::getEffectPlan_() const {
  if (effectPlan_Accessor) {
    return *effectPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectPlan(): An attempt was made to get an optional field that was not enabled, call hasEffectPlan() to determine if it is safe to call getEffectPlan()");
}

const uci::type::EffectPlanPartsType& PlanPartsBaseType::getEffectPlan() const {
  return getEffectPlan_();
}

uci::type::EffectPlanPartsType& PlanPartsBaseType::getEffectPlan() {
  return getEffectPlan_();
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::setEffectPlan(const uci::type::EffectPlanPartsType& accessor) {
  enableEffectPlan();
  if (&accessor != effectPlan_Accessor.get()) {
    effectPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanPartsBaseType::hasEffectPlan() const noexcept {
  return static_cast<bool>(effectPlan_Accessor);
}

uci::type::EffectPlanPartsType& PlanPartsBaseType::enableEffectPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanPartsType : type};
  if ((!effectPlan_Accessor) || (effectPlan_Accessor->getAccessorType() != requestedType)) {
    effectPlan_Accessor = EffectPlanPartsType::create(requestedType);
    if (!effectPlan_Accessor) {
      throw uci::base::UCIException("Error in enableEffectPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectPlan_Accessor;
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::clearEffectPlan() noexcept {
  effectPlan_Accessor.reset();
  return *this;
}

uci::type::ActionPlanPartsType& PlanPartsBaseType::getActionPlan_() const {
  if (actionPlan_Accessor) {
    return *actionPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getActionPlan(): An attempt was made to get an optional field that was not enabled, call hasActionPlan() to determine if it is safe to call getActionPlan()");
}

const uci::type::ActionPlanPartsType& PlanPartsBaseType::getActionPlan() const {
  return getActionPlan_();
}

uci::type::ActionPlanPartsType& PlanPartsBaseType::getActionPlan() {
  return getActionPlan_();
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::setActionPlan(const uci::type::ActionPlanPartsType& accessor) {
  enableActionPlan();
  if (&accessor != actionPlan_Accessor.get()) {
    actionPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanPartsBaseType::hasActionPlan() const noexcept {
  return static_cast<bool>(actionPlan_Accessor);
}

uci::type::ActionPlanPartsType& PlanPartsBaseType::enableActionPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanPartsType : type};
  if ((!actionPlan_Accessor) || (actionPlan_Accessor->getAccessorType() != requestedType)) {
    actionPlan_Accessor = ActionPlanPartsType::create(requestedType);
    if (!actionPlan_Accessor) {
      throw uci::base::UCIException("Error in enableActionPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionPlan_Accessor;
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::clearActionPlan() noexcept {
  actionPlan_Accessor.reset();
  return *this;
}

uci::type::TaskPlanPartsType& PlanPartsBaseType::getTaskPlan_() const {
  if (taskPlan_Accessor) {
    return *taskPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskPlan(): An attempt was made to get an optional field that was not enabled, call hasTaskPlan() to determine if it is safe to call getTaskPlan()");
}

const uci::type::TaskPlanPartsType& PlanPartsBaseType::getTaskPlan() const {
  return getTaskPlan_();
}

uci::type::TaskPlanPartsType& PlanPartsBaseType::getTaskPlan() {
  return getTaskPlan_();
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::setTaskPlan(const uci::type::TaskPlanPartsType& accessor) {
  enableTaskPlan();
  if (&accessor != taskPlan_Accessor.get()) {
    taskPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanPartsBaseType::hasTaskPlan() const noexcept {
  return static_cast<bool>(taskPlan_Accessor);
}

uci::type::TaskPlanPartsType& PlanPartsBaseType::enableTaskPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskPlanPartsType : type};
  if ((!taskPlan_Accessor) || (taskPlan_Accessor->getAccessorType() != requestedType)) {
    taskPlan_Accessor = TaskPlanPartsType::create(requestedType);
    if (!taskPlan_Accessor) {
      throw uci::base::UCIException("Error in enableTaskPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskPlan_Accessor;
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::clearTaskPlan() noexcept {
  taskPlan_Accessor.reset();
  return *this;
}

uci::type::ResponsePlanPartsType& PlanPartsBaseType::getResponsePlan_() const {
  if (responsePlan_Accessor) {
    return *responsePlan_Accessor;
  }
  throw uci::base::UCIException("Error in getResponsePlan(): An attempt was made to get an optional field that was not enabled, call hasResponsePlan() to determine if it is safe to call getResponsePlan()");
}

const uci::type::ResponsePlanPartsType& PlanPartsBaseType::getResponsePlan() const {
  return getResponsePlan_();
}

uci::type::ResponsePlanPartsType& PlanPartsBaseType::getResponsePlan() {
  return getResponsePlan_();
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::setResponsePlan(const uci::type::ResponsePlanPartsType& accessor) {
  enableResponsePlan();
  if (&accessor != responsePlan_Accessor.get()) {
    responsePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanPartsBaseType::hasResponsePlan() const noexcept {
  return static_cast<bool>(responsePlan_Accessor);
}

uci::type::ResponsePlanPartsType& PlanPartsBaseType::enableResponsePlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responsePlanPartsType : type};
  if ((!responsePlan_Accessor) || (responsePlan_Accessor->getAccessorType() != requestedType)) {
    responsePlan_Accessor = ResponsePlanPartsType::create(requestedType);
    if (!responsePlan_Accessor) {
      throw uci::base::UCIException("Error in enableResponsePlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responsePlan_Accessor;
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::clearResponsePlan() noexcept {
  responsePlan_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanPartsBaseType> PlanPartsBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planPartsBaseType : type};
  return std::unique_ptr<PlanPartsBaseType>(dynamic_cast<PlanPartsBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlanPartsBaseType_Names {

constexpr const char* Extern_Type_Name{"PlanPartsBaseType"};
constexpr const char* EffectPlan_Name{"EffectPlan"};
constexpr const char* ActionPlan_Name{"ActionPlan"};
constexpr const char* TaskPlan_Name{"TaskPlan"};
constexpr const char* ResponsePlan_Name{"ResponsePlan"};

} // namespace PlanPartsBaseType_Names

void PlanPartsBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanPartsBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanPartsBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanPartsBaseType_Names::EffectPlan_Name) {
      EffectPlanPartsType::deserialize(valueType.second, accessor.enableEffectPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPartsBaseType_Names::ActionPlan_Name) {
      ActionPlanPartsType::deserialize(valueType.second, accessor.enableActionPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPartsBaseType_Names::TaskPlan_Name) {
      TaskPlanPartsType::deserialize(valueType.second, accessor.enableTaskPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPartsBaseType_Names::ResponsePlan_Name) {
      ResponsePlanPartsType::deserialize(valueType.second, accessor.enableResponsePlan(), nodeName, nsPrefix);
    }
  }
}

std::string PlanPartsBaseType::serialize(const uci::type::PlanPartsBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanPartsBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planPartsBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanPartsBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasEffectPlan()) {
      EffectPlanPartsType::serialize(accessor.getEffectPlan(), node, PlanPartsBaseType_Names::EffectPlan_Name);
    }
    if (accessor.hasActionPlan()) {
      ActionPlanPartsType::serialize(accessor.getActionPlan(), node, PlanPartsBaseType_Names::ActionPlan_Name);
    }
    if (accessor.hasTaskPlan()) {
      TaskPlanPartsType::serialize(accessor.getTaskPlan(), node, PlanPartsBaseType_Names::TaskPlan_Name);
    }
    if (accessor.hasResponsePlan()) {
      ResponsePlanPartsType::serialize(accessor.getResponsePlan(), node, PlanPartsBaseType_Names::ResponsePlan_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanPartsBaseType& PlanPartsBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanPartsBaseType>().release());
}

uci::type::PlanPartsBaseType& PlanPartsBaseType::create(const uci::type::PlanPartsBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanPartsBaseType> newAccessor{boost::make_unique<asb_uci::type::PlanPartsBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanPartsBaseType::destroy(uci::type::PlanPartsBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanPartsBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

