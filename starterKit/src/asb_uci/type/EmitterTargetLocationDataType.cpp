/** @file EmitterTargetLocationDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EmitterTargetLocationDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmitterSourceID_ChoiceType.h"
#include "../../../include/asb_uci/type/FOV_VolumeType.h"
#include "../../../include/asb_uci/type/PointTargetType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterSourceID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterTargetLocationDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FOV_VolumeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PointTargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterTargetLocationDataType::EmitterTargetLocationDataType() = default;

EmitterTargetLocationDataType::~EmitterTargetLocationDataType() = default;

void EmitterTargetLocationDataType::copy(const uci::type::EmitterTargetLocationDataType& accessor) {
  copyImpl(accessor, false);
}

void EmitterTargetLocationDataType::copyImpl(const uci::type::EmitterTargetLocationDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterTargetLocationDataType&>(accessor);
    if (accessorImpl.emitterSourceID_Accessor) {
      setEmitterSourceID(*(accessorImpl.emitterSourceID_Accessor));
    } else {
      emitterSourceID_Accessor.reset();
    }
    if (accessorImpl.fOV_Accessor) {
      setFOV(*(accessorImpl.fOV_Accessor));
    } else {
      fOV_Accessor.reset();
    }
    if (accessorImpl.pointTarget_Accessor) {
      setPointTarget(*(accessorImpl.pointTarget_Accessor));
    } else {
      pointTarget_Accessor.reset();
    }
  }
}

void EmitterTargetLocationDataType::reset() noexcept {
  emitterSourceID_Accessor.reset();
  fOV_Accessor.reset();
  pointTarget_Accessor.reset();
}

uci::type::EmitterTargetLocationDataType::EmitterTargetLocationDataTypeChoice EmitterTargetLocationDataType::getEmitterTargetLocationDataTypeChoiceOrdinal() const noexcept {
  if (emitterSourceID_Accessor) {
    return EMITTERTARGETLOCATIONDATATYPE_CHOICE_EMITTERSOURCEID;
  }
  if (fOV_Accessor) {
    return EMITTERTARGETLOCATIONDATATYPE_CHOICE_FOV;
  }
  if (pointTarget_Accessor) {
    return EMITTERTARGETLOCATIONDATATYPE_CHOICE_POINTTARGET;
  }
  return EMITTERTARGETLOCATIONDATATYPE_CHOICE_NONE;
}

uci::type::EmitterTargetLocationDataType& EmitterTargetLocationDataType::setEmitterTargetLocationDataTypeChoiceOrdinal(uci::type::EmitterTargetLocationDataType::EmitterTargetLocationDataTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EMITTERTARGETLOCATIONDATATYPE_CHOICE_EMITTERSOURCEID:
      chooseEmitterSourceID("setEmitterTargetLocationDataTypeChoiceOrdinal", type);
      break;
    case EMITTERTARGETLOCATIONDATATYPE_CHOICE_FOV:
      chooseFOV("setEmitterTargetLocationDataTypeChoiceOrdinal", type);
      break;
    case EMITTERTARGETLOCATIONDATATYPE_CHOICE_POINTTARGET:
      choosePointTarget("setEmitterTargetLocationDataTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEmitterTargetLocationDataTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmitterSourceID_ChoiceType& EmitterTargetLocationDataType::getEmitterSourceID_() const {
  if (emitterSourceID_Accessor) {
    return *emitterSourceID_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterSourceID(): Unable to get EmitterSourceID, field not selected");
}

const uci::type::EmitterSourceID_ChoiceType& EmitterTargetLocationDataType::getEmitterSourceID() const {
  return getEmitterSourceID_();
}

uci::type::EmitterSourceID_ChoiceType& EmitterTargetLocationDataType::getEmitterSourceID() {
  return getEmitterSourceID_();
}

uci::type::EmitterTargetLocationDataType& EmitterTargetLocationDataType::setEmitterSourceID(const uci::type::EmitterSourceID_ChoiceType& accessor) {
  chooseEmitterSourceID(accessor.getAccessorType());
  if (&accessor != emitterSourceID_Accessor.get()) {
    emitterSourceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterTargetLocationDataType::isEmitterSourceID() const noexcept {
  return static_cast<bool>(emitterSourceID_Accessor);
}

uci::type::EmitterSourceID_ChoiceType& EmitterTargetLocationDataType::chooseEmitterSourceID(const std::string& method, uci::base::accessorType::AccessorType type) {
  fOV_Accessor.reset();
  pointTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterSourceID_ChoiceType : type};
  if ((!emitterSourceID_Accessor) || (emitterSourceID_Accessor->getAccessorType() != requestedType)) {
    emitterSourceID_Accessor = EmitterSourceID_ChoiceType::create(type);
    if (!emitterSourceID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emitterSourceID_Accessor;
}

uci::type::EmitterSourceID_ChoiceType& EmitterTargetLocationDataType::chooseEmitterSourceID(uci::base::accessorType::AccessorType type) {
  return chooseEmitterSourceID("chooseEmitterSourceID", type);
}

uci::type::FOV_VolumeType& EmitterTargetLocationDataType::getFOV_() const {
  if (fOV_Accessor) {
    return *fOV_Accessor;
  }
  throw uci::base::UCIException("Error in getFOV(): Unable to get FOV, field not selected");
}

const uci::type::FOV_VolumeType& EmitterTargetLocationDataType::getFOV() const {
  return getFOV_();
}

uci::type::FOV_VolumeType& EmitterTargetLocationDataType::getFOV() {
  return getFOV_();
}

uci::type::EmitterTargetLocationDataType& EmitterTargetLocationDataType::setFOV(const uci::type::FOV_VolumeType& accessor) {
  chooseFOV();
  if (&accessor != fOV_Accessor.get()) {
    fOV_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterTargetLocationDataType::isFOV() const noexcept {
  return static_cast<bool>(fOV_Accessor);
}

uci::type::FOV_VolumeType& EmitterTargetLocationDataType::chooseFOV(const std::string& method, uci::base::accessorType::AccessorType type) {
  emitterSourceID_Accessor.reset();
  pointTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOV_VolumeType : type};
  if ((!fOV_Accessor) || (fOV_Accessor->getAccessorType() != requestedType)) {
    fOV_Accessor = FOV_VolumeType::create(type);
    if (!fOV_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fOV_Accessor;
}

uci::type::FOV_VolumeType& EmitterTargetLocationDataType::chooseFOV(uci::base::accessorType::AccessorType type) {
  return chooseFOV("chooseFOV", type);
}

uci::type::PointTargetType& EmitterTargetLocationDataType::getPointTarget_() const {
  if (pointTarget_Accessor) {
    return *pointTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getPointTarget(): Unable to get PointTarget, field not selected");
}

const uci::type::PointTargetType& EmitterTargetLocationDataType::getPointTarget() const {
  return getPointTarget_();
}

uci::type::PointTargetType& EmitterTargetLocationDataType::getPointTarget() {
  return getPointTarget_();
}

uci::type::EmitterTargetLocationDataType& EmitterTargetLocationDataType::setPointTarget(const uci::type::PointTargetType& accessor) {
  choosePointTarget();
  if (&accessor != pointTarget_Accessor.get()) {
    pointTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterTargetLocationDataType::isPointTarget() const noexcept {
  return static_cast<bool>(pointTarget_Accessor);
}

uci::type::PointTargetType& EmitterTargetLocationDataType::choosePointTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  emitterSourceID_Accessor.reset();
  fOV_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pointTargetType : type};
  if ((!pointTarget_Accessor) || (pointTarget_Accessor->getAccessorType() != requestedType)) {
    pointTarget_Accessor = PointTargetType::create(type);
    if (!pointTarget_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointTarget_Accessor;
}

uci::type::PointTargetType& EmitterTargetLocationDataType::choosePointTarget(uci::base::accessorType::AccessorType type) {
  return choosePointTarget("choosePointTarget", type);
}

std::unique_ptr<EmitterTargetLocationDataType> EmitterTargetLocationDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterTargetLocationDataType : type};
  return (requestedType == uci::type::accessorType::emitterTargetLocationDataType) ? boost::make_unique<EmitterTargetLocationDataType>() : nullptr;
}

/**  */
namespace EmitterTargetLocationDataType_Names {

constexpr const char* Extern_Type_Name{"EmitterTargetLocationDataType"};
constexpr const char* EmitterSourceID_Name{"EmitterSourceID"};
constexpr const char* FOV_Name{"FOV"};
constexpr const char* PointTarget_Name{"PointTarget"};

} // namespace EmitterTargetLocationDataType_Names

void EmitterTargetLocationDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterTargetLocationDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterTargetLocationDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterTargetLocationDataType_Names::EmitterSourceID_Name) {
      EmitterSourceID_ChoiceType::deserialize(valueType.second, accessor.chooseEmitterSourceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterTargetLocationDataType_Names::FOV_Name) {
      FOV_VolumeType::deserialize(valueType.second, accessor.chooseFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterTargetLocationDataType_Names::PointTarget_Name) {
      PointTargetType::deserialize(valueType.second, accessor.choosePointTarget(), nodeName, nsPrefix);
    }
  }
}

std::string EmitterTargetLocationDataType::serialize(const uci::type::EmitterTargetLocationDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterTargetLocationDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterTargetLocationDataType_Names::Extern_Type_Name);
  }
  if (accessor.isEmitterSourceID()) {
    EmitterSourceID_ChoiceType::serialize(accessor.getEmitterSourceID(), node, EmitterTargetLocationDataType_Names::EmitterSourceID_Name);
  } else if (accessor.isFOV()) {
    FOV_VolumeType::serialize(accessor.getFOV(), node, EmitterTargetLocationDataType_Names::FOV_Name);
  } else if (accessor.isPointTarget()) {
    PointTargetType::serialize(accessor.getPointTarget(), node, EmitterTargetLocationDataType_Names::PointTarget_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterTargetLocationDataType& EmitterTargetLocationDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterTargetLocationDataType>().release());
}

uci::type::EmitterTargetLocationDataType& EmitterTargetLocationDataType::create(const uci::type::EmitterTargetLocationDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterTargetLocationDataType> newAccessor{boost::make_unique<asb_uci::type::EmitterTargetLocationDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterTargetLocationDataType::destroy(uci::type::EmitterTargetLocationDataType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterTargetLocationDataType*>(&accessor);
}

} // namespace type

} // namespace uci

