/** @file CommLink16DelayReductionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommLink16DelayReductionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16DelayReductionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_MessageLabelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_MessageSubLabelType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommLink16DelayReductionType::CommLink16DelayReductionType() = default;

CommLink16DelayReductionType::~CommLink16DelayReductionType() = default;

void CommLink16DelayReductionType::copy(const uci::type::CommLink16DelayReductionType& accessor) {
  copyImpl(accessor, false);
}

void CommLink16DelayReductionType::copyImpl(const uci::type::CommLink16DelayReductionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommLink16DelayReductionType&>(accessor);
    setUseMIDS_DelayReduction(accessorImpl.useMIDS_DelayReduction_Accessor);
    setMessageLabel(accessorImpl.messageLabel_Accessor);
    setLink16_MessageSubLabelType(accessorImpl.link16_MessageSubLabelType_Accessor);
  }
}

void CommLink16DelayReductionType::reset() noexcept {
  useMIDS_DelayReduction_Accessor = false;
  messageLabel_Accessor = 0;
  link16_MessageSubLabelType_Accessor = 0;
}

xs::Boolean CommLink16DelayReductionType::getUseMIDS_DelayReduction() const {
  return useMIDS_DelayReduction_Accessor;
}

uci::type::CommLink16DelayReductionType& CommLink16DelayReductionType::setUseMIDS_DelayReduction(xs::Boolean value) {
  useMIDS_DelayReduction_Accessor = value;
  return *this;
}


uci::type::Link16_MessageLabelTypeValue CommLink16DelayReductionType::getMessageLabel() const {
  return messageLabel_Accessor;
}

uci::type::CommLink16DelayReductionType& CommLink16DelayReductionType::setMessageLabel(uci::type::Link16_MessageLabelTypeValue value) {
  messageLabel_Accessor = value;
  return *this;
}


uci::type::Link16_MessageSubLabelTypeValue CommLink16DelayReductionType::getLink16_MessageSubLabelType() const {
  return link16_MessageSubLabelType_Accessor;
}

uci::type::CommLink16DelayReductionType& CommLink16DelayReductionType::setLink16_MessageSubLabelType(uci::type::Link16_MessageSubLabelTypeValue value) {
  link16_MessageSubLabelType_Accessor = value;
  return *this;
}


std::unique_ptr<CommLink16DelayReductionType> CommLink16DelayReductionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16DelayReductionType : type};
  return (requestedType == uci::type::accessorType::commLink16DelayReductionType) ? boost::make_unique<CommLink16DelayReductionType>() : nullptr;
}

/**  */
namespace CommLink16DelayReductionType_Names {

constexpr const char* Extern_Type_Name{"CommLink16DelayReductionType"};
constexpr const char* UseMIDS_DelayReduction_Name{"UseMIDS_DelayReduction"};
constexpr const char* MessageLabel_Name{"MessageLabel"};
constexpr const char* Link16_MessageSubLabelType_Name{"Link16_MessageSubLabelType"};

} // namespace CommLink16DelayReductionType_Names

void CommLink16DelayReductionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLink16DelayReductionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLink16DelayReductionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommLink16DelayReductionType_Names::UseMIDS_DelayReduction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUseMIDS_DelayReduction(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16DelayReductionType_Names::MessageLabel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMessageLabel(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16DelayReductionType_Names::Link16_MessageSubLabelType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLink16_MessageSubLabelType(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    }
  }
}

std::string CommLink16DelayReductionType::serialize(const uci::type::CommLink16DelayReductionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommLink16DelayReductionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommLink16DelayReductionType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUseMIDS_DelayReduction(), node, CommLink16DelayReductionType_Names::UseMIDS_DelayReduction_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getMessageLabel(), node, CommLink16DelayReductionType_Names::MessageLabel_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getLink16_MessageSubLabelType(), node, CommLink16DelayReductionType_Names::Link16_MessageSubLabelType_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommLink16DelayReductionType& CommLink16DelayReductionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommLink16DelayReductionType>().release());
}

uci::type::CommLink16DelayReductionType& CommLink16DelayReductionType::create(const uci::type::CommLink16DelayReductionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommLink16DelayReductionType> newAccessor{boost::make_unique<asb_uci::type::CommLink16DelayReductionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommLink16DelayReductionType::destroy(uci::type::CommLink16DelayReductionType& accessor) {
  delete dynamic_cast<asb_uci::type::CommLink16DelayReductionType*>(&accessor);
}

} // namespace type

} // namespace uci

