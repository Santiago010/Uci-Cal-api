/** @file PlanningGuidelineType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanningGuidelineType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ClimbOptimizationEnum.h"
#include "../../../include/asb_uci/type/PlanningPointPriorityType.h"
#include "../../../include/asb_uci/type/PlanningPointType.h"
#include "../../../include/asb_uci/type/SpeedOptimizationEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ClimbOptimizationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningGuidelineType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningPointPriorityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningPointType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedOptimizationEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanningGuidelineType::PlanningGuidelineType()
  : destination_Accessor{boost::make_unique<Destination>(0, SIZE_MAX)} {
}

PlanningGuidelineType::~PlanningGuidelineType() = default;

void PlanningGuidelineType::copy(const uci::type::PlanningGuidelineType& accessor) {
  copyImpl(accessor, false);
}

void PlanningGuidelineType::copyImpl(const uci::type::PlanningGuidelineType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanningGuidelineType&>(accessor);
    if (accessorImpl.origin_Accessor) {
      setOrigin(*(accessorImpl.origin_Accessor));
    } else {
      origin_Accessor.reset();
    }
    setDestination(*(accessorImpl.destination_Accessor));
    if (accessorImpl.speedOptimization_Accessor) {
      setSpeedOptimization(*(accessorImpl.speedOptimization_Accessor));
    } else {
      speedOptimization_Accessor.reset();
    }
    if (accessorImpl.climbOptimization_Accessor) {
      setClimbOptimization(*(accessorImpl.climbOptimization_Accessor));
    } else {
      climbOptimization_Accessor.reset();
    }
  }
}

void PlanningGuidelineType::reset() noexcept {
  origin_Accessor.reset();
  destination_Accessor->reset();
  speedOptimization_Accessor.reset();
  climbOptimization_Accessor.reset();
}

uci::type::PlanningPointType& PlanningGuidelineType::getOrigin_() const {
  if (origin_Accessor) {
    return *origin_Accessor;
  }
  throw uci::base::UCIException("Error in getOrigin(): An attempt was made to get an optional field that was not enabled, call hasOrigin() to determine if it is safe to call getOrigin()");
}

const uci::type::PlanningPointType& PlanningGuidelineType::getOrigin() const {
  return getOrigin_();
}

uci::type::PlanningPointType& PlanningGuidelineType::getOrigin() {
  return getOrigin_();
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::setOrigin(const uci::type::PlanningPointType& accessor) {
  enableOrigin();
  if (&accessor != origin_Accessor.get()) {
    origin_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningGuidelineType::hasOrigin() const noexcept {
  return static_cast<bool>(origin_Accessor);
}

uci::type::PlanningPointType& PlanningGuidelineType::enableOrigin(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningPointType : type};
  if ((!origin_Accessor) || (origin_Accessor->getAccessorType() != requestedType)) {
    origin_Accessor = PlanningPointType::create(requestedType);
    if (!origin_Accessor) {
      throw uci::base::UCIException("Error in enableOrigin(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *origin_Accessor;
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::clearOrigin() noexcept {
  origin_Accessor.reset();
  return *this;
}

const uci::type::PlanningGuidelineType::Destination& PlanningGuidelineType::getDestination() const {
  return *destination_Accessor;
}

uci::type::PlanningGuidelineType::Destination& PlanningGuidelineType::getDestination() {
  return *destination_Accessor;
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::setDestination(const uci::type::PlanningGuidelineType::Destination& accessor) {
  if (&accessor != destination_Accessor.get()) {
    destination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SpeedOptimizationEnum& PlanningGuidelineType::getSpeedOptimization_() const {
  if (speedOptimization_Accessor) {
    return *speedOptimization_Accessor;
  }
  throw uci::base::UCIException("Error in getSpeedOptimization(): An attempt was made to get an optional field that was not enabled, call hasSpeedOptimization() to determine if it is safe to call getSpeedOptimization()");
}

const uci::type::SpeedOptimizationEnum& PlanningGuidelineType::getSpeedOptimization() const {
  return getSpeedOptimization_();
}

uci::type::SpeedOptimizationEnum& PlanningGuidelineType::getSpeedOptimization() {
  return getSpeedOptimization_();
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::setSpeedOptimization(const uci::type::SpeedOptimizationEnum& accessor) {
  enableSpeedOptimization();
  if (&accessor != speedOptimization_Accessor.get()) {
    speedOptimization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::setSpeedOptimization(const uci::type::SpeedOptimizationEnum::EnumerationItem value) {
  enableSpeedOptimization().setValue(value);
  return *this;
}

bool PlanningGuidelineType::hasSpeedOptimization() const noexcept {
  return static_cast<bool>(speedOptimization_Accessor);
}

uci::type::SpeedOptimizationEnum& PlanningGuidelineType::enableSpeedOptimization(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::speedOptimizationEnum : type};
  if ((!speedOptimization_Accessor) || (speedOptimization_Accessor->getAccessorType() != requestedType)) {
    speedOptimization_Accessor = SpeedOptimizationEnum::create(requestedType);
    if (!speedOptimization_Accessor) {
      throw uci::base::UCIException("Error in enableSpeedOptimization(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *speedOptimization_Accessor;
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::clearSpeedOptimization() noexcept {
  speedOptimization_Accessor.reset();
  return *this;
}

uci::type::ClimbOptimizationEnum& PlanningGuidelineType::getClimbOptimization_() const {
  if (climbOptimization_Accessor) {
    return *climbOptimization_Accessor;
  }
  throw uci::base::UCIException("Error in getClimbOptimization(): An attempt was made to get an optional field that was not enabled, call hasClimbOptimization() to determine if it is safe to call getClimbOptimization()");
}

const uci::type::ClimbOptimizationEnum& PlanningGuidelineType::getClimbOptimization() const {
  return getClimbOptimization_();
}

uci::type::ClimbOptimizationEnum& PlanningGuidelineType::getClimbOptimization() {
  return getClimbOptimization_();
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::setClimbOptimization(const uci::type::ClimbOptimizationEnum& accessor) {
  enableClimbOptimization();
  if (&accessor != climbOptimization_Accessor.get()) {
    climbOptimization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::setClimbOptimization(const uci::type::ClimbOptimizationEnum::EnumerationItem value) {
  enableClimbOptimization().setValue(value);
  return *this;
}

bool PlanningGuidelineType::hasClimbOptimization() const noexcept {
  return static_cast<bool>(climbOptimization_Accessor);
}

uci::type::ClimbOptimizationEnum& PlanningGuidelineType::enableClimbOptimization(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::climbOptimizationEnum : type};
  if ((!climbOptimization_Accessor) || (climbOptimization_Accessor->getAccessorType() != requestedType)) {
    climbOptimization_Accessor = ClimbOptimizationEnum::create(requestedType);
    if (!climbOptimization_Accessor) {
      throw uci::base::UCIException("Error in enableClimbOptimization(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *climbOptimization_Accessor;
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::clearClimbOptimization() noexcept {
  climbOptimization_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanningGuidelineType> PlanningGuidelineType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningGuidelineType : type};
  return (requestedType == uci::type::accessorType::planningGuidelineType) ? boost::make_unique<PlanningGuidelineType>() : nullptr;
}

/**  */
namespace PlanningGuidelineType_Names {

constexpr const char* Extern_Type_Name{"PlanningGuidelineType"};
constexpr const char* Origin_Name{"Origin"};
constexpr const char* Destination_Name{"Destination"};
constexpr const char* SpeedOptimization_Name{"SpeedOptimization"};
constexpr const char* ClimbOptimization_Name{"ClimbOptimization"};

} // namespace PlanningGuidelineType_Names

void PlanningGuidelineType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningGuidelineType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanningGuidelineType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanningGuidelineType_Names::Origin_Name) {
      PlanningPointType::deserialize(valueType.second, accessor.enableOrigin(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningGuidelineType_Names::Destination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanningGuidelineType::Destination& boundedList = accessor.getDestination();
        const uci::type::PlanningGuidelineType::Destination::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlanningPointPriorityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanningGuidelineType_Names::SpeedOptimization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSpeedOptimization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlanningGuidelineType_Names::ClimbOptimization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableClimbOptimization().setValueFromName(*value);
      }
    }
  }
}

std::string PlanningGuidelineType::serialize(const uci::type::PlanningGuidelineType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanningGuidelineType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanningGuidelineType_Names::Extern_Type_Name);
  }
  if (accessor.hasOrigin()) {
    PlanningPointType::serialize(accessor.getOrigin(), node, PlanningGuidelineType_Names::Origin_Name);
  }
  {
    const uci::type::PlanningGuidelineType::Destination& boundedList = accessor.getDestination();
    for (uci::type::PlanningGuidelineType::Destination::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PlanningPointPriorityType::serialize(boundedList.at(i), node, PlanningGuidelineType_Names::Destination_Name);
    }
  }
  if (accessor.hasSpeedOptimization()) {
    SpeedOptimizationEnum::serialize(accessor.getSpeedOptimization(), node, PlanningGuidelineType_Names::SpeedOptimization_Name, false);
  }
  if (accessor.hasClimbOptimization()) {
    ClimbOptimizationEnum::serialize(accessor.getClimbOptimization(), node, PlanningGuidelineType_Names::ClimbOptimization_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanningGuidelineType& PlanningGuidelineType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanningGuidelineType>().release());
}

uci::type::PlanningGuidelineType& PlanningGuidelineType::create(const uci::type::PlanningGuidelineType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanningGuidelineType> newAccessor{boost::make_unique<asb_uci::type::PlanningGuidelineType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanningGuidelineType::destroy(uci::type::PlanningGuidelineType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanningGuidelineType*>(&accessor);
}

} // namespace type

} // namespace uci

