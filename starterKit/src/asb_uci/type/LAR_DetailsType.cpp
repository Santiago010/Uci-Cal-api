/** @file LAR_DetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LAR_DetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PlannedReleaseConditionsType.h"
#include "../../../include/asb_uci/type/RoutePlanReferenceType.h"
#include "../../../include/asb_uci/type/WeaponTargetPairingChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LAR_DetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedReleaseConditionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeaponTargetPairingChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LAR_DetailsType::LAR_DetailsType()
  : weaponTargetPairing_Accessor{boost::make_unique<WeaponTargetPairingChoiceType>()},
    plannedReleaseConditions_Accessor{boost::make_unique<PlannedReleaseConditionsType>()} {
}

LAR_DetailsType::~LAR_DetailsType() = default;

void LAR_DetailsType::copy(const uci::type::LAR_DetailsType& accessor) {
  copyImpl(accessor, false);
}

void LAR_DetailsType::copyImpl(const uci::type::LAR_DetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LAR_DetailsType&>(accessor);
    setComposite(accessorImpl.composite_Accessor);
    setWeaponTargetPairing(*(accessorImpl.weaponTargetPairing_Accessor));
    setPlannedReleaseConditions(*(accessorImpl.plannedReleaseConditions_Accessor));
    if (accessorImpl.weaponRoute_Accessor) {
      setWeaponRoute(*(accessorImpl.weaponRoute_Accessor));
    } else {
      weaponRoute_Accessor.reset();
    }
  }
}

void LAR_DetailsType::reset() noexcept {
  composite_Accessor = false;
  weaponTargetPairing_Accessor->reset();
  plannedReleaseConditions_Accessor->reset();
  weaponRoute_Accessor.reset();
}

xs::Boolean LAR_DetailsType::getComposite() const {
  return composite_Accessor;
}

uci::type::LAR_DetailsType& LAR_DetailsType::setComposite(xs::Boolean value) {
  composite_Accessor = value;
  return *this;
}


const uci::type::WeaponTargetPairingChoiceType& LAR_DetailsType::getWeaponTargetPairing() const {
  return *weaponTargetPairing_Accessor;
}

uci::type::WeaponTargetPairingChoiceType& LAR_DetailsType::getWeaponTargetPairing() {
  return *weaponTargetPairing_Accessor;
}

uci::type::LAR_DetailsType& LAR_DetailsType::setWeaponTargetPairing(const uci::type::WeaponTargetPairingChoiceType& accessor) {
  if (&accessor != weaponTargetPairing_Accessor.get()) {
    weaponTargetPairing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlannedReleaseConditionsType& LAR_DetailsType::getPlannedReleaseConditions() const {
  return *plannedReleaseConditions_Accessor;
}

uci::type::PlannedReleaseConditionsType& LAR_DetailsType::getPlannedReleaseConditions() {
  return *plannedReleaseConditions_Accessor;
}

uci::type::LAR_DetailsType& LAR_DetailsType::setPlannedReleaseConditions(const uci::type::PlannedReleaseConditionsType& accessor) {
  if (&accessor != plannedReleaseConditions_Accessor.get()) {
    plannedReleaseConditions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RoutePlanReferenceType& LAR_DetailsType::getWeaponRoute_() const {
  if (weaponRoute_Accessor) {
    return *weaponRoute_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponRoute(): An attempt was made to get an optional field that was not enabled, call hasWeaponRoute() to determine if it is safe to call getWeaponRoute()");
}

const uci::type::RoutePlanReferenceType& LAR_DetailsType::getWeaponRoute() const {
  return getWeaponRoute_();
}

uci::type::RoutePlanReferenceType& LAR_DetailsType::getWeaponRoute() {
  return getWeaponRoute_();
}

uci::type::LAR_DetailsType& LAR_DetailsType::setWeaponRoute(const uci::type::RoutePlanReferenceType& accessor) {
  enableWeaponRoute();
  if (&accessor != weaponRoute_Accessor.get()) {
    weaponRoute_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LAR_DetailsType::hasWeaponRoute() const noexcept {
  return static_cast<bool>(weaponRoute_Accessor);
}

uci::type::RoutePlanReferenceType& LAR_DetailsType::enableWeaponRoute(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanReferenceType : type};
  if ((!weaponRoute_Accessor) || (weaponRoute_Accessor->getAccessorType() != requestedType)) {
    weaponRoute_Accessor = RoutePlanReferenceType::create(requestedType);
    if (!weaponRoute_Accessor) {
      throw uci::base::UCIException("Error in enableWeaponRoute(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponRoute_Accessor;
}

uci::type::LAR_DetailsType& LAR_DetailsType::clearWeaponRoute() noexcept {
  weaponRoute_Accessor.reset();
  return *this;
}

std::unique_ptr<LAR_DetailsType> LAR_DetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lAR_DetailsType : type};
  return (requestedType == uci::type::accessorType::lAR_DetailsType) ? boost::make_unique<LAR_DetailsType>() : nullptr;
}

/**  */
namespace LAR_DetailsType_Names {

constexpr const char* Extern_Type_Name{"LAR_DetailsType"};
constexpr const char* Composite_Name{"Composite"};
constexpr const char* WeaponTargetPairing_Name{"WeaponTargetPairing"};
constexpr const char* PlannedReleaseConditions_Name{"PlannedReleaseConditions"};
constexpr const char* WeaponRoute_Name{"WeaponRoute"};

} // namespace LAR_DetailsType_Names

void LAR_DetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LAR_DetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LAR_DetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LAR_DetailsType_Names::Composite_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setComposite(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + LAR_DetailsType_Names::WeaponTargetPairing_Name) {
      WeaponTargetPairingChoiceType::deserialize(valueType.second, accessor.getWeaponTargetPairing(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LAR_DetailsType_Names::PlannedReleaseConditions_Name) {
      PlannedReleaseConditionsType::deserialize(valueType.second, accessor.getPlannedReleaseConditions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LAR_DetailsType_Names::WeaponRoute_Name) {
      RoutePlanReferenceType::deserialize(valueType.second, accessor.enableWeaponRoute(), nodeName, nsPrefix);
    }
  }
}

std::string LAR_DetailsType::serialize(const uci::type::LAR_DetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LAR_DetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LAR_DetailsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getComposite(), node, LAR_DetailsType_Names::Composite_Name);
  WeaponTargetPairingChoiceType::serialize(accessor.getWeaponTargetPairing(), node, LAR_DetailsType_Names::WeaponTargetPairing_Name);
  PlannedReleaseConditionsType::serialize(accessor.getPlannedReleaseConditions(), node, LAR_DetailsType_Names::PlannedReleaseConditions_Name);
  if (accessor.hasWeaponRoute()) {
    RoutePlanReferenceType::serialize(accessor.getWeaponRoute(), node, LAR_DetailsType_Names::WeaponRoute_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LAR_DetailsType& LAR_DetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LAR_DetailsType>().release());
}

uci::type::LAR_DetailsType& LAR_DetailsType::create(const uci::type::LAR_DetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LAR_DetailsType> newAccessor{boost::make_unique<asb_uci::type::LAR_DetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LAR_DetailsType::destroy(uci::type::LAR_DetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::LAR_DetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

