/** @file PathSegmentConditionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PathSegmentConditionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeRangeType.h"
#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/EnduranceRemainingType.h"
#include "../../../include/asb_uci/type/SegmentCaptureType.h"
#include "../../../include/asb_uci/type/SystemContingencyLevelEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnduranceRemainingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathSegmentConditionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SegmentCaptureType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemContingencyLevelEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PathSegmentConditionType::PathSegmentConditionType() = default;

PathSegmentConditionType::~PathSegmentConditionType() = default;

void PathSegmentConditionType::copy(const uci::type::PathSegmentConditionType& accessor) {
  copyImpl(accessor, false);
}

void PathSegmentConditionType::copyImpl(const uci::type::PathSegmentConditionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PathSegmentConditionType&>(accessor);
    if (accessorImpl.altitudeRange_Accessor) {
      setAltitudeRange(*(accessorImpl.altitudeRange_Accessor));
    } else {
      altitudeRange_Accessor.reset();
    }
    if (accessorImpl.timeWindow_Accessor) {
      setTimeWindow(*(accessorImpl.timeWindow_Accessor));
    } else {
      timeWindow_Accessor.reset();
    }
    if (accessorImpl.segmentCapture_Accessor) {
      setSegmentCapture(*(accessorImpl.segmentCapture_Accessor));
    } else {
      segmentCapture_Accessor.reset();
    }
    if (accessorImpl.hasOperatorInput()) {
      setOperatorInput(accessorImpl.getOperatorInput());
    } else {
      clearOperatorInput();
    }
    if (accessorImpl.endurance_Accessor) {
      setEndurance(*(accessorImpl.endurance_Accessor));
    } else {
      endurance_Accessor.reset();
    }
    if (accessorImpl.contingencyLevel_Accessor) {
      setContingencyLevel(*(accessorImpl.contingencyLevel_Accessor));
    } else {
      contingencyLevel_Accessor.reset();
    }
  }
}

void PathSegmentConditionType::reset() noexcept {
  altitudeRange_Accessor.reset();
  timeWindow_Accessor.reset();
  segmentCapture_Accessor.reset();
  clearOperatorInput();
  endurance_Accessor.reset();
  contingencyLevel_Accessor.reset();
}

uci::type::AltitudeRangeType& PathSegmentConditionType::getAltitudeRange_() const {
  if (altitudeRange_Accessor) {
    return *altitudeRange_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeRange(): An attempt was made to get an optional field that was not enabled, call hasAltitudeRange() to determine if it is safe to call getAltitudeRange()");
}

const uci::type::AltitudeRangeType& PathSegmentConditionType::getAltitudeRange() const {
  return getAltitudeRange_();
}

uci::type::AltitudeRangeType& PathSegmentConditionType::getAltitudeRange() {
  return getAltitudeRange_();
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::setAltitudeRange(const uci::type::AltitudeRangeType& accessor) {
  enableAltitudeRange();
  if (&accessor != altitudeRange_Accessor.get()) {
    altitudeRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentConditionType::hasAltitudeRange() const noexcept {
  return static_cast<bool>(altitudeRange_Accessor);
}

uci::type::AltitudeRangeType& PathSegmentConditionType::enableAltitudeRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeRangeType : type};
  if ((!altitudeRange_Accessor) || (altitudeRange_Accessor->getAccessorType() != requestedType)) {
    altitudeRange_Accessor = AltitudeRangeType::create(requestedType);
    if (!altitudeRange_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeRange_Accessor;
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::clearAltitudeRange() noexcept {
  altitudeRange_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& PathSegmentConditionType::getTimeWindow_() const {
  if (timeWindow_Accessor) {
    return *timeWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeWindow(): An attempt was made to get an optional field that was not enabled, call hasTimeWindow() to determine if it is safe to call getTimeWindow()");
}

const uci::type::DateTimeRangeType& PathSegmentConditionType::getTimeWindow() const {
  return getTimeWindow_();
}

uci::type::DateTimeRangeType& PathSegmentConditionType::getTimeWindow() {
  return getTimeWindow_();
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::setTimeWindow(const uci::type::DateTimeRangeType& accessor) {
  enableTimeWindow();
  if (&accessor != timeWindow_Accessor.get()) {
    timeWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentConditionType::hasTimeWindow() const noexcept {
  return static_cast<bool>(timeWindow_Accessor);
}

uci::type::DateTimeRangeType& PathSegmentConditionType::enableTimeWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!timeWindow_Accessor) || (timeWindow_Accessor->getAccessorType() != requestedType)) {
    timeWindow_Accessor = DateTimeRangeType::create(requestedType);
    if (!timeWindow_Accessor) {
      throw uci::base::UCIException("Error in enableTimeWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeWindow_Accessor;
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::clearTimeWindow() noexcept {
  timeWindow_Accessor.reset();
  return *this;
}

uci::type::SegmentCaptureType& PathSegmentConditionType::getSegmentCapture_() const {
  if (segmentCapture_Accessor) {
    return *segmentCapture_Accessor;
  }
  throw uci::base::UCIException("Error in getSegmentCapture(): An attempt was made to get an optional field that was not enabled, call hasSegmentCapture() to determine if it is safe to call getSegmentCapture()");
}

const uci::type::SegmentCaptureType& PathSegmentConditionType::getSegmentCapture() const {
  return getSegmentCapture_();
}

uci::type::SegmentCaptureType& PathSegmentConditionType::getSegmentCapture() {
  return getSegmentCapture_();
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::setSegmentCapture(const uci::type::SegmentCaptureType& accessor) {
  enableSegmentCapture();
  if (&accessor != segmentCapture_Accessor.get()) {
    segmentCapture_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentConditionType::hasSegmentCapture() const noexcept {
  return static_cast<bool>(segmentCapture_Accessor);
}

uci::type::SegmentCaptureType& PathSegmentConditionType::enableSegmentCapture(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::segmentCaptureType : type};
  if ((!segmentCapture_Accessor) || (segmentCapture_Accessor->getAccessorType() != requestedType)) {
    segmentCapture_Accessor = SegmentCaptureType::create(requestedType);
    if (!segmentCapture_Accessor) {
      throw uci::base::UCIException("Error in enableSegmentCapture(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *segmentCapture_Accessor;
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::clearSegmentCapture() noexcept {
  segmentCapture_Accessor.reset();
  return *this;
}

xs::Boolean PathSegmentConditionType::getOperatorInput() const {
  if (operatorInput_Accessor) {
    return *operatorInput_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorInput(): An attempt was made to get an optional field that was not enabled, call hasOperatorInput() to determine if it is safe to call getOperatorInput()");
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::setOperatorInput(xs::Boolean value) {
  operatorInput_Accessor = value;
  return *this;
}

bool PathSegmentConditionType::hasOperatorInput() const noexcept {
  return operatorInput_Accessor.has_value();
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::clearOperatorInput() noexcept {
  operatorInput_Accessor.reset();
  return *this;
}

uci::type::EnduranceRemainingType& PathSegmentConditionType::getEndurance_() const {
  if (endurance_Accessor) {
    return *endurance_Accessor;
  }
  throw uci::base::UCIException("Error in getEndurance(): An attempt was made to get an optional field that was not enabled, call hasEndurance() to determine if it is safe to call getEndurance()");
}

const uci::type::EnduranceRemainingType& PathSegmentConditionType::getEndurance() const {
  return getEndurance_();
}

uci::type::EnduranceRemainingType& PathSegmentConditionType::getEndurance() {
  return getEndurance_();
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::setEndurance(const uci::type::EnduranceRemainingType& accessor) {
  enableEndurance();
  if (&accessor != endurance_Accessor.get()) {
    endurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentConditionType::hasEndurance() const noexcept {
  return static_cast<bool>(endurance_Accessor);
}

uci::type::EnduranceRemainingType& PathSegmentConditionType::enableEndurance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceRemainingType : type};
  if ((!endurance_Accessor) || (endurance_Accessor->getAccessorType() != requestedType)) {
    endurance_Accessor = EnduranceRemainingType::create(requestedType);
    if (!endurance_Accessor) {
      throw uci::base::UCIException("Error in enableEndurance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *endurance_Accessor;
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::clearEndurance() noexcept {
  endurance_Accessor.reset();
  return *this;
}

uci::type::SystemContingencyLevelEnum& PathSegmentConditionType::getContingencyLevel_() const {
  if (contingencyLevel_Accessor) {
    return *contingencyLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getContingencyLevel(): An attempt was made to get an optional field that was not enabled, call hasContingencyLevel() to determine if it is safe to call getContingencyLevel()");
}

const uci::type::SystemContingencyLevelEnum& PathSegmentConditionType::getContingencyLevel() const {
  return getContingencyLevel_();
}

uci::type::SystemContingencyLevelEnum& PathSegmentConditionType::getContingencyLevel() {
  return getContingencyLevel_();
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::setContingencyLevel(const uci::type::SystemContingencyLevelEnum& accessor) {
  enableContingencyLevel();
  if (&accessor != contingencyLevel_Accessor.get()) {
    contingencyLevel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::setContingencyLevel(const uci::type::SystemContingencyLevelEnum::EnumerationItem value) {
  enableContingencyLevel().setValue(value);
  return *this;
}

bool PathSegmentConditionType::hasContingencyLevel() const noexcept {
  return static_cast<bool>(contingencyLevel_Accessor);
}

uci::type::SystemContingencyLevelEnum& PathSegmentConditionType::enableContingencyLevel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemContingencyLevelEnum : type};
  if ((!contingencyLevel_Accessor) || (contingencyLevel_Accessor->getAccessorType() != requestedType)) {
    contingencyLevel_Accessor = SystemContingencyLevelEnum::create(requestedType);
    if (!contingencyLevel_Accessor) {
      throw uci::base::UCIException("Error in enableContingencyLevel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *contingencyLevel_Accessor;
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::clearContingencyLevel() noexcept {
  contingencyLevel_Accessor.reset();
  return *this;
}

std::unique_ptr<PathSegmentConditionType> PathSegmentConditionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathSegmentConditionType : type};
  return (requestedType == uci::type::accessorType::pathSegmentConditionType) ? boost::make_unique<PathSegmentConditionType>() : nullptr;
}

/**  */
namespace PathSegmentConditionType_Names {

constexpr const char* Extern_Type_Name{"PathSegmentConditionType"};
constexpr const char* AltitudeRange_Name{"AltitudeRange"};
constexpr const char* TimeWindow_Name{"TimeWindow"};
constexpr const char* SegmentCapture_Name{"SegmentCapture"};
constexpr const char* OperatorInput_Name{"OperatorInput"};
constexpr const char* Endurance_Name{"Endurance"};
constexpr const char* ContingencyLevel_Name{"ContingencyLevel"};

} // namespace PathSegmentConditionType_Names

void PathSegmentConditionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PathSegmentConditionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PathSegmentConditionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PathSegmentConditionType_Names::AltitudeRange_Name) {
      AltitudeRangeType::deserialize(valueType.second, accessor.enableAltitudeRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentConditionType_Names::TimeWindow_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableTimeWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentConditionType_Names::SegmentCapture_Name) {
      SegmentCaptureType::deserialize(valueType.second, accessor.enableSegmentCapture(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentConditionType_Names::OperatorInput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOperatorInput(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentConditionType_Names::Endurance_Name) {
      EnduranceRemainingType::deserialize(valueType.second, accessor.enableEndurance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentConditionType_Names::ContingencyLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableContingencyLevel().setValueFromName(*value);
      }
    }
  }
}

std::string PathSegmentConditionType::serialize(const uci::type::PathSegmentConditionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PathSegmentConditionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PathSegmentConditionType_Names::Extern_Type_Name);
  }
  if (accessor.hasAltitudeRange()) {
    AltitudeRangeType::serialize(accessor.getAltitudeRange(), node, PathSegmentConditionType_Names::AltitudeRange_Name);
  }
  if (accessor.hasTimeWindow()) {
    DateTimeRangeType::serialize(accessor.getTimeWindow(), node, PathSegmentConditionType_Names::TimeWindow_Name);
  }
  if (accessor.hasSegmentCapture()) {
    SegmentCaptureType::serialize(accessor.getSegmentCapture(), node, PathSegmentConditionType_Names::SegmentCapture_Name);
  }
  if (accessor.hasOperatorInput()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getOperatorInput(), node, PathSegmentConditionType_Names::OperatorInput_Name);
  }
  if (accessor.hasEndurance()) {
    EnduranceRemainingType::serialize(accessor.getEndurance(), node, PathSegmentConditionType_Names::Endurance_Name);
  }
  if (accessor.hasContingencyLevel()) {
    SystemContingencyLevelEnum::serialize(accessor.getContingencyLevel(), node, PathSegmentConditionType_Names::ContingencyLevel_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PathSegmentConditionType& PathSegmentConditionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PathSegmentConditionType>().release());
}

uci::type::PathSegmentConditionType& PathSegmentConditionType::create(const uci::type::PathSegmentConditionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PathSegmentConditionType> newAccessor{boost::make_unique<asb_uci::type::PathSegmentConditionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PathSegmentConditionType::destroy(uci::type::PathSegmentConditionType& accessor) {
  delete dynamic_cast<asb_uci::type::PathSegmentConditionType*>(&accessor);
}

} // namespace type

} // namespace uci

