/** @file IdentificationVerificationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IdentificationVerificationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CharacterizationProductTypeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CharacterizationProductTypeEnum.h"
#include "uci/type/IdentificationVerificationType.h"
#include "uci/type/PercentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IdentificationVerificationType::IdentificationVerificationType()
  : any_Accessor{boost::make_unique<CharacterizationProductTypeEnum>()} {
}

IdentificationVerificationType::~IdentificationVerificationType() = default;

void IdentificationVerificationType::copy(const uci::type::IdentificationVerificationType& accessor) {
  copyImpl(accessor, false);
}

void IdentificationVerificationType::copyImpl(const uci::type::IdentificationVerificationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IdentificationVerificationType&>(accessor);
    if (accessorImpl.hasConfidenceDesired()) {
      setConfidenceDesired(accessorImpl.getConfidenceDesired());
    } else {
      clearConfidenceDesired();
    }
    setAny(*(accessorImpl.any_Accessor));
    if (accessorImpl.all_Accessor) {
      setAll(*(accessorImpl.all_Accessor));
    } else {
      all_Accessor.reset();
    }
  }
}

void IdentificationVerificationType::reset() noexcept {
  clearConfidenceDesired();
  any_Accessor->reset();
  all_Accessor.reset();
}

uci::type::PercentTypeValue IdentificationVerificationType::getConfidenceDesired() const {
  if (confidenceDesired_Accessor) {
    return *confidenceDesired_Accessor;
  }
  throw uci::base::UCIException("Error in getConfidenceDesired(): An attempt was made to get an optional field that was not enabled, call hasConfidenceDesired() to determine if it is safe to call getConfidenceDesired()");
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::setConfidenceDesired(uci::type::PercentTypeValue value) {
  confidenceDesired_Accessor = value;
  return *this;
}

bool IdentificationVerificationType::hasConfidenceDesired() const noexcept {
  return confidenceDesired_Accessor.has_value();
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::clearConfidenceDesired() noexcept {
  confidenceDesired_Accessor.reset();
  return *this;
}

const uci::type::CharacterizationProductTypeEnum& IdentificationVerificationType::getAny() const {
  return *any_Accessor;
}

uci::type::CharacterizationProductTypeEnum& IdentificationVerificationType::getAny() {
  return *any_Accessor;
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::setAny(const uci::type::CharacterizationProductTypeEnum& accessor) {
  if (&accessor != any_Accessor.get()) {
    any_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::setAny(uci::type::CharacterizationProductTypeEnum::EnumerationItem value) {
  any_Accessor->setValue(value);
  return *this;
}


uci::type::CharacterizationProductTypeEnum& IdentificationVerificationType::getAll_() const {
  if (all_Accessor) {
    return *all_Accessor;
  }
  throw uci::base::UCIException("Error in getAll(): An attempt was made to get an optional field that was not enabled, call hasAll() to determine if it is safe to call getAll()");
}

const uci::type::CharacterizationProductTypeEnum& IdentificationVerificationType::getAll() const {
  return getAll_();
}

uci::type::CharacterizationProductTypeEnum& IdentificationVerificationType::getAll() {
  return getAll_();
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::setAll(const uci::type::CharacterizationProductTypeEnum& accessor) {
  enableAll();
  if (&accessor != all_Accessor.get()) {
    all_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::setAll(const uci::type::CharacterizationProductTypeEnum::EnumerationItem value) {
  enableAll().setValue(value);
  return *this;
}

bool IdentificationVerificationType::hasAll() const noexcept {
  return static_cast<bool>(all_Accessor);
}

uci::type::CharacterizationProductTypeEnum& IdentificationVerificationType::enableAll(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::characterizationProductTypeEnum : type};
  if ((!all_Accessor) || (all_Accessor->getAccessorType() != requestedType)) {
    all_Accessor = CharacterizationProductTypeEnum::create(requestedType);
    if (!all_Accessor) {
      throw uci::base::UCIException("Error in enableAll(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *all_Accessor;
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::clearAll() noexcept {
  all_Accessor.reset();
  return *this;
}

std::unique_ptr<IdentificationVerificationType> IdentificationVerificationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identificationVerificationType : type};
  return (requestedType == uci::type::accessorType::identificationVerificationType) ? boost::make_unique<IdentificationVerificationType>() : nullptr;
}

/**  */
namespace IdentificationVerificationType_Names {

constexpr const char* Extern_Type_Name{"IdentificationVerificationType"};
constexpr const char* ConfidenceDesired_Name{"ConfidenceDesired"};
constexpr const char* Any_Name{"Any"};
constexpr const char* All_Name{"All"};

} // namespace IdentificationVerificationType_Names

void IdentificationVerificationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IdentificationVerificationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IdentificationVerificationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IdentificationVerificationType_Names::ConfidenceDesired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConfidenceDesired(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + IdentificationVerificationType_Names::Any_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAny().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IdentificationVerificationType_Names::All_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAll().setValueFromName(*value);
      }
    }
  }
}

std::string IdentificationVerificationType::serialize(const uci::type::IdentificationVerificationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IdentificationVerificationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IdentificationVerificationType_Names::Extern_Type_Name);
  }
  if (accessor.hasConfidenceDesired()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getConfidenceDesired(), node, IdentificationVerificationType_Names::ConfidenceDesired_Name);
  }
  CharacterizationProductTypeEnum::serialize(accessor.getAny(), node, IdentificationVerificationType_Names::Any_Name, false);
  if (accessor.hasAll()) {
    CharacterizationProductTypeEnum::serialize(accessor.getAll(), node, IdentificationVerificationType_Names::All_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IdentificationVerificationType& IdentificationVerificationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IdentificationVerificationType>().release());
}

uci::type::IdentificationVerificationType& IdentificationVerificationType::create(const uci::type::IdentificationVerificationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IdentificationVerificationType> newAccessor{boost::make_unique<asb_uci::type::IdentificationVerificationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IdentificationVerificationType::destroy(uci::type::IdentificationVerificationType& accessor) {
  delete dynamic_cast<asb_uci::type::IdentificationVerificationType*>(&accessor);
}

} // namespace type

} // namespace uci

