/** @file Link16InterfaceDataLinkNativeInfoType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/Link16InterfaceDataLinkNativeInfoType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityByType.h"
#include "../../../include/asb_uci/type/DataLinkNativeInfoPET.h"
#include "../../../include/asb_uci/type/VoiceCallSignType.h"
#include "../../../include/asb_uci/type/VoiceControlType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityByType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16InterfaceDataLinkNativeInfoType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_ControlChannelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VoiceCallSignType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VoiceControlType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Link16InterfaceDataLinkNativeInfoType::Link16InterfaceDataLinkNativeInfoType()
  : activityBy_Accessor{boost::make_unique<ActivityBy>(0, SIZE_MAX)} {
}

Link16InterfaceDataLinkNativeInfoType::~Link16InterfaceDataLinkNativeInfoType() = default;

void Link16InterfaceDataLinkNativeInfoType::copy(const uci::type::Link16InterfaceDataLinkNativeInfoType& accessor) {
  copyImpl(accessor, false);
}

void Link16InterfaceDataLinkNativeInfoType::copyImpl(const uci::type::Link16InterfaceDataLinkNativeInfoType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataLinkNativeInfoPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const Link16InterfaceDataLinkNativeInfoType&>(accessor);
    if (accessorImpl.voiceCallSign_Accessor) {
      setVoiceCallSign(*(accessorImpl.voiceCallSign_Accessor));
    } else {
      voiceCallSign_Accessor.reset();
    }
    if (accessorImpl.hasControlChannel()) {
      setControlChannel(accessorImpl.getControlChannel());
    } else {
      clearControlChannel();
    }
    if (accessorImpl.hasForceTellIndicator()) {
      setForceTellIndicator(accessorImpl.getForceTellIndicator());
    } else {
      clearForceTellIndicator();
    }
    if (accessorImpl.hasEmergencyIndicator()) {
      setEmergencyIndicator(accessorImpl.getEmergencyIndicator());
    } else {
      clearEmergencyIndicator();
    }
    if (accessorImpl.voiceControl_Accessor) {
      setVoiceControl(*(accessorImpl.voiceControl_Accessor));
    } else {
      voiceControl_Accessor.reset();
    }
    setActivityBy(*(accessorImpl.activityBy_Accessor));
  }
}

void Link16InterfaceDataLinkNativeInfoType::reset() noexcept {
  DataLinkNativeInfoPET::reset();
  voiceCallSign_Accessor.reset();
  clearControlChannel();
  clearForceTellIndicator();
  clearEmergencyIndicator();
  voiceControl_Accessor.reset();
  activityBy_Accessor->reset();
}

uci::type::VoiceCallSignType& Link16InterfaceDataLinkNativeInfoType::getVoiceCallSign_() const {
  if (voiceCallSign_Accessor) {
    return *voiceCallSign_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceCallSign(): An attempt was made to get an optional field that was not enabled, call hasVoiceCallSign() to determine if it is safe to call getVoiceCallSign()");
}

const uci::type::VoiceCallSignType& Link16InterfaceDataLinkNativeInfoType::getVoiceCallSign() const {
  return getVoiceCallSign_();
}

uci::type::VoiceCallSignType& Link16InterfaceDataLinkNativeInfoType::getVoiceCallSign() {
  return getVoiceCallSign_();
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setVoiceCallSign(const uci::type::VoiceCallSignType& value) {
  return setVoiceCallSign(value.c_str());
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setVoiceCallSign(const std::string& value) {
  return setVoiceCallSign(value.c_str());
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setVoiceCallSign(const char* value) {
  enableVoiceCallSign().setStringValue(value);
  return *this;
}

bool Link16InterfaceDataLinkNativeInfoType::hasVoiceCallSign() const noexcept {
  return static_cast<bool>(voiceCallSign_Accessor);
}

uci::type::VoiceCallSignType& Link16InterfaceDataLinkNativeInfoType::enableVoiceCallSign(uci::base::accessorType::AccessorType type) {
  if (!voiceCallSign_Accessor) {
    voiceCallSign_Accessor = VoiceCallSignType::create(type);
  }
  return *voiceCallSign_Accessor;
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::clearVoiceCallSign() noexcept {
  voiceCallSign_Accessor.reset();
  return *this;
}

uci::type::Link16_ControlChannelTypeValue Link16InterfaceDataLinkNativeInfoType::getControlChannel() const {
  if (controlChannel_Accessor) {
    return *controlChannel_Accessor;
  }
  throw uci::base::UCIException("Error in getControlChannel(): An attempt was made to get an optional field that was not enabled, call hasControlChannel() to determine if it is safe to call getControlChannel()");
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setControlChannel(uci::type::Link16_ControlChannelTypeValue value) {
  controlChannel_Accessor = value;
  return *this;
}

bool Link16InterfaceDataLinkNativeInfoType::hasControlChannel() const noexcept {
  return controlChannel_Accessor.has_value();
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::clearControlChannel() noexcept {
  controlChannel_Accessor.reset();
  return *this;
}

xs::Boolean Link16InterfaceDataLinkNativeInfoType::getForceTellIndicator() const {
  if (forceTellIndicator_Accessor) {
    return *forceTellIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getForceTellIndicator(): An attempt was made to get an optional field that was not enabled, call hasForceTellIndicator() to determine if it is safe to call getForceTellIndicator()");
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setForceTellIndicator(xs::Boolean value) {
  forceTellIndicator_Accessor = value;
  return *this;
}

bool Link16InterfaceDataLinkNativeInfoType::hasForceTellIndicator() const noexcept {
  return forceTellIndicator_Accessor.has_value();
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::clearForceTellIndicator() noexcept {
  forceTellIndicator_Accessor.reset();
  return *this;
}

xs::Boolean Link16InterfaceDataLinkNativeInfoType::getEmergencyIndicator() const {
  if (emergencyIndicator_Accessor) {
    return *emergencyIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getEmergencyIndicator(): An attempt was made to get an optional field that was not enabled, call hasEmergencyIndicator() to determine if it is safe to call getEmergencyIndicator()");
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setEmergencyIndicator(xs::Boolean value) {
  emergencyIndicator_Accessor = value;
  return *this;
}

bool Link16InterfaceDataLinkNativeInfoType::hasEmergencyIndicator() const noexcept {
  return emergencyIndicator_Accessor.has_value();
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::clearEmergencyIndicator() noexcept {
  emergencyIndicator_Accessor.reset();
  return *this;
}

uci::type::VoiceControlType& Link16InterfaceDataLinkNativeInfoType::getVoiceControl_() const {
  if (voiceControl_Accessor) {
    return *voiceControl_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceControl(): An attempt was made to get an optional field that was not enabled, call hasVoiceControl() to determine if it is safe to call getVoiceControl()");
}

const uci::type::VoiceControlType& Link16InterfaceDataLinkNativeInfoType::getVoiceControl() const {
  return getVoiceControl_();
}

uci::type::VoiceControlType& Link16InterfaceDataLinkNativeInfoType::getVoiceControl() {
  return getVoiceControl_();
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setVoiceControl(const uci::type::VoiceControlType& accessor) {
  enableVoiceControl();
  if (&accessor != voiceControl_Accessor.get()) {
    voiceControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16InterfaceDataLinkNativeInfoType::hasVoiceControl() const noexcept {
  return static_cast<bool>(voiceControl_Accessor);
}

uci::type::VoiceControlType& Link16InterfaceDataLinkNativeInfoType::enableVoiceControl(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::voiceControlType : type};
  if ((!voiceControl_Accessor) || (voiceControl_Accessor->getAccessorType() != requestedType)) {
    voiceControl_Accessor = VoiceControlType::create(requestedType);
    if (!voiceControl_Accessor) {
      throw uci::base::UCIException("Error in enableVoiceControl(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *voiceControl_Accessor;
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::clearVoiceControl() noexcept {
  voiceControl_Accessor.reset();
  return *this;
}

const uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& Link16InterfaceDataLinkNativeInfoType::getActivityBy() const {
  return *activityBy_Accessor;
}

uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& Link16InterfaceDataLinkNativeInfoType::getActivityBy() {
  return *activityBy_Accessor;
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::setActivityBy(const uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& accessor) {
  if (&accessor != activityBy_Accessor.get()) {
    activityBy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<Link16InterfaceDataLinkNativeInfoType> Link16InterfaceDataLinkNativeInfoType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16InterfaceDataLinkNativeInfoType : type};
  return (requestedType == uci::type::accessorType::link16InterfaceDataLinkNativeInfoType) ? boost::make_unique<Link16InterfaceDataLinkNativeInfoType>() : nullptr;
}

/**  */
namespace Link16InterfaceDataLinkNativeInfoType_Names {

constexpr const char* Extern_Type_Name{"Link16InterfaceDataLinkNativeInfoType"};
constexpr const char* VoiceCallSign_Name{"VoiceCallSign"};
constexpr const char* ControlChannel_Name{"ControlChannel"};
constexpr const char* ForceTellIndicator_Name{"ForceTellIndicator"};
constexpr const char* EmergencyIndicator_Name{"EmergencyIndicator"};
constexpr const char* VoiceControl_Name{"VoiceControl"};
constexpr const char* ActivityBy_Name{"ActivityBy"};

} // namespace Link16InterfaceDataLinkNativeInfoType_Names

void Link16InterfaceDataLinkNativeInfoType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16InterfaceDataLinkNativeInfoType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Link16InterfaceDataLinkNativeInfoType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Link16InterfaceDataLinkNativeInfoType_Names::VoiceCallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceCallSign(*value);
      }
    } else if (valueType.first == nsPrefix + Link16InterfaceDataLinkNativeInfoType_Names::ControlChannel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setControlChannel(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + Link16InterfaceDataLinkNativeInfoType_Names::ForceTellIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForceTellIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16InterfaceDataLinkNativeInfoType_Names::EmergencyIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmergencyIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16InterfaceDataLinkNativeInfoType_Names::VoiceControl_Name) {
      VoiceControlType::deserialize(valueType.second, accessor.enableVoiceControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16InterfaceDataLinkNativeInfoType_Names::ActivityBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& boundedList = accessor.getActivityBy();
        const uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityByType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataLinkNativeInfoPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string Link16InterfaceDataLinkNativeInfoType::serialize(const uci::type::Link16InterfaceDataLinkNativeInfoType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Link16InterfaceDataLinkNativeInfoType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Link16InterfaceDataLinkNativeInfoType_Names::Extern_Type_Name);
  }
  DataLinkNativeInfoPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasVoiceCallSign()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getVoiceCallSign(), node, Link16InterfaceDataLinkNativeInfoType_Names::VoiceCallSign_Name);
  }
  if (accessor.hasControlChannel()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getControlChannel(), node, Link16InterfaceDataLinkNativeInfoType_Names::ControlChannel_Name);
  }
  if (accessor.hasForceTellIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getForceTellIndicator(), node, Link16InterfaceDataLinkNativeInfoType_Names::ForceTellIndicator_Name);
  }
  if (accessor.hasEmergencyIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEmergencyIndicator(), node, Link16InterfaceDataLinkNativeInfoType_Names::EmergencyIndicator_Name);
  }
  if (accessor.hasVoiceControl()) {
    VoiceControlType::serialize(accessor.getVoiceControl(), node, Link16InterfaceDataLinkNativeInfoType_Names::VoiceControl_Name);
  }
  {
    const uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& boundedList = accessor.getActivityBy();
    for (uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityByType::serialize(boundedList.at(i), node, Link16InterfaceDataLinkNativeInfoType_Names::ActivityBy_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Link16InterfaceDataLinkNativeInfoType>().release());
}

uci::type::Link16InterfaceDataLinkNativeInfoType& Link16InterfaceDataLinkNativeInfoType::create(const uci::type::Link16InterfaceDataLinkNativeInfoType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Link16InterfaceDataLinkNativeInfoType> newAccessor{boost::make_unique<asb_uci::type::Link16InterfaceDataLinkNativeInfoType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Link16InterfaceDataLinkNativeInfoType::destroy(uci::type::Link16InterfaceDataLinkNativeInfoType& accessor) {
  delete dynamic_cast<asb_uci::type::Link16InterfaceDataLinkNativeInfoType*>(&accessor);
}

} // namespace type

} // namespace uci

