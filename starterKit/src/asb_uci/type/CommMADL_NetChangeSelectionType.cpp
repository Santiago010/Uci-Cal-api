/** @file CommMADL_NetChangeSelectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommMADL_NetChangeSelectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommMADL_NetworkLayoutType.h"
#include "../../../include/asb_uci/type/CommMADL_NetworkType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_FlightGroupType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetChangeSelectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetworkLayoutType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetworkType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MADL_NodeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MADL_SelectionShiftValueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommMADL_NetChangeSelectionType::CommMADL_NetChangeSelectionType()
  : newNetworkIdentifier_Accessor{boost::make_unique<CommMADL_NetworkType>()},
    newNetworkLayout_Accessor{boost::make_unique<CommMADL_NetworkLayoutType>()} {
}

CommMADL_NetChangeSelectionType::~CommMADL_NetChangeSelectionType() = default;

void CommMADL_NetChangeSelectionType::copy(const uci::type::CommMADL_NetChangeSelectionType& accessor) {
  copyImpl(accessor, false);
}

void CommMADL_NetChangeSelectionType::copyImpl(const uci::type::CommMADL_NetChangeSelectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommMADL_NetChangeSelectionType&>(accessor);
    setSelectionStartNode(accessorImpl.selectionStartNode_Accessor);
    setSelectionLength(accessorImpl.selectionLength_Accessor);
    if (accessorImpl.hasSelectionShiftValue()) {
      setSelectionShiftValue(accessorImpl.getSelectionShiftValue());
    } else {
      clearSelectionShiftValue();
    }
    if (accessorImpl.selectionFlightGroupIdentifier_Accessor) {
      setSelectionFlightGroupIdentifier(*(accessorImpl.selectionFlightGroupIdentifier_Accessor));
    } else {
      selectionFlightGroupIdentifier_Accessor.reset();
    }
    setNewNetworkIdentifier(*(accessorImpl.newNetworkIdentifier_Accessor));
    setNewNetworkLayout(*(accessorImpl.newNetworkLayout_Accessor));
  }
}

void CommMADL_NetChangeSelectionType::reset() noexcept {
  selectionStartNode_Accessor = 0;
  selectionLength_Accessor = 0;
  clearSelectionShiftValue();
  selectionFlightGroupIdentifier_Accessor.reset();
  newNetworkIdentifier_Accessor->reset();
  newNetworkLayout_Accessor->reset();
}

uci::type::MADL_NodeRangeTypeValue CommMADL_NetChangeSelectionType::getSelectionStartNode() const {
  return selectionStartNode_Accessor;
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setSelectionStartNode(uci::type::MADL_NodeRangeTypeValue value) {
  selectionStartNode_Accessor = value;
  return *this;
}


uci::type::MADL_NodeRangeTypeValue CommMADL_NetChangeSelectionType::getSelectionLength() const {
  return selectionLength_Accessor;
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setSelectionLength(uci::type::MADL_NodeRangeTypeValue value) {
  selectionLength_Accessor = value;
  return *this;
}


uci::type::MADL_SelectionShiftValueTypeValue CommMADL_NetChangeSelectionType::getSelectionShiftValue() const {
  if (selectionShiftValue_Accessor) {
    return *selectionShiftValue_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectionShiftValue(): An attempt was made to get an optional field that was not enabled, call hasSelectionShiftValue() to determine if it is safe to call getSelectionShiftValue()");
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setSelectionShiftValue(uci::type::MADL_SelectionShiftValueTypeValue value) {
  selectionShiftValue_Accessor = value;
  return *this;
}

bool CommMADL_NetChangeSelectionType::hasSelectionShiftValue() const noexcept {
  return selectionShiftValue_Accessor.has_value();
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::clearSelectionShiftValue() noexcept {
  selectionShiftValue_Accessor.reset();
  return *this;
}

uci::type::CommMADL_FlightGroupType& CommMADL_NetChangeSelectionType::getSelectionFlightGroupIdentifier_() const {
  if (selectionFlightGroupIdentifier_Accessor) {
    return *selectionFlightGroupIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectionFlightGroupIdentifier(): An attempt was made to get an optional field that was not enabled, call hasSelectionFlightGroupIdentifier() to determine if it is safe to call getSelectionFlightGroupIdentifier()");
}

const uci::type::CommMADL_FlightGroupType& CommMADL_NetChangeSelectionType::getSelectionFlightGroupIdentifier() const {
  return getSelectionFlightGroupIdentifier_();
}

uci::type::CommMADL_FlightGroupType& CommMADL_NetChangeSelectionType::getSelectionFlightGroupIdentifier() {
  return getSelectionFlightGroupIdentifier_();
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setSelectionFlightGroupIdentifier(const uci::type::CommMADL_FlightGroupType& value) {
  return setSelectionFlightGroupIdentifier(value.c_str());
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setSelectionFlightGroupIdentifier(const std::string& value) {
  return setSelectionFlightGroupIdentifier(value.c_str());
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setSelectionFlightGroupIdentifier(const char* value) {
  enableSelectionFlightGroupIdentifier().setStringValue(value);
  return *this;
}

bool CommMADL_NetChangeSelectionType::hasSelectionFlightGroupIdentifier() const noexcept {
  return static_cast<bool>(selectionFlightGroupIdentifier_Accessor);
}

uci::type::CommMADL_FlightGroupType& CommMADL_NetChangeSelectionType::enableSelectionFlightGroupIdentifier(uci::base::accessorType::AccessorType type) {
  if (!selectionFlightGroupIdentifier_Accessor) {
    selectionFlightGroupIdentifier_Accessor = CommMADL_FlightGroupType::create(type);
  }
  return *selectionFlightGroupIdentifier_Accessor;
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::clearSelectionFlightGroupIdentifier() noexcept {
  selectionFlightGroupIdentifier_Accessor.reset();
  return *this;
}

const uci::type::CommMADL_NetworkType& CommMADL_NetChangeSelectionType::getNewNetworkIdentifier() const {
  return *newNetworkIdentifier_Accessor;
}

uci::type::CommMADL_NetworkType& CommMADL_NetChangeSelectionType::getNewNetworkIdentifier() {
  return *newNetworkIdentifier_Accessor;
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setNewNetworkIdentifier(const uci::type::CommMADL_NetworkType& accessor) {
  if (&accessor != newNetworkIdentifier_Accessor.get()) {
    newNetworkIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommMADL_NetworkLayoutType& CommMADL_NetChangeSelectionType::getNewNetworkLayout() const {
  return *newNetworkLayout_Accessor;
}

uci::type::CommMADL_NetworkLayoutType& CommMADL_NetChangeSelectionType::getNewNetworkLayout() {
  return *newNetworkLayout_Accessor;
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::setNewNetworkLayout(const uci::type::CommMADL_NetworkLayoutType& accessor) {
  if (&accessor != newNetworkLayout_Accessor.get()) {
    newNetworkLayout_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommMADL_NetChangeSelectionType> CommMADL_NetChangeSelectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_NetChangeSelectionType : type};
  return (requestedType == uci::type::accessorType::commMADL_NetChangeSelectionType) ? boost::make_unique<CommMADL_NetChangeSelectionType>() : nullptr;
}

/**  */
namespace CommMADL_NetChangeSelectionType_Names {

constexpr const char* Extern_Type_Name{"CommMADL_NetChangeSelectionType"};
constexpr const char* SelectionStartNode_Name{"SelectionStartNode"};
constexpr const char* SelectionLength_Name{"SelectionLength"};
constexpr const char* SelectionShiftValue_Name{"SelectionShiftValue"};
constexpr const char* SelectionFlightGroupIdentifier_Name{"SelectionFlightGroupIdentifier"};
constexpr const char* NewNetworkIdentifier_Name{"NewNetworkIdentifier"};
constexpr const char* NewNetworkLayout_Name{"NewNetworkLayout"};

} // namespace CommMADL_NetChangeSelectionType_Names

void CommMADL_NetChangeSelectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_NetChangeSelectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommMADL_NetChangeSelectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeSelectionType_Names::SelectionStartNode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectionStartNode(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeSelectionType_Names::SelectionLength_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectionLength(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeSelectionType_Names::SelectionShiftValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectionShiftValue(asb_uci::util::SerializationHelpers::deserializeByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeSelectionType_Names::SelectionFlightGroupIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectionFlightGroupIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeSelectionType_Names::NewNetworkIdentifier_Name) {
      CommMADL_NetworkType::deserialize(valueType.second, accessor.getNewNetworkIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_NetChangeSelectionType_Names::NewNetworkLayout_Name) {
      CommMADL_NetworkLayoutType::deserialize(valueType.second, accessor.getNewNetworkLayout(), nodeName, nsPrefix);
    }
  }
}

std::string CommMADL_NetChangeSelectionType::serialize(const uci::type::CommMADL_NetChangeSelectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommMADL_NetChangeSelectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommMADL_NetChangeSelectionType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getSelectionStartNode(), node, CommMADL_NetChangeSelectionType_Names::SelectionStartNode_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getSelectionLength(), node, CommMADL_NetChangeSelectionType_Names::SelectionLength_Name);
  if (accessor.hasSelectionShiftValue()) {
    asb_uci::util::SerializationHelpers::serializeByte(accessor.getSelectionShiftValue(), node, CommMADL_NetChangeSelectionType_Names::SelectionShiftValue_Name);
  }
  if (accessor.hasSelectionFlightGroupIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSelectionFlightGroupIdentifier(), node, CommMADL_NetChangeSelectionType_Names::SelectionFlightGroupIdentifier_Name);
  }
  CommMADL_NetworkType::serialize(accessor.getNewNetworkIdentifier(), node, CommMADL_NetChangeSelectionType_Names::NewNetworkIdentifier_Name);
  CommMADL_NetworkLayoutType::serialize(accessor.getNewNetworkLayout(), node, CommMADL_NetChangeSelectionType_Names::NewNetworkLayout_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommMADL_NetChangeSelectionType>().release());
}

uci::type::CommMADL_NetChangeSelectionType& CommMADL_NetChangeSelectionType::create(const uci::type::CommMADL_NetChangeSelectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommMADL_NetChangeSelectionType> newAccessor{boost::make_unique<asb_uci::type::CommMADL_NetChangeSelectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommMADL_NetChangeSelectionType::destroy(uci::type::CommMADL_NetChangeSelectionType& accessor) {
  delete dynamic_cast<asb_uci::type::CommMADL_NetChangeSelectionType*>(&accessor);
}

} // namespace type

} // namespace uci

