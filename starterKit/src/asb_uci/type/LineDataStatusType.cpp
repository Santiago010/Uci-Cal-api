/** @file LineDataStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LineDataStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentDetailedStatusType.h"
#include "../../../include/asb_uci/type/ComponentPressureType.h"
#include "../../../include/asb_uci/type/ComponentTemperatureType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/VisibleString64Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentPressureType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentTemperatureType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LineDataStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString64Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LineDataStatusType::LineDataStatusType() = default;

LineDataStatusType::~LineDataStatusType() = default;

void LineDataStatusType::copy(const uci::type::LineDataStatusType& accessor) {
  copyImpl(accessor, false);
}

void LineDataStatusType::copyImpl(const uci::type::LineDataStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ComponentDetailedStatusType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const LineDataStatusType&>(accessor);
    if (accessorImpl.pressureData_Accessor) {
      setPressureData(*(accessorImpl.pressureData_Accessor));
    } else {
      pressureData_Accessor.reset();
    }
    if (accessorImpl.temperatureData_Accessor) {
      setTemperatureData(*(accessorImpl.temperatureData_Accessor));
    } else {
      temperatureData_Accessor.reset();
    }
    if (accessorImpl.hasFlowRate()) {
      setFlowRate(accessorImpl.getFlowRate());
    } else {
      clearFlowRate();
    }
    if (accessorImpl.direction_Accessor) {
      setDirection(*(accessorImpl.direction_Accessor));
    } else {
      direction_Accessor.reset();
    }
    if (accessorImpl.isGravityFeed_Accessor) {
      setIsGravityFeed(*(accessorImpl.isGravityFeed_Accessor));
    } else {
      isGravityFeed_Accessor.reset();
    }
  }
}

void LineDataStatusType::reset() noexcept {
  ComponentDetailedStatusType::reset();
  pressureData_Accessor.reset();
  temperatureData_Accessor.reset();
  clearFlowRate();
  direction_Accessor.reset();
  isGravityFeed_Accessor.reset();
}

uci::type::ComponentPressureType& LineDataStatusType::getPressureData_() const {
  if (pressureData_Accessor) {
    return *pressureData_Accessor;
  }
  throw uci::base::UCIException("Error in getPressureData(): An attempt was made to get an optional field that was not enabled, call hasPressureData() to determine if it is safe to call getPressureData()");
}

const uci::type::ComponentPressureType& LineDataStatusType::getPressureData() const {
  return getPressureData_();
}

uci::type::ComponentPressureType& LineDataStatusType::getPressureData() {
  return getPressureData_();
}

uci::type::LineDataStatusType& LineDataStatusType::setPressureData(const uci::type::ComponentPressureType& accessor) {
  enablePressureData();
  if (&accessor != pressureData_Accessor.get()) {
    pressureData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LineDataStatusType::hasPressureData() const noexcept {
  return static_cast<bool>(pressureData_Accessor);
}

uci::type::ComponentPressureType& LineDataStatusType::enablePressureData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentPressureType : type};
  if ((!pressureData_Accessor) || (pressureData_Accessor->getAccessorType() != requestedType)) {
    pressureData_Accessor = ComponentPressureType::create(requestedType);
    if (!pressureData_Accessor) {
      throw uci::base::UCIException("Error in enablePressureData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pressureData_Accessor;
}

uci::type::LineDataStatusType& LineDataStatusType::clearPressureData() noexcept {
  pressureData_Accessor.reset();
  return *this;
}

uci::type::ComponentTemperatureType& LineDataStatusType::getTemperatureData_() const {
  if (temperatureData_Accessor) {
    return *temperatureData_Accessor;
  }
  throw uci::base::UCIException("Error in getTemperatureData(): An attempt was made to get an optional field that was not enabled, call hasTemperatureData() to determine if it is safe to call getTemperatureData()");
}

const uci::type::ComponentTemperatureType& LineDataStatusType::getTemperatureData() const {
  return getTemperatureData_();
}

uci::type::ComponentTemperatureType& LineDataStatusType::getTemperatureData() {
  return getTemperatureData_();
}

uci::type::LineDataStatusType& LineDataStatusType::setTemperatureData(const uci::type::ComponentTemperatureType& accessor) {
  enableTemperatureData();
  if (&accessor != temperatureData_Accessor.get()) {
    temperatureData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LineDataStatusType::hasTemperatureData() const noexcept {
  return static_cast<bool>(temperatureData_Accessor);
}

uci::type::ComponentTemperatureType& LineDataStatusType::enableTemperatureData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentTemperatureType : type};
  if ((!temperatureData_Accessor) || (temperatureData_Accessor->getAccessorType() != requestedType)) {
    temperatureData_Accessor = ComponentTemperatureType::create(requestedType);
    if (!temperatureData_Accessor) {
      throw uci::base::UCIException("Error in enableTemperatureData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *temperatureData_Accessor;
}

uci::type::LineDataStatusType& LineDataStatusType::clearTemperatureData() noexcept {
  temperatureData_Accessor.reset();
  return *this;
}

xs::Double LineDataStatusType::getFlowRate() const {
  if (flowRate_Accessor) {
    return *flowRate_Accessor;
  }
  throw uci::base::UCIException("Error in getFlowRate(): An attempt was made to get an optional field that was not enabled, call hasFlowRate() to determine if it is safe to call getFlowRate()");
}

uci::type::LineDataStatusType& LineDataStatusType::setFlowRate(xs::Double value) {
  flowRate_Accessor = value;
  return *this;
}

bool LineDataStatusType::hasFlowRate() const noexcept {
  return flowRate_Accessor.has_value();
}

uci::type::LineDataStatusType& LineDataStatusType::clearFlowRate() noexcept {
  flowRate_Accessor.reset();
  return *this;
}

uci::type::VisibleString64Type& LineDataStatusType::getDirection_() const {
  if (direction_Accessor) {
    return *direction_Accessor;
  }
  throw uci::base::UCIException("Error in getDirection(): An attempt was made to get an optional field that was not enabled, call hasDirection() to determine if it is safe to call getDirection()");
}

const uci::type::VisibleString64Type& LineDataStatusType::getDirection() const {
  return getDirection_();
}

uci::type::VisibleString64Type& LineDataStatusType::getDirection() {
  return getDirection_();
}

uci::type::LineDataStatusType& LineDataStatusType::setDirection(const uci::type::VisibleString64Type& value) {
  return setDirection(value.c_str());
}

uci::type::LineDataStatusType& LineDataStatusType::setDirection(const std::string& value) {
  return setDirection(value.c_str());
}

uci::type::LineDataStatusType& LineDataStatusType::setDirection(const char* value) {
  enableDirection().setStringValue(value);
  return *this;
}

bool LineDataStatusType::hasDirection() const noexcept {
  return static_cast<bool>(direction_Accessor);
}

uci::type::VisibleString64Type& LineDataStatusType::enableDirection(uci::base::accessorType::AccessorType type) {
  if (!direction_Accessor) {
    direction_Accessor = VisibleString64Type::create(type);
  }
  return *direction_Accessor;
}

uci::type::LineDataStatusType& LineDataStatusType::clearDirection() noexcept {
  direction_Accessor.reset();
  return *this;
}

uci::type::EmptyType& LineDataStatusType::getIsGravityFeed_() const {
  if (isGravityFeed_Accessor) {
    return *isGravityFeed_Accessor;
  }
  throw uci::base::UCIException("Error in getIsGravityFeed(): An attempt was made to get an optional field that was not enabled, call hasIsGravityFeed() to determine if it is safe to call getIsGravityFeed()");
}

const uci::type::EmptyType& LineDataStatusType::getIsGravityFeed() const {
  return getIsGravityFeed_();
}

uci::type::EmptyType& LineDataStatusType::getIsGravityFeed() {
  return getIsGravityFeed_();
}

uci::type::LineDataStatusType& LineDataStatusType::setIsGravityFeed(const uci::type::EmptyType& value) {
  return setIsGravityFeed(value.c_str());
}

uci::type::LineDataStatusType& LineDataStatusType::setIsGravityFeed(const std::string& value) {
  return setIsGravityFeed(value.c_str());
}

uci::type::LineDataStatusType& LineDataStatusType::setIsGravityFeed(const char* value) {
  enableIsGravityFeed().setStringValue(value);
  return *this;
}

bool LineDataStatusType::hasIsGravityFeed() const noexcept {
  return static_cast<bool>(isGravityFeed_Accessor);
}

uci::type::EmptyType& LineDataStatusType::enableIsGravityFeed(uci::base::accessorType::AccessorType type) {
  if (!isGravityFeed_Accessor) {
    isGravityFeed_Accessor = EmptyType::create(type);
  }
  return *isGravityFeed_Accessor;
}

uci::type::LineDataStatusType& LineDataStatusType::clearIsGravityFeed() noexcept {
  isGravityFeed_Accessor.reset();
  return *this;
}

std::unique_ptr<LineDataStatusType> LineDataStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lineDataStatusType : type};
  return (requestedType == uci::type::accessorType::lineDataStatusType) ? boost::make_unique<LineDataStatusType>() : nullptr;
}

/**  */
namespace LineDataStatusType_Names {

constexpr const char* Extern_Type_Name{"LineDataStatusType"};
constexpr const char* PressureData_Name{"PressureData"};
constexpr const char* TemperatureData_Name{"TemperatureData"};
constexpr const char* FlowRate_Name{"FlowRate"};
constexpr const char* Direction_Name{"Direction"};
constexpr const char* IsGravityFeed_Name{"IsGravityFeed"};

} // namespace LineDataStatusType_Names

void LineDataStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LineDataStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LineDataStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::PressureData_Name) {
      ComponentPressureType::deserialize(valueType.second, accessor.enablePressureData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::TemperatureData_Name) {
      ComponentTemperatureType::deserialize(valueType.second, accessor.enableTemperatureData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::FlowRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlowRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::Direction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDirection(*value);
      }
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::IsGravityFeed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsGravityFeed(*value);
      }
    }
  }
  ComponentDetailedStatusType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string LineDataStatusType::serialize(const uci::type::LineDataStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LineDataStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LineDataStatusType_Names::Extern_Type_Name);
  }
  ComponentDetailedStatusType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPressureData()) {
    ComponentPressureType::serialize(accessor.getPressureData(), node, LineDataStatusType_Names::PressureData_Name);
  }
  if (accessor.hasTemperatureData()) {
    ComponentTemperatureType::serialize(accessor.getTemperatureData(), node, LineDataStatusType_Names::TemperatureData_Name);
  }
  if (accessor.hasFlowRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFlowRate(), node, LineDataStatusType_Names::FlowRate_Name);
  }
  if (accessor.hasDirection()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDirection(), node, LineDataStatusType_Names::Direction_Name);
  }
  if (accessor.hasIsGravityFeed()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getIsGravityFeed(), node, LineDataStatusType_Names::IsGravityFeed_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LineDataStatusType& LineDataStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LineDataStatusType>().release());
}

uci::type::LineDataStatusType& LineDataStatusType::create(const uci::type::LineDataStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LineDataStatusType> newAccessor{boost::make_unique<asb_uci::type::LineDataStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LineDataStatusType::destroy(uci::type::LineDataStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::LineDataStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

