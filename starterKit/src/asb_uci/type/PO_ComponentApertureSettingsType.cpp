/** @file PO_ComponentApertureSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentApertureSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsA_Type.h"
#include "../../../include/asb_uci/type/PO_ApertureID_Type.h"
#include "../../../include/asb_uci/type/PO_ComponentF_StopSettingsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ApertureID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentApertureSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentF_StopSettingsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentApertureSettingsType::PO_ComponentApertureSettingsType()
  : apertureID_Accessor{boost::make_unique<PO_ApertureID_Type>()},
    f_Stop_Accessor{boost::make_unique<PO_ComponentF_StopSettingsType>()} {
}

PO_ComponentApertureSettingsType::~PO_ComponentApertureSettingsType() = default;

void PO_ComponentApertureSettingsType::copy(const uci::type::PO_ComponentApertureSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentApertureSettingsType::copyImpl(const uci::type::PO_ComponentApertureSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentApertureSettingsType&>(accessor);
    setApertureID(*(accessorImpl.apertureID_Accessor));
    setF_Stop(*(accessorImpl.f_Stop_Accessor));
    if (accessorImpl.apertureControls_Accessor) {
      setApertureControls(*(accessorImpl.apertureControls_Accessor));
    } else {
      apertureControls_Accessor.reset();
    }
  }
}

void PO_ComponentApertureSettingsType::reset() noexcept {
  apertureID_Accessor->reset();
  f_Stop_Accessor->reset();
  apertureControls_Accessor.reset();
}

const uci::type::PO_ApertureID_Type& PO_ComponentApertureSettingsType::getApertureID() const {
  return *apertureID_Accessor;
}

uci::type::PO_ApertureID_Type& PO_ComponentApertureSettingsType::getApertureID() {
  return *apertureID_Accessor;
}

uci::type::PO_ComponentApertureSettingsType& PO_ComponentApertureSettingsType::setApertureID(const uci::type::PO_ApertureID_Type& accessor) {
  if (&accessor != apertureID_Accessor.get()) {
    apertureID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentF_StopSettingsType& PO_ComponentApertureSettingsType::getF_Stop() const {
  return *f_Stop_Accessor;
}

uci::type::PO_ComponentF_StopSettingsType& PO_ComponentApertureSettingsType::getF_Stop() {
  return *f_Stop_Accessor;
}

uci::type::PO_ComponentApertureSettingsType& PO_ComponentApertureSettingsType::setF_Stop(const uci::type::PO_ComponentF_StopSettingsType& accessor) {
  if (&accessor != f_Stop_Accessor.get()) {
    f_Stop_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentControlsA_Type& PO_ComponentApertureSettingsType::getApertureControls_() const {
  if (apertureControls_Accessor) {
    return *apertureControls_Accessor;
  }
  throw uci::base::UCIException("Error in getApertureControls(): An attempt was made to get an optional field that was not enabled, call hasApertureControls() to determine if it is safe to call getApertureControls()");
}

const uci::type::ComponentControlsA_Type& PO_ComponentApertureSettingsType::getApertureControls() const {
  return getApertureControls_();
}

uci::type::ComponentControlsA_Type& PO_ComponentApertureSettingsType::getApertureControls() {
  return getApertureControls_();
}

uci::type::PO_ComponentApertureSettingsType& PO_ComponentApertureSettingsType::setApertureControls(const uci::type::ComponentControlsA_Type& accessor) {
  enableApertureControls();
  if (&accessor != apertureControls_Accessor.get()) {
    apertureControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentApertureSettingsType::hasApertureControls() const noexcept {
  return static_cast<bool>(apertureControls_Accessor);
}

uci::type::ComponentControlsA_Type& PO_ComponentApertureSettingsType::enableApertureControls(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsA_Type : type};
  if ((!apertureControls_Accessor) || (apertureControls_Accessor->getAccessorType() != requestedType)) {
    apertureControls_Accessor = ComponentControlsA_Type::create(requestedType);
    if (!apertureControls_Accessor) {
      throw uci::base::UCIException("Error in enableApertureControls(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *apertureControls_Accessor;
}

uci::type::PO_ComponentApertureSettingsType& PO_ComponentApertureSettingsType::clearApertureControls() noexcept {
  apertureControls_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentApertureSettingsType> PO_ComponentApertureSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentApertureSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentApertureSettingsType) ? boost::make_unique<PO_ComponentApertureSettingsType>() : nullptr;
}

/**  */
namespace PO_ComponentApertureSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentApertureSettingsType"};
constexpr const char* ApertureID_Name{"ApertureID"};
constexpr const char* F_Stop_Name{"F_Stop"};
constexpr const char* ApertureControls_Name{"ApertureControls"};

} // namespace PO_ComponentApertureSettingsType_Names

void PO_ComponentApertureSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentApertureSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentApertureSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentApertureSettingsType_Names::ApertureID_Name) {
      PO_ApertureID_Type::deserialize(valueType.second, accessor.getApertureID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentApertureSettingsType_Names::F_Stop_Name) {
      PO_ComponentF_StopSettingsType::deserialize(valueType.second, accessor.getF_Stop(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentApertureSettingsType_Names::ApertureControls_Name) {
      ComponentControlsA_Type::deserialize(valueType.second, accessor.enableApertureControls(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentApertureSettingsType::serialize(const uci::type::PO_ComponentApertureSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentApertureSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentApertureSettingsType_Names::Extern_Type_Name);
  }
  PO_ApertureID_Type::serialize(accessor.getApertureID(), node, PO_ComponentApertureSettingsType_Names::ApertureID_Name);
  PO_ComponentF_StopSettingsType::serialize(accessor.getF_Stop(), node, PO_ComponentApertureSettingsType_Names::F_Stop_Name);
  if (accessor.hasApertureControls()) {
    ComponentControlsA_Type::serialize(accessor.getApertureControls(), node, PO_ComponentApertureSettingsType_Names::ApertureControls_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentApertureSettingsType& PO_ComponentApertureSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentApertureSettingsType>().release());
}

uci::type::PO_ComponentApertureSettingsType& PO_ComponentApertureSettingsType::create(const uci::type::PO_ComponentApertureSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentApertureSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentApertureSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentApertureSettingsType::destroy(uci::type::PO_ComponentApertureSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentApertureSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

