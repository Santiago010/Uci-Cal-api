/** @file PO_ComponentSettingsProcessingStageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentSettingsProcessingStageType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentControlsA_Type.h"
#include "asb_uci/type/PO_ComponentSettingsProcessingStageSettingsType.h"
#include "asb_uci/type/PO_FPA_ID_Type.h"
#include "asb_uci/type/PO_ProcessingStageID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentControlsA_Type.h"
#include "uci/type/PO_ComponentSettingsProcessingStageSettingsType.h"
#include "uci/type/PO_ComponentSettingsProcessingStageType.h"
#include "uci/type/PO_FPA_ID_Type.h"
#include "uci/type/PO_ProcessingStageID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsProcessingStageType::PO_ComponentSettingsProcessingStageType()
  : processingStageID_Accessor{boost::make_unique<PO_ProcessingStageID_Type>()},
    fPA_ID_Accessor{boost::make_unique<FPA_ID>(0, SIZE_MAX)} {
}

PO_ComponentSettingsProcessingStageType::~PO_ComponentSettingsProcessingStageType() = default;

void PO_ComponentSettingsProcessingStageType::copy(const uci::type::PO_ComponentSettingsProcessingStageType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsProcessingStageType::copyImpl(const uci::type::PO_ComponentSettingsProcessingStageType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsProcessingStageType&>(accessor);
    setProcessingStageID(*(accessorImpl.processingStageID_Accessor));
    setFPA_ID(*(accessorImpl.fPA_ID_Accessor));
    if (accessorImpl.processingStageControls_Accessor) {
      setProcessingStageControls(*(accessorImpl.processingStageControls_Accessor));
    } else {
      processingStageControls_Accessor.reset();
    }
    if (accessorImpl.settings_Accessor) {
      setSettings(*(accessorImpl.settings_Accessor));
    } else {
      settings_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsProcessingStageType::reset() noexcept {
  processingStageID_Accessor->reset();
  fPA_ID_Accessor->reset();
  processingStageControls_Accessor.reset();
  settings_Accessor.reset();
}

const uci::type::PO_ProcessingStageID_Type& PO_ComponentSettingsProcessingStageType::getProcessingStageID() const {
  return *processingStageID_Accessor;
}

uci::type::PO_ProcessingStageID_Type& PO_ComponentSettingsProcessingStageType::getProcessingStageID() {
  return *processingStageID_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::setProcessingStageID(const uci::type::PO_ProcessingStageID_Type& accessor) {
  if (&accessor != processingStageID_Accessor.get()) {
    processingStageID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentSettingsProcessingStageType::FPA_ID& PO_ComponentSettingsProcessingStageType::getFPA_ID() const {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageType::FPA_ID& PO_ComponentSettingsProcessingStageType::getFPA_ID() {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::setFPA_ID(const uci::type::PO_ComponentSettingsProcessingStageType::FPA_ID& accessor) {
  if (&accessor != fPA_ID_Accessor.get()) {
    fPA_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsProcessingStageType::getProcessingStageControls_() const {
  if (processingStageControls_Accessor) {
    return *processingStageControls_Accessor;
  }
  throw uci::base::UCIException("Error in getProcessingStageControls(): An attempt was made to get an optional field that was not enabled, call hasProcessingStageControls() to determine if it is safe to call getProcessingStageControls()");
}

const uci::type::ComponentControlsA_Type& PO_ComponentSettingsProcessingStageType::getProcessingStageControls() const {
  return getProcessingStageControls_();
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsProcessingStageType::getProcessingStageControls() {
  return getProcessingStageControls_();
}

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::setProcessingStageControls(const uci::type::ComponentControlsA_Type& accessor) {
  enableProcessingStageControls();
  if (&accessor != processingStageControls_Accessor.get()) {
    processingStageControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProcessingStageType::hasProcessingStageControls() const noexcept {
  return static_cast<bool>(processingStageControls_Accessor);
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsProcessingStageType::enableProcessingStageControls(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsA_Type : type};
  if ((!processingStageControls_Accessor) || (processingStageControls_Accessor->getAccessorType() != requestedType)) {
    processingStageControls_Accessor = ComponentControlsA_Type::create(requestedType);
    if (!processingStageControls_Accessor) {
      throw uci::base::UCIException("Error in enableProcessingStageControls(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *processingStageControls_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::clearProcessingStageControls() noexcept {
  processingStageControls_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsProcessingStageSettingsType& PO_ComponentSettingsProcessingStageType::getSettings_() const {
  if (settings_Accessor) {
    return *settings_Accessor;
  }
  throw uci::base::UCIException("Error in getSettings(): An attempt was made to get an optional field that was not enabled, call hasSettings() to determine if it is safe to call getSettings()");
}

const uci::type::PO_ComponentSettingsProcessingStageSettingsType& PO_ComponentSettingsProcessingStageType::getSettings() const {
  return getSettings_();
}

uci::type::PO_ComponentSettingsProcessingStageSettingsType& PO_ComponentSettingsProcessingStageType::getSettings() {
  return getSettings_();
}

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::setSettings(const uci::type::PO_ComponentSettingsProcessingStageSettingsType& accessor) {
  enableSettings();
  if (&accessor != settings_Accessor.get()) {
    settings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProcessingStageType::hasSettings() const noexcept {
  return static_cast<bool>(settings_Accessor);
}

uci::type::PO_ComponentSettingsProcessingStageSettingsType& PO_ComponentSettingsProcessingStageType::enableSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsProcessingStageSettingsType : type};
  if ((!settings_Accessor) || (settings_Accessor->getAccessorType() != requestedType)) {
    settings_Accessor = PO_ComponentSettingsProcessingStageSettingsType::create(requestedType);
    if (!settings_Accessor) {
      throw uci::base::UCIException("Error in enableSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *settings_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::clearSettings() noexcept {
  settings_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentSettingsProcessingStageType> PO_ComponentSettingsProcessingStageType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsProcessingStageType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsProcessingStageType) ? boost::make_unique<PO_ComponentSettingsProcessingStageType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsProcessingStageType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsProcessingStageType"};
constexpr const char* ProcessingStageID_Name{"ProcessingStageID"};
constexpr const char* FPA_ID_Name{"FPA_ID"};
constexpr const char* ProcessingStageControls_Name{"ProcessingStageControls"};
constexpr const char* Settings_Name{"Settings"};

} // namespace PO_ComponentSettingsProcessingStageType_Names

void PO_ComponentSettingsProcessingStageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsProcessingStageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsProcessingStageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageType_Names::ProcessingStageID_Name) {
      PO_ProcessingStageID_Type::deserialize(valueType.second, accessor.getProcessingStageID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageType_Names::FPA_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentSettingsProcessingStageType::FPA_ID& boundedList = accessor.getFPA_ID();
        const uci::type::PO_ComponentSettingsProcessingStageType::FPA_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_FPA_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageType_Names::ProcessingStageControls_Name) {
      ComponentControlsA_Type::deserialize(valueType.second, accessor.enableProcessingStageControls(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageType_Names::Settings_Name) {
      PO_ComponentSettingsProcessingStageSettingsType::deserialize(valueType.second, accessor.enableSettings(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsProcessingStageType::serialize(const uci::type::PO_ComponentSettingsProcessingStageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsProcessingStageType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsProcessingStageType_Names::Extern_Type_Name);
  }
  PO_ProcessingStageID_Type::serialize(accessor.getProcessingStageID(), node, PO_ComponentSettingsProcessingStageType_Names::ProcessingStageID_Name);
  {
    const uci::type::PO_ComponentSettingsProcessingStageType::FPA_ID& boundedList = accessor.getFPA_ID();
    for (uci::type::PO_ComponentSettingsProcessingStageType::FPA_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_FPA_ID_Type::serialize(boundedList.at(i), node, PO_ComponentSettingsProcessingStageType_Names::FPA_ID_Name);
    }
  }
  if (accessor.hasProcessingStageControls()) {
    ComponentControlsA_Type::serialize(accessor.getProcessingStageControls(), node, PO_ComponentSettingsProcessingStageType_Names::ProcessingStageControls_Name);
  }
  if (accessor.hasSettings()) {
    PO_ComponentSettingsProcessingStageSettingsType::serialize(accessor.getSettings(), node, PO_ComponentSettingsProcessingStageType_Names::Settings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsProcessingStageType>().release());
}

uci::type::PO_ComponentSettingsProcessingStageType& PO_ComponentSettingsProcessingStageType::create(const uci::type::PO_ComponentSettingsProcessingStageType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsProcessingStageType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsProcessingStageType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsProcessingStageType::destroy(uci::type::PO_ComponentSettingsProcessingStageType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsProcessingStageType*>(&accessor);
}

} // namespace type

} // namespace uci

