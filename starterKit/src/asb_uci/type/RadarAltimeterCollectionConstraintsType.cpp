/** @file RadarAltimeterCollectionConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RadarAltimeterCollectionConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeConstraintsType.h"
#include "../../../include/asb_uci/type/AltitudeReferenceEnum.h"
#include "../../../include/asb_uci/type/EmconConstraintType.h"
#include "../../../include/asb_uci/type/FalseAlarmType.h"
#include "../../../include/asb_uci/type/RadarAltimeterAngleConstraintsType.h"
#include "../../../include/asb_uci/type/SlantRangeConstraintsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeReferenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmconConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FalseAlarmType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterAngleConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterCollectionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SlantRangeConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarAltimeterCollectionConstraintsType::RadarAltimeterCollectionConstraintsType() = default;

RadarAltimeterCollectionConstraintsType::~RadarAltimeterCollectionConstraintsType() = default;

void RadarAltimeterCollectionConstraintsType::copy(const uci::type::RadarAltimeterCollectionConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void RadarAltimeterCollectionConstraintsType::copyImpl(const uci::type::RadarAltimeterCollectionConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarAltimeterCollectionConstraintsType&>(accessor);
    if (accessorImpl.angleConstraints_Accessor) {
      setAngleConstraints(*(accessorImpl.angleConstraints_Accessor));
    } else {
      angleConstraints_Accessor.reset();
    }
    if (accessorImpl.rangeConstraints_Accessor) {
      setRangeConstraints(*(accessorImpl.rangeConstraints_Accessor));
    } else {
      rangeConstraints_Accessor.reset();
    }
    if (accessorImpl.falseAlarm_Accessor) {
      setFalseAlarm(*(accessorImpl.falseAlarm_Accessor));
    } else {
      falseAlarm_Accessor.reset();
    }
    if (accessorImpl.hasProbabilityOfDetection()) {
      setProbabilityOfDetection(accessorImpl.getProbabilityOfDetection());
    } else {
      clearProbabilityOfDetection();
    }
    if (accessorImpl.emcon_Accessor) {
      setEmcon(*(accessorImpl.emcon_Accessor));
    } else {
      emcon_Accessor.reset();
    }
    if (accessorImpl.altitudeConstraint_Accessor) {
      setAltitudeConstraint(*(accessorImpl.altitudeConstraint_Accessor));
    } else {
      altitudeConstraint_Accessor.reset();
    }
    if (accessorImpl.altitudeReference_Accessor) {
      setAltitudeReference(*(accessorImpl.altitudeReference_Accessor));
    } else {
      altitudeReference_Accessor.reset();
    }
  }
}

void RadarAltimeterCollectionConstraintsType::reset() noexcept {
  angleConstraints_Accessor.reset();
  rangeConstraints_Accessor.reset();
  falseAlarm_Accessor.reset();
  clearProbabilityOfDetection();
  emcon_Accessor.reset();
  altitudeConstraint_Accessor.reset();
  altitudeReference_Accessor.reset();
}

uci::type::RadarAltimeterAngleConstraintsType& RadarAltimeterCollectionConstraintsType::getAngleConstraints_() const {
  if (angleConstraints_Accessor) {
    return *angleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasAngleConstraints() to determine if it is safe to call getAngleConstraints()");
}

const uci::type::RadarAltimeterAngleConstraintsType& RadarAltimeterCollectionConstraintsType::getAngleConstraints() const {
  return getAngleConstraints_();
}

uci::type::RadarAltimeterAngleConstraintsType& RadarAltimeterCollectionConstraintsType::getAngleConstraints() {
  return getAngleConstraints_();
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setAngleConstraints(const uci::type::RadarAltimeterAngleConstraintsType& accessor) {
  enableAngleConstraints();
  if (&accessor != angleConstraints_Accessor.get()) {
    angleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarAltimeterCollectionConstraintsType::hasAngleConstraints() const noexcept {
  return static_cast<bool>(angleConstraints_Accessor);
}

uci::type::RadarAltimeterAngleConstraintsType& RadarAltimeterCollectionConstraintsType::enableAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterAngleConstraintsType : type};
  if ((!angleConstraints_Accessor) || (angleConstraints_Accessor->getAccessorType() != requestedType)) {
    angleConstraints_Accessor = RadarAltimeterAngleConstraintsType::create(requestedType);
    if (!angleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *angleConstraints_Accessor;
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::clearAngleConstraints() noexcept {
  angleConstraints_Accessor.reset();
  return *this;
}

uci::type::SlantRangeConstraintsType& RadarAltimeterCollectionConstraintsType::getRangeConstraints_() const {
  if (rangeConstraints_Accessor) {
    return *rangeConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeConstraints(): An attempt was made to get an optional field that was not enabled, call hasRangeConstraints() to determine if it is safe to call getRangeConstraints()");
}

const uci::type::SlantRangeConstraintsType& RadarAltimeterCollectionConstraintsType::getRangeConstraints() const {
  return getRangeConstraints_();
}

uci::type::SlantRangeConstraintsType& RadarAltimeterCollectionConstraintsType::getRangeConstraints() {
  return getRangeConstraints_();
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setRangeConstraints(const uci::type::SlantRangeConstraintsType& accessor) {
  enableRangeConstraints();
  if (&accessor != rangeConstraints_Accessor.get()) {
    rangeConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarAltimeterCollectionConstraintsType::hasRangeConstraints() const noexcept {
  return static_cast<bool>(rangeConstraints_Accessor);
}

uci::type::SlantRangeConstraintsType& RadarAltimeterCollectionConstraintsType::enableRangeConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeConstraintsType : type};
  if ((!rangeConstraints_Accessor) || (rangeConstraints_Accessor->getAccessorType() != requestedType)) {
    rangeConstraints_Accessor = SlantRangeConstraintsType::create(requestedType);
    if (!rangeConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableRangeConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rangeConstraints_Accessor;
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::clearRangeConstraints() noexcept {
  rangeConstraints_Accessor.reset();
  return *this;
}

uci::type::FalseAlarmType& RadarAltimeterCollectionConstraintsType::getFalseAlarm_() const {
  if (falseAlarm_Accessor) {
    return *falseAlarm_Accessor;
  }
  throw uci::base::UCIException("Error in getFalseAlarm(): An attempt was made to get an optional field that was not enabled, call hasFalseAlarm() to determine if it is safe to call getFalseAlarm()");
}

const uci::type::FalseAlarmType& RadarAltimeterCollectionConstraintsType::getFalseAlarm() const {
  return getFalseAlarm_();
}

uci::type::FalseAlarmType& RadarAltimeterCollectionConstraintsType::getFalseAlarm() {
  return getFalseAlarm_();
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setFalseAlarm(const uci::type::FalseAlarmType& accessor) {
  enableFalseAlarm();
  if (&accessor != falseAlarm_Accessor.get()) {
    falseAlarm_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarAltimeterCollectionConstraintsType::hasFalseAlarm() const noexcept {
  return static_cast<bool>(falseAlarm_Accessor);
}

uci::type::FalseAlarmType& RadarAltimeterCollectionConstraintsType::enableFalseAlarm(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::falseAlarmType : type};
  if ((!falseAlarm_Accessor) || (falseAlarm_Accessor->getAccessorType() != requestedType)) {
    falseAlarm_Accessor = FalseAlarmType::create(requestedType);
    if (!falseAlarm_Accessor) {
      throw uci::base::UCIException("Error in enableFalseAlarm(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *falseAlarm_Accessor;
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::clearFalseAlarm() noexcept {
  falseAlarm_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue RadarAltimeterCollectionConstraintsType::getProbabilityOfDetection() const {
  if (probabilityOfDetection_Accessor) {
    return *probabilityOfDetection_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfDetection(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfDetection() to determine if it is safe to call getProbabilityOfDetection()");
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setProbabilityOfDetection(uci::type::PercentTypeValue value) {
  probabilityOfDetection_Accessor = value;
  return *this;
}

bool RadarAltimeterCollectionConstraintsType::hasProbabilityOfDetection() const noexcept {
  return probabilityOfDetection_Accessor.has_value();
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::clearProbabilityOfDetection() noexcept {
  probabilityOfDetection_Accessor.reset();
  return *this;
}

uci::type::EmconConstraintType& RadarAltimeterCollectionConstraintsType::getEmcon_() const {
  if (emcon_Accessor) {
    return *emcon_Accessor;
  }
  throw uci::base::UCIException("Error in getEmcon(): An attempt was made to get an optional field that was not enabled, call hasEmcon() to determine if it is safe to call getEmcon()");
}

const uci::type::EmconConstraintType& RadarAltimeterCollectionConstraintsType::getEmcon() const {
  return getEmcon_();
}

uci::type::EmconConstraintType& RadarAltimeterCollectionConstraintsType::getEmcon() {
  return getEmcon_();
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setEmcon(const uci::type::EmconConstraintType& accessor) {
  enableEmcon();
  if (&accessor != emcon_Accessor.get()) {
    emcon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarAltimeterCollectionConstraintsType::hasEmcon() const noexcept {
  return static_cast<bool>(emcon_Accessor);
}

uci::type::EmconConstraintType& RadarAltimeterCollectionConstraintsType::enableEmcon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconConstraintType : type};
  if ((!emcon_Accessor) || (emcon_Accessor->getAccessorType() != requestedType)) {
    emcon_Accessor = EmconConstraintType::create(requestedType);
    if (!emcon_Accessor) {
      throw uci::base::UCIException("Error in enableEmcon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emcon_Accessor;
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::clearEmcon() noexcept {
  emcon_Accessor.reset();
  return *this;
}

uci::type::AltitudeConstraintsType& RadarAltimeterCollectionConstraintsType::getAltitudeConstraint_() const {
  if (altitudeConstraint_Accessor) {
    return *altitudeConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeConstraint(): An attempt was made to get an optional field that was not enabled, call hasAltitudeConstraint() to determine if it is safe to call getAltitudeConstraint()");
}

const uci::type::AltitudeConstraintsType& RadarAltimeterCollectionConstraintsType::getAltitudeConstraint() const {
  return getAltitudeConstraint_();
}

uci::type::AltitudeConstraintsType& RadarAltimeterCollectionConstraintsType::getAltitudeConstraint() {
  return getAltitudeConstraint_();
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setAltitudeConstraint(const uci::type::AltitudeConstraintsType& accessor) {
  enableAltitudeConstraint();
  if (&accessor != altitudeConstraint_Accessor.get()) {
    altitudeConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarAltimeterCollectionConstraintsType::hasAltitudeConstraint() const noexcept {
  return static_cast<bool>(altitudeConstraint_Accessor);
}

uci::type::AltitudeConstraintsType& RadarAltimeterCollectionConstraintsType::enableAltitudeConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeConstraintsType : type};
  if ((!altitudeConstraint_Accessor) || (altitudeConstraint_Accessor->getAccessorType() != requestedType)) {
    altitudeConstraint_Accessor = AltitudeConstraintsType::create(requestedType);
    if (!altitudeConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeConstraint_Accessor;
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::clearAltitudeConstraint() noexcept {
  altitudeConstraint_Accessor.reset();
  return *this;
}

uci::type::AltitudeReferenceEnum& RadarAltimeterCollectionConstraintsType::getAltitudeReference_() const {
  if (altitudeReference_Accessor) {
    return *altitudeReference_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeReference(): An attempt was made to get an optional field that was not enabled, call hasAltitudeReference() to determine if it is safe to call getAltitudeReference()");
}

const uci::type::AltitudeReferenceEnum& RadarAltimeterCollectionConstraintsType::getAltitudeReference() const {
  return getAltitudeReference_();
}

uci::type::AltitudeReferenceEnum& RadarAltimeterCollectionConstraintsType::getAltitudeReference() {
  return getAltitudeReference_();
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setAltitudeReference(const uci::type::AltitudeReferenceEnum& accessor) {
  enableAltitudeReference();
  if (&accessor != altitudeReference_Accessor.get()) {
    altitudeReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::setAltitudeReference(const uci::type::AltitudeReferenceEnum::EnumerationItem value) {
  enableAltitudeReference().setValue(value);
  return *this;
}

bool RadarAltimeterCollectionConstraintsType::hasAltitudeReference() const noexcept {
  return static_cast<bool>(altitudeReference_Accessor);
}

uci::type::AltitudeReferenceEnum& RadarAltimeterCollectionConstraintsType::enableAltitudeReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeReferenceEnum : type};
  if ((!altitudeReference_Accessor) || (altitudeReference_Accessor->getAccessorType() != requestedType)) {
    altitudeReference_Accessor = AltitudeReferenceEnum::create(requestedType);
    if (!altitudeReference_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeReference_Accessor;
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::clearAltitudeReference() noexcept {
  altitudeReference_Accessor.reset();
  return *this;
}

std::unique_ptr<RadarAltimeterCollectionConstraintsType> RadarAltimeterCollectionConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterCollectionConstraintsType : type};
  return (requestedType == uci::type::accessorType::radarAltimeterCollectionConstraintsType) ? boost::make_unique<RadarAltimeterCollectionConstraintsType>() : nullptr;
}

/**  */
namespace RadarAltimeterCollectionConstraintsType_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterCollectionConstraintsType"};
constexpr const char* AngleConstraints_Name{"AngleConstraints"};
constexpr const char* RangeConstraints_Name{"RangeConstraints"};
constexpr const char* FalseAlarm_Name{"FalseAlarm"};
constexpr const char* ProbabilityOfDetection_Name{"ProbabilityOfDetection"};
constexpr const char* Emcon_Name{"Emcon"};
constexpr const char* AltitudeConstraint_Name{"AltitudeConstraint"};
constexpr const char* AltitudeReference_Name{"AltitudeReference"};

} // namespace RadarAltimeterCollectionConstraintsType_Names

void RadarAltimeterCollectionConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterCollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterCollectionConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterCollectionConstraintsType_Names::AngleConstraints_Name) {
      RadarAltimeterAngleConstraintsType::deserialize(valueType.second, accessor.enableAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarAltimeterCollectionConstraintsType_Names::RangeConstraints_Name) {
      SlantRangeConstraintsType::deserialize(valueType.second, accessor.enableRangeConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarAltimeterCollectionConstraintsType_Names::FalseAlarm_Name) {
      FalseAlarmType::deserialize(valueType.second, accessor.enableFalseAlarm(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarAltimeterCollectionConstraintsType_Names::ProbabilityOfDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfDetection(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCollectionConstraintsType_Names::Emcon_Name) {
      EmconConstraintType::deserialize(valueType.second, accessor.enableEmcon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarAltimeterCollectionConstraintsType_Names::AltitudeConstraint_Name) {
      AltitudeConstraintsType::deserialize(valueType.second, accessor.enableAltitudeConstraint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarAltimeterCollectionConstraintsType_Names::AltitudeReference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAltitudeReference().setValueFromName(*value);
      }
    }
  }
}

std::string RadarAltimeterCollectionConstraintsType::serialize(const uci::type::RadarAltimeterCollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarAltimeterCollectionConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterCollectionConstraintsType_Names::Extern_Type_Name);
  }
  if (accessor.hasAngleConstraints()) {
    RadarAltimeterAngleConstraintsType::serialize(accessor.getAngleConstraints(), node, RadarAltimeterCollectionConstraintsType_Names::AngleConstraints_Name);
  }
  if (accessor.hasRangeConstraints()) {
    SlantRangeConstraintsType::serialize(accessor.getRangeConstraints(), node, RadarAltimeterCollectionConstraintsType_Names::RangeConstraints_Name);
  }
  if (accessor.hasFalseAlarm()) {
    FalseAlarmType::serialize(accessor.getFalseAlarm(), node, RadarAltimeterCollectionConstraintsType_Names::FalseAlarm_Name);
  }
  if (accessor.hasProbabilityOfDetection()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfDetection(), node, RadarAltimeterCollectionConstraintsType_Names::ProbabilityOfDetection_Name);
  }
  if (accessor.hasEmcon()) {
    EmconConstraintType::serialize(accessor.getEmcon(), node, RadarAltimeterCollectionConstraintsType_Names::Emcon_Name);
  }
  if (accessor.hasAltitudeConstraint()) {
    AltitudeConstraintsType::serialize(accessor.getAltitudeConstraint(), node, RadarAltimeterCollectionConstraintsType_Names::AltitudeConstraint_Name);
  }
  if (accessor.hasAltitudeReference()) {
    AltitudeReferenceEnum::serialize(accessor.getAltitudeReference(), node, RadarAltimeterCollectionConstraintsType_Names::AltitudeReference_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarAltimeterCollectionConstraintsType>().release());
}

uci::type::RadarAltimeterCollectionConstraintsType& RadarAltimeterCollectionConstraintsType::create(const uci::type::RadarAltimeterCollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarAltimeterCollectionConstraintsType> newAccessor{boost::make_unique<asb_uci::type::RadarAltimeterCollectionConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarAltimeterCollectionConstraintsType::destroy(uci::type::RadarAltimeterCollectionConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarAltimeterCollectionConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

