/** @file OperatorLocationOfInterestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OperatorLocationOfInterestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/EntityPositionType.h"
#include "../../../include/asb_uci/type/OperatorLocationOfInterestID_Type.h"
#include "../../../include/asb_uci/type/ReceiverIdentificationType.h"
#include "../../../include/asb_uci/type/SystemMessageIdentifierType.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityPositionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorLocationOfInterestID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorLocationOfInterestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReceiverIdentificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemMessageIdentifierType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorLocationOfInterestMDT::OperatorLocationOfInterestMDT()
  : operatorLocationOfInterestID_Accessor{boost::make_unique<OperatorLocationOfInterestID_Type>()},
    position_Accessor{boost::make_unique<EntityPositionType>()},
    destination_Accessor{boost::make_unique<Destination>(0, SIZE_MAX)} {
}

OperatorLocationOfInterestMDT::~OperatorLocationOfInterestMDT() = default;

void OperatorLocationOfInterestMDT::copy(const uci::type::OperatorLocationOfInterestMDT& accessor) {
  copyImpl(accessor, false);
}

void OperatorLocationOfInterestMDT::copyImpl(const uci::type::OperatorLocationOfInterestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OperatorLocationOfInterestMDT&>(accessor);
    setOperatorLocationOfInterestID(*(accessorImpl.operatorLocationOfInterestID_Accessor));
    setPosition(*(accessorImpl.position_Accessor));
    if (accessorImpl.source_Accessor) {
      setSource(*(accessorImpl.source_Accessor));
    } else {
      source_Accessor.reset();
    }
    setDestination(*(accessorImpl.destination_Accessor));
    if (accessorImpl.remarks_Accessor) {
      setRemarks(*(accessorImpl.remarks_Accessor));
    } else {
      remarks_Accessor.reset();
    }
  }
}

void OperatorLocationOfInterestMDT::reset() noexcept {
  DataRecordBaseType::reset();
  operatorLocationOfInterestID_Accessor->reset();
  position_Accessor->reset();
  source_Accessor.reset();
  destination_Accessor->reset();
  remarks_Accessor.reset();
}

const uci::type::OperatorLocationOfInterestID_Type& OperatorLocationOfInterestMDT::getOperatorLocationOfInterestID() const {
  return *operatorLocationOfInterestID_Accessor;
}

uci::type::OperatorLocationOfInterestID_Type& OperatorLocationOfInterestMDT::getOperatorLocationOfInterestID() {
  return *operatorLocationOfInterestID_Accessor;
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::setOperatorLocationOfInterestID(const uci::type::OperatorLocationOfInterestID_Type& accessor) {
  if (&accessor != operatorLocationOfInterestID_Accessor.get()) {
    operatorLocationOfInterestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityPositionType& OperatorLocationOfInterestMDT::getPosition() const {
  return *position_Accessor;
}

uci::type::EntityPositionType& OperatorLocationOfInterestMDT::getPosition() {
  return *position_Accessor;
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::setPosition(const uci::type::EntityPositionType& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemMessageIdentifierType& OperatorLocationOfInterestMDT::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): An attempt was made to get an optional field that was not enabled, call hasSource() to determine if it is safe to call getSource()");
}

const uci::type::SystemMessageIdentifierType& OperatorLocationOfInterestMDT::getSource() const {
  return getSource_();
}

uci::type::SystemMessageIdentifierType& OperatorLocationOfInterestMDT::getSource() {
  return getSource_();
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::setSource(const uci::type::SystemMessageIdentifierType& accessor) {
  enableSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorLocationOfInterestMDT::hasSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::SystemMessageIdentifierType& OperatorLocationOfInterestMDT::enableSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemMessageIdentifierType : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = SystemMessageIdentifierType::create(requestedType);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in enableSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::clearSource() noexcept {
  source_Accessor.reset();
  return *this;
}

const uci::type::OperatorLocationOfInterestMDT::Destination& OperatorLocationOfInterestMDT::getDestination() const {
  return *destination_Accessor;
}

uci::type::OperatorLocationOfInterestMDT::Destination& OperatorLocationOfInterestMDT::getDestination() {
  return *destination_Accessor;
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::setDestination(const uci::type::OperatorLocationOfInterestMDT::Destination& accessor) {
  if (&accessor != destination_Accessor.get()) {
    destination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString1024Type& OperatorLocationOfInterestMDT::getRemarks_() const {
  if (remarks_Accessor) {
    return *remarks_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarks(): An attempt was made to get an optional field that was not enabled, call hasRemarks() to determine if it is safe to call getRemarks()");
}

const uci::type::VisibleString1024Type& OperatorLocationOfInterestMDT::getRemarks() const {
  return getRemarks_();
}

uci::type::VisibleString1024Type& OperatorLocationOfInterestMDT::getRemarks() {
  return getRemarks_();
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::setRemarks(const uci::type::VisibleString1024Type& value) {
  return setRemarks(value.c_str());
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::setRemarks(const std::string& value) {
  return setRemarks(value.c_str());
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::setRemarks(const char* value) {
  enableRemarks().setStringValue(value);
  return *this;
}

bool OperatorLocationOfInterestMDT::hasRemarks() const noexcept {
  return static_cast<bool>(remarks_Accessor);
}

uci::type::VisibleString1024Type& OperatorLocationOfInterestMDT::enableRemarks(uci::base::accessorType::AccessorType type) {
  if (!remarks_Accessor) {
    remarks_Accessor = VisibleString1024Type::create(type);
  }
  return *remarks_Accessor;
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::clearRemarks() noexcept {
  remarks_Accessor.reset();
  return *this;
}

std::unique_ptr<OperatorLocationOfInterestMDT> OperatorLocationOfInterestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorLocationOfInterestMDT : type};
  return (requestedType == uci::type::accessorType::operatorLocationOfInterestMDT) ? boost::make_unique<OperatorLocationOfInterestMDT>() : nullptr;
}

/**  */
namespace OperatorLocationOfInterestMDT_Names {

constexpr const char* Extern_Type_Name{"OperatorLocationOfInterestMDT"};
constexpr const char* OperatorLocationOfInterestID_Name{"OperatorLocationOfInterestID"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Destination_Name{"Destination"};
constexpr const char* Remarks_Name{"Remarks"};

} // namespace OperatorLocationOfInterestMDT_Names

void OperatorLocationOfInterestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorLocationOfInterestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorLocationOfInterestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestMDT_Names::OperatorLocationOfInterestID_Name) {
      OperatorLocationOfInterestID_Type::deserialize(valueType.second, accessor.getOperatorLocationOfInterestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestMDT_Names::Position_Name) {
      EntityPositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestMDT_Names::Source_Name) {
      SystemMessageIdentifierType::deserialize(valueType.second, accessor.enableSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestMDT_Names::Destination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorLocationOfInterestMDT::Destination& boundedList = accessor.getDestination();
        const uci::type::OperatorLocationOfInterestMDT::Destination::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ReceiverIdentificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestMDT_Names::Remarks_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarks(*value);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OperatorLocationOfInterestMDT::serialize(const uci::type::OperatorLocationOfInterestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorLocationOfInterestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorLocationOfInterestMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  OperatorLocationOfInterestID_Type::serialize(accessor.getOperatorLocationOfInterestID(), node, OperatorLocationOfInterestMDT_Names::OperatorLocationOfInterestID_Name);
  EntityPositionType::serialize(accessor.getPosition(), node, OperatorLocationOfInterestMDT_Names::Position_Name);
  if (accessor.hasSource()) {
    SystemMessageIdentifierType::serialize(accessor.getSource(), node, OperatorLocationOfInterestMDT_Names::Source_Name);
  }
  {
    const uci::type::OperatorLocationOfInterestMDT::Destination& boundedList = accessor.getDestination();
    for (uci::type::OperatorLocationOfInterestMDT::Destination::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ReceiverIdentificationType::serialize(boundedList.at(i), node, OperatorLocationOfInterestMDT_Names::Destination_Name);
    }
  }
  if (accessor.hasRemarks()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRemarks(), node, OperatorLocationOfInterestMDT_Names::Remarks_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorLocationOfInterestMDT>().release());
}

uci::type::OperatorLocationOfInterestMDT& OperatorLocationOfInterestMDT::create(const uci::type::OperatorLocationOfInterestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorLocationOfInterestMDT> newAccessor{boost::make_unique<asb_uci::type::OperatorLocationOfInterestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorLocationOfInterestMDT::destroy(uci::type::OperatorLocationOfInterestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorLocationOfInterestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

