/** @file FileFormatType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FileFormatType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FileFormatType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/MIME_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FileFormatType::FileFormatType() = default;

FileFormatType::~FileFormatType() = default;

void FileFormatType::copy(const uci::type::FileFormatType& accessor) {
  copyImpl(accessor, false);
}

void FileFormatType::copyImpl(const uci::type::FileFormatType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FileFormatType&>(accessor);
    if (accessorImpl.mIME_Accessor) {
      setMIME(*(accessorImpl.mIME_Accessor));
    } else {
      mIME_Accessor.reset();
    }
    if (accessorImpl.nonMIME_Accessor) {
      setNonMIME(*(accessorImpl.nonMIME_Accessor));
    } else {
      nonMIME_Accessor.reset();
    }
  }
}

void FileFormatType::reset() noexcept {
  mIME_Accessor.reset();
  nonMIME_Accessor.reset();
}

uci::type::FileFormatType::FileFormatTypeChoice FileFormatType::getFileFormatTypeChoiceOrdinal() const noexcept {
  if (mIME_Accessor) {
    return FILEFORMATTYPE_CHOICE_MIME;
  }
  if (nonMIME_Accessor) {
    return FILEFORMATTYPE_CHOICE_NONMIME;
  }
  return FILEFORMATTYPE_CHOICE_NONE;
}

uci::type::FileFormatType& FileFormatType::setFileFormatTypeChoiceOrdinal(uci::type::FileFormatType::FileFormatTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case FILEFORMATTYPE_CHOICE_MIME:
      chooseMIME("setFileFormatTypeChoiceOrdinal", type);
      break;
    case FILEFORMATTYPE_CHOICE_NONMIME:
      chooseNonMIME("setFileFormatTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setFileFormatTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MIME_Type& FileFormatType::getMIME_() const {
  if (mIME_Accessor) {
    return *mIME_Accessor;
  }
  throw uci::base::UCIException("Error in getMIME(): An attempt was made to get an optional field that was not enabled, call hasMIME() to determine if it is safe to call getMIME()");
}

const uci::type::MIME_Type& FileFormatType::getMIME() const {
  return getMIME_();
}

uci::type::MIME_Type& FileFormatType::getMIME() {
  return getMIME_();
}

uci::type::FileFormatType& FileFormatType::setMIME(const uci::type::MIME_Type& value) {
  return setMIME(value.c_str());
}

uci::type::FileFormatType& FileFormatType::setMIME(const std::string& value) {
  return setMIME(value.c_str());
}

uci::type::FileFormatType& FileFormatType::setMIME(const char * value) {
  chooseMIME().setStringValue(value);
  return *this;
}

bool FileFormatType::isMIME() const noexcept {
  return static_cast<bool>(mIME_Accessor);
}

uci::type::MIME_Type& FileFormatType::chooseMIME(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  nonMIME_Accessor.reset();
  if (!mIME_Accessor) {
    mIME_Accessor = VisibleString256Type::create(type);
  }
  return *mIME_Accessor;
}

uci::type::MIME_Type& FileFormatType::chooseMIME(uci::base::accessorType::AccessorType type) {
  return chooseMIME("chooseMIME", type);
}

uci::type::ForeignKeyType& FileFormatType::getNonMIME_() const {
  if (nonMIME_Accessor) {
    return *nonMIME_Accessor;
  }
  throw uci::base::UCIException("Error in getNonMIME(): Unable to get NonMIME, field not selected");
}

const uci::type::ForeignKeyType& FileFormatType::getNonMIME() const {
  return getNonMIME_();
}

uci::type::ForeignKeyType& FileFormatType::getNonMIME() {
  return getNonMIME_();
}

uci::type::FileFormatType& FileFormatType::setNonMIME(const uci::type::ForeignKeyType& accessor) {
  chooseNonMIME("setNonMIME", accessor.getAccessorType());
  if (&accessor != nonMIME_Accessor.get()) {
    nonMIME_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool FileFormatType::isNonMIME() const noexcept {
  return static_cast<bool>(nonMIME_Accessor);
}

uci::type::ForeignKeyType& FileFormatType::chooseNonMIME(const std::string& method, uci::base::accessorType::AccessorType type) {
  mIME_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!nonMIME_Accessor) || (nonMIME_Accessor->getAccessorType() != requestedType)) {
    nonMIME_Accessor = ForeignKeyType::create(type);
    if (!nonMIME_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nonMIME_Accessor;
}

uci::type::ForeignKeyType& FileFormatType::chooseNonMIME(uci::base::accessorType::AccessorType type) {
  return chooseNonMIME("chooseNonMIME", type);
}

std::unique_ptr<FileFormatType> FileFormatType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileFormatType : type};
  return (requestedType == uci::type::accessorType::fileFormatType) ? boost::make_unique<FileFormatType>() : nullptr;
}

/**  */
namespace FileFormatType_Names {

constexpr const char* Extern_Type_Name{"FileFormatType"};
constexpr const char* MIME_Name{"MIME"};
constexpr const char* NonMIME_Name{"NonMIME"};

} // namespace FileFormatType_Names

void FileFormatType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FileFormatType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FileFormatType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FileFormatType_Names::MIME_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseMIME().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + FileFormatType_Names::NonMIME_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseNonMIME(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string FileFormatType::serialize(const uci::type::FileFormatType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FileFormatType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FileFormatType_Names::Extern_Type_Name);
  }
  if (accessor.isMIME()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMIME(), node, FileFormatType_Names::MIME_Name);
  } else if (accessor.isNonMIME()) {
    ForeignKeyType::serialize(accessor.getNonMIME(), node, FileFormatType_Names::NonMIME_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FileFormatType& FileFormatType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FileFormatType>().release());
}

uci::type::FileFormatType& FileFormatType::create(const uci::type::FileFormatType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FileFormatType> newAccessor{boost::make_unique<asb_uci::type::FileFormatType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FileFormatType::destroy(uci::type::FileFormatType& accessor) {
  delete dynamic_cast<asb_uci::type::FileFormatType*>(&accessor);
}

} // namespace type

} // namespace uci

