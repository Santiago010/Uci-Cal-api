/** @file PRI_PW_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PRI_PW_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PRI_DataType.h"
#include "asb_uci/type/SignalPulseWidthType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PRI_DataType.h"
#include "uci/type/PRI_PW_Type.h"
#include "uci/type/SignalPulseWidthType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PRI_PW_Type::PRI_PW_Type() = default;

PRI_PW_Type::~PRI_PW_Type() = default;

void PRI_PW_Type::copy(const uci::type::PRI_PW_Type& accessor) {
  copyImpl(accessor, false);
}

void PRI_PW_Type::copyImpl(const uci::type::PRI_PW_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PRI_PW_Type&>(accessor);
    if (accessorImpl.pRI_Data_Accessor) {
      setPRI_Data(*(accessorImpl.pRI_Data_Accessor));
    } else {
      pRI_Data_Accessor.reset();
    }
    if (accessorImpl.pulseWidth_Accessor) {
      setPulseWidth(*(accessorImpl.pulseWidth_Accessor));
    } else {
      pulseWidth_Accessor.reset();
    }
  }
}

void PRI_PW_Type::reset() noexcept {
  pRI_Data_Accessor.reset();
  pulseWidth_Accessor.reset();
}

uci::type::PRI_DataType& PRI_PW_Type::getPRI_Data_() const {
  if (pRI_Data_Accessor) {
    return *pRI_Data_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Data(): An attempt was made to get an optional field that was not enabled, call hasPRI_Data() to determine if it is safe to call getPRI_Data()");
}

const uci::type::PRI_DataType& PRI_PW_Type::getPRI_Data() const {
  return getPRI_Data_();
}

uci::type::PRI_DataType& PRI_PW_Type::getPRI_Data() {
  return getPRI_Data_();
}

uci::type::PRI_PW_Type& PRI_PW_Type::setPRI_Data(const uci::type::PRI_DataType& accessor) {
  enablePRI_Data();
  if (&accessor != pRI_Data_Accessor.get()) {
    pRI_Data_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PRI_PW_Type::hasPRI_Data() const noexcept {
  return static_cast<bool>(pRI_Data_Accessor);
}

uci::type::PRI_DataType& PRI_PW_Type::enablePRI_Data(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_DataType : type};
  if ((!pRI_Data_Accessor) || (pRI_Data_Accessor->getAccessorType() != requestedType)) {
    pRI_Data_Accessor = PRI_DataType::create(requestedType);
    if (!pRI_Data_Accessor) {
      throw uci::base::UCIException("Error in enablePRI_Data(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pRI_Data_Accessor;
}

uci::type::PRI_PW_Type& PRI_PW_Type::clearPRI_Data() noexcept {
  pRI_Data_Accessor.reset();
  return *this;
}

uci::type::SignalPulseWidthType& PRI_PW_Type::getPulseWidth_() const {
  if (pulseWidth_Accessor) {
    return *pulseWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidth(): An attempt was made to get an optional field that was not enabled, call hasPulseWidth() to determine if it is safe to call getPulseWidth()");
}

const uci::type::SignalPulseWidthType& PRI_PW_Type::getPulseWidth() const {
  return getPulseWidth_();
}

uci::type::SignalPulseWidthType& PRI_PW_Type::getPulseWidth() {
  return getPulseWidth_();
}

uci::type::PRI_PW_Type& PRI_PW_Type::setPulseWidth(const uci::type::SignalPulseWidthType& accessor) {
  enablePulseWidth();
  if (&accessor != pulseWidth_Accessor.get()) {
    pulseWidth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PRI_PW_Type::hasPulseWidth() const noexcept {
  return static_cast<bool>(pulseWidth_Accessor);
}

uci::type::SignalPulseWidthType& PRI_PW_Type::enablePulseWidth(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalPulseWidthType : type};
  if ((!pulseWidth_Accessor) || (pulseWidth_Accessor->getAccessorType() != requestedType)) {
    pulseWidth_Accessor = SignalPulseWidthType::create(requestedType);
    if (!pulseWidth_Accessor) {
      throw uci::base::UCIException("Error in enablePulseWidth(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pulseWidth_Accessor;
}

uci::type::PRI_PW_Type& PRI_PW_Type::clearPulseWidth() noexcept {
  pulseWidth_Accessor.reset();
  return *this;
}

std::unique_ptr<PRI_PW_Type> PRI_PW_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_PW_Type : type};
  return (requestedType == uci::type::accessorType::pRI_PW_Type) ? boost::make_unique<PRI_PW_Type>() : nullptr;
}

/**  */
namespace PRI_PW_Type_Names {

constexpr const char* Extern_Type_Name{"PRI_PW_Type"};
constexpr const char* PRI_Data_Name{"PRI_Data"};
constexpr const char* PulseWidth_Name{"PulseWidth"};

} // namespace PRI_PW_Type_Names

void PRI_PW_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::PRI_PW_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PRI_PW_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PRI_PW_Type_Names::PRI_Data_Name) {
      PRI_DataType::deserialize(valueType.second, accessor.enablePRI_Data(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PRI_PW_Type_Names::PulseWidth_Name) {
      SignalPulseWidthType::deserialize(valueType.second, accessor.enablePulseWidth(), nodeName, nsPrefix);
    }
  }
}

std::string PRI_PW_Type::serialize(const uci::type::PRI_PW_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PRI_PW_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PRI_PW_Type_Names::Extern_Type_Name);
  }
  if (accessor.hasPRI_Data()) {
    PRI_DataType::serialize(accessor.getPRI_Data(), node, PRI_PW_Type_Names::PRI_Data_Name);
  }
  if (accessor.hasPulseWidth()) {
    SignalPulseWidthType::serialize(accessor.getPulseWidth(), node, PRI_PW_Type_Names::PulseWidth_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PRI_PW_Type& PRI_PW_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PRI_PW_Type>().release());
}

uci::type::PRI_PW_Type& PRI_PW_Type::create(const uci::type::PRI_PW_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PRI_PW_Type> newAccessor{boost::make_unique<asb_uci::type::PRI_PW_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PRI_PW_Type::destroy(uci::type::PRI_PW_Type& accessor) {
  delete dynamic_cast<asb_uci::type::PRI_PW_Type*>(&accessor);
}

} // namespace type

} // namespace uci

