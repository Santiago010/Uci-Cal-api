/** @file CommMADL_CommWaveformActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommMADL_CommWaveformActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommMADL_AircraftTypeEnum.h"
#include "asb_uci/type/CommMADL_ControlType.h"
#include "asb_uci/type/CommMADL_LinkStatusListType.h"
#include "asb_uci/type/CommMADL_NetChangeStatusEnum.h"
#include "asb_uci/type/CommWaveformActivityPET.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommMADL_AircraftTypeEnum.h"
#include "uci/type/CommMADL_CommWaveformActivityType.h"
#include "uci/type/CommMADL_ControlType.h"
#include "uci/type/CommMADL_LinkStatusListType.h"
#include "uci/type/CommMADL_NetChangeStatusEnum.h"
#include "uci/type/DayOfYearType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommMADL_CommWaveformActivityType::CommMADL_CommWaveformActivityType()
  : settingsStatus_Accessor{boost::make_unique<CommMADL_ControlType>()},
    aircraftType_Accessor{boost::make_unique<CommMADL_AircraftTypeEnum>()},
    linkStatus_Accessor{boost::make_unique<CommMADL_LinkStatusListType>()} {
}

CommMADL_CommWaveformActivityType::~CommMADL_CommWaveformActivityType() = default;

void CommMADL_CommWaveformActivityType::copy(const uci::type::CommMADL_CommWaveformActivityType& accessor) {
  copyImpl(accessor, false);
}

void CommMADL_CommWaveformActivityType::copyImpl(const uci::type::CommMADL_CommWaveformActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommWaveformActivityPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommMADL_CommWaveformActivityType&>(accessor);
    setSettingsStatus(*(accessorImpl.settingsStatus_Accessor));
    setMADL_UniqueIdentifier(accessorImpl.mADL_UniqueIdentifier_Accessor);
    setAircraftType(*(accessorImpl.aircraftType_Accessor));
    setMADL_DayOfYearApplied(accessorImpl.mADL_DayOfYearApplied_Accessor);
    setVoiceCapable(accessorImpl.voiceCapable_Accessor);
    setLinkStatus(*(accessorImpl.linkStatus_Accessor));
    if (accessorImpl.netChangeStatus_Accessor) {
      setNetChangeStatus(*(accessorImpl.netChangeStatus_Accessor));
    } else {
      netChangeStatus_Accessor.reset();
    }
  }
}

void CommMADL_CommWaveformActivityType::reset() noexcept {
  CommWaveformActivityPET::reset();
  settingsStatus_Accessor->reset();
  mADL_UniqueIdentifier_Accessor = 0;
  aircraftType_Accessor->reset();
  mADL_DayOfYearApplied_Accessor = 0;
  voiceCapable_Accessor = false;
  linkStatus_Accessor->reset();
  netChangeStatus_Accessor.reset();
}

const uci::type::CommMADL_ControlType& CommMADL_CommWaveformActivityType::getSettingsStatus() const {
  return *settingsStatus_Accessor;
}

uci::type::CommMADL_ControlType& CommMADL_CommWaveformActivityType::getSettingsStatus() {
  return *settingsStatus_Accessor;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setSettingsStatus(const uci::type::CommMADL_ControlType& accessor) {
  if (&accessor != settingsStatus_Accessor.get()) {
    settingsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedShort CommMADL_CommWaveformActivityType::getMADL_UniqueIdentifier() const {
  return mADL_UniqueIdentifier_Accessor;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setMADL_UniqueIdentifier(xs::UnsignedShort value) {
  mADL_UniqueIdentifier_Accessor = value;
  return *this;
}


const uci::type::CommMADL_AircraftTypeEnum& CommMADL_CommWaveformActivityType::getAircraftType() const {
  return *aircraftType_Accessor;
}

uci::type::CommMADL_AircraftTypeEnum& CommMADL_CommWaveformActivityType::getAircraftType() {
  return *aircraftType_Accessor;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setAircraftType(const uci::type::CommMADL_AircraftTypeEnum& accessor) {
  if (&accessor != aircraftType_Accessor.get()) {
    aircraftType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setAircraftType(uci::type::CommMADL_AircraftTypeEnum::EnumerationItem value) {
  aircraftType_Accessor->setValue(value);
  return *this;
}


uci::type::DayOfYearTypeValue CommMADL_CommWaveformActivityType::getMADL_DayOfYearApplied() const {
  return mADL_DayOfYearApplied_Accessor;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setMADL_DayOfYearApplied(uci::type::DayOfYearTypeValue value) {
  mADL_DayOfYearApplied_Accessor = value;
  return *this;
}


xs::Boolean CommMADL_CommWaveformActivityType::getVoiceCapable() const {
  return voiceCapable_Accessor;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setVoiceCapable(xs::Boolean value) {
  voiceCapable_Accessor = value;
  return *this;
}


const uci::type::CommMADL_LinkStatusListType& CommMADL_CommWaveformActivityType::getLinkStatus() const {
  return *linkStatus_Accessor;
}

uci::type::CommMADL_LinkStatusListType& CommMADL_CommWaveformActivityType::getLinkStatus() {
  return *linkStatus_Accessor;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setLinkStatus(const uci::type::CommMADL_LinkStatusListType& accessor) {
  if (&accessor != linkStatus_Accessor.get()) {
    linkStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommMADL_NetChangeStatusEnum& CommMADL_CommWaveformActivityType::getNetChangeStatus_() const {
  if (netChangeStatus_Accessor) {
    return *netChangeStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getNetChangeStatus(): An attempt was made to get an optional field that was not enabled, call hasNetChangeStatus() to determine if it is safe to call getNetChangeStatus()");
}

const uci::type::CommMADL_NetChangeStatusEnum& CommMADL_CommWaveformActivityType::getNetChangeStatus() const {
  return getNetChangeStatus_();
}

uci::type::CommMADL_NetChangeStatusEnum& CommMADL_CommWaveformActivityType::getNetChangeStatus() {
  return getNetChangeStatus_();
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setNetChangeStatus(const uci::type::CommMADL_NetChangeStatusEnum& accessor) {
  enableNetChangeStatus();
  if (&accessor != netChangeStatus_Accessor.get()) {
    netChangeStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::setNetChangeStatus(const uci::type::CommMADL_NetChangeStatusEnum::EnumerationItem value) {
  enableNetChangeStatus().setValue(value);
  return *this;
}

bool CommMADL_CommWaveformActivityType::hasNetChangeStatus() const noexcept {
  return static_cast<bool>(netChangeStatus_Accessor);
}

uci::type::CommMADL_NetChangeStatusEnum& CommMADL_CommWaveformActivityType::enableNetChangeStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_NetChangeStatusEnum : type};
  if ((!netChangeStatus_Accessor) || (netChangeStatus_Accessor->getAccessorType() != requestedType)) {
    netChangeStatus_Accessor = CommMADL_NetChangeStatusEnum::create(requestedType);
    if (!netChangeStatus_Accessor) {
      throw uci::base::UCIException("Error in enableNetChangeStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *netChangeStatus_Accessor;
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::clearNetChangeStatus() noexcept {
  netChangeStatus_Accessor.reset();
  return *this;
}

std::unique_ptr<CommMADL_CommWaveformActivityType> CommMADL_CommWaveformActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_CommWaveformActivityType : type};
  return (requestedType == uci::type::accessorType::commMADL_CommWaveformActivityType) ? boost::make_unique<CommMADL_CommWaveformActivityType>() : nullptr;
}

/**  */
namespace CommMADL_CommWaveformActivityType_Names {

constexpr const char* Extern_Type_Name{"CommMADL_CommWaveformActivityType"};
constexpr const char* SettingsStatus_Name{"SettingsStatus"};
constexpr const char* MADL_UniqueIdentifier_Name{"MADL_UniqueIdentifier"};
constexpr const char* AircraftType_Name{"AircraftType"};
constexpr const char* MADL_DayOfYearApplied_Name{"MADL_DayOfYearApplied"};
constexpr const char* VoiceCapable_Name{"VoiceCapable"};
constexpr const char* LinkStatus_Name{"LinkStatus"};
constexpr const char* NetChangeStatus_Name{"NetChangeStatus"};

} // namespace CommMADL_CommWaveformActivityType_Names

void CommMADL_CommWaveformActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_CommWaveformActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommMADL_CommWaveformActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommMADL_CommWaveformActivityType_Names::SettingsStatus_Name) {
      CommMADL_ControlType::deserialize(valueType.second, accessor.getSettingsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_CommWaveformActivityType_Names::MADL_UniqueIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMADL_UniqueIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_CommWaveformActivityType_Names::AircraftType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAircraftType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_CommWaveformActivityType_Names::MADL_DayOfYearApplied_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMADL_DayOfYearApplied(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_CommWaveformActivityType_Names::VoiceCapable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceCapable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_CommWaveformActivityType_Names::LinkStatus_Name) {
      CommMADL_LinkStatusListType::deserialize(valueType.second, accessor.getLinkStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_CommWaveformActivityType_Names::NetChangeStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNetChangeStatus().setValueFromName(*value);
      }
    }
  }
  CommWaveformActivityPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommMADL_CommWaveformActivityType::serialize(const uci::type::CommMADL_CommWaveformActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommMADL_CommWaveformActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommMADL_CommWaveformActivityType_Names::Extern_Type_Name);
  }
  CommWaveformActivityPET::serialize(accessor, node, "", false, false, false);
  CommMADL_ControlType::serialize(accessor.getSettingsStatus(), node, CommMADL_CommWaveformActivityType_Names::SettingsStatus_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getMADL_UniqueIdentifier(), node, CommMADL_CommWaveformActivityType_Names::MADL_UniqueIdentifier_Name);
  CommMADL_AircraftTypeEnum::serialize(accessor.getAircraftType(), node, CommMADL_CommWaveformActivityType_Names::AircraftType_Name, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getMADL_DayOfYearApplied(), node, CommMADL_CommWaveformActivityType_Names::MADL_DayOfYearApplied_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceCapable(), node, CommMADL_CommWaveformActivityType_Names::VoiceCapable_Name);
  CommMADL_LinkStatusListType::serialize(accessor.getLinkStatus(), node, CommMADL_CommWaveformActivityType_Names::LinkStatus_Name);
  if (accessor.hasNetChangeStatus()) {
    CommMADL_NetChangeStatusEnum::serialize(accessor.getNetChangeStatus(), node, CommMADL_CommWaveformActivityType_Names::NetChangeStatus_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommMADL_CommWaveformActivityType>().release());
}

uci::type::CommMADL_CommWaveformActivityType& CommMADL_CommWaveformActivityType::create(const uci::type::CommMADL_CommWaveformActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommMADL_CommWaveformActivityType> newAccessor{boost::make_unique<asb_uci::type::CommMADL_CommWaveformActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommMADL_CommWaveformActivityType::destroy(uci::type::CommMADL_CommWaveformActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::CommMADL_CommWaveformActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

