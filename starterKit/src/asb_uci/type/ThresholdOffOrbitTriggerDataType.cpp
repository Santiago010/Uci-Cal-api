/** @file ThresholdOffOrbitTriggerDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ThresholdOffOrbitTriggerDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RTN_PositionDeltaType.h"
#include "asb_uci/type/RTN_VelocityDeltaType.h"
#include "asb_uci/type/TimeErrorType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RTN_PositionDeltaType.h"
#include "uci/type/RTN_VelocityDeltaType.h"
#include "uci/type/ThresholdOffOrbitTriggerDataType.h"
#include "uci/type/TimeErrorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThresholdOffOrbitTriggerDataType::ThresholdOffOrbitTriggerDataType() = default;

ThresholdOffOrbitTriggerDataType::~ThresholdOffOrbitTriggerDataType() = default;

void ThresholdOffOrbitTriggerDataType::copy(const uci::type::ThresholdOffOrbitTriggerDataType& accessor) {
  copyImpl(accessor, false);
}

void ThresholdOffOrbitTriggerDataType::copyImpl(const uci::type::ThresholdOffOrbitTriggerDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThresholdOffOrbitTriggerDataType&>(accessor);
    if (accessorImpl.positionErrorThreshold_Accessor) {
      setPositionErrorThreshold(*(accessorImpl.positionErrorThreshold_Accessor));
    } else {
      positionErrorThreshold_Accessor.reset();
    }
    if (accessorImpl.velocityErrorThreshold_Accessor) {
      setVelocityErrorThreshold(*(accessorImpl.velocityErrorThreshold_Accessor));
    } else {
      velocityErrorThreshold_Accessor.reset();
    }
    if (accessorImpl.timeThreshold_Accessor) {
      setTimeThreshold(*(accessorImpl.timeThreshold_Accessor));
    } else {
      timeThreshold_Accessor.reset();
    }
  }
}

void ThresholdOffOrbitTriggerDataType::reset() noexcept {
  positionErrorThreshold_Accessor.reset();
  velocityErrorThreshold_Accessor.reset();
  timeThreshold_Accessor.reset();
}

uci::type::RTN_PositionDeltaType& ThresholdOffOrbitTriggerDataType::getPositionErrorThreshold_() const {
  if (positionErrorThreshold_Accessor) {
    return *positionErrorThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionErrorThreshold(): An attempt was made to get an optional field that was not enabled, call hasPositionErrorThreshold() to determine if it is safe to call getPositionErrorThreshold()");
}

const uci::type::RTN_PositionDeltaType& ThresholdOffOrbitTriggerDataType::getPositionErrorThreshold() const {
  return getPositionErrorThreshold_();
}

uci::type::RTN_PositionDeltaType& ThresholdOffOrbitTriggerDataType::getPositionErrorThreshold() {
  return getPositionErrorThreshold_();
}

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::setPositionErrorThreshold(const uci::type::RTN_PositionDeltaType& accessor) {
  enablePositionErrorThreshold();
  if (&accessor != positionErrorThreshold_Accessor.get()) {
    positionErrorThreshold_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThresholdOffOrbitTriggerDataType::hasPositionErrorThreshold() const noexcept {
  return static_cast<bool>(positionErrorThreshold_Accessor);
}

uci::type::RTN_PositionDeltaType& ThresholdOffOrbitTriggerDataType::enablePositionErrorThreshold(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_PositionDeltaType : type};
  if ((!positionErrorThreshold_Accessor) || (positionErrorThreshold_Accessor->getAccessorType() != requestedType)) {
    positionErrorThreshold_Accessor = RTN_PositionDeltaType::create(requestedType);
    if (!positionErrorThreshold_Accessor) {
      throw uci::base::UCIException("Error in enablePositionErrorThreshold(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionErrorThreshold_Accessor;
}

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::clearPositionErrorThreshold() noexcept {
  positionErrorThreshold_Accessor.reset();
  return *this;
}

uci::type::RTN_VelocityDeltaType& ThresholdOffOrbitTriggerDataType::getVelocityErrorThreshold_() const {
  if (velocityErrorThreshold_Accessor) {
    return *velocityErrorThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityErrorThreshold(): An attempt was made to get an optional field that was not enabled, call hasVelocityErrorThreshold() to determine if it is safe to call getVelocityErrorThreshold()");
}

const uci::type::RTN_VelocityDeltaType& ThresholdOffOrbitTriggerDataType::getVelocityErrorThreshold() const {
  return getVelocityErrorThreshold_();
}

uci::type::RTN_VelocityDeltaType& ThresholdOffOrbitTriggerDataType::getVelocityErrorThreshold() {
  return getVelocityErrorThreshold_();
}

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::setVelocityErrorThreshold(const uci::type::RTN_VelocityDeltaType& accessor) {
  enableVelocityErrorThreshold();
  if (&accessor != velocityErrorThreshold_Accessor.get()) {
    velocityErrorThreshold_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThresholdOffOrbitTriggerDataType::hasVelocityErrorThreshold() const noexcept {
  return static_cast<bool>(velocityErrorThreshold_Accessor);
}

uci::type::RTN_VelocityDeltaType& ThresholdOffOrbitTriggerDataType::enableVelocityErrorThreshold(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_VelocityDeltaType : type};
  if ((!velocityErrorThreshold_Accessor) || (velocityErrorThreshold_Accessor->getAccessorType() != requestedType)) {
    velocityErrorThreshold_Accessor = RTN_VelocityDeltaType::create(requestedType);
    if (!velocityErrorThreshold_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityErrorThreshold(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityErrorThreshold_Accessor;
}

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::clearVelocityErrorThreshold() noexcept {
  velocityErrorThreshold_Accessor.reset();
  return *this;
}

uci::type::TimeErrorType& ThresholdOffOrbitTriggerDataType::getTimeThreshold_() const {
  if (timeThreshold_Accessor) {
    return *timeThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeThreshold(): An attempt was made to get an optional field that was not enabled, call hasTimeThreshold() to determine if it is safe to call getTimeThreshold()");
}

const uci::type::TimeErrorType& ThresholdOffOrbitTriggerDataType::getTimeThreshold() const {
  return getTimeThreshold_();
}

uci::type::TimeErrorType& ThresholdOffOrbitTriggerDataType::getTimeThreshold() {
  return getTimeThreshold_();
}

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::setTimeThreshold(const uci::type::TimeErrorType& accessor) {
  enableTimeThreshold();
  if (&accessor != timeThreshold_Accessor.get()) {
    timeThreshold_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThresholdOffOrbitTriggerDataType::hasTimeThreshold() const noexcept {
  return static_cast<bool>(timeThreshold_Accessor);
}

uci::type::TimeErrorType& ThresholdOffOrbitTriggerDataType::enableTimeThreshold(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeErrorType : type};
  if ((!timeThreshold_Accessor) || (timeThreshold_Accessor->getAccessorType() != requestedType)) {
    timeThreshold_Accessor = TimeErrorType::create(requestedType);
    if (!timeThreshold_Accessor) {
      throw uci::base::UCIException("Error in enableTimeThreshold(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeThreshold_Accessor;
}

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::clearTimeThreshold() noexcept {
  timeThreshold_Accessor.reset();
  return *this;
}

std::unique_ptr<ThresholdOffOrbitTriggerDataType> ThresholdOffOrbitTriggerDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::thresholdOffOrbitTriggerDataType : type};
  return (requestedType == uci::type::accessorType::thresholdOffOrbitTriggerDataType) ? boost::make_unique<ThresholdOffOrbitTriggerDataType>() : nullptr;
}

/**  */
namespace ThresholdOffOrbitTriggerDataType_Names {

constexpr const char* Extern_Type_Name{"ThresholdOffOrbitTriggerDataType"};
constexpr const char* PositionErrorThreshold_Name{"PositionErrorThreshold"};
constexpr const char* VelocityErrorThreshold_Name{"VelocityErrorThreshold"};
constexpr const char* TimeThreshold_Name{"TimeThreshold"};

} // namespace ThresholdOffOrbitTriggerDataType_Names

void ThresholdOffOrbitTriggerDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThresholdOffOrbitTriggerDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThresholdOffOrbitTriggerDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThresholdOffOrbitTriggerDataType_Names::PositionErrorThreshold_Name) {
      RTN_PositionDeltaType::deserialize(valueType.second, accessor.enablePositionErrorThreshold(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThresholdOffOrbitTriggerDataType_Names::VelocityErrorThreshold_Name) {
      RTN_VelocityDeltaType::deserialize(valueType.second, accessor.enableVelocityErrorThreshold(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThresholdOffOrbitTriggerDataType_Names::TimeThreshold_Name) {
      TimeErrorType::deserialize(valueType.second, accessor.enableTimeThreshold(), nodeName, nsPrefix);
    }
  }
}

std::string ThresholdOffOrbitTriggerDataType::serialize(const uci::type::ThresholdOffOrbitTriggerDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThresholdOffOrbitTriggerDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThresholdOffOrbitTriggerDataType_Names::Extern_Type_Name);
  }
  if (accessor.hasPositionErrorThreshold()) {
    RTN_PositionDeltaType::serialize(accessor.getPositionErrorThreshold(), node, ThresholdOffOrbitTriggerDataType_Names::PositionErrorThreshold_Name);
  }
  if (accessor.hasVelocityErrorThreshold()) {
    RTN_VelocityDeltaType::serialize(accessor.getVelocityErrorThreshold(), node, ThresholdOffOrbitTriggerDataType_Names::VelocityErrorThreshold_Name);
  }
  if (accessor.hasTimeThreshold()) {
    TimeErrorType::serialize(accessor.getTimeThreshold(), node, ThresholdOffOrbitTriggerDataType_Names::TimeThreshold_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThresholdOffOrbitTriggerDataType>().release());
}

uci::type::ThresholdOffOrbitTriggerDataType& ThresholdOffOrbitTriggerDataType::create(const uci::type::ThresholdOffOrbitTriggerDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThresholdOffOrbitTriggerDataType> newAccessor{boost::make_unique<asb_uci::type::ThresholdOffOrbitTriggerDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThresholdOffOrbitTriggerDataType::destroy(uci::type::ThresholdOffOrbitTriggerDataType& accessor) {
  delete dynamic_cast<asb_uci::type::ThresholdOffOrbitTriggerDataType*>(&accessor);
}

} // namespace type

} // namespace uci

