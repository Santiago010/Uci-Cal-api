/** @file AirfieldContaminationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AirfieldContaminationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AirfieldContaminationType.h"
#include "uci/type/EmptyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AirfieldContaminationType::AirfieldContaminationType() = default;

AirfieldContaminationType::~AirfieldContaminationType() = default;

void AirfieldContaminationType::copy(const uci::type::AirfieldContaminationType& accessor) {
  copyImpl(accessor, false);
}

void AirfieldContaminationType::copyImpl(const uci::type::AirfieldContaminationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AirfieldContaminationType&>(accessor);
    if (accessorImpl.nuclear_Accessor) {
      setNuclear(*(accessorImpl.nuclear_Accessor));
    } else {
      nuclear_Accessor.reset();
    }
    if (accessorImpl.biological_Accessor) {
      setBiological(*(accessorImpl.biological_Accessor));
    } else {
      biological_Accessor.reset();
    }
    if (accessorImpl.chemical_Accessor) {
      setChemical(*(accessorImpl.chemical_Accessor));
    } else {
      chemical_Accessor.reset();
    }
  }
}

void AirfieldContaminationType::reset() noexcept {
  nuclear_Accessor.reset();
  biological_Accessor.reset();
  chemical_Accessor.reset();
}

uci::type::EmptyType& AirfieldContaminationType::getNuclear_() const {
  if (nuclear_Accessor) {
    return *nuclear_Accessor;
  }
  throw uci::base::UCIException("Error in getNuclear(): An attempt was made to get an optional field that was not enabled, call hasNuclear() to determine if it is safe to call getNuclear()");
}

const uci::type::EmptyType& AirfieldContaminationType::getNuclear() const {
  return getNuclear_();
}

uci::type::EmptyType& AirfieldContaminationType::getNuclear() {
  return getNuclear_();
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setNuclear(const uci::type::EmptyType& value) {
  return setNuclear(value.c_str());
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setNuclear(const std::string& value) {
  return setNuclear(value.c_str());
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setNuclear(const char* value) {
  enableNuclear().setStringValue(value);
  return *this;
}

bool AirfieldContaminationType::hasNuclear() const noexcept {
  return static_cast<bool>(nuclear_Accessor);
}

uci::type::EmptyType& AirfieldContaminationType::enableNuclear(uci::base::accessorType::AccessorType type) {
  if (!nuclear_Accessor) {
    nuclear_Accessor = EmptyType::create(type);
  }
  return *nuclear_Accessor;
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::clearNuclear() noexcept {
  nuclear_Accessor.reset();
  return *this;
}

uci::type::EmptyType& AirfieldContaminationType::getBiological_() const {
  if (biological_Accessor) {
    return *biological_Accessor;
  }
  throw uci::base::UCIException("Error in getBiological(): An attempt was made to get an optional field that was not enabled, call hasBiological() to determine if it is safe to call getBiological()");
}

const uci::type::EmptyType& AirfieldContaminationType::getBiological() const {
  return getBiological_();
}

uci::type::EmptyType& AirfieldContaminationType::getBiological() {
  return getBiological_();
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setBiological(const uci::type::EmptyType& value) {
  return setBiological(value.c_str());
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setBiological(const std::string& value) {
  return setBiological(value.c_str());
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setBiological(const char* value) {
  enableBiological().setStringValue(value);
  return *this;
}

bool AirfieldContaminationType::hasBiological() const noexcept {
  return static_cast<bool>(biological_Accessor);
}

uci::type::EmptyType& AirfieldContaminationType::enableBiological(uci::base::accessorType::AccessorType type) {
  if (!biological_Accessor) {
    biological_Accessor = EmptyType::create(type);
  }
  return *biological_Accessor;
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::clearBiological() noexcept {
  biological_Accessor.reset();
  return *this;
}

uci::type::EmptyType& AirfieldContaminationType::getChemical_() const {
  if (chemical_Accessor) {
    return *chemical_Accessor;
  }
  throw uci::base::UCIException("Error in getChemical(): An attempt was made to get an optional field that was not enabled, call hasChemical() to determine if it is safe to call getChemical()");
}

const uci::type::EmptyType& AirfieldContaminationType::getChemical() const {
  return getChemical_();
}

uci::type::EmptyType& AirfieldContaminationType::getChemical() {
  return getChemical_();
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setChemical(const uci::type::EmptyType& value) {
  return setChemical(value.c_str());
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setChemical(const std::string& value) {
  return setChemical(value.c_str());
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::setChemical(const char* value) {
  enableChemical().setStringValue(value);
  return *this;
}

bool AirfieldContaminationType::hasChemical() const noexcept {
  return static_cast<bool>(chemical_Accessor);
}

uci::type::EmptyType& AirfieldContaminationType::enableChemical(uci::base::accessorType::AccessorType type) {
  if (!chemical_Accessor) {
    chemical_Accessor = EmptyType::create(type);
  }
  return *chemical_Accessor;
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::clearChemical() noexcept {
  chemical_Accessor.reset();
  return *this;
}

std::unique_ptr<AirfieldContaminationType> AirfieldContaminationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airfieldContaminationType : type};
  return (requestedType == uci::type::accessorType::airfieldContaminationType) ? boost::make_unique<AirfieldContaminationType>() : nullptr;
}

/**  */
namespace AirfieldContaminationType_Names {

constexpr const char* Extern_Type_Name{"AirfieldContaminationType"};
constexpr const char* Nuclear_Name{"Nuclear"};
constexpr const char* Biological_Name{"Biological"};
constexpr const char* Chemical_Name{"Chemical"};

} // namespace AirfieldContaminationType_Names

void AirfieldContaminationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AirfieldContaminationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AirfieldContaminationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AirfieldContaminationType_Names::Nuclear_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNuclear(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldContaminationType_Names::Biological_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBiological(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldContaminationType_Names::Chemical_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setChemical(*value);
      }
    }
  }
}

std::string AirfieldContaminationType::serialize(const uci::type::AirfieldContaminationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AirfieldContaminationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AirfieldContaminationType_Names::Extern_Type_Name);
  }
  if (accessor.hasNuclear()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getNuclear(), node, AirfieldContaminationType_Names::Nuclear_Name);
  }
  if (accessor.hasBiological()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getBiological(), node, AirfieldContaminationType_Names::Biological_Name);
  }
  if (accessor.hasChemical()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getChemical(), node, AirfieldContaminationType_Names::Chemical_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AirfieldContaminationType& AirfieldContaminationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AirfieldContaminationType>().release());
}

uci::type::AirfieldContaminationType& AirfieldContaminationType::create(const uci::type::AirfieldContaminationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AirfieldContaminationType> newAccessor{boost::make_unique<asb_uci::type::AirfieldContaminationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AirfieldContaminationType::destroy(uci::type::AirfieldContaminationType& accessor) {
  delete dynamic_cast<asb_uci::type::AirfieldContaminationType*>(&accessor);
}

} // namespace type

} // namespace uci

