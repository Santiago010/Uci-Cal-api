/** @file AreaChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AreaChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/LocatedEllipseType.h"
#include "asb_uci/type/LocatedRectangleType.h"
#include "asb_uci/type/PolygonType.h"
#include "asb_uci/type/SlantRangeAreaType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AreaChoiceType.h"
#include "uci/type/LocatedEllipseType.h"
#include "uci/type/LocatedRectangleType.h"
#include "uci/type/PolygonType.h"
#include "uci/type/SlantRangeAreaType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AreaChoiceType::AreaChoiceType() = default;

AreaChoiceType::~AreaChoiceType() = default;

void AreaChoiceType::copy(const uci::type::AreaChoiceType& accessor) {
  copyImpl(accessor, false);
}

void AreaChoiceType::copyImpl(const uci::type::AreaChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AreaChoiceType&>(accessor);
    if (accessorImpl.polygon_Accessor) {
      setPolygon(*(accessorImpl.polygon_Accessor));
    } else {
      polygon_Accessor.reset();
    }
    if (accessorImpl.ellipse_Accessor) {
      setEllipse(*(accessorImpl.ellipse_Accessor));
    } else {
      ellipse_Accessor.reset();
    }
    if (accessorImpl.rectangle_Accessor) {
      setRectangle(*(accessorImpl.rectangle_Accessor));
    } else {
      rectangle_Accessor.reset();
    }
    if (accessorImpl.slantRangeArea_Accessor) {
      setSlantRangeArea(*(accessorImpl.slantRangeArea_Accessor));
    } else {
      slantRangeArea_Accessor.reset();
    }
  }
}

void AreaChoiceType::reset() noexcept {
  polygon_Accessor.reset();
  ellipse_Accessor.reset();
  rectangle_Accessor.reset();
  slantRangeArea_Accessor.reset();
}

uci::type::AreaChoiceType::AreaChoiceTypeChoice AreaChoiceType::getAreaChoiceTypeChoiceOrdinal() const noexcept {
  if (polygon_Accessor) {
    return AREACHOICETYPE_CHOICE_POLYGON;
  }
  if (ellipse_Accessor) {
    return AREACHOICETYPE_CHOICE_ELLIPSE;
  }
  if (rectangle_Accessor) {
    return AREACHOICETYPE_CHOICE_RECTANGLE;
  }
  if (slantRangeArea_Accessor) {
    return AREACHOICETYPE_CHOICE_SLANTRANGEAREA;
  }
  return AREACHOICETYPE_CHOICE_NONE;
}

uci::type::AreaChoiceType& AreaChoiceType::setAreaChoiceTypeChoiceOrdinal(uci::type::AreaChoiceType::AreaChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case AREACHOICETYPE_CHOICE_POLYGON:
      choosePolygon("setAreaChoiceTypeChoiceOrdinal", type);
      break;
    case AREACHOICETYPE_CHOICE_ELLIPSE:
      chooseEllipse("setAreaChoiceTypeChoiceOrdinal", type);
      break;
    case AREACHOICETYPE_CHOICE_RECTANGLE:
      chooseRectangle("setAreaChoiceTypeChoiceOrdinal", type);
      break;
    case AREACHOICETYPE_CHOICE_SLANTRANGEAREA:
      chooseSlantRangeArea("setAreaChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setAreaChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PolygonType& AreaChoiceType::getPolygon_() const {
  if (polygon_Accessor) {
    return *polygon_Accessor;
  }
  throw uci::base::UCIException("Error in getPolygon(): Unable to get Polygon, field not selected");
}

const uci::type::PolygonType& AreaChoiceType::getPolygon() const {
  return getPolygon_();
}

uci::type::PolygonType& AreaChoiceType::getPolygon() {
  return getPolygon_();
}

uci::type::AreaChoiceType& AreaChoiceType::setPolygon(const uci::type::PolygonType& accessor) {
  choosePolygon();
  if (&accessor != polygon_Accessor.get()) {
    polygon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AreaChoiceType::isPolygon() const noexcept {
  return static_cast<bool>(polygon_Accessor);
}

uci::type::PolygonType& AreaChoiceType::choosePolygon(const std::string& method, uci::base::accessorType::AccessorType type) {
  ellipse_Accessor.reset();
  rectangle_Accessor.reset();
  slantRangeArea_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polygonType : type};
  if ((!polygon_Accessor) || (polygon_Accessor->getAccessorType() != requestedType)) {
    polygon_Accessor = PolygonType::create(type);
    if (!polygon_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *polygon_Accessor;
}

uci::type::PolygonType& AreaChoiceType::choosePolygon(uci::base::accessorType::AccessorType type) {
  return choosePolygon("choosePolygon", type);
}

uci::type::LocatedEllipseType& AreaChoiceType::getEllipse_() const {
  if (ellipse_Accessor) {
    return *ellipse_Accessor;
  }
  throw uci::base::UCIException("Error in getEllipse(): Unable to get Ellipse, field not selected");
}

const uci::type::LocatedEllipseType& AreaChoiceType::getEllipse() const {
  return getEllipse_();
}

uci::type::LocatedEllipseType& AreaChoiceType::getEllipse() {
  return getEllipse_();
}

uci::type::AreaChoiceType& AreaChoiceType::setEllipse(const uci::type::LocatedEllipseType& accessor) {
  chooseEllipse();
  if (&accessor != ellipse_Accessor.get()) {
    ellipse_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AreaChoiceType::isEllipse() const noexcept {
  return static_cast<bool>(ellipse_Accessor);
}

uci::type::LocatedEllipseType& AreaChoiceType::chooseEllipse(const std::string& method, uci::base::accessorType::AccessorType type) {
  polygon_Accessor.reset();
  rectangle_Accessor.reset();
  slantRangeArea_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locatedEllipseType : type};
  if ((!ellipse_Accessor) || (ellipse_Accessor->getAccessorType() != requestedType)) {
    ellipse_Accessor = LocatedEllipseType::create(type);
    if (!ellipse_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ellipse_Accessor;
}

uci::type::LocatedEllipseType& AreaChoiceType::chooseEllipse(uci::base::accessorType::AccessorType type) {
  return chooseEllipse("chooseEllipse", type);
}

uci::type::LocatedRectangleType& AreaChoiceType::getRectangle_() const {
  if (rectangle_Accessor) {
    return *rectangle_Accessor;
  }
  throw uci::base::UCIException("Error in getRectangle(): Unable to get Rectangle, field not selected");
}

const uci::type::LocatedRectangleType& AreaChoiceType::getRectangle() const {
  return getRectangle_();
}

uci::type::LocatedRectangleType& AreaChoiceType::getRectangle() {
  return getRectangle_();
}

uci::type::AreaChoiceType& AreaChoiceType::setRectangle(const uci::type::LocatedRectangleType& accessor) {
  chooseRectangle();
  if (&accessor != rectangle_Accessor.get()) {
    rectangle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AreaChoiceType::isRectangle() const noexcept {
  return static_cast<bool>(rectangle_Accessor);
}

uci::type::LocatedRectangleType& AreaChoiceType::chooseRectangle(const std::string& method, uci::base::accessorType::AccessorType type) {
  polygon_Accessor.reset();
  ellipse_Accessor.reset();
  slantRangeArea_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locatedRectangleType : type};
  if ((!rectangle_Accessor) || (rectangle_Accessor->getAccessorType() != requestedType)) {
    rectangle_Accessor = LocatedRectangleType::create(type);
    if (!rectangle_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rectangle_Accessor;
}

uci::type::LocatedRectangleType& AreaChoiceType::chooseRectangle(uci::base::accessorType::AccessorType type) {
  return chooseRectangle("chooseRectangle", type);
}

uci::type::SlantRangeAreaType& AreaChoiceType::getSlantRangeArea_() const {
  if (slantRangeArea_Accessor) {
    return *slantRangeArea_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeArea(): Unable to get SlantRangeArea, field not selected");
}

const uci::type::SlantRangeAreaType& AreaChoiceType::getSlantRangeArea() const {
  return getSlantRangeArea_();
}

uci::type::SlantRangeAreaType& AreaChoiceType::getSlantRangeArea() {
  return getSlantRangeArea_();
}

uci::type::AreaChoiceType& AreaChoiceType::setSlantRangeArea(const uci::type::SlantRangeAreaType& accessor) {
  chooseSlantRangeArea();
  if (&accessor != slantRangeArea_Accessor.get()) {
    slantRangeArea_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AreaChoiceType::isSlantRangeArea() const noexcept {
  return static_cast<bool>(slantRangeArea_Accessor);
}

uci::type::SlantRangeAreaType& AreaChoiceType::chooseSlantRangeArea(const std::string& method, uci::base::accessorType::AccessorType type) {
  polygon_Accessor.reset();
  ellipse_Accessor.reset();
  rectangle_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeAreaType : type};
  if ((!slantRangeArea_Accessor) || (slantRangeArea_Accessor->getAccessorType() != requestedType)) {
    slantRangeArea_Accessor = SlantRangeAreaType::create(type);
    if (!slantRangeArea_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slantRangeArea_Accessor;
}

uci::type::SlantRangeAreaType& AreaChoiceType::chooseSlantRangeArea(uci::base::accessorType::AccessorType type) {
  return chooseSlantRangeArea("chooseSlantRangeArea", type);
}

std::unique_ptr<AreaChoiceType> AreaChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::areaChoiceType : type};
  return (requestedType == uci::type::accessorType::areaChoiceType) ? boost::make_unique<AreaChoiceType>() : nullptr;
}

/**  */
namespace AreaChoiceType_Names {

constexpr const char* Extern_Type_Name{"AreaChoiceType"};
constexpr const char* Polygon_Name{"Polygon"};
constexpr const char* Ellipse_Name{"Ellipse"};
constexpr const char* Rectangle_Name{"Rectangle"};
constexpr const char* SlantRangeArea_Name{"SlantRangeArea"};

} // namespace AreaChoiceType_Names

void AreaChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AreaChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AreaChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AreaChoiceType_Names::Polygon_Name) {
      PolygonType::deserialize(valueType.second, accessor.choosePolygon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AreaChoiceType_Names::Ellipse_Name) {
      LocatedEllipseType::deserialize(valueType.second, accessor.chooseEllipse(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AreaChoiceType_Names::Rectangle_Name) {
      LocatedRectangleType::deserialize(valueType.second, accessor.chooseRectangle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AreaChoiceType_Names::SlantRangeArea_Name) {
      SlantRangeAreaType::deserialize(valueType.second, accessor.chooseSlantRangeArea(), nodeName, nsPrefix);
    }
  }
}

std::string AreaChoiceType::serialize(const uci::type::AreaChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AreaChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AreaChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isPolygon()) {
    PolygonType::serialize(accessor.getPolygon(), node, AreaChoiceType_Names::Polygon_Name);
  } else if (accessor.isEllipse()) {
    LocatedEllipseType::serialize(accessor.getEllipse(), node, AreaChoiceType_Names::Ellipse_Name);
  } else if (accessor.isRectangle()) {
    LocatedRectangleType::serialize(accessor.getRectangle(), node, AreaChoiceType_Names::Rectangle_Name);
  } else if (accessor.isSlantRangeArea()) {
    SlantRangeAreaType::serialize(accessor.getSlantRangeArea(), node, AreaChoiceType_Names::SlantRangeArea_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AreaChoiceType& AreaChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AreaChoiceType>().release());
}

uci::type::AreaChoiceType& AreaChoiceType::create(const uci::type::AreaChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AreaChoiceType> newAccessor{boost::make_unique<asb_uci::type::AreaChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AreaChoiceType::destroy(uci::type::AreaChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::AreaChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

