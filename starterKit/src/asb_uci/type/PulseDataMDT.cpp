/** @file PulseDataMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PulseDataMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PulseDataID_Type.h"
#include "../../../include/asb_uci/type/PulseDataSourceType.h"
#include "../../../include/asb_uci/type/PulseType.h"
#include "../../../include/asb_uci/type/SignalNavDataType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseDataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseDataMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseDataSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SignalNavDataType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PulseDataMDT::PulseDataMDT()
  : pulseDataID_Accessor{boost::make_unique<PulseDataID_Type>()},
    navData_Accessor{boost::make_unique<NavData>(1, SIZE_MAX)},
    pulse_Accessor{boost::make_unique<Pulse>(1, SIZE_MAX)} {
}

PulseDataMDT::~PulseDataMDT() = default;

void PulseDataMDT::copy(const uci::type::PulseDataMDT& accessor) {
  copyImpl(accessor, false);
}

void PulseDataMDT::copyImpl(const uci::type::PulseDataMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PulseDataMDT&>(accessor);
    setPulseDataID(*(accessorImpl.pulseDataID_Accessor));
    if (accessorImpl.source_Accessor) {
      setSource(*(accessorImpl.source_Accessor));
    } else {
      source_Accessor.reset();
    }
    setNavData(*(accessorImpl.navData_Accessor));
    if (accessorImpl.hasPhaseAndAmplitudeCalibrated()) {
      setPhaseAndAmplitudeCalibrated(accessorImpl.getPhaseAndAmplitudeCalibrated());
    } else {
      clearPhaseAndAmplitudeCalibrated();
    }
    setPulse(*(accessorImpl.pulse_Accessor));
  }
}

void PulseDataMDT::reset() noexcept {
  pulseDataID_Accessor->reset();
  source_Accessor.reset();
  navData_Accessor->reset();
  clearPhaseAndAmplitudeCalibrated();
  pulse_Accessor->reset();
}

const uci::type::PulseDataID_Type& PulseDataMDT::getPulseDataID() const {
  return *pulseDataID_Accessor;
}

uci::type::PulseDataID_Type& PulseDataMDT::getPulseDataID() {
  return *pulseDataID_Accessor;
}

uci::type::PulseDataMDT& PulseDataMDT::setPulseDataID(const uci::type::PulseDataID_Type& accessor) {
  if (&accessor != pulseDataID_Accessor.get()) {
    pulseDataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PulseDataSourceType& PulseDataMDT::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): An attempt was made to get an optional field that was not enabled, call hasSource() to determine if it is safe to call getSource()");
}

const uci::type::PulseDataSourceType& PulseDataMDT::getSource() const {
  return getSource_();
}

uci::type::PulseDataSourceType& PulseDataMDT::getSource() {
  return getSource_();
}

uci::type::PulseDataMDT& PulseDataMDT::setSource(const uci::type::PulseDataSourceType& accessor) {
  enableSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PulseDataMDT::hasSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::PulseDataSourceType& PulseDataMDT::enableSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pulseDataSourceType : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = PulseDataSourceType::create(requestedType);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in enableSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::PulseDataMDT& PulseDataMDT::clearSource() noexcept {
  source_Accessor.reset();
  return *this;
}

const uci::type::PulseDataMDT::NavData& PulseDataMDT::getNavData() const {
  return *navData_Accessor;
}

uci::type::PulseDataMDT::NavData& PulseDataMDT::getNavData() {
  return *navData_Accessor;
}

uci::type::PulseDataMDT& PulseDataMDT::setNavData(const uci::type::PulseDataMDT::NavData& accessor) {
  if (&accessor != navData_Accessor.get()) {
    navData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean PulseDataMDT::getPhaseAndAmplitudeCalibrated() const {
  if (phaseAndAmplitudeCalibrated_Accessor) {
    return *phaseAndAmplitudeCalibrated_Accessor;
  }
  throw uci::base::UCIException("Error in getPhaseAndAmplitudeCalibrated(): An attempt was made to get an optional field that was not enabled, call hasPhaseAndAmplitudeCalibrated() to determine if it is safe to call getPhaseAndAmplitudeCalibrated()");
}

uci::type::PulseDataMDT& PulseDataMDT::setPhaseAndAmplitudeCalibrated(xs::Boolean value) {
  phaseAndAmplitudeCalibrated_Accessor = value;
  return *this;
}

bool PulseDataMDT::hasPhaseAndAmplitudeCalibrated() const noexcept {
  return phaseAndAmplitudeCalibrated_Accessor.has_value();
}

uci::type::PulseDataMDT& PulseDataMDT::clearPhaseAndAmplitudeCalibrated() noexcept {
  phaseAndAmplitudeCalibrated_Accessor.reset();
  return *this;
}

const uci::type::PulseDataMDT::Pulse& PulseDataMDT::getPulse() const {
  return *pulse_Accessor;
}

uci::type::PulseDataMDT::Pulse& PulseDataMDT::getPulse() {
  return *pulse_Accessor;
}

uci::type::PulseDataMDT& PulseDataMDT::setPulse(const uci::type::PulseDataMDT::Pulse& accessor) {
  if (&accessor != pulse_Accessor.get()) {
    pulse_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PulseDataMDT> PulseDataMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pulseDataMDT : type};
  return (requestedType == uci::type::accessorType::pulseDataMDT) ? boost::make_unique<PulseDataMDT>() : nullptr;
}

/**  */
namespace PulseDataMDT_Names {

constexpr const char* Extern_Type_Name{"PulseDataMDT"};
constexpr const char* PulseDataID_Name{"PulseDataID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* NavData_Name{"NavData"};
constexpr const char* PhaseAndAmplitudeCalibrated_Name{"PhaseAndAmplitudeCalibrated"};
constexpr const char* Pulse_Name{"Pulse"};

} // namespace PulseDataMDT_Names

void PulseDataMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PulseDataMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PulseDataMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PulseDataMDT_Names::PulseDataID_Name) {
      PulseDataID_Type::deserialize(valueType.second, accessor.getPulseDataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseDataMDT_Names::Source_Name) {
      PulseDataSourceType::deserialize(valueType.second, accessor.enableSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseDataMDT_Names::NavData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PulseDataMDT::NavData& boundedList = accessor.getNavData();
        const uci::type::PulseDataMDT::NavData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SignalNavDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PulseDataMDT_Names::PhaseAndAmplitudeCalibrated_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPhaseAndAmplitudeCalibrated(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataMDT_Names::Pulse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PulseDataMDT::Pulse& boundedList = accessor.getPulse();
        const uci::type::PulseDataMDT::Pulse::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PulseType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PulseDataMDT::serialize(const uci::type::PulseDataMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PulseDataMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PulseDataMDT_Names::Extern_Type_Name);
  }
  PulseDataID_Type::serialize(accessor.getPulseDataID(), node, PulseDataMDT_Names::PulseDataID_Name);
  if (accessor.hasSource()) {
    PulseDataSourceType::serialize(accessor.getSource(), node, PulseDataMDT_Names::Source_Name);
  }
  {
    const uci::type::PulseDataMDT::NavData& boundedList = accessor.getNavData();
    for (uci::type::PulseDataMDT::NavData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SignalNavDataType::serialize(boundedList.at(i), node, PulseDataMDT_Names::NavData_Name);
    }
  }
  if (accessor.hasPhaseAndAmplitudeCalibrated()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPhaseAndAmplitudeCalibrated(), node, PulseDataMDT_Names::PhaseAndAmplitudeCalibrated_Name);
  }
  {
    const uci::type::PulseDataMDT::Pulse& boundedList = accessor.getPulse();
    for (uci::type::PulseDataMDT::Pulse::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PulseType::serialize(boundedList.at(i), node, PulseDataMDT_Names::Pulse_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PulseDataMDT& PulseDataMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PulseDataMDT>().release());
}

uci::type::PulseDataMDT& PulseDataMDT::create(const uci::type::PulseDataMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PulseDataMDT> newAccessor{boost::make_unique<asb_uci::type::PulseDataMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PulseDataMDT::destroy(uci::type::PulseDataMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PulseDataMDT*>(&accessor);
}

} // namespace type

} // namespace uci

