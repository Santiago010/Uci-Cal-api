/** @file ActivitySourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ActivitySourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityPlanReferenceType.h"
#include "../../../include/asb_uci/type/AssociatedMessageSourceType.h"
#include "../../../include/asb_uci/type/MDF_ReferenceType.h"
#include "../../../include/asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityPlanReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivitySourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssociatedMessageSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MDF_ReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementInstanceID_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivitySourceType::ActivitySourceType() = default;

ActivitySourceType::~ActivitySourceType() = default;

void ActivitySourceType::copy(const uci::type::ActivitySourceType& accessor) {
  copyImpl(accessor, false);
}

void ActivitySourceType::copyImpl(const uci::type::ActivitySourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActivitySourceType&>(accessor);
    if (accessorImpl.requirement_Accessor) {
      setRequirement(*(accessorImpl.requirement_Accessor));
    } else {
      requirement_Accessor.reset();
    }
    if (accessorImpl.mDF_Accessor) {
      setMDF(*(accessorImpl.mDF_Accessor));
    } else {
      mDF_Accessor.reset();
    }
    if (accessorImpl.activityPlan_Accessor) {
      setActivityPlan(*(accessorImpl.activityPlan_Accessor));
    } else {
      activityPlan_Accessor.reset();
    }
    if (accessorImpl.associatedMessage_Accessor) {
      setAssociatedMessage(*(accessorImpl.associatedMessage_Accessor));
    } else {
      associatedMessage_Accessor.reset();
    }
  }
}

void ActivitySourceType::reset() noexcept {
  requirement_Accessor.reset();
  mDF_Accessor.reset();
  activityPlan_Accessor.reset();
  associatedMessage_Accessor.reset();
}

uci::type::ActivitySourceType::ActivitySourceTypeChoice ActivitySourceType::getActivitySourceTypeChoiceOrdinal() const noexcept {
  if (requirement_Accessor) {
    return ACTIVITYSOURCETYPE_CHOICE_REQUIREMENT;
  }
  if (mDF_Accessor) {
    return ACTIVITYSOURCETYPE_CHOICE_MDF;
  }
  if (activityPlan_Accessor) {
    return ACTIVITYSOURCETYPE_CHOICE_ACTIVITYPLAN;
  }
  if (associatedMessage_Accessor) {
    return ACTIVITYSOURCETYPE_CHOICE_ASSOCIATEDMESSAGE;
  }
  return ACTIVITYSOURCETYPE_CHOICE_NONE;
}

uci::type::ActivitySourceType& ActivitySourceType::setActivitySourceTypeChoiceOrdinal(uci::type::ActivitySourceType::ActivitySourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ACTIVITYSOURCETYPE_CHOICE_REQUIREMENT:
      chooseRequirement("setActivitySourceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYSOURCETYPE_CHOICE_MDF:
      chooseMDF("setActivitySourceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYSOURCETYPE_CHOICE_ACTIVITYPLAN:
      chooseActivityPlan("setActivitySourceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYSOURCETYPE_CHOICE_ASSOCIATEDMESSAGE:
      chooseAssociatedMessage("setActivitySourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setActivitySourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RequirementInstanceID_ChoiceType& ActivitySourceType::getRequirement_() const {
  if (requirement_Accessor) {
    return *requirement_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirement(): Unable to get Requirement, field not selected");
}

const uci::type::RequirementInstanceID_ChoiceType& ActivitySourceType::getRequirement() const {
  return getRequirement_();
}

uci::type::RequirementInstanceID_ChoiceType& ActivitySourceType::getRequirement() {
  return getRequirement_();
}

uci::type::ActivitySourceType& ActivitySourceType::setRequirement(const uci::type::RequirementInstanceID_ChoiceType& accessor) {
  chooseRequirement(accessor.getAccessorType());
  if (&accessor != requirement_Accessor.get()) {
    requirement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivitySourceType::isRequirement() const noexcept {
  return static_cast<bool>(requirement_Accessor);
}

uci::type::RequirementInstanceID_ChoiceType& ActivitySourceType::chooseRequirement(const std::string& method, uci::base::accessorType::AccessorType type) {
  mDF_Accessor.reset();
  activityPlan_Accessor.reset();
  associatedMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementInstanceID_ChoiceType : type};
  if ((!requirement_Accessor) || (requirement_Accessor->getAccessorType() != requestedType)) {
    requirement_Accessor = RequirementInstanceID_ChoiceType::create(type);
    if (!requirement_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirement_Accessor;
}

uci::type::RequirementInstanceID_ChoiceType& ActivitySourceType::chooseRequirement(uci::base::accessorType::AccessorType type) {
  return chooseRequirement("chooseRequirement", type);
}

uci::type::MDF_ReferenceType& ActivitySourceType::getMDF_() const {
  if (mDF_Accessor) {
    return *mDF_Accessor;
  }
  throw uci::base::UCIException("Error in getMDF(): Unable to get MDF, field not selected");
}

const uci::type::MDF_ReferenceType& ActivitySourceType::getMDF() const {
  return getMDF_();
}

uci::type::MDF_ReferenceType& ActivitySourceType::getMDF() {
  return getMDF_();
}

uci::type::ActivitySourceType& ActivitySourceType::setMDF(const uci::type::MDF_ReferenceType& accessor) {
  chooseMDF();
  if (&accessor != mDF_Accessor.get()) {
    mDF_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivitySourceType::isMDF() const noexcept {
  return static_cast<bool>(mDF_Accessor);
}

uci::type::MDF_ReferenceType& ActivitySourceType::chooseMDF(const std::string& method, uci::base::accessorType::AccessorType type) {
  requirement_Accessor.reset();
  activityPlan_Accessor.reset();
  associatedMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mDF_ReferenceType : type};
  if ((!mDF_Accessor) || (mDF_Accessor->getAccessorType() != requestedType)) {
    mDF_Accessor = MDF_ReferenceType::create(type);
    if (!mDF_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mDF_Accessor;
}

uci::type::MDF_ReferenceType& ActivitySourceType::chooseMDF(uci::base::accessorType::AccessorType type) {
  return chooseMDF("chooseMDF", type);
}

uci::type::ActivityPlanReferenceType& ActivitySourceType::getActivityPlan_() const {
  if (activityPlan_Accessor) {
    return *activityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityPlan(): Unable to get ActivityPlan, field not selected");
}

const uci::type::ActivityPlanReferenceType& ActivitySourceType::getActivityPlan() const {
  return getActivityPlan_();
}

uci::type::ActivityPlanReferenceType& ActivitySourceType::getActivityPlan() {
  return getActivityPlan_();
}

uci::type::ActivitySourceType& ActivitySourceType::setActivityPlan(const uci::type::ActivityPlanReferenceType& accessor) {
  chooseActivityPlan();
  if (&accessor != activityPlan_Accessor.get()) {
    activityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivitySourceType::isActivityPlan() const noexcept {
  return static_cast<bool>(activityPlan_Accessor);
}

uci::type::ActivityPlanReferenceType& ActivitySourceType::chooseActivityPlan(const std::string& method, uci::base::accessorType::AccessorType type) {
  requirement_Accessor.reset();
  mDF_Accessor.reset();
  associatedMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanReferenceType : type};
  if ((!activityPlan_Accessor) || (activityPlan_Accessor->getAccessorType() != requestedType)) {
    activityPlan_Accessor = ActivityPlanReferenceType::create(type);
    if (!activityPlan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityPlan_Accessor;
}

uci::type::ActivityPlanReferenceType& ActivitySourceType::chooseActivityPlan(uci::base::accessorType::AccessorType type) {
  return chooseActivityPlan("chooseActivityPlan", type);
}

uci::type::AssociatedMessageSourceType& ActivitySourceType::getAssociatedMessage_() const {
  if (associatedMessage_Accessor) {
    return *associatedMessage_Accessor;
  }
  throw uci::base::UCIException("Error in getAssociatedMessage(): Unable to get AssociatedMessage, field not selected");
}

const uci::type::AssociatedMessageSourceType& ActivitySourceType::getAssociatedMessage() const {
  return getAssociatedMessage_();
}

uci::type::AssociatedMessageSourceType& ActivitySourceType::getAssociatedMessage() {
  return getAssociatedMessage_();
}

uci::type::ActivitySourceType& ActivitySourceType::setAssociatedMessage(const uci::type::AssociatedMessageSourceType& accessor) {
  chooseAssociatedMessage(accessor.getAccessorType());
  if (&accessor != associatedMessage_Accessor.get()) {
    associatedMessage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivitySourceType::isAssociatedMessage() const noexcept {
  return static_cast<bool>(associatedMessage_Accessor);
}

uci::type::AssociatedMessageSourceType& ActivitySourceType::chooseAssociatedMessage(const std::string& method, uci::base::accessorType::AccessorType type) {
  requirement_Accessor.reset();
  mDF_Accessor.reset();
  activityPlan_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::associatedMessageSourceType : type};
  if ((!associatedMessage_Accessor) || (associatedMessage_Accessor->getAccessorType() != requestedType)) {
    associatedMessage_Accessor = AssociatedMessageSourceType::create(type);
    if (!associatedMessage_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *associatedMessage_Accessor;
}

uci::type::AssociatedMessageSourceType& ActivitySourceType::chooseAssociatedMessage(uci::base::accessorType::AccessorType type) {
  return chooseAssociatedMessage("chooseAssociatedMessage", type);
}

std::unique_ptr<ActivitySourceType> ActivitySourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activitySourceType : type};
  return (requestedType == uci::type::accessorType::activitySourceType) ? boost::make_unique<ActivitySourceType>() : nullptr;
}

/**  */
namespace ActivitySourceType_Names {

constexpr const char* Extern_Type_Name{"ActivitySourceType"};
constexpr const char* Requirement_Name{"Requirement"};
constexpr const char* MDF_Name{"MDF"};
constexpr const char* ActivityPlan_Name{"ActivityPlan"};
constexpr const char* AssociatedMessage_Name{"AssociatedMessage"};

} // namespace ActivitySourceType_Names

void ActivitySourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivitySourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivitySourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivitySourceType_Names::Requirement_Name) {
      RequirementInstanceID_ChoiceType::deserialize(valueType.second, accessor.chooseRequirement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivitySourceType_Names::MDF_Name) {
      MDF_ReferenceType::deserialize(valueType.second, accessor.chooseMDF(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivitySourceType_Names::ActivityPlan_Name) {
      ActivityPlanReferenceType::deserialize(valueType.second, accessor.chooseActivityPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivitySourceType_Names::AssociatedMessage_Name) {
      AssociatedMessageSourceType::deserialize(valueType.second, accessor.chooseAssociatedMessage(), nodeName, nsPrefix);
    }
  }
}

std::string ActivitySourceType::serialize(const uci::type::ActivitySourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivitySourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivitySourceType_Names::Extern_Type_Name);
  }
  if (accessor.isRequirement()) {
    RequirementInstanceID_ChoiceType::serialize(accessor.getRequirement(), node, ActivitySourceType_Names::Requirement_Name);
  } else if (accessor.isMDF()) {
    MDF_ReferenceType::serialize(accessor.getMDF(), node, ActivitySourceType_Names::MDF_Name);
  } else if (accessor.isActivityPlan()) {
    ActivityPlanReferenceType::serialize(accessor.getActivityPlan(), node, ActivitySourceType_Names::ActivityPlan_Name);
  } else if (accessor.isAssociatedMessage()) {
    AssociatedMessageSourceType::serialize(accessor.getAssociatedMessage(), node, ActivitySourceType_Names::AssociatedMessage_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivitySourceType& ActivitySourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivitySourceType>().release());
}

uci::type::ActivitySourceType& ActivitySourceType::create(const uci::type::ActivitySourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivitySourceType> newAccessor{boost::make_unique<asb_uci::type::ActivitySourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivitySourceType::destroy(uci::type::ActivitySourceType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivitySourceType*>(&accessor);
}

} // namespace type

} // namespace uci

