/** @file CS_SignalType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CS_SignalType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/PolarizationEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CS_SignalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PolarizationEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_SignalType::CS_SignalType()
  : signal_Accessor{boost::make_unique<ForeignKeyType>()},
    uplinkFrequency_Accessor{boost::make_unique<FrequencyRangeType>()},
    uplinkPolarization_Accessor{boost::make_unique<PolarizationEnum>()},
    downlinkFrequency_Accessor{boost::make_unique<FrequencyRangeType>()},
    downlinkPolarization_Accessor{boost::make_unique<PolarizationEnum>()},
    existingSignal_Accessor{boost::make_unique<ExistingSignal>(0, SIZE_MAX)} {
}

CS_SignalType::~CS_SignalType() = default;

void CS_SignalType::copy(const uci::type::CS_SignalType& accessor) {
  copyImpl(accessor, false);
}

void CS_SignalType::copyImpl(const uci::type::CS_SignalType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_SignalType&>(accessor);
    setSignal(*(accessorImpl.signal_Accessor));
    setUplinkFrequency(*(accessorImpl.uplinkFrequency_Accessor));
    setUplinkPolarization(*(accessorImpl.uplinkPolarization_Accessor));
    setDownlinkFrequency(*(accessorImpl.downlinkFrequency_Accessor));
    setDownlinkPolarization(*(accessorImpl.downlinkPolarization_Accessor));
    setExistingSignal(*(accessorImpl.existingSignal_Accessor));
  }
}

void CS_SignalType::reset() noexcept {
  if (signal_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    signal_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    signal_Accessor->reset();
  }
  uplinkFrequency_Accessor->reset();
  uplinkPolarization_Accessor->reset();
  downlinkFrequency_Accessor->reset();
  downlinkPolarization_Accessor->reset();
  existingSignal_Accessor->reset();
}

const uci::type::ForeignKeyType& CS_SignalType::getSignal() const {
  return *signal_Accessor;
}

uci::type::ForeignKeyType& CS_SignalType::getSignal() {
  return *signal_Accessor;
}

uci::type::CS_SignalType& CS_SignalType::setSignal(const uci::type::ForeignKeyType& accessor) {
  enableSignal(accessor.getAccessorType());
  if (&accessor != signal_Accessor.get()) {
    signal_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& CS_SignalType::enableSignal(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!signal_Accessor) || (signal_Accessor->getAccessorType() != requestedType)) {
    signal_Accessor = ForeignKeyType::create(requestedType);
    if (!signal_Accessor) {
      throw uci::base::UCIException("Error in enableSignal(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signal_Accessor;
}

const uci::type::FrequencyRangeType& CS_SignalType::getUplinkFrequency() const {
  return *uplinkFrequency_Accessor;
}

uci::type::FrequencyRangeType& CS_SignalType::getUplinkFrequency() {
  return *uplinkFrequency_Accessor;
}

uci::type::CS_SignalType& CS_SignalType::setUplinkFrequency(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != uplinkFrequency_Accessor.get()) {
    uplinkFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PolarizationEnum& CS_SignalType::getUplinkPolarization() const {
  return *uplinkPolarization_Accessor;
}

uci::type::PolarizationEnum& CS_SignalType::getUplinkPolarization() {
  return *uplinkPolarization_Accessor;
}

uci::type::CS_SignalType& CS_SignalType::setUplinkPolarization(const uci::type::PolarizationEnum& accessor) {
  if (&accessor != uplinkPolarization_Accessor.get()) {
    uplinkPolarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_SignalType& CS_SignalType::setUplinkPolarization(uci::type::PolarizationEnum::EnumerationItem value) {
  uplinkPolarization_Accessor->setValue(value);
  return *this;
}


const uci::type::FrequencyRangeType& CS_SignalType::getDownlinkFrequency() const {
  return *downlinkFrequency_Accessor;
}

uci::type::FrequencyRangeType& CS_SignalType::getDownlinkFrequency() {
  return *downlinkFrequency_Accessor;
}

uci::type::CS_SignalType& CS_SignalType::setDownlinkFrequency(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != downlinkFrequency_Accessor.get()) {
    downlinkFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PolarizationEnum& CS_SignalType::getDownlinkPolarization() const {
  return *downlinkPolarization_Accessor;
}

uci::type::PolarizationEnum& CS_SignalType::getDownlinkPolarization() {
  return *downlinkPolarization_Accessor;
}

uci::type::CS_SignalType& CS_SignalType::setDownlinkPolarization(const uci::type::PolarizationEnum& accessor) {
  if (&accessor != downlinkPolarization_Accessor.get()) {
    downlinkPolarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_SignalType& CS_SignalType::setDownlinkPolarization(uci::type::PolarizationEnum::EnumerationItem value) {
  downlinkPolarization_Accessor->setValue(value);
  return *this;
}


const uci::type::CS_SignalType::ExistingSignal& CS_SignalType::getExistingSignal() const {
  return *existingSignal_Accessor;
}

uci::type::CS_SignalType::ExistingSignal& CS_SignalType::getExistingSignal() {
  return *existingSignal_Accessor;
}

uci::type::CS_SignalType& CS_SignalType::setExistingSignal(const uci::type::CS_SignalType::ExistingSignal& accessor) {
  if (&accessor != existingSignal_Accessor.get()) {
    existingSignal_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CS_SignalType> CS_SignalType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_SignalType : type};
  return (requestedType == uci::type::accessorType::cS_SignalType) ? boost::make_unique<CS_SignalType>() : nullptr;
}

/**  */
namespace CS_SignalType_Names {

constexpr const char* Extern_Type_Name{"CS_SignalType"};
constexpr const char* Signal_Name{"Signal"};
constexpr const char* UplinkFrequency_Name{"UplinkFrequency"};
constexpr const char* UplinkPolarization_Name{"UplinkPolarization"};
constexpr const char* DownlinkFrequency_Name{"DownlinkFrequency"};
constexpr const char* DownlinkPolarization_Name{"DownlinkPolarization"};
constexpr const char* ExistingSignal_Name{"ExistingSignal"};

} // namespace CS_SignalType_Names

void CS_SignalType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_SignalType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_SignalType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_SignalType_Names::Signal_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSignal(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_SignalType_Names::UplinkFrequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getUplinkFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_SignalType_Names::UplinkPolarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getUplinkPolarization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SignalType_Names::DownlinkFrequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getDownlinkFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_SignalType_Names::DownlinkPolarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDownlinkPolarization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SignalType_Names::ExistingSignal_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CS_SignalType::ExistingSignal& boundedList = accessor.getExistingSignal();
        const uci::type::CS_SignalType::ExistingSignal::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CS_SignalType::serialize(const uci::type::CS_SignalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_SignalType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_SignalType_Names::Extern_Type_Name);
  }
  ForeignKeyType::serialize(accessor.getSignal(), node, CS_SignalType_Names::Signal_Name);
  FrequencyRangeType::serialize(accessor.getUplinkFrequency(), node, CS_SignalType_Names::UplinkFrequency_Name);
  PolarizationEnum::serialize(accessor.getUplinkPolarization(), node, CS_SignalType_Names::UplinkPolarization_Name, false);
  FrequencyRangeType::serialize(accessor.getDownlinkFrequency(), node, CS_SignalType_Names::DownlinkFrequency_Name);
  PolarizationEnum::serialize(accessor.getDownlinkPolarization(), node, CS_SignalType_Names::DownlinkPolarization_Name, false);
  {
    const uci::type::CS_SignalType::ExistingSignal& boundedList = accessor.getExistingSignal();
    for (uci::type::CS_SignalType::ExistingSignal::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, CS_SignalType_Names::ExistingSignal_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_SignalType& CS_SignalType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_SignalType>().release());
}

uci::type::CS_SignalType& CS_SignalType::create(const uci::type::CS_SignalType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_SignalType> newAccessor{boost::make_unique<asb_uci::type::CS_SignalType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_SignalType::destroy(uci::type::CS_SignalType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_SignalType*>(&accessor);
}

} // namespace type

} // namespace uci

