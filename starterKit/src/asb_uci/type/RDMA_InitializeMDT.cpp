/** @file RDMA_InitializeMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RDMA_InitializeMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/NetworkEndpointType.h"
#include "asb_uci/type/RDMA_DataTransferServiceEnum.h"
#include "asb_uci/type/RDMA_EndpointTypeEnum.h"
#include "asb_uci/type/RDMA_InitializeID_Type.h"
#include "asb_uci/type/RDMA_InitializeSetupID_Type.h"
#include "asb_uci/type/RDMA_ProviderEnum.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/NetworkEndpointType.h"
#include "uci/type/RDMA_DataTransferServiceEnum.h"
#include "uci/type/RDMA_EndpointTypeEnum.h"
#include "uci/type/RDMA_InitializeID_Type.h"
#include "uci/type/RDMA_InitializeMDT.h"
#include "uci/type/RDMA_InitializeSetupID_Type.h"
#include "uci/type/RDMA_ProviderEnum.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/VisibleString1024Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RDMA_InitializeMDT::RDMA_InitializeMDT()
  : rDMA_InitializeID_Accessor{boost::make_unique<RDMA_InitializeID_Type>()},
    endpoint_Accessor{boost::make_unique<Endpoint>(0, SIZE_MAX)},
    rDMA_Provider_Accessor{boost::make_unique<RDMA_ProviderEnum>()},
    rDMA_EndpointType_Accessor{boost::make_unique<RDMA_EndpointTypeEnum>()},
    rDMA_DataTransferService_Accessor{boost::make_unique<RDMA_DataTransferServiceEnum>()} {
}

RDMA_InitializeMDT::~RDMA_InitializeMDT() = default;

void RDMA_InitializeMDT::copy(const uci::type::RDMA_InitializeMDT& accessor) {
  copyImpl(accessor, false);
}

void RDMA_InitializeMDT::copyImpl(const uci::type::RDMA_InitializeMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RDMA_InitializeMDT&>(accessor);
    setRDMA_InitializeID(*(accessorImpl.rDMA_InitializeID_Accessor));
    if (accessorImpl.rDMA_InitializeSetupID_Accessor) {
      setRDMA_InitializeSetupID(*(accessorImpl.rDMA_InitializeSetupID_Accessor));
    } else {
      rDMA_InitializeSetupID_Accessor.reset();
    }
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
    setMemoryRegionSize(accessorImpl.memoryRegionSize_Accessor);
    if (accessorImpl.hasMaximumMessageSize()) {
      setMaximumMessageSize(accessorImpl.getMaximumMessageSize());
    } else {
      clearMaximumMessageSize();
    }
    setEndpoint(*(accessorImpl.endpoint_Accessor));
    setRDMA_Provider(*(accessorImpl.rDMA_Provider_Accessor));
    if (accessorImpl.endpointName_Accessor) {
      setEndpointName(*(accessorImpl.endpointName_Accessor));
    } else {
      endpointName_Accessor.reset();
    }
    setRDMA_EndpointType(*(accessorImpl.rDMA_EndpointType_Accessor));
    setRDMA_DataTransferService(*(accessorImpl.rDMA_DataTransferService_Accessor));
    setRDMA_MemoryProtectionLocalRead(accessorImpl.rDMA_MemoryProtectionLocalRead_Accessor);
    setRDMA_MemoryProtectionLocalWrite(accessorImpl.rDMA_MemoryProtectionLocalWrite_Accessor);
    setRDMA_MemoryProtectionRemoteRead(accessorImpl.rDMA_MemoryProtectionRemoteRead_Accessor);
    setRDMA_MemoryProtectionRemoteWrite(accessorImpl.rDMA_MemoryProtectionRemoteWrite_Accessor);
  }
}

void RDMA_InitializeMDT::reset() noexcept {
  rDMA_InitializeID_Accessor->reset();
  rDMA_InitializeSetupID_Accessor.reset();
  systemID_Accessor.reset();
  subsystemID_Accessor.reset();
  serviceID_Accessor.reset();
  memoryRegionSize_Accessor = 0;
  clearMaximumMessageSize();
  endpoint_Accessor->reset();
  rDMA_Provider_Accessor->reset();
  endpointName_Accessor.reset();
  rDMA_EndpointType_Accessor->reset();
  rDMA_DataTransferService_Accessor->reset();
  rDMA_MemoryProtectionLocalRead_Accessor = false;
  rDMA_MemoryProtectionLocalWrite_Accessor = false;
  rDMA_MemoryProtectionRemoteRead_Accessor = false;
  rDMA_MemoryProtectionRemoteWrite_Accessor = false;
}

const uci::type::RDMA_InitializeID_Type& RDMA_InitializeMDT::getRDMA_InitializeID() const {
  return *rDMA_InitializeID_Accessor;
}

uci::type::RDMA_InitializeID_Type& RDMA_InitializeMDT::getRDMA_InitializeID() {
  return *rDMA_InitializeID_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_InitializeID(const uci::type::RDMA_InitializeID_Type& accessor) {
  if (&accessor != rDMA_InitializeID_Accessor.get()) {
    rDMA_InitializeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RDMA_InitializeSetupID_Type& RDMA_InitializeMDT::getRDMA_InitializeSetupID_() const {
  if (rDMA_InitializeSetupID_Accessor) {
    return *rDMA_InitializeSetupID_Accessor;
  }
  throw uci::base::UCIException("Error in getRDMA_InitializeSetupID(): An attempt was made to get an optional field that was not enabled, call hasRDMA_InitializeSetupID() to determine if it is safe to call getRDMA_InitializeSetupID()");
}

const uci::type::RDMA_InitializeSetupID_Type& RDMA_InitializeMDT::getRDMA_InitializeSetupID() const {
  return getRDMA_InitializeSetupID_();
}

uci::type::RDMA_InitializeSetupID_Type& RDMA_InitializeMDT::getRDMA_InitializeSetupID() {
  return getRDMA_InitializeSetupID_();
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_InitializeSetupID(const uci::type::RDMA_InitializeSetupID_Type& accessor) {
  enableRDMA_InitializeSetupID();
  if (&accessor != rDMA_InitializeSetupID_Accessor.get()) {
    rDMA_InitializeSetupID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RDMA_InitializeMDT::hasRDMA_InitializeSetupID() const noexcept {
  return static_cast<bool>(rDMA_InitializeSetupID_Accessor);
}

uci::type::RDMA_InitializeSetupID_Type& RDMA_InitializeMDT::enableRDMA_InitializeSetupID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rDMA_InitializeSetupID_Type : type};
  if ((!rDMA_InitializeSetupID_Accessor) || (rDMA_InitializeSetupID_Accessor->getAccessorType() != requestedType)) {
    rDMA_InitializeSetupID_Accessor = RDMA_InitializeSetupID_Type::create(requestedType);
    if (!rDMA_InitializeSetupID_Accessor) {
      throw uci::base::UCIException("Error in enableRDMA_InitializeSetupID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rDMA_InitializeSetupID_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::clearRDMA_InitializeSetupID() noexcept {
  rDMA_InitializeSetupID_Accessor.reset();
  return *this;
}

uci::type::SystemID_Type& RDMA_InitializeMDT::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& RDMA_InitializeMDT::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& RDMA_InitializeMDT::getSystemID() {
  return getSystemID_();
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RDMA_InitializeMDT::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& RDMA_InitializeMDT::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::SubsystemID_Type& RDMA_InitializeMDT::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& RDMA_InitializeMDT::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& RDMA_InitializeMDT::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RDMA_InitializeMDT::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& RDMA_InitializeMDT::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

uci::type::ServiceID_Type& RDMA_InitializeMDT::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& RDMA_InitializeMDT::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& RDMA_InitializeMDT::getServiceID() {
  return getServiceID_();
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RDMA_InitializeMDT::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& RDMA_InitializeMDT::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::create(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

xs::UnsignedInt RDMA_InitializeMDT::getMemoryRegionSize() const {
  return memoryRegionSize_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setMemoryRegionSize(xs::UnsignedInt value) {
  memoryRegionSize_Accessor = value;
  return *this;
}


xs::UnsignedInt RDMA_InitializeMDT::getMaximumMessageSize() const {
  if (maximumMessageSize_Accessor) {
    return *maximumMessageSize_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumMessageSize(): An attempt was made to get an optional field that was not enabled, call hasMaximumMessageSize() to determine if it is safe to call getMaximumMessageSize()");
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setMaximumMessageSize(xs::UnsignedInt value) {
  maximumMessageSize_Accessor = value;
  return *this;
}

bool RDMA_InitializeMDT::hasMaximumMessageSize() const noexcept {
  return maximumMessageSize_Accessor.has_value();
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::clearMaximumMessageSize() noexcept {
  maximumMessageSize_Accessor.reset();
  return *this;
}

const uci::type::RDMA_InitializeMDT::Endpoint& RDMA_InitializeMDT::getEndpoint() const {
  return *endpoint_Accessor;
}

uci::type::RDMA_InitializeMDT::Endpoint& RDMA_InitializeMDT::getEndpoint() {
  return *endpoint_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setEndpoint(const uci::type::RDMA_InitializeMDT::Endpoint& accessor) {
  if (&accessor != endpoint_Accessor.get()) {
    endpoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RDMA_ProviderEnum& RDMA_InitializeMDT::getRDMA_Provider() const {
  return *rDMA_Provider_Accessor;
}

uci::type::RDMA_ProviderEnum& RDMA_InitializeMDT::getRDMA_Provider() {
  return *rDMA_Provider_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_Provider(const uci::type::RDMA_ProviderEnum& accessor) {
  if (&accessor != rDMA_Provider_Accessor.get()) {
    rDMA_Provider_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_Provider(uci::type::RDMA_ProviderEnum::EnumerationItem value) {
  rDMA_Provider_Accessor->setValue(value);
  return *this;
}


uci::type::VisibleString1024Type& RDMA_InitializeMDT::getEndpointName_() const {
  if (endpointName_Accessor) {
    return *endpointName_Accessor;
  }
  throw uci::base::UCIException("Error in getEndpointName(): An attempt was made to get an optional field that was not enabled, call hasEndpointName() to determine if it is safe to call getEndpointName()");
}

const uci::type::VisibleString1024Type& RDMA_InitializeMDT::getEndpointName() const {
  return getEndpointName_();
}

uci::type::VisibleString1024Type& RDMA_InitializeMDT::getEndpointName() {
  return getEndpointName_();
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setEndpointName(const uci::type::VisibleString1024Type& value) {
  return setEndpointName(value.c_str());
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setEndpointName(const std::string& value) {
  return setEndpointName(value.c_str());
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setEndpointName(const char* value) {
  enableEndpointName().setStringValue(value);
  return *this;
}

bool RDMA_InitializeMDT::hasEndpointName() const noexcept {
  return static_cast<bool>(endpointName_Accessor);
}

uci::type::VisibleString1024Type& RDMA_InitializeMDT::enableEndpointName(uci::base::accessorType::AccessorType type) {
  if (!endpointName_Accessor) {
    endpointName_Accessor = VisibleString1024Type::create(type);
  }
  return *endpointName_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::clearEndpointName() noexcept {
  endpointName_Accessor.reset();
  return *this;
}

const uci::type::RDMA_EndpointTypeEnum& RDMA_InitializeMDT::getRDMA_EndpointType() const {
  return *rDMA_EndpointType_Accessor;
}

uci::type::RDMA_EndpointTypeEnum& RDMA_InitializeMDT::getRDMA_EndpointType() {
  return *rDMA_EndpointType_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_EndpointType(const uci::type::RDMA_EndpointTypeEnum& accessor) {
  if (&accessor != rDMA_EndpointType_Accessor.get()) {
    rDMA_EndpointType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_EndpointType(uci::type::RDMA_EndpointTypeEnum::EnumerationItem value) {
  rDMA_EndpointType_Accessor->setValue(value);
  return *this;
}


const uci::type::RDMA_DataTransferServiceEnum& RDMA_InitializeMDT::getRDMA_DataTransferService() const {
  return *rDMA_DataTransferService_Accessor;
}

uci::type::RDMA_DataTransferServiceEnum& RDMA_InitializeMDT::getRDMA_DataTransferService() {
  return *rDMA_DataTransferService_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_DataTransferService(const uci::type::RDMA_DataTransferServiceEnum& accessor) {
  if (&accessor != rDMA_DataTransferService_Accessor.get()) {
    rDMA_DataTransferService_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_DataTransferService(uci::type::RDMA_DataTransferServiceEnum::EnumerationItem value) {
  rDMA_DataTransferService_Accessor->setValue(value);
  return *this;
}


xs::Boolean RDMA_InitializeMDT::getRDMA_MemoryProtectionLocalRead() const {
  return rDMA_MemoryProtectionLocalRead_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_MemoryProtectionLocalRead(xs::Boolean value) {
  rDMA_MemoryProtectionLocalRead_Accessor = value;
  return *this;
}


xs::Boolean RDMA_InitializeMDT::getRDMA_MemoryProtectionLocalWrite() const {
  return rDMA_MemoryProtectionLocalWrite_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_MemoryProtectionLocalWrite(xs::Boolean value) {
  rDMA_MemoryProtectionLocalWrite_Accessor = value;
  return *this;
}


xs::Boolean RDMA_InitializeMDT::getRDMA_MemoryProtectionRemoteRead() const {
  return rDMA_MemoryProtectionRemoteRead_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_MemoryProtectionRemoteRead(xs::Boolean value) {
  rDMA_MemoryProtectionRemoteRead_Accessor = value;
  return *this;
}


xs::Boolean RDMA_InitializeMDT::getRDMA_MemoryProtectionRemoteWrite() const {
  return rDMA_MemoryProtectionRemoteWrite_Accessor;
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::setRDMA_MemoryProtectionRemoteWrite(xs::Boolean value) {
  rDMA_MemoryProtectionRemoteWrite_Accessor = value;
  return *this;
}


std::unique_ptr<RDMA_InitializeMDT> RDMA_InitializeMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rDMA_InitializeMDT : type};
  return (requestedType == uci::type::accessorType::rDMA_InitializeMDT) ? boost::make_unique<RDMA_InitializeMDT>() : nullptr;
}

/**  */
namespace RDMA_InitializeMDT_Names {

constexpr const char* Extern_Type_Name{"RDMA_InitializeMDT"};
constexpr const char* RDMA_InitializeID_Name{"RDMA_InitializeID"};
constexpr const char* RDMA_InitializeSetupID_Name{"RDMA_InitializeSetupID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* MemoryRegionSize_Name{"MemoryRegionSize"};
constexpr const char* MaximumMessageSize_Name{"MaximumMessageSize"};
constexpr const char* Endpoint_Name{"Endpoint"};
constexpr const char* RDMA_Provider_Name{"RDMA_Provider"};
constexpr const char* EndpointName_Name{"EndpointName"};
constexpr const char* RDMA_EndpointType_Name{"RDMA_EndpointType"};
constexpr const char* RDMA_DataTransferService_Name{"RDMA_DataTransferService"};
constexpr const char* RDMA_MemoryProtectionLocalRead_Name{"RDMA_MemoryProtectionLocalRead"};
constexpr const char* RDMA_MemoryProtectionLocalWrite_Name{"RDMA_MemoryProtectionLocalWrite"};
constexpr const char* RDMA_MemoryProtectionRemoteRead_Name{"RDMA_MemoryProtectionRemoteRead"};
constexpr const char* RDMA_MemoryProtectionRemoteWrite_Name{"RDMA_MemoryProtectionRemoteWrite"};

} // namespace RDMA_InitializeMDT_Names

void RDMA_InitializeMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RDMA_InitializeMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RDMA_InitializeMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_InitializeID_Name) {
      RDMA_InitializeID_Type::deserialize(valueType.second, accessor.getRDMA_InitializeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_InitializeSetupID_Name) {
      RDMA_InitializeSetupID_Type::deserialize(valueType.second, accessor.enableRDMA_InitializeSetupID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::MemoryRegionSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMemoryRegionSize(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::MaximumMessageSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumMessageSize(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::Endpoint_Name) {
      uci::type::RDMA_InitializeMDT::Endpoint& boundedList = accessor.getEndpoint();
      const uci::type::RDMA_InitializeMDT::Endpoint::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::NetworkEndpointType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_Provider_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRDMA_Provider().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::EndpointName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEndpointName(*value);
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_EndpointType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRDMA_EndpointType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_DataTransferService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRDMA_DataTransferService().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_MemoryProtectionLocalRead_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRDMA_MemoryProtectionLocalRead(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_MemoryProtectionLocalWrite_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRDMA_MemoryProtectionLocalWrite(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_MemoryProtectionRemoteRead_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRDMA_MemoryProtectionRemoteRead(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RDMA_InitializeMDT_Names::RDMA_MemoryProtectionRemoteWrite_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRDMA_MemoryProtectionRemoteWrite(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string RDMA_InitializeMDT::serialize(const uci::type::RDMA_InitializeMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RDMA_InitializeMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RDMA_InitializeMDT_Names::Extern_Type_Name);
  }
  RDMA_InitializeID_Type::serialize(accessor.getRDMA_InitializeID(), node, RDMA_InitializeMDT_Names::RDMA_InitializeID_Name);
  if (accessor.hasRDMA_InitializeSetupID()) {
    RDMA_InitializeSetupID_Type::serialize(accessor.getRDMA_InitializeSetupID(), node, RDMA_InitializeMDT_Names::RDMA_InitializeSetupID_Name);
  }
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, RDMA_InitializeMDT_Names::SystemID_Name);
  }
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, RDMA_InitializeMDT_Names::SubsystemID_Name);
  }
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, RDMA_InitializeMDT_Names::ServiceID_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getMemoryRegionSize(), node, RDMA_InitializeMDT_Names::MemoryRegionSize_Name);
  if (accessor.hasMaximumMessageSize()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getMaximumMessageSize(), node, RDMA_InitializeMDT_Names::MaximumMessageSize_Name);
  }
  {
    const uci::type::RDMA_InitializeMDT::Endpoint& boundedList = accessor.getEndpoint();
    for (uci::type::RDMA_InitializeMDT::Endpoint::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::NetworkEndpointType::serialize(boundedList.at(i), node, RDMA_InitializeMDT_Names::Endpoint_Name);
    }
  }
  RDMA_ProviderEnum::serialize(accessor.getRDMA_Provider(), node, RDMA_InitializeMDT_Names::RDMA_Provider_Name, false);
  if (accessor.hasEndpointName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getEndpointName(), node, RDMA_InitializeMDT_Names::EndpointName_Name);
  }
  RDMA_EndpointTypeEnum::serialize(accessor.getRDMA_EndpointType(), node, RDMA_InitializeMDT_Names::RDMA_EndpointType_Name, false);
  RDMA_DataTransferServiceEnum::serialize(accessor.getRDMA_DataTransferService(), node, RDMA_InitializeMDT_Names::RDMA_DataTransferService_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRDMA_MemoryProtectionLocalRead(), node, RDMA_InitializeMDT_Names::RDMA_MemoryProtectionLocalRead_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRDMA_MemoryProtectionLocalWrite(), node, RDMA_InitializeMDT_Names::RDMA_MemoryProtectionLocalWrite_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRDMA_MemoryProtectionRemoteRead(), node, RDMA_InitializeMDT_Names::RDMA_MemoryProtectionRemoteRead_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRDMA_MemoryProtectionRemoteWrite(), node, RDMA_InitializeMDT_Names::RDMA_MemoryProtectionRemoteWrite_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RDMA_InitializeMDT>().release());
}

uci::type::RDMA_InitializeMDT& RDMA_InitializeMDT::create(const uci::type::RDMA_InitializeMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RDMA_InitializeMDT> newAccessor{boost::make_unique<asb_uci::type::RDMA_InitializeMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RDMA_InitializeMDT::destroy(uci::type::RDMA_InitializeMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RDMA_InitializeMDT*>(&accessor);
}

} // namespace type

} // namespace uci

