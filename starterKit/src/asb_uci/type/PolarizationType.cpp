/** @file PolarizationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PolarizationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PolarizationEnum.h"
#include "asb_uci/type/PolarizationSenseEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/PolarizationEnum.h"
#include "uci/type/PolarizationSenseEnum.h"
#include "uci/type/PolarizationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PolarizationType::PolarizationType() = default;

PolarizationType::~PolarizationType() = default;

void PolarizationType::copy(const uci::type::PolarizationType& accessor) {
  copyImpl(accessor, false);
}

void PolarizationType::copyImpl(const uci::type::PolarizationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PolarizationType&>(accessor);
    if (accessorImpl.hasPolarizationTiltAngle()) {
      setPolarizationTiltAngle(accessorImpl.getPolarizationTiltAngle());
    } else {
      clearPolarizationTiltAngle();
    }
    if (accessorImpl.hasPolarizationAxialRatio()) {
      setPolarizationAxialRatio(accessorImpl.getPolarizationAxialRatio());
    } else {
      clearPolarizationAxialRatio();
    }
    if (accessorImpl.polarizationSense_Accessor) {
      setPolarizationSense(*(accessorImpl.polarizationSense_Accessor));
    } else {
      polarizationSense_Accessor.reset();
    }
    if (accessorImpl.polarizationCharacter_Accessor) {
      setPolarizationCharacter(*(accessorImpl.polarizationCharacter_Accessor));
    } else {
      polarizationCharacter_Accessor.reset();
    }
  }
}

void PolarizationType::reset() noexcept {
  clearPolarizationTiltAngle();
  clearPolarizationAxialRatio();
  polarizationSense_Accessor.reset();
  polarizationCharacter_Accessor.reset();
}

uci::type::AngleTypeValue PolarizationType::getPolarizationTiltAngle() const {
  if (polarizationTiltAngle_Accessor) {
    return *polarizationTiltAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getPolarizationTiltAngle(): An attempt was made to get an optional field that was not enabled, call hasPolarizationTiltAngle() to determine if it is safe to call getPolarizationTiltAngle()");
}

uci::type::PolarizationType& PolarizationType::setPolarizationTiltAngle(uci::type::AngleTypeValue value) {
  polarizationTiltAngle_Accessor = value;
  return *this;
}

bool PolarizationType::hasPolarizationTiltAngle() const noexcept {
  return polarizationTiltAngle_Accessor.has_value();
}

uci::type::PolarizationType& PolarizationType::clearPolarizationTiltAngle() noexcept {
  polarizationTiltAngle_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue PolarizationType::getPolarizationAxialRatio() const {
  if (polarizationAxialRatio_Accessor) {
    return *polarizationAxialRatio_Accessor;
  }
  throw uci::base::UCIException("Error in getPolarizationAxialRatio(): An attempt was made to get an optional field that was not enabled, call hasPolarizationAxialRatio() to determine if it is safe to call getPolarizationAxialRatio()");
}

uci::type::PolarizationType& PolarizationType::setPolarizationAxialRatio(uci::type::DecibelTypeValue value) {
  polarizationAxialRatio_Accessor = value;
  return *this;
}

bool PolarizationType::hasPolarizationAxialRatio() const noexcept {
  return polarizationAxialRatio_Accessor.has_value();
}

uci::type::PolarizationType& PolarizationType::clearPolarizationAxialRatio() noexcept {
  polarizationAxialRatio_Accessor.reset();
  return *this;
}

uci::type::PolarizationSenseEnum& PolarizationType::getPolarizationSense_() const {
  if (polarizationSense_Accessor) {
    return *polarizationSense_Accessor;
  }
  throw uci::base::UCIException("Error in getPolarizationSense(): An attempt was made to get an optional field that was not enabled, call hasPolarizationSense() to determine if it is safe to call getPolarizationSense()");
}

const uci::type::PolarizationSenseEnum& PolarizationType::getPolarizationSense() const {
  return getPolarizationSense_();
}

uci::type::PolarizationSenseEnum& PolarizationType::getPolarizationSense() {
  return getPolarizationSense_();
}

uci::type::PolarizationType& PolarizationType::setPolarizationSense(const uci::type::PolarizationSenseEnum& accessor) {
  enablePolarizationSense();
  if (&accessor != polarizationSense_Accessor.get()) {
    polarizationSense_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PolarizationType& PolarizationType::setPolarizationSense(const uci::type::PolarizationSenseEnum::EnumerationItem value) {
  enablePolarizationSense().setValue(value);
  return *this;
}

bool PolarizationType::hasPolarizationSense() const noexcept {
  return static_cast<bool>(polarizationSense_Accessor);
}

uci::type::PolarizationSenseEnum& PolarizationType::enablePolarizationSense(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationSenseEnum : type};
  if ((!polarizationSense_Accessor) || (polarizationSense_Accessor->getAccessorType() != requestedType)) {
    polarizationSense_Accessor = PolarizationSenseEnum::create(requestedType);
    if (!polarizationSense_Accessor) {
      throw uci::base::UCIException("Error in enablePolarizationSense(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *polarizationSense_Accessor;
}

uci::type::PolarizationType& PolarizationType::clearPolarizationSense() noexcept {
  polarizationSense_Accessor.reset();
  return *this;
}

uci::type::PolarizationEnum& PolarizationType::getPolarizationCharacter_() const {
  if (polarizationCharacter_Accessor) {
    return *polarizationCharacter_Accessor;
  }
  throw uci::base::UCIException("Error in getPolarizationCharacter(): An attempt was made to get an optional field that was not enabled, call hasPolarizationCharacter() to determine if it is safe to call getPolarizationCharacter()");
}

const uci::type::PolarizationEnum& PolarizationType::getPolarizationCharacter() const {
  return getPolarizationCharacter_();
}

uci::type::PolarizationEnum& PolarizationType::getPolarizationCharacter() {
  return getPolarizationCharacter_();
}

uci::type::PolarizationType& PolarizationType::setPolarizationCharacter(const uci::type::PolarizationEnum& accessor) {
  enablePolarizationCharacter();
  if (&accessor != polarizationCharacter_Accessor.get()) {
    polarizationCharacter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PolarizationType& PolarizationType::setPolarizationCharacter(const uci::type::PolarizationEnum::EnumerationItem value) {
  enablePolarizationCharacter().setValue(value);
  return *this;
}

bool PolarizationType::hasPolarizationCharacter() const noexcept {
  return static_cast<bool>(polarizationCharacter_Accessor);
}

uci::type::PolarizationEnum& PolarizationType::enablePolarizationCharacter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationEnum : type};
  if ((!polarizationCharacter_Accessor) || (polarizationCharacter_Accessor->getAccessorType() != requestedType)) {
    polarizationCharacter_Accessor = PolarizationEnum::create(requestedType);
    if (!polarizationCharacter_Accessor) {
      throw uci::base::UCIException("Error in enablePolarizationCharacter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *polarizationCharacter_Accessor;
}

uci::type::PolarizationType& PolarizationType::clearPolarizationCharacter() noexcept {
  polarizationCharacter_Accessor.reset();
  return *this;
}

std::unique_ptr<PolarizationType> PolarizationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationType : type};
  return (requestedType == uci::type::accessorType::polarizationType) ? boost::make_unique<PolarizationType>() : nullptr;
}

/**  */
namespace PolarizationType_Names {

constexpr const char* Extern_Type_Name{"PolarizationType"};
constexpr const char* PolarizationTiltAngle_Name{"PolarizationTiltAngle"};
constexpr const char* PolarizationAxialRatio_Name{"PolarizationAxialRatio"};
constexpr const char* PolarizationSense_Name{"PolarizationSense"};
constexpr const char* PolarizationCharacter_Name{"PolarizationCharacter"};

} // namespace PolarizationType_Names

void PolarizationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PolarizationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PolarizationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PolarizationType_Names::PolarizationTiltAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPolarizationTiltAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PolarizationType_Names::PolarizationAxialRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPolarizationAxialRatio(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PolarizationType_Names::PolarizationSense_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePolarizationSense().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PolarizationType_Names::PolarizationCharacter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePolarizationCharacter().setValueFromName(*value);
      }
    }
  }
}

std::string PolarizationType::serialize(const uci::type::PolarizationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PolarizationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PolarizationType_Names::Extern_Type_Name);
  }
  if (accessor.hasPolarizationTiltAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPolarizationTiltAngle(), node, PolarizationType_Names::PolarizationTiltAngle_Name);
  }
  if (accessor.hasPolarizationAxialRatio()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPolarizationAxialRatio(), node, PolarizationType_Names::PolarizationAxialRatio_Name);
  }
  if (accessor.hasPolarizationSense()) {
    PolarizationSenseEnum::serialize(accessor.getPolarizationSense(), node, PolarizationType_Names::PolarizationSense_Name, false);
  }
  if (accessor.hasPolarizationCharacter()) {
    PolarizationEnum::serialize(accessor.getPolarizationCharacter(), node, PolarizationType_Names::PolarizationCharacter_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PolarizationType& PolarizationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PolarizationType>().release());
}

uci::type::PolarizationType& PolarizationType::create(const uci::type::PolarizationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PolarizationType> newAccessor{boost::make_unique<asb_uci::type::PolarizationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PolarizationType::destroy(uci::type::PolarizationType& accessor) {
  delete dynamic_cast<asb_uci::type::PolarizationType*>(&accessor);
}

} // namespace type

} // namespace uci

