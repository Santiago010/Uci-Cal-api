/** @file OpPointReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpPointReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataLinkIdentifierPET.h"
#include "../../../include/asb_uci/type/GeoLocatedObjectType.h"
#include "../../../include/asb_uci/type/GeoLocatedStoredObjectType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataLinkIdentifierPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GeoLocatedObjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GeoLocatedStoredObjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointReferenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpPointReferenceType::OpPointReferenceType() = default;

OpPointReferenceType::~OpPointReferenceType() = default;

void OpPointReferenceType::copy(const uci::type::OpPointReferenceType& accessor) {
  copyImpl(accessor, false);
}

void OpPointReferenceType::copyImpl(const uci::type::OpPointReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpPointReferenceType&>(accessor);
    if (accessorImpl.storedObject_Accessor) {
      setStoredObject(*(accessorImpl.storedObject_Accessor));
    } else {
      storedObject_Accessor.reset();
    }
    if (accessorImpl.storedObjectRef_Accessor) {
      setStoredObjectRef(*(accessorImpl.storedObjectRef_Accessor));
    } else {
      storedObjectRef_Accessor.reset();
    }
    if (accessorImpl.dataLinkObject_Accessor) {
      setDataLinkObject(*(accessorImpl.dataLinkObject_Accessor));
    } else {
      dataLinkObject_Accessor.reset();
    }
  }
}

void OpPointReferenceType::reset() noexcept {
  storedObject_Accessor.reset();
  storedObjectRef_Accessor.reset();
  dataLinkObject_Accessor.reset();
}

uci::type::OpPointReferenceType::OpPointReferenceTypeChoice OpPointReferenceType::getOpPointReferenceTypeChoiceOrdinal() const noexcept {
  if (storedObject_Accessor) {
    return OPPOINTREFERENCETYPE_CHOICE_STOREDOBJECT;
  }
  if (storedObjectRef_Accessor) {
    return OPPOINTREFERENCETYPE_CHOICE_STOREDOBJECTREF;
  }
  if (dataLinkObject_Accessor) {
    return OPPOINTREFERENCETYPE_CHOICE_DATALINKOBJECT;
  }
  return OPPOINTREFERENCETYPE_CHOICE_NONE;
}

uci::type::OpPointReferenceType& OpPointReferenceType::setOpPointReferenceTypeChoiceOrdinal(uci::type::OpPointReferenceType::OpPointReferenceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPPOINTREFERENCETYPE_CHOICE_STOREDOBJECT:
      chooseStoredObject("setOpPointReferenceTypeChoiceOrdinal", type);
      break;
    case OPPOINTREFERENCETYPE_CHOICE_STOREDOBJECTREF:
      chooseStoredObjectRef("setOpPointReferenceTypeChoiceOrdinal", type);
      break;
    case OPPOINTREFERENCETYPE_CHOICE_DATALINKOBJECT:
      chooseDataLinkObject("setOpPointReferenceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpPointReferenceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::GeoLocatedStoredObjectType& OpPointReferenceType::getStoredObject_() const {
  if (storedObject_Accessor) {
    return *storedObject_Accessor;
  }
  throw uci::base::UCIException("Error in getStoredObject(): Unable to get StoredObject, field not selected");
}

const uci::type::GeoLocatedStoredObjectType& OpPointReferenceType::getStoredObject() const {
  return getStoredObject_();
}

uci::type::GeoLocatedStoredObjectType& OpPointReferenceType::getStoredObject() {
  return getStoredObject_();
}

uci::type::OpPointReferenceType& OpPointReferenceType::setStoredObject(const uci::type::GeoLocatedStoredObjectType& accessor) {
  chooseStoredObject(accessor.getAccessorType());
  if (&accessor != storedObject_Accessor.get()) {
    storedObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpPointReferenceType::isStoredObject() const noexcept {
  return static_cast<bool>(storedObject_Accessor);
}

uci::type::GeoLocatedStoredObjectType& OpPointReferenceType::chooseStoredObject(const std::string& method, uci::base::accessorType::AccessorType type) {
  storedObjectRef_Accessor.reset();
  dataLinkObject_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedStoredObjectType : type};
  if ((!storedObject_Accessor) || (storedObject_Accessor->getAccessorType() != requestedType)) {
    storedObject_Accessor = GeoLocatedStoredObjectType::create(type);
    if (!storedObject_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *storedObject_Accessor;
}

uci::type::GeoLocatedStoredObjectType& OpPointReferenceType::chooseStoredObject(uci::base::accessorType::AccessorType type) {
  return chooseStoredObject("chooseStoredObject", type);
}

uci::type::GeoLocatedObjectType& OpPointReferenceType::getStoredObjectRef_() const {
  if (storedObjectRef_Accessor) {
    return *storedObjectRef_Accessor;
  }
  throw uci::base::UCIException("Error in getStoredObjectRef(): Unable to get StoredObjectRef, field not selected");
}

const uci::type::GeoLocatedObjectType& OpPointReferenceType::getStoredObjectRef() const {
  return getStoredObjectRef_();
}

uci::type::GeoLocatedObjectType& OpPointReferenceType::getStoredObjectRef() {
  return getStoredObjectRef_();
}

uci::type::OpPointReferenceType& OpPointReferenceType::setStoredObjectRef(const uci::type::GeoLocatedObjectType& accessor) {
  chooseStoredObjectRef(accessor.getAccessorType());
  if (&accessor != storedObjectRef_Accessor.get()) {
    storedObjectRef_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpPointReferenceType::isStoredObjectRef() const noexcept {
  return static_cast<bool>(storedObjectRef_Accessor);
}

uci::type::GeoLocatedObjectType& OpPointReferenceType::chooseStoredObjectRef(const std::string& method, uci::base::accessorType::AccessorType type) {
  storedObject_Accessor.reset();
  dataLinkObject_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedObjectType : type};
  if ((!storedObjectRef_Accessor) || (storedObjectRef_Accessor->getAccessorType() != requestedType)) {
    storedObjectRef_Accessor = GeoLocatedObjectType::create(type);
    if (!storedObjectRef_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *storedObjectRef_Accessor;
}

uci::type::GeoLocatedObjectType& OpPointReferenceType::chooseStoredObjectRef(uci::base::accessorType::AccessorType type) {
  return chooseStoredObjectRef("chooseStoredObjectRef", type);
}

uci::type::DataLinkIdentifierPET& OpPointReferenceType::getDataLinkObject_() const {
  if (dataLinkObject_Accessor) {
    return *dataLinkObject_Accessor;
  }
  throw uci::base::UCIException("Error in getDataLinkObject(): Unable to get DataLinkObject, field not selected");
}

const uci::type::DataLinkIdentifierPET& OpPointReferenceType::getDataLinkObject() const {
  return getDataLinkObject_();
}

uci::type::DataLinkIdentifierPET& OpPointReferenceType::getDataLinkObject() {
  return getDataLinkObject_();
}

uci::type::OpPointReferenceType& OpPointReferenceType::setDataLinkObject(const uci::type::DataLinkIdentifierPET& accessor) {
  chooseDataLinkObject("setDataLinkObject", accessor.getAccessorType());
  if (&accessor != dataLinkObject_Accessor.get()) {
    dataLinkObject_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OpPointReferenceType::isDataLinkObject() const noexcept {
  return static_cast<bool>(dataLinkObject_Accessor);
}

uci::type::DataLinkIdentifierPET& OpPointReferenceType::chooseDataLinkObject(const std::string& method, uci::base::accessorType::AccessorType type) {
  storedObject_Accessor.reset();
  storedObjectRef_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataLinkIdentifierPET : type};
  if ((!dataLinkObject_Accessor) || (dataLinkObject_Accessor->getAccessorType() != requestedType)) {
    dataLinkObject_Accessor = DataLinkIdentifierPET::create(type);
    if (!dataLinkObject_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataLinkObject_Accessor;
}

uci::type::DataLinkIdentifierPET& OpPointReferenceType::chooseDataLinkObject(uci::base::accessorType::AccessorType type) {
  return chooseDataLinkObject("chooseDataLinkObject", type);
}

std::unique_ptr<OpPointReferenceType> OpPointReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointReferenceType : type};
  return (requestedType == uci::type::accessorType::opPointReferenceType) ? boost::make_unique<OpPointReferenceType>() : nullptr;
}

/**  */
namespace OpPointReferenceType_Names {

constexpr const char* Extern_Type_Name{"OpPointReferenceType"};
constexpr const char* StoredObject_Name{"StoredObject"};
constexpr const char* StoredObjectRef_Name{"StoredObjectRef"};
constexpr const char* DataLinkObject_Name{"DataLinkObject"};

} // namespace OpPointReferenceType_Names

void OpPointReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpPointReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpPointReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpPointReferenceType_Names::StoredObject_Name) {
      GeoLocatedStoredObjectType::deserialize(valueType.second, accessor.chooseStoredObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpPointReferenceType_Names::StoredObjectRef_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.chooseStoredObjectRef(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpPointReferenceType_Names::DataLinkObject_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseDataLinkObject(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string OpPointReferenceType::serialize(const uci::type::OpPointReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpPointReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpPointReferenceType_Names::Extern_Type_Name);
  }
  if (accessor.isStoredObject()) {
    GeoLocatedStoredObjectType::serialize(accessor.getStoredObject(), node, OpPointReferenceType_Names::StoredObject_Name);
  } else if (accessor.isStoredObjectRef()) {
    GeoLocatedObjectType::serialize(accessor.getStoredObjectRef(), node, OpPointReferenceType_Names::StoredObjectRef_Name);
  } else if (accessor.isDataLinkObject()) {
    DataLinkIdentifierPET::serialize(accessor.getDataLinkObject(), node, OpPointReferenceType_Names::DataLinkObject_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpPointReferenceType& OpPointReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpPointReferenceType>().release());
}

uci::type::OpPointReferenceType& OpPointReferenceType::create(const uci::type::OpPointReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpPointReferenceType> newAccessor{boost::make_unique<asb_uci::type::OpPointReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpPointReferenceType::destroy(uci::type::OpPointReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::OpPointReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

