/** @file RequirementMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementMetricsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EnduranceBaseType.h"
#include "asb_uci/type/MetricsType.h"
#include "asb_uci/type/OrbitalManeuverDetailsBaseType.h"
#include "asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "asb_uci/type/TimeWindowType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EnduranceBaseType.h"
#include "uci/type/MetricsType.h"
#include "uci/type/OrbitalManeuverDetailsBaseType.h"
#include "uci/type/RequirementInstanceID_ChoiceType.h"
#include "uci/type/RequirementMetricsType.h"
#include "uci/type/TimeWindowType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementMetricsType::RequirementMetricsType()
  : requirementID_Accessor{boost::make_unique<RequirementID>(1, SIZE_MAX)} {
}

RequirementMetricsType::~RequirementMetricsType() = default;

void RequirementMetricsType::copy(const uci::type::RequirementMetricsType& accessor) {
  copyImpl(accessor, false);
}

void RequirementMetricsType::copyImpl(const uci::type::RequirementMetricsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementMetricsType&>(accessor);
    setRequirementID(*(accessorImpl.requirementID_Accessor));
    if (accessorImpl.resourceMetrics_Accessor) {
      setResourceMetrics(*(accessorImpl.resourceMetrics_Accessor));
    } else {
      resourceMetrics_Accessor.reset();
    }
    if (accessorImpl.temporalMetrics_Accessor) {
      setTemporalMetrics(*(accessorImpl.temporalMetrics_Accessor));
    } else {
      temporalMetrics_Accessor.reset();
    }
    if (accessorImpl.maneuverUsage_Accessor) {
      setManeuverUsage(*(accessorImpl.maneuverUsage_Accessor));
    } else {
      maneuverUsage_Accessor.reset();
    }
    if (accessorImpl.operationalEnduranceUsage_Accessor) {
      setOperationalEnduranceUsage(*(accessorImpl.operationalEnduranceUsage_Accessor));
    } else {
      operationalEnduranceUsage_Accessor.reset();
    }
  }
}

void RequirementMetricsType::reset() noexcept {
  requirementID_Accessor->reset();
  resourceMetrics_Accessor.reset();
  temporalMetrics_Accessor.reset();
  maneuverUsage_Accessor.reset();
  operationalEnduranceUsage_Accessor.reset();
}

const uci::type::RequirementMetricsType::RequirementID& RequirementMetricsType::getRequirementID() const {
  return *requirementID_Accessor;
}

uci::type::RequirementMetricsType::RequirementID& RequirementMetricsType::getRequirementID() {
  return *requirementID_Accessor;
}

uci::type::RequirementMetricsType& RequirementMetricsType::setRequirementID(const uci::type::RequirementMetricsType::RequirementID& accessor) {
  if (&accessor != requirementID_Accessor.get()) {
    requirementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MetricsType& RequirementMetricsType::getResourceMetrics_() const {
  if (resourceMetrics_Accessor) {
    return *resourceMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getResourceMetrics(): An attempt was made to get an optional field that was not enabled, call hasResourceMetrics() to determine if it is safe to call getResourceMetrics()");
}

const uci::type::MetricsType& RequirementMetricsType::getResourceMetrics() const {
  return getResourceMetrics_();
}

uci::type::MetricsType& RequirementMetricsType::getResourceMetrics() {
  return getResourceMetrics_();
}

uci::type::RequirementMetricsType& RequirementMetricsType::setResourceMetrics(const uci::type::MetricsType& accessor) {
  enableResourceMetrics();
  if (&accessor != resourceMetrics_Accessor.get()) {
    resourceMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetricsType::hasResourceMetrics() const noexcept {
  return static_cast<bool>(resourceMetrics_Accessor);
}

uci::type::MetricsType& RequirementMetricsType::enableResourceMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::metricsType : type};
  if ((!resourceMetrics_Accessor) || (resourceMetrics_Accessor->getAccessorType() != requestedType)) {
    resourceMetrics_Accessor = MetricsType::create(requestedType);
    if (!resourceMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableResourceMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resourceMetrics_Accessor;
}

uci::type::RequirementMetricsType& RequirementMetricsType::clearResourceMetrics() noexcept {
  resourceMetrics_Accessor.reset();
  return *this;
}

uci::type::TimeWindowType& RequirementMetricsType::getTemporalMetrics_() const {
  if (temporalMetrics_Accessor) {
    return *temporalMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getTemporalMetrics(): An attempt was made to get an optional field that was not enabled, call hasTemporalMetrics() to determine if it is safe to call getTemporalMetrics()");
}

const uci::type::TimeWindowType& RequirementMetricsType::getTemporalMetrics() const {
  return getTemporalMetrics_();
}

uci::type::TimeWindowType& RequirementMetricsType::getTemporalMetrics() {
  return getTemporalMetrics_();
}

uci::type::RequirementMetricsType& RequirementMetricsType::setTemporalMetrics(const uci::type::TimeWindowType& accessor) {
  enableTemporalMetrics();
  if (&accessor != temporalMetrics_Accessor.get()) {
    temporalMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetricsType::hasTemporalMetrics() const noexcept {
  return static_cast<bool>(temporalMetrics_Accessor);
}

uci::type::TimeWindowType& RequirementMetricsType::enableTemporalMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeWindowType : type};
  if ((!temporalMetrics_Accessor) || (temporalMetrics_Accessor->getAccessorType() != requestedType)) {
    temporalMetrics_Accessor = TimeWindowType::create(requestedType);
    if (!temporalMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableTemporalMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *temporalMetrics_Accessor;
}

uci::type::RequirementMetricsType& RequirementMetricsType::clearTemporalMetrics() noexcept {
  temporalMetrics_Accessor.reset();
  return *this;
}

uci::type::OrbitalManeuverDetailsBaseType& RequirementMetricsType::getManeuverUsage_() const {
  if (maneuverUsage_Accessor) {
    return *maneuverUsage_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuverUsage(): An attempt was made to get an optional field that was not enabled, call hasManeuverUsage() to determine if it is safe to call getManeuverUsage()");
}

const uci::type::OrbitalManeuverDetailsBaseType& RequirementMetricsType::getManeuverUsage() const {
  return getManeuverUsage_();
}

uci::type::OrbitalManeuverDetailsBaseType& RequirementMetricsType::getManeuverUsage() {
  return getManeuverUsage_();
}

uci::type::RequirementMetricsType& RequirementMetricsType::setManeuverUsage(const uci::type::OrbitalManeuverDetailsBaseType& accessor) {
  enableManeuverUsage(accessor.getAccessorType());
  if (&accessor != maneuverUsage_Accessor.get()) {
    maneuverUsage_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RequirementMetricsType::hasManeuverUsage() const noexcept {
  return static_cast<bool>(maneuverUsage_Accessor);
}

uci::type::OrbitalManeuverDetailsBaseType& RequirementMetricsType::enableManeuverUsage(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsBaseType : type};
  if ((!maneuverUsage_Accessor) || (maneuverUsage_Accessor->getAccessorType() != requestedType)) {
    maneuverUsage_Accessor = OrbitalManeuverDetailsBaseType::create(requestedType);
    if (!maneuverUsage_Accessor) {
      throw uci::base::UCIException("Error in enableManeuverUsage(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuverUsage_Accessor;
}

uci::type::RequirementMetricsType& RequirementMetricsType::clearManeuverUsage() noexcept {
  maneuverUsage_Accessor.reset();
  return *this;
}

uci::type::EnduranceBaseType& RequirementMetricsType::getOperationalEnduranceUsage_() const {
  if (operationalEnduranceUsage_Accessor) {
    return *operationalEnduranceUsage_Accessor;
  }
  throw uci::base::UCIException("Error in getOperationalEnduranceUsage(): An attempt was made to get an optional field that was not enabled, call hasOperationalEnduranceUsage() to determine if it is safe to call getOperationalEnduranceUsage()");
}

const uci::type::EnduranceBaseType& RequirementMetricsType::getOperationalEnduranceUsage() const {
  return getOperationalEnduranceUsage_();
}

uci::type::EnduranceBaseType& RequirementMetricsType::getOperationalEnduranceUsage() {
  return getOperationalEnduranceUsage_();
}

uci::type::RequirementMetricsType& RequirementMetricsType::setOperationalEnduranceUsage(const uci::type::EnduranceBaseType& accessor) {
  enableOperationalEnduranceUsage(accessor.getAccessorType());
  if (&accessor != operationalEnduranceUsage_Accessor.get()) {
    operationalEnduranceUsage_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RequirementMetricsType::hasOperationalEnduranceUsage() const noexcept {
  return static_cast<bool>(operationalEnduranceUsage_Accessor);
}

uci::type::EnduranceBaseType& RequirementMetricsType::enableOperationalEnduranceUsage(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceBaseType : type};
  if ((!operationalEnduranceUsage_Accessor) || (operationalEnduranceUsage_Accessor->getAccessorType() != requestedType)) {
    operationalEnduranceUsage_Accessor = EnduranceBaseType::create(requestedType);
    if (!operationalEnduranceUsage_Accessor) {
      throw uci::base::UCIException("Error in enableOperationalEnduranceUsage(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operationalEnduranceUsage_Accessor;
}

uci::type::RequirementMetricsType& RequirementMetricsType::clearOperationalEnduranceUsage() noexcept {
  operationalEnduranceUsage_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementMetricsType> RequirementMetricsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementMetricsType : type};
  return (requestedType == uci::type::accessorType::requirementMetricsType) ? boost::make_unique<RequirementMetricsType>() : nullptr;
}

/**  */
namespace RequirementMetricsType_Names {

constexpr const char* Extern_Type_Name{"RequirementMetricsType"};
constexpr const char* RequirementID_Name{"RequirementID"};
constexpr const char* ResourceMetrics_Name{"ResourceMetrics"};
constexpr const char* TemporalMetrics_Name{"TemporalMetrics"};
constexpr const char* ManeuverUsage_Name{"ManeuverUsage"};
constexpr const char* OperationalEnduranceUsage_Name{"OperationalEnduranceUsage"};

} // namespace RequirementMetricsType_Names

void RequirementMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementMetricsType_Names::RequirementID_Name) {
      uci::type::RequirementMetricsType::RequirementID& boundedList = accessor.getRequirementID();
      const uci::type::RequirementMetricsType::RequirementID::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::RequirementInstanceID_ChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsType_Names::ResourceMetrics_Name) {
      MetricsType::deserialize(valueType.second, accessor.enableResourceMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsType_Names::TemporalMetrics_Name) {
      TimeWindowType::deserialize(valueType.second, accessor.enableTemporalMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsType_Names::ManeuverUsage_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableManeuverUsage(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsType_Names::OperationalEnduranceUsage_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOperationalEnduranceUsage(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RequirementMetricsType::serialize(const uci::type::RequirementMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementMetricsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementMetricsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::RequirementMetricsType::RequirementID& boundedList = accessor.getRequirementID();
    for (uci::type::RequirementMetricsType::RequirementID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementInstanceID_ChoiceType::serialize(boundedList.at(i), node, RequirementMetricsType_Names::RequirementID_Name);
    }
  }
  if (accessor.hasResourceMetrics()) {
    MetricsType::serialize(accessor.getResourceMetrics(), node, RequirementMetricsType_Names::ResourceMetrics_Name);
  }
  if (accessor.hasTemporalMetrics()) {
    TimeWindowType::serialize(accessor.getTemporalMetrics(), node, RequirementMetricsType_Names::TemporalMetrics_Name);
  }
  if (accessor.hasManeuverUsage()) {
    OrbitalManeuverDetailsBaseType::serialize(accessor.getManeuverUsage(), node, RequirementMetricsType_Names::ManeuverUsage_Name);
  }
  if (accessor.hasOperationalEnduranceUsage()) {
    EnduranceBaseType::serialize(accessor.getOperationalEnduranceUsage(), node, RequirementMetricsType_Names::OperationalEnduranceUsage_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementMetricsType& RequirementMetricsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementMetricsType>().release());
}

uci::type::RequirementMetricsType& RequirementMetricsType::create(const uci::type::RequirementMetricsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementMetricsType> newAccessor{boost::make_unique<asb_uci::type::RequirementMetricsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementMetricsType::destroy(uci::type::RequirementMetricsType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementMetricsType*>(&accessor);
}

} // namespace type

} // namespace uci

