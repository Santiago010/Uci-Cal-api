/** @file RefuelCapabilityStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RefuelCapabilityStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AvailableFuelType.h"
#include "asb_uci/type/CapabilityStatusBaseType.h"
#include "asb_uci/type/CapabilityStatusType.h"
#include "asb_uci/type/RefuelCapabilityStatusType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AvailableFuelType.h"
#include "uci/type/CapabilityStatusType.h"
#include "uci/type/RefuelCapabilityStatusMDT.h"
#include "uci/type/RefuelCapabilityStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelCapabilityStatusMDT::RefuelCapabilityStatusMDT()
  : capabilityStatus_Accessor{boost::make_unique<CapabilityStatus>(1, SIZE_MAX)} {
}

RefuelCapabilityStatusMDT::~RefuelCapabilityStatusMDT() = default;

void RefuelCapabilityStatusMDT::copy(const uci::type::RefuelCapabilityStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void RefuelCapabilityStatusMDT::copyImpl(const uci::type::RefuelCapabilityStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RefuelCapabilityStatusMDT&>(accessor);
    setCapabilityStatus(*(accessorImpl.capabilityStatus_Accessor));
    if (accessorImpl.fuelRemaining_Accessor) {
      setFuelRemaining(*(accessorImpl.fuelRemaining_Accessor));
    } else {
      fuelRemaining_Accessor.reset();
    }
    if (accessorImpl.refuelCapabilityStatus_Accessor) {
      setRefuelCapabilityStatus(*(accessorImpl.refuelCapabilityStatus_Accessor));
    } else {
      refuelCapabilityStatus_Accessor.reset();
    }
  }
}

void RefuelCapabilityStatusMDT::reset() noexcept {
  CapabilityStatusBaseType::reset();
  capabilityStatus_Accessor->reset();
  fuelRemaining_Accessor.reset();
  refuelCapabilityStatus_Accessor.reset();
}

const uci::type::RefuelCapabilityStatusMDT::CapabilityStatus& RefuelCapabilityStatusMDT::getCapabilityStatus() const {
  return *capabilityStatus_Accessor;
}

uci::type::RefuelCapabilityStatusMDT::CapabilityStatus& RefuelCapabilityStatusMDT::getCapabilityStatus() {
  return *capabilityStatus_Accessor;
}

uci::type::RefuelCapabilityStatusMDT& RefuelCapabilityStatusMDT::setCapabilityStatus(const uci::type::RefuelCapabilityStatusMDT::CapabilityStatus& accessor) {
  if (&accessor != capabilityStatus_Accessor.get()) {
    capabilityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AvailableFuelType& RefuelCapabilityStatusMDT::getFuelRemaining_() const {
  if (fuelRemaining_Accessor) {
    return *fuelRemaining_Accessor;
  }
  throw uci::base::UCIException("Error in getFuelRemaining(): An attempt was made to get an optional field that was not enabled, call hasFuelRemaining() to determine if it is safe to call getFuelRemaining()");
}

const uci::type::AvailableFuelType& RefuelCapabilityStatusMDT::getFuelRemaining() const {
  return getFuelRemaining_();
}

uci::type::AvailableFuelType& RefuelCapabilityStatusMDT::getFuelRemaining() {
  return getFuelRemaining_();
}

uci::type::RefuelCapabilityStatusMDT& RefuelCapabilityStatusMDT::setFuelRemaining(const uci::type::AvailableFuelType& accessor) {
  enableFuelRemaining();
  if (&accessor != fuelRemaining_Accessor.get()) {
    fuelRemaining_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RefuelCapabilityStatusMDT::hasFuelRemaining() const noexcept {
  return static_cast<bool>(fuelRemaining_Accessor);
}

uci::type::AvailableFuelType& RefuelCapabilityStatusMDT::enableFuelRemaining(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::availableFuelType : type};
  if ((!fuelRemaining_Accessor) || (fuelRemaining_Accessor->getAccessorType() != requestedType)) {
    fuelRemaining_Accessor = AvailableFuelType::create(requestedType);
    if (!fuelRemaining_Accessor) {
      throw uci::base::UCIException("Error in enableFuelRemaining(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fuelRemaining_Accessor;
}

uci::type::RefuelCapabilityStatusMDT& RefuelCapabilityStatusMDT::clearFuelRemaining() noexcept {
  fuelRemaining_Accessor.reset();
  return *this;
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusMDT::getRefuelCapabilityStatus_() const {
  if (refuelCapabilityStatus_Accessor) {
    return *refuelCapabilityStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getRefuelCapabilityStatus(): An attempt was made to get an optional field that was not enabled, call hasRefuelCapabilityStatus() to determine if it is safe to call getRefuelCapabilityStatus()");
}

const uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusMDT::getRefuelCapabilityStatus() const {
  return getRefuelCapabilityStatus_();
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusMDT::getRefuelCapabilityStatus() {
  return getRefuelCapabilityStatus_();
}

uci::type::RefuelCapabilityStatusMDT& RefuelCapabilityStatusMDT::setRefuelCapabilityStatus(const uci::type::RefuelCapabilityStatusType& accessor) {
  enableRefuelCapabilityStatus();
  if (&accessor != refuelCapabilityStatus_Accessor.get()) {
    refuelCapabilityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RefuelCapabilityStatusMDT::hasRefuelCapabilityStatus() const noexcept {
  return static_cast<bool>(refuelCapabilityStatus_Accessor);
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusMDT::enableRefuelCapabilityStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelCapabilityStatusType : type};
  if ((!refuelCapabilityStatus_Accessor) || (refuelCapabilityStatus_Accessor->getAccessorType() != requestedType)) {
    refuelCapabilityStatus_Accessor = RefuelCapabilityStatusType::create(requestedType);
    if (!refuelCapabilityStatus_Accessor) {
      throw uci::base::UCIException("Error in enableRefuelCapabilityStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *refuelCapabilityStatus_Accessor;
}

uci::type::RefuelCapabilityStatusMDT& RefuelCapabilityStatusMDT::clearRefuelCapabilityStatus() noexcept {
  refuelCapabilityStatus_Accessor.reset();
  return *this;
}

std::unique_ptr<RefuelCapabilityStatusMDT> RefuelCapabilityStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelCapabilityStatusMDT : type};
  return (requestedType == uci::type::accessorType::refuelCapabilityStatusMDT) ? boost::make_unique<RefuelCapabilityStatusMDT>() : nullptr;
}

/**  */
namespace RefuelCapabilityStatusMDT_Names {

constexpr const char* Extern_Type_Name{"RefuelCapabilityStatusMDT"};
constexpr const char* CapabilityStatus_Name{"CapabilityStatus"};
constexpr const char* FuelRemaining_Name{"FuelRemaining"};
constexpr const char* RefuelCapabilityStatus_Name{"RefuelCapabilityStatus"};

} // namespace RefuelCapabilityStatusMDT_Names

void RefuelCapabilityStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelCapabilityStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelCapabilityStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelCapabilityStatusMDT_Names::CapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RefuelCapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
        const uci::type::RefuelCapabilityStatusMDT::CapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityStatusMDT_Names::FuelRemaining_Name) {
      AvailableFuelType::deserialize(valueType.second, accessor.enableFuelRemaining(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RefuelCapabilityStatusMDT_Names::RefuelCapabilityStatus_Name) {
      RefuelCapabilityStatusType::deserialize(valueType.second, accessor.enableRefuelCapabilityStatus(), nodeName, nsPrefix);
    }
  }
  CapabilityStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RefuelCapabilityStatusMDT::serialize(const uci::type::RefuelCapabilityStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelCapabilityStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelCapabilityStatusMDT_Names::Extern_Type_Name);
  }
  CapabilityStatusBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::RefuelCapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
    for (uci::type::RefuelCapabilityStatusMDT::CapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityStatusType::serialize(boundedList.at(i), node, RefuelCapabilityStatusMDT_Names::CapabilityStatus_Name);
    }
  }
  if (accessor.hasFuelRemaining()) {
    AvailableFuelType::serialize(accessor.getFuelRemaining(), node, RefuelCapabilityStatusMDT_Names::FuelRemaining_Name);
  }
  if (accessor.hasRefuelCapabilityStatus()) {
    RefuelCapabilityStatusType::serialize(accessor.getRefuelCapabilityStatus(), node, RefuelCapabilityStatusMDT_Names::RefuelCapabilityStatus_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelCapabilityStatusMDT& RefuelCapabilityStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelCapabilityStatusMDT>().release());
}

uci::type::RefuelCapabilityStatusMDT& RefuelCapabilityStatusMDT::create(const uci::type::RefuelCapabilityStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelCapabilityStatusMDT> newAccessor{boost::make_unique<asb_uci::type::RefuelCapabilityStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelCapabilityStatusMDT::destroy(uci::type::RefuelCapabilityStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelCapabilityStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

