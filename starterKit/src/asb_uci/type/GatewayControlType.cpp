/** @file GatewayControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GatewayControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayControlType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayControlType::GatewayControlType() = default;

GatewayControlType::~GatewayControlType() = default;

void GatewayControlType::copy(const uci::type::GatewayControlType& accessor) {
  copyImpl(accessor, false);
}

void GatewayControlType::copyImpl(const uci::type::GatewayControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GatewayControlType&>(accessor);
    if (accessorImpl.hasInhibitTransmit()) {
      setInhibitTransmit(accessorImpl.getInhibitTransmit());
    } else {
      clearInhibitTransmit();
    }
    if (accessorImpl.hasInhibitReceive()) {
      setInhibitReceive(accessorImpl.getInhibitReceive());
    } else {
      clearInhibitReceive();
    }
    if (accessorImpl.hasInhibitRelay()) {
      setInhibitRelay(accessorImpl.getInhibitRelay());
    } else {
      clearInhibitRelay();
    }
    if (accessorImpl.hasInstantaneousReceiveBandwidth()) {
      setInstantaneousReceiveBandwidth(accessorImpl.getInstantaneousReceiveBandwidth());
    } else {
      clearInstantaneousReceiveBandwidth();
    }
    if (accessorImpl.hasInstantaneousTransmitBandwidth()) {
      setInstantaneousTransmitBandwidth(accessorImpl.getInstantaneousTransmitBandwidth());
    } else {
      clearInstantaneousTransmitBandwidth();
    }
  }
}

void GatewayControlType::reset() noexcept {
  clearInhibitTransmit();
  clearInhibitReceive();
  clearInhibitRelay();
  clearInstantaneousReceiveBandwidth();
  clearInstantaneousTransmitBandwidth();
}

xs::Boolean GatewayControlType::getInhibitTransmit() const {
  if (inhibitTransmit_Accessor) {
    return *inhibitTransmit_Accessor;
  }
  throw uci::base::UCIException("Error in getInhibitTransmit(): An attempt was made to get an optional field that was not enabled, call hasInhibitTransmit() to determine if it is safe to call getInhibitTransmit()");
}

uci::type::GatewayControlType& GatewayControlType::setInhibitTransmit(xs::Boolean value) {
  inhibitTransmit_Accessor = value;
  return *this;
}

bool GatewayControlType::hasInhibitTransmit() const noexcept {
  return inhibitTransmit_Accessor.has_value();
}

uci::type::GatewayControlType& GatewayControlType::clearInhibitTransmit() noexcept {
  inhibitTransmit_Accessor.reset();
  return *this;
}

xs::Boolean GatewayControlType::getInhibitReceive() const {
  if (inhibitReceive_Accessor) {
    return *inhibitReceive_Accessor;
  }
  throw uci::base::UCIException("Error in getInhibitReceive(): An attempt was made to get an optional field that was not enabled, call hasInhibitReceive() to determine if it is safe to call getInhibitReceive()");
}

uci::type::GatewayControlType& GatewayControlType::setInhibitReceive(xs::Boolean value) {
  inhibitReceive_Accessor = value;
  return *this;
}

bool GatewayControlType::hasInhibitReceive() const noexcept {
  return inhibitReceive_Accessor.has_value();
}

uci::type::GatewayControlType& GatewayControlType::clearInhibitReceive() noexcept {
  inhibitReceive_Accessor.reset();
  return *this;
}

xs::Boolean GatewayControlType::getInhibitRelay() const {
  if (inhibitRelay_Accessor) {
    return *inhibitRelay_Accessor;
  }
  throw uci::base::UCIException("Error in getInhibitRelay(): An attempt was made to get an optional field that was not enabled, call hasInhibitRelay() to determine if it is safe to call getInhibitRelay()");
}

uci::type::GatewayControlType& GatewayControlType::setInhibitRelay(xs::Boolean value) {
  inhibitRelay_Accessor = value;
  return *this;
}

bool GatewayControlType::hasInhibitRelay() const noexcept {
  return inhibitRelay_Accessor.has_value();
}

uci::type::GatewayControlType& GatewayControlType::clearInhibitRelay() noexcept {
  inhibitRelay_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue GatewayControlType::getInstantaneousReceiveBandwidth() const {
  if (instantaneousReceiveBandwidth_Accessor) {
    return *instantaneousReceiveBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getInstantaneousReceiveBandwidth(): An attempt was made to get an optional field that was not enabled, call hasInstantaneousReceiveBandwidth() to determine if it is safe to call getInstantaneousReceiveBandwidth()");
}

uci::type::GatewayControlType& GatewayControlType::setInstantaneousReceiveBandwidth(uci::type::FrequencyTypeValue value) {
  instantaneousReceiveBandwidth_Accessor = value;
  return *this;
}

bool GatewayControlType::hasInstantaneousReceiveBandwidth() const noexcept {
  return instantaneousReceiveBandwidth_Accessor.has_value();
}

uci::type::GatewayControlType& GatewayControlType::clearInstantaneousReceiveBandwidth() noexcept {
  instantaneousReceiveBandwidth_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue GatewayControlType::getInstantaneousTransmitBandwidth() const {
  if (instantaneousTransmitBandwidth_Accessor) {
    return *instantaneousTransmitBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getInstantaneousTransmitBandwidth(): An attempt was made to get an optional field that was not enabled, call hasInstantaneousTransmitBandwidth() to determine if it is safe to call getInstantaneousTransmitBandwidth()");
}

uci::type::GatewayControlType& GatewayControlType::setInstantaneousTransmitBandwidth(uci::type::FrequencyTypeValue value) {
  instantaneousTransmitBandwidth_Accessor = value;
  return *this;
}

bool GatewayControlType::hasInstantaneousTransmitBandwidth() const noexcept {
  return instantaneousTransmitBandwidth_Accessor.has_value();
}

uci::type::GatewayControlType& GatewayControlType::clearInstantaneousTransmitBandwidth() noexcept {
  instantaneousTransmitBandwidth_Accessor.reset();
  return *this;
}

std::unique_ptr<GatewayControlType> GatewayControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayControlType : type};
  return (requestedType == uci::type::accessorType::gatewayControlType) ? boost::make_unique<GatewayControlType>() : nullptr;
}

/**  */
namespace GatewayControlType_Names {

constexpr const char* Extern_Type_Name{"GatewayControlType"};
constexpr const char* InhibitTransmit_Name{"InhibitTransmit"};
constexpr const char* InhibitReceive_Name{"InhibitReceive"};
constexpr const char* InhibitRelay_Name{"InhibitRelay"};
constexpr const char* InstantaneousReceiveBandwidth_Name{"InstantaneousReceiveBandwidth"};
constexpr const char* InstantaneousTransmitBandwidth_Name{"InstantaneousTransmitBandwidth"};

} // namespace GatewayControlType_Names

void GatewayControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayControlType_Names::InhibitTransmit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInhibitTransmit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayControlType_Names::InhibitReceive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInhibitReceive(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayControlType_Names::InhibitRelay_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInhibitRelay(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayControlType_Names::InstantaneousReceiveBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstantaneousReceiveBandwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayControlType_Names::InstantaneousTransmitBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstantaneousTransmitBandwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string GatewayControlType::serialize(const uci::type::GatewayControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayControlType_Names::Extern_Type_Name);
  }
  if (accessor.hasInhibitTransmit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInhibitTransmit(), node, GatewayControlType_Names::InhibitTransmit_Name);
  }
  if (accessor.hasInhibitReceive()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInhibitReceive(), node, GatewayControlType_Names::InhibitReceive_Name);
  }
  if (accessor.hasInhibitRelay()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInhibitRelay(), node, GatewayControlType_Names::InhibitRelay_Name);
  }
  if (accessor.hasInstantaneousReceiveBandwidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInstantaneousReceiveBandwidth(), node, GatewayControlType_Names::InstantaneousReceiveBandwidth_Name);
  }
  if (accessor.hasInstantaneousTransmitBandwidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInstantaneousTransmitBandwidth(), node, GatewayControlType_Names::InstantaneousTransmitBandwidth_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayControlType& GatewayControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayControlType>().release());
}

uci::type::GatewayControlType& GatewayControlType::create(const uci::type::GatewayControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayControlType> newAccessor{boost::make_unique<asb_uci::type::GatewayControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayControlType::destroy(uci::type::GatewayControlType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayControlType*>(&accessor);
}

} // namespace type

} // namespace uci

