/** @file ServiceStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ServiceStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ServiceID_Type.h"
#include "../../../include/asb_uci/type/ServiceSettingType.h"
#include "../../../include/asb_uci/type/ServiceStateEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceSettingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceStatusMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ServiceStatusMDT::ServiceStatusMDT()
  : serviceID_Accessor{boost::make_unique<ServiceID_Type>()},
    serviceState_Accessor{boost::make_unique<ServiceStateEnum>()},
    enabledSettings_Accessor{boost::make_unique<EnabledSettings>(0, SIZE_MAX)},
    supportedSettings_Accessor{boost::make_unique<SupportedSettings>(0, SIZE_MAX)} {
}



ServiceStatusMDT::~ServiceStatusMDT() = default;

void ServiceStatusMDT::copy(const uci::type::ServiceStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void ServiceStatusMDT::copyImpl(const uci::type::ServiceStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ServiceStatusMDT&>(accessor);
    setServiceID(*(accessorImpl.serviceID_Accessor));
    setTimeUp(accessorImpl.timeUp_Accessor);
    setServiceState(*(accessorImpl.serviceState_Accessor));
    if (accessorImpl.statusDetail_Accessor) {
      setStatusDetail(*(accessorImpl.statusDetail_Accessor));
    } else {
      statusDetail_Accessor.reset();
    }
    setEnabledSettings(*(accessorImpl.enabledSettings_Accessor));
    setSupportedSettings(*(accessorImpl.supportedSettings_Accessor));
  }
}

void ServiceStatusMDT::reset() noexcept {
  serviceID_Accessor->reset();
  timeUp_Accessor = 0;
  serviceState_Accessor->reset();
  statusDetail_Accessor.reset();
  enabledSettings_Accessor->reset();
  supportedSettings_Accessor->reset();
}

const uci::type::ServiceID_Type& ServiceStatusMDT::getServiceID() const {
  return *serviceID_Accessor;
}

uci::type::ServiceID_Type& ServiceStatusMDT::getServiceID() {
  return *serviceID_Accessor;
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue ServiceStatusMDT::getTimeUp() const {
  return timeUp_Accessor;
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setTimeUp(uci::type::DurationTypeValue value) {
  timeUp_Accessor = value;
  return *this;
}


const uci::type::ServiceStateEnum& ServiceStatusMDT::getServiceState() const {
  return *serviceState_Accessor;
}

uci::type::ServiceStateEnum& ServiceStatusMDT::getServiceState() {
  return *serviceState_Accessor;
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setServiceState(const uci::type::ServiceStateEnum& accessor) {
  if (&accessor != serviceState_Accessor.get()) {
    serviceState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setServiceState(uci::type::ServiceStateEnum::EnumerationItem value) {
  serviceState_Accessor->setValue(value);
  return *this;
}


uci::type::VisibleString256Type& ServiceStatusMDT::getStatusDetail_() const {
  if (statusDetail_Accessor) {
    // return *statusDetail_Accessor;
  }
  throw uci::base::UCIException("Error in getStatusDetail(): An attempt was made to get an optional field that was not enabled, call hasStatusDetail() to determine if it is safe to call getStatusDetail()");
}

const uci::type::VisibleString256Type& ServiceStatusMDT::getStatusDetail() const {
  return getStatusDetail_();
}

uci::type::VisibleString256Type& ServiceStatusMDT::getStatusDetail() {
  return getStatusDetail_();
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setStatusDetail(const uci::type::VisibleString256Type& value) {
  return setStatusDetail(value.c_str());
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setStatusDetail(const std::string& value) {
  return setStatusDetail(value.c_str());
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setStatusDetail(const char* value) {
  enableStatusDetail().setStringValue(value);
  return *this;
}

bool ServiceStatusMDT::hasStatusDetail() const noexcept {
  return static_cast<bool>(statusDetail_Accessor);
}

uci::type::VisibleString256Type& ServiceStatusMDT::enableStatusDetail(uci::base::accessorType::AccessorType type) {
  if (!statusDetail_Accessor) {
    // statusDetail_Accessor = VisibleString256Type::create(type);
  }
  // return *statusDetail_Accessor;
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::clearStatusDetail() noexcept {
  statusDetail_Accessor.reset();
  return *this;
}

const uci::type::ServiceStatusMDT::EnabledSettings& ServiceStatusMDT::getEnabledSettings() const {
  return *enabledSettings_Accessor;
}

uci::type::ServiceStatusMDT::EnabledSettings& ServiceStatusMDT::getEnabledSettings() {
  return *enabledSettings_Accessor;
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setEnabledSettings(const uci::type::ServiceStatusMDT::EnabledSettings& accessor) {
  if (&accessor != enabledSettings_Accessor.get()) {
    enabledSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ServiceStatusMDT::SupportedSettings& ServiceStatusMDT::getSupportedSettings() const {
  return *supportedSettings_Accessor;
}

uci::type::ServiceStatusMDT::SupportedSettings& ServiceStatusMDT::getSupportedSettings() {
  return *supportedSettings_Accessor;
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::setSupportedSettings(const uci::type::ServiceStatusMDT::SupportedSettings& accessor) {
  if (&accessor != supportedSettings_Accessor.get()) {
    supportedSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ServiceStatusMDT> ServiceStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceStatusMDT : type};
  return (requestedType == uci::type::accessorType::serviceStatusMDT) ? boost::make_unique<ServiceStatusMDT>() : nullptr;
}

/**  */
namespace ServiceStatusMDT_Names {

constexpr const char* Extern_Type_Name{"ServiceStatusMDT"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* TimeUp_Name{"TimeUp"};
constexpr const char* ServiceState_Name{"ServiceState"};
constexpr const char* StatusDetail_Name{"StatusDetail"};
constexpr const char* EnabledSettings_Name{"EnabledSettings"};
constexpr const char* SupportedSettings_Name{"SupportedSettings"};

} // namespace ServiceStatusMDT_Names

void ServiceStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ServiceStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ServiceStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ServiceStatusMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.getServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ServiceStatusMDT_Names::TimeUp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeUp(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ServiceStatusMDT_Names::ServiceState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getServiceState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ServiceStatusMDT_Names::StatusDetail_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStatusDetail(*value);
      }
    } else if (valueType.first == nsPrefix + ServiceStatusMDT_Names::EnabledSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ServiceStatusMDT::EnabledSettings& boundedList = accessor.getEnabledSettings();
        const uci::type::ServiceStatusMDT::EnabledSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ServiceSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ServiceStatusMDT_Names::SupportedSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ServiceStatusMDT::SupportedSettings& boundedList = accessor.getSupportedSettings();
        const uci::type::ServiceStatusMDT::SupportedSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ServiceSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ServiceStatusMDT::serialize(const uci::type::ServiceStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ServiceStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ServiceStatusMDT_Names::Extern_Type_Name);
  }
  ServiceID_Type::serialize(accessor.getServiceID(), node, ServiceStatusMDT_Names::ServiceID_Name);
  asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeUp(), node, ServiceStatusMDT_Names::TimeUp_Name);
  ServiceStateEnum::serialize(accessor.getServiceState(), node, ServiceStatusMDT_Names::ServiceState_Name, false);
  if (accessor.hasStatusDetail()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getStatusDetail(), node, ServiceStatusMDT_Names::StatusDetail_Name);
  }
  {
    const uci::type::ServiceStatusMDT::EnabledSettings& boundedList = accessor.getEnabledSettings();
    for (uci::type::ServiceStatusMDT::EnabledSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ServiceSettingType::serialize(boundedList.at(i), node, ServiceStatusMDT_Names::EnabledSettings_Name);
    }
  }
  {
    const uci::type::ServiceStatusMDT::SupportedSettings& boundedList = accessor.getSupportedSettings();
    for (uci::type::ServiceStatusMDT::SupportedSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ServiceSettingType::serialize(boundedList.at(i), node, ServiceStatusMDT_Names::SupportedSettings_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ServiceStatusMDT& ServiceStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ServiceStatusMDT>().release());
}

uci::type::ServiceStatusMDT& ServiceStatusMDT::create(const uci::type::ServiceStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ServiceStatusMDT> newAccessor{boost::make_unique<asb_uci::type::ServiceStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ServiceStatusMDT::destroy(uci::type::ServiceStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ServiceStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

