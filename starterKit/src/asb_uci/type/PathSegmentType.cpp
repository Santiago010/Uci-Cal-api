/** @file PathSegmentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PathSegmentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CivilPathTerminatorType.h"
#include "asb_uci/type/ClimbType.h"
#include "asb_uci/type/ConditionalPathSegmentType.h"
#include "asb_uci/type/EndPointType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/InertialStateRelativeType.h"
#include "asb_uci/type/NextPathSegmentType.h"
#include "asb_uci/type/PathSegmentSourceEnum.h"
#include "asb_uci/type/PathSegmentSpeedType.h"
#include "asb_uci/type/RemarksType.h"
#include "asb_uci/type/SegmentID_Type.h"
#include "asb_uci/type/TimeWindowType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AccelerationType.h"
#include "uci/type/AngleType.h"
#include "uci/type/CivilPathTerminatorType.h"
#include "uci/type/ClimbType.h"
#include "uci/type/ConditionalPathSegmentType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/EndPointType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/InertialStateRelativeType.h"
#include "uci/type/NextPathSegmentType.h"
#include "uci/type/PathSegmentSourceEnum.h"
#include "uci/type/PathSegmentSpeedType.h"
#include "uci/type/PathSegmentType.h"
#include "uci/type/RemarksType.h"
#include "uci/type/SegmentID_Type.h"
#include "uci/type/TimeWindowType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PathSegmentType::PathSegmentType()
  : pathSegmentID_Accessor{boost::make_unique<SegmentID_Type>()},
    source_Accessor{boost::make_unique<PathSegmentSourceEnum>()},
    endPoint_Accessor{boost::make_unique<EndPointType>()},
    conditionalPathSegment_Accessor{boost::make_unique<ConditionalPathSegment>(0, SIZE_MAX)},
    inertialState_Accessor{boost::make_unique<InertialState>(0, SIZE_MAX)} {
}

PathSegmentType::~PathSegmentType() = default;

void PathSegmentType::copy(const uci::type::PathSegmentType& accessor) {
  copyImpl(accessor, false);
}

void PathSegmentType::copyImpl(const uci::type::PathSegmentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PathSegmentType&>(accessor);
    setPathSegmentID(*(accessorImpl.pathSegmentID_Accessor));
    setSource(*(accessorImpl.source_Accessor));
    setEndPoint(*(accessorImpl.endPoint_Accessor));
    if (accessorImpl.hasLocked()) {
      setLocked(accessorImpl.getLocked());
    } else {
      clearLocked();
    }
    if (accessorImpl.hasModified()) {
      setModified(accessorImpl.getModified());
    } else {
      clearModified();
    }
    if (accessorImpl.speed_Accessor) {
      setSpeed(*(accessorImpl.speed_Accessor));
    } else {
      speed_Accessor.reset();
    }
    if (accessorImpl.civilPathTerminator_Accessor) {
      setCivilPathTerminator(*(accessorImpl.civilPathTerminator_Accessor));
    } else {
      civilPathTerminator_Accessor.reset();
    }
    if (accessorImpl.climb_Accessor) {
      setClimb(*(accessorImpl.climb_Accessor));
    } else {
      climb_Accessor.reset();
    }
    if (accessorImpl.hasMaximumRoll()) {
      setMaximumRoll(accessorImpl.getMaximumRoll());
    } else {
      clearMaximumRoll();
    }
    if (accessorImpl.hasAcceleration()) {
      setAcceleration(accessorImpl.getAcceleration());
    } else {
      clearAcceleration();
    }
    if (accessorImpl.nextPathSegment_Accessor) {
      setNextPathSegment(*(accessorImpl.nextPathSegment_Accessor));
    } else {
      nextPathSegment_Accessor.reset();
    }
    setConditionalPathSegment(*(accessorImpl.conditionalPathSegment_Accessor));
    setInertialState(*(accessorImpl.inertialState_Accessor));
    if (accessorImpl.requiredTimeOfArrival_Accessor) {
      setRequiredTimeOfArrival(*(accessorImpl.requiredTimeOfArrival_Accessor));
    } else {
      requiredTimeOfArrival_Accessor.reset();
    }
    if (accessorImpl.remarks_Accessor) {
      setRemarks(*(accessorImpl.remarks_Accessor));
    } else {
      remarks_Accessor.reset();
    }
    if (accessorImpl.hasRequiredNavigationPerformanceInMeters()) {
      setRequiredNavigationPerformanceInMeters(accessorImpl.getRequiredNavigationPerformanceInMeters());
    } else {
      clearRequiredNavigationPerformanceInMeters();
    }
    if (accessorImpl.fix_Identifier_Accessor) {
      setFix_Identifier(*(accessorImpl.fix_Identifier_Accessor));
    } else {
      fix_Identifier_Accessor.reset();
    }
  }
}

void PathSegmentType::reset() noexcept {
  pathSegmentID_Accessor->reset();
  source_Accessor->reset();
  endPoint_Accessor->reset();
  clearLocked();
  clearModified();
  speed_Accessor.reset();
  civilPathTerminator_Accessor.reset();
  climb_Accessor.reset();
  clearMaximumRoll();
  clearAcceleration();
  nextPathSegment_Accessor.reset();
  conditionalPathSegment_Accessor->reset();
  inertialState_Accessor->reset();
  requiredTimeOfArrival_Accessor.reset();
  remarks_Accessor.reset();
  clearRequiredNavigationPerformanceInMeters();
  fix_Identifier_Accessor.reset();
}

const uci::type::SegmentID_Type& PathSegmentType::getPathSegmentID() const {
  return *pathSegmentID_Accessor;
}

uci::type::SegmentID_Type& PathSegmentType::getPathSegmentID() {
  return *pathSegmentID_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::setPathSegmentID(const uci::type::SegmentID_Type& accessor) {
  if (&accessor != pathSegmentID_Accessor.get()) {
    pathSegmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathSegmentSourceEnum& PathSegmentType::getSource() const {
  return *source_Accessor;
}

uci::type::PathSegmentSourceEnum& PathSegmentType::getSource() {
  return *source_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::setSource(const uci::type::PathSegmentSourceEnum& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PathSegmentType& PathSegmentType::setSource(uci::type::PathSegmentSourceEnum::EnumerationItem value) {
  source_Accessor->setValue(value);
  return *this;
}


const uci::type::EndPointType& PathSegmentType::getEndPoint() const {
  return *endPoint_Accessor;
}

uci::type::EndPointType& PathSegmentType::getEndPoint() {
  return *endPoint_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::setEndPoint(const uci::type::EndPointType& accessor) {
  if (&accessor != endPoint_Accessor.get()) {
    endPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean PathSegmentType::getLocked() const {
  if (locked_Accessor) {
    return *locked_Accessor;
  }
  throw uci::base::UCIException("Error in getLocked(): An attempt was made to get an optional field that was not enabled, call hasLocked() to determine if it is safe to call getLocked()");
}

uci::type::PathSegmentType& PathSegmentType::setLocked(xs::Boolean value) {
  locked_Accessor = value;
  return *this;
}

bool PathSegmentType::hasLocked() const noexcept {
  return locked_Accessor.has_value();
}

uci::type::PathSegmentType& PathSegmentType::clearLocked() noexcept {
  locked_Accessor.reset();
  return *this;
}

xs::Boolean PathSegmentType::getModified() const {
  if (modified_Accessor) {
    return *modified_Accessor;
  }
  throw uci::base::UCIException("Error in getModified(): An attempt was made to get an optional field that was not enabled, call hasModified() to determine if it is safe to call getModified()");
}

uci::type::PathSegmentType& PathSegmentType::setModified(xs::Boolean value) {
  modified_Accessor = value;
  return *this;
}

bool PathSegmentType::hasModified() const noexcept {
  return modified_Accessor.has_value();
}

uci::type::PathSegmentType& PathSegmentType::clearModified() noexcept {
  modified_Accessor.reset();
  return *this;
}

uci::type::PathSegmentSpeedType& PathSegmentType::getSpeed_() const {
  if (speed_Accessor) {
    return *speed_Accessor;
  }
  throw uci::base::UCIException("Error in getSpeed(): An attempt was made to get an optional field that was not enabled, call hasSpeed() to determine if it is safe to call getSpeed()");
}

const uci::type::PathSegmentSpeedType& PathSegmentType::getSpeed() const {
  return getSpeed_();
}

uci::type::PathSegmentSpeedType& PathSegmentType::getSpeed() {
  return getSpeed_();
}

uci::type::PathSegmentType& PathSegmentType::setSpeed(const uci::type::PathSegmentSpeedType& accessor) {
  enableSpeed();
  if (&accessor != speed_Accessor.get()) {
    speed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentType::hasSpeed() const noexcept {
  return static_cast<bool>(speed_Accessor);
}

uci::type::PathSegmentSpeedType& PathSegmentType::enableSpeed(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathSegmentSpeedType : type};
  if ((!speed_Accessor) || (speed_Accessor->getAccessorType() != requestedType)) {
    speed_Accessor = PathSegmentSpeedType::create(requestedType);
    if (!speed_Accessor) {
      throw uci::base::UCIException("Error in enableSpeed(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *speed_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::clearSpeed() noexcept {
  speed_Accessor.reset();
  return *this;
}

uci::type::CivilPathTerminatorType& PathSegmentType::getCivilPathTerminator_() const {
  if (civilPathTerminator_Accessor) {
    return *civilPathTerminator_Accessor;
  }
  throw uci::base::UCIException("Error in getCivilPathTerminator(): An attempt was made to get an optional field that was not enabled, call hasCivilPathTerminator() to determine if it is safe to call getCivilPathTerminator()");
}

const uci::type::CivilPathTerminatorType& PathSegmentType::getCivilPathTerminator() const {
  return getCivilPathTerminator_();
}

uci::type::CivilPathTerminatorType& PathSegmentType::getCivilPathTerminator() {
  return getCivilPathTerminator_();
}

uci::type::PathSegmentType& PathSegmentType::setCivilPathTerminator(const uci::type::CivilPathTerminatorType& accessor) {
  enableCivilPathTerminator();
  if (&accessor != civilPathTerminator_Accessor.get()) {
    civilPathTerminator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentType::hasCivilPathTerminator() const noexcept {
  return static_cast<bool>(civilPathTerminator_Accessor);
}

uci::type::CivilPathTerminatorType& PathSegmentType::enableCivilPathTerminator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::civilPathTerminatorType : type};
  if ((!civilPathTerminator_Accessor) || (civilPathTerminator_Accessor->getAccessorType() != requestedType)) {
    civilPathTerminator_Accessor = CivilPathTerminatorType::create(requestedType);
    if (!civilPathTerminator_Accessor) {
      throw uci::base::UCIException("Error in enableCivilPathTerminator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *civilPathTerminator_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::clearCivilPathTerminator() noexcept {
  civilPathTerminator_Accessor.reset();
  return *this;
}

uci::type::ClimbType& PathSegmentType::getClimb_() const {
  if (climb_Accessor) {
    return *climb_Accessor;
  }
  throw uci::base::UCIException("Error in getClimb(): An attempt was made to get an optional field that was not enabled, call hasClimb() to determine if it is safe to call getClimb()");
}

const uci::type::ClimbType& PathSegmentType::getClimb() const {
  return getClimb_();
}

uci::type::ClimbType& PathSegmentType::getClimb() {
  return getClimb_();
}

uci::type::PathSegmentType& PathSegmentType::setClimb(const uci::type::ClimbType& accessor) {
  enableClimb();
  if (&accessor != climb_Accessor.get()) {
    climb_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentType::hasClimb() const noexcept {
  return static_cast<bool>(climb_Accessor);
}

uci::type::ClimbType& PathSegmentType::enableClimb(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::climbType : type};
  if ((!climb_Accessor) || (climb_Accessor->getAccessorType() != requestedType)) {
    climb_Accessor = ClimbType::create(requestedType);
    if (!climb_Accessor) {
      throw uci::base::UCIException("Error in enableClimb(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *climb_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::clearClimb() noexcept {
  climb_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue PathSegmentType::getMaximumRoll() const {
  if (maximumRoll_Accessor) {
    return *maximumRoll_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumRoll(): An attempt was made to get an optional field that was not enabled, call hasMaximumRoll() to determine if it is safe to call getMaximumRoll()");
}

uci::type::PathSegmentType& PathSegmentType::setMaximumRoll(uci::type::AngleTypeValue value) {
  maximumRoll_Accessor = value;
  return *this;
}

bool PathSegmentType::hasMaximumRoll() const noexcept {
  return maximumRoll_Accessor.has_value();
}

uci::type::PathSegmentType& PathSegmentType::clearMaximumRoll() noexcept {
  maximumRoll_Accessor.reset();
  return *this;
}

uci::type::AccelerationTypeValue PathSegmentType::getAcceleration() const {
  if (acceleration_Accessor) {
    return *acceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getAcceleration(): An attempt was made to get an optional field that was not enabled, call hasAcceleration() to determine if it is safe to call getAcceleration()");
}

uci::type::PathSegmentType& PathSegmentType::setAcceleration(uci::type::AccelerationTypeValue value) {
  acceleration_Accessor = value;
  return *this;
}

bool PathSegmentType::hasAcceleration() const noexcept {
  return acceleration_Accessor.has_value();
}

uci::type::PathSegmentType& PathSegmentType::clearAcceleration() noexcept {
  acceleration_Accessor.reset();
  return *this;
}

uci::type::NextPathSegmentType& PathSegmentType::getNextPathSegment_() const {
  if (nextPathSegment_Accessor) {
    return *nextPathSegment_Accessor;
  }
  throw uci::base::UCIException("Error in getNextPathSegment(): An attempt was made to get an optional field that was not enabled, call hasNextPathSegment() to determine if it is safe to call getNextPathSegment()");
}

const uci::type::NextPathSegmentType& PathSegmentType::getNextPathSegment() const {
  return getNextPathSegment_();
}

uci::type::NextPathSegmentType& PathSegmentType::getNextPathSegment() {
  return getNextPathSegment_();
}

uci::type::PathSegmentType& PathSegmentType::setNextPathSegment(const uci::type::NextPathSegmentType& accessor) {
  enableNextPathSegment();
  if (&accessor != nextPathSegment_Accessor.get()) {
    nextPathSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentType::hasNextPathSegment() const noexcept {
  return static_cast<bool>(nextPathSegment_Accessor);
}

uci::type::NextPathSegmentType& PathSegmentType::enableNextPathSegment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nextPathSegmentType : type};
  if ((!nextPathSegment_Accessor) || (nextPathSegment_Accessor->getAccessorType() != requestedType)) {
    nextPathSegment_Accessor = NextPathSegmentType::create(requestedType);
    if (!nextPathSegment_Accessor) {
      throw uci::base::UCIException("Error in enableNextPathSegment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nextPathSegment_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::clearNextPathSegment() noexcept {
  nextPathSegment_Accessor.reset();
  return *this;
}

const uci::type::PathSegmentType::ConditionalPathSegment& PathSegmentType::getConditionalPathSegment() const {
  return *conditionalPathSegment_Accessor;
}

uci::type::PathSegmentType::ConditionalPathSegment& PathSegmentType::getConditionalPathSegment() {
  return *conditionalPathSegment_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::setConditionalPathSegment(const uci::type::PathSegmentType::ConditionalPathSegment& accessor) {
  if (&accessor != conditionalPathSegment_Accessor.get()) {
    conditionalPathSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathSegmentType::InertialState& PathSegmentType::getInertialState() const {
  return *inertialState_Accessor;
}

uci::type::PathSegmentType::InertialState& PathSegmentType::getInertialState() {
  return *inertialState_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::setInertialState(const uci::type::PathSegmentType::InertialState& accessor) {
  if (&accessor != inertialState_Accessor.get()) {
    inertialState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TimeWindowType& PathSegmentType::getRequiredTimeOfArrival_() const {
  if (requiredTimeOfArrival_Accessor) {
    return *requiredTimeOfArrival_Accessor;
  }
  throw uci::base::UCIException("Error in getRequiredTimeOfArrival(): An attempt was made to get an optional field that was not enabled, call hasRequiredTimeOfArrival() to determine if it is safe to call getRequiredTimeOfArrival()");
}

const uci::type::TimeWindowType& PathSegmentType::getRequiredTimeOfArrival() const {
  return getRequiredTimeOfArrival_();
}

uci::type::TimeWindowType& PathSegmentType::getRequiredTimeOfArrival() {
  return getRequiredTimeOfArrival_();
}

uci::type::PathSegmentType& PathSegmentType::setRequiredTimeOfArrival(const uci::type::TimeWindowType& accessor) {
  enableRequiredTimeOfArrival();
  if (&accessor != requiredTimeOfArrival_Accessor.get()) {
    requiredTimeOfArrival_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentType::hasRequiredTimeOfArrival() const noexcept {
  return static_cast<bool>(requiredTimeOfArrival_Accessor);
}

uci::type::TimeWindowType& PathSegmentType::enableRequiredTimeOfArrival(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeWindowType : type};
  if ((!requiredTimeOfArrival_Accessor) || (requiredTimeOfArrival_Accessor->getAccessorType() != requestedType)) {
    requiredTimeOfArrival_Accessor = TimeWindowType::create(requestedType);
    if (!requiredTimeOfArrival_Accessor) {
      throw uci::base::UCIException("Error in enableRequiredTimeOfArrival(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requiredTimeOfArrival_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::clearRequiredTimeOfArrival() noexcept {
  requiredTimeOfArrival_Accessor.reset();
  return *this;
}

uci::type::RemarksType& PathSegmentType::getRemarks_() const {
  if (remarks_Accessor) {
    return *remarks_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarks(): An attempt was made to get an optional field that was not enabled, call hasRemarks() to determine if it is safe to call getRemarks()");
}

const uci::type::RemarksType& PathSegmentType::getRemarks() const {
  return getRemarks_();
}

uci::type::RemarksType& PathSegmentType::getRemarks() {
  return getRemarks_();
}

uci::type::PathSegmentType& PathSegmentType::setRemarks(const uci::type::RemarksType& accessor) {
  enableRemarks();
  if (&accessor != remarks_Accessor.get()) {
    remarks_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentType::hasRemarks() const noexcept {
  return static_cast<bool>(remarks_Accessor);
}

uci::type::RemarksType& PathSegmentType::enableRemarks(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remarksType : type};
  if ((!remarks_Accessor) || (remarks_Accessor->getAccessorType() != requestedType)) {
    remarks_Accessor = RemarksType::create(requestedType);
    if (!remarks_Accessor) {
      throw uci::base::UCIException("Error in enableRemarks(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remarks_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::clearRemarks() noexcept {
  remarks_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue PathSegmentType::getRequiredNavigationPerformanceInMeters() const {
  if (requiredNavigationPerformanceInMeters_Accessor) {
    return *requiredNavigationPerformanceInMeters_Accessor;
  }
  throw uci::base::UCIException("Error in getRequiredNavigationPerformanceInMeters(): An attempt was made to get an optional field that was not enabled, call hasRequiredNavigationPerformanceInMeters() to determine if it is safe to call getRequiredNavigationPerformanceInMeters()");
}

uci::type::PathSegmentType& PathSegmentType::setRequiredNavigationPerformanceInMeters(uci::type::DistanceTypeValue value) {
  requiredNavigationPerformanceInMeters_Accessor = value;
  return *this;
}

bool PathSegmentType::hasRequiredNavigationPerformanceInMeters() const noexcept {
  return requiredNavigationPerformanceInMeters_Accessor.has_value();
}

uci::type::PathSegmentType& PathSegmentType::clearRequiredNavigationPerformanceInMeters() noexcept {
  requiredNavigationPerformanceInMeters_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& PathSegmentType::getFix_Identifier_() const {
  if (fix_Identifier_Accessor) {
    return *fix_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getFix_Identifier(): An attempt was made to get an optional field that was not enabled, call hasFix_Identifier() to determine if it is safe to call getFix_Identifier()");
}

const uci::type::ForeignKeyType& PathSegmentType::getFix_Identifier() const {
  return getFix_Identifier_();
}

uci::type::ForeignKeyType& PathSegmentType::getFix_Identifier() {
  return getFix_Identifier_();
}

uci::type::PathSegmentType& PathSegmentType::setFix_Identifier(const uci::type::ForeignKeyType& accessor) {
  enableFix_Identifier(accessor.getAccessorType());
  if (&accessor != fix_Identifier_Accessor.get()) {
    fix_Identifier_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PathSegmentType::hasFix_Identifier() const noexcept {
  return static_cast<bool>(fix_Identifier_Accessor);
}

uci::type::ForeignKeyType& PathSegmentType::enableFix_Identifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!fix_Identifier_Accessor) || (fix_Identifier_Accessor->getAccessorType() != requestedType)) {
    fix_Identifier_Accessor = ForeignKeyType::create(requestedType);
    if (!fix_Identifier_Accessor) {
      throw uci::base::UCIException("Error in enableFix_Identifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fix_Identifier_Accessor;
}

uci::type::PathSegmentType& PathSegmentType::clearFix_Identifier() noexcept {
  fix_Identifier_Accessor.reset();
  return *this;
}

std::unique_ptr<PathSegmentType> PathSegmentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathSegmentType : type};
  return (requestedType == uci::type::accessorType::pathSegmentType) ? boost::make_unique<PathSegmentType>() : nullptr;
}

/**  */
namespace PathSegmentType_Names {

constexpr const char* Extern_Type_Name{"PathSegmentType"};
constexpr const char* PathSegmentID_Name{"PathSegmentID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* EndPoint_Name{"EndPoint"};
constexpr const char* Locked_Name{"Locked"};
constexpr const char* Modified_Name{"Modified"};
constexpr const char* Speed_Name{"Speed"};
constexpr const char* CivilPathTerminator_Name{"CivilPathTerminator"};
constexpr const char* Climb_Name{"Climb"};
constexpr const char* MaximumRoll_Name{"MaximumRoll"};
constexpr const char* Acceleration_Name{"Acceleration"};
constexpr const char* NextPathSegment_Name{"NextPathSegment"};
constexpr const char* ConditionalPathSegment_Name{"ConditionalPathSegment"};
constexpr const char* InertialState_Name{"InertialState"};
constexpr const char* RequiredTimeOfArrival_Name{"RequiredTimeOfArrival"};
constexpr const char* Remarks_Name{"Remarks"};
constexpr const char* RequiredNavigationPerformanceInMeters_Name{"RequiredNavigationPerformanceInMeters"};
constexpr const char* Fix_Identifier_Name{"Fix_Identifier"};

} // namespace PathSegmentType_Names

void PathSegmentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PathSegmentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PathSegmentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::PathSegmentID_Name) {
      SegmentID_Type::deserialize(valueType.second, accessor.getPathSegmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::EndPoint_Name) {
      EndPointType::deserialize(valueType.second, accessor.getEndPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Locked_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocked(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Modified_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModified(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Speed_Name) {
      PathSegmentSpeedType::deserialize(valueType.second, accessor.enableSpeed(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::CivilPathTerminator_Name) {
      CivilPathTerminatorType::deserialize(valueType.second, accessor.enableCivilPathTerminator(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Climb_Name) {
      ClimbType::deserialize(valueType.second, accessor.enableClimb(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::MaximumRoll_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumRoll(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Acceleration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAcceleration(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::NextPathSegment_Name) {
      NextPathSegmentType::deserialize(valueType.second, accessor.enableNextPathSegment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::ConditionalPathSegment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathSegmentType::ConditionalPathSegment& boundedList = accessor.getConditionalPathSegment();
        const uci::type::PathSegmentType::ConditionalPathSegment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ConditionalPathSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::InertialState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathSegmentType::InertialState& boundedList = accessor.getInertialState();
        const uci::type::PathSegmentType::InertialState::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::RequiredTimeOfArrival_Name) {
      TimeWindowType::deserialize(valueType.second, accessor.enableRequiredTimeOfArrival(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Remarks_Name) {
      RemarksType::deserialize(valueType.second, accessor.enableRemarks(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::RequiredNavigationPerformanceInMeters_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRequiredNavigationPerformanceInMeters(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Fix_Identifier_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableFix_Identifier(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string PathSegmentType::serialize(const uci::type::PathSegmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PathSegmentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PathSegmentType_Names::Extern_Type_Name);
  }
  SegmentID_Type::serialize(accessor.getPathSegmentID(), node, PathSegmentType_Names::PathSegmentID_Name);
  PathSegmentSourceEnum::serialize(accessor.getSource(), node, PathSegmentType_Names::Source_Name, false);
  EndPointType::serialize(accessor.getEndPoint(), node, PathSegmentType_Names::EndPoint_Name);
  if (accessor.hasLocked()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLocked(), node, PathSegmentType_Names::Locked_Name);
  }
  if (accessor.hasModified()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getModified(), node, PathSegmentType_Names::Modified_Name);
  }
  if (accessor.hasSpeed()) {
    PathSegmentSpeedType::serialize(accessor.getSpeed(), node, PathSegmentType_Names::Speed_Name);
  }
  if (accessor.hasCivilPathTerminator()) {
    CivilPathTerminatorType::serialize(accessor.getCivilPathTerminator(), node, PathSegmentType_Names::CivilPathTerminator_Name);
  }
  if (accessor.hasClimb()) {
    ClimbType::serialize(accessor.getClimb(), node, PathSegmentType_Names::Climb_Name);
  }
  if (accessor.hasMaximumRoll()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumRoll(), node, PathSegmentType_Names::MaximumRoll_Name);
  }
  if (accessor.hasAcceleration()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAcceleration(), node, PathSegmentType_Names::Acceleration_Name);
  }
  if (accessor.hasNextPathSegment()) {
    NextPathSegmentType::serialize(accessor.getNextPathSegment(), node, PathSegmentType_Names::NextPathSegment_Name);
  }
  {
    const uci::type::PathSegmentType::ConditionalPathSegment& boundedList = accessor.getConditionalPathSegment();
    for (uci::type::PathSegmentType::ConditionalPathSegment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ConditionalPathSegmentType::serialize(boundedList.at(i), node, PathSegmentType_Names::ConditionalPathSegment_Name);
    }
  }
  {
    const uci::type::PathSegmentType::InertialState& boundedList = accessor.getInertialState();
    for (uci::type::PathSegmentType::InertialState::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::InertialStateRelativeType::serialize(boundedList.at(i), node, PathSegmentType_Names::InertialState_Name);
    }
  }
  if (accessor.hasRequiredTimeOfArrival()) {
    TimeWindowType::serialize(accessor.getRequiredTimeOfArrival(), node, PathSegmentType_Names::RequiredTimeOfArrival_Name);
  }
  if (accessor.hasRemarks()) {
    RemarksType::serialize(accessor.getRemarks(), node, PathSegmentType_Names::Remarks_Name);
  }
  if (accessor.hasRequiredNavigationPerformanceInMeters()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRequiredNavigationPerformanceInMeters(), node, PathSegmentType_Names::RequiredNavigationPerformanceInMeters_Name);
  }
  if (accessor.hasFix_Identifier()) {
    ForeignKeyType::serialize(accessor.getFix_Identifier(), node, PathSegmentType_Names::Fix_Identifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PathSegmentType& PathSegmentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PathSegmentType>().release());
}

uci::type::PathSegmentType& PathSegmentType::create(const uci::type::PathSegmentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PathSegmentType> newAccessor{boost::make_unique<asb_uci::type::PathSegmentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PathSegmentType::destroy(uci::type::PathSegmentType& accessor) {
  delete dynamic_cast<asb_uci::type::PathSegmentType*>(&accessor);
}

} // namespace type

} // namespace uci

