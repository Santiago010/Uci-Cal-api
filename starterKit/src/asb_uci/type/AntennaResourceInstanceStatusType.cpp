/** @file AntennaResourceInstanceStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AntennaResourceInstanceStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AntennaResourceID_Type.h"
#include "asb_uci/type/CapabilityAvailabilityEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AntennaResourceID_Type.h"
#include "uci/type/AntennaResourceInstanceStatusType.h"
#include "uci/type/CapabilityAvailabilityEnum.h"
#include "uci/type/PercentType.h"
#include "uci/type/PowerType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AntennaResourceInstanceStatusType::AntennaResourceInstanceStatusType()
  : antennaResourceInstanceID_Accessor{boost::make_unique<AntennaResourceID_Type>()},
    availability_Accessor{boost::make_unique<CapabilityAvailabilityEnum>()} {
}

AntennaResourceInstanceStatusType::~AntennaResourceInstanceStatusType() = default;

void AntennaResourceInstanceStatusType::copy(const uci::type::AntennaResourceInstanceStatusType& accessor) {
  copyImpl(accessor, false);
}

void AntennaResourceInstanceStatusType::copyImpl(const uci::type::AntennaResourceInstanceStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AntennaResourceInstanceStatusType&>(accessor);
    setAntennaResourceInstanceID(*(accessorImpl.antennaResourceInstanceID_Accessor));
    setAvailability(*(accessorImpl.availability_Accessor));
    if (accessorImpl.hasDeltaInputPowerConsumption()) {
      setDeltaInputPowerConsumption(accessorImpl.getDeltaInputPowerConsumption());
    } else {
      clearDeltaInputPowerConsumption();
    }
    if (accessorImpl.hasPercentAccess()) {
      setPercentAccess(accessorImpl.getPercentAccess());
    } else {
      clearPercentAccess();
    }
  }
}

void AntennaResourceInstanceStatusType::reset() noexcept {
  antennaResourceInstanceID_Accessor->reset();
  availability_Accessor->reset();
  clearDeltaInputPowerConsumption();
  clearPercentAccess();
}

const uci::type::AntennaResourceID_Type& AntennaResourceInstanceStatusType::getAntennaResourceInstanceID() const {
  return *antennaResourceInstanceID_Accessor;
}

uci::type::AntennaResourceID_Type& AntennaResourceInstanceStatusType::getAntennaResourceInstanceID() {
  return *antennaResourceInstanceID_Accessor;
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::setAntennaResourceInstanceID(const uci::type::AntennaResourceID_Type& accessor) {
  if (&accessor != antennaResourceInstanceID_Accessor.get()) {
    antennaResourceInstanceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityAvailabilityEnum& AntennaResourceInstanceStatusType::getAvailability() const {
  return *availability_Accessor;
}

uci::type::CapabilityAvailabilityEnum& AntennaResourceInstanceStatusType::getAvailability() {
  return *availability_Accessor;
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::setAvailability(const uci::type::CapabilityAvailabilityEnum& accessor) {
  if (&accessor != availability_Accessor.get()) {
    availability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::setAvailability(uci::type::CapabilityAvailabilityEnum::EnumerationItem value) {
  availability_Accessor->setValue(value);
  return *this;
}


uci::type::PowerTypeValue AntennaResourceInstanceStatusType::getDeltaInputPowerConsumption() const {
  if (deltaInputPowerConsumption_Accessor) {
    return *deltaInputPowerConsumption_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaInputPowerConsumption(): An attempt was made to get an optional field that was not enabled, call hasDeltaInputPowerConsumption() to determine if it is safe to call getDeltaInputPowerConsumption()");
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::setDeltaInputPowerConsumption(uci::type::PowerTypeValue value) {
  deltaInputPowerConsumption_Accessor = value;
  return *this;
}

bool AntennaResourceInstanceStatusType::hasDeltaInputPowerConsumption() const noexcept {
  return deltaInputPowerConsumption_Accessor.has_value();
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::clearDeltaInputPowerConsumption() noexcept {
  deltaInputPowerConsumption_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue AntennaResourceInstanceStatusType::getPercentAccess() const {
  if (percentAccess_Accessor) {
    return *percentAccess_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentAccess(): An attempt was made to get an optional field that was not enabled, call hasPercentAccess() to determine if it is safe to call getPercentAccess()");
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::setPercentAccess(uci::type::PercentTypeValue value) {
  percentAccess_Accessor = value;
  return *this;
}

bool AntennaResourceInstanceStatusType::hasPercentAccess() const noexcept {
  return percentAccess_Accessor.has_value();
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::clearPercentAccess() noexcept {
  percentAccess_Accessor.reset();
  return *this;
}

std::unique_ptr<AntennaResourceInstanceStatusType> AntennaResourceInstanceStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::antennaResourceInstanceStatusType : type};
  return (requestedType == uci::type::accessorType::antennaResourceInstanceStatusType) ? boost::make_unique<AntennaResourceInstanceStatusType>() : nullptr;
}

/**  */
namespace AntennaResourceInstanceStatusType_Names {

constexpr const char* Extern_Type_Name{"AntennaResourceInstanceStatusType"};
constexpr const char* AntennaResourceInstanceID_Name{"AntennaResourceInstanceID"};
constexpr const char* Availability_Name{"Availability"};
constexpr const char* DeltaInputPowerConsumption_Name{"DeltaInputPowerConsumption"};
constexpr const char* PercentAccess_Name{"PercentAccess"};

} // namespace AntennaResourceInstanceStatusType_Names

void AntennaResourceInstanceStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AntennaResourceInstanceStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AntennaResourceInstanceStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AntennaResourceInstanceStatusType_Names::AntennaResourceInstanceID_Name) {
      AntennaResourceID_Type::deserialize(valueType.second, accessor.getAntennaResourceInstanceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AntennaResourceInstanceStatusType_Names::Availability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAvailability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AntennaResourceInstanceStatusType_Names::DeltaInputPowerConsumption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeltaInputPowerConsumption(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AntennaResourceInstanceStatusType_Names::PercentAccess_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAccess(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string AntennaResourceInstanceStatusType::serialize(const uci::type::AntennaResourceInstanceStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AntennaResourceInstanceStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AntennaResourceInstanceStatusType_Names::Extern_Type_Name);
  }
  AntennaResourceID_Type::serialize(accessor.getAntennaResourceInstanceID(), node, AntennaResourceInstanceStatusType_Names::AntennaResourceInstanceID_Name);
  CapabilityAvailabilityEnum::serialize(accessor.getAvailability(), node, AntennaResourceInstanceStatusType_Names::Availability_Name, false);
  if (accessor.hasDeltaInputPowerConsumption()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDeltaInputPowerConsumption(), node, AntennaResourceInstanceStatusType_Names::DeltaInputPowerConsumption_Name);
  }
  if (accessor.hasPercentAccess()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAccess(), node, AntennaResourceInstanceStatusType_Names::PercentAccess_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AntennaResourceInstanceStatusType>().release());
}

uci::type::AntennaResourceInstanceStatusType& AntennaResourceInstanceStatusType::create(const uci::type::AntennaResourceInstanceStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AntennaResourceInstanceStatusType> newAccessor{boost::make_unique<asb_uci::type::AntennaResourceInstanceStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AntennaResourceInstanceStatusType::destroy(uci::type::AntennaResourceInstanceStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::AntennaResourceInstanceStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

