/** @file TurretReportPointingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/TurretReportPointingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FixedPointingEnum.h"
#include "asb_uci/type/TurretReportDynamicPointingType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FixedPointingEnum.h"
#include "uci/type/TurretReportDynamicPointingType.h"
#include "uci/type/TurretReportPointingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TurretReportPointingType::TurretReportPointingType() = default;

TurretReportPointingType::~TurretReportPointingType() = default;

void TurretReportPointingType::copy(const uci::type::TurretReportPointingType& accessor) {
  copyImpl(accessor, false);
}

void TurretReportPointingType::copyImpl(const uci::type::TurretReportPointingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TurretReportPointingType&>(accessor);
    if (accessorImpl.fixedPointing_Accessor) {
      setFixedPointing(*(accessorImpl.fixedPointing_Accessor));
    } else {
      fixedPointing_Accessor.reset();
    }
    if (accessorImpl.dynamic_Accessor) {
      setDynamic(*(accessorImpl.dynamic_Accessor));
    } else {
      dynamic_Accessor.reset();
    }
  }
}

void TurretReportPointingType::reset() noexcept {
  fixedPointing_Accessor.reset();
  dynamic_Accessor.reset();
}

uci::type::TurretReportPointingType::TurretReportPointingTypeChoice TurretReportPointingType::getTurretReportPointingTypeChoiceOrdinal() const noexcept {
  if (fixedPointing_Accessor) {
    return TURRETREPORTPOINTINGTYPE_CHOICE_FIXEDPOINTING;
  }
  if (dynamic_Accessor) {
    return TURRETREPORTPOINTINGTYPE_CHOICE_DYNAMIC;
  }
  return TURRETREPORTPOINTINGTYPE_CHOICE_NONE;
}

uci::type::TurretReportPointingType& TurretReportPointingType::setTurretReportPointingTypeChoiceOrdinal(uci::type::TurretReportPointingType::TurretReportPointingTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case TURRETREPORTPOINTINGTYPE_CHOICE_FIXEDPOINTING:
      chooseFixedPointing("setTurretReportPointingTypeChoiceOrdinal", type);
      break;
    case TURRETREPORTPOINTINGTYPE_CHOICE_DYNAMIC:
      chooseDynamic("setTurretReportPointingTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setTurretReportPointingTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FixedPointingEnum& TurretReportPointingType::getFixedPointing_() const {
  if (fixedPointing_Accessor) {
    return *fixedPointing_Accessor;
  }
  throw uci::base::UCIException("Error in getFixedPointing(): Unable to get FixedPointing, field not selected");
}

const uci::type::FixedPointingEnum& TurretReportPointingType::getFixedPointing() const {
  return getFixedPointing_();
}

uci::type::FixedPointingEnum& TurretReportPointingType::getFixedPointing() {
  return getFixedPointing_();
}

uci::type::TurretReportPointingType& TurretReportPointingType::setFixedPointing(const uci::type::FixedPointingEnum& accessor) {
  chooseFixedPointing();
  if (&accessor != fixedPointing_Accessor.get()) {
    fixedPointing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TurretReportPointingType& TurretReportPointingType::setFixedPointing(uci::type::FixedPointingEnum::EnumerationItem value) {
  chooseFixedPointing().setValue(value);
  return *this;
}

bool TurretReportPointingType::isFixedPointing() const noexcept {
  return static_cast<bool>(fixedPointing_Accessor);
}

uci::type::FixedPointingEnum& TurretReportPointingType::chooseFixedPointing(const std::string& method, uci::base::accessorType::AccessorType type) {
  dynamic_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fixedPointingEnum : type};
  if ((!fixedPointing_Accessor) || (fixedPointing_Accessor->getAccessorType() != requestedType)) {
    fixedPointing_Accessor = FixedPointingEnum::create(type);
    if (!fixedPointing_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fixedPointing_Accessor;
}

uci::type::FixedPointingEnum& TurretReportPointingType::chooseFixedPointing(uci::base::accessorType::AccessorType type) {
  return chooseFixedPointing("chooseFixedPointing", type);
}

uci::type::TurretReportDynamicPointingType& TurretReportPointingType::getDynamic_() const {
  if (dynamic_Accessor) {
    return *dynamic_Accessor;
  }
  throw uci::base::UCIException("Error in getDynamic(): Unable to get Dynamic, field not selected");
}

const uci::type::TurretReportDynamicPointingType& TurretReportPointingType::getDynamic() const {
  return getDynamic_();
}

uci::type::TurretReportDynamicPointingType& TurretReportPointingType::getDynamic() {
  return getDynamic_();
}

uci::type::TurretReportPointingType& TurretReportPointingType::setDynamic(const uci::type::TurretReportDynamicPointingType& accessor) {
  chooseDynamic();
  if (&accessor != dynamic_Accessor.get()) {
    dynamic_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TurretReportPointingType::isDynamic() const noexcept {
  return static_cast<bool>(dynamic_Accessor);
}

uci::type::TurretReportDynamicPointingType& TurretReportPointingType::chooseDynamic(const std::string& method, uci::base::accessorType::AccessorType type) {
  fixedPointing_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turretReportDynamicPointingType : type};
  if ((!dynamic_Accessor) || (dynamic_Accessor->getAccessorType() != requestedType)) {
    dynamic_Accessor = TurretReportDynamicPointingType::create(type);
    if (!dynamic_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dynamic_Accessor;
}

uci::type::TurretReportDynamicPointingType& TurretReportPointingType::chooseDynamic(uci::base::accessorType::AccessorType type) {
  return chooseDynamic("chooseDynamic", type);
}

std::unique_ptr<TurretReportPointingType> TurretReportPointingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turretReportPointingType : type};
  return (requestedType == uci::type::accessorType::turretReportPointingType) ? boost::make_unique<TurretReportPointingType>() : nullptr;
}

/**  */
namespace TurretReportPointingType_Names {

constexpr const char* Extern_Type_Name{"TurretReportPointingType"};
constexpr const char* FixedPointing_Name{"FixedPointing"};
constexpr const char* Dynamic_Name{"Dynamic"};

} // namespace TurretReportPointingType_Names

void TurretReportPointingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TurretReportPointingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TurretReportPointingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TurretReportPointingType_Names::FixedPointing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseFixedPointing().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + TurretReportPointingType_Names::Dynamic_Name) {
      TurretReportDynamicPointingType::deserialize(valueType.second, accessor.chooseDynamic(), nodeName, nsPrefix);
    }
  }
}

std::string TurretReportPointingType::serialize(const uci::type::TurretReportPointingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TurretReportPointingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TurretReportPointingType_Names::Extern_Type_Name);
  }
  if (accessor.isFixedPointing()) {
    FixedPointingEnum::serialize(accessor.getFixedPointing(), node, TurretReportPointingType_Names::FixedPointing_Name, false);
  } else if (accessor.isDynamic()) {
    TurretReportDynamicPointingType::serialize(accessor.getDynamic(), node, TurretReportPointingType_Names::Dynamic_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TurretReportPointingType& TurretReportPointingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TurretReportPointingType>().release());
}

uci::type::TurretReportPointingType& TurretReportPointingType::create(const uci::type::TurretReportPointingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TurretReportPointingType> newAccessor{boost::make_unique<asb_uci::type::TurretReportPointingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TurretReportPointingType::destroy(uci::type::TurretReportPointingType& accessor) {
  delete dynamic_cast<asb_uci::type::TurretReportPointingType*>(&accessor);
}

} // namespace type

} // namespace uci

