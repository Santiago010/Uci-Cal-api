/** @file RemoteDestinationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RemoteDestinationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/Point4D_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/TLE_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point4D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RemoteDestinationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TLE_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RemoteDestinationType::RemoteDestinationType() = default;

RemoteDestinationType::~RemoteDestinationType() = default;

void RemoteDestinationType::copy(const uci::type::RemoteDestinationType& accessor) {
  copyImpl(accessor, false);
}

void RemoteDestinationType::copyImpl(const uci::type::RemoteDestinationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RemoteDestinationType&>(accessor);
    if (accessorImpl.remoteSystemID_Accessor) {
      setRemoteSystemID(*(accessorImpl.remoteSystemID_Accessor));
    } else {
      remoteSystemID_Accessor.reset();
    }
    if (accessorImpl.remoteEntityID_Accessor) {
      setRemoteEntityID(*(accessorImpl.remoteEntityID_Accessor));
    } else {
      remoteEntityID_Accessor.reset();
    }
    if (accessorImpl.remotePosition_Accessor) {
      setRemotePosition(*(accessorImpl.remotePosition_Accessor));
    } else {
      remotePosition_Accessor.reset();
    }
    if (accessorImpl.remoteTLE_Accessor) {
      setRemoteTLE(*(accessorImpl.remoteTLE_Accessor));
    } else {
      remoteTLE_Accessor.reset();
    }
  }
}

void RemoteDestinationType::reset() noexcept {
  remoteSystemID_Accessor.reset();
  remoteEntityID_Accessor.reset();
  remotePosition_Accessor.reset();
  remoteTLE_Accessor.reset();
}

uci::type::SystemID_Type& RemoteDestinationType::getRemoteSystemID_() const {
  if (remoteSystemID_Accessor) {
    return *remoteSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoteSystemID(): An attempt was made to get an optional field that was not enabled, call hasRemoteSystemID() to determine if it is safe to call getRemoteSystemID()");
}

const uci::type::SystemID_Type& RemoteDestinationType::getRemoteSystemID() const {
  return getRemoteSystemID_();
}

uci::type::SystemID_Type& RemoteDestinationType::getRemoteSystemID() {
  return getRemoteSystemID_();
}

uci::type::RemoteDestinationType& RemoteDestinationType::setRemoteSystemID(const uci::type::SystemID_Type& accessor) {
  enableRemoteSystemID();
  if (&accessor != remoteSystemID_Accessor.get()) {
    remoteSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RemoteDestinationType::hasRemoteSystemID() const noexcept {
  return static_cast<bool>(remoteSystemID_Accessor);
}

uci::type::SystemID_Type& RemoteDestinationType::enableRemoteSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!remoteSystemID_Accessor) || (remoteSystemID_Accessor->getAccessorType() != requestedType)) {
    remoteSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!remoteSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableRemoteSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remoteSystemID_Accessor;
}

uci::type::RemoteDestinationType& RemoteDestinationType::clearRemoteSystemID() noexcept {
  remoteSystemID_Accessor.reset();
  return *this;
}

uci::type::EntityID_Type& RemoteDestinationType::getRemoteEntityID_() const {
  if (remoteEntityID_Accessor) {
    return *remoteEntityID_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoteEntityID(): An attempt was made to get an optional field that was not enabled, call hasRemoteEntityID() to determine if it is safe to call getRemoteEntityID()");
}

const uci::type::EntityID_Type& RemoteDestinationType::getRemoteEntityID() const {
  return getRemoteEntityID_();
}

uci::type::EntityID_Type& RemoteDestinationType::getRemoteEntityID() {
  return getRemoteEntityID_();
}

uci::type::RemoteDestinationType& RemoteDestinationType::setRemoteEntityID(const uci::type::EntityID_Type& accessor) {
  enableRemoteEntityID(accessor.getAccessorType());
  if (&accessor != remoteEntityID_Accessor.get()) {
    remoteEntityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RemoteDestinationType::hasRemoteEntityID() const noexcept {
  return static_cast<bool>(remoteEntityID_Accessor);
}

uci::type::EntityID_Type& RemoteDestinationType::enableRemoteEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!remoteEntityID_Accessor) || (remoteEntityID_Accessor->getAccessorType() != requestedType)) {
    remoteEntityID_Accessor = EntityID_Type::create(requestedType);
    if (!remoteEntityID_Accessor) {
      throw uci::base::UCIException("Error in enableRemoteEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remoteEntityID_Accessor;
}

uci::type::RemoteDestinationType& RemoteDestinationType::clearRemoteEntityID() noexcept {
  remoteEntityID_Accessor.reset();
  return *this;
}

uci::type::Point4D_Type& RemoteDestinationType::getRemotePosition_() const {
  if (remotePosition_Accessor) {
    return *remotePosition_Accessor;
  }
  throw uci::base::UCIException("Error in getRemotePosition(): An attempt was made to get an optional field that was not enabled, call hasRemotePosition() to determine if it is safe to call getRemotePosition()");
}

const uci::type::Point4D_Type& RemoteDestinationType::getRemotePosition() const {
  return getRemotePosition_();
}

uci::type::Point4D_Type& RemoteDestinationType::getRemotePosition() {
  return getRemotePosition_();
}

uci::type::RemoteDestinationType& RemoteDestinationType::setRemotePosition(const uci::type::Point4D_Type& accessor) {
  enableRemotePosition();
  if (&accessor != remotePosition_Accessor.get()) {
    remotePosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RemoteDestinationType::hasRemotePosition() const noexcept {
  return static_cast<bool>(remotePosition_Accessor);
}

uci::type::Point4D_Type& RemoteDestinationType::enableRemotePosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point4D_Type : type};
  if ((!remotePosition_Accessor) || (remotePosition_Accessor->getAccessorType() != requestedType)) {
    remotePosition_Accessor = Point4D_Type::create(requestedType);
    if (!remotePosition_Accessor) {
      throw uci::base::UCIException("Error in enableRemotePosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remotePosition_Accessor;
}

uci::type::RemoteDestinationType& RemoteDestinationType::clearRemotePosition() noexcept {
  remotePosition_Accessor.reset();
  return *this;
}

uci::type::TLE_Type& RemoteDestinationType::getRemoteTLE_() const {
  if (remoteTLE_Accessor) {
    return *remoteTLE_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoteTLE(): An attempt was made to get an optional field that was not enabled, call hasRemoteTLE() to determine if it is safe to call getRemoteTLE()");
}

const uci::type::TLE_Type& RemoteDestinationType::getRemoteTLE() const {
  return getRemoteTLE_();
}

uci::type::TLE_Type& RemoteDestinationType::getRemoteTLE() {
  return getRemoteTLE_();
}

uci::type::RemoteDestinationType& RemoteDestinationType::setRemoteTLE(const uci::type::TLE_Type& accessor) {
  enableRemoteTLE();
  if (&accessor != remoteTLE_Accessor.get()) {
    remoteTLE_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RemoteDestinationType::hasRemoteTLE() const noexcept {
  return static_cast<bool>(remoteTLE_Accessor);
}

uci::type::TLE_Type& RemoteDestinationType::enableRemoteTLE(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tLE_Type : type};
  if ((!remoteTLE_Accessor) || (remoteTLE_Accessor->getAccessorType() != requestedType)) {
    remoteTLE_Accessor = TLE_Type::create(requestedType);
    if (!remoteTLE_Accessor) {
      throw uci::base::UCIException("Error in enableRemoteTLE(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remoteTLE_Accessor;
}

uci::type::RemoteDestinationType& RemoteDestinationType::clearRemoteTLE() noexcept {
  remoteTLE_Accessor.reset();
  return *this;
}

std::unique_ptr<RemoteDestinationType> RemoteDestinationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remoteDestinationType : type};
  return (requestedType == uci::type::accessorType::remoteDestinationType) ? boost::make_unique<RemoteDestinationType>() : nullptr;
}

/**  */
namespace RemoteDestinationType_Names {

constexpr const char* Extern_Type_Name{"RemoteDestinationType"};
constexpr const char* RemoteSystemID_Name{"RemoteSystemID"};
constexpr const char* RemoteEntityID_Name{"RemoteEntityID"};
constexpr const char* RemotePosition_Name{"RemotePosition"};
constexpr const char* RemoteTLE_Name{"RemoteTLE"};

} // namespace RemoteDestinationType_Names

void RemoteDestinationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RemoteDestinationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RemoteDestinationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RemoteDestinationType_Names::RemoteSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableRemoteSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RemoteDestinationType_Names::RemoteEntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRemoteEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RemoteDestinationType_Names::RemotePosition_Name) {
      Point4D_Type::deserialize(valueType.second, accessor.enableRemotePosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RemoteDestinationType_Names::RemoteTLE_Name) {
      TLE_Type::deserialize(valueType.second, accessor.enableRemoteTLE(), nodeName, nsPrefix);
    }
  }
}

std::string RemoteDestinationType::serialize(const uci::type::RemoteDestinationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RemoteDestinationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RemoteDestinationType_Names::Extern_Type_Name);
  }
  if (accessor.hasRemoteSystemID()) {
    SystemID_Type::serialize(accessor.getRemoteSystemID(), node, RemoteDestinationType_Names::RemoteSystemID_Name);
  }
  if (accessor.hasRemoteEntityID()) {
    EntityID_Type::serialize(accessor.getRemoteEntityID(), node, RemoteDestinationType_Names::RemoteEntityID_Name);
  }
  if (accessor.hasRemotePosition()) {
    Point4D_Type::serialize(accessor.getRemotePosition(), node, RemoteDestinationType_Names::RemotePosition_Name);
  }
  if (accessor.hasRemoteTLE()) {
    TLE_Type::serialize(accessor.getRemoteTLE(), node, RemoteDestinationType_Names::RemoteTLE_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RemoteDestinationType& RemoteDestinationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RemoteDestinationType>().release());
}

uci::type::RemoteDestinationType& RemoteDestinationType::create(const uci::type::RemoteDestinationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RemoteDestinationType> newAccessor{boost::make_unique<asb_uci::type::RemoteDestinationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RemoteDestinationType::destroy(uci::type::RemoteDestinationType& accessor) {
  delete dynamic_cast<asb_uci::type::RemoteDestinationType*>(&accessor);
}

} // namespace type

} // namespace uci

