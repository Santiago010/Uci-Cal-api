/** @file ESM_PerformanceProfileType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ESM_PerformanceProfileType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FieldOfRegardType.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/ESM_PerformanceProfileType.h"
#include "uci/type/FieldOfRegardType.h"
#include "uci/type/FrequencyRangeType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_PerformanceProfileType::ESM_PerformanceProfileType()
  : fieldOfRegard_Accessor{boost::make_unique<FieldOfRegard>(1, SIZE_MAX)},
    band_Accessor{boost::make_unique<Band>(1, SIZE_MAX)} {
}

ESM_PerformanceProfileType::~ESM_PerformanceProfileType() = default;

void ESM_PerformanceProfileType::copy(const uci::type::ESM_PerformanceProfileType& accessor) {
  copyImpl(accessor, false);
}

void ESM_PerformanceProfileType::copyImpl(const uci::type::ESM_PerformanceProfileType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_PerformanceProfileType&>(accessor);
    setFieldOfRegard(*(accessorImpl.fieldOfRegard_Accessor));
    setBand(*(accessorImpl.band_Accessor));
    if (accessorImpl.hasBeamLimit()) {
      setBeamLimit(accessorImpl.getBeamLimit());
    } else {
      clearBeamLimit();
    }
    if (accessorImpl.hasFrequencyChangeTime()) {
      setFrequencyChangeTime(accessorImpl.getFrequencyChangeTime());
    } else {
      clearFrequencyChangeTime();
    }
  }
}

void ESM_PerformanceProfileType::reset() noexcept {
  fieldOfRegard_Accessor->reset();
  band_Accessor->reset();
  clearBeamLimit();
  clearFrequencyChangeTime();
}

const uci::type::ESM_PerformanceProfileType::FieldOfRegard& ESM_PerformanceProfileType::getFieldOfRegard() const {
  return *fieldOfRegard_Accessor;
}

uci::type::ESM_PerformanceProfileType::FieldOfRegard& ESM_PerformanceProfileType::getFieldOfRegard() {
  return *fieldOfRegard_Accessor;
}

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::setFieldOfRegard(const uci::type::ESM_PerformanceProfileType::FieldOfRegard& accessor) {
  if (&accessor != fieldOfRegard_Accessor.get()) {
    fieldOfRegard_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ESM_PerformanceProfileType::Band& ESM_PerformanceProfileType::getBand() const {
  return *band_Accessor;
}

uci::type::ESM_PerformanceProfileType::Band& ESM_PerformanceProfileType::getBand() {
  return *band_Accessor;
}

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::setBand(const uci::type::ESM_PerformanceProfileType::Band& accessor) {
  if (&accessor != band_Accessor.get()) {
    band_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt ESM_PerformanceProfileType::getBeamLimit() const {
  if (beamLimit_Accessor) {
    return *beamLimit_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamLimit(): An attempt was made to get an optional field that was not enabled, call hasBeamLimit() to determine if it is safe to call getBeamLimit()");
}

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::setBeamLimit(xs::UnsignedInt value) {
  beamLimit_Accessor = value;
  return *this;
}

bool ESM_PerformanceProfileType::hasBeamLimit() const noexcept {
  return beamLimit_Accessor.has_value();
}

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::clearBeamLimit() noexcept {
  beamLimit_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue ESM_PerformanceProfileType::getFrequencyChangeTime() const {
  if (frequencyChangeTime_Accessor) {
    return *frequencyChangeTime_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyChangeTime(): An attempt was made to get an optional field that was not enabled, call hasFrequencyChangeTime() to determine if it is safe to call getFrequencyChangeTime()");
}

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::setFrequencyChangeTime(uci::type::DurationTypeValue value) {
  frequencyChangeTime_Accessor = value;
  return *this;
}

bool ESM_PerformanceProfileType::hasFrequencyChangeTime() const noexcept {
  return frequencyChangeTime_Accessor.has_value();
}

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::clearFrequencyChangeTime() noexcept {
  frequencyChangeTime_Accessor.reset();
  return *this;
}

std::unique_ptr<ESM_PerformanceProfileType> ESM_PerformanceProfileType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_PerformanceProfileType : type};
  return (requestedType == uci::type::accessorType::eSM_PerformanceProfileType) ? boost::make_unique<ESM_PerformanceProfileType>() : nullptr;
}

/**  */
namespace ESM_PerformanceProfileType_Names {

constexpr const char* Extern_Type_Name{"ESM_PerformanceProfileType"};
constexpr const char* FieldOfRegard_Name{"FieldOfRegard"};
constexpr const char* Band_Name{"Band"};
constexpr const char* BeamLimit_Name{"BeamLimit"};
constexpr const char* FrequencyChangeTime_Name{"FrequencyChangeTime"};

} // namespace ESM_PerformanceProfileType_Names

void ESM_PerformanceProfileType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_PerformanceProfileType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_PerformanceProfileType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_PerformanceProfileType_Names::FieldOfRegard_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_PerformanceProfileType::FieldOfRegard& boundedList = accessor.getFieldOfRegard();
        const uci::type::ESM_PerformanceProfileType::FieldOfRegard::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FieldOfRegardType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ESM_PerformanceProfileType_Names::Band_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_PerformanceProfileType::Band& boundedList = accessor.getBand();
        const uci::type::ESM_PerformanceProfileType::Band::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ESM_PerformanceProfileType_Names::BeamLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBeamLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_PerformanceProfileType_Names::FrequencyChangeTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyChangeTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string ESM_PerformanceProfileType::serialize(const uci::type::ESM_PerformanceProfileType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_PerformanceProfileType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_PerformanceProfileType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ESM_PerformanceProfileType::FieldOfRegard& boundedList = accessor.getFieldOfRegard();
    for (uci::type::ESM_PerformanceProfileType::FieldOfRegard::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FieldOfRegardType::serialize(boundedList.at(i), node, ESM_PerformanceProfileType_Names::FieldOfRegard_Name);
    }
  }
  {
    const uci::type::ESM_PerformanceProfileType::Band& boundedList = accessor.getBand();
    for (uci::type::ESM_PerformanceProfileType::Band::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, ESM_PerformanceProfileType_Names::Band_Name);
    }
  }
  if (accessor.hasBeamLimit()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBeamLimit(), node, ESM_PerformanceProfileType_Names::BeamLimit_Name);
  }
  if (accessor.hasFrequencyChangeTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getFrequencyChangeTime(), node, ESM_PerformanceProfileType_Names::FrequencyChangeTime_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_PerformanceProfileType>().release());
}

uci::type::ESM_PerformanceProfileType& ESM_PerformanceProfileType::create(const uci::type::ESM_PerformanceProfileType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_PerformanceProfileType> newAccessor{boost::make_unique<asb_uci::type::ESM_PerformanceProfileType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_PerformanceProfileType::destroy(uci::type::ESM_PerformanceProfileType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_PerformanceProfileType*>(&accessor);
}

} // namespace type

} // namespace uci

