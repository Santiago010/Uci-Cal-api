/** @file SensorPointListType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SensorPointListType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AzimuthElevationRangePointType.h"
#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/type/RightAscensionDeclinationPointType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AzimuthElevationRangePointType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/RightAscensionDeclinationPointType.h"
#include "uci/type/SensorPointListType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SensorPointListType::SensorPointListType() = default;

SensorPointListType::~SensorPointListType() = default;

void SensorPointListType::copy(const uci::type::SensorPointListType& accessor) {
  copyImpl(accessor, false);
}

void SensorPointListType::copyImpl(const uci::type::SensorPointListType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SensorPointListType&>(accessor);
    if (accessorImpl.azimuthElevationRangePointList_Accessor) {
      setAzimuthElevationRangePointList(*(accessorImpl.azimuthElevationRangePointList_Accessor));
    } else {
      azimuthElevationRangePointList_Accessor.reset();
    }
    if (accessorImpl.rightAscensionDeclinationPointList_Accessor) {
      setRightAscensionDeclinationPointList(*(accessorImpl.rightAscensionDeclinationPointList_Accessor));
    } else {
      rightAscensionDeclinationPointList_Accessor.reset();
    }
    if (accessorImpl.point3DList_Accessor) {
      setPoint3DList(*(accessorImpl.point3DList_Accessor));
    } else {
      point3DList_Accessor.reset();
    }
  }
}

void SensorPointListType::reset() noexcept {
  azimuthElevationRangePointList_Accessor.reset();
  rightAscensionDeclinationPointList_Accessor.reset();
  point3DList_Accessor.reset();
}

uci::type::SensorPointListType::SensorPointListTypeChoice SensorPointListType::getSensorPointListTypeChoiceOrdinal() const noexcept {
  if (azimuthElevationRangePointList_Accessor) {
    return SENSORPOINTLISTTYPE_CHOICE_AZIMUTHELEVATIONRANGEPOINTLIST;
  }
  if (rightAscensionDeclinationPointList_Accessor) {
    return SENSORPOINTLISTTYPE_CHOICE_RIGHTASCENSIONDECLINATIONPOINTLIST;
  }
  if (point3DList_Accessor) {
    return SENSORPOINTLISTTYPE_CHOICE_POINT3DLIST;
  }
  return SENSORPOINTLISTTYPE_CHOICE_NONE;
}

uci::type::SensorPointListType& SensorPointListType::setSensorPointListTypeChoiceOrdinal(uci::type::SensorPointListType::SensorPointListTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case SENSORPOINTLISTTYPE_CHOICE_AZIMUTHELEVATIONRANGEPOINTLIST:
      chooseAzimuthElevationRangePointList();
      break;
    case SENSORPOINTLISTTYPE_CHOICE_RIGHTASCENSIONDECLINATIONPOINTLIST:
      chooseRightAscensionDeclinationPointList();
      break;
    case SENSORPOINTLISTTYPE_CHOICE_POINT3DLIST:
      choosePoint3DList();
      break;
    default:
      throw uci::base::UCIException("Error in setSensorPointListTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SensorPointListType::AzimuthElevationRangePointList& SensorPointListType::getAzimuthElevationRangePointList_() const {
  if (azimuthElevationRangePointList_Accessor) {
    return *azimuthElevationRangePointList_Accessor;
  }
  throw uci::base::UCIException("Error in getAzimuthElevationRangePointList(): Unable to get AzimuthElevationRangePointList, field not selected");
}

const uci::type::SensorPointListType::AzimuthElevationRangePointList& SensorPointListType::getAzimuthElevationRangePointList() const {
  return getAzimuthElevationRangePointList_();
}

uci::type::SensorPointListType::AzimuthElevationRangePointList& SensorPointListType::getAzimuthElevationRangePointList() {
  return getAzimuthElevationRangePointList_();
}

uci::type::SensorPointListType& SensorPointListType::setAzimuthElevationRangePointList(const uci::type::SensorPointListType::AzimuthElevationRangePointList& accessor) {
  chooseAzimuthElevationRangePointList();
  if (&accessor != azimuthElevationRangePointList_Accessor.get()) {
    azimuthElevationRangePointList_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorPointListType::isAzimuthElevationRangePointList() const noexcept {
  return static_cast<bool>(azimuthElevationRangePointList_Accessor);
}

uci::type::SensorPointListType::AzimuthElevationRangePointList& SensorPointListType::chooseAzimuthElevationRangePointList() {
  rightAscensionDeclinationPointList_Accessor.reset();
  point3DList_Accessor.reset();
  if (!azimuthElevationRangePointList_Accessor) {
    azimuthElevationRangePointList_Accessor = boost::make_unique<AzimuthElevationRangePointList>(1, SIZE_MAX);
  }
  return *azimuthElevationRangePointList_Accessor;
}

uci::type::SensorPointListType::RightAscensionDeclinationPointList& SensorPointListType::getRightAscensionDeclinationPointList_() const {
  if (rightAscensionDeclinationPointList_Accessor) {
    return *rightAscensionDeclinationPointList_Accessor;
  }
  throw uci::base::UCIException("Error in getRightAscensionDeclinationPointList(): Unable to get RightAscensionDeclinationPointList, field not selected");
}

const uci::type::SensorPointListType::RightAscensionDeclinationPointList& SensorPointListType::getRightAscensionDeclinationPointList() const {
  return getRightAscensionDeclinationPointList_();
}

uci::type::SensorPointListType::RightAscensionDeclinationPointList& SensorPointListType::getRightAscensionDeclinationPointList() {
  return getRightAscensionDeclinationPointList_();
}

uci::type::SensorPointListType& SensorPointListType::setRightAscensionDeclinationPointList(const uci::type::SensorPointListType::RightAscensionDeclinationPointList& accessor) {
  chooseRightAscensionDeclinationPointList();
  if (&accessor != rightAscensionDeclinationPointList_Accessor.get()) {
    rightAscensionDeclinationPointList_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorPointListType::isRightAscensionDeclinationPointList() const noexcept {
  return static_cast<bool>(rightAscensionDeclinationPointList_Accessor);
}

uci::type::SensorPointListType::RightAscensionDeclinationPointList& SensorPointListType::chooseRightAscensionDeclinationPointList() {
  azimuthElevationRangePointList_Accessor.reset();
  point3DList_Accessor.reset();
  if (!rightAscensionDeclinationPointList_Accessor) {
    rightAscensionDeclinationPointList_Accessor = boost::make_unique<RightAscensionDeclinationPointList>(1, SIZE_MAX);
  }
  return *rightAscensionDeclinationPointList_Accessor;
}

uci::type::SensorPointListType::Point3DList& SensorPointListType::getPoint3DList_() const {
  if (point3DList_Accessor) {
    return *point3DList_Accessor;
  }
  throw uci::base::UCIException("Error in getPoint3DList(): Unable to get Point3DList, field not selected");
}

const uci::type::SensorPointListType::Point3DList& SensorPointListType::getPoint3DList() const {
  return getPoint3DList_();
}

uci::type::SensorPointListType::Point3DList& SensorPointListType::getPoint3DList() {
  return getPoint3DList_();
}

uci::type::SensorPointListType& SensorPointListType::setPoint3DList(const uci::type::SensorPointListType::Point3DList& accessor) {
  choosePoint3DList();
  if (&accessor != point3DList_Accessor.get()) {
    point3DList_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorPointListType::isPoint3DList() const noexcept {
  return static_cast<bool>(point3DList_Accessor);
}

uci::type::SensorPointListType::Point3DList& SensorPointListType::choosePoint3DList() {
  azimuthElevationRangePointList_Accessor.reset();
  rightAscensionDeclinationPointList_Accessor.reset();
  if (!point3DList_Accessor) {
    point3DList_Accessor = boost::make_unique<Point3DList>(1, SIZE_MAX);
  }
  return *point3DList_Accessor;
}

std::unique_ptr<SensorPointListType> SensorPointListType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorPointListType : type};
  return (requestedType == uci::type::accessorType::sensorPointListType) ? boost::make_unique<SensorPointListType>() : nullptr;
}

/**  */
namespace SensorPointListType_Names {

constexpr const char* Extern_Type_Name{"SensorPointListType"};
constexpr const char* AzimuthElevationRangePointList_Name{"AzimuthElevationRangePointList"};
constexpr const char* RightAscensionDeclinationPointList_Name{"RightAscensionDeclinationPointList"};
constexpr const char* Point3DList_Name{"Point3DList"};

} // namespace SensorPointListType_Names

void SensorPointListType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorPointListType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SensorPointListType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SensorPointListType_Names::AzimuthElevationRangePointList_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorPointListType::AzimuthElevationRangePointList& boundedList = accessor.chooseAzimuthElevationRangePointList();
        const uci::type::SensorPointListType::AzimuthElevationRangePointList::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AzimuthElevationRangePointType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SensorPointListType_Names::RightAscensionDeclinationPointList_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorPointListType::RightAscensionDeclinationPointList& boundedList = accessor.chooseRightAscensionDeclinationPointList();
        const uci::type::SensorPointListType::RightAscensionDeclinationPointList::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RightAscensionDeclinationPointType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SensorPointListType_Names::Point3DList_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorPointListType::Point3DList& boundedList = accessor.choosePoint3DList();
        const uci::type::SensorPointListType::Point3DList::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SensorPointListType::serialize(const uci::type::SensorPointListType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SensorPointListType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SensorPointListType_Names::Extern_Type_Name);
  }
  if (accessor.isAzimuthElevationRangePointList()) {
    {
      const uci::type::SensorPointListType::AzimuthElevationRangePointList& boundedList = accessor.getAzimuthElevationRangePointList();
      for (uci::type::SensorPointListType::AzimuthElevationRangePointList::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::AzimuthElevationRangePointType::serialize(boundedList.at(i), node, SensorPointListType_Names::AzimuthElevationRangePointList_Name);
      }
    }
  } else if (accessor.isRightAscensionDeclinationPointList()) {
    {
      const uci::type::SensorPointListType::RightAscensionDeclinationPointList& boundedList = accessor.getRightAscensionDeclinationPointList();
      for (uci::type::SensorPointListType::RightAscensionDeclinationPointList::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::RightAscensionDeclinationPointType::serialize(boundedList.at(i), node, SensorPointListType_Names::RightAscensionDeclinationPointList_Name);
      }
    }
  } else if (accessor.isPoint3DList()) {
    {
      const uci::type::SensorPointListType::Point3DList& boundedList = accessor.getPoint3DList();
      for (uci::type::SensorPointListType::Point3DList::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::Point3D_Type::serialize(boundedList.at(i), node, SensorPointListType_Names::Point3DList_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SensorPointListType& SensorPointListType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SensorPointListType>().release());
}

uci::type::SensorPointListType& SensorPointListType::create(const uci::type::SensorPointListType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SensorPointListType> newAccessor{boost::make_unique<asb_uci::type::SensorPointListType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SensorPointListType::destroy(uci::type::SensorPointListType& accessor) {
  delete dynamic_cast<asb_uci::type::SensorPointListType*>(&accessor);
}

} // namespace type

} // namespace uci

