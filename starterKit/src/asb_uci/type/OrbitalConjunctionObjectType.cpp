/** @file OrbitalConjunctionObjectType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalConjunctionObjectType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitKinematicsReferencesType.h"
#include "asb_uci/type/OrbitalKinematicsStandardFrameChoiceType.h"
#include "asb_uci/type/SatelliteIdentityChoiceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitKinematicsReferencesType.h"
#include "uci/type/OrbitalConjunctionObjectType.h"
#include "uci/type/OrbitalKinematicsStandardFrameChoiceType.h"
#include "uci/type/SatelliteIdentityChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalConjunctionObjectType::OrbitalConjunctionObjectType()
  : identity_Accessor{boost::make_unique<SatelliteIdentityChoiceType>()},
    conjunctionKinematics_Accessor{boost::make_unique<OrbitalKinematicsStandardFrameChoiceType>()} {
}

OrbitalConjunctionObjectType::~OrbitalConjunctionObjectType() = default;

void OrbitalConjunctionObjectType::copy(const uci::type::OrbitalConjunctionObjectType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalConjunctionObjectType::copyImpl(const uci::type::OrbitalConjunctionObjectType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalConjunctionObjectType&>(accessor);
    setIdentity(*(accessorImpl.identity_Accessor));
    setConjunctionKinematics(*(accessorImpl.conjunctionKinematics_Accessor));
    if (accessorImpl.analyzedKinematics_Accessor) {
      setAnalyzedKinematics(*(accessorImpl.analyzedKinematics_Accessor));
    } else {
      analyzedKinematics_Accessor.reset();
    }
  }
}

void OrbitalConjunctionObjectType::reset() noexcept {
  identity_Accessor->reset();
  conjunctionKinematics_Accessor->reset();
  analyzedKinematics_Accessor.reset();
}

const uci::type::SatelliteIdentityChoiceType& OrbitalConjunctionObjectType::getIdentity() const {
  return *identity_Accessor;
}

uci::type::SatelliteIdentityChoiceType& OrbitalConjunctionObjectType::getIdentity() {
  return *identity_Accessor;
}

uci::type::OrbitalConjunctionObjectType& OrbitalConjunctionObjectType::setIdentity(const uci::type::SatelliteIdentityChoiceType& accessor) {
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalConjunctionObjectType::getConjunctionKinematics() const {
  return *conjunctionKinematics_Accessor;
}

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalConjunctionObjectType::getConjunctionKinematics() {
  return *conjunctionKinematics_Accessor;
}

uci::type::OrbitalConjunctionObjectType& OrbitalConjunctionObjectType::setConjunctionKinematics(const uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor) {
  if (&accessor != conjunctionKinematics_Accessor.get()) {
    conjunctionKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitKinematicsReferencesType& OrbitalConjunctionObjectType::getAnalyzedKinematics_() const {
  if (analyzedKinematics_Accessor) {
    return *analyzedKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getAnalyzedKinematics(): An attempt was made to get an optional field that was not enabled, call hasAnalyzedKinematics() to determine if it is safe to call getAnalyzedKinematics()");
}

const uci::type::OrbitKinematicsReferencesType& OrbitalConjunctionObjectType::getAnalyzedKinematics() const {
  return getAnalyzedKinematics_();
}

uci::type::OrbitKinematicsReferencesType& OrbitalConjunctionObjectType::getAnalyzedKinematics() {
  return getAnalyzedKinematics_();
}

uci::type::OrbitalConjunctionObjectType& OrbitalConjunctionObjectType::setAnalyzedKinematics(const uci::type::OrbitKinematicsReferencesType& accessor) {
  enableAnalyzedKinematics();
  if (&accessor != analyzedKinematics_Accessor.get()) {
    analyzedKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalConjunctionObjectType::hasAnalyzedKinematics() const noexcept {
  return static_cast<bool>(analyzedKinematics_Accessor);
}

uci::type::OrbitKinematicsReferencesType& OrbitalConjunctionObjectType::enableAnalyzedKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsReferencesType : type};
  if ((!analyzedKinematics_Accessor) || (analyzedKinematics_Accessor->getAccessorType() != requestedType)) {
    analyzedKinematics_Accessor = OrbitKinematicsReferencesType::create(requestedType);
    if (!analyzedKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableAnalyzedKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *analyzedKinematics_Accessor;
}

uci::type::OrbitalConjunctionObjectType& OrbitalConjunctionObjectType::clearAnalyzedKinematics() noexcept {
  analyzedKinematics_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalConjunctionObjectType> OrbitalConjunctionObjectType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalConjunctionObjectType : type};
  return (requestedType == uci::type::accessorType::orbitalConjunctionObjectType) ? boost::make_unique<OrbitalConjunctionObjectType>() : nullptr;
}

/**  */
namespace OrbitalConjunctionObjectType_Names {

constexpr const char* Extern_Type_Name{"OrbitalConjunctionObjectType"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* ConjunctionKinematics_Name{"ConjunctionKinematics"};
constexpr const char* AnalyzedKinematics_Name{"AnalyzedKinematics"};

} // namespace OrbitalConjunctionObjectType_Names

void OrbitalConjunctionObjectType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalConjunctionObjectType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalConjunctionObjectType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalConjunctionObjectType_Names::Identity_Name) {
      SatelliteIdentityChoiceType::deserialize(valueType.second, accessor.getIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalConjunctionObjectType_Names::ConjunctionKinematics_Name) {
      OrbitalKinematicsStandardFrameChoiceType::deserialize(valueType.second, accessor.getConjunctionKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalConjunctionObjectType_Names::AnalyzedKinematics_Name) {
      OrbitKinematicsReferencesType::deserialize(valueType.second, accessor.enableAnalyzedKinematics(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalConjunctionObjectType::serialize(const uci::type::OrbitalConjunctionObjectType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalConjunctionObjectType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalConjunctionObjectType_Names::Extern_Type_Name);
  }
  SatelliteIdentityChoiceType::serialize(accessor.getIdentity(), node, OrbitalConjunctionObjectType_Names::Identity_Name);
  OrbitalKinematicsStandardFrameChoiceType::serialize(accessor.getConjunctionKinematics(), node, OrbitalConjunctionObjectType_Names::ConjunctionKinematics_Name);
  if (accessor.hasAnalyzedKinematics()) {
    OrbitKinematicsReferencesType::serialize(accessor.getAnalyzedKinematics(), node, OrbitalConjunctionObjectType_Names::AnalyzedKinematics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalConjunctionObjectType& OrbitalConjunctionObjectType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalConjunctionObjectType>().release());
}

uci::type::OrbitalConjunctionObjectType& OrbitalConjunctionObjectType::create(const uci::type::OrbitalConjunctionObjectType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalConjunctionObjectType> newAccessor{boost::make_unique<asb_uci::type::OrbitalConjunctionObjectType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalConjunctionObjectType::destroy(uci::type::OrbitalConjunctionObjectType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalConjunctionObjectType*>(&accessor);
}

} // namespace type

} // namespace uci

