/** @file RequirementAssociationConstraintType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementAssociationConstraintType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AssociatedRequirementsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AssociatedRequirementsType.h"
#include "uci/type/RequirementAssociationConstraintType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementAssociationConstraintType::RequirementAssociationConstraintType() = default;

RequirementAssociationConstraintType::~RequirementAssociationConstraintType() = default;

void RequirementAssociationConstraintType::copy(const uci::type::RequirementAssociationConstraintType& accessor) {
  copyImpl(accessor, false);
}

void RequirementAssociationConstraintType::copyImpl(const uci::type::RequirementAssociationConstraintType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementAssociationConstraintType&>(accessor);
    if (accessorImpl.allOrNothing_Accessor) {
      setAllOrNothing(*(accessorImpl.allOrNothing_Accessor));
    } else {
      allOrNothing_Accessor.reset();
    }
    if (accessorImpl.eitherOr_Accessor) {
      setEitherOr(*(accessorImpl.eitherOr_Accessor));
    } else {
      eitherOr_Accessor.reset();
    }
    if (accessorImpl.sameSystem_Accessor) {
      setSameSystem(*(accessorImpl.sameSystem_Accessor));
    } else {
      sameSystem_Accessor.reset();
    }
  }
}

void RequirementAssociationConstraintType::reset() noexcept {
  allOrNothing_Accessor.reset();
  eitherOr_Accessor.reset();
  sameSystem_Accessor.reset();
}

uci::type::RequirementAssociationConstraintType::RequirementAssociationConstraintTypeChoice RequirementAssociationConstraintType::getRequirementAssociationConstraintTypeChoiceOrdinal() const noexcept {
  if (allOrNothing_Accessor) {
    return REQUIREMENTASSOCIATIONCONSTRAINTTYPE_CHOICE_ALLORNOTHING;
  }
  if (eitherOr_Accessor) {
    return REQUIREMENTASSOCIATIONCONSTRAINTTYPE_CHOICE_EITHEROR;
  }
  if (sameSystem_Accessor) {
    return REQUIREMENTASSOCIATIONCONSTRAINTTYPE_CHOICE_SAMESYSTEM;
  }
  return REQUIREMENTASSOCIATIONCONSTRAINTTYPE_CHOICE_NONE;
}

uci::type::RequirementAssociationConstraintType& RequirementAssociationConstraintType::setRequirementAssociationConstraintTypeChoiceOrdinal(uci::type::RequirementAssociationConstraintType::RequirementAssociationConstraintTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REQUIREMENTASSOCIATIONCONSTRAINTTYPE_CHOICE_ALLORNOTHING:
      chooseAllOrNothing("setRequirementAssociationConstraintTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTASSOCIATIONCONSTRAINTTYPE_CHOICE_EITHEROR:
      chooseEitherOr("setRequirementAssociationConstraintTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTASSOCIATIONCONSTRAINTTYPE_CHOICE_SAMESYSTEM:
      chooseSameSystem("setRequirementAssociationConstraintTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRequirementAssociationConstraintTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getAllOrNothing_() const {
  if (allOrNothing_Accessor) {
    return *allOrNothing_Accessor;
  }
  throw uci::base::UCIException("Error in getAllOrNothing(): Unable to get AllOrNothing, field not selected");
}

const uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getAllOrNothing() const {
  return getAllOrNothing_();
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getAllOrNothing() {
  return getAllOrNothing_();
}

uci::type::RequirementAssociationConstraintType& RequirementAssociationConstraintType::setAllOrNothing(const uci::type::AssociatedRequirementsType& accessor) {
  chooseAllOrNothing();
  if (&accessor != allOrNothing_Accessor.get()) {
    allOrNothing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementAssociationConstraintType::isAllOrNothing() const noexcept {
  return static_cast<bool>(allOrNothing_Accessor);
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::chooseAllOrNothing(const std::string& method, uci::base::accessorType::AccessorType type) {
  eitherOr_Accessor.reset();
  sameSystem_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::associatedRequirementsType : type};
  if ((!allOrNothing_Accessor) || (allOrNothing_Accessor->getAccessorType() != requestedType)) {
    allOrNothing_Accessor = AssociatedRequirementsType::create(type);
    if (!allOrNothing_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allOrNothing_Accessor;
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::chooseAllOrNothing(uci::base::accessorType::AccessorType type) {
  return chooseAllOrNothing("chooseAllOrNothing", type);
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getEitherOr_() const {
  if (eitherOr_Accessor) {
    return *eitherOr_Accessor;
  }
  throw uci::base::UCIException("Error in getEitherOr(): Unable to get EitherOr, field not selected");
}

const uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getEitherOr() const {
  return getEitherOr_();
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getEitherOr() {
  return getEitherOr_();
}

uci::type::RequirementAssociationConstraintType& RequirementAssociationConstraintType::setEitherOr(const uci::type::AssociatedRequirementsType& accessor) {
  chooseEitherOr();
  if (&accessor != eitherOr_Accessor.get()) {
    eitherOr_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementAssociationConstraintType::isEitherOr() const noexcept {
  return static_cast<bool>(eitherOr_Accessor);
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::chooseEitherOr(const std::string& method, uci::base::accessorType::AccessorType type) {
  allOrNothing_Accessor.reset();
  sameSystem_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::associatedRequirementsType : type};
  if ((!eitherOr_Accessor) || (eitherOr_Accessor->getAccessorType() != requestedType)) {
    eitherOr_Accessor = AssociatedRequirementsType::create(type);
    if (!eitherOr_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eitherOr_Accessor;
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::chooseEitherOr(uci::base::accessorType::AccessorType type) {
  return chooseEitherOr("chooseEitherOr", type);
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getSameSystem_() const {
  if (sameSystem_Accessor) {
    return *sameSystem_Accessor;
  }
  throw uci::base::UCIException("Error in getSameSystem(): Unable to get SameSystem, field not selected");
}

const uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getSameSystem() const {
  return getSameSystem_();
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::getSameSystem() {
  return getSameSystem_();
}

uci::type::RequirementAssociationConstraintType& RequirementAssociationConstraintType::setSameSystem(const uci::type::AssociatedRequirementsType& accessor) {
  chooseSameSystem();
  if (&accessor != sameSystem_Accessor.get()) {
    sameSystem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementAssociationConstraintType::isSameSystem() const noexcept {
  return static_cast<bool>(sameSystem_Accessor);
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::chooseSameSystem(const std::string& method, uci::base::accessorType::AccessorType type) {
  allOrNothing_Accessor.reset();
  eitherOr_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::associatedRequirementsType : type};
  if ((!sameSystem_Accessor) || (sameSystem_Accessor->getAccessorType() != requestedType)) {
    sameSystem_Accessor = AssociatedRequirementsType::create(type);
    if (!sameSystem_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sameSystem_Accessor;
}

uci::type::AssociatedRequirementsType& RequirementAssociationConstraintType::chooseSameSystem(uci::base::accessorType::AccessorType type) {
  return chooseSameSystem("chooseSameSystem", type);
}

std::unique_ptr<RequirementAssociationConstraintType> RequirementAssociationConstraintType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementAssociationConstraintType : type};
  return (requestedType == uci::type::accessorType::requirementAssociationConstraintType) ? boost::make_unique<RequirementAssociationConstraintType>() : nullptr;
}

/**  */
namespace RequirementAssociationConstraintType_Names {

constexpr const char* Extern_Type_Name{"RequirementAssociationConstraintType"};
constexpr const char* AllOrNothing_Name{"AllOrNothing"};
constexpr const char* EitherOr_Name{"EitherOr"};
constexpr const char* SameSystem_Name{"SameSystem"};

} // namespace RequirementAssociationConstraintType_Names

void RequirementAssociationConstraintType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementAssociationConstraintType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementAssociationConstraintType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementAssociationConstraintType_Names::AllOrNothing_Name) {
      AssociatedRequirementsType::deserialize(valueType.second, accessor.chooseAllOrNothing(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementAssociationConstraintType_Names::EitherOr_Name) {
      AssociatedRequirementsType::deserialize(valueType.second, accessor.chooseEitherOr(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementAssociationConstraintType_Names::SameSystem_Name) {
      AssociatedRequirementsType::deserialize(valueType.second, accessor.chooseSameSystem(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementAssociationConstraintType::serialize(const uci::type::RequirementAssociationConstraintType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementAssociationConstraintType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementAssociationConstraintType_Names::Extern_Type_Name);
  }
  if (accessor.isAllOrNothing()) {
    AssociatedRequirementsType::serialize(accessor.getAllOrNothing(), node, RequirementAssociationConstraintType_Names::AllOrNothing_Name);
  } else if (accessor.isEitherOr()) {
    AssociatedRequirementsType::serialize(accessor.getEitherOr(), node, RequirementAssociationConstraintType_Names::EitherOr_Name);
  } else if (accessor.isSameSystem()) {
    AssociatedRequirementsType::serialize(accessor.getSameSystem(), node, RequirementAssociationConstraintType_Names::SameSystem_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementAssociationConstraintType& RequirementAssociationConstraintType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementAssociationConstraintType>().release());
}

uci::type::RequirementAssociationConstraintType& RequirementAssociationConstraintType::create(const uci::type::RequirementAssociationConstraintType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementAssociationConstraintType> newAccessor{boost::make_unique<asb_uci::type::RequirementAssociationConstraintType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementAssociationConstraintType::destroy(uci::type::RequirementAssociationConstraintType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementAssociationConstraintType*>(&accessor);
}

} // namespace type

} // namespace uci

