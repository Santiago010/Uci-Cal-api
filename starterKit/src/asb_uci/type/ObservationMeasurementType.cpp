/** @file ObservationMeasurementType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ObservationMeasurementType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/MeasurementType.h"
#include "asb_uci/type/NameValuePairType.h"
#include "asb_uci/type/ObservationMeasurementID_Type.h"
#include "asb_uci/type/ObservationMeasurementSourceType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/MeasurementType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/ObservationMeasurementID_Type.h"
#include "uci/type/ObservationMeasurementSourceType.h"
#include "uci/type/ObservationMeasurementType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ObservationMeasurementType::ObservationMeasurementType()
  : measurements_Accessor{boost::make_unique<Measurements>(1, SIZE_MAX)},
    customCharacteristics_Accessor{boost::make_unique<CustomCharacteristics>(0, SIZE_MAX)} {
}

ObservationMeasurementType::~ObservationMeasurementType() = default;

void ObservationMeasurementType::copy(const uci::type::ObservationMeasurementType& accessor) {
  copyImpl(accessor, false);
}

void ObservationMeasurementType::copyImpl(const uci::type::ObservationMeasurementType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ObservationMeasurementType&>(accessor);
    if (accessorImpl.observationMeasurementID_Accessor) {
      setObservationMeasurementID(*(accessorImpl.observationMeasurementID_Accessor));
    } else {
      observationMeasurementID_Accessor.reset();
    }
    if (accessorImpl.measurementSource_Accessor) {
      setMeasurementSource(*(accessorImpl.measurementSource_Accessor));
    } else {
      measurementSource_Accessor.reset();
    }
    if (accessorImpl.timeSpan_Accessor) {
      setTimeSpan(*(accessorImpl.timeSpan_Accessor));
    } else {
      timeSpan_Accessor.reset();
    }
    setMeasurements(*(accessorImpl.measurements_Accessor));
    setCustomCharacteristics(*(accessorImpl.customCharacteristics_Accessor));
  }
}

void ObservationMeasurementType::reset() noexcept {
  observationMeasurementID_Accessor.reset();
  measurementSource_Accessor.reset();
  timeSpan_Accessor.reset();
  measurements_Accessor->reset();
  customCharacteristics_Accessor->reset();
}

uci::type::ObservationMeasurementID_Type& ObservationMeasurementType::getObservationMeasurementID_() const {
  if (observationMeasurementID_Accessor) {
    return *observationMeasurementID_Accessor;
  }
  throw uci::base::UCIException("Error in getObservationMeasurementID(): An attempt was made to get an optional field that was not enabled, call hasObservationMeasurementID() to determine if it is safe to call getObservationMeasurementID()");
}

const uci::type::ObservationMeasurementID_Type& ObservationMeasurementType::getObservationMeasurementID() const {
  return getObservationMeasurementID_();
}

uci::type::ObservationMeasurementID_Type& ObservationMeasurementType::getObservationMeasurementID() {
  return getObservationMeasurementID_();
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::setObservationMeasurementID(const uci::type::ObservationMeasurementID_Type& accessor) {
  enableObservationMeasurementID();
  if (&accessor != observationMeasurementID_Accessor.get()) {
    observationMeasurementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementType::hasObservationMeasurementID() const noexcept {
  return static_cast<bool>(observationMeasurementID_Accessor);
}

uci::type::ObservationMeasurementID_Type& ObservationMeasurementType::enableObservationMeasurementID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::observationMeasurementID_Type : type};
  if ((!observationMeasurementID_Accessor) || (observationMeasurementID_Accessor->getAccessorType() != requestedType)) {
    observationMeasurementID_Accessor = ObservationMeasurementID_Type::create(requestedType);
    if (!observationMeasurementID_Accessor) {
      throw uci::base::UCIException("Error in enableObservationMeasurementID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *observationMeasurementID_Accessor;
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::clearObservationMeasurementID() noexcept {
  observationMeasurementID_Accessor.reset();
  return *this;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementType::getMeasurementSource_() const {
  if (measurementSource_Accessor) {
    return *measurementSource_Accessor;
  }
  throw uci::base::UCIException("Error in getMeasurementSource(): An attempt was made to get an optional field that was not enabled, call hasMeasurementSource() to determine if it is safe to call getMeasurementSource()");
}

const uci::type::ObservationMeasurementSourceType& ObservationMeasurementType::getMeasurementSource() const {
  return getMeasurementSource_();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementType::getMeasurementSource() {
  return getMeasurementSource_();
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::setMeasurementSource(const uci::type::ObservationMeasurementSourceType& accessor) {
  enableMeasurementSource();
  if (&accessor != measurementSource_Accessor.get()) {
    measurementSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementType::hasMeasurementSource() const noexcept {
  return static_cast<bool>(measurementSource_Accessor);
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementType::enableMeasurementSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::observationMeasurementSourceType : type};
  if ((!measurementSource_Accessor) || (measurementSource_Accessor->getAccessorType() != requestedType)) {
    measurementSource_Accessor = ObservationMeasurementSourceType::create(requestedType);
    if (!measurementSource_Accessor) {
      throw uci::base::UCIException("Error in enableMeasurementSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *measurementSource_Accessor;
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::clearMeasurementSource() noexcept {
  measurementSource_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& ObservationMeasurementType::getTimeSpan_() const {
  if (timeSpan_Accessor) {
    return *timeSpan_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeSpan(): An attempt was made to get an optional field that was not enabled, call hasTimeSpan() to determine if it is safe to call getTimeSpan()");
}

const uci::type::DateTimeRangeType& ObservationMeasurementType::getTimeSpan() const {
  return getTimeSpan_();
}

uci::type::DateTimeRangeType& ObservationMeasurementType::getTimeSpan() {
  return getTimeSpan_();
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::setTimeSpan(const uci::type::DateTimeRangeType& accessor) {
  enableTimeSpan();
  if (&accessor != timeSpan_Accessor.get()) {
    timeSpan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementType::hasTimeSpan() const noexcept {
  return static_cast<bool>(timeSpan_Accessor);
}

uci::type::DateTimeRangeType& ObservationMeasurementType::enableTimeSpan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!timeSpan_Accessor) || (timeSpan_Accessor->getAccessorType() != requestedType)) {
    timeSpan_Accessor = DateTimeRangeType::create(requestedType);
    if (!timeSpan_Accessor) {
      throw uci::base::UCIException("Error in enableTimeSpan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeSpan_Accessor;
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::clearTimeSpan() noexcept {
  timeSpan_Accessor.reset();
  return *this;
}

const uci::type::ObservationMeasurementType::Measurements& ObservationMeasurementType::getMeasurements() const {
  return *measurements_Accessor;
}

uci::type::ObservationMeasurementType::Measurements& ObservationMeasurementType::getMeasurements() {
  return *measurements_Accessor;
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::setMeasurements(const uci::type::ObservationMeasurementType::Measurements& accessor) {
  if (&accessor != measurements_Accessor.get()) {
    measurements_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ObservationMeasurementType::CustomCharacteristics& ObservationMeasurementType::getCustomCharacteristics() const {
  return *customCharacteristics_Accessor;
}

uci::type::ObservationMeasurementType::CustomCharacteristics& ObservationMeasurementType::getCustomCharacteristics() {
  return *customCharacteristics_Accessor;
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::setCustomCharacteristics(const uci::type::ObservationMeasurementType::CustomCharacteristics& accessor) {
  if (&accessor != customCharacteristics_Accessor.get()) {
    customCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ObservationMeasurementType> ObservationMeasurementType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::observationMeasurementType : type};
  return (requestedType == uci::type::accessorType::observationMeasurementType) ? boost::make_unique<ObservationMeasurementType>() : nullptr;
}

/**  */
namespace ObservationMeasurementType_Names {

constexpr const char* Extern_Type_Name{"ObservationMeasurementType"};
constexpr const char* ObservationMeasurementID_Name{"ObservationMeasurementID"};
constexpr const char* MeasurementSource_Name{"MeasurementSource"};
constexpr const char* TimeSpan_Name{"TimeSpan"};
constexpr const char* Measurements_Name{"Measurements"};
constexpr const char* CustomCharacteristics_Name{"CustomCharacteristics"};

} // namespace ObservationMeasurementType_Names

void ObservationMeasurementType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ObservationMeasurementType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ObservationMeasurementType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ObservationMeasurementType_Names::ObservationMeasurementID_Name) {
      ObservationMeasurementID_Type::deserialize(valueType.second, accessor.enableObservationMeasurementID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementType_Names::MeasurementSource_Name) {
      ObservationMeasurementSourceType::deserialize(valueType.second, accessor.enableMeasurementSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementType_Names::TimeSpan_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableTimeSpan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementType_Names::Measurements_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementType::Measurements& boundedList = accessor.getMeasurements();
        const uci::type::ObservationMeasurementType::Measurements::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MeasurementType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementType_Names::CustomCharacteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
        const uci::type::ObservationMeasurementType::CustomCharacteristics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ObservationMeasurementType::serialize(const uci::type::ObservationMeasurementType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ObservationMeasurementType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ObservationMeasurementType_Names::Extern_Type_Name);
  }
  if (accessor.hasObservationMeasurementID()) {
    ObservationMeasurementID_Type::serialize(accessor.getObservationMeasurementID(), node, ObservationMeasurementType_Names::ObservationMeasurementID_Name);
  }
  if (accessor.hasMeasurementSource()) {
    ObservationMeasurementSourceType::serialize(accessor.getMeasurementSource(), node, ObservationMeasurementType_Names::MeasurementSource_Name);
  }
  if (accessor.hasTimeSpan()) {
    DateTimeRangeType::serialize(accessor.getTimeSpan(), node, ObservationMeasurementType_Names::TimeSpan_Name);
  }
  {
    const uci::type::ObservationMeasurementType::Measurements& boundedList = accessor.getMeasurements();
    for (uci::type::ObservationMeasurementType::Measurements::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MeasurementType::serialize(boundedList.at(i), node, ObservationMeasurementType_Names::Measurements_Name);
    }
  }
  {
    const uci::type::ObservationMeasurementType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
    for (uci::type::ObservationMeasurementType::CustomCharacteristics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::NameValuePairType::serialize(boundedList.at(i), node, ObservationMeasurementType_Names::CustomCharacteristics_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ObservationMeasurementType& ObservationMeasurementType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ObservationMeasurementType>().release());
}

uci::type::ObservationMeasurementType& ObservationMeasurementType::create(const uci::type::ObservationMeasurementType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ObservationMeasurementType> newAccessor{boost::make_unique<asb_uci::type::ObservationMeasurementType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ObservationMeasurementType::destroy(uci::type::ObservationMeasurementType& accessor) {
  delete dynamic_cast<asb_uci::type::ObservationMeasurementType*>(&accessor);
}

} // namespace type

} // namespace uci

