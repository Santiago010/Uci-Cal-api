/** @file CapabilityAssessmentActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CapabilityAssessmentActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/SupportCapabilityStatusBaseType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityAssessmentActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportCapabilityStatusBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityAssessmentActivityType::CapabilityAssessmentActivityType() = default;

CapabilityAssessmentActivityType::~CapabilityAssessmentActivityType() = default;

void CapabilityAssessmentActivityType::copy(const uci::type::CapabilityAssessmentActivityType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityAssessmentActivityType::copyImpl(const uci::type::CapabilityAssessmentActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityAssessmentActivityType&>(accessor);
    if (accessorImpl.estimatedCapabilityActivity_Accessor) {
      setEstimatedCapabilityActivity(*(accessorImpl.estimatedCapabilityActivity_Accessor));
    } else {
      estimatedCapabilityActivity_Accessor.reset();
    }
    if (accessorImpl.estimatedSupportingCapabilityReport_Accessor) {
      setEstimatedSupportingCapabilityReport(*(accessorImpl.estimatedSupportingCapabilityReport_Accessor));
    } else {
      estimatedSupportingCapabilityReport_Accessor.reset();
    }
  }
}

void CapabilityAssessmentActivityType::reset() noexcept {
  estimatedCapabilityActivity_Accessor.reset();
  estimatedSupportingCapabilityReport_Accessor.reset();
}

uci::type::CapabilityAssessmentActivityType::CapabilityAssessmentActivityTypeChoice CapabilityAssessmentActivityType::getCapabilityAssessmentActivityTypeChoiceOrdinal() const noexcept {
  if (estimatedCapabilityActivity_Accessor) {
    return CAPABILITYASSESSMENTACTIVITYTYPE_CHOICE_ESTIMATEDCAPABILITYACTIVITY;
  }
  if (estimatedSupportingCapabilityReport_Accessor) {
    return CAPABILITYASSESSMENTACTIVITYTYPE_CHOICE_ESTIMATEDSUPPORTINGCAPABILITYREPORT;
  }
  return CAPABILITYASSESSMENTACTIVITYTYPE_CHOICE_NONE;
}

uci::type::CapabilityAssessmentActivityType& CapabilityAssessmentActivityType::setCapabilityAssessmentActivityTypeChoiceOrdinal(uci::type::CapabilityAssessmentActivityType::CapabilityAssessmentActivityTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CAPABILITYASSESSMENTACTIVITYTYPE_CHOICE_ESTIMATEDCAPABILITYACTIVITY:
      chooseEstimatedCapabilityActivity("setCapabilityAssessmentActivityTypeChoiceOrdinal", type);
      break;
    case CAPABILITYASSESSMENTACTIVITYTYPE_CHOICE_ESTIMATEDSUPPORTINGCAPABILITYREPORT:
      chooseEstimatedSupportingCapabilityReport("setCapabilityAssessmentActivityTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setCapabilityAssessmentActivityTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ActivityBaseType& CapabilityAssessmentActivityType::getEstimatedCapabilityActivity_() const {
  if (estimatedCapabilityActivity_Accessor) {
    return *estimatedCapabilityActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedCapabilityActivity(): Unable to get EstimatedCapabilityActivity, field not selected");
}

const uci::type::ActivityBaseType& CapabilityAssessmentActivityType::getEstimatedCapabilityActivity() const {
  return getEstimatedCapabilityActivity_();
}

uci::type::ActivityBaseType& CapabilityAssessmentActivityType::getEstimatedCapabilityActivity() {
  return getEstimatedCapabilityActivity_();
}

uci::type::CapabilityAssessmentActivityType& CapabilityAssessmentActivityType::setEstimatedCapabilityActivity(const uci::type::ActivityBaseType& accessor) {
  chooseEstimatedCapabilityActivity("setEstimatedCapabilityActivity", accessor.getAccessorType());
  if (&accessor != estimatedCapabilityActivity_Accessor.get()) {
    estimatedCapabilityActivity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilityAssessmentActivityType::isEstimatedCapabilityActivity() const noexcept {
  return static_cast<bool>(estimatedCapabilityActivity_Accessor);
}

uci::type::ActivityBaseType& CapabilityAssessmentActivityType::chooseEstimatedCapabilityActivity(const std::string& method, uci::base::accessorType::AccessorType type) {
  estimatedSupportingCapabilityReport_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityBaseType : type};
  if ((!estimatedCapabilityActivity_Accessor) || (estimatedCapabilityActivity_Accessor->getAccessorType() != requestedType)) {
    estimatedCapabilityActivity_Accessor = ActivityBaseType::create(type);
    if (!estimatedCapabilityActivity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedCapabilityActivity_Accessor;
}

uci::type::ActivityBaseType& CapabilityAssessmentActivityType::chooseEstimatedCapabilityActivity(uci::base::accessorType::AccessorType type) {
  return chooseEstimatedCapabilityActivity("chooseEstimatedCapabilityActivity", type);
}

uci::type::SupportCapabilityStatusBaseType& CapabilityAssessmentActivityType::getEstimatedSupportingCapabilityReport_() const {
  if (estimatedSupportingCapabilityReport_Accessor) {
    return *estimatedSupportingCapabilityReport_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedSupportingCapabilityReport(): Unable to get EstimatedSupportingCapabilityReport, field not selected");
}

const uci::type::SupportCapabilityStatusBaseType& CapabilityAssessmentActivityType::getEstimatedSupportingCapabilityReport() const {
  return getEstimatedSupportingCapabilityReport_();
}

uci::type::SupportCapabilityStatusBaseType& CapabilityAssessmentActivityType::getEstimatedSupportingCapabilityReport() {
  return getEstimatedSupportingCapabilityReport_();
}

uci::type::CapabilityAssessmentActivityType& CapabilityAssessmentActivityType::setEstimatedSupportingCapabilityReport(const uci::type::SupportCapabilityStatusBaseType& accessor) {
  chooseEstimatedSupportingCapabilityReport("setEstimatedSupportingCapabilityReport", accessor.getAccessorType());
  if (&accessor != estimatedSupportingCapabilityReport_Accessor.get()) {
    estimatedSupportingCapabilityReport_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilityAssessmentActivityType::isEstimatedSupportingCapabilityReport() const noexcept {
  return static_cast<bool>(estimatedSupportingCapabilityReport_Accessor);
}

uci::type::SupportCapabilityStatusBaseType& CapabilityAssessmentActivityType::chooseEstimatedSupportingCapabilityReport(const std::string& method, uci::base::accessorType::AccessorType type) {
  estimatedCapabilityActivity_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportCapabilityStatusBaseType : type};
  if ((!estimatedSupportingCapabilityReport_Accessor) || (estimatedSupportingCapabilityReport_Accessor->getAccessorType() != requestedType)) {
    estimatedSupportingCapabilityReport_Accessor = SupportCapabilityStatusBaseType::create(type);
    if (!estimatedSupportingCapabilityReport_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedSupportingCapabilityReport_Accessor;
}

uci::type::SupportCapabilityStatusBaseType& CapabilityAssessmentActivityType::chooseEstimatedSupportingCapabilityReport(uci::base::accessorType::AccessorType type) {
  return chooseEstimatedSupportingCapabilityReport("chooseEstimatedSupportingCapabilityReport", type);
}

std::unique_ptr<CapabilityAssessmentActivityType> CapabilityAssessmentActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityAssessmentActivityType : type};
  return (requestedType == uci::type::accessorType::capabilityAssessmentActivityType) ? boost::make_unique<CapabilityAssessmentActivityType>() : nullptr;
}

/**  */
namespace CapabilityAssessmentActivityType_Names {

constexpr const char* Extern_Type_Name{"CapabilityAssessmentActivityType"};
constexpr const char* EstimatedCapabilityActivity_Name{"EstimatedCapabilityActivity"};
constexpr const char* EstimatedSupportingCapabilityReport_Name{"EstimatedSupportingCapabilityReport"};

} // namespace CapabilityAssessmentActivityType_Names

void CapabilityAssessmentActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityAssessmentActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityAssessmentActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityAssessmentActivityType_Names::EstimatedCapabilityActivity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEstimatedCapabilityActivity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityAssessmentActivityType_Names::EstimatedSupportingCapabilityReport_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEstimatedSupportingCapabilityReport(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string CapabilityAssessmentActivityType::serialize(const uci::type::CapabilityAssessmentActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityAssessmentActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityAssessmentActivityType_Names::Extern_Type_Name);
  }
  if (accessor.isEstimatedCapabilityActivity()) {
    ActivityBaseType::serialize(accessor.getEstimatedCapabilityActivity(), node, CapabilityAssessmentActivityType_Names::EstimatedCapabilityActivity_Name);
  } else if (accessor.isEstimatedSupportingCapabilityReport()) {
    SupportCapabilityStatusBaseType::serialize(accessor.getEstimatedSupportingCapabilityReport(), node, CapabilityAssessmentActivityType_Names::EstimatedSupportingCapabilityReport_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityAssessmentActivityType& CapabilityAssessmentActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityAssessmentActivityType>().release());
}

uci::type::CapabilityAssessmentActivityType& CapabilityAssessmentActivityType::create(const uci::type::CapabilityAssessmentActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityAssessmentActivityType> newAccessor{boost::make_unique<asb_uci::type::CapabilityAssessmentActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityAssessmentActivityType::destroy(uci::type::CapabilityAssessmentActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityAssessmentActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

