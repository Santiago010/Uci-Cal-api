/** @file VCM_IntegratorSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VCM_IntegratorSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AS_IntegratorModeEnum.h"
#include "asb_uci/type/AS_IntegratorStepModeEnum.h"
#include "asb_uci/type/AS_PartialDerivativesEnum.h"
#include "asb_uci/type/InitialStepSizeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AS_IntegratorModeEnum.h"
#include "uci/type/AS_IntegratorStepModeEnum.h"
#include "uci/type/AS_PartialDerivativesEnum.h"
#include "uci/type/DoublePositiveType.h"
#include "uci/type/InitialStepSizeEnum.h"
#include "uci/type/VCM_IntegratorSettingsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VCM_IntegratorSettingsType::VCM_IntegratorSettingsType()
  : integratorMode_Accessor{boost::make_unique<AS_IntegratorModeEnum>()},
    typeOfPartialDerivatives_Accessor{boost::make_unique<AS_PartialDerivativesEnum>()},
    stepMode_Accessor{boost::make_unique<AS_IntegratorStepModeEnum>()},
    initialStepSizeSelectionControl_Accessor{boost::make_unique<InitialStepSizeEnum>()} {
}

VCM_IntegratorSettingsType::~VCM_IntegratorSettingsType() = default;

void VCM_IntegratorSettingsType::copy(const uci::type::VCM_IntegratorSettingsType& accessor) {
  copyImpl(accessor, false);
}

void VCM_IntegratorSettingsType::copyImpl(const uci::type::VCM_IntegratorSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VCM_IntegratorSettingsType&>(accessor);
    setIntegratorMode(*(accessorImpl.integratorMode_Accessor));
    setTypeOfPartialDerivatives(*(accessorImpl.typeOfPartialDerivatives_Accessor));
    setStepMode(*(accessorImpl.stepMode_Accessor));
    setIsFixedStepSize(accessorImpl.isFixedStepSize_Accessor);
    setInitialStepSizeSelectionControl(*(accessorImpl.initialStepSizeSelectionControl_Accessor));
    if (accessorImpl.hasInitialStepSize()) {
      setInitialStepSize(accessorImpl.getInitialStepSize());
    } else {
      clearInitialStepSize();
    }
    if (accessorImpl.hasErrorControl()) {
      setErrorControl(accessorImpl.getErrorControl());
    } else {
      clearErrorControl();
    }
  }
}

void VCM_IntegratorSettingsType::reset() noexcept {
  integratorMode_Accessor->reset();
  typeOfPartialDerivatives_Accessor->reset();
  stepMode_Accessor->reset();
  isFixedStepSize_Accessor = false;
  initialStepSizeSelectionControl_Accessor->reset();
  clearInitialStepSize();
  clearErrorControl();
}

const uci::type::AS_IntegratorModeEnum& VCM_IntegratorSettingsType::getIntegratorMode() const {
  return *integratorMode_Accessor;
}

uci::type::AS_IntegratorModeEnum& VCM_IntegratorSettingsType::getIntegratorMode() {
  return *integratorMode_Accessor;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setIntegratorMode(const uci::type::AS_IntegratorModeEnum& accessor) {
  if (&accessor != integratorMode_Accessor.get()) {
    integratorMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setIntegratorMode(uci::type::AS_IntegratorModeEnum::EnumerationItem value) {
  integratorMode_Accessor->setValue(value);
  return *this;
}


const uci::type::AS_PartialDerivativesEnum& VCM_IntegratorSettingsType::getTypeOfPartialDerivatives() const {
  return *typeOfPartialDerivatives_Accessor;
}

uci::type::AS_PartialDerivativesEnum& VCM_IntegratorSettingsType::getTypeOfPartialDerivatives() {
  return *typeOfPartialDerivatives_Accessor;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setTypeOfPartialDerivatives(const uci::type::AS_PartialDerivativesEnum& accessor) {
  if (&accessor != typeOfPartialDerivatives_Accessor.get()) {
    typeOfPartialDerivatives_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setTypeOfPartialDerivatives(uci::type::AS_PartialDerivativesEnum::EnumerationItem value) {
  typeOfPartialDerivatives_Accessor->setValue(value);
  return *this;
}


const uci::type::AS_IntegratorStepModeEnum& VCM_IntegratorSettingsType::getStepMode() const {
  return *stepMode_Accessor;
}

uci::type::AS_IntegratorStepModeEnum& VCM_IntegratorSettingsType::getStepMode() {
  return *stepMode_Accessor;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setStepMode(const uci::type::AS_IntegratorStepModeEnum& accessor) {
  if (&accessor != stepMode_Accessor.get()) {
    stepMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setStepMode(uci::type::AS_IntegratorStepModeEnum::EnumerationItem value) {
  stepMode_Accessor->setValue(value);
  return *this;
}


xs::Boolean VCM_IntegratorSettingsType::getIsFixedStepSize() const {
  return isFixedStepSize_Accessor;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setIsFixedStepSize(xs::Boolean value) {
  isFixedStepSize_Accessor = value;
  return *this;
}


const uci::type::InitialStepSizeEnum& VCM_IntegratorSettingsType::getInitialStepSizeSelectionControl() const {
  return *initialStepSizeSelectionControl_Accessor;
}

uci::type::InitialStepSizeEnum& VCM_IntegratorSettingsType::getInitialStepSizeSelectionControl() {
  return *initialStepSizeSelectionControl_Accessor;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setInitialStepSizeSelectionControl(const uci::type::InitialStepSizeEnum& accessor) {
  if (&accessor != initialStepSizeSelectionControl_Accessor.get()) {
    initialStepSizeSelectionControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setInitialStepSizeSelectionControl(uci::type::InitialStepSizeEnum::EnumerationItem value) {
  initialStepSizeSelectionControl_Accessor->setValue(value);
  return *this;
}


uci::type::DoublePositiveTypeValue VCM_IntegratorSettingsType::getInitialStepSize() const {
  if (initialStepSize_Accessor) {
    return *initialStepSize_Accessor;
  }
  throw uci::base::UCIException("Error in getInitialStepSize(): An attempt was made to get an optional field that was not enabled, call hasInitialStepSize() to determine if it is safe to call getInitialStepSize()");
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setInitialStepSize(uci::type::DoublePositiveTypeValue value) {
  initialStepSize_Accessor = value;
  return *this;
}

bool VCM_IntegratorSettingsType::hasInitialStepSize() const noexcept {
  return initialStepSize_Accessor.has_value();
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::clearInitialStepSize() noexcept {
  initialStepSize_Accessor.reset();
  return *this;
}

xs::Double VCM_IntegratorSettingsType::getErrorControl() const {
  if (errorControl_Accessor) {
    return *errorControl_Accessor;
  }
  throw uci::base::UCIException("Error in getErrorControl(): An attempt was made to get an optional field that was not enabled, call hasErrorControl() to determine if it is safe to call getErrorControl()");
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::setErrorControl(xs::Double value) {
  errorControl_Accessor = value;
  return *this;
}

bool VCM_IntegratorSettingsType::hasErrorControl() const noexcept {
  return errorControl_Accessor.has_value();
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::clearErrorControl() noexcept {
  errorControl_Accessor.reset();
  return *this;
}

std::unique_ptr<VCM_IntegratorSettingsType> VCM_IntegratorSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vCM_IntegratorSettingsType : type};
  return (requestedType == uci::type::accessorType::vCM_IntegratorSettingsType) ? boost::make_unique<VCM_IntegratorSettingsType>() : nullptr;
}

/**  */
namespace VCM_IntegratorSettingsType_Names {

constexpr const char* Extern_Type_Name{"VCM_IntegratorSettingsType"};
constexpr const char* IntegratorMode_Name{"IntegratorMode"};
constexpr const char* TypeOfPartialDerivatives_Name{"TypeOfPartialDerivatives"};
constexpr const char* StepMode_Name{"StepMode"};
constexpr const char* IsFixedStepSize_Name{"IsFixedStepSize"};
constexpr const char* InitialStepSizeSelectionControl_Name{"InitialStepSizeSelectionControl"};
constexpr const char* InitialStepSize_Name{"InitialStepSize"};
constexpr const char* ErrorControl_Name{"ErrorControl"};

} // namespace VCM_IntegratorSettingsType_Names

void VCM_IntegratorSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VCM_IntegratorSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VCM_IntegratorSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VCM_IntegratorSettingsType_Names::IntegratorMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getIntegratorMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VCM_IntegratorSettingsType_Names::TypeOfPartialDerivatives_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTypeOfPartialDerivatives().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VCM_IntegratorSettingsType_Names::StepMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getStepMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VCM_IntegratorSettingsType_Names::IsFixedStepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsFixedStepSize(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VCM_IntegratorSettingsType_Names::InitialStepSizeSelectionControl_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getInitialStepSizeSelectionControl().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VCM_IntegratorSettingsType_Names::InitialStepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitialStepSize(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VCM_IntegratorSettingsType_Names::ErrorControl_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setErrorControl(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string VCM_IntegratorSettingsType::serialize(const uci::type::VCM_IntegratorSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VCM_IntegratorSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VCM_IntegratorSettingsType_Names::Extern_Type_Name);
  }
  AS_IntegratorModeEnum::serialize(accessor.getIntegratorMode(), node, VCM_IntegratorSettingsType_Names::IntegratorMode_Name, false);
  AS_PartialDerivativesEnum::serialize(accessor.getTypeOfPartialDerivatives(), node, VCM_IntegratorSettingsType_Names::TypeOfPartialDerivatives_Name, false);
  AS_IntegratorStepModeEnum::serialize(accessor.getStepMode(), node, VCM_IntegratorSettingsType_Names::StepMode_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIsFixedStepSize(), node, VCM_IntegratorSettingsType_Names::IsFixedStepSize_Name);
  InitialStepSizeEnum::serialize(accessor.getInitialStepSizeSelectionControl(), node, VCM_IntegratorSettingsType_Names::InitialStepSizeSelectionControl_Name, false);
  if (accessor.hasInitialStepSize()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInitialStepSize(), node, VCM_IntegratorSettingsType_Names::InitialStepSize_Name);
  }
  if (accessor.hasErrorControl()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getErrorControl(), node, VCM_IntegratorSettingsType_Names::ErrorControl_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VCM_IntegratorSettingsType>().release());
}

uci::type::VCM_IntegratorSettingsType& VCM_IntegratorSettingsType::create(const uci::type::VCM_IntegratorSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VCM_IntegratorSettingsType> newAccessor{boost::make_unique<asb_uci::type::VCM_IntegratorSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VCM_IntegratorSettingsType::destroy(uci::type::VCM_IntegratorSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::VCM_IntegratorSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

