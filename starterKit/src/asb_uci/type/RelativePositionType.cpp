/** @file RelativePositionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RelativePositionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/LineOfSightChoiceType.h"
#include "../../../include/asb_uci/type/Point2D_ReferenceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LineOfSightChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_ReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativePositionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RelativePositionType::RelativePositionType()
  : referencePoint_Accessor{boost::make_unique<Point2D_ReferenceType>()} {
}

RelativePositionType::~RelativePositionType() = default;

void RelativePositionType::copy(const uci::type::RelativePositionType& accessor) {
  copyImpl(accessor, false);
}

void RelativePositionType::copyImpl(const uci::type::RelativePositionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RelativePositionType&>(accessor);
    setReferencePoint(*(accessorImpl.referencePoint_Accessor));
    if (accessorImpl.lOS_Accessor) {
      setLOS(*(accessorImpl.lOS_Accessor));
    } else {
      lOS_Accessor.reset();
    }
  }
}

void RelativePositionType::reset() noexcept {
  referencePoint_Accessor->reset();
  lOS_Accessor.reset();
}

const uci::type::Point2D_ReferenceType& RelativePositionType::getReferencePoint() const {
  return *referencePoint_Accessor;
}

uci::type::Point2D_ReferenceType& RelativePositionType::getReferencePoint() {
  return *referencePoint_Accessor;
}

uci::type::RelativePositionType& RelativePositionType::setReferencePoint(const uci::type::Point2D_ReferenceType& accessor) {
  if (&accessor != referencePoint_Accessor.get()) {
    referencePoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LineOfSightChoiceType& RelativePositionType::getLOS_() const {
  if (lOS_Accessor) {
    return *lOS_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS(): An attempt was made to get an optional field that was not enabled, call hasLOS() to determine if it is safe to call getLOS()");
}

const uci::type::LineOfSightChoiceType& RelativePositionType::getLOS() const {
  return getLOS_();
}

uci::type::LineOfSightChoiceType& RelativePositionType::getLOS() {
  return getLOS_();
}

uci::type::RelativePositionType& RelativePositionType::setLOS(const uci::type::LineOfSightChoiceType& accessor) {
  enableLOS();
  if (&accessor != lOS_Accessor.get()) {
    lOS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelativePositionType::hasLOS() const noexcept {
  return static_cast<bool>(lOS_Accessor);
}

uci::type::LineOfSightChoiceType& RelativePositionType::enableLOS(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lineOfSightChoiceType : type};
  if ((!lOS_Accessor) || (lOS_Accessor->getAccessorType() != requestedType)) {
    lOS_Accessor = LineOfSightChoiceType::create(requestedType);
    if (!lOS_Accessor) {
      throw uci::base::UCIException("Error in enableLOS(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_Accessor;
}

uci::type::RelativePositionType& RelativePositionType::clearLOS() noexcept {
  lOS_Accessor.reset();
  return *this;
}

std::unique_ptr<RelativePositionType> RelativePositionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativePositionType : type};
  return (requestedType == uci::type::accessorType::relativePositionType) ? boost::make_unique<RelativePositionType>() : nullptr;
}

/**  */
namespace RelativePositionType_Names {

constexpr const char* Extern_Type_Name{"RelativePositionType"};
constexpr const char* ReferencePoint_Name{"ReferencePoint"};
constexpr const char* LOS_Name{"LOS"};

} // namespace RelativePositionType_Names

void RelativePositionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RelativePositionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RelativePositionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RelativePositionType_Names::ReferencePoint_Name) {
      Point2D_ReferenceType::deserialize(valueType.second, accessor.getReferencePoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelativePositionType_Names::LOS_Name) {
      LineOfSightChoiceType::deserialize(valueType.second, accessor.enableLOS(), nodeName, nsPrefix);
    }
  }
}

std::string RelativePositionType::serialize(const uci::type::RelativePositionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RelativePositionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RelativePositionType_Names::Extern_Type_Name);
  }
  Point2D_ReferenceType::serialize(accessor.getReferencePoint(), node, RelativePositionType_Names::ReferencePoint_Name);
  if (accessor.hasLOS()) {
    LineOfSightChoiceType::serialize(accessor.getLOS(), node, RelativePositionType_Names::LOS_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RelativePositionType& RelativePositionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RelativePositionType>().release());
}

uci::type::RelativePositionType& RelativePositionType::create(const uci::type::RelativePositionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RelativePositionType> newAccessor{boost::make_unique<asb_uci::type::RelativePositionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RelativePositionType::destroy(uci::type::RelativePositionType& accessor) {
  delete dynamic_cast<asb_uci::type::RelativePositionType*>(&accessor);
}

} // namespace type

} // namespace uci

