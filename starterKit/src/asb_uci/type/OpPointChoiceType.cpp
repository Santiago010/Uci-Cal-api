/** @file OpPointChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpPointChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OpPointPositionType.h"
#include "../../../include/asb_uci/type/Point2D_RelativeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointPositionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_RelativeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpPointChoiceType::OpPointChoiceType() = default;

OpPointChoiceType::~OpPointChoiceType() = default;

void OpPointChoiceType::copy(const uci::type::OpPointChoiceType& accessor) {
  copyImpl(accessor, false);
}

void OpPointChoiceType::copyImpl(const uci::type::OpPointChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpPointChoiceType&>(accessor);
    if (accessorImpl.point_Accessor) {
      setPoint(*(accessorImpl.point_Accessor));
    } else {
      point_Accessor.reset();
    }
    if (accessorImpl.relativePoint_Accessor) {
      setRelativePoint(*(accessorImpl.relativePoint_Accessor));
    } else {
      relativePoint_Accessor.reset();
    }
  }
}

void OpPointChoiceType::reset() noexcept {
  point_Accessor.reset();
  relativePoint_Accessor.reset();
}

uci::type::OpPointChoiceType::OpPointChoiceTypeChoice OpPointChoiceType::getOpPointChoiceTypeChoiceOrdinal() const noexcept {
  if (point_Accessor) {
    return OPPOINTCHOICETYPE_CHOICE_POINT;
  }
  if (relativePoint_Accessor) {
    return OPPOINTCHOICETYPE_CHOICE_RELATIVEPOINT;
  }
  return OPPOINTCHOICETYPE_CHOICE_NONE;
}

uci::type::OpPointChoiceType& OpPointChoiceType::setOpPointChoiceTypeChoiceOrdinal(uci::type::OpPointChoiceType::OpPointChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPPOINTCHOICETYPE_CHOICE_POINT:
      choosePoint("setOpPointChoiceTypeChoiceOrdinal", type);
      break;
    case OPPOINTCHOICETYPE_CHOICE_RELATIVEPOINT:
      chooseRelativePoint("setOpPointChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpPointChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OpPointPositionType& OpPointChoiceType::getPoint_() const {
  if (point_Accessor) {
    return *point_Accessor;
  }
  throw uci::base::UCIException("Error in getPoint(): Unable to get Point, field not selected");
}

const uci::type::OpPointPositionType& OpPointChoiceType::getPoint() const {
  return getPoint_();
}

uci::type::OpPointPositionType& OpPointChoiceType::getPoint() {
  return getPoint_();
}

uci::type::OpPointChoiceType& OpPointChoiceType::setPoint(const uci::type::OpPointPositionType& accessor) {
  choosePoint();
  if (&accessor != point_Accessor.get()) {
    point_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpPointChoiceType::isPoint() const noexcept {
  return static_cast<bool>(point_Accessor);
}

uci::type::OpPointPositionType& OpPointChoiceType::choosePoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  relativePoint_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointPositionType : type};
  if ((!point_Accessor) || (point_Accessor->getAccessorType() != requestedType)) {
    point_Accessor = OpPointPositionType::create(type);
    if (!point_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *point_Accessor;
}

uci::type::OpPointPositionType& OpPointChoiceType::choosePoint(uci::base::accessorType::AccessorType type) {
  return choosePoint("choosePoint", type);
}

uci::type::Point2D_RelativeType& OpPointChoiceType::getRelativePoint_() const {
  if (relativePoint_Accessor) {
    return *relativePoint_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativePoint(): Unable to get RelativePoint, field not selected");
}

const uci::type::Point2D_RelativeType& OpPointChoiceType::getRelativePoint() const {
  return getRelativePoint_();
}

uci::type::Point2D_RelativeType& OpPointChoiceType::getRelativePoint() {
  return getRelativePoint_();
}

uci::type::OpPointChoiceType& OpPointChoiceType::setRelativePoint(const uci::type::Point2D_RelativeType& accessor) {
  chooseRelativePoint();
  if (&accessor != relativePoint_Accessor.get()) {
    relativePoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpPointChoiceType::isRelativePoint() const noexcept {
  return static_cast<bool>(relativePoint_Accessor);
}

uci::type::Point2D_RelativeType& OpPointChoiceType::chooseRelativePoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  point_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_RelativeType : type};
  if ((!relativePoint_Accessor) || (relativePoint_Accessor->getAccessorType() != requestedType)) {
    relativePoint_Accessor = Point2D_RelativeType::create(type);
    if (!relativePoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativePoint_Accessor;
}

uci::type::Point2D_RelativeType& OpPointChoiceType::chooseRelativePoint(uci::base::accessorType::AccessorType type) {
  return chooseRelativePoint("chooseRelativePoint", type);
}

std::unique_ptr<OpPointChoiceType> OpPointChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointChoiceType : type};
  return (requestedType == uci::type::accessorType::opPointChoiceType) ? boost::make_unique<OpPointChoiceType>() : nullptr;
}

/**  */
namespace OpPointChoiceType_Names {

constexpr const char* Extern_Type_Name{"OpPointChoiceType"};
constexpr const char* Point_Name{"Point"};
constexpr const char* RelativePoint_Name{"RelativePoint"};

} // namespace OpPointChoiceType_Names

void OpPointChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpPointChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpPointChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpPointChoiceType_Names::Point_Name) {
      OpPointPositionType::deserialize(valueType.second, accessor.choosePoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpPointChoiceType_Names::RelativePoint_Name) {
      Point2D_RelativeType::deserialize(valueType.second, accessor.chooseRelativePoint(), nodeName, nsPrefix);
    }
  }
}

std::string OpPointChoiceType::serialize(const uci::type::OpPointChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpPointChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpPointChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isPoint()) {
    OpPointPositionType::serialize(accessor.getPoint(), node, OpPointChoiceType_Names::Point_Name);
  } else if (accessor.isRelativePoint()) {
    Point2D_RelativeType::serialize(accessor.getRelativePoint(), node, OpPointChoiceType_Names::RelativePoint_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpPointChoiceType& OpPointChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpPointChoiceType>().release());
}

uci::type::OpPointChoiceType& OpPointChoiceType::create(const uci::type::OpPointChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpPointChoiceType> newAccessor{boost::make_unique<asb_uci::type::OpPointChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpPointChoiceType::destroy(uci::type::OpPointChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::OpPointChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

