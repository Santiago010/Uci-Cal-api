/** @file CommRelayTaskType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommRelayTaskType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AssetType.h"
#include "asb_uci/type/CommRelayTaskBaseType.h"
#include "asb_uci/type/LocationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AssetType.h"
#include "uci/type/CommRelayTaskType.h"
#include "uci/type/LocationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommRelayTaskType::CommRelayTaskType()
  : relayNode_Accessor{boost::make_unique<RelayNode>(0, SIZE_MAX)} {
}

CommRelayTaskType::~CommRelayTaskType() = default;

void CommRelayTaskType::copy(const uci::type::CommRelayTaskType& accessor) {
  copyImpl(accessor, false);
}

void CommRelayTaskType::copyImpl(const uci::type::CommRelayTaskType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommRelayTaskBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommRelayTaskType&>(accessor);
    if (accessorImpl.location_Accessor) {
      setLocation(*(accessorImpl.location_Accessor));
    } else {
      location_Accessor.reset();
    }
    setRelayNode(*(accessorImpl.relayNode_Accessor));
  }
}

void CommRelayTaskType::reset() noexcept {
  CommRelayTaskBaseType::reset();
  location_Accessor.reset();
  relayNode_Accessor->reset();
}

uci::type::LocationType& CommRelayTaskType::getLocation_() const {
  if (location_Accessor) {
    return *location_Accessor;
  }
  throw uci::base::UCIException("Error in getLocation(): An attempt was made to get an optional field that was not enabled, call hasLocation() to determine if it is safe to call getLocation()");
}

const uci::type::LocationType& CommRelayTaskType::getLocation() const {
  return getLocation_();
}

uci::type::LocationType& CommRelayTaskType::getLocation() {
  return getLocation_();
}

uci::type::CommRelayTaskType& CommRelayTaskType::setLocation(const uci::type::LocationType& accessor) {
  enableLocation();
  if (&accessor != location_Accessor.get()) {
    location_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommRelayTaskType::hasLocation() const noexcept {
  return static_cast<bool>(location_Accessor);
}

uci::type::LocationType& CommRelayTaskType::enableLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locationType : type};
  if ((!location_Accessor) || (location_Accessor->getAccessorType() != requestedType)) {
    location_Accessor = LocationType::create(requestedType);
    if (!location_Accessor) {
      throw uci::base::UCIException("Error in enableLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *location_Accessor;
}

uci::type::CommRelayTaskType& CommRelayTaskType::clearLocation() noexcept {
  location_Accessor.reset();
  return *this;
}

const uci::type::CommRelayTaskType::RelayNode& CommRelayTaskType::getRelayNode() const {
  return *relayNode_Accessor;
}

uci::type::CommRelayTaskType::RelayNode& CommRelayTaskType::getRelayNode() {
  return *relayNode_Accessor;
}

uci::type::CommRelayTaskType& CommRelayTaskType::setRelayNode(const uci::type::CommRelayTaskType::RelayNode& accessor) {
  if (&accessor != relayNode_Accessor.get()) {
    relayNode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommRelayTaskType> CommRelayTaskType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commRelayTaskType : type};
  return (requestedType == uci::type::accessorType::commRelayTaskType) ? boost::make_unique<CommRelayTaskType>() : nullptr;
}

/**  */
namespace CommRelayTaskType_Names {

constexpr const char* Extern_Type_Name{"CommRelayTaskType"};
constexpr const char* Location_Name{"Location"};
constexpr const char* RelayNode_Name{"RelayNode"};

} // namespace CommRelayTaskType_Names

void CommRelayTaskType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommRelayTaskType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommRelayTaskType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommRelayTaskType_Names::Location_Name) {
      LocationType::deserialize(valueType.second, accessor.enableLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommRelayTaskType_Names::RelayNode_Name) {
      uci::type::CommRelayTaskType::RelayNode& boundedList = accessor.getRelayNode();
      const uci::type::CommRelayTaskType::RelayNode::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::AssetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    }
  }
  CommRelayTaskBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommRelayTaskType::serialize(const uci::type::CommRelayTaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommRelayTaskType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommRelayTaskType_Names::Extern_Type_Name);
  }
  CommRelayTaskBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasLocation()) {
    LocationType::serialize(accessor.getLocation(), node, CommRelayTaskType_Names::Location_Name);
  }
  {
    const uci::type::CommRelayTaskType::RelayNode& boundedList = accessor.getRelayNode();
    for (uci::type::CommRelayTaskType::RelayNode::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AssetType::serialize(boundedList.at(i), node, CommRelayTaskType_Names::RelayNode_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommRelayTaskType& CommRelayTaskType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommRelayTaskType>().release());
}

uci::type::CommRelayTaskType& CommRelayTaskType::create(const uci::type::CommRelayTaskType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommRelayTaskType> newAccessor{boost::make_unique<asb_uci::type::CommRelayTaskType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommRelayTaskType::destroy(uci::type::CommRelayTaskType& accessor) {
  delete dynamic_cast<asb_uci::type::CommRelayTaskType*>(&accessor);
}

} // namespace type

} // namespace uci

