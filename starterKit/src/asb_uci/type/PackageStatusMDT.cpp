/** @file PackageStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PackageStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PackageID_Type.h"
#include "asb_uci/type/PackagePartnerStatusType.h"
#include "asb_uci/type/SystemSourceEnum.h"
#include "asb_uci/type/SystemStateEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PackageID_Type.h"
#include "uci/type/PackagePartnerStatusType.h"
#include "uci/type/PackageStatusMDT.h"
#include "uci/type/SystemSourceEnum.h"
#include "uci/type/SystemStateEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PackageStatusMDT::PackageStatusMDT()
  : packageID_Accessor{boost::make_unique<PackageID_Type>()},
    packageState_Accessor{boost::make_unique<SystemStateEnum>()},
    packageSource_Accessor{boost::make_unique<SystemSourceEnum>()},
    packagePartnerStatus_Accessor{boost::make_unique<PackagePartnerStatus>(1, SIZE_MAX)} {
}

PackageStatusMDT::~PackageStatusMDT() = default;

void PackageStatusMDT::copy(const uci::type::PackageStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void PackageStatusMDT::copyImpl(const uci::type::PackageStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PackageStatusMDT&>(accessor);
    setPackageID(*(accessorImpl.packageID_Accessor));
    setPackageState(*(accessorImpl.packageState_Accessor));
    setPackageSource(*(accessorImpl.packageSource_Accessor));
    setPackagePartnerStatus(*(accessorImpl.packagePartnerStatus_Accessor));
  }
}

void PackageStatusMDT::reset() noexcept {
  packageID_Accessor->reset();
  packageState_Accessor->reset();
  packageSource_Accessor->reset();
  packagePartnerStatus_Accessor->reset();
}

const uci::type::PackageID_Type& PackageStatusMDT::getPackageID() const {
  return *packageID_Accessor;
}

uci::type::PackageID_Type& PackageStatusMDT::getPackageID() {
  return *packageID_Accessor;
}

uci::type::PackageStatusMDT& PackageStatusMDT::setPackageID(const uci::type::PackageID_Type& accessor) {
  if (&accessor != packageID_Accessor.get()) {
    packageID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemStateEnum& PackageStatusMDT::getPackageState() const {
  return *packageState_Accessor;
}

uci::type::SystemStateEnum& PackageStatusMDT::getPackageState() {
  return *packageState_Accessor;
}

uci::type::PackageStatusMDT& PackageStatusMDT::setPackageState(const uci::type::SystemStateEnum& accessor) {
  if (&accessor != packageState_Accessor.get()) {
    packageState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PackageStatusMDT& PackageStatusMDT::setPackageState(uci::type::SystemStateEnum::EnumerationItem value) {
  packageState_Accessor->setValue(value);
  return *this;
}


const uci::type::SystemSourceEnum& PackageStatusMDT::getPackageSource() const {
  return *packageSource_Accessor;
}

uci::type::SystemSourceEnum& PackageStatusMDT::getPackageSource() {
  return *packageSource_Accessor;
}

uci::type::PackageStatusMDT& PackageStatusMDT::setPackageSource(const uci::type::SystemSourceEnum& accessor) {
  if (&accessor != packageSource_Accessor.get()) {
    packageSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PackageStatusMDT& PackageStatusMDT::setPackageSource(uci::type::SystemSourceEnum::EnumerationItem value) {
  packageSource_Accessor->setValue(value);
  return *this;
}


const uci::type::PackageStatusMDT::PackagePartnerStatus& PackageStatusMDT::getPackagePartnerStatus() const {
  return *packagePartnerStatus_Accessor;
}

uci::type::PackageStatusMDT::PackagePartnerStatus& PackageStatusMDT::getPackagePartnerStatus() {
  return *packagePartnerStatus_Accessor;
}

uci::type::PackageStatusMDT& PackageStatusMDT::setPackagePartnerStatus(const uci::type::PackageStatusMDT::PackagePartnerStatus& accessor) {
  if (&accessor != packagePartnerStatus_Accessor.get()) {
    packagePartnerStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PackageStatusMDT> PackageStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::packageStatusMDT : type};
  return (requestedType == uci::type::accessorType::packageStatusMDT) ? boost::make_unique<PackageStatusMDT>() : nullptr;
}

/**  */
namespace PackageStatusMDT_Names {

constexpr const char* Extern_Type_Name{"PackageStatusMDT"};
constexpr const char* PackageID_Name{"PackageID"};
constexpr const char* PackageState_Name{"PackageState"};
constexpr const char* PackageSource_Name{"PackageSource"};
constexpr const char* PackagePartnerStatus_Name{"PackagePartnerStatus"};

} // namespace PackageStatusMDT_Names

void PackageStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PackageStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PackageStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PackageStatusMDT_Names::PackageID_Name) {
      PackageID_Type::deserialize(valueType.second, accessor.getPackageID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PackageStatusMDT_Names::PackageState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPackageState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PackageStatusMDT_Names::PackageSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPackageSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PackageStatusMDT_Names::PackagePartnerStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PackageStatusMDT::PackagePartnerStatus& boundedList = accessor.getPackagePartnerStatus();
        const uci::type::PackageStatusMDT::PackagePartnerStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PackagePartnerStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PackageStatusMDT::serialize(const uci::type::PackageStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PackageStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PackageStatusMDT_Names::Extern_Type_Name);
  }
  PackageID_Type::serialize(accessor.getPackageID(), node, PackageStatusMDT_Names::PackageID_Name);
  SystemStateEnum::serialize(accessor.getPackageState(), node, PackageStatusMDT_Names::PackageState_Name, false);
  SystemSourceEnum::serialize(accessor.getPackageSource(), node, PackageStatusMDT_Names::PackageSource_Name, false);
  {
    const uci::type::PackageStatusMDT::PackagePartnerStatus& boundedList = accessor.getPackagePartnerStatus();
    for (uci::type::PackageStatusMDT::PackagePartnerStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PackagePartnerStatusType::serialize(boundedList.at(i), node, PackageStatusMDT_Names::PackagePartnerStatus_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PackageStatusMDT& PackageStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PackageStatusMDT>().release());
}

uci::type::PackageStatusMDT& PackageStatusMDT::create(const uci::type::PackageStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PackageStatusMDT> newAccessor{boost::make_unique<asb_uci::type::PackageStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PackageStatusMDT::destroy(uci::type::PackageStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PackageStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

