/** @file MissionPlanActivationDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MissionPlanActivationDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/MissionPlanActivationType.h"
#include "../../../include/asb_uci/type/MissionPlanSubplanActivationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanActivationDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanSubplanActivationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanActivationDetailsType::MissionPlanActivationDetailsType() = default;

MissionPlanActivationDetailsType::~MissionPlanActivationDetailsType() = default;

void MissionPlanActivationDetailsType::copy(const uci::type::MissionPlanActivationDetailsType& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanActivationDetailsType::copyImpl(const uci::type::MissionPlanActivationDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanActivationDetailsType&>(accessor);
    if (accessorImpl.byMissionPlan_Accessor) {
      setByMissionPlan(*(accessorImpl.byMissionPlan_Accessor));
    } else {
      byMissionPlan_Accessor.reset();
    }
    if (accessorImpl.bySubPlan_Accessor) {
      setBySubPlan(*(accessorImpl.bySubPlan_Accessor));
    } else {
      bySubPlan_Accessor.reset();
    }
  }
}

void MissionPlanActivationDetailsType::reset() noexcept {
  byMissionPlan_Accessor.reset();
  bySubPlan_Accessor.reset();
}

uci::type::MissionPlanActivationDetailsType::MissionPlanActivationDetailsTypeChoice MissionPlanActivationDetailsType::getMissionPlanActivationDetailsTypeChoiceOrdinal() const noexcept {
  if (byMissionPlan_Accessor) {
    return MISSIONPLANACTIVATIONDETAILSTYPE_CHOICE_BYMISSIONPLAN;
  }
  if (bySubPlan_Accessor) {
    return MISSIONPLANACTIVATIONDETAILSTYPE_CHOICE_BYSUBPLAN;
  }
  return MISSIONPLANACTIVATIONDETAILSTYPE_CHOICE_NONE;
}

uci::type::MissionPlanActivationDetailsType& MissionPlanActivationDetailsType::setMissionPlanActivationDetailsTypeChoiceOrdinal(uci::type::MissionPlanActivationDetailsType::MissionPlanActivationDetailsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case MISSIONPLANACTIVATIONDETAILSTYPE_CHOICE_BYMISSIONPLAN:
      chooseByMissionPlan("setMissionPlanActivationDetailsTypeChoiceOrdinal", type);
      break;
    case MISSIONPLANACTIVATIONDETAILSTYPE_CHOICE_BYSUBPLAN:
      chooseBySubPlan("setMissionPlanActivationDetailsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setMissionPlanActivationDetailsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MissionPlanActivationType& MissionPlanActivationDetailsType::getByMissionPlan_() const {
  if (byMissionPlan_Accessor) {
    return *byMissionPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getByMissionPlan(): Unable to get ByMissionPlan, field not selected");
}

const uci::type::MissionPlanActivationType& MissionPlanActivationDetailsType::getByMissionPlan() const {
  return getByMissionPlan_();
}

uci::type::MissionPlanActivationType& MissionPlanActivationDetailsType::getByMissionPlan() {
  return getByMissionPlan_();
}

uci::type::MissionPlanActivationDetailsType& MissionPlanActivationDetailsType::setByMissionPlan(const uci::type::MissionPlanActivationType& accessor) {
  chooseByMissionPlan();
  if (&accessor != byMissionPlan_Accessor.get()) {
    byMissionPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanActivationDetailsType::isByMissionPlan() const noexcept {
  return static_cast<bool>(byMissionPlan_Accessor);
}

uci::type::MissionPlanActivationType& MissionPlanActivationDetailsType::chooseByMissionPlan(const std::string& method, uci::base::accessorType::AccessorType type) {
  bySubPlan_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanActivationType : type};
  if ((!byMissionPlan_Accessor) || (byMissionPlan_Accessor->getAccessorType() != requestedType)) {
    byMissionPlan_Accessor = MissionPlanActivationType::create(type);
    if (!byMissionPlan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byMissionPlan_Accessor;
}

uci::type::MissionPlanActivationType& MissionPlanActivationDetailsType::chooseByMissionPlan(uci::base::accessorType::AccessorType type) {
  return chooseByMissionPlan("chooseByMissionPlan", type);
}

uci::type::MissionPlanSubplanActivationType& MissionPlanActivationDetailsType::getBySubPlan_() const {
  if (bySubPlan_Accessor) {
    return *bySubPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getBySubPlan(): Unable to get BySubPlan, field not selected");
}

const uci::type::MissionPlanSubplanActivationType& MissionPlanActivationDetailsType::getBySubPlan() const {
  return getBySubPlan_();
}

uci::type::MissionPlanSubplanActivationType& MissionPlanActivationDetailsType::getBySubPlan() {
  return getBySubPlan_();
}

uci::type::MissionPlanActivationDetailsType& MissionPlanActivationDetailsType::setBySubPlan(const uci::type::MissionPlanSubplanActivationType& accessor) {
  chooseBySubPlan();
  if (&accessor != bySubPlan_Accessor.get()) {
    bySubPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanActivationDetailsType::isBySubPlan() const noexcept {
  return static_cast<bool>(bySubPlan_Accessor);
}

uci::type::MissionPlanSubplanActivationType& MissionPlanActivationDetailsType::chooseBySubPlan(const std::string& method, uci::base::accessorType::AccessorType type) {
  byMissionPlan_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanSubplanActivationType : type};
  if ((!bySubPlan_Accessor) || (bySubPlan_Accessor->getAccessorType() != requestedType)) {
    bySubPlan_Accessor = MissionPlanSubplanActivationType::create(type);
    if (!bySubPlan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bySubPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanActivationDetailsType::chooseBySubPlan(uci::base::accessorType::AccessorType type) {
  return chooseBySubPlan("chooseBySubPlan", type);
}

std::unique_ptr<MissionPlanActivationDetailsType> MissionPlanActivationDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanActivationDetailsType : type};
  return (requestedType == uci::type::accessorType::missionPlanActivationDetailsType) ? boost::make_unique<MissionPlanActivationDetailsType>() : nullptr;
}

/**  */
namespace MissionPlanActivationDetailsType_Names {

constexpr const char* Extern_Type_Name{"MissionPlanActivationDetailsType"};
constexpr const char* ByMissionPlan_Name{"ByMissionPlan"};
constexpr const char* BySubPlan_Name{"BySubPlan"};

} // namespace MissionPlanActivationDetailsType_Names

void MissionPlanActivationDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanActivationDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanActivationDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanActivationDetailsType_Names::ByMissionPlan_Name) {
      MissionPlanActivationType::deserialize(valueType.second, accessor.chooseByMissionPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanActivationDetailsType_Names::BySubPlan_Name) {
      MissionPlanSubplanActivationType::deserialize(valueType.second, accessor.chooseBySubPlan(), nodeName, nsPrefix);
    }
  }
}

std::string MissionPlanActivationDetailsType::serialize(const uci::type::MissionPlanActivationDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanActivationDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanActivationDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.isByMissionPlan()) {
    MissionPlanActivationType::serialize(accessor.getByMissionPlan(), node, MissionPlanActivationDetailsType_Names::ByMissionPlan_Name);
  } else if (accessor.isBySubPlan()) {
    MissionPlanSubplanActivationType::serialize(accessor.getBySubPlan(), node, MissionPlanActivationDetailsType_Names::BySubPlan_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanActivationDetailsType& MissionPlanActivationDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanActivationDetailsType>().release());
}

uci::type::MissionPlanActivationDetailsType& MissionPlanActivationDetailsType::create(const uci::type::MissionPlanActivationDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanActivationDetailsType> newAccessor{boost::make_unique<asb_uci::type::MissionPlanActivationDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanActivationDetailsType::destroy(uci::type::MissionPlanActivationDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanActivationDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

