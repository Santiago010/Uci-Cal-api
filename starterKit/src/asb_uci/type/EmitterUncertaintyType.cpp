/** @file EmitterUncertaintyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EmitterUncertaintyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmitterUncertaintyChoiceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleHalfType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/EmitterUncertaintyChoiceType.h"
#include "uci/type/EmitterUncertaintyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterUncertaintyType::EmitterUncertaintyType()
  : uncertainty_Accessor{boost::make_unique<EmitterUncertaintyChoiceType>()} {
}

EmitterUncertaintyType::~EmitterUncertaintyType() = default;

void EmitterUncertaintyType::copy(const uci::type::EmitterUncertaintyType& accessor) {
  copyImpl(accessor, false);
}

void EmitterUncertaintyType::copyImpl(const uci::type::EmitterUncertaintyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterUncertaintyType&>(accessor);
    setUncertainty(*(accessorImpl.uncertainty_Accessor));
    if (accessorImpl.hasUncertaintyVertical()) {
      setUncertaintyVertical(accessorImpl.getUncertaintyVertical());
    } else {
      clearUncertaintyVertical();
    }
    if (accessorImpl.hasUncertaintyTilt()) {
      setUncertaintyTilt(accessorImpl.getUncertaintyTilt());
    } else {
      clearUncertaintyTilt();
    }
  }
}

void EmitterUncertaintyType::reset() noexcept {
  uncertainty_Accessor->reset();
  clearUncertaintyVertical();
  clearUncertaintyTilt();
}

const uci::type::EmitterUncertaintyChoiceType& EmitterUncertaintyType::getUncertainty() const {
  return *uncertainty_Accessor;
}

uci::type::EmitterUncertaintyChoiceType& EmitterUncertaintyType::getUncertainty() {
  return *uncertainty_Accessor;
}

uci::type::EmitterUncertaintyType& EmitterUncertaintyType::setUncertainty(const uci::type::EmitterUncertaintyChoiceType& accessor) {
  if (&accessor != uncertainty_Accessor.get()) {
    uncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DistanceTypeValue EmitterUncertaintyType::getUncertaintyVertical() const {
  if (uncertaintyVertical_Accessor) {
    return *uncertaintyVertical_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertaintyVertical(): An attempt was made to get an optional field that was not enabled, call hasUncertaintyVertical() to determine if it is safe to call getUncertaintyVertical()");
}

uci::type::EmitterUncertaintyType& EmitterUncertaintyType::setUncertaintyVertical(uci::type::DistanceTypeValue value) {
  uncertaintyVertical_Accessor = value;
  return *this;
}

bool EmitterUncertaintyType::hasUncertaintyVertical() const noexcept {
  return uncertaintyVertical_Accessor.has_value();
}

uci::type::EmitterUncertaintyType& EmitterUncertaintyType::clearUncertaintyVertical() noexcept {
  uncertaintyVertical_Accessor.reset();
  return *this;
}

uci::type::AngleHalfTypeValue EmitterUncertaintyType::getUncertaintyTilt() const {
  if (uncertaintyTilt_Accessor) {
    return *uncertaintyTilt_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertaintyTilt(): An attempt was made to get an optional field that was not enabled, call hasUncertaintyTilt() to determine if it is safe to call getUncertaintyTilt()");
}

uci::type::EmitterUncertaintyType& EmitterUncertaintyType::setUncertaintyTilt(uci::type::AngleHalfTypeValue value) {
  uncertaintyTilt_Accessor = value;
  return *this;
}

bool EmitterUncertaintyType::hasUncertaintyTilt() const noexcept {
  return uncertaintyTilt_Accessor.has_value();
}

uci::type::EmitterUncertaintyType& EmitterUncertaintyType::clearUncertaintyTilt() noexcept {
  uncertaintyTilt_Accessor.reset();
  return *this;
}

std::unique_ptr<EmitterUncertaintyType> EmitterUncertaintyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterUncertaintyType : type};
  return (requestedType == uci::type::accessorType::emitterUncertaintyType) ? boost::make_unique<EmitterUncertaintyType>() : nullptr;
}

/**  */
namespace EmitterUncertaintyType_Names {

constexpr const char* Extern_Type_Name{"EmitterUncertaintyType"};
constexpr const char* Uncertainty_Name{"Uncertainty"};
constexpr const char* UncertaintyVertical_Name{"UncertaintyVertical"};
constexpr const char* UncertaintyTilt_Name{"UncertaintyTilt"};

} // namespace EmitterUncertaintyType_Names

void EmitterUncertaintyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterUncertaintyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterUncertaintyType_Names::Uncertainty_Name) {
      EmitterUncertaintyChoiceType::deserialize(valueType.second, accessor.getUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterUncertaintyType_Names::UncertaintyVertical_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUncertaintyVertical(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EmitterUncertaintyType_Names::UncertaintyTilt_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUncertaintyTilt(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EmitterUncertaintyType::serialize(const uci::type::EmitterUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterUncertaintyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterUncertaintyType_Names::Extern_Type_Name);
  }
  EmitterUncertaintyChoiceType::serialize(accessor.getUncertainty(), node, EmitterUncertaintyType_Names::Uncertainty_Name);
  if (accessor.hasUncertaintyVertical()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getUncertaintyVertical(), node, EmitterUncertaintyType_Names::UncertaintyVertical_Name);
  }
  if (accessor.hasUncertaintyTilt()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getUncertaintyTilt(), node, EmitterUncertaintyType_Names::UncertaintyTilt_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterUncertaintyType& EmitterUncertaintyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterUncertaintyType>().release());
}

uci::type::EmitterUncertaintyType& EmitterUncertaintyType::create(const uci::type::EmitterUncertaintyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterUncertaintyType> newAccessor{boost::make_unique<asb_uci::type::EmitterUncertaintyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterUncertaintyType::destroy(uci::type::EmitterUncertaintyType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterUncertaintyType*>(&accessor);
}

} // namespace type

} // namespace uci

