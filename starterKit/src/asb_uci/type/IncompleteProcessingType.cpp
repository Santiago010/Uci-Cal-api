/** @file IncompleteProcessingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IncompleteProcessingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CannotComplyEnum.h"
#include "asb_uci/type/ID_Type.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CannotComplyEnum.h"
#include "uci/type/ID_Type.h"
#include "uci/type/IncompleteProcessingType.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IncompleteProcessingType::IncompleteProcessingType()
  : incompleteItemID_Accessor{boost::make_unique<ID_Type>()},
    reason_Accessor{boost::make_unique<CannotComplyEnum>()} {
}

IncompleteProcessingType::~IncompleteProcessingType() = default;

void IncompleteProcessingType::copy(const uci::type::IncompleteProcessingType& accessor) {
  copyImpl(accessor, false);
}

void IncompleteProcessingType::copyImpl(const uci::type::IncompleteProcessingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IncompleteProcessingType&>(accessor);
    setIncompleteItemID(*(accessorImpl.incompleteItemID_Accessor));
    setReason(*(accessorImpl.reason_Accessor));
    if (accessorImpl.description_Accessor) {
      setDescription(*(accessorImpl.description_Accessor));
    } else {
      description_Accessor.reset();
    }
  }
}

void IncompleteProcessingType::reset() noexcept {
  if (incompleteItemID_Accessor->getAccessorType() != uci::type::accessorType::iD_Type) {
    incompleteItemID_Accessor = boost::make_unique<ID_Type>();
  } else {
    incompleteItemID_Accessor->reset();
  }
  reason_Accessor->reset();
  description_Accessor.reset();
}

const uci::type::ID_Type& IncompleteProcessingType::getIncompleteItemID() const {
  return *incompleteItemID_Accessor;
}

uci::type::ID_Type& IncompleteProcessingType::getIncompleteItemID() {
  return *incompleteItemID_Accessor;
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::setIncompleteItemID(const uci::type::ID_Type& accessor) {
  enableIncompleteItemID(accessor.getAccessorType());
  if (&accessor != incompleteItemID_Accessor.get()) {
    incompleteItemID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ID_Type& IncompleteProcessingType::enableIncompleteItemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iD_Type : type};
  if ((!incompleteItemID_Accessor) || (incompleteItemID_Accessor->getAccessorType() != requestedType)) {
    incompleteItemID_Accessor = ID_Type::create(requestedType);
    if (!incompleteItemID_Accessor) {
      throw uci::base::UCIException("Error in enableIncompleteItemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *incompleteItemID_Accessor;
}

const uci::type::CannotComplyEnum& IncompleteProcessingType::getReason() const {
  return *reason_Accessor;
}

uci::type::CannotComplyEnum& IncompleteProcessingType::getReason() {
  return *reason_Accessor;
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::setReason(const uci::type::CannotComplyEnum& accessor) {
  if (&accessor != reason_Accessor.get()) {
    reason_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::setReason(uci::type::CannotComplyEnum::EnumerationItem value) {
  reason_Accessor->setValue(value);
  return *this;
}


uci::type::VisibleString1024Type& IncompleteProcessingType::getDescription_() const {
  if (description_Accessor) {
    return *description_Accessor;
  }
  throw uci::base::UCIException("Error in getDescription(): An attempt was made to get an optional field that was not enabled, call hasDescription() to determine if it is safe to call getDescription()");
}

const uci::type::VisibleString1024Type& IncompleteProcessingType::getDescription() const {
  return getDescription_();
}

uci::type::VisibleString1024Type& IncompleteProcessingType::getDescription() {
  return getDescription_();
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::setDescription(const uci::type::VisibleString1024Type& value) {
  return setDescription(value.c_str());
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::setDescription(const std::string& value) {
  return setDescription(value.c_str());
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::setDescription(const char* value) {
  enableDescription().setStringValue(value);
  return *this;
}

bool IncompleteProcessingType::hasDescription() const noexcept {
  return static_cast<bool>(description_Accessor);
}

uci::type::VisibleString1024Type& IncompleteProcessingType::enableDescription(uci::base::accessorType::AccessorType type) {
  if (!description_Accessor) {
    description_Accessor = VisibleString1024Type::create(type);
  }
  return *description_Accessor;
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::clearDescription() noexcept {
  description_Accessor.reset();
  return *this;
}

std::unique_ptr<IncompleteProcessingType> IncompleteProcessingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::incompleteProcessingType : type};
  return (requestedType == uci::type::accessorType::incompleteProcessingType) ? boost::make_unique<IncompleteProcessingType>() : nullptr;
}

/**  */
namespace IncompleteProcessingType_Names {

constexpr const char* Extern_Type_Name{"IncompleteProcessingType"};
constexpr const char* IncompleteItemID_Name{"IncompleteItemID"};
constexpr const char* Reason_Name{"Reason"};
constexpr const char* Description_Name{"Description"};

} // namespace IncompleteProcessingType_Names

void IncompleteProcessingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IncompleteProcessingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IncompleteProcessingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IncompleteProcessingType_Names::IncompleteItemID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIncompleteItemID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IncompleteProcessingType_Names::Reason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getReason().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IncompleteProcessingType_Names::Description_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescription(*value);
      }
    }
  }
}

std::string IncompleteProcessingType::serialize(const uci::type::IncompleteProcessingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IncompleteProcessingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IncompleteProcessingType_Names::Extern_Type_Name);
  }
  ID_Type::serialize(accessor.getIncompleteItemID(), node, IncompleteProcessingType_Names::IncompleteItemID_Name);
  CannotComplyEnum::serialize(accessor.getReason(), node, IncompleteProcessingType_Names::Reason_Name, false);
  if (accessor.hasDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescription(), node, IncompleteProcessingType_Names::Description_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IncompleteProcessingType& IncompleteProcessingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IncompleteProcessingType>().release());
}

uci::type::IncompleteProcessingType& IncompleteProcessingType::create(const uci::type::IncompleteProcessingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IncompleteProcessingType> newAccessor{boost::make_unique<asb_uci::type::IncompleteProcessingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IncompleteProcessingType::destroy(uci::type::IncompleteProcessingType& accessor) {
  delete dynamic_cast<asb_uci::type::IncompleteProcessingType*>(&accessor);
}

} // namespace type

} // namespace uci

