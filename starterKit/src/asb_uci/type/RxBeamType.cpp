/** @file RxBeamType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RxBeamType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BeamID_Type.h"
#include "../../../include/asb_uci/type/BeamPointingReferenceType.h"
#include "../../../include/asb_uci/type/BeamWidthType.h"
#include "../../../include/asb_uci/type/EA_PointingEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamPointingReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamWidthType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_PointingEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RxBeamType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RxBeamType::RxBeamType()
  : beamID_Accessor{boost::make_unique<BeamID_Type>()},
    beamWidths_Accessor{boost::make_unique<BeamWidthType>()} {
}

RxBeamType::~RxBeamType() = default;

void RxBeamType::copy(const uci::type::RxBeamType& accessor) {
  copyImpl(accessor, false);
}

void RxBeamType::copyImpl(const uci::type::RxBeamType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RxBeamType&>(accessor);
    setBeamID(*(accessorImpl.beamID_Accessor));
    setBeamWidths(*(accessorImpl.beamWidths_Accessor));
    if (accessorImpl.trackingMode_Accessor) {
      setTrackingMode(*(accessorImpl.trackingMode_Accessor));
    } else {
      trackingMode_Accessor.reset();
    }
    if (accessorImpl.beamPointingReference_Accessor) {
      setBeamPointingReference(*(accessorImpl.beamPointingReference_Accessor));
    } else {
      beamPointingReference_Accessor.reset();
    }
  }
}

void RxBeamType::reset() noexcept {
  beamID_Accessor->reset();
  beamWidths_Accessor->reset();
  trackingMode_Accessor.reset();
  beamPointingReference_Accessor.reset();
}

const uci::type::BeamID_Type& RxBeamType::getBeamID() const {
  return *beamID_Accessor;
}

uci::type::BeamID_Type& RxBeamType::getBeamID() {
  return *beamID_Accessor;
}

uci::type::RxBeamType& RxBeamType::setBeamID(const uci::type::BeamID_Type& accessor) {
  if (&accessor != beamID_Accessor.get()) {
    beamID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::BeamWidthType& RxBeamType::getBeamWidths() const {
  return *beamWidths_Accessor;
}

uci::type::BeamWidthType& RxBeamType::getBeamWidths() {
  return *beamWidths_Accessor;
}

uci::type::RxBeamType& RxBeamType::setBeamWidths(const uci::type::BeamWidthType& accessor) {
  if (&accessor != beamWidths_Accessor.get()) {
    beamWidths_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EA_PointingEnum& RxBeamType::getTrackingMode_() const {
  if (trackingMode_Accessor) {
    return *trackingMode_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackingMode(): An attempt was made to get an optional field that was not enabled, call hasTrackingMode() to determine if it is safe to call getTrackingMode()");
}

const uci::type::EA_PointingEnum& RxBeamType::getTrackingMode() const {
  return getTrackingMode_();
}

uci::type::EA_PointingEnum& RxBeamType::getTrackingMode() {
  return getTrackingMode_();
}

uci::type::RxBeamType& RxBeamType::setTrackingMode(const uci::type::EA_PointingEnum& accessor) {
  enableTrackingMode();
  if (&accessor != trackingMode_Accessor.get()) {
    trackingMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RxBeamType& RxBeamType::setTrackingMode(const uci::type::EA_PointingEnum::EnumerationItem value) {
  enableTrackingMode().setValue(value);
  return *this;
}

bool RxBeamType::hasTrackingMode() const noexcept {
  return static_cast<bool>(trackingMode_Accessor);
}

uci::type::EA_PointingEnum& RxBeamType::enableTrackingMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_PointingEnum : type};
  if ((!trackingMode_Accessor) || (trackingMode_Accessor->getAccessorType() != requestedType)) {
    trackingMode_Accessor = EA_PointingEnum::create(requestedType);
    if (!trackingMode_Accessor) {
      throw uci::base::UCIException("Error in enableTrackingMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackingMode_Accessor;
}

uci::type::RxBeamType& RxBeamType::clearTrackingMode() noexcept {
  trackingMode_Accessor.reset();
  return *this;
}

uci::type::BeamPointingReferenceType& RxBeamType::getBeamPointingReference_() const {
  if (beamPointingReference_Accessor) {
    return *beamPointingReference_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamPointingReference(): An attempt was made to get an optional field that was not enabled, call hasBeamPointingReference() to determine if it is safe to call getBeamPointingReference()");
}

const uci::type::BeamPointingReferenceType& RxBeamType::getBeamPointingReference() const {
  return getBeamPointingReference_();
}

uci::type::BeamPointingReferenceType& RxBeamType::getBeamPointingReference() {
  return getBeamPointingReference_();
}

uci::type::RxBeamType& RxBeamType::setBeamPointingReference(const uci::type::BeamPointingReferenceType& accessor) {
  enableBeamPointingReference();
  if (&accessor != beamPointingReference_Accessor.get()) {
    beamPointingReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RxBeamType::hasBeamPointingReference() const noexcept {
  return static_cast<bool>(beamPointingReference_Accessor);
}

uci::type::BeamPointingReferenceType& RxBeamType::enableBeamPointingReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamPointingReferenceType : type};
  if ((!beamPointingReference_Accessor) || (beamPointingReference_Accessor->getAccessorType() != requestedType)) {
    beamPointingReference_Accessor = BeamPointingReferenceType::create(requestedType);
    if (!beamPointingReference_Accessor) {
      throw uci::base::UCIException("Error in enableBeamPointingReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamPointingReference_Accessor;
}

uci::type::RxBeamType& RxBeamType::clearBeamPointingReference() noexcept {
  beamPointingReference_Accessor.reset();
  return *this;
}

std::unique_ptr<RxBeamType> RxBeamType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rxBeamType : type};
  return (requestedType == uci::type::accessorType::rxBeamType) ? boost::make_unique<RxBeamType>() : nullptr;
}

/**  */
namespace RxBeamType_Names {

constexpr const char* Extern_Type_Name{"RxBeamType"};
constexpr const char* BeamID_Name{"BeamID"};
constexpr const char* BeamWidths_Name{"BeamWidths"};
constexpr const char* TrackingMode_Name{"TrackingMode"};
constexpr const char* BeamPointingReference_Name{"BeamPointingReference"};

} // namespace RxBeamType_Names

void RxBeamType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RxBeamType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RxBeamType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RxBeamType_Names::BeamID_Name) {
      BeamID_Type::deserialize(valueType.second, accessor.getBeamID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RxBeamType_Names::BeamWidths_Name) {
      BeamWidthType::deserialize(valueType.second, accessor.getBeamWidths(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RxBeamType_Names::TrackingMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTrackingMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RxBeamType_Names::BeamPointingReference_Name) {
      BeamPointingReferenceType::deserialize(valueType.second, accessor.enableBeamPointingReference(), nodeName, nsPrefix);
    }
  }
}

std::string RxBeamType::serialize(const uci::type::RxBeamType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RxBeamType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RxBeamType_Names::Extern_Type_Name);
  }
  BeamID_Type::serialize(accessor.getBeamID(), node, RxBeamType_Names::BeamID_Name);
  BeamWidthType::serialize(accessor.getBeamWidths(), node, RxBeamType_Names::BeamWidths_Name);
  if (accessor.hasTrackingMode()) {
    EA_PointingEnum::serialize(accessor.getTrackingMode(), node, RxBeamType_Names::TrackingMode_Name, false);
  }
  if (accessor.hasBeamPointingReference()) {
    BeamPointingReferenceType::serialize(accessor.getBeamPointingReference(), node, RxBeamType_Names::BeamPointingReference_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RxBeamType& RxBeamType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RxBeamType>().release());
}

uci::type::RxBeamType& RxBeamType::create(const uci::type::RxBeamType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RxBeamType> newAccessor{boost::make_unique<asb_uci::type::RxBeamType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RxBeamType::destroy(uci::type::RxBeamType& accessor) {
  delete dynamic_cast<asb_uci::type::RxBeamType*>(&accessor);
}

} // namespace type

} // namespace uci

