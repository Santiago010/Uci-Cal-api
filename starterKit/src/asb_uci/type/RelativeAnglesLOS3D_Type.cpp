/** @file RelativeAnglesLOS3D_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RelativeAnglesLOS3D_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/LOS_ReferenceEnum.h"
#include "../../../include/asb_uci/type/RelativeAngleRateUncertaintyLOS3D_Type.h"
#include "../../../include/asb_uci/type/RelativeAngleUncertaintyLOS3D_Type.h"
#include "../../../include/asb_uci/type/UnitVectorType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS_ReferenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativeAngleRateUncertaintyLOS3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativeAngleUncertaintyLOS3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativeAnglesLOS3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnitVectorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RelativeAnglesLOS3D_Type::RelativeAnglesLOS3D_Type()
  : lOS_ReferenceFrame_Accessor{boost::make_unique<LOS_ReferenceEnum>()},
    lOS_UnitVector_Accessor{boost::make_unique<UnitVectorType>()} {
}

RelativeAnglesLOS3D_Type::~RelativeAnglesLOS3D_Type() = default;

void RelativeAnglesLOS3D_Type::copy(const uci::type::RelativeAnglesLOS3D_Type& accessor) {
  copyImpl(accessor, false);
}

void RelativeAnglesLOS3D_Type::copyImpl(const uci::type::RelativeAnglesLOS3D_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RelativeAnglesLOS3D_Type&>(accessor);
    setLOS_ReferenceFrame(*(accessorImpl.lOS_ReferenceFrame_Accessor));
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    setLOS_UnitVector(*(accessorImpl.lOS_UnitVector_Accessor));
    if (accessorImpl.hasLOS_ReferenceFrameRoll()) {
      setLOS_ReferenceFrameRoll(accessorImpl.getLOS_ReferenceFrameRoll());
    } else {
      clearLOS_ReferenceFrameRoll();
    }
    if (accessorImpl.relativeAngleUncertaintyLOS3D_Accessor) {
      setRelativeAngleUncertaintyLOS3D(*(accessorImpl.relativeAngleUncertaintyLOS3D_Accessor));
    } else {
      relativeAngleUncertaintyLOS3D_Accessor.reset();
    }
    if (accessorImpl.hasLOS_ReferenceFrameRollRate()) {
      setLOS_ReferenceFrameRollRate(accessorImpl.getLOS_ReferenceFrameRollRate());
    } else {
      clearLOS_ReferenceFrameRollRate();
    }
    if (accessorImpl.hasLOS_CrossVerticalAngleRate()) {
      setLOS_CrossVerticalAngleRate(accessorImpl.getLOS_CrossVerticalAngleRate());
    } else {
      clearLOS_CrossVerticalAngleRate();
    }
    if (accessorImpl.hasLOS_CrossHorizontalAngleRate()) {
      setLOS_CrossHorizontalAngleRate(accessorImpl.getLOS_CrossHorizontalAngleRate());
    } else {
      clearLOS_CrossHorizontalAngleRate();
    }
    if (accessorImpl.relativeAngleRateUncertaintyLOS3D_Accessor) {
      setRelativeAngleRateUncertaintyLOS3D(*(accessorImpl.relativeAngleRateUncertaintyLOS3D_Accessor));
    } else {
      relativeAngleRateUncertaintyLOS3D_Accessor.reset();
    }
  }
}

void RelativeAnglesLOS3D_Type::reset() noexcept {
  lOS_ReferenceFrame_Accessor->reset();
  capabilityID_Accessor.reset();
  if (lOS_UnitVector_Accessor->getAccessorType() != uci::type::accessorType::unitVectorType) {
    lOS_UnitVector_Accessor = boost::make_unique<UnitVectorType>();
  } else {
    lOS_UnitVector_Accessor->reset();
  }
  clearLOS_ReferenceFrameRoll();
  relativeAngleUncertaintyLOS3D_Accessor.reset();
  clearLOS_ReferenceFrameRollRate();
  clearLOS_CrossVerticalAngleRate();
  clearLOS_CrossHorizontalAngleRate();
  relativeAngleRateUncertaintyLOS3D_Accessor.reset();
}

const uci::type::LOS_ReferenceEnum& RelativeAnglesLOS3D_Type::getLOS_ReferenceFrame() const {
  return *lOS_ReferenceFrame_Accessor;
}

uci::type::LOS_ReferenceEnum& RelativeAnglesLOS3D_Type::getLOS_ReferenceFrame() {
  return *lOS_ReferenceFrame_Accessor;
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setLOS_ReferenceFrame(const uci::type::LOS_ReferenceEnum& accessor) {
  if (&accessor != lOS_ReferenceFrame_Accessor.get()) {
    lOS_ReferenceFrame_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setLOS_ReferenceFrame(uci::type::LOS_ReferenceEnum::EnumerationItem value) {
  lOS_ReferenceFrame_Accessor->setValue(value);
  return *this;
}


uci::type::CapabilityID_Type& RelativeAnglesLOS3D_Type::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& RelativeAnglesLOS3D_Type::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& RelativeAnglesLOS3D_Type::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelativeAnglesLOS3D_Type::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& RelativeAnglesLOS3D_Type::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

const uci::type::UnitVectorType& RelativeAnglesLOS3D_Type::getLOS_UnitVector() const {
  return *lOS_UnitVector_Accessor;
}

uci::type::UnitVectorType& RelativeAnglesLOS3D_Type::getLOS_UnitVector() {
  return *lOS_UnitVector_Accessor;
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setLOS_UnitVector(const uci::type::UnitVectorType& accessor) {
  enableLOS_UnitVector(accessor.getAccessorType());
  if (&accessor != lOS_UnitVector_Accessor.get()) {
    lOS_UnitVector_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::UnitVectorType& RelativeAnglesLOS3D_Type::enableLOS_UnitVector(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::unitVectorType : type};
  if ((!lOS_UnitVector_Accessor) || (lOS_UnitVector_Accessor->getAccessorType() != requestedType)) {
    lOS_UnitVector_Accessor = UnitVectorType::create(requestedType);
    if (!lOS_UnitVector_Accessor) {
      throw uci::base::UCIException("Error in enableLOS_UnitVector(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_UnitVector_Accessor;
}

uci::type::AngleTypeValue RelativeAnglesLOS3D_Type::getLOS_ReferenceFrameRoll() const {
  if (lOS_ReferenceFrameRoll_Accessor) {
    return *lOS_ReferenceFrameRoll_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_ReferenceFrameRoll(): An attempt was made to get an optional field that was not enabled, call hasLOS_ReferenceFrameRoll() to determine if it is safe to call getLOS_ReferenceFrameRoll()");
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setLOS_ReferenceFrameRoll(uci::type::AngleTypeValue value) {
  lOS_ReferenceFrameRoll_Accessor = value;
  return *this;
}

bool RelativeAnglesLOS3D_Type::hasLOS_ReferenceFrameRoll() const noexcept {
  return lOS_ReferenceFrameRoll_Accessor.has_value();
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::clearLOS_ReferenceFrameRoll() noexcept {
  lOS_ReferenceFrameRoll_Accessor.reset();
  return *this;
}

uci::type::RelativeAngleUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::getRelativeAngleUncertaintyLOS3D_() const {
  if (relativeAngleUncertaintyLOS3D_Accessor) {
    return *relativeAngleUncertaintyLOS3D_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeAngleUncertaintyLOS3D(): An attempt was made to get an optional field that was not enabled, call hasRelativeAngleUncertaintyLOS3D() to determine if it is safe to call getRelativeAngleUncertaintyLOS3D()");
}

const uci::type::RelativeAngleUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::getRelativeAngleUncertaintyLOS3D() const {
  return getRelativeAngleUncertaintyLOS3D_();
}

uci::type::RelativeAngleUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::getRelativeAngleUncertaintyLOS3D() {
  return getRelativeAngleUncertaintyLOS3D_();
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setRelativeAngleUncertaintyLOS3D(const uci::type::RelativeAngleUncertaintyLOS3D_Type& accessor) {
  enableRelativeAngleUncertaintyLOS3D();
  if (&accessor != relativeAngleUncertaintyLOS3D_Accessor.get()) {
    relativeAngleUncertaintyLOS3D_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelativeAnglesLOS3D_Type::hasRelativeAngleUncertaintyLOS3D() const noexcept {
  return static_cast<bool>(relativeAngleUncertaintyLOS3D_Accessor);
}

uci::type::RelativeAngleUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::enableRelativeAngleUncertaintyLOS3D(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeAngleUncertaintyLOS3D_Type : type};
  if ((!relativeAngleUncertaintyLOS3D_Accessor) || (relativeAngleUncertaintyLOS3D_Accessor->getAccessorType() != requestedType)) {
    relativeAngleUncertaintyLOS3D_Accessor = RelativeAngleUncertaintyLOS3D_Type::create(requestedType);
    if (!relativeAngleUncertaintyLOS3D_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeAngleUncertaintyLOS3D(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeAngleUncertaintyLOS3D_Accessor;
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::clearRelativeAngleUncertaintyLOS3D() noexcept {
  relativeAngleUncertaintyLOS3D_Accessor.reset();
  return *this;
}

uci::type::AngleRateTypeValue RelativeAnglesLOS3D_Type::getLOS_ReferenceFrameRollRate() const {
  if (lOS_ReferenceFrameRollRate_Accessor) {
    return *lOS_ReferenceFrameRollRate_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_ReferenceFrameRollRate(): An attempt was made to get an optional field that was not enabled, call hasLOS_ReferenceFrameRollRate() to determine if it is safe to call getLOS_ReferenceFrameRollRate()");
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setLOS_ReferenceFrameRollRate(uci::type::AngleRateTypeValue value) {
  lOS_ReferenceFrameRollRate_Accessor = value;
  return *this;
}

bool RelativeAnglesLOS3D_Type::hasLOS_ReferenceFrameRollRate() const noexcept {
  return lOS_ReferenceFrameRollRate_Accessor.has_value();
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::clearLOS_ReferenceFrameRollRate() noexcept {
  lOS_ReferenceFrameRollRate_Accessor.reset();
  return *this;
}

uci::type::AngleRateTypeValue RelativeAnglesLOS3D_Type::getLOS_CrossVerticalAngleRate() const {
  if (lOS_CrossVerticalAngleRate_Accessor) {
    return *lOS_CrossVerticalAngleRate_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_CrossVerticalAngleRate(): An attempt was made to get an optional field that was not enabled, call hasLOS_CrossVerticalAngleRate() to determine if it is safe to call getLOS_CrossVerticalAngleRate()");
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setLOS_CrossVerticalAngleRate(uci::type::AngleRateTypeValue value) {
  lOS_CrossVerticalAngleRate_Accessor = value;
  return *this;
}

bool RelativeAnglesLOS3D_Type::hasLOS_CrossVerticalAngleRate() const noexcept {
  return lOS_CrossVerticalAngleRate_Accessor.has_value();
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::clearLOS_CrossVerticalAngleRate() noexcept {
  lOS_CrossVerticalAngleRate_Accessor.reset();
  return *this;
}

uci::type::AngleRateTypeValue RelativeAnglesLOS3D_Type::getLOS_CrossHorizontalAngleRate() const {
  if (lOS_CrossHorizontalAngleRate_Accessor) {
    return *lOS_CrossHorizontalAngleRate_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_CrossHorizontalAngleRate(): An attempt was made to get an optional field that was not enabled, call hasLOS_CrossHorizontalAngleRate() to determine if it is safe to call getLOS_CrossHorizontalAngleRate()");
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setLOS_CrossHorizontalAngleRate(uci::type::AngleRateTypeValue value) {
  lOS_CrossHorizontalAngleRate_Accessor = value;
  return *this;
}

bool RelativeAnglesLOS3D_Type::hasLOS_CrossHorizontalAngleRate() const noexcept {
  return lOS_CrossHorizontalAngleRate_Accessor.has_value();
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::clearLOS_CrossHorizontalAngleRate() noexcept {
  lOS_CrossHorizontalAngleRate_Accessor.reset();
  return *this;
}

uci::type::RelativeAngleRateUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::getRelativeAngleRateUncertaintyLOS3D_() const {
  if (relativeAngleRateUncertaintyLOS3D_Accessor) {
    return *relativeAngleRateUncertaintyLOS3D_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeAngleRateUncertaintyLOS3D(): An attempt was made to get an optional field that was not enabled, call hasRelativeAngleRateUncertaintyLOS3D() to determine if it is safe to call getRelativeAngleRateUncertaintyLOS3D()");
}

const uci::type::RelativeAngleRateUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::getRelativeAngleRateUncertaintyLOS3D() const {
  return getRelativeAngleRateUncertaintyLOS3D_();
}

uci::type::RelativeAngleRateUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::getRelativeAngleRateUncertaintyLOS3D() {
  return getRelativeAngleRateUncertaintyLOS3D_();
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::setRelativeAngleRateUncertaintyLOS3D(const uci::type::RelativeAngleRateUncertaintyLOS3D_Type& accessor) {
  enableRelativeAngleRateUncertaintyLOS3D();
  if (&accessor != relativeAngleRateUncertaintyLOS3D_Accessor.get()) {
    relativeAngleRateUncertaintyLOS3D_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelativeAnglesLOS3D_Type::hasRelativeAngleRateUncertaintyLOS3D() const noexcept {
  return static_cast<bool>(relativeAngleRateUncertaintyLOS3D_Accessor);
}

uci::type::RelativeAngleRateUncertaintyLOS3D_Type& RelativeAnglesLOS3D_Type::enableRelativeAngleRateUncertaintyLOS3D(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeAngleRateUncertaintyLOS3D_Type : type};
  if ((!relativeAngleRateUncertaintyLOS3D_Accessor) || (relativeAngleRateUncertaintyLOS3D_Accessor->getAccessorType() != requestedType)) {
    relativeAngleRateUncertaintyLOS3D_Accessor = RelativeAngleRateUncertaintyLOS3D_Type::create(requestedType);
    if (!relativeAngleRateUncertaintyLOS3D_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeAngleRateUncertaintyLOS3D(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeAngleRateUncertaintyLOS3D_Accessor;
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::clearRelativeAngleRateUncertaintyLOS3D() noexcept {
  relativeAngleRateUncertaintyLOS3D_Accessor.reset();
  return *this;
}

std::unique_ptr<RelativeAnglesLOS3D_Type> RelativeAnglesLOS3D_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeAnglesLOS3D_Type : type};
  return (requestedType == uci::type::accessorType::relativeAnglesLOS3D_Type) ? boost::make_unique<RelativeAnglesLOS3D_Type>() : nullptr;
}

/**  */
namespace RelativeAnglesLOS3D_Type_Names {

constexpr const char* Extern_Type_Name{"RelativeAnglesLOS3D_Type"};
constexpr const char* LOS_ReferenceFrame_Name{"LOS_ReferenceFrame"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* LOS_UnitVector_Name{"LOS_UnitVector"};
constexpr const char* LOS_ReferenceFrameRoll_Name{"LOS_ReferenceFrameRoll"};
constexpr const char* RelativeAngleUncertaintyLOS3D_Name{"RelativeAngleUncertaintyLOS3D"};
constexpr const char* LOS_ReferenceFrameRollRate_Name{"LOS_ReferenceFrameRollRate"};
constexpr const char* LOS_CrossVerticalAngleRate_Name{"LOS_CrossVerticalAngleRate"};
constexpr const char* LOS_CrossHorizontalAngleRate_Name{"LOS_CrossHorizontalAngleRate"};
constexpr const char* RelativeAngleRateUncertaintyLOS3D_Name{"RelativeAngleRateUncertaintyLOS3D"};

} // namespace RelativeAnglesLOS3D_Type_Names

void RelativeAnglesLOS3D_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::RelativeAnglesLOS3D_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RelativeAnglesLOS3D_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::LOS_ReferenceFrame_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLOS_ReferenceFrame().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::LOS_UnitVector_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLOS_UnitVector(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::LOS_ReferenceFrameRoll_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLOS_ReferenceFrameRoll(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::RelativeAngleUncertaintyLOS3D_Name) {
      RelativeAngleUncertaintyLOS3D_Type::deserialize(valueType.second, accessor.enableRelativeAngleUncertaintyLOS3D(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::LOS_ReferenceFrameRollRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLOS_ReferenceFrameRollRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::LOS_CrossVerticalAngleRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLOS_CrossVerticalAngleRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::LOS_CrossHorizontalAngleRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLOS_CrossHorizontalAngleRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeAnglesLOS3D_Type_Names::RelativeAngleRateUncertaintyLOS3D_Name) {
      RelativeAngleRateUncertaintyLOS3D_Type::deserialize(valueType.second, accessor.enableRelativeAngleRateUncertaintyLOS3D(), nodeName, nsPrefix);
    }
  }
}

std::string RelativeAnglesLOS3D_Type::serialize(const uci::type::RelativeAnglesLOS3D_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RelativeAnglesLOS3D_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RelativeAnglesLOS3D_Type_Names::Extern_Type_Name);
  }
  LOS_ReferenceEnum::serialize(accessor.getLOS_ReferenceFrame(), node, RelativeAnglesLOS3D_Type_Names::LOS_ReferenceFrame_Name, false);
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, RelativeAnglesLOS3D_Type_Names::CapabilityID_Name);
  }
  UnitVectorType::serialize(accessor.getLOS_UnitVector(), node, RelativeAnglesLOS3D_Type_Names::LOS_UnitVector_Name);
  if (accessor.hasLOS_ReferenceFrameRoll()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLOS_ReferenceFrameRoll(), node, RelativeAnglesLOS3D_Type_Names::LOS_ReferenceFrameRoll_Name);
  }
  if (accessor.hasRelativeAngleUncertaintyLOS3D()) {
    RelativeAngleUncertaintyLOS3D_Type::serialize(accessor.getRelativeAngleUncertaintyLOS3D(), node, RelativeAnglesLOS3D_Type_Names::RelativeAngleUncertaintyLOS3D_Name);
  }
  if (accessor.hasLOS_ReferenceFrameRollRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLOS_ReferenceFrameRollRate(), node, RelativeAnglesLOS3D_Type_Names::LOS_ReferenceFrameRollRate_Name);
  }
  if (accessor.hasLOS_CrossVerticalAngleRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLOS_CrossVerticalAngleRate(), node, RelativeAnglesLOS3D_Type_Names::LOS_CrossVerticalAngleRate_Name);
  }
  if (accessor.hasLOS_CrossHorizontalAngleRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLOS_CrossHorizontalAngleRate(), node, RelativeAnglesLOS3D_Type_Names::LOS_CrossHorizontalAngleRate_Name);
  }
  if (accessor.hasRelativeAngleRateUncertaintyLOS3D()) {
    RelativeAngleRateUncertaintyLOS3D_Type::serialize(accessor.getRelativeAngleRateUncertaintyLOS3D(), node, RelativeAnglesLOS3D_Type_Names::RelativeAngleRateUncertaintyLOS3D_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RelativeAnglesLOS3D_Type>().release());
}

uci::type::RelativeAnglesLOS3D_Type& RelativeAnglesLOS3D_Type::create(const uci::type::RelativeAnglesLOS3D_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RelativeAnglesLOS3D_Type> newAccessor{boost::make_unique<asb_uci::type::RelativeAnglesLOS3D_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RelativeAnglesLOS3D_Type::destroy(uci::type::RelativeAnglesLOS3D_Type& accessor) {
  delete dynamic_cast<asb_uci::type::RelativeAnglesLOS3D_Type*>(&accessor);
}

} // namespace type

} // namespace uci

