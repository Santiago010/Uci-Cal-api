/** @file OperatorRoleType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OperatorRoleType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OperatorRoleID_Type.h"
#include "../../../include/asb_uci/type/SystemServiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorRoleID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorRoleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemServiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorRoleType::OperatorRoleType() = default;

OperatorRoleType::~OperatorRoleType() = default;

void OperatorRoleType::copy(const uci::type::OperatorRoleType& accessor) {
  copyImpl(accessor, false);
}

void OperatorRoleType::copyImpl(const uci::type::OperatorRoleType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OperatorRoleType&>(accessor);
    if (accessorImpl.operatorRoleID_Accessor) {
      setOperatorRoleID(*(accessorImpl.operatorRoleID_Accessor));
    } else {
      operatorRoleID_Accessor.reset();
    }
    if (accessorImpl.nonOperatorIdentifier_Accessor) {
      setNonOperatorIdentifier(*(accessorImpl.nonOperatorIdentifier_Accessor));
    } else {
      nonOperatorIdentifier_Accessor.reset();
    }
  }
}

void OperatorRoleType::reset() noexcept {
  operatorRoleID_Accessor.reset();
  nonOperatorIdentifier_Accessor.reset();
}

uci::type::OperatorRoleType::OperatorRoleTypeChoice OperatorRoleType::getOperatorRoleTypeChoiceOrdinal() const noexcept {
  if (operatorRoleID_Accessor) {
    return OPERATORROLETYPE_CHOICE_OPERATORROLEID;
  }
  if (nonOperatorIdentifier_Accessor) {
    return OPERATORROLETYPE_CHOICE_NONOPERATORIDENTIFIER;
  }
  return OPERATORROLETYPE_CHOICE_NONE;
}

uci::type::OperatorRoleType& OperatorRoleType::setOperatorRoleTypeChoiceOrdinal(uci::type::OperatorRoleType::OperatorRoleTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPERATORROLETYPE_CHOICE_OPERATORROLEID:
      chooseOperatorRoleID("setOperatorRoleTypeChoiceOrdinal", type);
      break;
    case OPERATORROLETYPE_CHOICE_NONOPERATORIDENTIFIER:
      chooseNonOperatorIdentifier("setOperatorRoleTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOperatorRoleTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OperatorRoleID_Type& OperatorRoleType::getOperatorRoleID_() const {
  if (operatorRoleID_Accessor) {
    return *operatorRoleID_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorRoleID(): Unable to get OperatorRoleID, field not selected");
}

const uci::type::OperatorRoleID_Type& OperatorRoleType::getOperatorRoleID() const {
  return getOperatorRoleID_();
}

uci::type::OperatorRoleID_Type& OperatorRoleType::getOperatorRoleID() {
  return getOperatorRoleID_();
}

uci::type::OperatorRoleType& OperatorRoleType::setOperatorRoleID(const uci::type::OperatorRoleID_Type& accessor) {
  chooseOperatorRoleID();
  if (&accessor != operatorRoleID_Accessor.get()) {
    operatorRoleID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorRoleType::isOperatorRoleID() const noexcept {
  return static_cast<bool>(operatorRoleID_Accessor);
}

uci::type::OperatorRoleID_Type& OperatorRoleType::chooseOperatorRoleID(const std::string& method, uci::base::accessorType::AccessorType type) {
  nonOperatorIdentifier_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorRoleID_Type : type};
  if ((!operatorRoleID_Accessor) || (operatorRoleID_Accessor->getAccessorType() != requestedType)) {
    operatorRoleID_Accessor = OperatorRoleID_Type::create(type);
    if (!operatorRoleID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorRoleID_Accessor;
}

uci::type::OperatorRoleID_Type& OperatorRoleType::chooseOperatorRoleID(uci::base::accessorType::AccessorType type) {
  return chooseOperatorRoleID("chooseOperatorRoleID", type);
}

uci::type::SystemServiceType& OperatorRoleType::getNonOperatorIdentifier_() const {
  if (nonOperatorIdentifier_Accessor) {
    return *nonOperatorIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getNonOperatorIdentifier(): Unable to get NonOperatorIdentifier, field not selected");
}

const uci::type::SystemServiceType& OperatorRoleType::getNonOperatorIdentifier() const {
  return getNonOperatorIdentifier_();
}

uci::type::SystemServiceType& OperatorRoleType::getNonOperatorIdentifier() {
  return getNonOperatorIdentifier_();
}

uci::type::OperatorRoleType& OperatorRoleType::setNonOperatorIdentifier(const uci::type::SystemServiceType& accessor) {
  chooseNonOperatorIdentifier();
  if (&accessor != nonOperatorIdentifier_Accessor.get()) {
    nonOperatorIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorRoleType::isNonOperatorIdentifier() const noexcept {
  return static_cast<bool>(nonOperatorIdentifier_Accessor);
}

uci::type::SystemServiceType& OperatorRoleType::chooseNonOperatorIdentifier(const std::string& method, uci::base::accessorType::AccessorType type) {
  operatorRoleID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemServiceType : type};
  if ((!nonOperatorIdentifier_Accessor) || (nonOperatorIdentifier_Accessor->getAccessorType() != requestedType)) {
    nonOperatorIdentifier_Accessor = SystemServiceType::create(type);
    if (!nonOperatorIdentifier_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nonOperatorIdentifier_Accessor;
}

uci::type::SystemServiceType& OperatorRoleType::chooseNonOperatorIdentifier(uci::base::accessorType::AccessorType type) {
  return chooseNonOperatorIdentifier("chooseNonOperatorIdentifier", type);
}

std::unique_ptr<OperatorRoleType> OperatorRoleType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorRoleType : type};
  return (requestedType == uci::type::accessorType::operatorRoleType) ? boost::make_unique<OperatorRoleType>() : nullptr;
}

/**  */
namespace OperatorRoleType_Names {

constexpr const char* Extern_Type_Name{"OperatorRoleType"};
constexpr const char* OperatorRoleID_Name{"OperatorRoleID"};
constexpr const char* NonOperatorIdentifier_Name{"NonOperatorIdentifier"};

} // namespace OperatorRoleType_Names

void OperatorRoleType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorRoleType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorRoleType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorRoleType_Names::OperatorRoleID_Name) {
      OperatorRoleID_Type::deserialize(valueType.second, accessor.chooseOperatorRoleID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorRoleType_Names::NonOperatorIdentifier_Name) {
      SystemServiceType::deserialize(valueType.second, accessor.chooseNonOperatorIdentifier(), nodeName, nsPrefix);
    }
  }
}

std::string OperatorRoleType::serialize(const uci::type::OperatorRoleType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorRoleType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorRoleType_Names::Extern_Type_Name);
  }
  if (accessor.isOperatorRoleID()) {
    OperatorRoleID_Type::serialize(accessor.getOperatorRoleID(), node, OperatorRoleType_Names::OperatorRoleID_Name);
  } else if (accessor.isNonOperatorIdentifier()) {
    SystemServiceType::serialize(accessor.getNonOperatorIdentifier(), node, OperatorRoleType_Names::NonOperatorIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorRoleType& OperatorRoleType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorRoleType>().release());
}

uci::type::OperatorRoleType& OperatorRoleType::create(const uci::type::OperatorRoleType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorRoleType> newAccessor{boost::make_unique<asb_uci::type::OperatorRoleType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorRoleType::destroy(uci::type::OperatorRoleType& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorRoleType*>(&accessor);
}

} // namespace type

} // namespace uci

