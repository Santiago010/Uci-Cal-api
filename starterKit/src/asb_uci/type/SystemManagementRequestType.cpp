/** @file SystemManagementRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SystemManagementRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/Link16MetadataType.h"
#include "../../../include/asb_uci/type/MessageModeEnum.h"
#include "../../../include/asb_uci/type/SystemIdentityType.h"
#include "../../../include/asb_uci/type/VehicleCommandDataType.h"
#include "../../../include/asb_uci/type/VoiceControlType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16MetadataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MessageModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemIdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemManagementRequestType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VehicleCommandDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VoiceControlType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SystemManagementRequestType::SystemManagementRequestType() = default;

SystemManagementRequestType::~SystemManagementRequestType() = default;

void SystemManagementRequestType::copy(const uci::type::SystemManagementRequestType& accessor) {
  copyImpl(accessor, false);
}

void SystemManagementRequestType::copyImpl(const uci::type::SystemManagementRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SystemManagementRequestType&>(accessor);
    if (accessorImpl.setMode_Accessor) {
      setSetMode(*(accessorImpl.setMode_Accessor));
    } else {
      setMode_Accessor.reset();
    }
    if (accessorImpl.setIdentity_Accessor) {
      setSetIdentity(*(accessorImpl.setIdentity_Accessor));
    } else {
      setIdentity_Accessor.reset();
    }
    if (accessorImpl.setLink16Metadata_Accessor) {
      setSetLink16Metadata(*(accessorImpl.setLink16Metadata_Accessor));
    } else {
      setLink16Metadata_Accessor.reset();
    }
    if (accessorImpl.setVoiceControl_Accessor) {
      setSetVoiceControl(*(accessorImpl.setVoiceControl_Accessor));
    } else {
      setVoiceControl_Accessor.reset();
    }
    setSensorEntityReporting_Accessor = (accessorImpl.setSensorEntityReporting_Accessor ? accessorImpl.setSensorEntityReporting_Accessor : boost::none);
    if (accessorImpl.vehicleSettings_Accessor) {
      setVehicleSettings(*(accessorImpl.vehicleSettings_Accessor));
    } else {
      vehicleSettings_Accessor.reset();
    }
  }
}

void SystemManagementRequestType::reset() noexcept {
  setMode_Accessor.reset();
  setIdentity_Accessor.reset();
  setLink16Metadata_Accessor.reset();
  setVoiceControl_Accessor.reset();
  setSensorEntityReporting_Accessor.reset();
  vehicleSettings_Accessor.reset();
}

uci::type::SystemManagementRequestType::SystemManagementRequestTypeChoice SystemManagementRequestType::getSystemManagementRequestTypeChoiceOrdinal() const noexcept {
  if (setMode_Accessor) {
    return SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETMODE;
  }
  if (setIdentity_Accessor) {
    return SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETIDENTITY;
  }
  if (setLink16Metadata_Accessor) {
    return SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETLINK16METADATA;
  }
  if (setVoiceControl_Accessor) {
    return SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETVOICECONTROL;
  }
  if (setSensorEntityReporting_Accessor) {
    return SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETSENSORENTITYREPORTING;
  }
  if (vehicleSettings_Accessor) {
    return SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_VEHICLESETTINGS;
  }
  return SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_NONE;
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setSystemManagementRequestTypeChoiceOrdinal(uci::type::SystemManagementRequestType::SystemManagementRequestTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETMODE:
      chooseSetMode("setSystemManagementRequestTypeChoiceOrdinal", type);
      break;
    case SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETIDENTITY:
      chooseSetIdentity("setSystemManagementRequestTypeChoiceOrdinal", type);
      break;
    case SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETLINK16METADATA:
      chooseSetLink16Metadata("setSystemManagementRequestTypeChoiceOrdinal", type);
      break;
    case SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETVOICECONTROL:
      chooseSetVoiceControl("setSystemManagementRequestTypeChoiceOrdinal", type);
      break;
    case SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_SETSENSORENTITYREPORTING:
      chooseSetSensorEntityReporting();
      break;
    case SYSTEMMANAGEMENTREQUESTTYPE_CHOICE_VEHICLESETTINGS:
      chooseVehicleSettings("setSystemManagementRequestTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSystemManagementRequestTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MessageModeEnum& SystemManagementRequestType::getSetMode_() const {
  if (setMode_Accessor) {
    return *setMode_Accessor;
  }
  throw uci::base::UCIException("Error in getSetMode(): Unable to get SetMode, field not selected");
}

const uci::type::MessageModeEnum& SystemManagementRequestType::getSetMode() const {
  return getSetMode_();
}

uci::type::MessageModeEnum& SystemManagementRequestType::getSetMode() {
  return getSetMode_();
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setSetMode(const uci::type::MessageModeEnum& accessor) {
  chooseSetMode();
  if (&accessor != setMode_Accessor.get()) {
    setMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setSetMode(uci::type::MessageModeEnum::EnumerationItem value) {
  chooseSetMode().setValue(value);
  return *this;
}

bool SystemManagementRequestType::isSetMode() const noexcept {
  return static_cast<bool>(setMode_Accessor);
}

uci::type::MessageModeEnum& SystemManagementRequestType::chooseSetMode(const std::string& method, uci::base::accessorType::AccessorType type) {
  setIdentity_Accessor.reset();
  setLink16Metadata_Accessor.reset();
  setVoiceControl_Accessor.reset();
  setSensorEntityReporting_Accessor.reset();
  vehicleSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::messageModeEnum : type};
  if ((!setMode_Accessor) || (setMode_Accessor->getAccessorType() != requestedType)) {
    setMode_Accessor = MessageModeEnum::create(type);
    if (!setMode_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setMode_Accessor;
}

uci::type::MessageModeEnum& SystemManagementRequestType::chooseSetMode(uci::base::accessorType::AccessorType type) {
  return chooseSetMode("chooseSetMode", type);
}

uci::type::SystemIdentityType& SystemManagementRequestType::getSetIdentity_() const {
  if (setIdentity_Accessor) {
    return *setIdentity_Accessor;
  }
  throw uci::base::UCIException("Error in getSetIdentity(): Unable to get SetIdentity, field not selected");
}

const uci::type::SystemIdentityType& SystemManagementRequestType::getSetIdentity() const {
  return getSetIdentity_();
}

uci::type::SystemIdentityType& SystemManagementRequestType::getSetIdentity() {
  return getSetIdentity_();
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setSetIdentity(const uci::type::SystemIdentityType& accessor) {
  chooseSetIdentity();
  if (&accessor != setIdentity_Accessor.get()) {
    setIdentity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemManagementRequestType::isSetIdentity() const noexcept {
  return static_cast<bool>(setIdentity_Accessor);
}

uci::type::SystemIdentityType& SystemManagementRequestType::chooseSetIdentity(const std::string& method, uci::base::accessorType::AccessorType type) {
  setMode_Accessor.reset();
  setLink16Metadata_Accessor.reset();
  setVoiceControl_Accessor.reset();
  setSensorEntityReporting_Accessor.reset();
  vehicleSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemIdentityType : type};
  if ((!setIdentity_Accessor) || (setIdentity_Accessor->getAccessorType() != requestedType)) {
    setIdentity_Accessor = SystemIdentityType::create(type);
    if (!setIdentity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setIdentity_Accessor;
}

uci::type::SystemIdentityType& SystemManagementRequestType::chooseSetIdentity(uci::base::accessorType::AccessorType type) {
  return chooseSetIdentity("chooseSetIdentity", type);
}

uci::type::Link16MetadataType& SystemManagementRequestType::getSetLink16Metadata_() const {
  if (setLink16Metadata_Accessor) {
    return *setLink16Metadata_Accessor;
  }
  throw uci::base::UCIException("Error in getSetLink16Metadata(): Unable to get SetLink16Metadata, field not selected");
}

const uci::type::Link16MetadataType& SystemManagementRequestType::getSetLink16Metadata() const {
  return getSetLink16Metadata_();
}

uci::type::Link16MetadataType& SystemManagementRequestType::getSetLink16Metadata() {
  return getSetLink16Metadata_();
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setSetLink16Metadata(const uci::type::Link16MetadataType& accessor) {
  chooseSetLink16Metadata();
  if (&accessor != setLink16Metadata_Accessor.get()) {
    setLink16Metadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemManagementRequestType::isSetLink16Metadata() const noexcept {
  return static_cast<bool>(setLink16Metadata_Accessor);
}

uci::type::Link16MetadataType& SystemManagementRequestType::chooseSetLink16Metadata(const std::string& method, uci::base::accessorType::AccessorType type) {
  setMode_Accessor.reset();
  setIdentity_Accessor.reset();
  setVoiceControl_Accessor.reset();
  setSensorEntityReporting_Accessor.reset();
  vehicleSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16MetadataType : type};
  if ((!setLink16Metadata_Accessor) || (setLink16Metadata_Accessor->getAccessorType() != requestedType)) {
    setLink16Metadata_Accessor = Link16MetadataType::create(type);
    if (!setLink16Metadata_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setLink16Metadata_Accessor;
}

uci::type::Link16MetadataType& SystemManagementRequestType::chooseSetLink16Metadata(uci::base::accessorType::AccessorType type) {
  return chooseSetLink16Metadata("chooseSetLink16Metadata", type);
}

uci::type::VoiceControlType& SystemManagementRequestType::getSetVoiceControl_() const {
  if (setVoiceControl_Accessor) {
    return *setVoiceControl_Accessor;
  }
  throw uci::base::UCIException("Error in getSetVoiceControl(): Unable to get SetVoiceControl, field not selected");
}

const uci::type::VoiceControlType& SystemManagementRequestType::getSetVoiceControl() const {
  return getSetVoiceControl_();
}

uci::type::VoiceControlType& SystemManagementRequestType::getSetVoiceControl() {
  return getSetVoiceControl_();
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setSetVoiceControl(const uci::type::VoiceControlType& accessor) {
  chooseSetVoiceControl();
  if (&accessor != setVoiceControl_Accessor.get()) {
    setVoiceControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemManagementRequestType::isSetVoiceControl() const noexcept {
  return static_cast<bool>(setVoiceControl_Accessor);
}

uci::type::VoiceControlType& SystemManagementRequestType::chooseSetVoiceControl(const std::string& method, uci::base::accessorType::AccessorType type) {
  setMode_Accessor.reset();
  setIdentity_Accessor.reset();
  setLink16Metadata_Accessor.reset();
  setSensorEntityReporting_Accessor.reset();
  vehicleSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::voiceControlType : type};
  if ((!setVoiceControl_Accessor) || (setVoiceControl_Accessor->getAccessorType() != requestedType)) {
    setVoiceControl_Accessor = VoiceControlType::create(type);
    if (!setVoiceControl_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setVoiceControl_Accessor;
}

uci::type::VoiceControlType& SystemManagementRequestType::chooseSetVoiceControl(uci::base::accessorType::AccessorType type) {
  return chooseSetVoiceControl("chooseSetVoiceControl", type);
}

xs::Boolean SystemManagementRequestType::getSetSensorEntityReporting() const {
  if (setSensorEntityReporting_Accessor) {
    return *setSensorEntityReporting_Accessor;
  }
  throw uci::base::UCIException("Error in getSetSensorEntityReporting(): Unable to get SetSensorEntityReporting, field not selected");
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setSetSensorEntityReporting(xs::Boolean value) {
  chooseSetSensorEntityReporting();
  setSensorEntityReporting_Accessor = value;
  return *this;
}

bool SystemManagementRequestType::isSetSensorEntityReporting() const noexcept {
  return static_cast<bool>(setSensorEntityReporting_Accessor);
}

void SystemManagementRequestType::chooseSetSensorEntityReporting() {
  setMode_Accessor.reset();
  setIdentity_Accessor.reset();
  setLink16Metadata_Accessor.reset();
  setVoiceControl_Accessor.reset();
  vehicleSettings_Accessor.reset();
  if (!setSensorEntityReporting_Accessor) {
    setSensorEntityReporting_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

uci::type::VehicleCommandDataType& SystemManagementRequestType::getVehicleSettings_() const {
  if (vehicleSettings_Accessor) {
    return *vehicleSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleSettings(): Unable to get VehicleSettings, field not selected");
}

const uci::type::VehicleCommandDataType& SystemManagementRequestType::getVehicleSettings() const {
  return getVehicleSettings_();
}

uci::type::VehicleCommandDataType& SystemManagementRequestType::getVehicleSettings() {
  return getVehicleSettings_();
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::setVehicleSettings(const uci::type::VehicleCommandDataType& accessor) {
  chooseVehicleSettings();
  if (&accessor != vehicleSettings_Accessor.get()) {
    vehicleSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemManagementRequestType::isVehicleSettings() const noexcept {
  return static_cast<bool>(vehicleSettings_Accessor);
}

uci::type::VehicleCommandDataType& SystemManagementRequestType::chooseVehicleSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  setMode_Accessor.reset();
  setIdentity_Accessor.reset();
  setLink16Metadata_Accessor.reset();
  setVoiceControl_Accessor.reset();
  setSensorEntityReporting_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleCommandDataType : type};
  if ((!vehicleSettings_Accessor) || (vehicleSettings_Accessor->getAccessorType() != requestedType)) {
    vehicleSettings_Accessor = VehicleCommandDataType::create(type);
    if (!vehicleSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleSettings_Accessor;
}

uci::type::VehicleCommandDataType& SystemManagementRequestType::chooseVehicleSettings(uci::base::accessorType::AccessorType type) {
  return chooseVehicleSettings("chooseVehicleSettings", type);
}

std::unique_ptr<SystemManagementRequestType> SystemManagementRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemManagementRequestType : type};
  return (requestedType == uci::type::accessorType::systemManagementRequestType) ? boost::make_unique<SystemManagementRequestType>() : nullptr;
}

/**  */
namespace SystemManagementRequestType_Names {

constexpr const char* Extern_Type_Name{"SystemManagementRequestType"};
constexpr const char* SetMode_Name{"SetMode"};
constexpr const char* SetIdentity_Name{"SetIdentity"};
constexpr const char* SetLink16Metadata_Name{"SetLink16Metadata"};
constexpr const char* SetVoiceControl_Name{"SetVoiceControl"};
constexpr const char* SetSensorEntityReporting_Name{"SetSensorEntityReporting"};
constexpr const char* VehicleSettings_Name{"VehicleSettings"};

} // namespace SystemManagementRequestType_Names

void SystemManagementRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemManagementRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SystemManagementRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SystemManagementRequestType_Names::SetMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseSetMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemManagementRequestType_Names::SetIdentity_Name) {
      SystemIdentityType::deserialize(valueType.second, accessor.chooseSetIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemManagementRequestType_Names::SetLink16Metadata_Name) {
      Link16MetadataType::deserialize(valueType.second, accessor.chooseSetLink16Metadata(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemManagementRequestType_Names::SetVoiceControl_Name) {
      VoiceControlType::deserialize(valueType.second, accessor.chooseSetVoiceControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemManagementRequestType_Names::SetSensorEntityReporting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSetSensorEntityReporting(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SystemManagementRequestType_Names::VehicleSettings_Name) {
      VehicleCommandDataType::deserialize(valueType.second, accessor.chooseVehicleSettings(), nodeName, nsPrefix);
    }
  }
}

std::string SystemManagementRequestType::serialize(const uci::type::SystemManagementRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SystemManagementRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SystemManagementRequestType_Names::Extern_Type_Name);
  }
  if (accessor.isSetMode()) {
    MessageModeEnum::serialize(accessor.getSetMode(), node, SystemManagementRequestType_Names::SetMode_Name, false);
  } else if (accessor.isSetIdentity()) {
    SystemIdentityType::serialize(accessor.getSetIdentity(), node, SystemManagementRequestType_Names::SetIdentity_Name);
  } else if (accessor.isSetLink16Metadata()) {
    Link16MetadataType::serialize(accessor.getSetLink16Metadata(), node, SystemManagementRequestType_Names::SetLink16Metadata_Name);
  } else if (accessor.isSetVoiceControl()) {
    VoiceControlType::serialize(accessor.getSetVoiceControl(), node, SystemManagementRequestType_Names::SetVoiceControl_Name);
  } else if (accessor.isSetSensorEntityReporting()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSetSensorEntityReporting(), node, SystemManagementRequestType_Names::SetSensorEntityReporting_Name);
  } else if (accessor.isVehicleSettings()) {
    VehicleCommandDataType::serialize(accessor.getVehicleSettings(), node, SystemManagementRequestType_Names::VehicleSettings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SystemManagementRequestType& SystemManagementRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SystemManagementRequestType>().release());
}

uci::type::SystemManagementRequestType& SystemManagementRequestType::create(const uci::type::SystemManagementRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SystemManagementRequestType> newAccessor{boost::make_unique<asb_uci::type::SystemManagementRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SystemManagementRequestType::destroy(uci::type::SystemManagementRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::SystemManagementRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

