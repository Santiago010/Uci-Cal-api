/** @file ForceModelType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ForceModelType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AtmosphericDragModelType.h"
#include "../../../include/asb_uci/type/EarthOrientationParametersDataChoiceType.h"
#include "../../../include/asb_uci/type/GravityModelType.h"
#include "../../../include/asb_uci/type/OrbitalManeuverDetailsType.h"
#include "../../../include/asb_uci/type/PhysicalModelType.h"
#include "../../../include/asb_uci/type/SolarRadiationPressureModelType.h"
#include "../../../include/asb_uci/type/ThirdBodyGravityType.h"
#include "../../../include/asb_uci/type/VCM_ForceModelOptionsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AtmosphericDragModelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EarthOrientationParametersDataChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForceModelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GravityModelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalManeuverDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PhysicalModelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SolarRadiationPressureModelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThirdBodyGravityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VCM_ForceModelOptionsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ForceModelType::ForceModelType()
  : maneuver_Accessor{boost::make_unique<Maneuver>(0, SIZE_MAX)} {
}

ForceModelType::~ForceModelType() = default;

void ForceModelType::copy(const uci::type::ForceModelType& accessor) {
  copyImpl(accessor, false);
}

void ForceModelType::copyImpl(const uci::type::ForceModelType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ForceModelType&>(accessor);
    if (accessorImpl.gravityModel_Accessor) {
      setGravityModel(*(accessorImpl.gravityModel_Accessor));
    } else {
      gravityModel_Accessor.reset();
    }
    if (accessorImpl.atmosphericDragModel_Accessor) {
      setAtmosphericDragModel(*(accessorImpl.atmosphericDragModel_Accessor));
    } else {
      atmosphericDragModel_Accessor.reset();
    }
    if (accessorImpl.solarRadiationPressureModel_Accessor) {
      setSolarRadiationPressureModel(*(accessorImpl.solarRadiationPressureModel_Accessor));
    } else {
      solarRadiationPressureModel_Accessor.reset();
    }
    if (accessorImpl.thirdBodyGravityModel_Accessor) {
      setThirdBodyGravityModel(*(accessorImpl.thirdBodyGravityModel_Accessor));
    } else {
      thirdBodyGravityModel_Accessor.reset();
    }
    if (accessorImpl.earthOrientationParametersDataChoice_Accessor) {
      setEarthOrientationParametersDataChoice(*(accessorImpl.earthOrientationParametersDataChoice_Accessor));
    } else {
      earthOrientationParametersDataChoice_Accessor.reset();
    }
    if (accessorImpl.physicalModel_Accessor) {
      setPhysicalModel(*(accessorImpl.physicalModel_Accessor));
    } else {
      physicalModel_Accessor.reset();
    }
    setManeuver(*(accessorImpl.maneuver_Accessor));
    if (accessorImpl.vCM_ForceModelOptions_Accessor) {
      setVCM_ForceModelOptions(*(accessorImpl.vCM_ForceModelOptions_Accessor));
    } else {
      vCM_ForceModelOptions_Accessor.reset();
    }
  }
}

void ForceModelType::reset() noexcept {
  gravityModel_Accessor.reset();
  atmosphericDragModel_Accessor.reset();
  solarRadiationPressureModel_Accessor.reset();
  thirdBodyGravityModel_Accessor.reset();
  earthOrientationParametersDataChoice_Accessor.reset();
  physicalModel_Accessor.reset();
  maneuver_Accessor->reset();
  vCM_ForceModelOptions_Accessor.reset();
}

uci::type::GravityModelType& ForceModelType::getGravityModel_() const {
  if (gravityModel_Accessor) {
    return *gravityModel_Accessor;
  }
  throw uci::base::UCIException("Error in getGravityModel(): An attempt was made to get an optional field that was not enabled, call hasGravityModel() to determine if it is safe to call getGravityModel()");
}

const uci::type::GravityModelType& ForceModelType::getGravityModel() const {
  return getGravityModel_();
}

uci::type::GravityModelType& ForceModelType::getGravityModel() {
  return getGravityModel_();
}

uci::type::ForceModelType& ForceModelType::setGravityModel(const uci::type::GravityModelType& accessor) {
  enableGravityModel();
  if (&accessor != gravityModel_Accessor.get()) {
    gravityModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ForceModelType::hasGravityModel() const noexcept {
  return static_cast<bool>(gravityModel_Accessor);
}

uci::type::GravityModelType& ForceModelType::enableGravityModel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gravityModelType : type};
  if ((!gravityModel_Accessor) || (gravityModel_Accessor->getAccessorType() != requestedType)) {
    gravityModel_Accessor = GravityModelType::create(requestedType);
    if (!gravityModel_Accessor) {
      throw uci::base::UCIException("Error in enableGravityModel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gravityModel_Accessor;
}

uci::type::ForceModelType& ForceModelType::clearGravityModel() noexcept {
  gravityModel_Accessor.reset();
  return *this;
}

uci::type::AtmosphericDragModelType& ForceModelType::getAtmosphericDragModel_() const {
  if (atmosphericDragModel_Accessor) {
    return *atmosphericDragModel_Accessor;
  }
  throw uci::base::UCIException("Error in getAtmosphericDragModel(): An attempt was made to get an optional field that was not enabled, call hasAtmosphericDragModel() to determine if it is safe to call getAtmosphericDragModel()");
}

const uci::type::AtmosphericDragModelType& ForceModelType::getAtmosphericDragModel() const {
  return getAtmosphericDragModel_();
}

uci::type::AtmosphericDragModelType& ForceModelType::getAtmosphericDragModel() {
  return getAtmosphericDragModel_();
}

uci::type::ForceModelType& ForceModelType::setAtmosphericDragModel(const uci::type::AtmosphericDragModelType& accessor) {
  enableAtmosphericDragModel();
  if (&accessor != atmosphericDragModel_Accessor.get()) {
    atmosphericDragModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ForceModelType::hasAtmosphericDragModel() const noexcept {
  return static_cast<bool>(atmosphericDragModel_Accessor);
}

uci::type::AtmosphericDragModelType& ForceModelType::enableAtmosphericDragModel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::atmosphericDragModelType : type};
  if ((!atmosphericDragModel_Accessor) || (atmosphericDragModel_Accessor->getAccessorType() != requestedType)) {
    atmosphericDragModel_Accessor = AtmosphericDragModelType::create(requestedType);
    if (!atmosphericDragModel_Accessor) {
      throw uci::base::UCIException("Error in enableAtmosphericDragModel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *atmosphericDragModel_Accessor;
}

uci::type::ForceModelType& ForceModelType::clearAtmosphericDragModel() noexcept {
  atmosphericDragModel_Accessor.reset();
  return *this;
}

uci::type::SolarRadiationPressureModelType& ForceModelType::getSolarRadiationPressureModel_() const {
  if (solarRadiationPressureModel_Accessor) {
    return *solarRadiationPressureModel_Accessor;
  }
  throw uci::base::UCIException("Error in getSolarRadiationPressureModel(): An attempt was made to get an optional field that was not enabled, call hasSolarRadiationPressureModel() to determine if it is safe to call getSolarRadiationPressureModel()");
}

const uci::type::SolarRadiationPressureModelType& ForceModelType::getSolarRadiationPressureModel() const {
  return getSolarRadiationPressureModel_();
}

uci::type::SolarRadiationPressureModelType& ForceModelType::getSolarRadiationPressureModel() {
  return getSolarRadiationPressureModel_();
}

uci::type::ForceModelType& ForceModelType::setSolarRadiationPressureModel(const uci::type::SolarRadiationPressureModelType& accessor) {
  enableSolarRadiationPressureModel();
  if (&accessor != solarRadiationPressureModel_Accessor.get()) {
    solarRadiationPressureModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ForceModelType::hasSolarRadiationPressureModel() const noexcept {
  return static_cast<bool>(solarRadiationPressureModel_Accessor);
}

uci::type::SolarRadiationPressureModelType& ForceModelType::enableSolarRadiationPressureModel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::solarRadiationPressureModelType : type};
  if ((!solarRadiationPressureModel_Accessor) || (solarRadiationPressureModel_Accessor->getAccessorType() != requestedType)) {
    solarRadiationPressureModel_Accessor = SolarRadiationPressureModelType::create(requestedType);
    if (!solarRadiationPressureModel_Accessor) {
      throw uci::base::UCIException("Error in enableSolarRadiationPressureModel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *solarRadiationPressureModel_Accessor;
}

uci::type::ForceModelType& ForceModelType::clearSolarRadiationPressureModel() noexcept {
  solarRadiationPressureModel_Accessor.reset();
  return *this;
}

uci::type::ThirdBodyGravityType& ForceModelType::getThirdBodyGravityModel_() const {
  if (thirdBodyGravityModel_Accessor) {
    return *thirdBodyGravityModel_Accessor;
  }
  throw uci::base::UCIException("Error in getThirdBodyGravityModel(): An attempt was made to get an optional field that was not enabled, call hasThirdBodyGravityModel() to determine if it is safe to call getThirdBodyGravityModel()");
}

const uci::type::ThirdBodyGravityType& ForceModelType::getThirdBodyGravityModel() const {
  return getThirdBodyGravityModel_();
}

uci::type::ThirdBodyGravityType& ForceModelType::getThirdBodyGravityModel() {
  return getThirdBodyGravityModel_();
}

uci::type::ForceModelType& ForceModelType::setThirdBodyGravityModel(const uci::type::ThirdBodyGravityType& accessor) {
  enableThirdBodyGravityModel();
  if (&accessor != thirdBodyGravityModel_Accessor.get()) {
    thirdBodyGravityModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ForceModelType::hasThirdBodyGravityModel() const noexcept {
  return static_cast<bool>(thirdBodyGravityModel_Accessor);
}

uci::type::ThirdBodyGravityType& ForceModelType::enableThirdBodyGravityModel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::thirdBodyGravityType : type};
  if ((!thirdBodyGravityModel_Accessor) || (thirdBodyGravityModel_Accessor->getAccessorType() != requestedType)) {
    thirdBodyGravityModel_Accessor = ThirdBodyGravityType::create(requestedType);
    if (!thirdBodyGravityModel_Accessor) {
      throw uci::base::UCIException("Error in enableThirdBodyGravityModel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *thirdBodyGravityModel_Accessor;
}

uci::type::ForceModelType& ForceModelType::clearThirdBodyGravityModel() noexcept {
  thirdBodyGravityModel_Accessor.reset();
  return *this;
}

uci::type::EarthOrientationParametersDataChoiceType& ForceModelType::getEarthOrientationParametersDataChoice_() const {
  if (earthOrientationParametersDataChoice_Accessor) {
    return *earthOrientationParametersDataChoice_Accessor;
  }
  throw uci::base::UCIException("Error in getEarthOrientationParametersDataChoice(): An attempt was made to get an optional field that was not enabled, call hasEarthOrientationParametersDataChoice() to determine if it is safe to call getEarthOrientationParametersDataChoice()");
}

const uci::type::EarthOrientationParametersDataChoiceType& ForceModelType::getEarthOrientationParametersDataChoice() const {
  return getEarthOrientationParametersDataChoice_();
}

uci::type::EarthOrientationParametersDataChoiceType& ForceModelType::getEarthOrientationParametersDataChoice() {
  return getEarthOrientationParametersDataChoice_();
}

uci::type::ForceModelType& ForceModelType::setEarthOrientationParametersDataChoice(const uci::type::EarthOrientationParametersDataChoiceType& accessor) {
  enableEarthOrientationParametersDataChoice();
  if (&accessor != earthOrientationParametersDataChoice_Accessor.get()) {
    earthOrientationParametersDataChoice_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ForceModelType::hasEarthOrientationParametersDataChoice() const noexcept {
  return static_cast<bool>(earthOrientationParametersDataChoice_Accessor);
}

uci::type::EarthOrientationParametersDataChoiceType& ForceModelType::enableEarthOrientationParametersDataChoice(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::earthOrientationParametersDataChoiceType : type};
  if ((!earthOrientationParametersDataChoice_Accessor) || (earthOrientationParametersDataChoice_Accessor->getAccessorType() != requestedType)) {
    earthOrientationParametersDataChoice_Accessor = EarthOrientationParametersDataChoiceType::create(requestedType);
    if (!earthOrientationParametersDataChoice_Accessor) {
      throw uci::base::UCIException("Error in enableEarthOrientationParametersDataChoice(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *earthOrientationParametersDataChoice_Accessor;
}

uci::type::ForceModelType& ForceModelType::clearEarthOrientationParametersDataChoice() noexcept {
  earthOrientationParametersDataChoice_Accessor.reset();
  return *this;
}

uci::type::PhysicalModelType& ForceModelType::getPhysicalModel_() const {
  if (physicalModel_Accessor) {
    return *physicalModel_Accessor;
  }
  throw uci::base::UCIException("Error in getPhysicalModel(): An attempt was made to get an optional field that was not enabled, call hasPhysicalModel() to determine if it is safe to call getPhysicalModel()");
}

const uci::type::PhysicalModelType& ForceModelType::getPhysicalModel() const {
  return getPhysicalModel_();
}

uci::type::PhysicalModelType& ForceModelType::getPhysicalModel() {
  return getPhysicalModel_();
}

uci::type::ForceModelType& ForceModelType::setPhysicalModel(const uci::type::PhysicalModelType& accessor) {
  enablePhysicalModel();
  if (&accessor != physicalModel_Accessor.get()) {
    physicalModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ForceModelType::hasPhysicalModel() const noexcept {
  return static_cast<bool>(physicalModel_Accessor);
}

uci::type::PhysicalModelType& ForceModelType::enablePhysicalModel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::physicalModelType : type};
  if ((!physicalModel_Accessor) || (physicalModel_Accessor->getAccessorType() != requestedType)) {
    physicalModel_Accessor = PhysicalModelType::create(requestedType);
    if (!physicalModel_Accessor) {
      throw uci::base::UCIException("Error in enablePhysicalModel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *physicalModel_Accessor;
}

uci::type::ForceModelType& ForceModelType::clearPhysicalModel() noexcept {
  physicalModel_Accessor.reset();
  return *this;
}

const uci::type::ForceModelType::Maneuver& ForceModelType::getManeuver() const {
  return *maneuver_Accessor;
}

uci::type::ForceModelType::Maneuver& ForceModelType::getManeuver() {
  return *maneuver_Accessor;
}

uci::type::ForceModelType& ForceModelType::setManeuver(const uci::type::ForceModelType::Maneuver& accessor) {
  if (&accessor != maneuver_Accessor.get()) {
    maneuver_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VCM_ForceModelOptionsType& ForceModelType::getVCM_ForceModelOptions_() const {
  if (vCM_ForceModelOptions_Accessor) {
    return *vCM_ForceModelOptions_Accessor;
  }
  throw uci::base::UCIException("Error in getVCM_ForceModelOptions(): An attempt was made to get an optional field that was not enabled, call hasVCM_ForceModelOptions() to determine if it is safe to call getVCM_ForceModelOptions()");
}

const uci::type::VCM_ForceModelOptionsType& ForceModelType::getVCM_ForceModelOptions() const {
  return getVCM_ForceModelOptions_();
}

uci::type::VCM_ForceModelOptionsType& ForceModelType::getVCM_ForceModelOptions() {
  return getVCM_ForceModelOptions_();
}

uci::type::ForceModelType& ForceModelType::setVCM_ForceModelOptions(const uci::type::VCM_ForceModelOptionsType& accessor) {
  enableVCM_ForceModelOptions();
  if (&accessor != vCM_ForceModelOptions_Accessor.get()) {
    vCM_ForceModelOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ForceModelType::hasVCM_ForceModelOptions() const noexcept {
  return static_cast<bool>(vCM_ForceModelOptions_Accessor);
}

uci::type::VCM_ForceModelOptionsType& ForceModelType::enableVCM_ForceModelOptions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vCM_ForceModelOptionsType : type};
  if ((!vCM_ForceModelOptions_Accessor) || (vCM_ForceModelOptions_Accessor->getAccessorType() != requestedType)) {
    vCM_ForceModelOptions_Accessor = VCM_ForceModelOptionsType::create(requestedType);
    if (!vCM_ForceModelOptions_Accessor) {
      throw uci::base::UCIException("Error in enableVCM_ForceModelOptions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vCM_ForceModelOptions_Accessor;
}

uci::type::ForceModelType& ForceModelType::clearVCM_ForceModelOptions() noexcept {
  vCM_ForceModelOptions_Accessor.reset();
  return *this;
}

std::unique_ptr<ForceModelType> ForceModelType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::forceModelType : type};
  return (requestedType == uci::type::accessorType::forceModelType) ? boost::make_unique<ForceModelType>() : nullptr;
}

/**  */
namespace ForceModelType_Names {

constexpr const char* Extern_Type_Name{"ForceModelType"};
constexpr const char* GravityModel_Name{"GravityModel"};
constexpr const char* AtmosphericDragModel_Name{"AtmosphericDragModel"};
constexpr const char* SolarRadiationPressureModel_Name{"SolarRadiationPressureModel"};
constexpr const char* ThirdBodyGravityModel_Name{"ThirdBodyGravityModel"};
constexpr const char* EarthOrientationParametersDataChoice_Name{"EarthOrientationParametersDataChoice"};
constexpr const char* PhysicalModel_Name{"PhysicalModel"};
constexpr const char* Maneuver_Name{"Maneuver"};
constexpr const char* VCM_ForceModelOptions_Name{"VCM_ForceModelOptions"};

} // namespace ForceModelType_Names

void ForceModelType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ForceModelType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ForceModelType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ForceModelType_Names::GravityModel_Name) {
      GravityModelType::deserialize(valueType.second, accessor.enableGravityModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::AtmosphericDragModel_Name) {
      AtmosphericDragModelType::deserialize(valueType.second, accessor.enableAtmosphericDragModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::SolarRadiationPressureModel_Name) {
      SolarRadiationPressureModelType::deserialize(valueType.second, accessor.enableSolarRadiationPressureModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::ThirdBodyGravityModel_Name) {
      ThirdBodyGravityType::deserialize(valueType.second, accessor.enableThirdBodyGravityModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::EarthOrientationParametersDataChoice_Name) {
      EarthOrientationParametersDataChoiceType::deserialize(valueType.second, accessor.enableEarthOrientationParametersDataChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::PhysicalModel_Name) {
      PhysicalModelType::deserialize(valueType.second, accessor.enablePhysicalModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::Maneuver_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ForceModelType::Maneuver& boundedList = accessor.getManeuver();
        const uci::type::ForceModelType::Maneuver::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalManeuverDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ForceModelType_Names::VCM_ForceModelOptions_Name) {
      VCM_ForceModelOptionsType::deserialize(valueType.second, accessor.enableVCM_ForceModelOptions(), nodeName, nsPrefix);
    }
  }
}

std::string ForceModelType::serialize(const uci::type::ForceModelType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ForceModelType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ForceModelType_Names::Extern_Type_Name);
  }
  if (accessor.hasGravityModel()) {
    GravityModelType::serialize(accessor.getGravityModel(), node, ForceModelType_Names::GravityModel_Name);
  }
  if (accessor.hasAtmosphericDragModel()) {
    AtmosphericDragModelType::serialize(accessor.getAtmosphericDragModel(), node, ForceModelType_Names::AtmosphericDragModel_Name);
  }
  if (accessor.hasSolarRadiationPressureModel()) {
    SolarRadiationPressureModelType::serialize(accessor.getSolarRadiationPressureModel(), node, ForceModelType_Names::SolarRadiationPressureModel_Name);
  }
  if (accessor.hasThirdBodyGravityModel()) {
    ThirdBodyGravityType::serialize(accessor.getThirdBodyGravityModel(), node, ForceModelType_Names::ThirdBodyGravityModel_Name);
  }
  if (accessor.hasEarthOrientationParametersDataChoice()) {
    EarthOrientationParametersDataChoiceType::serialize(accessor.getEarthOrientationParametersDataChoice(), node, ForceModelType_Names::EarthOrientationParametersDataChoice_Name);
  }
  if (accessor.hasPhysicalModel()) {
    PhysicalModelType::serialize(accessor.getPhysicalModel(), node, ForceModelType_Names::PhysicalModel_Name);
  }
  {
    const uci::type::ForceModelType::Maneuver& boundedList = accessor.getManeuver();
    for (uci::type::ForceModelType::Maneuver::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalManeuverDetailsType::serialize(boundedList.at(i), node, ForceModelType_Names::Maneuver_Name);
    }
  }
  if (accessor.hasVCM_ForceModelOptions()) {
    VCM_ForceModelOptionsType::serialize(accessor.getVCM_ForceModelOptions(), node, ForceModelType_Names::VCM_ForceModelOptions_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ForceModelType& ForceModelType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ForceModelType>().release());
}

uci::type::ForceModelType& ForceModelType::create(const uci::type::ForceModelType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ForceModelType> newAccessor{boost::make_unique<asb_uci::type::ForceModelType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ForceModelType::destroy(uci::type::ForceModelType& accessor) {
  delete dynamic_cast<asb_uci::type::ForceModelType*>(&accessor);
}

} // namespace type

} // namespace uci

