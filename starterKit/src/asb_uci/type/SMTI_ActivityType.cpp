/** @file SMTI_ActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SMTI_ActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/MTI_ActivityStatusDetailType.h"
#include "asb_uci/type/MultistaticModeOptionsEmployedType.h"
#include "asb_uci/type/RadarPointingTargetType.h"
#include "asb_uci/type/RepetitionType.h"
#include "asb_uci/type/SMTI_PredictedCollectionsType.h"
#include "asb_uci/type/SMTI_SubCapabilityEnum.h"
#include "asb_uci/type/SharedRF_ApertureActivityBaseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/MTI_ActivityStatusDetailType.h"
#include "uci/type/MultistaticModeOptionsEmployedType.h"
#include "uci/type/RadarPointingTargetType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/SMTI_ActivityType.h"
#include "uci/type/SMTI_PredictedCollectionsType.h"
#include "uci/type/SMTI_SubCapabilityEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SMTI_ActivityType::SMTI_ActivityType()
  : subCapability_Accessor{boost::make_unique<SubCapability>(0, 5)},
    radarPointingTarget_Accessor{boost::make_unique<RadarPointingTargetType>()},
    metrics_Accessor{boost::make_unique<Metrics>(0, SIZE_MAX)},
    predictedCollections_Accessor{boost::make_unique<PredictedCollections>(0, SIZE_MAX)},
    electronicProtectionOptionsEmployed_Accessor{boost::make_unique<ElectronicProtectionOptionsEmployed>(0, SIZE_MAX)} {
}

SMTI_ActivityType::~SMTI_ActivityType() = default;

void SMTI_ActivityType::copy(const uci::type::SMTI_ActivityType& accessor) {
  copyImpl(accessor, false);
}

void SMTI_ActivityType::copyImpl(const uci::type::SMTI_ActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SMTI_ActivityType&>(accessor);
    setSubCapability(*(accessorImpl.subCapability_Accessor));
    setRadarPointingTarget(*(accessorImpl.radarPointingTarget_Accessor));
    setMetrics(*(accessorImpl.metrics_Accessor));
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
    if (accessorImpl.hasPolicyApplied()) {
      setPolicyApplied(accessorImpl.getPolicyApplied());
    } else {
      clearPolicyApplied();
    }
    setAllProductsAndMessagesProduced(accessorImpl.allProductsAndMessagesProduced_Accessor);
    setPredictedCollections(*(accessorImpl.predictedCollections_Accessor));
    setElectronicProtectionOptionsEmployed(*(accessorImpl.electronicProtectionOptionsEmployed_Accessor));
    if (accessorImpl.multistaticModeOptionsEmployed_Accessor) {
      setMultistaticModeOptionsEmployed(*(accessorImpl.multistaticModeOptionsEmployed_Accessor));
    } else {
      multistaticModeOptionsEmployed_Accessor.reset();
    }
  }
}

void SMTI_ActivityType::reset() noexcept {
  SharedRF_ApertureActivityBaseType::reset();
  subCapability_Accessor->reset();
  radarPointingTarget_Accessor->reset();
  metrics_Accessor->reset();
  repetition_Accessor.reset();
  clearPolicyApplied();
  allProductsAndMessagesProduced_Accessor = false;
  predictedCollections_Accessor->reset();
  electronicProtectionOptionsEmployed_Accessor->reset();
  multistaticModeOptionsEmployed_Accessor.reset();
}

const uci::type::SMTI_ActivityType::SubCapability& SMTI_ActivityType::getSubCapability() const {
  return *subCapability_Accessor;
}

uci::type::SMTI_ActivityType::SubCapability& SMTI_ActivityType::getSubCapability() {
  return *subCapability_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setSubCapability(const uci::type::SMTI_ActivityType::SubCapability& accessor) {
  if (&accessor != subCapability_Accessor.get()) {
    subCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RadarPointingTargetType& SMTI_ActivityType::getRadarPointingTarget() const {
  return *radarPointingTarget_Accessor;
}

uci::type::RadarPointingTargetType& SMTI_ActivityType::getRadarPointingTarget() {
  return *radarPointingTarget_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setRadarPointingTarget(const uci::type::RadarPointingTargetType& accessor) {
  if (&accessor != radarPointingTarget_Accessor.get()) {
    radarPointingTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SMTI_ActivityType::Metrics& SMTI_ActivityType::getMetrics() const {
  return *metrics_Accessor;
}

uci::type::SMTI_ActivityType::Metrics& SMTI_ActivityType::getMetrics() {
  return *metrics_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setMetrics(const uci::type::SMTI_ActivityType::Metrics& accessor) {
  if (&accessor != metrics_Accessor.get()) {
    metrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RepetitionType& SMTI_ActivityType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& SMTI_ActivityType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& SMTI_ActivityType::getRepetition() {
  return getRepetition_();
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& SMTI_ActivityType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

xs::Boolean SMTI_ActivityType::getPolicyApplied() const {
  if (policyApplied_Accessor) {
    return *policyApplied_Accessor;
  }
  throw uci::base::UCIException("Error in getPolicyApplied(): An attempt was made to get an optional field that was not enabled, call hasPolicyApplied() to determine if it is safe to call getPolicyApplied()");
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setPolicyApplied(xs::Boolean value) {
  policyApplied_Accessor = value;
  return *this;
}

bool SMTI_ActivityType::hasPolicyApplied() const noexcept {
  return policyApplied_Accessor.has_value();
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::clearPolicyApplied() noexcept {
  policyApplied_Accessor.reset();
  return *this;
}

xs::Boolean SMTI_ActivityType::getAllProductsAndMessagesProduced() const {
  return allProductsAndMessagesProduced_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setAllProductsAndMessagesProduced(xs::Boolean value) {
  allProductsAndMessagesProduced_Accessor = value;
  return *this;
}


const uci::type::SMTI_ActivityType::PredictedCollections& SMTI_ActivityType::getPredictedCollections() const {
  return *predictedCollections_Accessor;
}

uci::type::SMTI_ActivityType::PredictedCollections& SMTI_ActivityType::getPredictedCollections() {
  return *predictedCollections_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setPredictedCollections(const uci::type::SMTI_ActivityType::PredictedCollections& accessor) {
  if (&accessor != predictedCollections_Accessor.get()) {
    predictedCollections_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SMTI_ActivityType::ElectronicProtectionOptionsEmployed& SMTI_ActivityType::getElectronicProtectionOptionsEmployed() const {
  return *electronicProtectionOptionsEmployed_Accessor;
}

uci::type::SMTI_ActivityType::ElectronicProtectionOptionsEmployed& SMTI_ActivityType::getElectronicProtectionOptionsEmployed() {
  return *electronicProtectionOptionsEmployed_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setElectronicProtectionOptionsEmployed(const uci::type::SMTI_ActivityType::ElectronicProtectionOptionsEmployed& accessor) {
  if (&accessor != electronicProtectionOptionsEmployed_Accessor.get()) {
    electronicProtectionOptionsEmployed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MultistaticModeOptionsEmployedType& SMTI_ActivityType::getMultistaticModeOptionsEmployed_() const {
  if (multistaticModeOptionsEmployed_Accessor) {
    return *multistaticModeOptionsEmployed_Accessor;
  }
  throw uci::base::UCIException("Error in getMultistaticModeOptionsEmployed(): An attempt was made to get an optional field that was not enabled, call hasMultistaticModeOptionsEmployed() to determine if it is safe to call getMultistaticModeOptionsEmployed()");
}

const uci::type::MultistaticModeOptionsEmployedType& SMTI_ActivityType::getMultistaticModeOptionsEmployed() const {
  return getMultistaticModeOptionsEmployed_();
}

uci::type::MultistaticModeOptionsEmployedType& SMTI_ActivityType::getMultistaticModeOptionsEmployed() {
  return getMultistaticModeOptionsEmployed_();
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::setMultistaticModeOptionsEmployed(const uci::type::MultistaticModeOptionsEmployedType& accessor) {
  enableMultistaticModeOptionsEmployed();
  if (&accessor != multistaticModeOptionsEmployed_Accessor.get()) {
    multistaticModeOptionsEmployed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityType::hasMultistaticModeOptionsEmployed() const noexcept {
  return static_cast<bool>(multistaticModeOptionsEmployed_Accessor);
}

uci::type::MultistaticModeOptionsEmployedType& SMTI_ActivityType::enableMultistaticModeOptionsEmployed(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::multistaticModeOptionsEmployedType : type};
  if ((!multistaticModeOptionsEmployed_Accessor) || (multistaticModeOptionsEmployed_Accessor->getAccessorType() != requestedType)) {
    multistaticModeOptionsEmployed_Accessor = MultistaticModeOptionsEmployedType::create(requestedType);
    if (!multistaticModeOptionsEmployed_Accessor) {
      throw uci::base::UCIException("Error in enableMultistaticModeOptionsEmployed(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *multistaticModeOptionsEmployed_Accessor;
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::clearMultistaticModeOptionsEmployed() noexcept {
  multistaticModeOptionsEmployed_Accessor.reset();
  return *this;
}

std::unique_ptr<SMTI_ActivityType> SMTI_ActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_ActivityType : type};
  return (requestedType == uci::type::accessorType::sMTI_ActivityType) ? boost::make_unique<SMTI_ActivityType>() : nullptr;
}

/**  */
namespace SMTI_ActivityType_Names {

constexpr const char* Extern_Type_Name{"SMTI_ActivityType"};
constexpr const char* SubCapability_Name{"SubCapability"};
constexpr const char* RadarPointingTarget_Name{"RadarPointingTarget"};
constexpr const char* Metrics_Name{"Metrics"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* PolicyApplied_Name{"PolicyApplied"};
constexpr const char* AllProductsAndMessagesProduced_Name{"AllProductsAndMessagesProduced"};
constexpr const char* PredictedCollections_Name{"PredictedCollections"};
constexpr const char* ElectronicProtectionOptionsEmployed_Name{"ElectronicProtectionOptionsEmployed"};
constexpr const char* MultistaticModeOptionsEmployed_Name{"MultistaticModeOptionsEmployed"};

} // namespace SMTI_ActivityType_Names

void SMTI_ActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_ActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SMTI_ActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::SubCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_ActivityType::SubCapability& boundedList = accessor.getSubCapability();
        const uci::type::SMTI_ActivityType::SubCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::RadarPointingTarget_Name) {
      RadarPointingTargetType::deserialize(valueType.second, accessor.getRadarPointingTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::Metrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_ActivityType::Metrics& boundedList = accessor.getMetrics();
        const uci::type::SMTI_ActivityType::Metrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MTI_ActivityStatusDetailType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::PolicyApplied_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPolicyApplied(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::AllProductsAndMessagesProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAllProductsAndMessagesProduced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::PredictedCollections_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_ActivityType::PredictedCollections& boundedList = accessor.getPredictedCollections();
        const uci::type::SMTI_ActivityType::PredictedCollections::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SMTI_PredictedCollectionsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::ElectronicProtectionOptionsEmployed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_ActivityType::ElectronicProtectionOptionsEmployed& boundedList = accessor.getElectronicProtectionOptionsEmployed();
        const uci::type::SMTI_ActivityType::ElectronicProtectionOptionsEmployed::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityType_Names::MultistaticModeOptionsEmployed_Name) {
      MultistaticModeOptionsEmployedType::deserialize(valueType.second, accessor.enableMultistaticModeOptionsEmployed(), nodeName, nsPrefix);
    }
  }
  SharedRF_ApertureActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SMTI_ActivityType::serialize(const uci::type::SMTI_ActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SMTI_ActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SMTI_ActivityType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::SMTI_ActivityType::SubCapability& boundedList = accessor.getSubCapability();
    for (uci::type::SMTI_ActivityType::SubCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SMTI_SubCapabilityEnum::serialize(boundedList.at(i), node, SMTI_ActivityType_Names::SubCapability_Name, false);
    }
  }
  RadarPointingTargetType::serialize(accessor.getRadarPointingTarget(), node, SMTI_ActivityType_Names::RadarPointingTarget_Name);
  {
    const uci::type::SMTI_ActivityType::Metrics& boundedList = accessor.getMetrics();
    for (uci::type::SMTI_ActivityType::Metrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MTI_ActivityStatusDetailType::serialize(boundedList.at(i), node, SMTI_ActivityType_Names::Metrics_Name);
    }
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, SMTI_ActivityType_Names::Repetition_Name);
  }
  if (accessor.hasPolicyApplied()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPolicyApplied(), node, SMTI_ActivityType_Names::PolicyApplied_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAllProductsAndMessagesProduced(), node, SMTI_ActivityType_Names::AllProductsAndMessagesProduced_Name);
  {
    const uci::type::SMTI_ActivityType::PredictedCollections& boundedList = accessor.getPredictedCollections();
    for (uci::type::SMTI_ActivityType::PredictedCollections::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SMTI_PredictedCollectionsType::serialize(boundedList.at(i), node, SMTI_ActivityType_Names::PredictedCollections_Name);
    }
  }
  {
    const uci::type::SMTI_ActivityType::ElectronicProtectionOptionsEmployed& boundedList = accessor.getElectronicProtectionOptionsEmployed();
    for (uci::type::SMTI_ActivityType::ElectronicProtectionOptionsEmployed::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, SMTI_ActivityType_Names::ElectronicProtectionOptionsEmployed_Name);
    }
  }
  if (accessor.hasMultistaticModeOptionsEmployed()) {
    MultistaticModeOptionsEmployedType::serialize(accessor.getMultistaticModeOptionsEmployed(), node, SMTI_ActivityType_Names::MultistaticModeOptionsEmployed_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SMTI_ActivityType& SMTI_ActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SMTI_ActivityType>().release());
}

uci::type::SMTI_ActivityType& SMTI_ActivityType::create(const uci::type::SMTI_ActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SMTI_ActivityType> newAccessor{boost::make_unique<asb_uci::type::SMTI_ActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SMTI_ActivityType::destroy(uci::type::SMTI_ActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::SMTI_ActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

