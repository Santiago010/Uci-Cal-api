/** @file OperatorLocationOfInterestClauseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OperatorLocationOfInterestClauseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DesignationFilterType.h"
#include "asb_uci/type/OperatorLocationOfInterestComparativeType.h"
#include "asb_uci/type/OperatorLocationOfInterestID_Type.h"
#include "asb_uci/type/OrbitalFiltersQueryType.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DesignationFilterType.h"
#include "uci/type/OperatorLocationOfInterestClauseType.h"
#include "uci/type/OperatorLocationOfInterestComparativeType.h"
#include "uci/type/OperatorLocationOfInterestID_Type.h"
#include "uci/type/OrbitalFiltersQueryType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorLocationOfInterestClauseType::OperatorLocationOfInterestClauseType()
  : characteristicsClause_Accessor{boost::make_unique<CharacteristicsClause>(0, SIZE_MAX)},
    operatorLocationOfInterestID_Accessor{boost::make_unique<OperatorLocationOfInterestID>(0, SIZE_MAX)},
    applicableZone_Accessor{boost::make_unique<ApplicableZone>(0, SIZE_MAX)},
    orbitalFilter_Accessor{boost::make_unique<OrbitalFilter>(0, SIZE_MAX)} {
}

OperatorLocationOfInterestClauseType::~OperatorLocationOfInterestClauseType() = default;

void OperatorLocationOfInterestClauseType::copy(const uci::type::OperatorLocationOfInterestClauseType& accessor) {
  copyImpl(accessor, false);
}

void OperatorLocationOfInterestClauseType::copyImpl(const uci::type::OperatorLocationOfInterestClauseType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OperatorLocationOfInterestClauseType&>(accessor);
    if (accessorImpl.designation_Accessor) {
      setDesignation(*(accessorImpl.designation_Accessor));
    } else {
      designation_Accessor.reset();
    }
    setCharacteristicsClause(*(accessorImpl.characteristicsClause_Accessor));
    setOperatorLocationOfInterestID(*(accessorImpl.operatorLocationOfInterestID_Accessor));
    setApplicableZone(*(accessorImpl.applicableZone_Accessor));
    setOrbitalFilter(*(accessorImpl.orbitalFilter_Accessor));
  }
}

void OperatorLocationOfInterestClauseType::reset() noexcept {
  designation_Accessor.reset();
  characteristicsClause_Accessor->reset();
  operatorLocationOfInterestID_Accessor->reset();
  applicableZone_Accessor->reset();
  orbitalFilter_Accessor->reset();
}

uci::type::DesignationFilterType& OperatorLocationOfInterestClauseType::getDesignation_() const {
  if (designation_Accessor) {
    return *designation_Accessor;
  }
  throw uci::base::UCIException("Error in getDesignation(): An attempt was made to get an optional field that was not enabled, call hasDesignation() to determine if it is safe to call getDesignation()");
}

const uci::type::DesignationFilterType& OperatorLocationOfInterestClauseType::getDesignation() const {
  return getDesignation_();
}

uci::type::DesignationFilterType& OperatorLocationOfInterestClauseType::getDesignation() {
  return getDesignation_();
}

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::setDesignation(const uci::type::DesignationFilterType& accessor) {
  enableDesignation();
  if (&accessor != designation_Accessor.get()) {
    designation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorLocationOfInterestClauseType::hasDesignation() const noexcept {
  return static_cast<bool>(designation_Accessor);
}

uci::type::DesignationFilterType& OperatorLocationOfInterestClauseType::enableDesignation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::designationFilterType : type};
  if ((!designation_Accessor) || (designation_Accessor->getAccessorType() != requestedType)) {
    designation_Accessor = DesignationFilterType::create(requestedType);
    if (!designation_Accessor) {
      throw uci::base::UCIException("Error in enableDesignation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *designation_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::clearDesignation() noexcept {
  designation_Accessor.reset();
  return *this;
}

const uci::type::OperatorLocationOfInterestClauseType::CharacteristicsClause& OperatorLocationOfInterestClauseType::getCharacteristicsClause() const {
  return *characteristicsClause_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType::CharacteristicsClause& OperatorLocationOfInterestClauseType::getCharacteristicsClause() {
  return *characteristicsClause_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::setCharacteristicsClause(const uci::type::OperatorLocationOfInterestClauseType::CharacteristicsClause& accessor) {
  if (&accessor != characteristicsClause_Accessor.get()) {
    characteristicsClause_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OperatorLocationOfInterestClauseType::OperatorLocationOfInterestID& OperatorLocationOfInterestClauseType::getOperatorLocationOfInterestID() const {
  return *operatorLocationOfInterestID_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType::OperatorLocationOfInterestID& OperatorLocationOfInterestClauseType::getOperatorLocationOfInterestID() {
  return *operatorLocationOfInterestID_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::setOperatorLocationOfInterestID(const uci::type::OperatorLocationOfInterestClauseType::OperatorLocationOfInterestID& accessor) {
  if (&accessor != operatorLocationOfInterestID_Accessor.get()) {
    operatorLocationOfInterestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OperatorLocationOfInterestClauseType::ApplicableZone& OperatorLocationOfInterestClauseType::getApplicableZone() const {
  return *applicableZone_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType::ApplicableZone& OperatorLocationOfInterestClauseType::getApplicableZone() {
  return *applicableZone_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::setApplicableZone(const uci::type::OperatorLocationOfInterestClauseType::ApplicableZone& accessor) {
  if (&accessor != applicableZone_Accessor.get()) {
    applicableZone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OperatorLocationOfInterestClauseType::OrbitalFilter& OperatorLocationOfInterestClauseType::getOrbitalFilter() const {
  return *orbitalFilter_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType::OrbitalFilter& OperatorLocationOfInterestClauseType::getOrbitalFilter() {
  return *orbitalFilter_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::setOrbitalFilter(const uci::type::OperatorLocationOfInterestClauseType::OrbitalFilter& accessor) {
  if (&accessor != orbitalFilter_Accessor.get()) {
    orbitalFilter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<OperatorLocationOfInterestClauseType> OperatorLocationOfInterestClauseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorLocationOfInterestClauseType : type};
  return (requestedType == uci::type::accessorType::operatorLocationOfInterestClauseType) ? boost::make_unique<OperatorLocationOfInterestClauseType>() : nullptr;
}

/**  */
namespace OperatorLocationOfInterestClauseType_Names {

constexpr const char* Extern_Type_Name{"OperatorLocationOfInterestClauseType"};
constexpr const char* Designation_Name{"Designation"};
constexpr const char* CharacteristicsClause_Name{"CharacteristicsClause"};
constexpr const char* OperatorLocationOfInterestID_Name{"OperatorLocationOfInterestID"};
constexpr const char* ApplicableZone_Name{"ApplicableZone"};
constexpr const char* OrbitalFilter_Name{"OrbitalFilter"};

} // namespace OperatorLocationOfInterestClauseType_Names

void OperatorLocationOfInterestClauseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorLocationOfInterestClauseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorLocationOfInterestClauseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestClauseType_Names::Designation_Name) {
      DesignationFilterType::deserialize(valueType.second, accessor.enableDesignation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestClauseType_Names::CharacteristicsClause_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorLocationOfInterestClauseType::CharacteristicsClause& boundedList = accessor.getCharacteristicsClause();
        const uci::type::OperatorLocationOfInterestClauseType::CharacteristicsClause::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OperatorLocationOfInterestComparativeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestClauseType_Names::OperatorLocationOfInterestID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorLocationOfInterestClauseType::OperatorLocationOfInterestID& boundedList = accessor.getOperatorLocationOfInterestID();
        const uci::type::OperatorLocationOfInterestClauseType::OperatorLocationOfInterestID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OperatorLocationOfInterestID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestClauseType_Names::ApplicableZone_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorLocationOfInterestClauseType::ApplicableZone& boundedList = accessor.getApplicableZone();
        const uci::type::OperatorLocationOfInterestClauseType::ApplicableZone::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OperatorLocationOfInterestClauseType_Names::OrbitalFilter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorLocationOfInterestClauseType::OrbitalFilter& boundedList = accessor.getOrbitalFilter();
        const uci::type::OperatorLocationOfInterestClauseType::OrbitalFilter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalFiltersQueryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string OperatorLocationOfInterestClauseType::serialize(const uci::type::OperatorLocationOfInterestClauseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorLocationOfInterestClauseType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorLocationOfInterestClauseType_Names::Extern_Type_Name);
  }
  if (accessor.hasDesignation()) {
    DesignationFilterType::serialize(accessor.getDesignation(), node, OperatorLocationOfInterestClauseType_Names::Designation_Name);
  }
  {
    const uci::type::OperatorLocationOfInterestClauseType::CharacteristicsClause& boundedList = accessor.getCharacteristicsClause();
    for (uci::type::OperatorLocationOfInterestClauseType::CharacteristicsClause::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OperatorLocationOfInterestComparativeType::serialize(boundedList.at(i), node, OperatorLocationOfInterestClauseType_Names::CharacteristicsClause_Name);
    }
  }
  {
    const uci::type::OperatorLocationOfInterestClauseType::OperatorLocationOfInterestID& boundedList = accessor.getOperatorLocationOfInterestID();
    for (uci::type::OperatorLocationOfInterestClauseType::OperatorLocationOfInterestID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OperatorLocationOfInterestID_Type::serialize(boundedList.at(i), node, OperatorLocationOfInterestClauseType_Names::OperatorLocationOfInterestID_Name);
    }
  }
  {
    const uci::type::OperatorLocationOfInterestClauseType::ApplicableZone& boundedList = accessor.getApplicableZone();
    for (uci::type::OperatorLocationOfInterestClauseType::ApplicableZone::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ZoneType::serialize(boundedList.at(i), node, OperatorLocationOfInterestClauseType_Names::ApplicableZone_Name);
    }
  }
  {
    const uci::type::OperatorLocationOfInterestClauseType::OrbitalFilter& boundedList = accessor.getOrbitalFilter();
    for (uci::type::OperatorLocationOfInterestClauseType::OrbitalFilter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalFiltersQueryType::serialize(boundedList.at(i), node, OperatorLocationOfInterestClauseType_Names::OrbitalFilter_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorLocationOfInterestClauseType>().release());
}

uci::type::OperatorLocationOfInterestClauseType& OperatorLocationOfInterestClauseType::create(const uci::type::OperatorLocationOfInterestClauseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorLocationOfInterestClauseType> newAccessor{boost::make_unique<asb_uci::type::OperatorLocationOfInterestClauseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorLocationOfInterestClauseType::destroy(uci::type::OperatorLocationOfInterestClauseType& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorLocationOfInterestClauseType*>(&accessor);
}

} // namespace type

} // namespace uci

