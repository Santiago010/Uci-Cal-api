/** @file SubsystemConfigurationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemConfigurationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AboutType.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/InstallationDetailsType.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SubsystemSupportedSettingType.h"
#include "asb_uci/type/SupportCapabilityID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AboutType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/InstallationDetailsType.h"
#include "uci/type/MassType.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SubsystemConfigurationType.h"
#include "uci/type/SubsystemSupportedSettingType.h"
#include "uci/type/SupportCapabilityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemConfigurationType::SubsystemConfigurationType()
  : about_Accessor{boost::make_unique<AboutType>()},
    supportedSetting_Accessor{boost::make_unique<SupportedSetting>(0, 8)},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)},
    supportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID>(0, SIZE_MAX)},
    serviceID_Accessor{boost::make_unique<ServiceID>(0, SIZE_MAX)} {
}

SubsystemConfigurationType::~SubsystemConfigurationType() = default;

void SubsystemConfigurationType::copy(const uci::type::SubsystemConfigurationType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemConfigurationType::copyImpl(const uci::type::SubsystemConfigurationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemConfigurationType&>(accessor);
    setAbout(*(accessorImpl.about_Accessor));
    setSupportedSetting(*(accessorImpl.supportedSetting_Accessor));
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    setSupportCapabilityID(*(accessorImpl.supportCapabilityID_Accessor));
    setServiceID(*(accessorImpl.serviceID_Accessor));
    if (accessorImpl.hasMass()) {
      setMass(accessorImpl.getMass());
    } else {
      clearMass();
    }
    if (accessorImpl.installationDetails_Accessor) {
      setInstallationDetails(*(accessorImpl.installationDetails_Accessor));
    } else {
      installationDetails_Accessor.reset();
    }
  }
}

void SubsystemConfigurationType::reset() noexcept {
  about_Accessor->reset();
  supportedSetting_Accessor->reset();
  capabilityID_Accessor->reset();
  supportCapabilityID_Accessor->reset();
  serviceID_Accessor->reset();
  clearMass();
  installationDetails_Accessor.reset();
}

const uci::type::AboutType& SubsystemConfigurationType::getAbout() const {
  return *about_Accessor;
}

uci::type::AboutType& SubsystemConfigurationType::getAbout() {
  return *about_Accessor;
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::setAbout(const uci::type::AboutType& accessor) {
  if (&accessor != about_Accessor.get()) {
    about_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemConfigurationType::SupportedSetting& SubsystemConfigurationType::getSupportedSetting() const {
  return *supportedSetting_Accessor;
}

uci::type::SubsystemConfigurationType::SupportedSetting& SubsystemConfigurationType::getSupportedSetting() {
  return *supportedSetting_Accessor;
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::setSupportedSetting(const uci::type::SubsystemConfigurationType::SupportedSetting& accessor) {
  if (&accessor != supportedSetting_Accessor.get()) {
    supportedSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemConfigurationType::CapabilityID& SubsystemConfigurationType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::SubsystemConfigurationType::CapabilityID& SubsystemConfigurationType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::setCapabilityID(const uci::type::SubsystemConfigurationType::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemConfigurationType::SupportCapabilityID& SubsystemConfigurationType::getSupportCapabilityID() const {
  return *supportCapabilityID_Accessor;
}

uci::type::SubsystemConfigurationType::SupportCapabilityID& SubsystemConfigurationType::getSupportCapabilityID() {
  return *supportCapabilityID_Accessor;
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::setSupportCapabilityID(const uci::type::SubsystemConfigurationType::SupportCapabilityID& accessor) {
  if (&accessor != supportCapabilityID_Accessor.get()) {
    supportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemConfigurationType::ServiceID& SubsystemConfigurationType::getServiceID() const {
  return *serviceID_Accessor;
}

uci::type::SubsystemConfigurationType::ServiceID& SubsystemConfigurationType::getServiceID() {
  return *serviceID_Accessor;
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::setServiceID(const uci::type::SubsystemConfigurationType::ServiceID& accessor) {
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MassTypeValue SubsystemConfigurationType::getMass() const {
  if (mass_Accessor) {
    return *mass_Accessor;
  }
  throw uci::base::UCIException("Error in getMass(): An attempt was made to get an optional field that was not enabled, call hasMass() to determine if it is safe to call getMass()");
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::setMass(uci::type::MassTypeValue value) {
  mass_Accessor = value;
  return *this;
}

bool SubsystemConfigurationType::hasMass() const noexcept {
  return mass_Accessor.has_value();
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::clearMass() noexcept {
  mass_Accessor.reset();
  return *this;
}

uci::type::InstallationDetailsType& SubsystemConfigurationType::getInstallationDetails_() const {
  if (installationDetails_Accessor) {
    return *installationDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getInstallationDetails(): An attempt was made to get an optional field that was not enabled, call hasInstallationDetails() to determine if it is safe to call getInstallationDetails()");
}

const uci::type::InstallationDetailsType& SubsystemConfigurationType::getInstallationDetails() const {
  return getInstallationDetails_();
}

uci::type::InstallationDetailsType& SubsystemConfigurationType::getInstallationDetails() {
  return getInstallationDetails_();
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::setInstallationDetails(const uci::type::InstallationDetailsType& accessor) {
  enableInstallationDetails();
  if (&accessor != installationDetails_Accessor.get()) {
    installationDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemConfigurationType::hasInstallationDetails() const noexcept {
  return static_cast<bool>(installationDetails_Accessor);
}

uci::type::InstallationDetailsType& SubsystemConfigurationType::enableInstallationDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::installationDetailsType : type};
  if ((!installationDetails_Accessor) || (installationDetails_Accessor->getAccessorType() != requestedType)) {
    installationDetails_Accessor = InstallationDetailsType::create(requestedType);
    if (!installationDetails_Accessor) {
      throw uci::base::UCIException("Error in enableInstallationDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *installationDetails_Accessor;
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::clearInstallationDetails() noexcept {
  installationDetails_Accessor.reset();
  return *this;
}

std::unique_ptr<SubsystemConfigurationType> SubsystemConfigurationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemConfigurationType : type};
  return (requestedType == uci::type::accessorType::subsystemConfigurationType) ? boost::make_unique<SubsystemConfigurationType>() : nullptr;
}

/**  */
namespace SubsystemConfigurationType_Names {

constexpr const char* Extern_Type_Name{"SubsystemConfigurationType"};
constexpr const char* About_Name{"About"};
constexpr const char* SupportedSetting_Name{"SupportedSetting"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* InstallationDetails_Name{"InstallationDetails"};

} // namespace SubsystemConfigurationType_Names

void SubsystemConfigurationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemConfigurationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemConfigurationType_Names::About_Name) {
      AboutType::deserialize(valueType.second, accessor.getAbout(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemConfigurationType_Names::SupportedSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemConfigurationType::SupportedSetting& boundedList = accessor.getSupportedSetting();
        const uci::type::SubsystemConfigurationType::SupportedSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemSupportedSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemConfigurationType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemConfigurationType::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::SubsystemConfigurationType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemConfigurationType_Names::SupportCapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemConfigurationType::SupportCapabilityID& boundedList = accessor.getSupportCapabilityID();
        const uci::type::SubsystemConfigurationType::SupportCapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SupportCapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemConfigurationType_Names::ServiceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemConfigurationType::ServiceID& boundedList = accessor.getServiceID();
        const uci::type::SubsystemConfigurationType::ServiceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ServiceID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemConfigurationType_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SubsystemConfigurationType_Names::InstallationDetails_Name) {
      InstallationDetailsType::deserialize(valueType.second, accessor.enableInstallationDetails(), nodeName, nsPrefix);
    }
  }
}

std::string SubsystemConfigurationType::serialize(const uci::type::SubsystemConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemConfigurationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemConfigurationType_Names::Extern_Type_Name);
  }
  AboutType::serialize(accessor.getAbout(), node, SubsystemConfigurationType_Names::About_Name);
  {
    const uci::type::SubsystemConfigurationType::SupportedSetting& boundedList = accessor.getSupportedSetting();
    for (uci::type::SubsystemConfigurationType::SupportedSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubsystemSupportedSettingType::serialize(boundedList.at(i), node, SubsystemConfigurationType_Names::SupportedSetting_Name);
    }
  }
  {
    const uci::type::SubsystemConfigurationType::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::SubsystemConfigurationType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, SubsystemConfigurationType_Names::CapabilityID_Name);
    }
  }
  {
    const uci::type::SubsystemConfigurationType::SupportCapabilityID& boundedList = accessor.getSupportCapabilityID();
    for (uci::type::SubsystemConfigurationType::SupportCapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SupportCapabilityID_Type::serialize(boundedList.at(i), node, SubsystemConfigurationType_Names::SupportCapabilityID_Name);
    }
  }
  {
    const uci::type::SubsystemConfigurationType::ServiceID& boundedList = accessor.getServiceID();
    for (uci::type::SubsystemConfigurationType::ServiceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ServiceID_Type::serialize(boundedList.at(i), node, SubsystemConfigurationType_Names::ServiceID_Name);
    }
  }
  if (accessor.hasMass()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, SubsystemConfigurationType_Names::Mass_Name);
  }
  if (accessor.hasInstallationDetails()) {
    InstallationDetailsType::serialize(accessor.getInstallationDetails(), node, SubsystemConfigurationType_Names::InstallationDetails_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemConfigurationType>().release());
}

uci::type::SubsystemConfigurationType& SubsystemConfigurationType::create(const uci::type::SubsystemConfigurationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemConfigurationType> newAccessor{boost::make_unique<asb_uci::type::SubsystemConfigurationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemConfigurationType::destroy(uci::type::SubsystemConfigurationType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemConfigurationType*>(&accessor);
}

} // namespace type

} // namespace uci

