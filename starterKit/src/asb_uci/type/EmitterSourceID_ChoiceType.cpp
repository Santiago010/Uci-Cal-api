/** @file EmitterSourceID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EmitterSourceID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EOB_EmitterID_Type.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/MeasurementID_Type.h"
#include "asb_uci/type/SignalID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EOB_EmitterID_Type.h"
#include "uci/type/EmitterSourceID_ChoiceType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/MeasurementID_Type.h"
#include "uci/type/SignalID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterSourceID_ChoiceType::EmitterSourceID_ChoiceType() = default;

EmitterSourceID_ChoiceType::~EmitterSourceID_ChoiceType() = default;

void EmitterSourceID_ChoiceType::copy(const uci::type::EmitterSourceID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void EmitterSourceID_ChoiceType::copyImpl(const uci::type::EmitterSourceID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterSourceID_ChoiceType&>(accessor);
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.oMR_IndividualMeasurementID_Accessor) {
      setOMR_IndividualMeasurementID(*(accessorImpl.oMR_IndividualMeasurementID_Accessor));
    } else {
      oMR_IndividualMeasurementID_Accessor.reset();
    }
    if (accessorImpl.eOB_EmitterID_Accessor) {
      setEOB_EmitterID(*(accessorImpl.eOB_EmitterID_Accessor));
    } else {
      eOB_EmitterID_Accessor.reset();
    }
    if (accessorImpl.signalID_Accessor) {
      setSignalID(*(accessorImpl.signalID_Accessor));
    } else {
      signalID_Accessor.reset();
    }
  }
}

void EmitterSourceID_ChoiceType::reset() noexcept {
  entityID_Accessor.reset();
  oMR_IndividualMeasurementID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  signalID_Accessor.reset();
}

uci::type::EmitterSourceID_ChoiceType::EmitterSourceID_ChoiceTypeChoice EmitterSourceID_ChoiceType::getEmitterSourceID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (entityID_Accessor) {
    return EMITTERSOURCEID_CHOICETYPE_CHOICE_ENTITYID;
  }
  if (oMR_IndividualMeasurementID_Accessor) {
    return EMITTERSOURCEID_CHOICETYPE_CHOICE_OMR_INDIVIDUALMEASUREMENTID;
  }
  if (eOB_EmitterID_Accessor) {
    return EMITTERSOURCEID_CHOICETYPE_CHOICE_EOB_EMITTERID;
  }
  if (signalID_Accessor) {
    return EMITTERSOURCEID_CHOICETYPE_CHOICE_SIGNALID;
  }
  return EMITTERSOURCEID_CHOICETYPE_CHOICE_NONE;
}

uci::type::EmitterSourceID_ChoiceType& EmitterSourceID_ChoiceType::setEmitterSourceID_ChoiceTypeChoiceOrdinal(uci::type::EmitterSourceID_ChoiceType::EmitterSourceID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EMITTERSOURCEID_CHOICETYPE_CHOICE_ENTITYID:
      chooseEntityID("setEmitterSourceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case EMITTERSOURCEID_CHOICETYPE_CHOICE_OMR_INDIVIDUALMEASUREMENTID:
      chooseOMR_IndividualMeasurementID("setEmitterSourceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case EMITTERSOURCEID_CHOICETYPE_CHOICE_EOB_EMITTERID:
      chooseEOB_EmitterID("setEmitterSourceID_ChoiceTypeChoiceOrdinal", type);
      break;
    case EMITTERSOURCEID_CHOICETYPE_CHOICE_SIGNALID:
      chooseSignalID("setEmitterSourceID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEmitterSourceID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityID_Type& EmitterSourceID_ChoiceType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& EmitterSourceID_ChoiceType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& EmitterSourceID_ChoiceType::getEntityID() {
  return getEntityID_();
}

uci::type::EmitterSourceID_ChoiceType& EmitterSourceID_ChoiceType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EmitterSourceID_ChoiceType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& EmitterSourceID_ChoiceType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  oMR_IndividualMeasurementID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  signalID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EmitterSourceID_ChoiceType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

uci::type::MeasurementID_Type& EmitterSourceID_ChoiceType::getOMR_IndividualMeasurementID_() const {
  if (oMR_IndividualMeasurementID_Accessor) {
    return *oMR_IndividualMeasurementID_Accessor;
  }
  throw uci::base::UCIException("Error in getOMR_IndividualMeasurementID(): Unable to get OMR_IndividualMeasurementID, field not selected");
}

const uci::type::MeasurementID_Type& EmitterSourceID_ChoiceType::getOMR_IndividualMeasurementID() const {
  return getOMR_IndividualMeasurementID_();
}

uci::type::MeasurementID_Type& EmitterSourceID_ChoiceType::getOMR_IndividualMeasurementID() {
  return getOMR_IndividualMeasurementID_();
}

uci::type::EmitterSourceID_ChoiceType& EmitterSourceID_ChoiceType::setOMR_IndividualMeasurementID(const uci::type::MeasurementID_Type& accessor) {
  chooseOMR_IndividualMeasurementID();
  if (&accessor != oMR_IndividualMeasurementID_Accessor.get()) {
    oMR_IndividualMeasurementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterSourceID_ChoiceType::isOMR_IndividualMeasurementID() const noexcept {
  return static_cast<bool>(oMR_IndividualMeasurementID_Accessor);
}

uci::type::MeasurementID_Type& EmitterSourceID_ChoiceType::chooseOMR_IndividualMeasurementID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  signalID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementID_Type : type};
  if ((!oMR_IndividualMeasurementID_Accessor) || (oMR_IndividualMeasurementID_Accessor->getAccessorType() != requestedType)) {
    oMR_IndividualMeasurementID_Accessor = MeasurementID_Type::create(type);
    if (!oMR_IndividualMeasurementID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *oMR_IndividualMeasurementID_Accessor;
}

uci::type::MeasurementID_Type& EmitterSourceID_ChoiceType::chooseOMR_IndividualMeasurementID(uci::base::accessorType::AccessorType type) {
  return chooseOMR_IndividualMeasurementID("chooseOMR_IndividualMeasurementID", type);
}

uci::type::EOB_EmitterID_Type& EmitterSourceID_ChoiceType::getEOB_EmitterID_() const {
  if (eOB_EmitterID_Accessor) {
    return *eOB_EmitterID_Accessor;
  }
  throw uci::base::UCIException("Error in getEOB_EmitterID(): Unable to get EOB_EmitterID, field not selected");
}

const uci::type::EOB_EmitterID_Type& EmitterSourceID_ChoiceType::getEOB_EmitterID() const {
  return getEOB_EmitterID_();
}

uci::type::EOB_EmitterID_Type& EmitterSourceID_ChoiceType::getEOB_EmitterID() {
  return getEOB_EmitterID_();
}

uci::type::EmitterSourceID_ChoiceType& EmitterSourceID_ChoiceType::setEOB_EmitterID(const uci::type::EOB_EmitterID_Type& accessor) {
  chooseEOB_EmitterID();
  if (&accessor != eOB_EmitterID_Accessor.get()) {
    eOB_EmitterID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterSourceID_ChoiceType::isEOB_EmitterID() const noexcept {
  return static_cast<bool>(eOB_EmitterID_Accessor);
}

uci::type::EOB_EmitterID_Type& EmitterSourceID_ChoiceType::chooseEOB_EmitterID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  oMR_IndividualMeasurementID_Accessor.reset();
  signalID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_EmitterID_Type : type};
  if ((!eOB_EmitterID_Accessor) || (eOB_EmitterID_Accessor->getAccessorType() != requestedType)) {
    eOB_EmitterID_Accessor = EOB_EmitterID_Type::create(type);
    if (!eOB_EmitterID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eOB_EmitterID_Accessor;
}

uci::type::EOB_EmitterID_Type& EmitterSourceID_ChoiceType::chooseEOB_EmitterID(uci::base::accessorType::AccessorType type) {
  return chooseEOB_EmitterID("chooseEOB_EmitterID", type);
}

uci::type::SignalID_Type& EmitterSourceID_ChoiceType::getSignalID_() const {
  if (signalID_Accessor) {
    return *signalID_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalID(): Unable to get SignalID, field not selected");
}

const uci::type::SignalID_Type& EmitterSourceID_ChoiceType::getSignalID() const {
  return getSignalID_();
}

uci::type::SignalID_Type& EmitterSourceID_ChoiceType::getSignalID() {
  return getSignalID_();
}

uci::type::EmitterSourceID_ChoiceType& EmitterSourceID_ChoiceType::setSignalID(const uci::type::SignalID_Type& accessor) {
  chooseSignalID();
  if (&accessor != signalID_Accessor.get()) {
    signalID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterSourceID_ChoiceType::isSignalID() const noexcept {
  return static_cast<bool>(signalID_Accessor);
}

uci::type::SignalID_Type& EmitterSourceID_ChoiceType::chooseSignalID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  oMR_IndividualMeasurementID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalID_Type : type};
  if ((!signalID_Accessor) || (signalID_Accessor->getAccessorType() != requestedType)) {
    signalID_Accessor = SignalID_Type::create(type);
    if (!signalID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalID_Accessor;
}

uci::type::SignalID_Type& EmitterSourceID_ChoiceType::chooseSignalID(uci::base::accessorType::AccessorType type) {
  return chooseSignalID("chooseSignalID", type);
}

std::unique_ptr<EmitterSourceID_ChoiceType> EmitterSourceID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterSourceID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::emitterSourceID_ChoiceType) ? boost::make_unique<EmitterSourceID_ChoiceType>() : nullptr;
}

/**  */
namespace EmitterSourceID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"EmitterSourceID_ChoiceType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* OMR_IndividualMeasurementID_Name{"OMR_IndividualMeasurementID"};
constexpr const char* EOB_EmitterID_Name{"EOB_EmitterID"};
constexpr const char* SignalID_Name{"SignalID"};

} // namespace EmitterSourceID_ChoiceType_Names

void EmitterSourceID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterSourceID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterSourceID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterSourceID_ChoiceType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterSourceID_ChoiceType_Names::OMR_IndividualMeasurementID_Name) {
      MeasurementID_Type::deserialize(valueType.second, accessor.chooseOMR_IndividualMeasurementID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterSourceID_ChoiceType_Names::EOB_EmitterID_Name) {
      EOB_EmitterID_Type::deserialize(valueType.second, accessor.chooseEOB_EmitterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterSourceID_ChoiceType_Names::SignalID_Name) {
      SignalID_Type::deserialize(valueType.second, accessor.chooseSignalID(), nodeName, nsPrefix);
    }
  }
}

std::string EmitterSourceID_ChoiceType::serialize(const uci::type::EmitterSourceID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterSourceID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterSourceID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, EmitterSourceID_ChoiceType_Names::EntityID_Name);
  } else if (accessor.isOMR_IndividualMeasurementID()) {
    MeasurementID_Type::serialize(accessor.getOMR_IndividualMeasurementID(), node, EmitterSourceID_ChoiceType_Names::OMR_IndividualMeasurementID_Name);
  } else if (accessor.isEOB_EmitterID()) {
    EOB_EmitterID_Type::serialize(accessor.getEOB_EmitterID(), node, EmitterSourceID_ChoiceType_Names::EOB_EmitterID_Name);
  } else if (accessor.isSignalID()) {
    SignalID_Type::serialize(accessor.getSignalID(), node, EmitterSourceID_ChoiceType_Names::SignalID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterSourceID_ChoiceType& EmitterSourceID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterSourceID_ChoiceType>().release());
}

uci::type::EmitterSourceID_ChoiceType& EmitterSourceID_ChoiceType::create(const uci::type::EmitterSourceID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterSourceID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::EmitterSourceID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterSourceID_ChoiceType::destroy(uci::type::EmitterSourceID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterSourceID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

