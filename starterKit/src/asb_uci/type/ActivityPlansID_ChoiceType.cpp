/** @file ActivityPlansID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActivityPlansID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityPlanID_Type.h"
#include "asb_uci/type/OrbitActivityPlanID_Type.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/ActivityPlansID_ChoiceType.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/RouteActivityPlanID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityPlansID_ChoiceType::ActivityPlansID_ChoiceType() = default;

ActivityPlansID_ChoiceType::~ActivityPlansID_ChoiceType() = default;

void ActivityPlansID_ChoiceType::copy(const uci::type::ActivityPlansID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ActivityPlansID_ChoiceType::copyImpl(const uci::type::ActivityPlansID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActivityPlansID_ChoiceType&>(accessor);
    if (accessorImpl.routeActivityPlanID_Accessor) {
      setRouteActivityPlanID(*(accessorImpl.routeActivityPlanID_Accessor));
    } else {
      routeActivityPlanID_Accessor.reset();
    }
    if (accessorImpl.orbitActivityPlanID_Accessor) {
      setOrbitActivityPlanID(*(accessorImpl.orbitActivityPlanID_Accessor));
    } else {
      orbitActivityPlanID_Accessor.reset();
    }
    if (accessorImpl.activityPlanID_Accessor) {
      setActivityPlanID(*(accessorImpl.activityPlanID_Accessor));
    } else {
      activityPlanID_Accessor.reset();
    }
  }
}

void ActivityPlansID_ChoiceType::reset() noexcept {
  routeActivityPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  activityPlanID_Accessor.reset();
}

uci::type::ActivityPlansID_ChoiceType::ActivityPlansID_ChoiceTypeChoice ActivityPlansID_ChoiceType::getActivityPlansID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (routeActivityPlanID_Accessor) {
    return ACTIVITYPLANSID_CHOICETYPE_CHOICE_ROUTEACTIVITYPLANID;
  }
  if (orbitActivityPlanID_Accessor) {
    return ACTIVITYPLANSID_CHOICETYPE_CHOICE_ORBITACTIVITYPLANID;
  }
  if (activityPlanID_Accessor) {
    return ACTIVITYPLANSID_CHOICETYPE_CHOICE_ACTIVITYPLANID;
  }
  return ACTIVITYPLANSID_CHOICETYPE_CHOICE_NONE;
}

uci::type::ActivityPlansID_ChoiceType& ActivityPlansID_ChoiceType::setActivityPlansID_ChoiceTypeChoiceOrdinal(uci::type::ActivityPlansID_ChoiceType::ActivityPlansID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ACTIVITYPLANSID_CHOICETYPE_CHOICE_ROUTEACTIVITYPLANID:
      chooseRouteActivityPlanID("setActivityPlansID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYPLANSID_CHOICETYPE_CHOICE_ORBITACTIVITYPLANID:
      chooseOrbitActivityPlanID("setActivityPlansID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYPLANSID_CHOICETYPE_CHOICE_ACTIVITYPLANID:
      chooseActivityPlanID("setActivityPlansID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setActivityPlansID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RouteActivityPlanID_Type& ActivityPlansID_ChoiceType::getRouteActivityPlanID_() const {
  if (routeActivityPlanID_Accessor) {
    return *routeActivityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteActivityPlanID(): Unable to get RouteActivityPlanID, field not selected");
}

const uci::type::RouteActivityPlanID_Type& ActivityPlansID_ChoiceType::getRouteActivityPlanID() const {
  return getRouteActivityPlanID_();
}

uci::type::RouteActivityPlanID_Type& ActivityPlansID_ChoiceType::getRouteActivityPlanID() {
  return getRouteActivityPlanID_();
}

uci::type::ActivityPlansID_ChoiceType& ActivityPlansID_ChoiceType::setRouteActivityPlanID(const uci::type::RouteActivityPlanID_Type& accessor) {
  chooseRouteActivityPlanID();
  if (&accessor != routeActivityPlanID_Accessor.get()) {
    routeActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityPlansID_ChoiceType::isRouteActivityPlanID() const noexcept {
  return static_cast<bool>(routeActivityPlanID_Accessor);
}

uci::type::RouteActivityPlanID_Type& ActivityPlansID_ChoiceType::chooseRouteActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbitActivityPlanID_Accessor.reset();
  activityPlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanID_Type : type};
  if ((!routeActivityPlanID_Accessor) || (routeActivityPlanID_Accessor->getAccessorType() != requestedType)) {
    routeActivityPlanID_Accessor = RouteActivityPlanID_Type::create(type);
    if (!routeActivityPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeActivityPlanID_Accessor;
}

uci::type::RouteActivityPlanID_Type& ActivityPlansID_ChoiceType::chooseRouteActivityPlanID(uci::base::accessorType::AccessorType type) {
  return chooseRouteActivityPlanID("chooseRouteActivityPlanID", type);
}

uci::type::OrbitActivityPlanID_Type& ActivityPlansID_ChoiceType::getOrbitActivityPlanID_() const {
  if (orbitActivityPlanID_Accessor) {
    return *orbitActivityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitActivityPlanID(): Unable to get OrbitActivityPlanID, field not selected");
}

const uci::type::OrbitActivityPlanID_Type& ActivityPlansID_ChoiceType::getOrbitActivityPlanID() const {
  return getOrbitActivityPlanID_();
}

uci::type::OrbitActivityPlanID_Type& ActivityPlansID_ChoiceType::getOrbitActivityPlanID() {
  return getOrbitActivityPlanID_();
}

uci::type::ActivityPlansID_ChoiceType& ActivityPlansID_ChoiceType::setOrbitActivityPlanID(const uci::type::OrbitActivityPlanID_Type& accessor) {
  chooseOrbitActivityPlanID();
  if (&accessor != orbitActivityPlanID_Accessor.get()) {
    orbitActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityPlansID_ChoiceType::isOrbitActivityPlanID() const noexcept {
  return static_cast<bool>(orbitActivityPlanID_Accessor);
}

uci::type::OrbitActivityPlanID_Type& ActivityPlansID_ChoiceType::chooseOrbitActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  routeActivityPlanID_Accessor.reset();
  activityPlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitActivityPlanID_Type : type};
  if ((!orbitActivityPlanID_Accessor) || (orbitActivityPlanID_Accessor->getAccessorType() != requestedType)) {
    orbitActivityPlanID_Accessor = OrbitActivityPlanID_Type::create(type);
    if (!orbitActivityPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitActivityPlanID_Type& ActivityPlansID_ChoiceType::chooseOrbitActivityPlanID(uci::base::accessorType::AccessorType type) {
  return chooseOrbitActivityPlanID("chooseOrbitActivityPlanID", type);
}

uci::type::ActivityPlanID_Type& ActivityPlansID_ChoiceType::getActivityPlanID_() const {
  if (activityPlanID_Accessor) {
    return *activityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityPlanID(): Unable to get ActivityPlanID, field not selected");
}

const uci::type::ActivityPlanID_Type& ActivityPlansID_ChoiceType::getActivityPlanID() const {
  return getActivityPlanID_();
}

uci::type::ActivityPlanID_Type& ActivityPlansID_ChoiceType::getActivityPlanID() {
  return getActivityPlanID_();
}

uci::type::ActivityPlansID_ChoiceType& ActivityPlansID_ChoiceType::setActivityPlanID(const uci::type::ActivityPlanID_Type& accessor) {
  chooseActivityPlanID();
  if (&accessor != activityPlanID_Accessor.get()) {
    activityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityPlansID_ChoiceType::isActivityPlanID() const noexcept {
  return static_cast<bool>(activityPlanID_Accessor);
}

uci::type::ActivityPlanID_Type& ActivityPlansID_ChoiceType::chooseActivityPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  routeActivityPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanID_Type : type};
  if ((!activityPlanID_Accessor) || (activityPlanID_Accessor->getAccessorType() != requestedType)) {
    activityPlanID_Accessor = ActivityPlanID_Type::create(type);
    if (!activityPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityPlanID_Accessor;
}

uci::type::ActivityPlanID_Type& ActivityPlansID_ChoiceType::chooseActivityPlanID(uci::base::accessorType::AccessorType type) {
  return chooseActivityPlanID("chooseActivityPlanID", type);
}

std::unique_ptr<ActivityPlansID_ChoiceType> ActivityPlansID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlansID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::activityPlansID_ChoiceType) ? boost::make_unique<ActivityPlansID_ChoiceType>() : nullptr;
}

/**  */
namespace ActivityPlansID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"ActivityPlansID_ChoiceType"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* ActivityPlanID_Name{"ActivityPlanID"};

} // namespace ActivityPlansID_ChoiceType_Names

void ActivityPlansID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityPlansID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityPlansID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityPlansID_ChoiceType_Names::RouteActivityPlanID_Name) {
      RouteActivityPlanID_Type::deserialize(valueType.second, accessor.chooseRouteActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityPlansID_ChoiceType_Names::OrbitActivityPlanID_Name) {
      OrbitActivityPlanID_Type::deserialize(valueType.second, accessor.chooseOrbitActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityPlansID_ChoiceType_Names::ActivityPlanID_Name) {
      ActivityPlanID_Type::deserialize(valueType.second, accessor.chooseActivityPlanID(), nodeName, nsPrefix);
    }
  }
}

std::string ActivityPlansID_ChoiceType::serialize(const uci::type::ActivityPlansID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityPlansID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityPlansID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isRouteActivityPlanID()) {
    RouteActivityPlanID_Type::serialize(accessor.getRouteActivityPlanID(), node, ActivityPlansID_ChoiceType_Names::RouteActivityPlanID_Name);
  } else if (accessor.isOrbitActivityPlanID()) {
    OrbitActivityPlanID_Type::serialize(accessor.getOrbitActivityPlanID(), node, ActivityPlansID_ChoiceType_Names::OrbitActivityPlanID_Name);
  } else if (accessor.isActivityPlanID()) {
    ActivityPlanID_Type::serialize(accessor.getActivityPlanID(), node, ActivityPlansID_ChoiceType_Names::ActivityPlanID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityPlansID_ChoiceType& ActivityPlansID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityPlansID_ChoiceType>().release());
}

uci::type::ActivityPlansID_ChoiceType& ActivityPlansID_ChoiceType::create(const uci::type::ActivityPlansID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityPlansID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::ActivityPlansID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityPlansID_ChoiceType::destroy(uci::type::ActivityPlansID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityPlansID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

