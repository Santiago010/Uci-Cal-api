/** @file CapabilityConsentRequestStatusBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CapabilityConsentRequestStatusBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApprovalStatusEnum.h"
#include "../../../include/asb_uci/type/CannotComplyType.h"
#include "../../../include/asb_uci/type/RequestStatusBaseType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CannotComplyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityConsentRequestStatusBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityConsentRequestStatusBaseType::CapabilityConsentRequestStatusBaseType()
  : approvalState_Accessor{boost::make_unique<ApprovalStatusEnum>()} {
}

CapabilityConsentRequestStatusBaseType::~CapabilityConsentRequestStatusBaseType() = default;

void CapabilityConsentRequestStatusBaseType::copy(const uci::type::CapabilityConsentRequestStatusBaseType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityConsentRequestStatusBaseType::copyImpl(const uci::type::CapabilityConsentRequestStatusBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilityConsentRequestStatusBaseType)) {
      RequestStatusBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const CapabilityConsentRequestStatusBaseType&>(accessor);
      setApprovalState(*(accessorImpl.approvalState_Accessor));
      if (accessorImpl.approvalRejectedReason_Accessor) {
        setApprovalRejectedReason(*(accessorImpl.approvalRejectedReason_Accessor));
      } else {
        approvalRejectedReason_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CapabilityConsentRequestStatusBaseType::reset() noexcept {
  RequestStatusBaseType::reset();
  approvalState_Accessor->reset();
  approvalRejectedReason_Accessor.reset();
}

const uci::type::ApprovalStatusEnum& CapabilityConsentRequestStatusBaseType::getApprovalState() const {
  return *approvalState_Accessor;
}

uci::type::ApprovalStatusEnum& CapabilityConsentRequestStatusBaseType::getApprovalState() {
  return *approvalState_Accessor;
}

uci::type::CapabilityConsentRequestStatusBaseType& CapabilityConsentRequestStatusBaseType::setApprovalState(const uci::type::ApprovalStatusEnum& accessor) {
  if (&accessor != approvalState_Accessor.get()) {
    approvalState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityConsentRequestStatusBaseType& CapabilityConsentRequestStatusBaseType::setApprovalState(uci::type::ApprovalStatusEnum::EnumerationItem value) {
  approvalState_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& CapabilityConsentRequestStatusBaseType::getApprovalRejectedReason_() const {
  if (approvalRejectedReason_Accessor) {
    return *approvalRejectedReason_Accessor;
  }
  throw uci::base::UCIException("Error in getApprovalRejectedReason(): An attempt was made to get an optional field that was not enabled, call hasApprovalRejectedReason() to determine if it is safe to call getApprovalRejectedReason()");
}

const uci::type::CannotComplyType& CapabilityConsentRequestStatusBaseType::getApprovalRejectedReason() const {
  return getApprovalRejectedReason_();
}

uci::type::CannotComplyType& CapabilityConsentRequestStatusBaseType::getApprovalRejectedReason() {
  return getApprovalRejectedReason_();
}

uci::type::CapabilityConsentRequestStatusBaseType& CapabilityConsentRequestStatusBaseType::setApprovalRejectedReason(const uci::type::CannotComplyType& accessor) {
  enableApprovalRejectedReason(accessor.getAccessorType());
  if (&accessor != approvalRejectedReason_Accessor.get()) {
    approvalRejectedReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilityConsentRequestStatusBaseType::hasApprovalRejectedReason() const noexcept {
  return static_cast<bool>(approvalRejectedReason_Accessor);
}

uci::type::CannotComplyType& CapabilityConsentRequestStatusBaseType::enableApprovalRejectedReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!approvalRejectedReason_Accessor) || (approvalRejectedReason_Accessor->getAccessorType() != requestedType)) {
    approvalRejectedReason_Accessor = CannotComplyType::create(requestedType);
    if (!approvalRejectedReason_Accessor) {
      throw uci::base::UCIException("Error in enableApprovalRejectedReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approvalRejectedReason_Accessor;
}

uci::type::CapabilityConsentRequestStatusBaseType& CapabilityConsentRequestStatusBaseType::clearApprovalRejectedReason() noexcept {
  approvalRejectedReason_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilityConsentRequestStatusBaseType> CapabilityConsentRequestStatusBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityConsentRequestStatusBaseType : type};
  return std::unique_ptr<CapabilityConsentRequestStatusBaseType>(dynamic_cast<CapabilityConsentRequestStatusBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CapabilityConsentRequestStatusBaseType_Names {

constexpr const char* Extern_Type_Name{"CapabilityConsentRequestStatusBaseType"};
constexpr const char* ApprovalState_Name{"ApprovalState"};
constexpr const char* ApprovalRejectedReason_Name{"ApprovalRejectedReason"};

} // namespace CapabilityConsentRequestStatusBaseType_Names

void CapabilityConsentRequestStatusBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityConsentRequestStatusBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityConsentRequestStatusBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityConsentRequestStatusBaseType_Names::ApprovalState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getApprovalState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityConsentRequestStatusBaseType_Names::ApprovalRejectedReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableApprovalRejectedReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  RequestStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CapabilityConsentRequestStatusBaseType::serialize(const uci::type::CapabilityConsentRequestStatusBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityConsentRequestStatusBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilityConsentRequestStatusBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityConsentRequestStatusBaseType_Names::Extern_Type_Name);
    }
    RequestStatusBaseType::serialize(accessor, node, "", false, false, false);
    ApprovalStatusEnum::serialize(accessor.getApprovalState(), node, CapabilityConsentRequestStatusBaseType_Names::ApprovalState_Name, false);
    if (accessor.hasApprovalRejectedReason()) {
      CannotComplyType::serialize(accessor.getApprovalRejectedReason(), node, CapabilityConsentRequestStatusBaseType_Names::ApprovalRejectedReason_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

