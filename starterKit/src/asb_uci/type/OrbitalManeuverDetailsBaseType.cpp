/** @file OrbitalManeuverDetailsBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalManeuverDetailsBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CovarianceMatrixType.h"
#include "asb_uci/type/OrbitalDeltaVelocity_B_Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CovarianceMatrixType.h"
#include "uci/type/DurationType.h"
#include "uci/type/MassType.h"
#include "uci/type/OrbitalDeltaVelocity_B_Type.h"
#include "uci/type/OrbitalManeuverDetailsBaseType.h"
#include "uci/type/SpeedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalManeuverDetailsBaseType::OrbitalManeuverDetailsBaseType()
  : deltaVelocity_Accessor{boost::make_unique<OrbitalDeltaVelocity_B_Type>()} {
}

OrbitalManeuverDetailsBaseType::~OrbitalManeuverDetailsBaseType() = default;

void OrbitalManeuverDetailsBaseType::copy(const uci::type::OrbitalManeuverDetailsBaseType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalManeuverDetailsBaseType::copyImpl(const uci::type::OrbitalManeuverDetailsBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitalManeuverDetailsBaseType)) {
      const auto& accessorImpl = dynamic_cast<const OrbitalManeuverDetailsBaseType&>(accessor);
      setDeltaVelocity(*(accessorImpl.deltaVelocity_Accessor));
      if (accessorImpl.hasDeltaVelocityMagnitude()) {
        setDeltaVelocityMagnitude(accessorImpl.getDeltaVelocityMagnitude());
      } else {
        clearDeltaVelocityMagnitude();
      }
      if (accessorImpl.deltaVelocityCovariance_Accessor) {
        setDeltaVelocityCovariance(*(accessorImpl.deltaVelocityCovariance_Accessor));
      } else {
        deltaVelocityCovariance_Accessor.reset();
      }
      if (accessorImpl.hasDuration()) {
        setDuration(accessorImpl.getDuration());
      } else {
        clearDuration();
      }
      if (accessorImpl.hasDeltaMass()) {
        setDeltaMass(accessorImpl.getDeltaMass());
      } else {
        clearDeltaMass();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OrbitalManeuverDetailsBaseType::reset() noexcept {
  deltaVelocity_Accessor->reset();
  clearDeltaVelocityMagnitude();
  deltaVelocityCovariance_Accessor.reset();
  clearDuration();
  clearDeltaMass();
}

const uci::type::OrbitalDeltaVelocity_B_Type& OrbitalManeuverDetailsBaseType::getDeltaVelocity() const {
  return *deltaVelocity_Accessor;
}

uci::type::OrbitalDeltaVelocity_B_Type& OrbitalManeuverDetailsBaseType::getDeltaVelocity() {
  return *deltaVelocity_Accessor;
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::setDeltaVelocity(const uci::type::OrbitalDeltaVelocity_B_Type& accessor) {
  if (&accessor != deltaVelocity_Accessor.get()) {
    deltaVelocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SpeedTypeValue OrbitalManeuverDetailsBaseType::getDeltaVelocityMagnitude() const {
  if (deltaVelocityMagnitude_Accessor) {
    return *deltaVelocityMagnitude_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaVelocityMagnitude(): An attempt was made to get an optional field that was not enabled, call hasDeltaVelocityMagnitude() to determine if it is safe to call getDeltaVelocityMagnitude()");
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::setDeltaVelocityMagnitude(uci::type::SpeedTypeValue value) {
  deltaVelocityMagnitude_Accessor = value;
  return *this;
}

bool OrbitalManeuverDetailsBaseType::hasDeltaVelocityMagnitude() const noexcept {
  return deltaVelocityMagnitude_Accessor.has_value();
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::clearDeltaVelocityMagnitude() noexcept {
  deltaVelocityMagnitude_Accessor.reset();
  return *this;
}

uci::type::CovarianceMatrixType& OrbitalManeuverDetailsBaseType::getDeltaVelocityCovariance_() const {
  if (deltaVelocityCovariance_Accessor) {
    return *deltaVelocityCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaVelocityCovariance(): An attempt was made to get an optional field that was not enabled, call hasDeltaVelocityCovariance() to determine if it is safe to call getDeltaVelocityCovariance()");
}

const uci::type::CovarianceMatrixType& OrbitalManeuverDetailsBaseType::getDeltaVelocityCovariance() const {
  return getDeltaVelocityCovariance_();
}

uci::type::CovarianceMatrixType& OrbitalManeuverDetailsBaseType::getDeltaVelocityCovariance() {
  return getDeltaVelocityCovariance_();
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::setDeltaVelocityCovariance(const uci::type::CovarianceMatrixType& accessor) {
  enableDeltaVelocityCovariance();
  if (&accessor != deltaVelocityCovariance_Accessor.get()) {
    deltaVelocityCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalManeuverDetailsBaseType::hasDeltaVelocityCovariance() const noexcept {
  return static_cast<bool>(deltaVelocityCovariance_Accessor);
}

uci::type::CovarianceMatrixType& OrbitalManeuverDetailsBaseType::enableDeltaVelocityCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::covarianceMatrixType : type};
  if ((!deltaVelocityCovariance_Accessor) || (deltaVelocityCovariance_Accessor->getAccessorType() != requestedType)) {
    deltaVelocityCovariance_Accessor = CovarianceMatrixType::create(requestedType);
    if (!deltaVelocityCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableDeltaVelocityCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *deltaVelocityCovariance_Accessor;
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::clearDeltaVelocityCovariance() noexcept {
  deltaVelocityCovariance_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue OrbitalManeuverDetailsBaseType::getDuration() const {
  if (duration_Accessor) {
    return *duration_Accessor;
  }
  throw uci::base::UCIException("Error in getDuration(): An attempt was made to get an optional field that was not enabled, call hasDuration() to determine if it is safe to call getDuration()");
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::setDuration(uci::type::DurationTypeValue value) {
  duration_Accessor = value;
  return *this;
}

bool OrbitalManeuverDetailsBaseType::hasDuration() const noexcept {
  return duration_Accessor.has_value();
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::clearDuration() noexcept {
  duration_Accessor.reset();
  return *this;
}

uci::type::MassTypeValue OrbitalManeuverDetailsBaseType::getDeltaMass() const {
  if (deltaMass_Accessor) {
    return *deltaMass_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaMass(): An attempt was made to get an optional field that was not enabled, call hasDeltaMass() to determine if it is safe to call getDeltaMass()");
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::setDeltaMass(uci::type::MassTypeValue value) {
  deltaMass_Accessor = value;
  return *this;
}

bool OrbitalManeuverDetailsBaseType::hasDeltaMass() const noexcept {
  return deltaMass_Accessor.has_value();
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::clearDeltaMass() noexcept {
  deltaMass_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalManeuverDetailsBaseType> OrbitalManeuverDetailsBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsBaseType : type};
  return std::unique_ptr<OrbitalManeuverDetailsBaseType>(dynamic_cast<OrbitalManeuverDetailsBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OrbitalManeuverDetailsBaseType_Names {

constexpr const char* Extern_Type_Name{"OrbitalManeuverDetailsBaseType"};
constexpr const char* DeltaVelocity_Name{"DeltaVelocity"};
constexpr const char* DeltaVelocityMagnitude_Name{"DeltaVelocityMagnitude"};
constexpr const char* DeltaVelocityCovariance_Name{"DeltaVelocityCovariance"};
constexpr const char* Duration_Name{"Duration"};
constexpr const char* DeltaMass_Name{"DeltaMass"};

} // namespace OrbitalManeuverDetailsBaseType_Names

void OrbitalManeuverDetailsBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalManeuverDetailsBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalManeuverDetailsBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalManeuverDetailsBaseType_Names::DeltaVelocity_Name) {
      OrbitalDeltaVelocity_B_Type::deserialize(valueType.second, accessor.getDeltaVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalManeuverDetailsBaseType_Names::DeltaVelocityMagnitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeltaVelocityMagnitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalManeuverDetailsBaseType_Names::DeltaVelocityCovariance_Name) {
      CovarianceMatrixType::deserialize(valueType.second, accessor.enableDeltaVelocityCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalManeuverDetailsBaseType_Names::Duration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalManeuverDetailsBaseType_Names::DeltaMass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeltaMass(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitalManeuverDetailsBaseType::serialize(const uci::type::OrbitalManeuverDetailsBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalManeuverDetailsBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitalManeuverDetailsBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalManeuverDetailsBaseType_Names::Extern_Type_Name);
    }
    OrbitalDeltaVelocity_B_Type::serialize(accessor.getDeltaVelocity(), node, OrbitalManeuverDetailsBaseType_Names::DeltaVelocity_Name);
    if (accessor.hasDeltaVelocityMagnitude()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDeltaVelocityMagnitude(), node, OrbitalManeuverDetailsBaseType_Names::DeltaVelocityMagnitude_Name);
    }
    if (accessor.hasDeltaVelocityCovariance()) {
      CovarianceMatrixType::serialize(accessor.getDeltaVelocityCovariance(), node, OrbitalManeuverDetailsBaseType_Names::DeltaVelocityCovariance_Name);
    }
    if (accessor.hasDuration()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDuration(), node, OrbitalManeuverDetailsBaseType_Names::Duration_Name);
    }
    if (accessor.hasDeltaMass()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDeltaMass(), node, OrbitalManeuverDetailsBaseType_Names::DeltaMass_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalManeuverDetailsBaseType>().release());
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitalManeuverDetailsBaseType::create(const uci::type::OrbitalManeuverDetailsBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalManeuverDetailsBaseType> newAccessor{boost::make_unique<asb_uci::type::OrbitalManeuverDetailsBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalManeuverDetailsBaseType::destroy(uci::type::OrbitalManeuverDetailsBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalManeuverDetailsBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

