/** @file ProductDisseminationReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ProductDisseminationReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DisseminationReportType.h"
#include "../../../include/asb_uci/type/ProductDisseminationReportID_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DisseminationReportType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductDisseminationReportID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductDisseminationReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductDisseminationReportMDT::ProductDisseminationReportMDT()
  : productDisseminationReportID_Accessor{boost::make_unique<ProductDisseminationReportID_Type>()},
    systemID_Accessor{boost::make_unique<SystemID_Type>()},
    disseminationReport_Accessor{boost::make_unique<DisseminationReportType>()} {
}

ProductDisseminationReportMDT::~ProductDisseminationReportMDT() = default;

void ProductDisseminationReportMDT::copy(const uci::type::ProductDisseminationReportMDT& accessor) {
  copyImpl(accessor, false);
}

void ProductDisseminationReportMDT::copyImpl(const uci::type::ProductDisseminationReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductDisseminationReportMDT&>(accessor);
    setProductDisseminationReportID(*(accessorImpl.productDisseminationReportID_Accessor));
    setSystemID(*(accessorImpl.systemID_Accessor));
    setDisseminationReport(*(accessorImpl.disseminationReport_Accessor));
  }
}

void ProductDisseminationReportMDT::reset() noexcept {
  productDisseminationReportID_Accessor->reset();
  systemID_Accessor->reset();
  disseminationReport_Accessor->reset();
}

const uci::type::ProductDisseminationReportID_Type& ProductDisseminationReportMDT::getProductDisseminationReportID() const {
  return *productDisseminationReportID_Accessor;
}

uci::type::ProductDisseminationReportID_Type& ProductDisseminationReportMDT::getProductDisseminationReportID() {
  return *productDisseminationReportID_Accessor;
}

uci::type::ProductDisseminationReportMDT& ProductDisseminationReportMDT::setProductDisseminationReportID(const uci::type::ProductDisseminationReportID_Type& accessor) {
  if (&accessor != productDisseminationReportID_Accessor.get()) {
    productDisseminationReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemID_Type& ProductDisseminationReportMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& ProductDisseminationReportMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::ProductDisseminationReportMDT& ProductDisseminationReportMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DisseminationReportType& ProductDisseminationReportMDT::getDisseminationReport() const {
  return *disseminationReport_Accessor;
}

uci::type::DisseminationReportType& ProductDisseminationReportMDT::getDisseminationReport() {
  return *disseminationReport_Accessor;
}

uci::type::ProductDisseminationReportMDT& ProductDisseminationReportMDT::setDisseminationReport(const uci::type::DisseminationReportType& accessor) {
  if (&accessor != disseminationReport_Accessor.get()) {
    disseminationReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ProductDisseminationReportMDT> ProductDisseminationReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productDisseminationReportMDT : type};
  return (requestedType == uci::type::accessorType::productDisseminationReportMDT) ? boost::make_unique<ProductDisseminationReportMDT>() : nullptr;
}

/**  */
namespace ProductDisseminationReportMDT_Names {

constexpr const char* Extern_Type_Name{"ProductDisseminationReportMDT"};
constexpr const char* ProductDisseminationReportID_Name{"ProductDisseminationReportID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* DisseminationReport_Name{"DisseminationReport"};

} // namespace ProductDisseminationReportMDT_Names

void ProductDisseminationReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductDisseminationReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductDisseminationReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductDisseminationReportMDT_Names::ProductDisseminationReportID_Name) {
      ProductDisseminationReportID_Type::deserialize(valueType.second, accessor.getProductDisseminationReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductDisseminationReportMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductDisseminationReportMDT_Names::DisseminationReport_Name) {
      DisseminationReportType::deserialize(valueType.second, accessor.getDisseminationReport(), nodeName, nsPrefix);
    }
  }
}

std::string ProductDisseminationReportMDT::serialize(const uci::type::ProductDisseminationReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductDisseminationReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductDisseminationReportMDT_Names::Extern_Type_Name);
  }
  ProductDisseminationReportID_Type::serialize(accessor.getProductDisseminationReportID(), node, ProductDisseminationReportMDT_Names::ProductDisseminationReportID_Name);
  SystemID_Type::serialize(accessor.getSystemID(), node, ProductDisseminationReportMDT_Names::SystemID_Name);
  DisseminationReportType::serialize(accessor.getDisseminationReport(), node, ProductDisseminationReportMDT_Names::DisseminationReport_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductDisseminationReportMDT& ProductDisseminationReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductDisseminationReportMDT>().release());
}

uci::type::ProductDisseminationReportMDT& ProductDisseminationReportMDT::create(const uci::type::ProductDisseminationReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductDisseminationReportMDT> newAccessor{boost::make_unique<asb_uci::type::ProductDisseminationReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductDisseminationReportMDT::destroy(uci::type::ProductDisseminationReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ProductDisseminationReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

