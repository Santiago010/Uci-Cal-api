/** @file VCM_ForceModelOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VCM_ForceModelOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AccelerationType.h"
#include "uci/type/DistanceOffsetType.h"
#include "uci/type/VCM_ForceModelOptionsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VCM_ForceModelOptionsType::VCM_ForceModelOptionsType() = default;

VCM_ForceModelOptionsType::~VCM_ForceModelOptionsType() = default;

void VCM_ForceModelOptionsType::copy(const uci::type::VCM_ForceModelOptionsType& accessor) {
  copyImpl(accessor, false);
}

void VCM_ForceModelOptionsType::copyImpl(const uci::type::VCM_ForceModelOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VCM_ForceModelOptionsType&>(accessor);
    setIsLunarSolarOn(accessorImpl.isLunarSolarOn_Accessor);
    setIsSolarRadiationPressureOn(accessorImpl.isSolarRadiationPressureOn_Accessor);
    setIsInTrackThrustOn(accessorImpl.isInTrackThrustOn_Accessor);
    if (accessorImpl.hasInTrackThrustAcceleration()) {
      setInTrackThrustAcceleration(accessorImpl.getInTrackThrustAcceleration());
    } else {
      clearInTrackThrustAcceleration();
    }
    if (accessorImpl.hasCenterOfMassOffset()) {
      setCenterOfMassOffset(accessorImpl.getCenterOfMassOffset());
    } else {
      clearCenterOfMassOffset();
    }
  }
}

void VCM_ForceModelOptionsType::reset() noexcept {
  isLunarSolarOn_Accessor = false;
  isSolarRadiationPressureOn_Accessor = false;
  isInTrackThrustOn_Accessor = false;
  clearInTrackThrustAcceleration();
  clearCenterOfMassOffset();
}

xs::Boolean VCM_ForceModelOptionsType::getIsLunarSolarOn() const {
  return isLunarSolarOn_Accessor;
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::setIsLunarSolarOn(xs::Boolean value) {
  isLunarSolarOn_Accessor = value;
  return *this;
}


xs::Boolean VCM_ForceModelOptionsType::getIsSolarRadiationPressureOn() const {
  return isSolarRadiationPressureOn_Accessor;
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::setIsSolarRadiationPressureOn(xs::Boolean value) {
  isSolarRadiationPressureOn_Accessor = value;
  return *this;
}


xs::Boolean VCM_ForceModelOptionsType::getIsInTrackThrustOn() const {
  return isInTrackThrustOn_Accessor;
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::setIsInTrackThrustOn(xs::Boolean value) {
  isInTrackThrustOn_Accessor = value;
  return *this;
}


uci::type::AccelerationTypeValue VCM_ForceModelOptionsType::getInTrackThrustAcceleration() const {
  if (inTrackThrustAcceleration_Accessor) {
    return *inTrackThrustAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getInTrackThrustAcceleration(): An attempt was made to get an optional field that was not enabled, call hasInTrackThrustAcceleration() to determine if it is safe to call getInTrackThrustAcceleration()");
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::setInTrackThrustAcceleration(uci::type::AccelerationTypeValue value) {
  inTrackThrustAcceleration_Accessor = value;
  return *this;
}

bool VCM_ForceModelOptionsType::hasInTrackThrustAcceleration() const noexcept {
  return inTrackThrustAcceleration_Accessor.has_value();
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::clearInTrackThrustAcceleration() noexcept {
  inTrackThrustAcceleration_Accessor.reset();
  return *this;
}

uci::type::DistanceOffsetTypeValue VCM_ForceModelOptionsType::getCenterOfMassOffset() const {
  if (centerOfMassOffset_Accessor) {
    return *centerOfMassOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getCenterOfMassOffset(): An attempt was made to get an optional field that was not enabled, call hasCenterOfMassOffset() to determine if it is safe to call getCenterOfMassOffset()");
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::setCenterOfMassOffset(uci::type::DistanceOffsetTypeValue value) {
  centerOfMassOffset_Accessor = value;
  return *this;
}

bool VCM_ForceModelOptionsType::hasCenterOfMassOffset() const noexcept {
  return centerOfMassOffset_Accessor.has_value();
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::clearCenterOfMassOffset() noexcept {
  centerOfMassOffset_Accessor.reset();
  return *this;
}

std::unique_ptr<VCM_ForceModelOptionsType> VCM_ForceModelOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vCM_ForceModelOptionsType : type};
  return (requestedType == uci::type::accessorType::vCM_ForceModelOptionsType) ? boost::make_unique<VCM_ForceModelOptionsType>() : nullptr;
}

/**  */
namespace VCM_ForceModelOptionsType_Names {

constexpr const char* Extern_Type_Name{"VCM_ForceModelOptionsType"};
constexpr const char* IsLunarSolarOn_Name{"IsLunarSolarOn"};
constexpr const char* IsSolarRadiationPressureOn_Name{"IsSolarRadiationPressureOn"};
constexpr const char* IsInTrackThrustOn_Name{"IsInTrackThrustOn"};
constexpr const char* InTrackThrustAcceleration_Name{"InTrackThrustAcceleration"};
constexpr const char* CenterOfMassOffset_Name{"CenterOfMassOffset"};

} // namespace VCM_ForceModelOptionsType_Names

void VCM_ForceModelOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VCM_ForceModelOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VCM_ForceModelOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VCM_ForceModelOptionsType_Names::IsLunarSolarOn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsLunarSolarOn(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VCM_ForceModelOptionsType_Names::IsSolarRadiationPressureOn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsSolarRadiationPressureOn(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VCM_ForceModelOptionsType_Names::IsInTrackThrustOn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsInTrackThrustOn(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VCM_ForceModelOptionsType_Names::InTrackThrustAcceleration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInTrackThrustAcceleration(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VCM_ForceModelOptionsType_Names::CenterOfMassOffset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCenterOfMassOffset(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string VCM_ForceModelOptionsType::serialize(const uci::type::VCM_ForceModelOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VCM_ForceModelOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VCM_ForceModelOptionsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIsLunarSolarOn(), node, VCM_ForceModelOptionsType_Names::IsLunarSolarOn_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIsSolarRadiationPressureOn(), node, VCM_ForceModelOptionsType_Names::IsSolarRadiationPressureOn_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIsInTrackThrustOn(), node, VCM_ForceModelOptionsType_Names::IsInTrackThrustOn_Name);
  if (accessor.hasInTrackThrustAcceleration()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInTrackThrustAcceleration(), node, VCM_ForceModelOptionsType_Names::InTrackThrustAcceleration_Name);
  }
  if (accessor.hasCenterOfMassOffset()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCenterOfMassOffset(), node, VCM_ForceModelOptionsType_Names::CenterOfMassOffset_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VCM_ForceModelOptionsType>().release());
}

uci::type::VCM_ForceModelOptionsType& VCM_ForceModelOptionsType::create(const uci::type::VCM_ForceModelOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VCM_ForceModelOptionsType> newAccessor{boost::make_unique<asb_uci::type::VCM_ForceModelOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VCM_ForceModelOptionsType::destroy(uci::type::VCM_ForceModelOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::VCM_ForceModelOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

