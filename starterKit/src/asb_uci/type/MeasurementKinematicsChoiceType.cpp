/** @file MeasurementKinematicsChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MeasurementKinematicsChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ECEF_KinematicsType.h"
#include "../../../include/asb_uci/type/EquatorialKinematicsType.h"
#include "../../../include/asb_uci/type/KinematicsType.h"
#include "../../../include/asb_uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EquatorialKinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MeasurementKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MeasurementKinematicsChoiceType::MeasurementKinematicsChoiceType() = default;

MeasurementKinematicsChoiceType::~MeasurementKinematicsChoiceType() = default;

void MeasurementKinematicsChoiceType::copy(const uci::type::MeasurementKinematicsChoiceType& accessor) {
  copyImpl(accessor, false);
}

void MeasurementKinematicsChoiceType::copyImpl(const uci::type::MeasurementKinematicsChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MeasurementKinematicsChoiceType&>(accessor);
    if (accessorImpl.lOS_AzEl_Accessor) {
      setLOS_AzEl(*(accessorImpl.lOS_AzEl_Accessor));
    } else {
      lOS_AzEl_Accessor.reset();
    }
    if (accessorImpl.lOS_Equatorial_Accessor) {
      setLOS_Equatorial(*(accessorImpl.lOS_Equatorial_Accessor));
    } else {
      lOS_Equatorial_Accessor.reset();
    }
    if (accessorImpl.orbital_Accessor) {
      setOrbital(*(accessorImpl.orbital_Accessor));
    } else {
      orbital_Accessor.reset();
    }
    if (accessorImpl.wGS_Accessor) {
      setWGS(*(accessorImpl.wGS_Accessor));
    } else {
      wGS_Accessor.reset();
    }
    if (accessorImpl.eCEF_Kinematics_Accessor) {
      setECEF_Kinematics(*(accessorImpl.eCEF_Kinematics_Accessor));
    } else {
      eCEF_Kinematics_Accessor.reset();
    }
  }
}

void MeasurementKinematicsChoiceType::reset() noexcept {
  lOS_AzEl_Accessor.reset();
  lOS_Equatorial_Accessor.reset();
  orbital_Accessor.reset();
  wGS_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
}

uci::type::MeasurementKinematicsChoiceType::MeasurementKinematicsChoiceTypeChoice MeasurementKinematicsChoiceType::getMeasurementKinematicsChoiceTypeChoiceOrdinal() const noexcept {
  if (lOS_AzEl_Accessor) {
    return MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_LOS_AZEL;
  }
  if (lOS_Equatorial_Accessor) {
    return MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_LOS_EQUATORIAL;
  }
  if (orbital_Accessor) {
    return MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_ORBITAL;
  }
  if (wGS_Accessor) {
    return MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_WGS;
  }
  if (eCEF_Kinematics_Accessor) {
    return MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_ECEF_KINEMATICS;
  }
  return MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_NONE;
}

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::setMeasurementKinematicsChoiceTypeChoiceOrdinal(uci::type::MeasurementKinematicsChoiceType::MeasurementKinematicsChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_LOS_AZEL:
      chooseLOS_AzEl("setMeasurementKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_LOS_EQUATORIAL:
      chooseLOS_Equatorial("setMeasurementKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_ORBITAL:
      chooseOrbital("setMeasurementKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_WGS:
      chooseWGS("setMeasurementKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case MEASUREMENTKINEMATICSCHOICETYPE_CHOICE_ECEF_KINEMATICS:
      chooseECEF_Kinematics("setMeasurementKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setMeasurementKinematicsChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::LOS_MeasurementWithUncertaintyType& MeasurementKinematicsChoiceType::getLOS_AzEl_() const {
  if (lOS_AzEl_Accessor) {
    return *lOS_AzEl_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_AzEl(): Unable to get LOS_AzEl, field not selected");
}

const uci::type::LOS_MeasurementWithUncertaintyType& MeasurementKinematicsChoiceType::getLOS_AzEl() const {
  return getLOS_AzEl_();
}

uci::type::LOS_MeasurementWithUncertaintyType& MeasurementKinematicsChoiceType::getLOS_AzEl() {
  return getLOS_AzEl_();
}

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::setLOS_AzEl(const uci::type::LOS_MeasurementWithUncertaintyType& accessor) {
  chooseLOS_AzEl("setLOS_AzEl", accessor.getAccessorType());
  if (&accessor != lOS_AzEl_Accessor.get()) {
    lOS_AzEl_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MeasurementKinematicsChoiceType::isLOS_AzEl() const noexcept {
  return static_cast<bool>(lOS_AzEl_Accessor);
}

uci::type::LOS_MeasurementWithUncertaintyType& MeasurementKinematicsChoiceType::chooseLOS_AzEl(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_Equatorial_Accessor.reset();
  orbital_Accessor.reset();
  wGS_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementWithUncertaintyType : type};
  if ((!lOS_AzEl_Accessor) || (lOS_AzEl_Accessor->getAccessorType() != requestedType)) {
    lOS_AzEl_Accessor = LOS_MeasurementWithUncertaintyType::create(type);
    if (!lOS_AzEl_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_AzEl_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& MeasurementKinematicsChoiceType::chooseLOS_AzEl(uci::base::accessorType::AccessorType type) {
  return chooseLOS_AzEl("chooseLOS_AzEl", type);
}

uci::type::EquatorialKinematicsType& MeasurementKinematicsChoiceType::getLOS_Equatorial_() const {
  if (lOS_Equatorial_Accessor) {
    return *lOS_Equatorial_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_Equatorial(): Unable to get LOS_Equatorial, field not selected");
}

const uci::type::EquatorialKinematicsType& MeasurementKinematicsChoiceType::getLOS_Equatorial() const {
  return getLOS_Equatorial_();
}

uci::type::EquatorialKinematicsType& MeasurementKinematicsChoiceType::getLOS_Equatorial() {
  return getLOS_Equatorial_();
}

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::setLOS_Equatorial(const uci::type::EquatorialKinematicsType& accessor) {
  chooseLOS_Equatorial();
  if (&accessor != lOS_Equatorial_Accessor.get()) {
    lOS_Equatorial_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementKinematicsChoiceType::isLOS_Equatorial() const noexcept {
  return static_cast<bool>(lOS_Equatorial_Accessor);
}

uci::type::EquatorialKinematicsType& MeasurementKinematicsChoiceType::chooseLOS_Equatorial(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_AzEl_Accessor.reset();
  orbital_Accessor.reset();
  wGS_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::equatorialKinematicsType : type};
  if ((!lOS_Equatorial_Accessor) || (lOS_Equatorial_Accessor->getAccessorType() != requestedType)) {
    lOS_Equatorial_Accessor = EquatorialKinematicsType::create(type);
    if (!lOS_Equatorial_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_Equatorial_Accessor;
}

uci::type::EquatorialKinematicsType& MeasurementKinematicsChoiceType::chooseLOS_Equatorial(uci::base::accessorType::AccessorType type) {
  return chooseLOS_Equatorial("chooseLOS_Equatorial", type);
}

uci::type::OrbitalKinematicsChoiceType& MeasurementKinematicsChoiceType::getOrbital_() const {
  if (orbital_Accessor) {
    return *orbital_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbital(): Unable to get Orbital, field not selected");
}

const uci::type::OrbitalKinematicsChoiceType& MeasurementKinematicsChoiceType::getOrbital() const {
  return getOrbital_();
}

uci::type::OrbitalKinematicsChoiceType& MeasurementKinematicsChoiceType::getOrbital() {
  return getOrbital_();
}

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::setOrbital(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  chooseOrbital(accessor.getAccessorType());
  if (&accessor != orbital_Accessor.get()) {
    orbital_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementKinematicsChoiceType::isOrbital() const noexcept {
  return static_cast<bool>(orbital_Accessor);
}

uci::type::OrbitalKinematicsChoiceType& MeasurementKinematicsChoiceType::chooseOrbital(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_AzEl_Accessor.reset();
  lOS_Equatorial_Accessor.reset();
  wGS_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsChoiceType : type};
  if ((!orbital_Accessor) || (orbital_Accessor->getAccessorType() != requestedType)) {
    orbital_Accessor = OrbitalKinematicsChoiceType::create(type);
    if (!orbital_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbital_Accessor;
}

uci::type::OrbitalKinematicsChoiceType& MeasurementKinematicsChoiceType::chooseOrbital(uci::base::accessorType::AccessorType type) {
  return chooseOrbital("chooseOrbital", type);
}

uci::type::KinematicsType& MeasurementKinematicsChoiceType::getWGS_() const {
  if (wGS_Accessor) {
    return *wGS_Accessor;
  }
  throw uci::base::UCIException("Error in getWGS(): Unable to get WGS, field not selected");
}

const uci::type::KinematicsType& MeasurementKinematicsChoiceType::getWGS() const {
  return getWGS_();
}

uci::type::KinematicsType& MeasurementKinematicsChoiceType::getWGS() {
  return getWGS_();
}

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::setWGS(const uci::type::KinematicsType& accessor) {
  chooseWGS();
  if (&accessor != wGS_Accessor.get()) {
    wGS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementKinematicsChoiceType::isWGS() const noexcept {
  return static_cast<bool>(wGS_Accessor);
}

uci::type::KinematicsType& MeasurementKinematicsChoiceType::chooseWGS(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_AzEl_Accessor.reset();
  lOS_Equatorial_Accessor.reset();
  orbital_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsType : type};
  if ((!wGS_Accessor) || (wGS_Accessor->getAccessorType() != requestedType)) {
    wGS_Accessor = KinematicsType::create(type);
    if (!wGS_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *wGS_Accessor;
}

uci::type::KinematicsType& MeasurementKinematicsChoiceType::chooseWGS(uci::base::accessorType::AccessorType type) {
  return chooseWGS("chooseWGS", type);
}

uci::type::ECEF_KinematicsType& MeasurementKinematicsChoiceType::getECEF_Kinematics_() const {
  if (eCEF_Kinematics_Accessor) {
    return *eCEF_Kinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getECEF_Kinematics(): Unable to get ECEF_Kinematics, field not selected");
}

const uci::type::ECEF_KinematicsType& MeasurementKinematicsChoiceType::getECEF_Kinematics() const {
  return getECEF_Kinematics_();
}

uci::type::ECEF_KinematicsType& MeasurementKinematicsChoiceType::getECEF_Kinematics() {
  return getECEF_Kinematics_();
}

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::setECEF_Kinematics(const uci::type::ECEF_KinematicsType& accessor) {
  chooseECEF_Kinematics();
  if (&accessor != eCEF_Kinematics_Accessor.get()) {
    eCEF_Kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementKinematicsChoiceType::isECEF_Kinematics() const noexcept {
  return static_cast<bool>(eCEF_Kinematics_Accessor);
}

uci::type::ECEF_KinematicsType& MeasurementKinematicsChoiceType::chooseECEF_Kinematics(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_AzEl_Accessor.reset();
  lOS_Equatorial_Accessor.reset();
  orbital_Accessor.reset();
  wGS_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_KinematicsType : type};
  if ((!eCEF_Kinematics_Accessor) || (eCEF_Kinematics_Accessor->getAccessorType() != requestedType)) {
    eCEF_Kinematics_Accessor = ECEF_KinematicsType::create(type);
    if (!eCEF_Kinematics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eCEF_Kinematics_Accessor;
}

uci::type::ECEF_KinematicsType& MeasurementKinematicsChoiceType::chooseECEF_Kinematics(uci::base::accessorType::AccessorType type) {
  return chooseECEF_Kinematics("chooseECEF_Kinematics", type);
}

std::unique_ptr<MeasurementKinematicsChoiceType> MeasurementKinematicsChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementKinematicsChoiceType : type};
  return (requestedType == uci::type::accessorType::measurementKinematicsChoiceType) ? boost::make_unique<MeasurementKinematicsChoiceType>() : nullptr;
}

/**  */
namespace MeasurementKinematicsChoiceType_Names {

constexpr const char* Extern_Type_Name{"MeasurementKinematicsChoiceType"};
constexpr const char* LOS_AzEl_Name{"LOS_AzEl"};
constexpr const char* LOS_Equatorial_Name{"LOS_Equatorial"};
constexpr const char* Orbital_Name{"Orbital"};
constexpr const char* WGS_Name{"WGS"};
constexpr const char* ECEF_Kinematics_Name{"ECEF_Kinematics"};

} // namespace MeasurementKinematicsChoiceType_Names

void MeasurementKinematicsChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MeasurementKinematicsChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MeasurementKinematicsChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MeasurementKinematicsChoiceType_Names::LOS_AzEl_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseLOS_AzEl(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementKinematicsChoiceType_Names::LOS_Equatorial_Name) {
      EquatorialKinematicsType::deserialize(valueType.second, accessor.chooseLOS_Equatorial(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementKinematicsChoiceType_Names::Orbital_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.chooseOrbital(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementKinematicsChoiceType_Names::WGS_Name) {
      KinematicsType::deserialize(valueType.second, accessor.chooseWGS(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementKinematicsChoiceType_Names::ECEF_Kinematics_Name) {
      ECEF_KinematicsType::deserialize(valueType.second, accessor.chooseECEF_Kinematics(), nodeName, nsPrefix);
    }
  }
}

std::string MeasurementKinematicsChoiceType::serialize(const uci::type::MeasurementKinematicsChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MeasurementKinematicsChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MeasurementKinematicsChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isLOS_AzEl()) {
    LOS_MeasurementWithUncertaintyType::serialize(accessor.getLOS_AzEl(), node, MeasurementKinematicsChoiceType_Names::LOS_AzEl_Name);
  } else if (accessor.isLOS_Equatorial()) {
    EquatorialKinematicsType::serialize(accessor.getLOS_Equatorial(), node, MeasurementKinematicsChoiceType_Names::LOS_Equatorial_Name);
  } else if (accessor.isOrbital()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getOrbital(), node, MeasurementKinematicsChoiceType_Names::Orbital_Name);
  } else if (accessor.isWGS()) {
    KinematicsType::serialize(accessor.getWGS(), node, MeasurementKinematicsChoiceType_Names::WGS_Name);
  } else if (accessor.isECEF_Kinematics()) {
    ECEF_KinematicsType::serialize(accessor.getECEF_Kinematics(), node, MeasurementKinematicsChoiceType_Names::ECEF_Kinematics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MeasurementKinematicsChoiceType>().release());
}

uci::type::MeasurementKinematicsChoiceType& MeasurementKinematicsChoiceType::create(const uci::type::MeasurementKinematicsChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MeasurementKinematicsChoiceType> newAccessor{boost::make_unique<asb_uci::type::MeasurementKinematicsChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MeasurementKinematicsChoiceType::destroy(uci::type::MeasurementKinematicsChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::MeasurementKinematicsChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

