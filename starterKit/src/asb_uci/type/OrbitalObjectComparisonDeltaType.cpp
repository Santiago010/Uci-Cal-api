/** @file OrbitalObjectComparisonDeltaType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalObjectComparisonDeltaType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitalObjectMetricsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalObjectComparisonDeltaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalObjectMetricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalObjectComparisonDeltaType::OrbitalObjectComparisonDeltaType() = default;

OrbitalObjectComparisonDeltaType::~OrbitalObjectComparisonDeltaType() = default;

void OrbitalObjectComparisonDeltaType::copy(const uci::type::OrbitalObjectComparisonDeltaType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalObjectComparisonDeltaType::copyImpl(const uci::type::OrbitalObjectComparisonDeltaType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalObjectComparisonDeltaType&>(accessor);
    if (accessorImpl.primaryObject_Accessor) {
      setPrimaryObject(*(accessorImpl.primaryObject_Accessor));
    } else {
      primaryObject_Accessor.reset();
    }
    if (accessorImpl.secondaryObject_Accessor) {
      setSecondaryObject(*(accessorImpl.secondaryObject_Accessor));
    } else {
      secondaryObject_Accessor.reset();
    }
    if (accessorImpl.difference_Accessor) {
      setDifference(*(accessorImpl.difference_Accessor));
    } else {
      difference_Accessor.reset();
    }
  }
}

void OrbitalObjectComparisonDeltaType::reset() noexcept {
  primaryObject_Accessor.reset();
  secondaryObject_Accessor.reset();
  difference_Accessor.reset();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getPrimaryObject_() const {
  if (primaryObject_Accessor) {
    return *primaryObject_Accessor;
  }
  throw uci::base::UCIException("Error in getPrimaryObject(): An attempt was made to get an optional field that was not enabled, call hasPrimaryObject() to determine if it is safe to call getPrimaryObject()");
}

const uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getPrimaryObject() const {
  return getPrimaryObject_();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getPrimaryObject() {
  return getPrimaryObject_();
}

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::setPrimaryObject(const uci::type::OrbitalObjectMetricsType& accessor) {
  enablePrimaryObject();
  if (&accessor != primaryObject_Accessor.get()) {
    primaryObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalObjectComparisonDeltaType::hasPrimaryObject() const noexcept {
  return static_cast<bool>(primaryObject_Accessor);
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::enablePrimaryObject(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalObjectMetricsType : type};
  if ((!primaryObject_Accessor) || (primaryObject_Accessor->getAccessorType() != requestedType)) {
    primaryObject_Accessor = OrbitalObjectMetricsType::create(requestedType);
    if (!primaryObject_Accessor) {
      throw uci::base::UCIException("Error in enablePrimaryObject(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *primaryObject_Accessor;
}

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::clearPrimaryObject() noexcept {
  primaryObject_Accessor.reset();
  return *this;
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getSecondaryObject_() const {
  if (secondaryObject_Accessor) {
    return *secondaryObject_Accessor;
  }
  throw uci::base::UCIException("Error in getSecondaryObject(): An attempt was made to get an optional field that was not enabled, call hasSecondaryObject() to determine if it is safe to call getSecondaryObject()");
}

const uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getSecondaryObject() const {
  return getSecondaryObject_();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getSecondaryObject() {
  return getSecondaryObject_();
}

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::setSecondaryObject(const uci::type::OrbitalObjectMetricsType& accessor) {
  enableSecondaryObject();
  if (&accessor != secondaryObject_Accessor.get()) {
    secondaryObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalObjectComparisonDeltaType::hasSecondaryObject() const noexcept {
  return static_cast<bool>(secondaryObject_Accessor);
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::enableSecondaryObject(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalObjectMetricsType : type};
  if ((!secondaryObject_Accessor) || (secondaryObject_Accessor->getAccessorType() != requestedType)) {
    secondaryObject_Accessor = OrbitalObjectMetricsType::create(requestedType);
    if (!secondaryObject_Accessor) {
      throw uci::base::UCIException("Error in enableSecondaryObject(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *secondaryObject_Accessor;
}

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::clearSecondaryObject() noexcept {
  secondaryObject_Accessor.reset();
  return *this;
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getDifference_() const {
  if (difference_Accessor) {
    return *difference_Accessor;
  }
  throw uci::base::UCIException("Error in getDifference(): An attempt was made to get an optional field that was not enabled, call hasDifference() to determine if it is safe to call getDifference()");
}

const uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getDifference() const {
  return getDifference_();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::getDifference() {
  return getDifference_();
}

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::setDifference(const uci::type::OrbitalObjectMetricsType& accessor) {
  enableDifference();
  if (&accessor != difference_Accessor.get()) {
    difference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalObjectComparisonDeltaType::hasDifference() const noexcept {
  return static_cast<bool>(difference_Accessor);
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectComparisonDeltaType::enableDifference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalObjectMetricsType : type};
  if ((!difference_Accessor) || (difference_Accessor->getAccessorType() != requestedType)) {
    difference_Accessor = OrbitalObjectMetricsType::create(requestedType);
    if (!difference_Accessor) {
      throw uci::base::UCIException("Error in enableDifference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *difference_Accessor;
}

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::clearDifference() noexcept {
  difference_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalObjectComparisonDeltaType> OrbitalObjectComparisonDeltaType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalObjectComparisonDeltaType : type};
  return (requestedType == uci::type::accessorType::orbitalObjectComparisonDeltaType) ? boost::make_unique<OrbitalObjectComparisonDeltaType>() : nullptr;
}

/**  */
namespace OrbitalObjectComparisonDeltaType_Names {

constexpr const char* Extern_Type_Name{"OrbitalObjectComparisonDeltaType"};
constexpr const char* PrimaryObject_Name{"PrimaryObject"};
constexpr const char* SecondaryObject_Name{"SecondaryObject"};
constexpr const char* Difference_Name{"Difference"};

} // namespace OrbitalObjectComparisonDeltaType_Names

void OrbitalObjectComparisonDeltaType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalObjectComparisonDeltaType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalObjectComparisonDeltaType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalObjectComparisonDeltaType_Names::PrimaryObject_Name) {
      OrbitalObjectMetricsType::deserialize(valueType.second, accessor.enablePrimaryObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalObjectComparisonDeltaType_Names::SecondaryObject_Name) {
      OrbitalObjectMetricsType::deserialize(valueType.second, accessor.enableSecondaryObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalObjectComparisonDeltaType_Names::Difference_Name) {
      OrbitalObjectMetricsType::deserialize(valueType.second, accessor.enableDifference(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalObjectComparisonDeltaType::serialize(const uci::type::OrbitalObjectComparisonDeltaType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalObjectComparisonDeltaType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalObjectComparisonDeltaType_Names::Extern_Type_Name);
  }
  if (accessor.hasPrimaryObject()) {
    OrbitalObjectMetricsType::serialize(accessor.getPrimaryObject(), node, OrbitalObjectComparisonDeltaType_Names::PrimaryObject_Name);
  }
  if (accessor.hasSecondaryObject()) {
    OrbitalObjectMetricsType::serialize(accessor.getSecondaryObject(), node, OrbitalObjectComparisonDeltaType_Names::SecondaryObject_Name);
  }
  if (accessor.hasDifference()) {
    OrbitalObjectMetricsType::serialize(accessor.getDifference(), node, OrbitalObjectComparisonDeltaType_Names::Difference_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalObjectComparisonDeltaType>().release());
}

uci::type::OrbitalObjectComparisonDeltaType& OrbitalObjectComparisonDeltaType::create(const uci::type::OrbitalObjectComparisonDeltaType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalObjectComparisonDeltaType> newAccessor{boost::make_unique<asb_uci::type::OrbitalObjectComparisonDeltaType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalObjectComparisonDeltaType::destroy(uci::type::OrbitalObjectComparisonDeltaType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalObjectComparisonDeltaType*>(&accessor);
}

} // namespace type

} // namespace uci

