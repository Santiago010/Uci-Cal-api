/** @file OpConstraintScoreType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpConstraintScoreType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FileLocationID_Type.h"
#include "../../../include/asb_uci/type/OpConstraintEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileLocationID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpConstraintEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpConstraintScoreType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpConstraintScoreType::OpConstraintScoreType()
  : constraint_Accessor{boost::make_unique<OpConstraintEnum>()} {
}

OpConstraintScoreType::~OpConstraintScoreType() = default;

void OpConstraintScoreType::copy(const uci::type::OpConstraintScoreType& accessor) {
  copyImpl(accessor, false);
}

void OpConstraintScoreType::copyImpl(const uci::type::OpConstraintScoreType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpConstraintScoreType&>(accessor);
    setConstraint(*(accessorImpl.constraint_Accessor));
    setScore(accessorImpl.score_Accessor);
    if (accessorImpl.hasFidelity()) {
      setFidelity(accessorImpl.getFidelity());
    } else {
      clearFidelity();
    }
    if (accessorImpl.hasConfidence()) {
      setConfidence(accessorImpl.getConfidence());
    } else {
      clearConfidence();
    }
    if (accessorImpl.fileLocationID_Accessor) {
      setFileLocationID(*(accessorImpl.fileLocationID_Accessor));
    } else {
      fileLocationID_Accessor.reset();
    }
  }
}

void OpConstraintScoreType::reset() noexcept {
  constraint_Accessor->reset();
  score_Accessor = 0.0;
  clearFidelity();
  clearConfidence();
  fileLocationID_Accessor.reset();
}

const uci::type::OpConstraintEnum& OpConstraintScoreType::getConstraint() const {
  return *constraint_Accessor;
}

uci::type::OpConstraintEnum& OpConstraintScoreType::getConstraint() {
  return *constraint_Accessor;
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::setConstraint(const uci::type::OpConstraintEnum& accessor) {
  if (&accessor != constraint_Accessor.get()) {
    constraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::setConstraint(uci::type::OpConstraintEnum::EnumerationItem value) {
  constraint_Accessor->setValue(value);
  return *this;
}


uci::type::PercentTypeValue OpConstraintScoreType::getScore() const {
  return score_Accessor;
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::setScore(uci::type::PercentTypeValue value) {
  score_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue OpConstraintScoreType::getFidelity() const {
  if (fidelity_Accessor) {
    return *fidelity_Accessor;
  }
  throw uci::base::UCIException("Error in getFidelity(): An attempt was made to get an optional field that was not enabled, call hasFidelity() to determine if it is safe to call getFidelity()");
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::setFidelity(uci::type::PercentTypeValue value) {
  fidelity_Accessor = value;
  return *this;
}

bool OpConstraintScoreType::hasFidelity() const noexcept {
  return fidelity_Accessor.has_value();
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::clearFidelity() noexcept {
  fidelity_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue OpConstraintScoreType::getConfidence() const {
  if (confidence_Accessor) {
    return *confidence_Accessor;
  }
  throw uci::base::UCIException("Error in getConfidence(): An attempt was made to get an optional field that was not enabled, call hasConfidence() to determine if it is safe to call getConfidence()");
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::setConfidence(uci::type::PercentTypeValue value) {
  confidence_Accessor = value;
  return *this;
}

bool OpConstraintScoreType::hasConfidence() const noexcept {
  return confidence_Accessor.has_value();
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::clearConfidence() noexcept {
  confidence_Accessor.reset();
  return *this;
}

uci::type::FileLocationID_Type& OpConstraintScoreType::getFileLocationID_() const {
  if (fileLocationID_Accessor) {
    return *fileLocationID_Accessor;
  }
  throw uci::base::UCIException("Error in getFileLocationID(): An attempt was made to get an optional field that was not enabled, call hasFileLocationID() to determine if it is safe to call getFileLocationID()");
}

const uci::type::FileLocationID_Type& OpConstraintScoreType::getFileLocationID() const {
  return getFileLocationID_();
}

uci::type::FileLocationID_Type& OpConstraintScoreType::getFileLocationID() {
  return getFileLocationID_();
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::setFileLocationID(const uci::type::FileLocationID_Type& accessor) {
  enableFileLocationID();
  if (&accessor != fileLocationID_Accessor.get()) {
    fileLocationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpConstraintScoreType::hasFileLocationID() const noexcept {
  return static_cast<bool>(fileLocationID_Accessor);
}

uci::type::FileLocationID_Type& OpConstraintScoreType::enableFileLocationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!fileLocationID_Accessor) || (fileLocationID_Accessor->getAccessorType() != requestedType)) {
    fileLocationID_Accessor = FileLocationID_Type::create(requestedType);
    if (!fileLocationID_Accessor) {
      throw uci::base::UCIException("Error in enableFileLocationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fileLocationID_Accessor;
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::clearFileLocationID() noexcept {
  fileLocationID_Accessor.reset();
  return *this;
}

std::unique_ptr<OpConstraintScoreType> OpConstraintScoreType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opConstraintScoreType : type};
  return (requestedType == uci::type::accessorType::opConstraintScoreType) ? boost::make_unique<OpConstraintScoreType>() : nullptr;
}

/**  */
namespace OpConstraintScoreType_Names {

constexpr const char* Extern_Type_Name{"OpConstraintScoreType"};
constexpr const char* Constraint_Name{"Constraint"};
constexpr const char* Score_Name{"Score"};
constexpr const char* Fidelity_Name{"Fidelity"};
constexpr const char* Confidence_Name{"Confidence"};
constexpr const char* FileLocationID_Name{"FileLocationID"};

} // namespace OpConstraintScoreType_Names

void OpConstraintScoreType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpConstraintScoreType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpConstraintScoreType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpConstraintScoreType_Names::Constraint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConstraint().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpConstraintScoreType_Names::Score_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setScore(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OpConstraintScoreType_Names::Fidelity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFidelity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OpConstraintScoreType_Names::Confidence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConfidence(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OpConstraintScoreType_Names::FileLocationID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableFileLocationID(), nodeName, nsPrefix);
    }
  }
}

std::string OpConstraintScoreType::serialize(const uci::type::OpConstraintScoreType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpConstraintScoreType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpConstraintScoreType_Names::Extern_Type_Name);
  }
  OpConstraintEnum::serialize(accessor.getConstraint(), node, OpConstraintScoreType_Names::Constraint_Name, false);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getScore(), node, OpConstraintScoreType_Names::Score_Name);
  if (accessor.hasFidelity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFidelity(), node, OpConstraintScoreType_Names::Fidelity_Name);
  }
  if (accessor.hasConfidence()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getConfidence(), node, OpConstraintScoreType_Names::Confidence_Name);
  }
  if (accessor.hasFileLocationID()) {
    FileLocationID_Type::serialize(accessor.getFileLocationID(), node, OpConstraintScoreType_Names::FileLocationID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpConstraintScoreType& OpConstraintScoreType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpConstraintScoreType>().release());
}

uci::type::OpConstraintScoreType& OpConstraintScoreType::create(const uci::type::OpConstraintScoreType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpConstraintScoreType> newAccessor{boost::make_unique<asb_uci::type::OpConstraintScoreType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpConstraintScoreType::destroy(uci::type::OpConstraintScoreType& accessor) {
  delete dynamic_cast<asb_uci::type::OpConstraintScoreType*>(&accessor);
}

} // namespace type

} // namespace uci

