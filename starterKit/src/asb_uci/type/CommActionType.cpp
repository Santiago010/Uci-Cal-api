/** @file CommActionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommActionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommCapabilityType.h"
#include "../../../include/asb_uci/type/CommConfigurationID_Type.h"
#include "../../../include/asb_uci/type/CommConfigurationStateEnum.h"
#include "../../../include/asb_uci/type/SubsystemCommandType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommActionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConfigurationID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConfigurationStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommActionType::CommActionType()
  : configurationID_Accessor{boost::make_unique<CommConfigurationID_Type>()},
    configurationState_Accessor{boost::make_unique<CommConfigurationStateEnum>()} {
}

CommActionType::~CommActionType() = default;

void CommActionType::copy(const uci::type::CommActionType& accessor) {
  copyImpl(accessor, false);
}

void CommActionType::copyImpl(const uci::type::CommActionType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::commActionType)) {
      const auto& accessorImpl = dynamic_cast<const CommActionType&>(accessor);
      setConfigurationID(*(accessorImpl.configurationID_Accessor));
      setConfigurationState(*(accessorImpl.configurationState_Accessor));
      if (accessorImpl.subsystemCommand_Accessor) {
        setSubsystemCommand(*(accessorImpl.subsystemCommand_Accessor));
      } else {
        subsystemCommand_Accessor.reset();
      }
      if (accessorImpl.commCapability_Accessor) {
        setCommCapability(*(accessorImpl.commCapability_Accessor));
      } else {
        commCapability_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CommActionType::reset() noexcept {
  configurationID_Accessor->reset();
  configurationState_Accessor->reset();
  subsystemCommand_Accessor.reset();
  commCapability_Accessor.reset();
}

const uci::type::CommConfigurationID_Type& CommActionType::getConfigurationID() const {
  return *configurationID_Accessor;
}

uci::type::CommConfigurationID_Type& CommActionType::getConfigurationID() {
  return *configurationID_Accessor;
}

uci::type::CommActionType& CommActionType::setConfigurationID(const uci::type::CommConfigurationID_Type& accessor) {
  if (&accessor != configurationID_Accessor.get()) {
    configurationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommConfigurationStateEnum& CommActionType::getConfigurationState() const {
  return *configurationState_Accessor;
}

uci::type::CommConfigurationStateEnum& CommActionType::getConfigurationState() {
  return *configurationState_Accessor;
}

uci::type::CommActionType& CommActionType::setConfigurationState(const uci::type::CommConfigurationStateEnum& accessor) {
  if (&accessor != configurationState_Accessor.get()) {
    configurationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommActionType& CommActionType::setConfigurationState(uci::type::CommConfigurationStateEnum::EnumerationItem value) {
  configurationState_Accessor->setValue(value);
  return *this;
}


uci::type::SubsystemCommandType& CommActionType::getSubsystemCommand_() const {
  if (subsystemCommand_Accessor) {
    return *subsystemCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemCommand(): An attempt was made to get an optional field that was not enabled, call hasSubsystemCommand() to determine if it is safe to call getSubsystemCommand()");
}

const uci::type::SubsystemCommandType& CommActionType::getSubsystemCommand() const {
  return getSubsystemCommand_();
}

uci::type::SubsystemCommandType& CommActionType::getSubsystemCommand() {
  return getSubsystemCommand_();
}

uci::type::CommActionType& CommActionType::setSubsystemCommand(const uci::type::SubsystemCommandType& accessor) {
  enableSubsystemCommand();
  if (&accessor != subsystemCommand_Accessor.get()) {
    subsystemCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommActionType::hasSubsystemCommand() const noexcept {
  return static_cast<bool>(subsystemCommand_Accessor);
}

uci::type::SubsystemCommandType& CommActionType::enableSubsystemCommand(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemCommandType : type};
  if ((!subsystemCommand_Accessor) || (subsystemCommand_Accessor->getAccessorType() != requestedType)) {
    subsystemCommand_Accessor = SubsystemCommandType::create(requestedType);
    if (!subsystemCommand_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemCommand(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemCommand_Accessor;
}

uci::type::CommActionType& CommActionType::clearSubsystemCommand() noexcept {
  subsystemCommand_Accessor.reset();
  return *this;
}

uci::type::CommCapabilityType& CommActionType::getCommCapability_() const {
  if (commCapability_Accessor) {
    return *commCapability_Accessor;
  }
  throw uci::base::UCIException("Error in getCommCapability(): An attempt was made to get an optional field that was not enabled, call hasCommCapability() to determine if it is safe to call getCommCapability()");
}

const uci::type::CommCapabilityType& CommActionType::getCommCapability() const {
  return getCommCapability_();
}

uci::type::CommCapabilityType& CommActionType::getCommCapability() {
  return getCommCapability_();
}

uci::type::CommActionType& CommActionType::setCommCapability(const uci::type::CommCapabilityType& accessor) {
  enableCommCapability();
  if (&accessor != commCapability_Accessor.get()) {
    commCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommActionType::hasCommCapability() const noexcept {
  return static_cast<bool>(commCapability_Accessor);
}

uci::type::CommCapabilityType& CommActionType::enableCommCapability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commCapabilityType : type};
  if ((!commCapability_Accessor) || (commCapability_Accessor->getAccessorType() != requestedType)) {
    commCapability_Accessor = CommCapabilityType::create(requestedType);
    if (!commCapability_Accessor) {
      throw uci::base::UCIException("Error in enableCommCapability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commCapability_Accessor;
}

uci::type::CommActionType& CommActionType::clearCommCapability() noexcept {
  commCapability_Accessor.reset();
  return *this;
}

std::unique_ptr<CommActionType> CommActionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commActionType : type};
  return std::unique_ptr<CommActionType>(dynamic_cast<CommActionType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CommActionType_Names {

constexpr const char* Extern_Type_Name{"CommActionType"};
constexpr const char* ConfigurationID_Name{"ConfigurationID"};
constexpr const char* ConfigurationState_Name{"ConfigurationState"};
constexpr const char* SubsystemCommand_Name{"SubsystemCommand"};
constexpr const char* CommCapability_Name{"CommCapability"};

} // namespace CommActionType_Names

void CommActionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommActionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommActionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommActionType_Names::ConfigurationID_Name) {
      CommConfigurationID_Type::deserialize(valueType.second, accessor.getConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommActionType_Names::ConfigurationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConfigurationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommActionType_Names::SubsystemCommand_Name) {
      SubsystemCommandType::deserialize(valueType.second, accessor.enableSubsystemCommand(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommActionType_Names::CommCapability_Name) {
      CommCapabilityType::deserialize(valueType.second, accessor.enableCommCapability(), nodeName, nsPrefix);
    }
  }
}

std::string CommActionType::serialize(const uci::type::CommActionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommActionType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::commActionType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommActionType_Names::Extern_Type_Name);
    }
    CommConfigurationID_Type::serialize(accessor.getConfigurationID(), node, CommActionType_Names::ConfigurationID_Name);
    CommConfigurationStateEnum::serialize(accessor.getConfigurationState(), node, CommActionType_Names::ConfigurationState_Name, false);
    if (accessor.hasSubsystemCommand()) {
      SubsystemCommandType::serialize(accessor.getSubsystemCommand(), node, CommActionType_Names::SubsystemCommand_Name);
    }
    if (accessor.hasCommCapability()) {
      CommCapabilityType::serialize(accessor.getCommCapability(), node, CommActionType_Names::CommCapability_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommActionType& CommActionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommActionType>().release());
}

uci::type::CommActionType& CommActionType::create(const uci::type::CommActionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommActionType> newAccessor{boost::make_unique<asb_uci::type::CommActionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommActionType::destroy(uci::type::CommActionType& accessor) {
  delete dynamic_cast<asb_uci::type::CommActionType*>(&accessor);
}

} // namespace type

} // namespace uci

