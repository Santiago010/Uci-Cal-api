/** @file TagAssociationTargetType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TagAssociationTargetType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AssociatedMessageType.h"
#include "../../../include/asb_uci/type/SecureStringType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssociatedMessageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecureStringType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TagAssociationTargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TagAssociationTargetType::TagAssociationTargetType() = default;

TagAssociationTargetType::~TagAssociationTargetType() = default;

void TagAssociationTargetType::copy(const uci::type::TagAssociationTargetType& accessor) {
  copyImpl(accessor, false);
}

void TagAssociationTargetType::copyImpl(const uci::type::TagAssociationTargetType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TagAssociationTargetType&>(accessor);
    if (accessorImpl.byMessage_Accessor) {
      setByMessage(*(accessorImpl.byMessage_Accessor));
    } else {
      byMessage_Accessor.reset();
    }
    if (accessorImpl.byValue_Accessor) {
      setByValue(*(accessorImpl.byValue_Accessor));
    } else {
      byValue_Accessor.reset();
    }
  }
}

void TagAssociationTargetType::reset() noexcept {
  byMessage_Accessor.reset();
  byValue_Accessor.reset();
}

uci::type::TagAssociationTargetType::TagAssociationTargetTypeChoice TagAssociationTargetType::getTagAssociationTargetTypeChoiceOrdinal() const noexcept {
  if (byMessage_Accessor) {
    return TAGASSOCIATIONTARGETTYPE_CHOICE_BYMESSAGE;
  }
  if (byValue_Accessor) {
    return TAGASSOCIATIONTARGETTYPE_CHOICE_BYVALUE;
  }
  return TAGASSOCIATIONTARGETTYPE_CHOICE_NONE;
}

uci::type::TagAssociationTargetType& TagAssociationTargetType::setTagAssociationTargetTypeChoiceOrdinal(uci::type::TagAssociationTargetType::TagAssociationTargetTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case TAGASSOCIATIONTARGETTYPE_CHOICE_BYMESSAGE:
      chooseByMessage("setTagAssociationTargetTypeChoiceOrdinal", type);
      break;
    case TAGASSOCIATIONTARGETTYPE_CHOICE_BYVALUE:
      chooseByValue("setTagAssociationTargetTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setTagAssociationTargetTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AssociatedMessageType& TagAssociationTargetType::getByMessage_() const {
  if (byMessage_Accessor) {
    return *byMessage_Accessor;
  }
  throw uci::base::UCIException("Error in getByMessage(): Unable to get ByMessage, field not selected");
}

const uci::type::AssociatedMessageType& TagAssociationTargetType::getByMessage() const {
  return getByMessage_();
}

uci::type::AssociatedMessageType& TagAssociationTargetType::getByMessage() {
  return getByMessage_();
}

uci::type::TagAssociationTargetType& TagAssociationTargetType::setByMessage(const uci::type::AssociatedMessageType& accessor) {
  chooseByMessage();
  if (&accessor != byMessage_Accessor.get()) {
    byMessage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TagAssociationTargetType::isByMessage() const noexcept {
  return static_cast<bool>(byMessage_Accessor);
}

uci::type::AssociatedMessageType& TagAssociationTargetType::chooseByMessage(const std::string& method, uci::base::accessorType::AccessorType type) {
  byValue_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::associatedMessageType : type};
  if ((!byMessage_Accessor) || (byMessage_Accessor->getAccessorType() != requestedType)) {
    byMessage_Accessor = AssociatedMessageType::create(type);
    if (!byMessage_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byMessage_Accessor;
}

uci::type::AssociatedMessageType& TagAssociationTargetType::chooseByMessage(uci::base::accessorType::AccessorType type) {
  return chooseByMessage("chooseByMessage", type);
}

uci::type::SecureStringType& TagAssociationTargetType::getByValue_() const {
  if (byValue_Accessor) {
    return *byValue_Accessor;
  }
  throw uci::base::UCIException("Error in getByValue(): Unable to get ByValue, field not selected");
}

const uci::type::SecureStringType& TagAssociationTargetType::getByValue() const {
  return getByValue_();
}

uci::type::SecureStringType& TagAssociationTargetType::getByValue() {
  return getByValue_();
}

uci::type::TagAssociationTargetType& TagAssociationTargetType::setByValue(const uci::type::SecureStringType& accessor) {
  chooseByValue();
  if (&accessor != byValue_Accessor.get()) {
    byValue_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TagAssociationTargetType::isByValue() const noexcept {
  return static_cast<bool>(byValue_Accessor);
}

uci::type::SecureStringType& TagAssociationTargetType::chooseByValue(const std::string& method, uci::base::accessorType::AccessorType type) {
  byMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::secureStringType : type};
  if ((!byValue_Accessor) || (byValue_Accessor->getAccessorType() != requestedType)) {
    byValue_Accessor = SecureStringType::create(type);
    if (!byValue_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byValue_Accessor;
}

uci::type::SecureStringType& TagAssociationTargetType::chooseByValue(uci::base::accessorType::AccessorType type) {
  return chooseByValue("chooseByValue", type);
}

std::unique_ptr<TagAssociationTargetType> TagAssociationTargetType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tagAssociationTargetType : type};
  return (requestedType == uci::type::accessorType::tagAssociationTargetType) ? boost::make_unique<TagAssociationTargetType>() : nullptr;
}

/**  */
namespace TagAssociationTargetType_Names {

constexpr const char* Extern_Type_Name{"TagAssociationTargetType"};
constexpr const char* ByMessage_Name{"ByMessage"};
constexpr const char* ByValue_Name{"ByValue"};

} // namespace TagAssociationTargetType_Names

void TagAssociationTargetType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TagAssociationTargetType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TagAssociationTargetType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TagAssociationTargetType_Names::ByMessage_Name) {
      AssociatedMessageType::deserialize(valueType.second, accessor.chooseByMessage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TagAssociationTargetType_Names::ByValue_Name) {
      SecureStringType::deserialize(valueType.second, accessor.chooseByValue(), nodeName, nsPrefix);
    }
  }
}

std::string TagAssociationTargetType::serialize(const uci::type::TagAssociationTargetType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TagAssociationTargetType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TagAssociationTargetType_Names::Extern_Type_Name);
  }
  if (accessor.isByMessage()) {
    AssociatedMessageType::serialize(accessor.getByMessage(), node, TagAssociationTargetType_Names::ByMessage_Name);
  } else if (accessor.isByValue()) {
    SecureStringType::serialize(accessor.getByValue(), node, TagAssociationTargetType_Names::ByValue_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TagAssociationTargetType& TagAssociationTargetType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TagAssociationTargetType>().release());
}

uci::type::TagAssociationTargetType& TagAssociationTargetType::create(const uci::type::TagAssociationTargetType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TagAssociationTargetType> newAccessor{boost::make_unique<asb_uci::type::TagAssociationTargetType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TagAssociationTargetType::destroy(uci::type::TagAssociationTargetType& accessor) {
  delete dynamic_cast<asb_uci::type::TagAssociationTargetType*>(&accessor);
}

} // namespace type

} // namespace uci

