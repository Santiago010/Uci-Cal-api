/** @file PO_SweepSpeedConstraintControlsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_SweepSpeedConstraintControlsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PO_ConstraintControlsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_ConstraintControlsType.h"
#include "uci/type/PO_SweepSpeedConstraintControlsType.h"
#include "uci/type/SpeedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_SweepSpeedConstraintControlsType::PO_SweepSpeedConstraintControlsType() = default;

PO_SweepSpeedConstraintControlsType::~PO_SweepSpeedConstraintControlsType() = default;

void PO_SweepSpeedConstraintControlsType::copy(const uci::type::PO_SweepSpeedConstraintControlsType& accessor) {
  copyImpl(accessor, false);
}

void PO_SweepSpeedConstraintControlsType::copyImpl(const uci::type::PO_SweepSpeedConstraintControlsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_SweepSpeedConstraintControlsType&>(accessor);
    if (accessorImpl.controls_Accessor) {
      setControls(*(accessorImpl.controls_Accessor));
    } else {
      controls_Accessor.reset();
    }
    setting_Accessor = (accessorImpl.setting_Accessor ? accessorImpl.setting_Accessor : boost::none);
  }
}

void PO_SweepSpeedConstraintControlsType::reset() noexcept {
  controls_Accessor.reset();
  setting_Accessor.reset();
}

uci::type::PO_SweepSpeedConstraintControlsType::PO_SweepSpeedConstraintControlsTypeChoice PO_SweepSpeedConstraintControlsType::getPO_SweepSpeedConstraintControlsTypeChoiceOrdinal() const noexcept {
  if (controls_Accessor) {
    return PO_SWEEPSPEEDCONSTRAINTCONTROLSTYPE_CHOICE_CONTROLS;
  }
  if (setting_Accessor) {
    return PO_SWEEPSPEEDCONSTRAINTCONTROLSTYPE_CHOICE_SETTING;
  }
  return PO_SWEEPSPEEDCONSTRAINTCONTROLSTYPE_CHOICE_NONE;
}

uci::type::PO_SweepSpeedConstraintControlsType& PO_SweepSpeedConstraintControlsType::setPO_SweepSpeedConstraintControlsTypeChoiceOrdinal(uci::type::PO_SweepSpeedConstraintControlsType::PO_SweepSpeedConstraintControlsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_SWEEPSPEEDCONSTRAINTCONTROLSTYPE_CHOICE_CONTROLS:
      chooseControls("setPO_SweepSpeedConstraintControlsTypeChoiceOrdinal", type);
      break;
    case PO_SWEEPSPEEDCONSTRAINTCONTROLSTYPE_CHOICE_SETTING:
      chooseSetting();
      break;
    default:
      throw uci::base::UCIException("Error in setPO_SweepSpeedConstraintControlsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PO_ConstraintControlsType& PO_SweepSpeedConstraintControlsType::getControls_() const {
  if (controls_Accessor) {
    return *controls_Accessor;
  }
  throw uci::base::UCIException("Error in getControls(): Unable to get Controls, field not selected");
}

const uci::type::PO_ConstraintControlsType& PO_SweepSpeedConstraintControlsType::getControls() const {
  return getControls_();
}

uci::type::PO_ConstraintControlsType& PO_SweepSpeedConstraintControlsType::getControls() {
  return getControls_();
}

uci::type::PO_SweepSpeedConstraintControlsType& PO_SweepSpeedConstraintControlsType::setControls(const uci::type::PO_ConstraintControlsType& accessor) {
  chooseControls();
  if (&accessor != controls_Accessor.get()) {
    controls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_SweepSpeedConstraintControlsType::isControls() const noexcept {
  return static_cast<bool>(controls_Accessor);
}

uci::type::PO_ConstraintControlsType& PO_SweepSpeedConstraintControlsType::chooseControls(const std::string& method, uci::base::accessorType::AccessorType type) {
  setting_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ConstraintControlsType : type};
  if ((!controls_Accessor) || (controls_Accessor->getAccessorType() != requestedType)) {
    controls_Accessor = PO_ConstraintControlsType::create(type);
    if (!controls_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controls_Accessor;
}

uci::type::PO_ConstraintControlsType& PO_SweepSpeedConstraintControlsType::chooseControls(uci::base::accessorType::AccessorType type) {
  return chooseControls("chooseControls", type);
}

uci::type::SpeedTypeValue PO_SweepSpeedConstraintControlsType::getSetting() const {
  if (setting_Accessor) {
    return *setting_Accessor;
  }
  throw uci::base::UCIException("Error in getSetting(): Unable to get Setting, field not selected");
}

uci::type::PO_SweepSpeedConstraintControlsType& PO_SweepSpeedConstraintControlsType::setSetting(uci::type::SpeedTypeValue value) {
  chooseSetting();
  setting_Accessor = value;
  return *this;
}

bool PO_SweepSpeedConstraintControlsType::isSetting() const noexcept {
  return static_cast<bool>(setting_Accessor);
}

void PO_SweepSpeedConstraintControlsType::chooseSetting() {
  controls_Accessor.reset();
  if (!setting_Accessor) {
    setting_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<PO_SweepSpeedConstraintControlsType> PO_SweepSpeedConstraintControlsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_SweepSpeedConstraintControlsType : type};
  return (requestedType == uci::type::accessorType::pO_SweepSpeedConstraintControlsType) ? boost::make_unique<PO_SweepSpeedConstraintControlsType>() : nullptr;
}

/**  */
namespace PO_SweepSpeedConstraintControlsType_Names {

constexpr const char* Extern_Type_Name{"PO_SweepSpeedConstraintControlsType"};
constexpr const char* Controls_Name{"Controls"};
constexpr const char* Setting_Name{"Setting"};

} // namespace PO_SweepSpeedConstraintControlsType_Names

void PO_SweepSpeedConstraintControlsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_SweepSpeedConstraintControlsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_SweepSpeedConstraintControlsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_SweepSpeedConstraintControlsType_Names::Controls_Name) {
      PO_ConstraintControlsType::deserialize(valueType.second, accessor.chooseControls(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_SweepSpeedConstraintControlsType_Names::Setting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSetting(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string PO_SweepSpeedConstraintControlsType::serialize(const uci::type::PO_SweepSpeedConstraintControlsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_SweepSpeedConstraintControlsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_SweepSpeedConstraintControlsType_Names::Extern_Type_Name);
  }
  if (accessor.isControls()) {
    PO_ConstraintControlsType::serialize(accessor.getControls(), node, PO_SweepSpeedConstraintControlsType_Names::Controls_Name);
  } else if (accessor.isSetting()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSetting(), node, PO_SweepSpeedConstraintControlsType_Names::Setting_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_SweepSpeedConstraintControlsType& PO_SweepSpeedConstraintControlsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_SweepSpeedConstraintControlsType>().release());
}

uci::type::PO_SweepSpeedConstraintControlsType& PO_SweepSpeedConstraintControlsType::create(const uci::type::PO_SweepSpeedConstraintControlsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_SweepSpeedConstraintControlsType> newAccessor{boost::make_unique<asb_uci::type::PO_SweepSpeedConstraintControlsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_SweepSpeedConstraintControlsType::destroy(uci::type::PO_SweepSpeedConstraintControlsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_SweepSpeedConstraintControlsType*>(&accessor);
}

} // namespace type

} // namespace uci

