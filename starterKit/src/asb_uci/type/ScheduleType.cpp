/** @file ScheduleType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ScheduleType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/WeekdayIntervalType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/WeekdayIntervalType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ScheduleType::ScheduleType() = default;

ScheduleType::~ScheduleType() = default;

void ScheduleType::copy(const uci::type::ScheduleType& accessor) {
  copyImpl(accessor, false);
}

void ScheduleType::copyImpl(const uci::type::ScheduleType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ScheduleType&>(accessor);
    if (accessorImpl.timeSpan_Accessor) {
      setTimeSpan(*(accessorImpl.timeSpan_Accessor));
    } else {
      timeSpan_Accessor.reset();
    }
    if (accessorImpl.weekdayInterval_Accessor) {
      setWeekdayInterval(*(accessorImpl.weekdayInterval_Accessor));
    } else {
      weekdayInterval_Accessor.reset();
    }
  }
}

void ScheduleType::reset() noexcept {
  timeSpan_Accessor.reset();
  weekdayInterval_Accessor.reset();
}

uci::type::ScheduleType::ScheduleTypeChoice ScheduleType::getScheduleTypeChoiceOrdinal() const noexcept {
  if (timeSpan_Accessor) {
    return SCHEDULETYPE_CHOICE_TIMESPAN;
  }
  if (weekdayInterval_Accessor) {
    return SCHEDULETYPE_CHOICE_WEEKDAYINTERVAL;
  }
  return SCHEDULETYPE_CHOICE_NONE;
}

uci::type::ScheduleType& ScheduleType::setScheduleTypeChoiceOrdinal(uci::type::ScheduleType::ScheduleTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case SCHEDULETYPE_CHOICE_TIMESPAN:
      chooseTimeSpan();
      break;
    case SCHEDULETYPE_CHOICE_WEEKDAYINTERVAL:
      chooseWeekdayInterval();
      break;
    default:
      throw uci::base::UCIException("Error in setScheduleTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ScheduleType::TimeSpan& ScheduleType::getTimeSpan_() const {
  if (timeSpan_Accessor) {
    return *timeSpan_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeSpan(): Unable to get TimeSpan, field not selected");
}

const uci::type::ScheduleType::TimeSpan& ScheduleType::getTimeSpan() const {
  return getTimeSpan_();
}

uci::type::ScheduleType::TimeSpan& ScheduleType::getTimeSpan() {
  return getTimeSpan_();
}

uci::type::ScheduleType& ScheduleType::setTimeSpan(const uci::type::ScheduleType::TimeSpan& accessor) {
  chooseTimeSpan();
  if (&accessor != timeSpan_Accessor.get()) {
    timeSpan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ScheduleType::isTimeSpan() const noexcept {
  return static_cast<bool>(timeSpan_Accessor);
}

uci::type::ScheduleType::TimeSpan& ScheduleType::chooseTimeSpan() {
  weekdayInterval_Accessor.reset();
  if (!timeSpan_Accessor) {
    timeSpan_Accessor = boost::make_unique<TimeSpan>(1, SIZE_MAX);
  }
  return *timeSpan_Accessor;
}

uci::type::ScheduleType::WeekdayInterval& ScheduleType::getWeekdayInterval_() const {
  if (weekdayInterval_Accessor) {
    return *weekdayInterval_Accessor;
  }
  throw uci::base::UCIException("Error in getWeekdayInterval(): Unable to get WeekdayInterval, field not selected");
}

const uci::type::ScheduleType::WeekdayInterval& ScheduleType::getWeekdayInterval() const {
  return getWeekdayInterval_();
}

uci::type::ScheduleType::WeekdayInterval& ScheduleType::getWeekdayInterval() {
  return getWeekdayInterval_();
}

uci::type::ScheduleType& ScheduleType::setWeekdayInterval(const uci::type::ScheduleType::WeekdayInterval& accessor) {
  chooseWeekdayInterval();
  if (&accessor != weekdayInterval_Accessor.get()) {
    weekdayInterval_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ScheduleType::isWeekdayInterval() const noexcept {
  return static_cast<bool>(weekdayInterval_Accessor);
}

uci::type::ScheduleType::WeekdayInterval& ScheduleType::chooseWeekdayInterval() {
  timeSpan_Accessor.reset();
  if (!weekdayInterval_Accessor) {
    weekdayInterval_Accessor = boost::make_unique<WeekdayInterval>(1, SIZE_MAX);
  }
  return *weekdayInterval_Accessor;
}

std::unique_ptr<ScheduleType> ScheduleType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  return (requestedType == uci::type::accessorType::scheduleType) ? boost::make_unique<ScheduleType>() : nullptr;
}

/**  */
namespace ScheduleType_Names {

constexpr const char* Extern_Type_Name{"ScheduleType"};
constexpr const char* TimeSpan_Name{"TimeSpan"};
constexpr const char* WeekdayInterval_Name{"WeekdayInterval"};

} // namespace ScheduleType_Names

void ScheduleType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ScheduleType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ScheduleType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ScheduleType_Names::TimeSpan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ScheduleType::TimeSpan& boundedList = accessor.chooseTimeSpan();
        const uci::type::ScheduleType::TimeSpan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DateTimeRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ScheduleType_Names::WeekdayInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ScheduleType::WeekdayInterval& boundedList = accessor.chooseWeekdayInterval();
        const uci::type::ScheduleType::WeekdayInterval::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::WeekdayIntervalType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ScheduleType::serialize(const uci::type::ScheduleType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ScheduleType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ScheduleType_Names::Extern_Type_Name);
  }
  if (accessor.isTimeSpan()) {
    {
      const uci::type::ScheduleType::TimeSpan& boundedList = accessor.getTimeSpan();
      for (uci::type::ScheduleType::TimeSpan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::DateTimeRangeType::serialize(boundedList.at(i), node, ScheduleType_Names::TimeSpan_Name);
      }
    }
  } else if (accessor.isWeekdayInterval()) {
    {
      const uci::type::ScheduleType::WeekdayInterval& boundedList = accessor.getWeekdayInterval();
      for (uci::type::ScheduleType::WeekdayInterval::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::WeekdayIntervalType::serialize(boundedList.at(i), node, ScheduleType_Names::WeekdayInterval_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ScheduleType& ScheduleType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ScheduleType>().release());
}

uci::type::ScheduleType& ScheduleType::create(const uci::type::ScheduleType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ScheduleType> newAccessor{boost::make_unique<asb_uci::type::ScheduleType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ScheduleType::destroy(uci::type::ScheduleType& accessor) {
  delete dynamic_cast<asb_uci::type::ScheduleType*>(&accessor);
}

} // namespace type

} // namespace uci

