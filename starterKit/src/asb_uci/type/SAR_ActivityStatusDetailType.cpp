/** @file SAR_ActivityStatusDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SAR_ActivityStatusDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ConcurrentCollectionDetailsType.h"
#include "asb_uci/type/RelativeDirectionEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConcurrentCollectionDetailsType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RelativeDirectionEnum.h"
#include "uci/type/SAR_ActivityStatusDetailType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_ActivityStatusDetailType::SAR_ActivityStatusDetailType()
  : concurrentActivity_Accessor{boost::make_unique<ConcurrentActivity>(0, SIZE_MAX)} {
}

SAR_ActivityStatusDetailType::~SAR_ActivityStatusDetailType() = default;

void SAR_ActivityStatusDetailType::copy(const uci::type::SAR_ActivityStatusDetailType& accessor) {
  copyImpl(accessor, false);
}

void SAR_ActivityStatusDetailType::copyImpl(const uci::type::SAR_ActivityStatusDetailType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SAR_ActivityStatusDetailType&>(accessor);
    if (accessorImpl.hasPercentageInFOR()) {
      setPercentageInFOR(accessorImpl.getPercentageInFOR());
    } else {
      clearPercentageInFOR();
    }
    if (accessorImpl.hasActualStartTime()) {
      setActualStartTime(accessorImpl.getActualStartTime());
    } else {
      clearActualStartTime();
    }
    if (accessorImpl.hasActualStopTime()) {
      setActualStopTime(accessorImpl.getActualStopTime());
    } else {
      clearActualStopTime();
    }
    if (accessorImpl.hasPercentCoverage()) {
      setPercentCoverage(accessorImpl.getPercentCoverage());
    } else {
      clearPercentCoverage();
    }
    if (accessorImpl.hasEntitiesReported()) {
      setEntitiesReported(accessorImpl.getEntitiesReported());
    } else {
      clearEntitiesReported();
    }
    if (accessorImpl.hasProductsProduced()) {
      setProductsProduced(accessorImpl.getProductsProduced());
    } else {
      clearProductsProduced();
    }
    if (accessorImpl.hasEstimatedERP()) {
      setEstimatedERP(accessorImpl.getEstimatedERP());
    } else {
      clearEstimatedERP();
    }
    if (accessorImpl.hasMinimumCNR()) {
      setMinimumCNR(accessorImpl.getMinimumCNR());
    } else {
      clearMinimumCNR();
    }
    if (accessorImpl.hasAchievableEllipticity()) {
      setAchievableEllipticity(accessorImpl.getAchievableEllipticity());
    } else {
      clearAchievableEllipticity();
    }
    if (accessorImpl.hasAchievableResolution()) {
      setAchievableResolution(accessorImpl.getAchievableResolution());
    } else {
      clearAchievableResolution();
    }
    setConcurrentActivity(*(accessorImpl.concurrentActivity_Accessor));
    if (accessorImpl.hasPercentOccluded()) {
      setPercentOccluded(accessorImpl.getPercentOccluded());
    } else {
      clearPercentOccluded();
    }
    if (accessorImpl.hasTimeToService()) {
      setTimeToService(accessorImpl.getTimeToService());
    } else {
      clearTimeToService();
    }
    if (accessorImpl.hasPercentRadarTimeline()) {
      setPercentRadarTimeline(accessorImpl.getPercentRadarTimeline());
    } else {
      clearPercentRadarTimeline();
    }
    if (accessorImpl.hasPercentageInFOV()) {
      setPercentageInFOV(accessorImpl.getPercentageInFOV());
    } else {
      clearPercentageInFOV();
    }
    if (accessorImpl.relativeDirectionOfTarget_Accessor) {
      setRelativeDirectionOfTarget(*(accessorImpl.relativeDirectionOfTarget_Accessor));
    } else {
      relativeDirectionOfTarget_Accessor.reset();
    }
  }
}

void SAR_ActivityStatusDetailType::reset() noexcept {
  clearPercentageInFOR();
  clearActualStartTime();
  clearActualStopTime();
  clearPercentCoverage();
  clearEntitiesReported();
  clearProductsProduced();
  clearEstimatedERP();
  clearMinimumCNR();
  clearAchievableEllipticity();
  clearAchievableResolution();
  concurrentActivity_Accessor->reset();
  clearPercentOccluded();
  clearTimeToService();
  clearPercentRadarTimeline();
  clearPercentageInFOV();
  relativeDirectionOfTarget_Accessor.reset();
}

uci::type::PercentTypeValue SAR_ActivityStatusDetailType::getPercentageInFOR() const {
  if (percentageInFOR_Accessor) {
    return *percentageInFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageInFOR(): An attempt was made to get an optional field that was not enabled, call hasPercentageInFOR() to determine if it is safe to call getPercentageInFOR()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setPercentageInFOR(uci::type::PercentTypeValue value) {
  percentageInFOR_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasPercentageInFOR() const noexcept {
  return percentageInFOR_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearPercentageInFOR() noexcept {
  percentageInFOR_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue SAR_ActivityStatusDetailType::getActualStartTime() const {
  if (actualStartTime_Accessor) {
    return *actualStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStartTime(): An attempt was made to get an optional field that was not enabled, call hasActualStartTime() to determine if it is safe to call getActualStartTime()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setActualStartTime(uci::type::DateTimeTypeValue value) {
  actualStartTime_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasActualStartTime() const noexcept {
  return actualStartTime_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearActualStartTime() noexcept {
  actualStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue SAR_ActivityStatusDetailType::getActualStopTime() const {
  if (actualStopTime_Accessor) {
    return *actualStopTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStopTime(): An attempt was made to get an optional field that was not enabled, call hasActualStopTime() to determine if it is safe to call getActualStopTime()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setActualStopTime(uci::type::DateTimeTypeValue value) {
  actualStopTime_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasActualStopTime() const noexcept {
  return actualStopTime_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearActualStopTime() noexcept {
  actualStopTime_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue SAR_ActivityStatusDetailType::getPercentCoverage() const {
  if (percentCoverage_Accessor) {
    return *percentCoverage_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentCoverage(): An attempt was made to get an optional field that was not enabled, call hasPercentCoverage() to determine if it is safe to call getPercentCoverage()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setPercentCoverage(uci::type::PercentTypeValue value) {
  percentCoverage_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasPercentCoverage() const noexcept {
  return percentCoverage_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearPercentCoverage() noexcept {
  percentCoverage_Accessor.reset();
  return *this;
}

xs::UnsignedInt SAR_ActivityStatusDetailType::getEntitiesReported() const {
  if (entitiesReported_Accessor) {
    return *entitiesReported_Accessor;
  }
  throw uci::base::UCIException("Error in getEntitiesReported(): An attempt was made to get an optional field that was not enabled, call hasEntitiesReported() to determine if it is safe to call getEntitiesReported()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setEntitiesReported(xs::UnsignedInt value) {
  entitiesReported_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasEntitiesReported() const noexcept {
  return entitiesReported_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearEntitiesReported() noexcept {
  entitiesReported_Accessor.reset();
  return *this;
}

xs::UnsignedInt SAR_ActivityStatusDetailType::getProductsProduced() const {
  if (productsProduced_Accessor) {
    return *productsProduced_Accessor;
  }
  throw uci::base::UCIException("Error in getProductsProduced(): An attempt was made to get an optional field that was not enabled, call hasProductsProduced() to determine if it is safe to call getProductsProduced()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setProductsProduced(xs::UnsignedInt value) {
  productsProduced_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasProductsProduced() const noexcept {
  return productsProduced_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearProductsProduced() noexcept {
  productsProduced_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SAR_ActivityStatusDetailType::getEstimatedERP() const {
  if (estimatedERP_Accessor) {
    return *estimatedERP_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedERP(): An attempt was made to get an optional field that was not enabled, call hasEstimatedERP() to determine if it is safe to call getEstimatedERP()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setEstimatedERP(uci::type::DecibelTypeValue value) {
  estimatedERP_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasEstimatedERP() const noexcept {
  return estimatedERP_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearEstimatedERP() noexcept {
  estimatedERP_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SAR_ActivityStatusDetailType::getMinimumCNR() const {
  if (minimumCNR_Accessor) {
    return *minimumCNR_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumCNR(): An attempt was made to get an optional field that was not enabled, call hasMinimumCNR() to determine if it is safe to call getMinimumCNR()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setMinimumCNR(uci::type::DecibelTypeValue value) {
  minimumCNR_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasMinimumCNR() const noexcept {
  return minimumCNR_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearMinimumCNR() noexcept {
  minimumCNR_Accessor.reset();
  return *this;
}

xs::Float SAR_ActivityStatusDetailType::getAchievableEllipticity() const {
  if (achievableEllipticity_Accessor) {
    return *achievableEllipticity_Accessor;
  }
  throw uci::base::UCIException("Error in getAchievableEllipticity(): An attempt was made to get an optional field that was not enabled, call hasAchievableEllipticity() to determine if it is safe to call getAchievableEllipticity()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setAchievableEllipticity(xs::Float value) {
  achievableEllipticity_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasAchievableEllipticity() const noexcept {
  return achievableEllipticity_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearAchievableEllipticity() noexcept {
  achievableEllipticity_Accessor.reset();
  return *this;
}

xs::Double SAR_ActivityStatusDetailType::getAchievableResolution() const {
  if (achievableResolution_Accessor) {
    return *achievableResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getAchievableResolution(): An attempt was made to get an optional field that was not enabled, call hasAchievableResolution() to determine if it is safe to call getAchievableResolution()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setAchievableResolution(xs::Double value) {
  achievableResolution_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasAchievableResolution() const noexcept {
  return achievableResolution_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearAchievableResolution() noexcept {
  achievableResolution_Accessor.reset();
  return *this;
}

const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& SAR_ActivityStatusDetailType::getConcurrentActivity() const {
  return *concurrentActivity_Accessor;
}

uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& SAR_ActivityStatusDetailType::getConcurrentActivity() {
  return *concurrentActivity_Accessor;
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setConcurrentActivity(const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& accessor) {
  if (&accessor != concurrentActivity_Accessor.get()) {
    concurrentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue SAR_ActivityStatusDetailType::getPercentOccluded() const {
  if (percentOccluded_Accessor) {
    return *percentOccluded_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentOccluded(): An attempt was made to get an optional field that was not enabled, call hasPercentOccluded() to determine if it is safe to call getPercentOccluded()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setPercentOccluded(uci::type::PercentTypeValue value) {
  percentOccluded_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasPercentOccluded() const noexcept {
  return percentOccluded_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearPercentOccluded() noexcept {
  percentOccluded_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue SAR_ActivityStatusDetailType::getTimeToService() const {
  if (timeToService_Accessor) {
    return *timeToService_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeToService(): An attempt was made to get an optional field that was not enabled, call hasTimeToService() to determine if it is safe to call getTimeToService()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setTimeToService(uci::type::DurationTypeValue value) {
  timeToService_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasTimeToService() const noexcept {
  return timeToService_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearTimeToService() noexcept {
  timeToService_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue SAR_ActivityStatusDetailType::getPercentRadarTimeline() const {
  if (percentRadarTimeline_Accessor) {
    return *percentRadarTimeline_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentRadarTimeline(): An attempt was made to get an optional field that was not enabled, call hasPercentRadarTimeline() to determine if it is safe to call getPercentRadarTimeline()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setPercentRadarTimeline(uci::type::PercentTypeValue value) {
  percentRadarTimeline_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasPercentRadarTimeline() const noexcept {
  return percentRadarTimeline_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearPercentRadarTimeline() noexcept {
  percentRadarTimeline_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue SAR_ActivityStatusDetailType::getPercentageInFOV() const {
  if (percentageInFOV_Accessor) {
    return *percentageInFOV_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageInFOV(): An attempt was made to get an optional field that was not enabled, call hasPercentageInFOV() to determine if it is safe to call getPercentageInFOV()");
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setPercentageInFOV(uci::type::PercentTypeValue value) {
  percentageInFOV_Accessor = value;
  return *this;
}

bool SAR_ActivityStatusDetailType::hasPercentageInFOV() const noexcept {
  return percentageInFOV_Accessor.has_value();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearPercentageInFOV() noexcept {
  percentageInFOV_Accessor.reset();
  return *this;
}

uci::type::RelativeDirectionEnum& SAR_ActivityStatusDetailType::getRelativeDirectionOfTarget_() const {
  if (relativeDirectionOfTarget_Accessor) {
    return *relativeDirectionOfTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeDirectionOfTarget(): An attempt was made to get an optional field that was not enabled, call hasRelativeDirectionOfTarget() to determine if it is safe to call getRelativeDirectionOfTarget()");
}

const uci::type::RelativeDirectionEnum& SAR_ActivityStatusDetailType::getRelativeDirectionOfTarget() const {
  return getRelativeDirectionOfTarget_();
}

uci::type::RelativeDirectionEnum& SAR_ActivityStatusDetailType::getRelativeDirectionOfTarget() {
  return getRelativeDirectionOfTarget_();
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setRelativeDirectionOfTarget(const uci::type::RelativeDirectionEnum& accessor) {
  enableRelativeDirectionOfTarget();
  if (&accessor != relativeDirectionOfTarget_Accessor.get()) {
    relativeDirectionOfTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::setRelativeDirectionOfTarget(const uci::type::RelativeDirectionEnum::EnumerationItem value) {
  enableRelativeDirectionOfTarget().setValue(value);
  return *this;
}

bool SAR_ActivityStatusDetailType::hasRelativeDirectionOfTarget() const noexcept {
  return static_cast<bool>(relativeDirectionOfTarget_Accessor);
}

uci::type::RelativeDirectionEnum& SAR_ActivityStatusDetailType::enableRelativeDirectionOfTarget(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeDirectionEnum : type};
  if ((!relativeDirectionOfTarget_Accessor) || (relativeDirectionOfTarget_Accessor->getAccessorType() != requestedType)) {
    relativeDirectionOfTarget_Accessor = RelativeDirectionEnum::create(requestedType);
    if (!relativeDirectionOfTarget_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeDirectionOfTarget(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeDirectionOfTarget_Accessor;
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::clearRelativeDirectionOfTarget() noexcept {
  relativeDirectionOfTarget_Accessor.reset();
  return *this;
}

std::unique_ptr<SAR_ActivityStatusDetailType> SAR_ActivityStatusDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_ActivityStatusDetailType : type};
  return (requestedType == uci::type::accessorType::sAR_ActivityStatusDetailType) ? boost::make_unique<SAR_ActivityStatusDetailType>() : nullptr;
}

/**  */
namespace SAR_ActivityStatusDetailType_Names {

constexpr const char* Extern_Type_Name{"SAR_ActivityStatusDetailType"};
constexpr const char* PercentageInFOR_Name{"PercentageInFOR"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualStopTime_Name{"ActualStopTime"};
constexpr const char* PercentCoverage_Name{"PercentCoverage"};
constexpr const char* EntitiesReported_Name{"EntitiesReported"};
constexpr const char* ProductsProduced_Name{"ProductsProduced"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};
constexpr const char* MinimumCNR_Name{"MinimumCNR"};
constexpr const char* AchievableEllipticity_Name{"AchievableEllipticity"};
constexpr const char* AchievableResolution_Name{"AchievableResolution"};
constexpr const char* ConcurrentActivity_Name{"ConcurrentActivity"};
constexpr const char* PercentOccluded_Name{"PercentOccluded"};
constexpr const char* TimeToService_Name{"TimeToService"};
constexpr const char* PercentRadarTimeline_Name{"PercentRadarTimeline"};
constexpr const char* PercentageInFOV_Name{"PercentageInFOV"};
constexpr const char* RelativeDirectionOfTarget_Name{"RelativeDirectionOfTarget"};

} // namespace SAR_ActivityStatusDetailType_Names

void SAR_ActivityStatusDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_ActivityStatusDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_ActivityStatusDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentageInFOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ActualStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStopTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentCoverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentCoverage(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::EntitiesReported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEntitiesReported(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ProductsProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductsProduced(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::MinimumCNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumCNR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::AchievableEllipticity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAchievableEllipticity(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::AchievableResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAchievableResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ConcurrentActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
        const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ConcurrentCollectionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentOccluded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentOccluded(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::TimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeToService(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentRadarTimeline_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentRadarTimeline(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentageInFOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOV(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::RelativeDirectionOfTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRelativeDirectionOfTarget().setValueFromName(*value);
      }
    }
  }
}

std::string SAR_ActivityStatusDetailType::serialize(const uci::type::SAR_ActivityStatusDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_ActivityStatusDetailType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_ActivityStatusDetailType_Names::Extern_Type_Name);
  }
  if (accessor.hasPercentageInFOR()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOR(), node, SAR_ActivityStatusDetailType_Names::PercentageInFOR_Name);
  }
  if (accessor.hasActualStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, SAR_ActivityStatusDetailType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualStopTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStopTime(), node, SAR_ActivityStatusDetailType_Names::ActualStopTime_Name);
  }
  if (accessor.hasPercentCoverage()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentCoverage(), node, SAR_ActivityStatusDetailType_Names::PercentCoverage_Name);
  }
  if (accessor.hasEntitiesReported()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEntitiesReported(), node, SAR_ActivityStatusDetailType_Names::EntitiesReported_Name);
  }
  if (accessor.hasProductsProduced()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductsProduced(), node, SAR_ActivityStatusDetailType_Names::ProductsProduced_Name);
  }
  if (accessor.hasEstimatedERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, SAR_ActivityStatusDetailType_Names::EstimatedERP_Name);
  }
  if (accessor.hasMinimumCNR()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumCNR(), node, SAR_ActivityStatusDetailType_Names::MinimumCNR_Name);
  }
  if (accessor.hasAchievableEllipticity()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getAchievableEllipticity(), node, SAR_ActivityStatusDetailType_Names::AchievableEllipticity_Name);
  }
  if (accessor.hasAchievableResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAchievableResolution(), node, SAR_ActivityStatusDetailType_Names::AchievableResolution_Name);
  }
  {
    const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
    for (uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ConcurrentCollectionDetailsType::serialize(boundedList.at(i), node, SAR_ActivityStatusDetailType_Names::ConcurrentActivity_Name);
    }
  }
  if (accessor.hasPercentOccluded()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentOccluded(), node, SAR_ActivityStatusDetailType_Names::PercentOccluded_Name);
  }
  if (accessor.hasTimeToService()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeToService(), node, SAR_ActivityStatusDetailType_Names::TimeToService_Name);
  }
  if (accessor.hasPercentRadarTimeline()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentRadarTimeline(), node, SAR_ActivityStatusDetailType_Names::PercentRadarTimeline_Name);
  }
  if (accessor.hasPercentageInFOV()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOV(), node, SAR_ActivityStatusDetailType_Names::PercentageInFOV_Name);
  }
  if (accessor.hasRelativeDirectionOfTarget()) {
    RelativeDirectionEnum::serialize(accessor.getRelativeDirectionOfTarget(), node, SAR_ActivityStatusDetailType_Names::RelativeDirectionOfTarget_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_ActivityStatusDetailType>().release());
}

uci::type::SAR_ActivityStatusDetailType& SAR_ActivityStatusDetailType::create(const uci::type::SAR_ActivityStatusDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_ActivityStatusDetailType> newAccessor{boost::make_unique<asb_uci::type::SAR_ActivityStatusDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_ActivityStatusDetailType::destroy(uci::type::SAR_ActivityStatusDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_ActivityStatusDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

