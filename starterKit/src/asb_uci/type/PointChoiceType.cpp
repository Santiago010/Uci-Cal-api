/** @file PointChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PointChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Point2D_RelativeType.h"
#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Point2D_RelativeType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/PointChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PointChoiceType::PointChoiceType() = default;

PointChoiceType::~PointChoiceType() = default;

void PointChoiceType::copy(const uci::type::PointChoiceType& accessor) {
  copyImpl(accessor, false);
}

void PointChoiceType::copyImpl(const uci::type::PointChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PointChoiceType&>(accessor);
    if (accessorImpl.absolutePoint_Accessor) {
      setAbsolutePoint(*(accessorImpl.absolutePoint_Accessor));
    } else {
      absolutePoint_Accessor.reset();
    }
    if (accessorImpl.relativePoint_Accessor) {
      setRelativePoint(*(accessorImpl.relativePoint_Accessor));
    } else {
      relativePoint_Accessor.reset();
    }
  }
}

void PointChoiceType::reset() noexcept {
  absolutePoint_Accessor.reset();
  relativePoint_Accessor.reset();
}

uci::type::PointChoiceType::PointChoiceTypeChoice PointChoiceType::getPointChoiceTypeChoiceOrdinal() const noexcept {
  if (absolutePoint_Accessor) {
    return POINTCHOICETYPE_CHOICE_ABSOLUTEPOINT;
  }
  if (relativePoint_Accessor) {
    return POINTCHOICETYPE_CHOICE_RELATIVEPOINT;
  }
  return POINTCHOICETYPE_CHOICE_NONE;
}

uci::type::PointChoiceType& PointChoiceType::setPointChoiceTypeChoiceOrdinal(uci::type::PointChoiceType::PointChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case POINTCHOICETYPE_CHOICE_ABSOLUTEPOINT:
      chooseAbsolutePoint("setPointChoiceTypeChoiceOrdinal", type);
      break;
    case POINTCHOICETYPE_CHOICE_RELATIVEPOINT:
      chooseRelativePoint("setPointChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPointChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::Point2D_Type& PointChoiceType::getAbsolutePoint_() const {
  if (absolutePoint_Accessor) {
    return *absolutePoint_Accessor;
  }
  throw uci::base::UCIException("Error in getAbsolutePoint(): Unable to get AbsolutePoint, field not selected");
}

const uci::type::Point2D_Type& PointChoiceType::getAbsolutePoint() const {
  return getAbsolutePoint_();
}

uci::type::Point2D_Type& PointChoiceType::getAbsolutePoint() {
  return getAbsolutePoint_();
}

uci::type::PointChoiceType& PointChoiceType::setAbsolutePoint(const uci::type::Point2D_Type& accessor) {
  chooseAbsolutePoint("setAbsolutePoint", accessor.getAccessorType());
  if (&accessor != absolutePoint_Accessor.get()) {
    absolutePoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PointChoiceType::isAbsolutePoint() const noexcept {
  return static_cast<bool>(absolutePoint_Accessor);
}

uci::type::Point2D_Type& PointChoiceType::chooseAbsolutePoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  relativePoint_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!absolutePoint_Accessor) || (absolutePoint_Accessor->getAccessorType() != requestedType)) {
    absolutePoint_Accessor = Point2D_Type::create(type);
    if (!absolutePoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *absolutePoint_Accessor;
}

uci::type::Point2D_Type& PointChoiceType::chooseAbsolutePoint(uci::base::accessorType::AccessorType type) {
  return chooseAbsolutePoint("chooseAbsolutePoint", type);
}

uci::type::Point2D_RelativeType& PointChoiceType::getRelativePoint_() const {
  if (relativePoint_Accessor) {
    return *relativePoint_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativePoint(): Unable to get RelativePoint, field not selected");
}

const uci::type::Point2D_RelativeType& PointChoiceType::getRelativePoint() const {
  return getRelativePoint_();
}

uci::type::Point2D_RelativeType& PointChoiceType::getRelativePoint() {
  return getRelativePoint_();
}

uci::type::PointChoiceType& PointChoiceType::setRelativePoint(const uci::type::Point2D_RelativeType& accessor) {
  chooseRelativePoint();
  if (&accessor != relativePoint_Accessor.get()) {
    relativePoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PointChoiceType::isRelativePoint() const noexcept {
  return static_cast<bool>(relativePoint_Accessor);
}

uci::type::Point2D_RelativeType& PointChoiceType::chooseRelativePoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  absolutePoint_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_RelativeType : type};
  if ((!relativePoint_Accessor) || (relativePoint_Accessor->getAccessorType() != requestedType)) {
    relativePoint_Accessor = Point2D_RelativeType::create(type);
    if (!relativePoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativePoint_Accessor;
}

uci::type::Point2D_RelativeType& PointChoiceType::chooseRelativePoint(uci::base::accessorType::AccessorType type) {
  return chooseRelativePoint("chooseRelativePoint", type);
}

std::unique_ptr<PointChoiceType> PointChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pointChoiceType : type};
  return (requestedType == uci::type::accessorType::pointChoiceType) ? boost::make_unique<PointChoiceType>() : nullptr;
}

/**  */
namespace PointChoiceType_Names {

constexpr const char* Extern_Type_Name{"PointChoiceType"};
constexpr const char* AbsolutePoint_Name{"AbsolutePoint"};
constexpr const char* RelativePoint_Name{"RelativePoint"};

} // namespace PointChoiceType_Names

void PointChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PointChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PointChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PointChoiceType_Names::AbsolutePoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAbsolutePoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PointChoiceType_Names::RelativePoint_Name) {
      Point2D_RelativeType::deserialize(valueType.second, accessor.chooseRelativePoint(), nodeName, nsPrefix);
    }
  }
}

std::string PointChoiceType::serialize(const uci::type::PointChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PointChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PointChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isAbsolutePoint()) {
    Point2D_Type::serialize(accessor.getAbsolutePoint(), node, PointChoiceType_Names::AbsolutePoint_Name);
  } else if (accessor.isRelativePoint()) {
    Point2D_RelativeType::serialize(accessor.getRelativePoint(), node, PointChoiceType_Names::RelativePoint_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PointChoiceType& PointChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PointChoiceType>().release());
}

uci::type::PointChoiceType& PointChoiceType::create(const uci::type::PointChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PointChoiceType> newAccessor{boost::make_unique<asb_uci::type::PointChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PointChoiceType::destroy(uci::type::PointChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::PointChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

