/** @file StateCovarianceNED_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StateCovarianceNED_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AccelerationAccelerationCovarianceType.h"
#include "../../../include/asb_uci/type/PositionAccelerationCovarianceType.h"
#include "../../../include/asb_uci/type/PositionAndVelocityCovarianceType.h"
#include "../../../include/asb_uci/type/VelocityAccelerationCovarianceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccelerationAccelerationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionAccelerationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StateCovarianceNED_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VelocityAccelerationCovarianceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StateCovarianceNED_Type::StateCovarianceNED_Type() = default;

StateCovarianceNED_Type::~StateCovarianceNED_Type() = default;

void StateCovarianceNED_Type::copy(const uci::type::StateCovarianceNED_Type& accessor) {
  copyImpl(accessor, false);
}

void StateCovarianceNED_Type::copyImpl(const uci::type::StateCovarianceNED_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    PositionAndVelocityCovarianceType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const StateCovarianceNED_Type&>(accessor);
    if (accessorImpl.accelerationAcceleration_Accessor) {
      setAccelerationAcceleration(*(accessorImpl.accelerationAcceleration_Accessor));
    } else {
      accelerationAcceleration_Accessor.reset();
    }
    if (accessorImpl.positionAcceleration_Accessor) {
      setPositionAcceleration(*(accessorImpl.positionAcceleration_Accessor));
    } else {
      positionAcceleration_Accessor.reset();
    }
    if (accessorImpl.velocityAcceleration_Accessor) {
      setVelocityAcceleration(*(accessorImpl.velocityAcceleration_Accessor));
    } else {
      velocityAcceleration_Accessor.reset();
    }
  }
}

void StateCovarianceNED_Type::reset() noexcept {
  PositionAndVelocityCovarianceType::reset();
  accelerationAcceleration_Accessor.reset();
  positionAcceleration_Accessor.reset();
  velocityAcceleration_Accessor.reset();
}

uci::type::AccelerationAccelerationCovarianceType& StateCovarianceNED_Type::getAccelerationAcceleration_() const {
  if (accelerationAcceleration_Accessor) {
    return *accelerationAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getAccelerationAcceleration(): An attempt was made to get an optional field that was not enabled, call hasAccelerationAcceleration() to determine if it is safe to call getAccelerationAcceleration()");
}

const uci::type::AccelerationAccelerationCovarianceType& StateCovarianceNED_Type::getAccelerationAcceleration() const {
  return getAccelerationAcceleration_();
}

uci::type::AccelerationAccelerationCovarianceType& StateCovarianceNED_Type::getAccelerationAcceleration() {
  return getAccelerationAcceleration_();
}

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::setAccelerationAcceleration(const uci::type::AccelerationAccelerationCovarianceType& accessor) {
  enableAccelerationAcceleration();
  if (&accessor != accelerationAcceleration_Accessor.get()) {
    accelerationAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StateCovarianceNED_Type::hasAccelerationAcceleration() const noexcept {
  return static_cast<bool>(accelerationAcceleration_Accessor);
}

uci::type::AccelerationAccelerationCovarianceType& StateCovarianceNED_Type::enableAccelerationAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accelerationAccelerationCovarianceType : type};
  if ((!accelerationAcceleration_Accessor) || (accelerationAcceleration_Accessor->getAccessorType() != requestedType)) {
    accelerationAcceleration_Accessor = AccelerationAccelerationCovarianceType::create(requestedType);
    if (!accelerationAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enableAccelerationAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *accelerationAcceleration_Accessor;
}

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::clearAccelerationAcceleration() noexcept {
  accelerationAcceleration_Accessor.reset();
  return *this;
}

uci::type::PositionAccelerationCovarianceType& StateCovarianceNED_Type::getPositionAcceleration_() const {
  if (positionAcceleration_Accessor) {
    return *positionAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionAcceleration(): An attempt was made to get an optional field that was not enabled, call hasPositionAcceleration() to determine if it is safe to call getPositionAcceleration()");
}

const uci::type::PositionAccelerationCovarianceType& StateCovarianceNED_Type::getPositionAcceleration() const {
  return getPositionAcceleration_();
}

uci::type::PositionAccelerationCovarianceType& StateCovarianceNED_Type::getPositionAcceleration() {
  return getPositionAcceleration_();
}

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::setPositionAcceleration(const uci::type::PositionAccelerationCovarianceType& accessor) {
  enablePositionAcceleration();
  if (&accessor != positionAcceleration_Accessor.get()) {
    positionAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StateCovarianceNED_Type::hasPositionAcceleration() const noexcept {
  return static_cast<bool>(positionAcceleration_Accessor);
}

uci::type::PositionAccelerationCovarianceType& StateCovarianceNED_Type::enablePositionAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionAccelerationCovarianceType : type};
  if ((!positionAcceleration_Accessor) || (positionAcceleration_Accessor->getAccessorType() != requestedType)) {
    positionAcceleration_Accessor = PositionAccelerationCovarianceType::create(requestedType);
    if (!positionAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enablePositionAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionAcceleration_Accessor;
}

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::clearPositionAcceleration() noexcept {
  positionAcceleration_Accessor.reset();
  return *this;
}

uci::type::VelocityAccelerationCovarianceType& StateCovarianceNED_Type::getVelocityAcceleration_() const {
  if (velocityAcceleration_Accessor) {
    return *velocityAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityAcceleration(): An attempt was made to get an optional field that was not enabled, call hasVelocityAcceleration() to determine if it is safe to call getVelocityAcceleration()");
}

const uci::type::VelocityAccelerationCovarianceType& StateCovarianceNED_Type::getVelocityAcceleration() const {
  return getVelocityAcceleration_();
}

uci::type::VelocityAccelerationCovarianceType& StateCovarianceNED_Type::getVelocityAcceleration() {
  return getVelocityAcceleration_();
}

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::setVelocityAcceleration(const uci::type::VelocityAccelerationCovarianceType& accessor) {
  enableVelocityAcceleration();
  if (&accessor != velocityAcceleration_Accessor.get()) {
    velocityAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StateCovarianceNED_Type::hasVelocityAcceleration() const noexcept {
  return static_cast<bool>(velocityAcceleration_Accessor);
}

uci::type::VelocityAccelerationCovarianceType& StateCovarianceNED_Type::enableVelocityAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocityAccelerationCovarianceType : type};
  if ((!velocityAcceleration_Accessor) || (velocityAcceleration_Accessor->getAccessorType() != requestedType)) {
    velocityAcceleration_Accessor = VelocityAccelerationCovarianceType::create(requestedType);
    if (!velocityAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityAcceleration_Accessor;
}

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::clearVelocityAcceleration() noexcept {
  velocityAcceleration_Accessor.reset();
  return *this;
}

std::unique_ptr<StateCovarianceNED_Type> StateCovarianceNED_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::stateCovarianceNED_Type : type};
  return (requestedType == uci::type::accessorType::stateCovarianceNED_Type) ? boost::make_unique<StateCovarianceNED_Type>() : nullptr;
}

/**  */
namespace StateCovarianceNED_Type_Names {

constexpr const char* Extern_Type_Name{"StateCovarianceNED_Type"};
constexpr const char* AccelerationAcceleration_Name{"AccelerationAcceleration"};
constexpr const char* PositionAcceleration_Name{"PositionAcceleration"};
constexpr const char* VelocityAcceleration_Name{"VelocityAcceleration"};

} // namespace StateCovarianceNED_Type_Names

void StateCovarianceNED_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::StateCovarianceNED_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StateCovarianceNED_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StateCovarianceNED_Type_Names::AccelerationAcceleration_Name) {
      AccelerationAccelerationCovarianceType::deserialize(valueType.second, accessor.enableAccelerationAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StateCovarianceNED_Type_Names::PositionAcceleration_Name) {
      PositionAccelerationCovarianceType::deserialize(valueType.second, accessor.enablePositionAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StateCovarianceNED_Type_Names::VelocityAcceleration_Name) {
      VelocityAccelerationCovarianceType::deserialize(valueType.second, accessor.enableVelocityAcceleration(), nodeName, nsPrefix);
    }
  }
  PositionAndVelocityCovarianceType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string StateCovarianceNED_Type::serialize(const uci::type::StateCovarianceNED_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StateCovarianceNED_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StateCovarianceNED_Type_Names::Extern_Type_Name);
  }
  PositionAndVelocityCovarianceType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasAccelerationAcceleration()) {
    AccelerationAccelerationCovarianceType::serialize(accessor.getAccelerationAcceleration(), node, StateCovarianceNED_Type_Names::AccelerationAcceleration_Name);
  }
  if (accessor.hasPositionAcceleration()) {
    PositionAccelerationCovarianceType::serialize(accessor.getPositionAcceleration(), node, StateCovarianceNED_Type_Names::PositionAcceleration_Name);
  }
  if (accessor.hasVelocityAcceleration()) {
    VelocityAccelerationCovarianceType::serialize(accessor.getVelocityAcceleration(), node, StateCovarianceNED_Type_Names::VelocityAcceleration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StateCovarianceNED_Type>().release());
}

uci::type::StateCovarianceNED_Type& StateCovarianceNED_Type::create(const uci::type::StateCovarianceNED_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StateCovarianceNED_Type> newAccessor{boost::make_unique<asb_uci::type::StateCovarianceNED_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StateCovarianceNED_Type::destroy(uci::type::StateCovarianceNED_Type& accessor) {
  delete dynamic_cast<asb_uci::type::StateCovarianceNED_Type*>(&accessor);
}

} // namespace type

} // namespace uci

