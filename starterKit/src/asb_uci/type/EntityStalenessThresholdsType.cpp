/** @file EntityStalenessThresholdsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityStalenessThresholdsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ScheduleType.h"
#include "../../../include/asb_uci/type/StalenessDomainMobilityType.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityStalenessThresholdsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ScheduleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StalenessDomainMobilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityStalenessThresholdsType::EntityStalenessThresholdsType() = default;

EntityStalenessThresholdsType::~EntityStalenessThresholdsType() = default;

void EntityStalenessThresholdsType::copy(const uci::type::EntityStalenessThresholdsType& accessor) {
  copyImpl(accessor, false);
}

void EntityStalenessThresholdsType::copyImpl(const uci::type::EntityStalenessThresholdsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityStalenessThresholdsType&>(accessor);
    if (accessorImpl.hasObservedEntityThreshold()) {
      setObservedEntityThreshold(accessorImpl.getObservedEntityThreshold());
    } else {
      clearObservedEntityThreshold();
    }
    if (accessorImpl.hasTrackedEntityThreshold()) {
      setTrackedEntityThreshold(accessorImpl.getTrackedEntityThreshold());
    } else {
      clearTrackedEntityThreshold();
    }
    if (accessorImpl.hasCorrelatedEntityThreshold()) {
      setCorrelatedEntityThreshold(accessorImpl.getCorrelatedEntityThreshold());
    } else {
      clearCorrelatedEntityThreshold();
    }
    if (accessorImpl.applicableZone_Accessor) {
      setApplicableZone(*(accessorImpl.applicableZone_Accessor));
    } else {
      applicableZone_Accessor.reset();
    }
    if (accessorImpl.schedule_Accessor) {
      setSchedule(*(accessorImpl.schedule_Accessor));
    } else {
      schedule_Accessor.reset();
    }
    if (accessorImpl.stalenessSpecificType_Accessor) {
      setStalenessSpecificType(*(accessorImpl.stalenessSpecificType_Accessor));
    } else {
      stalenessSpecificType_Accessor.reset();
    }
  }
}

void EntityStalenessThresholdsType::reset() noexcept {
  clearObservedEntityThreshold();
  clearTrackedEntityThreshold();
  clearCorrelatedEntityThreshold();
  applicableZone_Accessor.reset();
  schedule_Accessor.reset();
  stalenessSpecificType_Accessor.reset();
}

uci::type::DurationTypeValue EntityStalenessThresholdsType::getObservedEntityThreshold() const {
  if (observedEntityThreshold_Accessor) {
    return *observedEntityThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getObservedEntityThreshold(): An attempt was made to get an optional field that was not enabled, call hasObservedEntityThreshold() to determine if it is safe to call getObservedEntityThreshold()");
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::setObservedEntityThreshold(uci::type::DurationTypeValue value) {
  observedEntityThreshold_Accessor = value;
  return *this;
}

bool EntityStalenessThresholdsType::hasObservedEntityThreshold() const noexcept {
  return observedEntityThreshold_Accessor.has_value();
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::clearObservedEntityThreshold() noexcept {
  observedEntityThreshold_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue EntityStalenessThresholdsType::getTrackedEntityThreshold() const {
  if (trackedEntityThreshold_Accessor) {
    return *trackedEntityThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackedEntityThreshold(): An attempt was made to get an optional field that was not enabled, call hasTrackedEntityThreshold() to determine if it is safe to call getTrackedEntityThreshold()");
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::setTrackedEntityThreshold(uci::type::DurationTypeValue value) {
  trackedEntityThreshold_Accessor = value;
  return *this;
}

bool EntityStalenessThresholdsType::hasTrackedEntityThreshold() const noexcept {
  return trackedEntityThreshold_Accessor.has_value();
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::clearTrackedEntityThreshold() noexcept {
  trackedEntityThreshold_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue EntityStalenessThresholdsType::getCorrelatedEntityThreshold() const {
  if (correlatedEntityThreshold_Accessor) {
    return *correlatedEntityThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getCorrelatedEntityThreshold(): An attempt was made to get an optional field that was not enabled, call hasCorrelatedEntityThreshold() to determine if it is safe to call getCorrelatedEntityThreshold()");
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::setCorrelatedEntityThreshold(uci::type::DurationTypeValue value) {
  correlatedEntityThreshold_Accessor = value;
  return *this;
}

bool EntityStalenessThresholdsType::hasCorrelatedEntityThreshold() const noexcept {
  return correlatedEntityThreshold_Accessor.has_value();
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::clearCorrelatedEntityThreshold() noexcept {
  correlatedEntityThreshold_Accessor.reset();
  return *this;
}

uci::type::ZoneType& EntityStalenessThresholdsType::getApplicableZone_() const {
  if (applicableZone_Accessor) {
    return *applicableZone_Accessor;
  }
  throw uci::base::UCIException("Error in getApplicableZone(): An attempt was made to get an optional field that was not enabled, call hasApplicableZone() to determine if it is safe to call getApplicableZone()");
}

const uci::type::ZoneType& EntityStalenessThresholdsType::getApplicableZone() const {
  return getApplicableZone_();
}

uci::type::ZoneType& EntityStalenessThresholdsType::getApplicableZone() {
  return getApplicableZone_();
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::setApplicableZone(const uci::type::ZoneType& accessor) {
  enableApplicableZone(accessor.getAccessorType());
  if (&accessor != applicableZone_Accessor.get()) {
    applicableZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityStalenessThresholdsType::hasApplicableZone() const noexcept {
  return static_cast<bool>(applicableZone_Accessor);
}

uci::type::ZoneType& EntityStalenessThresholdsType::enableApplicableZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!applicableZone_Accessor) || (applicableZone_Accessor->getAccessorType() != requestedType)) {
    applicableZone_Accessor = ZoneType::create(requestedType);
    if (!applicableZone_Accessor) {
      throw uci::base::UCIException("Error in enableApplicableZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *applicableZone_Accessor;
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::clearApplicableZone() noexcept {
  applicableZone_Accessor.reset();
  return *this;
}

uci::type::ScheduleType& EntityStalenessThresholdsType::getSchedule_() const {
  if (schedule_Accessor) {
    return *schedule_Accessor;
  }
  throw uci::base::UCIException("Error in getSchedule(): An attempt was made to get an optional field that was not enabled, call hasSchedule() to determine if it is safe to call getSchedule()");
}

const uci::type::ScheduleType& EntityStalenessThresholdsType::getSchedule() const {
  return getSchedule_();
}

uci::type::ScheduleType& EntityStalenessThresholdsType::getSchedule() {
  return getSchedule_();
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::setSchedule(const uci::type::ScheduleType& accessor) {
  enableSchedule();
  if (&accessor != schedule_Accessor.get()) {
    schedule_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityStalenessThresholdsType::hasSchedule() const noexcept {
  return static_cast<bool>(schedule_Accessor);
}

uci::type::ScheduleType& EntityStalenessThresholdsType::enableSchedule(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  if ((!schedule_Accessor) || (schedule_Accessor->getAccessorType() != requestedType)) {
    schedule_Accessor = ScheduleType::create(requestedType);
    if (!schedule_Accessor) {
      throw uci::base::UCIException("Error in enableSchedule(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *schedule_Accessor;
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::clearSchedule() noexcept {
  schedule_Accessor.reset();
  return *this;
}

uci::type::StalenessDomainMobilityType& EntityStalenessThresholdsType::getStalenessSpecificType_() const {
  if (stalenessSpecificType_Accessor) {
    return *stalenessSpecificType_Accessor;
  }
  throw uci::base::UCIException("Error in getStalenessSpecificType(): An attempt was made to get an optional field that was not enabled, call hasStalenessSpecificType() to determine if it is safe to call getStalenessSpecificType()");
}

const uci::type::StalenessDomainMobilityType& EntityStalenessThresholdsType::getStalenessSpecificType() const {
  return getStalenessSpecificType_();
}

uci::type::StalenessDomainMobilityType& EntityStalenessThresholdsType::getStalenessSpecificType() {
  return getStalenessSpecificType_();
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::setStalenessSpecificType(const uci::type::StalenessDomainMobilityType& accessor) {
  enableStalenessSpecificType();
  if (&accessor != stalenessSpecificType_Accessor.get()) {
    stalenessSpecificType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityStalenessThresholdsType::hasStalenessSpecificType() const noexcept {
  return static_cast<bool>(stalenessSpecificType_Accessor);
}

uci::type::StalenessDomainMobilityType& EntityStalenessThresholdsType::enableStalenessSpecificType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::stalenessDomainMobilityType : type};
  if ((!stalenessSpecificType_Accessor) || (stalenessSpecificType_Accessor->getAccessorType() != requestedType)) {
    stalenessSpecificType_Accessor = StalenessDomainMobilityType::create(requestedType);
    if (!stalenessSpecificType_Accessor) {
      throw uci::base::UCIException("Error in enableStalenessSpecificType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stalenessSpecificType_Accessor;
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::clearStalenessSpecificType() noexcept {
  stalenessSpecificType_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityStalenessThresholdsType> EntityStalenessThresholdsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityStalenessThresholdsType : type};
  return (requestedType == uci::type::accessorType::entityStalenessThresholdsType) ? boost::make_unique<EntityStalenessThresholdsType>() : nullptr;
}

/**  */
namespace EntityStalenessThresholdsType_Names {

constexpr const char* Extern_Type_Name{"EntityStalenessThresholdsType"};
constexpr const char* ObservedEntityThreshold_Name{"ObservedEntityThreshold"};
constexpr const char* TrackedEntityThreshold_Name{"TrackedEntityThreshold"};
constexpr const char* CorrelatedEntityThreshold_Name{"CorrelatedEntityThreshold"};
constexpr const char* ApplicableZone_Name{"ApplicableZone"};
constexpr const char* Schedule_Name{"Schedule"};
constexpr const char* StalenessSpecificType_Name{"StalenessSpecificType"};

} // namespace EntityStalenessThresholdsType_Names

void EntityStalenessThresholdsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityStalenessThresholdsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityStalenessThresholdsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityStalenessThresholdsType_Names::ObservedEntityThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setObservedEntityThreshold(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EntityStalenessThresholdsType_Names::TrackedEntityThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrackedEntityThreshold(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EntityStalenessThresholdsType_Names::CorrelatedEntityThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCorrelatedEntityThreshold(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EntityStalenessThresholdsType_Names::ApplicableZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableApplicableZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityStalenessThresholdsType_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityStalenessThresholdsType_Names::StalenessSpecificType_Name) {
      StalenessDomainMobilityType::deserialize(valueType.second, accessor.enableStalenessSpecificType(), nodeName, nsPrefix);
    }
  }
}

std::string EntityStalenessThresholdsType::serialize(const uci::type::EntityStalenessThresholdsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityStalenessThresholdsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityStalenessThresholdsType_Names::Extern_Type_Name);
  }
  if (accessor.hasObservedEntityThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getObservedEntityThreshold(), node, EntityStalenessThresholdsType_Names::ObservedEntityThreshold_Name);
  }
  if (accessor.hasTrackedEntityThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTrackedEntityThreshold(), node, EntityStalenessThresholdsType_Names::TrackedEntityThreshold_Name);
  }
  if (accessor.hasCorrelatedEntityThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getCorrelatedEntityThreshold(), node, EntityStalenessThresholdsType_Names::CorrelatedEntityThreshold_Name);
  }
  if (accessor.hasApplicableZone()) {
    ZoneType::serialize(accessor.getApplicableZone(), node, EntityStalenessThresholdsType_Names::ApplicableZone_Name);
  }
  if (accessor.hasSchedule()) {
    ScheduleType::serialize(accessor.getSchedule(), node, EntityStalenessThresholdsType_Names::Schedule_Name);
  }
  if (accessor.hasStalenessSpecificType()) {
    StalenessDomainMobilityType::serialize(accessor.getStalenessSpecificType(), node, EntityStalenessThresholdsType_Names::StalenessSpecificType_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityStalenessThresholdsType>().release());
}

uci::type::EntityStalenessThresholdsType& EntityStalenessThresholdsType::create(const uci::type::EntityStalenessThresholdsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityStalenessThresholdsType> newAccessor{boost::make_unique<asb_uci::type::EntityStalenessThresholdsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityStalenessThresholdsType::destroy(uci::type::EntityStalenessThresholdsType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityStalenessThresholdsType*>(&accessor);
}

} // namespace type

} // namespace uci

