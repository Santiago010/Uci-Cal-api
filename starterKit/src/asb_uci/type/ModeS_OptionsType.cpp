/** @file ModeS_OptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ModeS_OptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IFF_ModeS_SupportEnum.h"
#include "asb_uci/type/MaxPOR_Enum.h"
#include "asb_uci/type/ModeS_InterrogatorAddressType.h"
#include "asb_uci/type/SpecificBDS_RegistersType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IFF_ModeS_SupportEnum.h"
#include "uci/type/MaxPOR_Enum.h"
#include "uci/type/ModeS_InterrogatorAddressType.h"
#include "uci/type/ModeS_OptionsType.h"
#include "uci/type/SpecificBDS_RegistersType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ModeS_OptionsType::ModeS_OptionsType()
  : modeS_InterrogatorAddress_Accessor{boost::make_unique<ModeS_InterrogatorAddressType>()},
    modeS_Type_Accessor{boost::make_unique<IFF_ModeS_SupportEnum>()},
    maxPOR_Accessor{boost::make_unique<MaxPOR_Enum>()} {
}

ModeS_OptionsType::~ModeS_OptionsType() = default;

void ModeS_OptionsType::copy(const uci::type::ModeS_OptionsType& accessor) {
  copyImpl(accessor, false);
}

void ModeS_OptionsType::copyImpl(const uci::type::ModeS_OptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ModeS_OptionsType&>(accessor);
    setModeS_InterrogatorAddress(*(accessorImpl.modeS_InterrogatorAddress_Accessor));
    setShortP4Enable(accessorImpl.shortP4Enable_Accessor);
    setModeS_Type(*(accessorImpl.modeS_Type_Accessor));
    if (accessorImpl.specificBDS_Registers_Accessor) {
      setSpecificBDS_Registers(*(accessorImpl.specificBDS_Registers_Accessor));
    } else {
      specificBDS_Registers_Accessor.reset();
    }
    setAllCallEnable(accessorImpl.allCallEnable_Accessor);
    setLockoutEnable(accessorImpl.lockoutEnable_Accessor);
    setLockoutOverrideEnable(accessorImpl.lockoutOverrideEnable_Accessor);
    setMixedModeLockoutEnable(accessorImpl.mixedModeLockoutEnable_Accessor);
    setMaxPOR(*(accessorImpl.maxPOR_Accessor));
  }
}

void ModeS_OptionsType::reset() noexcept {
  modeS_InterrogatorAddress_Accessor->reset();
  shortP4Enable_Accessor = false;
  modeS_Type_Accessor->reset();
  specificBDS_Registers_Accessor.reset();
  allCallEnable_Accessor = false;
  lockoutEnable_Accessor = false;
  lockoutOverrideEnable_Accessor = false;
  mixedModeLockoutEnable_Accessor = false;
  maxPOR_Accessor->reset();
}

const uci::type::ModeS_InterrogatorAddressType& ModeS_OptionsType::getModeS_InterrogatorAddress() const {
  return *modeS_InterrogatorAddress_Accessor;
}

uci::type::ModeS_InterrogatorAddressType& ModeS_OptionsType::getModeS_InterrogatorAddress() {
  return *modeS_InterrogatorAddress_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setModeS_InterrogatorAddress(const uci::type::ModeS_InterrogatorAddressType& accessor) {
  if (&accessor != modeS_InterrogatorAddress_Accessor.get()) {
    modeS_InterrogatorAddress_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean ModeS_OptionsType::getShortP4Enable() const {
  return shortP4Enable_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setShortP4Enable(xs::Boolean value) {
  shortP4Enable_Accessor = value;
  return *this;
}


const uci::type::IFF_ModeS_SupportEnum& ModeS_OptionsType::getModeS_Type() const {
  return *modeS_Type_Accessor;
}

uci::type::IFF_ModeS_SupportEnum& ModeS_OptionsType::getModeS_Type() {
  return *modeS_Type_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setModeS_Type(const uci::type::IFF_ModeS_SupportEnum& accessor) {
  if (&accessor != modeS_Type_Accessor.get()) {
    modeS_Type_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setModeS_Type(uci::type::IFF_ModeS_SupportEnum::EnumerationItem value) {
  modeS_Type_Accessor->setValue(value);
  return *this;
}


uci::type::SpecificBDS_RegistersType& ModeS_OptionsType::getSpecificBDS_Registers_() const {
  if (specificBDS_Registers_Accessor) {
    return *specificBDS_Registers_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecificBDS_Registers(): An attempt was made to get an optional field that was not enabled, call hasSpecificBDS_Registers() to determine if it is safe to call getSpecificBDS_Registers()");
}

const uci::type::SpecificBDS_RegistersType& ModeS_OptionsType::getSpecificBDS_Registers() const {
  return getSpecificBDS_Registers_();
}

uci::type::SpecificBDS_RegistersType& ModeS_OptionsType::getSpecificBDS_Registers() {
  return getSpecificBDS_Registers_();
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setSpecificBDS_Registers(const uci::type::SpecificBDS_RegistersType& accessor) {
  enableSpecificBDS_Registers();
  if (&accessor != specificBDS_Registers_Accessor.get()) {
    specificBDS_Registers_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ModeS_OptionsType::hasSpecificBDS_Registers() const noexcept {
  return static_cast<bool>(specificBDS_Registers_Accessor);
}

uci::type::SpecificBDS_RegistersType& ModeS_OptionsType::enableSpecificBDS_Registers(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::specificBDS_RegistersType : type};
  if ((!specificBDS_Registers_Accessor) || (specificBDS_Registers_Accessor->getAccessorType() != requestedType)) {
    specificBDS_Registers_Accessor = SpecificBDS_RegistersType::create(requestedType);
    if (!specificBDS_Registers_Accessor) {
      throw uci::base::UCIException("Error in enableSpecificBDS_Registers(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *specificBDS_Registers_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::clearSpecificBDS_Registers() noexcept {
  specificBDS_Registers_Accessor.reset();
  return *this;
}

xs::Boolean ModeS_OptionsType::getAllCallEnable() const {
  return allCallEnable_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setAllCallEnable(xs::Boolean value) {
  allCallEnable_Accessor = value;
  return *this;
}


xs::Boolean ModeS_OptionsType::getLockoutEnable() const {
  return lockoutEnable_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setLockoutEnable(xs::Boolean value) {
  lockoutEnable_Accessor = value;
  return *this;
}


xs::Boolean ModeS_OptionsType::getLockoutOverrideEnable() const {
  return lockoutOverrideEnable_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setLockoutOverrideEnable(xs::Boolean value) {
  lockoutOverrideEnable_Accessor = value;
  return *this;
}


xs::Boolean ModeS_OptionsType::getMixedModeLockoutEnable() const {
  return mixedModeLockoutEnable_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setMixedModeLockoutEnable(xs::Boolean value) {
  mixedModeLockoutEnable_Accessor = value;
  return *this;
}


const uci::type::MaxPOR_Enum& ModeS_OptionsType::getMaxPOR() const {
  return *maxPOR_Accessor;
}

uci::type::MaxPOR_Enum& ModeS_OptionsType::getMaxPOR() {
  return *maxPOR_Accessor;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setMaxPOR(const uci::type::MaxPOR_Enum& accessor) {
  if (&accessor != maxPOR_Accessor.get()) {
    maxPOR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::setMaxPOR(uci::type::MaxPOR_Enum::EnumerationItem value) {
  maxPOR_Accessor->setValue(value);
  return *this;
}


std::unique_ptr<ModeS_OptionsType> ModeS_OptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modeS_OptionsType : type};
  return (requestedType == uci::type::accessorType::modeS_OptionsType) ? boost::make_unique<ModeS_OptionsType>() : nullptr;
}

/**  */
namespace ModeS_OptionsType_Names {

constexpr const char* Extern_Type_Name{"ModeS_OptionsType"};
constexpr const char* ModeS_InterrogatorAddress_Name{"ModeS_InterrogatorAddress"};
constexpr const char* ShortP4Enable_Name{"ShortP4Enable"};
constexpr const char* ModeS_Type_Name{"ModeS_Type"};
constexpr const char* SpecificBDS_Registers_Name{"SpecificBDS_Registers"};
constexpr const char* AllCallEnable_Name{"AllCallEnable"};
constexpr const char* LockoutEnable_Name{"LockoutEnable"};
constexpr const char* LockoutOverrideEnable_Name{"LockoutOverrideEnable"};
constexpr const char* MixedModeLockoutEnable_Name{"MixedModeLockoutEnable"};
constexpr const char* MaxPOR_Name{"MaxPOR"};

} // namespace ModeS_OptionsType_Names

void ModeS_OptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ModeS_OptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ModeS_OptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::ModeS_InterrogatorAddress_Name) {
      ModeS_InterrogatorAddressType::deserialize(valueType.second, accessor.getModeS_InterrogatorAddress(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::ShortP4Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setShortP4Enable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::ModeS_Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getModeS_Type().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::SpecificBDS_Registers_Name) {
      SpecificBDS_RegistersType::deserialize(valueType.second, accessor.enableSpecificBDS_Registers(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::AllCallEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAllCallEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::LockoutEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLockoutEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::LockoutOverrideEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLockoutOverrideEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::MixedModeLockoutEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMixedModeLockoutEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ModeS_OptionsType_Names::MaxPOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getMaxPOR().setValueFromName(*value);
      }
    }
  }
}

std::string ModeS_OptionsType::serialize(const uci::type::ModeS_OptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ModeS_OptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ModeS_OptionsType_Names::Extern_Type_Name);
  }
  ModeS_InterrogatorAddressType::serialize(accessor.getModeS_InterrogatorAddress(), node, ModeS_OptionsType_Names::ModeS_InterrogatorAddress_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getShortP4Enable(), node, ModeS_OptionsType_Names::ShortP4Enable_Name);
  IFF_ModeS_SupportEnum::serialize(accessor.getModeS_Type(), node, ModeS_OptionsType_Names::ModeS_Type_Name, false);
  if (accessor.hasSpecificBDS_Registers()) {
    SpecificBDS_RegistersType::serialize(accessor.getSpecificBDS_Registers(), node, ModeS_OptionsType_Names::SpecificBDS_Registers_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAllCallEnable(), node, ModeS_OptionsType_Names::AllCallEnable_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLockoutEnable(), node, ModeS_OptionsType_Names::LockoutEnable_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLockoutOverrideEnable(), node, ModeS_OptionsType_Names::LockoutOverrideEnable_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getMixedModeLockoutEnable(), node, ModeS_OptionsType_Names::MixedModeLockoutEnable_Name);
  MaxPOR_Enum::serialize(accessor.getMaxPOR(), node, ModeS_OptionsType_Names::MaxPOR_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ModeS_OptionsType& ModeS_OptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ModeS_OptionsType>().release());
}

uci::type::ModeS_OptionsType& ModeS_OptionsType::create(const uci::type::ModeS_OptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ModeS_OptionsType> newAccessor{boost::make_unique<asb_uci::type::ModeS_OptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ModeS_OptionsType::destroy(uci::type::ModeS_OptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::ModeS_OptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

