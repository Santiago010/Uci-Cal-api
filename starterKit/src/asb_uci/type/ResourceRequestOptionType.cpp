/** @file ResourceRequestOptionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ResourceRequestOptionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/type/PerformanceMetricSetType.h"
#include "asb_uci/type/ResourceRequestType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/PerformanceMetricSetType.h"
#include "uci/type/ResourceRequestOptionType.h"
#include "uci/type/ResourceRequestType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceRequestOptionType::ResourceRequestOptionType()
  : resourceRequest_Accessor{boost::make_unique<ResourceRequest>(1, SIZE_MAX)},
    requestedFrequencyRange_Accessor{boost::make_unique<RequestedFrequencyRange>(0, SIZE_MAX)} {
}

ResourceRequestOptionType::~ResourceRequestOptionType() = default;

void ResourceRequestOptionType::copy(const uci::type::ResourceRequestOptionType& accessor) {
  copyImpl(accessor, false);
}

void ResourceRequestOptionType::copyImpl(const uci::type::ResourceRequestOptionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceRequestOptionType&>(accessor);
    setResourceRequestOptionIndex(accessorImpl.resourceRequestOptionIndex_Accessor);
    setResourceRequest(*(accessorImpl.resourceRequest_Accessor));
    if (accessorImpl.durationRange_Accessor) {
      setDurationRange(*(accessorImpl.durationRange_Accessor));
    } else {
      durationRange_Accessor.reset();
    }
    setRequestedFrequencyRange(*(accessorImpl.requestedFrequencyRange_Accessor));
    if (accessorImpl.hasMerit()) {
      setMerit(accessorImpl.getMerit());
    } else {
      clearMerit();
    }
    if (accessorImpl.performanceMetric_Accessor) {
      setPerformanceMetric(*(accessorImpl.performanceMetric_Accessor));
    } else {
      performanceMetric_Accessor.reset();
    }
  }
}

void ResourceRequestOptionType::reset() noexcept {
  resourceRequestOptionIndex_Accessor = 0;
  resourceRequest_Accessor->reset();
  durationRange_Accessor.reset();
  requestedFrequencyRange_Accessor->reset();
  clearMerit();
  performanceMetric_Accessor.reset();
}

xs::UnsignedInt ResourceRequestOptionType::getResourceRequestOptionIndex() const {
  return resourceRequestOptionIndex_Accessor;
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::setResourceRequestOptionIndex(xs::UnsignedInt value) {
  resourceRequestOptionIndex_Accessor = value;
  return *this;
}


const uci::type::ResourceRequestOptionType::ResourceRequest& ResourceRequestOptionType::getResourceRequest() const {
  return *resourceRequest_Accessor;
}

uci::type::ResourceRequestOptionType::ResourceRequest& ResourceRequestOptionType::getResourceRequest() {
  return *resourceRequest_Accessor;
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::setResourceRequest(const uci::type::ResourceRequestOptionType::ResourceRequest& accessor) {
  if (&accessor != resourceRequest_Accessor.get()) {
    resourceRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeRangeType& ResourceRequestOptionType::getDurationRange_() const {
  if (durationRange_Accessor) {
    return *durationRange_Accessor;
  }
  throw uci::base::UCIException("Error in getDurationRange(): An attempt was made to get an optional field that was not enabled, call hasDurationRange() to determine if it is safe to call getDurationRange()");
}

const uci::type::DateTimeRangeType& ResourceRequestOptionType::getDurationRange() const {
  return getDurationRange_();
}

uci::type::DateTimeRangeType& ResourceRequestOptionType::getDurationRange() {
  return getDurationRange_();
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::setDurationRange(const uci::type::DateTimeRangeType& accessor) {
  enableDurationRange();
  if (&accessor != durationRange_Accessor.get()) {
    durationRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResourceRequestOptionType::hasDurationRange() const noexcept {
  return static_cast<bool>(durationRange_Accessor);
}

uci::type::DateTimeRangeType& ResourceRequestOptionType::enableDurationRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!durationRange_Accessor) || (durationRange_Accessor->getAccessorType() != requestedType)) {
    durationRange_Accessor = DateTimeRangeType::create(requestedType);
    if (!durationRange_Accessor) {
      throw uci::base::UCIException("Error in enableDurationRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *durationRange_Accessor;
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::clearDurationRange() noexcept {
  durationRange_Accessor.reset();
  return *this;
}

const uci::type::ResourceRequestOptionType::RequestedFrequencyRange& ResourceRequestOptionType::getRequestedFrequencyRange() const {
  return *requestedFrequencyRange_Accessor;
}

uci::type::ResourceRequestOptionType::RequestedFrequencyRange& ResourceRequestOptionType::getRequestedFrequencyRange() {
  return *requestedFrequencyRange_Accessor;
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::setRequestedFrequencyRange(const uci::type::ResourceRequestOptionType::RequestedFrequencyRange& accessor) {
  if (&accessor != requestedFrequencyRange_Accessor.get()) {
    requestedFrequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt ResourceRequestOptionType::getMerit() const {
  if (merit_Accessor) {
    return *merit_Accessor;
  }
  throw uci::base::UCIException("Error in getMerit(): An attempt was made to get an optional field that was not enabled, call hasMerit() to determine if it is safe to call getMerit()");
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::setMerit(xs::UnsignedInt value) {
  merit_Accessor = value;
  return *this;
}

bool ResourceRequestOptionType::hasMerit() const noexcept {
  return merit_Accessor.has_value();
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::clearMerit() noexcept {
  merit_Accessor.reset();
  return *this;
}

uci::type::PerformanceMetricSetType& ResourceRequestOptionType::getPerformanceMetric_() const {
  if (performanceMetric_Accessor) {
    return *performanceMetric_Accessor;
  }
  throw uci::base::UCIException("Error in getPerformanceMetric(): An attempt was made to get an optional field that was not enabled, call hasPerformanceMetric() to determine if it is safe to call getPerformanceMetric()");
}

const uci::type::PerformanceMetricSetType& ResourceRequestOptionType::getPerformanceMetric() const {
  return getPerformanceMetric_();
}

uci::type::PerformanceMetricSetType& ResourceRequestOptionType::getPerformanceMetric() {
  return getPerformanceMetric_();
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::setPerformanceMetric(const uci::type::PerformanceMetricSetType& accessor) {
  enablePerformanceMetric();
  if (&accessor != performanceMetric_Accessor.get()) {
    performanceMetric_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResourceRequestOptionType::hasPerformanceMetric() const noexcept {
  return static_cast<bool>(performanceMetric_Accessor);
}

uci::type::PerformanceMetricSetType& ResourceRequestOptionType::enablePerformanceMetric(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::performanceMetricSetType : type};
  if ((!performanceMetric_Accessor) || (performanceMetric_Accessor->getAccessorType() != requestedType)) {
    performanceMetric_Accessor = PerformanceMetricSetType::create(requestedType);
    if (!performanceMetric_Accessor) {
      throw uci::base::UCIException("Error in enablePerformanceMetric(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *performanceMetric_Accessor;
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::clearPerformanceMetric() noexcept {
  performanceMetric_Accessor.reset();
  return *this;
}

std::unique_ptr<ResourceRequestOptionType> ResourceRequestOptionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceRequestOptionType : type};
  return (requestedType == uci::type::accessorType::resourceRequestOptionType) ? boost::make_unique<ResourceRequestOptionType>() : nullptr;
}

/**  */
namespace ResourceRequestOptionType_Names {

constexpr const char* Extern_Type_Name{"ResourceRequestOptionType"};
constexpr const char* ResourceRequestOptionIndex_Name{"ResourceRequestOptionIndex"};
constexpr const char* ResourceRequest_Name{"ResourceRequest"};
constexpr const char* DurationRange_Name{"DurationRange"};
constexpr const char* RequestedFrequencyRange_Name{"RequestedFrequencyRange"};
constexpr const char* Merit_Name{"Merit"};
constexpr const char* PerformanceMetric_Name{"PerformanceMetric"};

} // namespace ResourceRequestOptionType_Names

void ResourceRequestOptionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceRequestOptionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceRequestOptionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceRequestOptionType_Names::ResourceRequestOptionIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResourceRequestOptionIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestOptionType_Names::ResourceRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceRequestOptionType::ResourceRequest& boundedList = accessor.getResourceRequest();
        const uci::type::ResourceRequestOptionType::ResourceRequest::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceRequestType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResourceRequestOptionType_Names::DurationRange_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableDurationRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResourceRequestOptionType_Names::RequestedFrequencyRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceRequestOptionType::RequestedFrequencyRange& boundedList = accessor.getRequestedFrequencyRange();
        const uci::type::ResourceRequestOptionType::RequestedFrequencyRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResourceRequestOptionType_Names::Merit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMerit(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestOptionType_Names::PerformanceMetric_Name) {
      PerformanceMetricSetType::deserialize(valueType.second, accessor.enablePerformanceMetric(), nodeName, nsPrefix);
    }
  }
}

std::string ResourceRequestOptionType::serialize(const uci::type::ResourceRequestOptionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceRequestOptionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceRequestOptionType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getResourceRequestOptionIndex(), node, ResourceRequestOptionType_Names::ResourceRequestOptionIndex_Name);
  {
    const uci::type::ResourceRequestOptionType::ResourceRequest& boundedList = accessor.getResourceRequest();
    for (uci::type::ResourceRequestOptionType::ResourceRequest::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResourceRequestType::serialize(boundedList.at(i), node, ResourceRequestOptionType_Names::ResourceRequest_Name);
    }
  }
  if (accessor.hasDurationRange()) {
    DateTimeRangeType::serialize(accessor.getDurationRange(), node, ResourceRequestOptionType_Names::DurationRange_Name);
  }
  {
    const uci::type::ResourceRequestOptionType::RequestedFrequencyRange& boundedList = accessor.getRequestedFrequencyRange();
    for (uci::type::ResourceRequestOptionType::RequestedFrequencyRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, ResourceRequestOptionType_Names::RequestedFrequencyRange_Name);
    }
  }
  if (accessor.hasMerit()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getMerit(), node, ResourceRequestOptionType_Names::Merit_Name);
  }
  if (accessor.hasPerformanceMetric()) {
    PerformanceMetricSetType::serialize(accessor.getPerformanceMetric(), node, ResourceRequestOptionType_Names::PerformanceMetric_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceRequestOptionType>().release());
}

uci::type::ResourceRequestOptionType& ResourceRequestOptionType::create(const uci::type::ResourceRequestOptionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceRequestOptionType> newAccessor{boost::make_unique<asb_uci::type::ResourceRequestOptionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceRequestOptionType::destroy(uci::type::ResourceRequestOptionType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceRequestOptionType*>(&accessor);
}

} // namespace type

} // namespace uci

