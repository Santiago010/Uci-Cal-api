/** @file EntityCharacteristicType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityCharacteristicType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BehaviorType.h"
#include "../../../include/asb_uci/type/IdentityComparisonType.h"
#include "../../../include/asb_uci/type/PrioritizationListValueType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BehaviorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityCharacteristicType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityComparisonType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PrioritizationListValueType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityCharacteristicType::EntityCharacteristicType() = default;

EntityCharacteristicType::~EntityCharacteristicType() = default;

void EntityCharacteristicType::copy(const uci::type::EntityCharacteristicType& accessor) {
  copyImpl(accessor, false);
}

void EntityCharacteristicType::copyImpl(const uci::type::EntityCharacteristicType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityCharacteristicType&>(accessor);
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
    identityStaleness_Accessor = (accessorImpl.identityStaleness_Accessor ? accessorImpl.identityStaleness_Accessor : boost::none);
    positionUncertainty_Accessor = (accessorImpl.positionUncertainty_Accessor ? accessorImpl.positionUncertainty_Accessor : boost::none);
    positionStaleness_Accessor = (accessorImpl.positionStaleness_Accessor ? accessorImpl.positionStaleness_Accessor : boost::none);
    if (accessorImpl.prioritizationList_Accessor) {
      setPrioritizationList(*(accessorImpl.prioritizationList_Accessor));
    } else {
      prioritizationList_Accessor.reset();
    }
    if (accessorImpl.behavior_Accessor) {
      setBehavior(*(accessorImpl.behavior_Accessor));
    } else {
      behavior_Accessor.reset();
    }
  }
}

void EntityCharacteristicType::reset() noexcept {
  identity_Accessor.reset();
  identityStaleness_Accessor.reset();
  positionUncertainty_Accessor.reset();
  positionStaleness_Accessor.reset();
  prioritizationList_Accessor.reset();
  behavior_Accessor.reset();
}

uci::type::EntityCharacteristicType::EntityCharacteristicTypeChoice EntityCharacteristicType::getEntityCharacteristicTypeChoiceOrdinal() const noexcept {
  if (identity_Accessor) {
    return ENTITYCHARACTERISTICTYPE_CHOICE_IDENTITY;
  }
  if (identityStaleness_Accessor) {
    return ENTITYCHARACTERISTICTYPE_CHOICE_IDENTITYSTALENESS;
  }
  if (positionUncertainty_Accessor) {
    return ENTITYCHARACTERISTICTYPE_CHOICE_POSITIONUNCERTAINTY;
  }
  if (positionStaleness_Accessor) {
    return ENTITYCHARACTERISTICTYPE_CHOICE_POSITIONSTALENESS;
  }
  if (prioritizationList_Accessor) {
    return ENTITYCHARACTERISTICTYPE_CHOICE_PRIORITIZATIONLIST;
  }
  if (behavior_Accessor) {
    return ENTITYCHARACTERISTICTYPE_CHOICE_BEHAVIOR;
  }
  return ENTITYCHARACTERISTICTYPE_CHOICE_NONE;
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::setEntityCharacteristicTypeChoiceOrdinal(uci::type::EntityCharacteristicType::EntityCharacteristicTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ENTITYCHARACTERISTICTYPE_CHOICE_IDENTITY:
      chooseIdentity("setEntityCharacteristicTypeChoiceOrdinal", type);
      break;
    case ENTITYCHARACTERISTICTYPE_CHOICE_IDENTITYSTALENESS:
      chooseIdentityStaleness();
      break;
    case ENTITYCHARACTERISTICTYPE_CHOICE_POSITIONUNCERTAINTY:
      choosePositionUncertainty();
      break;
    case ENTITYCHARACTERISTICTYPE_CHOICE_POSITIONSTALENESS:
      choosePositionStaleness();
      break;
    case ENTITYCHARACTERISTICTYPE_CHOICE_PRIORITIZATIONLIST:
      choosePrioritizationList("setEntityCharacteristicTypeChoiceOrdinal", type);
      break;
    case ENTITYCHARACTERISTICTYPE_CHOICE_BEHAVIOR:
      chooseBehavior("setEntityCharacteristicTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEntityCharacteristicTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::IdentityComparisonType& EntityCharacteristicType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): Unable to get Identity, field not selected");
}

const uci::type::IdentityComparisonType& EntityCharacteristicType::getIdentity() const {
  return getIdentity_();
}

uci::type::IdentityComparisonType& EntityCharacteristicType::getIdentity() {
  return getIdentity_();
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::setIdentity(const uci::type::IdentityComparisonType& accessor) {
  chooseIdentity();
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityCharacteristicType::isIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::IdentityComparisonType& EntityCharacteristicType::chooseIdentity(const std::string& method, uci::base::accessorType::AccessorType type) {
  identityStaleness_Accessor.reset();
  positionUncertainty_Accessor.reset();
  positionStaleness_Accessor.reset();
  prioritizationList_Accessor.reset();
  behavior_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityComparisonType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = IdentityComparisonType::create(type);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::IdentityComparisonType& EntityCharacteristicType::chooseIdentity(uci::base::accessorType::AccessorType type) {
  return chooseIdentity("chooseIdentity", type);
}

uci::type::DurationTypeValue EntityCharacteristicType::getIdentityStaleness() const {
  if (identityStaleness_Accessor) {
    return *identityStaleness_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentityStaleness(): Unable to get IdentityStaleness, field not selected");
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::setIdentityStaleness(uci::type::DurationTypeValue value) {
  chooseIdentityStaleness();
  identityStaleness_Accessor = value;
  return *this;
}

bool EntityCharacteristicType::isIdentityStaleness() const noexcept {
  return static_cast<bool>(identityStaleness_Accessor);
}

void EntityCharacteristicType::chooseIdentityStaleness() {
  identity_Accessor.reset();
  positionUncertainty_Accessor.reset();
  positionStaleness_Accessor.reset();
  prioritizationList_Accessor.reset();
  behavior_Accessor.reset();
  if (!identityStaleness_Accessor) {
    identityStaleness_Accessor = boost::optional<asb_xs::Duration>();
  }
}

xs::Float EntityCharacteristicType::getPositionUncertainty() const {
  if (positionUncertainty_Accessor) {
    return *positionUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionUncertainty(): Unable to get PositionUncertainty, field not selected");
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::setPositionUncertainty(xs::Float value) {
  choosePositionUncertainty();
  positionUncertainty_Accessor = value;
  return *this;
}

bool EntityCharacteristicType::isPositionUncertainty() const noexcept {
  return static_cast<bool>(positionUncertainty_Accessor);
}

void EntityCharacteristicType::choosePositionUncertainty() {
  identity_Accessor.reset();
  identityStaleness_Accessor.reset();
  positionStaleness_Accessor.reset();
  prioritizationList_Accessor.reset();
  behavior_Accessor.reset();
  if (!positionUncertainty_Accessor) {
    positionUncertainty_Accessor = boost::optional<asb_xs::Float>();
  }
}

uci::type::DurationTypeValue EntityCharacteristicType::getPositionStaleness() const {
  if (positionStaleness_Accessor) {
    return *positionStaleness_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionStaleness(): Unable to get PositionStaleness, field not selected");
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::setPositionStaleness(uci::type::DurationTypeValue value) {
  choosePositionStaleness();
  positionStaleness_Accessor = value;
  return *this;
}

bool EntityCharacteristicType::isPositionStaleness() const noexcept {
  return static_cast<bool>(positionStaleness_Accessor);
}

void EntityCharacteristicType::choosePositionStaleness() {
  identity_Accessor.reset();
  identityStaleness_Accessor.reset();
  positionUncertainty_Accessor.reset();
  prioritizationList_Accessor.reset();
  behavior_Accessor.reset();
  if (!positionStaleness_Accessor) {
    positionStaleness_Accessor = boost::optional<asb_xs::Duration>();
  }
}

uci::type::PrioritizationListValueType& EntityCharacteristicType::getPrioritizationList_() const {
  if (prioritizationList_Accessor) {
    return *prioritizationList_Accessor;
  }
  throw uci::base::UCIException("Error in getPrioritizationList(): Unable to get PrioritizationList, field not selected");
}

const uci::type::PrioritizationListValueType& EntityCharacteristicType::getPrioritizationList() const {
  return getPrioritizationList_();
}

uci::type::PrioritizationListValueType& EntityCharacteristicType::getPrioritizationList() {
  return getPrioritizationList_();
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::setPrioritizationList(const uci::type::PrioritizationListValueType& accessor) {
  choosePrioritizationList();
  if (&accessor != prioritizationList_Accessor.get()) {
    prioritizationList_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityCharacteristicType::isPrioritizationList() const noexcept {
  return static_cast<bool>(prioritizationList_Accessor);
}

uci::type::PrioritizationListValueType& EntityCharacteristicType::choosePrioritizationList(const std::string& method, uci::base::accessorType::AccessorType type) {
  identity_Accessor.reset();
  identityStaleness_Accessor.reset();
  positionUncertainty_Accessor.reset();
  positionStaleness_Accessor.reset();
  behavior_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::prioritizationListValueType : type};
  if ((!prioritizationList_Accessor) || (prioritizationList_Accessor->getAccessorType() != requestedType)) {
    prioritizationList_Accessor = PrioritizationListValueType::create(type);
    if (!prioritizationList_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *prioritizationList_Accessor;
}

uci::type::PrioritizationListValueType& EntityCharacteristicType::choosePrioritizationList(uci::base::accessorType::AccessorType type) {
  return choosePrioritizationList("choosePrioritizationList", type);
}

uci::type::BehaviorType& EntityCharacteristicType::getBehavior_() const {
  if (behavior_Accessor) {
    return *behavior_Accessor;
  }
  throw uci::base::UCIException("Error in getBehavior(): Unable to get Behavior, field not selected");
}

const uci::type::BehaviorType& EntityCharacteristicType::getBehavior() const {
  return getBehavior_();
}

uci::type::BehaviorType& EntityCharacteristicType::getBehavior() {
  return getBehavior_();
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::setBehavior(const uci::type::BehaviorType& accessor) {
  chooseBehavior();
  if (&accessor != behavior_Accessor.get()) {
    behavior_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityCharacteristicType::isBehavior() const noexcept {
  return static_cast<bool>(behavior_Accessor);
}

uci::type::BehaviorType& EntityCharacteristicType::chooseBehavior(const std::string& method, uci::base::accessorType::AccessorType type) {
  identity_Accessor.reset();
  identityStaleness_Accessor.reset();
  positionUncertainty_Accessor.reset();
  positionStaleness_Accessor.reset();
  prioritizationList_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::behaviorType : type};
  if ((!behavior_Accessor) || (behavior_Accessor->getAccessorType() != requestedType)) {
    behavior_Accessor = BehaviorType::create(type);
    if (!behavior_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *behavior_Accessor;
}

uci::type::BehaviorType& EntityCharacteristicType::chooseBehavior(uci::base::accessorType::AccessorType type) {
  return chooseBehavior("chooseBehavior", type);
}

std::unique_ptr<EntityCharacteristicType> EntityCharacteristicType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityCharacteristicType : type};
  return (requestedType == uci::type::accessorType::entityCharacteristicType) ? boost::make_unique<EntityCharacteristicType>() : nullptr;
}

/**  */
namespace EntityCharacteristicType_Names {

constexpr const char* Extern_Type_Name{"EntityCharacteristicType"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* IdentityStaleness_Name{"IdentityStaleness"};
constexpr const char* PositionUncertainty_Name{"PositionUncertainty"};
constexpr const char* PositionStaleness_Name{"PositionStaleness"};
constexpr const char* PrioritizationList_Name{"PrioritizationList"};
constexpr const char* Behavior_Name{"Behavior"};

} // namespace EntityCharacteristicType_Names

void EntityCharacteristicType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityCharacteristicType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityCharacteristicType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityCharacteristicType_Names::Identity_Name) {
      IdentityComparisonType::deserialize(valueType.second, accessor.chooseIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityCharacteristicType_Names::IdentityStaleness_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIdentityStaleness(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EntityCharacteristicType_Names::PositionUncertainty_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPositionUncertainty(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + EntityCharacteristicType_Names::PositionStaleness_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPositionStaleness(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EntityCharacteristicType_Names::PrioritizationList_Name) {
      PrioritizationListValueType::deserialize(valueType.second, accessor.choosePrioritizationList(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityCharacteristicType_Names::Behavior_Name) {
      BehaviorType::deserialize(valueType.second, accessor.chooseBehavior(), nodeName, nsPrefix);
    }
  }
}

std::string EntityCharacteristicType::serialize(const uci::type::EntityCharacteristicType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityCharacteristicType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityCharacteristicType_Names::Extern_Type_Name);
  }
  if (accessor.isIdentity()) {
    IdentityComparisonType::serialize(accessor.getIdentity(), node, EntityCharacteristicType_Names::Identity_Name);
  } else if (accessor.isIdentityStaleness()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getIdentityStaleness(), node, EntityCharacteristicType_Names::IdentityStaleness_Name);
  } else if (accessor.isPositionUncertainty()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getPositionUncertainty(), node, EntityCharacteristicType_Names::PositionUncertainty_Name);
  } else if (accessor.isPositionStaleness()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPositionStaleness(), node, EntityCharacteristicType_Names::PositionStaleness_Name);
  } else if (accessor.isPrioritizationList()) {
    PrioritizationListValueType::serialize(accessor.getPrioritizationList(), node, EntityCharacteristicType_Names::PrioritizationList_Name);
  } else if (accessor.isBehavior()) {
    BehaviorType::serialize(accessor.getBehavior(), node, EntityCharacteristicType_Names::Behavior_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityCharacteristicType& EntityCharacteristicType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityCharacteristicType>().release());
}

uci::type::EntityCharacteristicType& EntityCharacteristicType::create(const uci::type::EntityCharacteristicType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityCharacteristicType> newAccessor{boost::make_unique<asb_uci::type::EntityCharacteristicType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityCharacteristicType::destroy(uci::type::EntityCharacteristicType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityCharacteristicType*>(&accessor);
}

} // namespace type

} // namespace uci

