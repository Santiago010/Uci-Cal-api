/** @file SMTI_PredictedCollectionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SMTI_PredictedCollectionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MTI_PredictedActivityDetailType.h"
#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MTI_PredictedActivityDetailType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/SMTI_PredictedCollectionsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SMTI_PredictedCollectionsType::SMTI_PredictedCollectionsType()
  : ownshipLocation_Accessor{boost::make_unique<Point3D_Type>()} {
}

SMTI_PredictedCollectionsType::~SMTI_PredictedCollectionsType() = default;

void SMTI_PredictedCollectionsType::copy(const uci::type::SMTI_PredictedCollectionsType& accessor) {
  copyImpl(accessor, false);
}

void SMTI_PredictedCollectionsType::copyImpl(const uci::type::SMTI_PredictedCollectionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SMTI_PredictedCollectionsType&>(accessor);
    setOwnshipLocation(*(accessorImpl.ownshipLocation_Accessor));
    if (accessorImpl.predictedCollectionMetrics_Accessor) {
      setPredictedCollectionMetrics(*(accessorImpl.predictedCollectionMetrics_Accessor));
    } else {
      predictedCollectionMetrics_Accessor.reset();
    }
  }
}

void SMTI_PredictedCollectionsType::reset() noexcept {
  if (ownshipLocation_Accessor->getAccessorType() != uci::type::accessorType::point3D_Type) {
    ownshipLocation_Accessor = boost::make_unique<Point3D_Type>();
  } else {
    ownshipLocation_Accessor->reset();
  }
  predictedCollectionMetrics_Accessor.reset();
}

const uci::type::Point3D_Type& SMTI_PredictedCollectionsType::getOwnshipLocation() const {
  return *ownshipLocation_Accessor;
}

uci::type::Point3D_Type& SMTI_PredictedCollectionsType::getOwnshipLocation() {
  return *ownshipLocation_Accessor;
}

uci::type::SMTI_PredictedCollectionsType& SMTI_PredictedCollectionsType::setOwnshipLocation(const uci::type::Point3D_Type& accessor) {
  enableOwnshipLocation(accessor.getAccessorType());
  if (&accessor != ownshipLocation_Accessor.get()) {
    ownshipLocation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point3D_Type& SMTI_PredictedCollectionsType::enableOwnshipLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!ownshipLocation_Accessor) || (ownshipLocation_Accessor->getAccessorType() != requestedType)) {
    ownshipLocation_Accessor = Point3D_Type::create(requestedType);
    if (!ownshipLocation_Accessor) {
      throw uci::base::UCIException("Error in enableOwnshipLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ownshipLocation_Accessor;
}

uci::type::MTI_PredictedActivityDetailType& SMTI_PredictedCollectionsType::getPredictedCollectionMetrics_() const {
  if (predictedCollectionMetrics_Accessor) {
    return *predictedCollectionMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getPredictedCollectionMetrics(): An attempt was made to get an optional field that was not enabled, call hasPredictedCollectionMetrics() to determine if it is safe to call getPredictedCollectionMetrics()");
}

const uci::type::MTI_PredictedActivityDetailType& SMTI_PredictedCollectionsType::getPredictedCollectionMetrics() const {
  return getPredictedCollectionMetrics_();
}

uci::type::MTI_PredictedActivityDetailType& SMTI_PredictedCollectionsType::getPredictedCollectionMetrics() {
  return getPredictedCollectionMetrics_();
}

uci::type::SMTI_PredictedCollectionsType& SMTI_PredictedCollectionsType::setPredictedCollectionMetrics(const uci::type::MTI_PredictedActivityDetailType& accessor) {
  enablePredictedCollectionMetrics();
  if (&accessor != predictedCollectionMetrics_Accessor.get()) {
    predictedCollectionMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_PredictedCollectionsType::hasPredictedCollectionMetrics() const noexcept {
  return static_cast<bool>(predictedCollectionMetrics_Accessor);
}

uci::type::MTI_PredictedActivityDetailType& SMTI_PredictedCollectionsType::enablePredictedCollectionMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_PredictedActivityDetailType : type};
  if ((!predictedCollectionMetrics_Accessor) || (predictedCollectionMetrics_Accessor->getAccessorType() != requestedType)) {
    predictedCollectionMetrics_Accessor = MTI_PredictedActivityDetailType::create(requestedType);
    if (!predictedCollectionMetrics_Accessor) {
      throw uci::base::UCIException("Error in enablePredictedCollectionMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *predictedCollectionMetrics_Accessor;
}

uci::type::SMTI_PredictedCollectionsType& SMTI_PredictedCollectionsType::clearPredictedCollectionMetrics() noexcept {
  predictedCollectionMetrics_Accessor.reset();
  return *this;
}

std::unique_ptr<SMTI_PredictedCollectionsType> SMTI_PredictedCollectionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_PredictedCollectionsType : type};
  return (requestedType == uci::type::accessorType::sMTI_PredictedCollectionsType) ? boost::make_unique<SMTI_PredictedCollectionsType>() : nullptr;
}

/**  */
namespace SMTI_PredictedCollectionsType_Names {

constexpr const char* Extern_Type_Name{"SMTI_PredictedCollectionsType"};
constexpr const char* OwnshipLocation_Name{"OwnshipLocation"};
constexpr const char* PredictedCollectionMetrics_Name{"PredictedCollectionMetrics"};

} // namespace SMTI_PredictedCollectionsType_Names

void SMTI_PredictedCollectionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_PredictedCollectionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SMTI_PredictedCollectionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SMTI_PredictedCollectionsType_Names::OwnshipLocation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOwnshipLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_PredictedCollectionsType_Names::PredictedCollectionMetrics_Name) {
      MTI_PredictedActivityDetailType::deserialize(valueType.second, accessor.enablePredictedCollectionMetrics(), nodeName, nsPrefix);
    }
  }
}

std::string SMTI_PredictedCollectionsType::serialize(const uci::type::SMTI_PredictedCollectionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SMTI_PredictedCollectionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SMTI_PredictedCollectionsType_Names::Extern_Type_Name);
  }
  Point3D_Type::serialize(accessor.getOwnshipLocation(), node, SMTI_PredictedCollectionsType_Names::OwnshipLocation_Name);
  if (accessor.hasPredictedCollectionMetrics()) {
    MTI_PredictedActivityDetailType::serialize(accessor.getPredictedCollectionMetrics(), node, SMTI_PredictedCollectionsType_Names::PredictedCollectionMetrics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SMTI_PredictedCollectionsType& SMTI_PredictedCollectionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SMTI_PredictedCollectionsType>().release());
}

uci::type::SMTI_PredictedCollectionsType& SMTI_PredictedCollectionsType::create(const uci::type::SMTI_PredictedCollectionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SMTI_PredictedCollectionsType> newAccessor{boost::make_unique<asb_uci::type::SMTI_PredictedCollectionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SMTI_PredictedCollectionsType::destroy(uci::type::SMTI_PredictedCollectionsType& accessor) {
  delete dynamic_cast<asb_uci::type::SMTI_PredictedCollectionsType*>(&accessor);
}

} // namespace type

} // namespace uci

