/** @file RouteModificationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RouteModificationRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/LineProjectionEnum.h"
#include "../../../include/asb_uci/type/PathID_Type.h"
#include "../../../include/asb_uci/type/PathSegmentModificationType.h"
#include "../../../include/asb_uci/type/PlanInitiationSourceEnum.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/RoutePathModificationType.h"
#include "../../../include/asb_uci/type/RoutePlanID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LineProjectionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathSegmentModificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanInitiationSourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RouteModificationRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePathModificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RouteModificationRequestMDT::RouteModificationRequestMDT()
  : source_Accessor{boost::make_unique<PlanInitiationSourceEnum>()},
    routePlanID_Accessor{boost::make_unique<RoutePlanID_Type>()},
    pathSegment_Accessor{boost::make_unique<PathSegment>(0, SIZE_MAX)} {
}

RouteModificationRequestMDT::~RouteModificationRequestMDT() = default;

void RouteModificationRequestMDT::copy(const uci::type::RouteModificationRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void RouteModificationRequestMDT::copyImpl(const uci::type::RouteModificationRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RouteModificationRequestMDT&>(accessor);
    setSource(*(accessorImpl.source_Accessor));
    setRoutePlanID(*(accessorImpl.routePlanID_Accessor));
    if (accessorImpl.hasDetailed()) {
      setDetailed(accessorImpl.getDetailed());
    } else {
      clearDetailed();
    }
    if (accessorImpl.routeProjection_Accessor) {
      setRouteProjection(*(accessorImpl.routeProjection_Accessor));
    } else {
      routeProjection_Accessor.reset();
    }
    if (accessorImpl.firstInRoutePathID_Accessor) {
      setFirstInRoutePathID(*(accessorImpl.firstInRoutePathID_Accessor));
    } else {
      firstInRoutePathID_Accessor.reset();
    }
    if (accessorImpl.path_Accessor) {
      setPath(*(accessorImpl.path_Accessor));
    } else {
      path_Accessor.reset();
    }
    setPathSegment(*(accessorImpl.pathSegment_Accessor));
  }
}

void RouteModificationRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  source_Accessor->reset();
  routePlanID_Accessor->reset();
  clearDetailed();
  routeProjection_Accessor.reset();
  firstInRoutePathID_Accessor.reset();
  path_Accessor.reset();
  pathSegment_Accessor->reset();
}

const uci::type::PlanInitiationSourceEnum& RouteModificationRequestMDT::getSource() const {
  return *source_Accessor;
}

uci::type::PlanInitiationSourceEnum& RouteModificationRequestMDT::getSource() {
  return *source_Accessor;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setSource(const uci::type::PlanInitiationSourceEnum& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setSource(uci::type::PlanInitiationSourceEnum::EnumerationItem value) {
  source_Accessor->setValue(value);
  return *this;
}


const uci::type::RoutePlanID_Type& RouteModificationRequestMDT::getRoutePlanID() const {
  return *routePlanID_Accessor;
}

uci::type::RoutePlanID_Type& RouteModificationRequestMDT::getRoutePlanID() {
  return *routePlanID_Accessor;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setRoutePlanID(const uci::type::RoutePlanID_Type& accessor) {
  if (&accessor != routePlanID_Accessor.get()) {
    routePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean RouteModificationRequestMDT::getDetailed() const {
  if (detailed_Accessor) {
    return *detailed_Accessor;
  }
  throw uci::base::UCIException("Error in getDetailed(): An attempt was made to get an optional field that was not enabled, call hasDetailed() to determine if it is safe to call getDetailed()");
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setDetailed(xs::Boolean value) {
  detailed_Accessor = value;
  return *this;
}

bool RouteModificationRequestMDT::hasDetailed() const noexcept {
  return detailed_Accessor.has_value();
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::clearDetailed() noexcept {
  detailed_Accessor.reset();
  return *this;
}

uci::type::LineProjectionEnum& RouteModificationRequestMDT::getRouteProjection_() const {
  if (routeProjection_Accessor) {
    return *routeProjection_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteProjection(): An attempt was made to get an optional field that was not enabled, call hasRouteProjection() to determine if it is safe to call getRouteProjection()");
}

const uci::type::LineProjectionEnum& RouteModificationRequestMDT::getRouteProjection() const {
  return getRouteProjection_();
}

uci::type::LineProjectionEnum& RouteModificationRequestMDT::getRouteProjection() {
  return getRouteProjection_();
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setRouteProjection(const uci::type::LineProjectionEnum& accessor) {
  enableRouteProjection();
  if (&accessor != routeProjection_Accessor.get()) {
    routeProjection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setRouteProjection(const uci::type::LineProjectionEnum::EnumerationItem value) {
  enableRouteProjection().setValue(value);
  return *this;
}

bool RouteModificationRequestMDT::hasRouteProjection() const noexcept {
  return static_cast<bool>(routeProjection_Accessor);
}

uci::type::LineProjectionEnum& RouteModificationRequestMDT::enableRouteProjection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lineProjectionEnum : type};
  if ((!routeProjection_Accessor) || (routeProjection_Accessor->getAccessorType() != requestedType)) {
    routeProjection_Accessor = LineProjectionEnum::create(requestedType);
    if (!routeProjection_Accessor) {
      throw uci::base::UCIException("Error in enableRouteProjection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeProjection_Accessor;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::clearRouteProjection() noexcept {
  routeProjection_Accessor.reset();
  return *this;
}

uci::type::PathID_Type& RouteModificationRequestMDT::getFirstInRoutePathID_() const {
  if (firstInRoutePathID_Accessor) {
    return *firstInRoutePathID_Accessor;
  }
  throw uci::base::UCIException("Error in getFirstInRoutePathID(): An attempt was made to get an optional field that was not enabled, call hasFirstInRoutePathID() to determine if it is safe to call getFirstInRoutePathID()");
}

const uci::type::PathID_Type& RouteModificationRequestMDT::getFirstInRoutePathID() const {
  return getFirstInRoutePathID_();
}

uci::type::PathID_Type& RouteModificationRequestMDT::getFirstInRoutePathID() {
  return getFirstInRoutePathID_();
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setFirstInRoutePathID(const uci::type::PathID_Type& accessor) {
  enableFirstInRoutePathID();
  if (&accessor != firstInRoutePathID_Accessor.get()) {
    firstInRoutePathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteModificationRequestMDT::hasFirstInRoutePathID() const noexcept {
  return static_cast<bool>(firstInRoutePathID_Accessor);
}

uci::type::PathID_Type& RouteModificationRequestMDT::enableFirstInRoutePathID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathID_Type : type};
  if ((!firstInRoutePathID_Accessor) || (firstInRoutePathID_Accessor->getAccessorType() != requestedType)) {
    firstInRoutePathID_Accessor = PathID_Type::create(requestedType);
    if (!firstInRoutePathID_Accessor) {
      throw uci::base::UCIException("Error in enableFirstInRoutePathID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *firstInRoutePathID_Accessor;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::clearFirstInRoutePathID() noexcept {
  firstInRoutePathID_Accessor.reset();
  return *this;
}

uci::type::RoutePathModificationType& RouteModificationRequestMDT::getPath_() const {
  if (path_Accessor) {
    return *path_Accessor;
  }
  throw uci::base::UCIException("Error in getPath(): An attempt was made to get an optional field that was not enabled, call hasPath() to determine if it is safe to call getPath()");
}

const uci::type::RoutePathModificationType& RouteModificationRequestMDT::getPath() const {
  return getPath_();
}

uci::type::RoutePathModificationType& RouteModificationRequestMDT::getPath() {
  return getPath_();
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setPath(const uci::type::RoutePathModificationType& accessor) {
  enablePath();
  if (&accessor != path_Accessor.get()) {
    path_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteModificationRequestMDT::hasPath() const noexcept {
  return static_cast<bool>(path_Accessor);
}

uci::type::RoutePathModificationType& RouteModificationRequestMDT::enablePath(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePathModificationType : type};
  if ((!path_Accessor) || (path_Accessor->getAccessorType() != requestedType)) {
    path_Accessor = RoutePathModificationType::create(requestedType);
    if (!path_Accessor) {
      throw uci::base::UCIException("Error in enablePath(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *path_Accessor;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::clearPath() noexcept {
  path_Accessor.reset();
  return *this;
}

const uci::type::RouteModificationRequestMDT::PathSegment& RouteModificationRequestMDT::getPathSegment() const {
  return *pathSegment_Accessor;
}

uci::type::RouteModificationRequestMDT::PathSegment& RouteModificationRequestMDT::getPathSegment() {
  return *pathSegment_Accessor;
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::setPathSegment(const uci::type::RouteModificationRequestMDT::PathSegment& accessor) {
  if (&accessor != pathSegment_Accessor.get()) {
    pathSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RouteModificationRequestMDT> RouteModificationRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeModificationRequestMDT : type};
  return (requestedType == uci::type::accessorType::routeModificationRequestMDT) ? boost::make_unique<RouteModificationRequestMDT>() : nullptr;
}

/**  */
namespace RouteModificationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"RouteModificationRequestMDT"};
constexpr const char* Source_Name{"Source"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* Detailed_Name{"Detailed"};
constexpr const char* RouteProjection_Name{"RouteProjection"};
constexpr const char* FirstInRoutePathID_Name{"FirstInRoutePathID"};
constexpr const char* Path_Name{"Path"};
constexpr const char* PathSegment_Name{"PathSegment"};

} // namespace RouteModificationRequestMDT_Names

void RouteModificationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RouteModificationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RouteModificationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RouteModificationRequestMDT_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RouteModificationRequestMDT_Names::RoutePlanID_Name) {
      RoutePlanID_Type::deserialize(valueType.second, accessor.getRoutePlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteModificationRequestMDT_Names::Detailed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDetailed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RouteModificationRequestMDT_Names::RouteProjection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRouteProjection().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RouteModificationRequestMDT_Names::FirstInRoutePathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.enableFirstInRoutePathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteModificationRequestMDT_Names::Path_Name) {
      RoutePathModificationType::deserialize(valueType.second, accessor.enablePath(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteModificationRequestMDT_Names::PathSegment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteModificationRequestMDT::PathSegment& boundedList = accessor.getPathSegment();
        const uci::type::RouteModificationRequestMDT::PathSegment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PathSegmentModificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RouteModificationRequestMDT::serialize(const uci::type::RouteModificationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RouteModificationRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RouteModificationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  PlanInitiationSourceEnum::serialize(accessor.getSource(), node, RouteModificationRequestMDT_Names::Source_Name, false);
  RoutePlanID_Type::serialize(accessor.getRoutePlanID(), node, RouteModificationRequestMDT_Names::RoutePlanID_Name);
  if (accessor.hasDetailed()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getDetailed(), node, RouteModificationRequestMDT_Names::Detailed_Name);
  }
  if (accessor.hasRouteProjection()) {
    LineProjectionEnum::serialize(accessor.getRouteProjection(), node, RouteModificationRequestMDT_Names::RouteProjection_Name, false);
  }
  if (accessor.hasFirstInRoutePathID()) {
    PathID_Type::serialize(accessor.getFirstInRoutePathID(), node, RouteModificationRequestMDT_Names::FirstInRoutePathID_Name);
  }
  if (accessor.hasPath()) {
    RoutePathModificationType::serialize(accessor.getPath(), node, RouteModificationRequestMDT_Names::Path_Name);
  }
  {
    const uci::type::RouteModificationRequestMDT::PathSegment& boundedList = accessor.getPathSegment();
    for (uci::type::RouteModificationRequestMDT::PathSegment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PathSegmentModificationType::serialize(boundedList.at(i), node, RouteModificationRequestMDT_Names::PathSegment_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RouteModificationRequestMDT>().release());
}

uci::type::RouteModificationRequestMDT& RouteModificationRequestMDT::create(const uci::type::RouteModificationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RouteModificationRequestMDT> newAccessor{boost::make_unique<asb_uci::type::RouteModificationRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RouteModificationRequestMDT::destroy(uci::type::RouteModificationRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RouteModificationRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

