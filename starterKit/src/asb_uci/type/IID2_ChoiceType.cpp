/** @file IID2_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IID2_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IPON_IID2_Type.h"
#include "../../../include/asb_uci/type/NonIPON_IID2_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IID2_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IPON_IID2_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NonIPON_IID2_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IID2_ChoiceType::IID2_ChoiceType() = default;

IID2_ChoiceType::~IID2_ChoiceType() = default;

void IID2_ChoiceType::copy(const uci::type::IID2_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void IID2_ChoiceType::copyImpl(const uci::type::IID2_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IID2_ChoiceType&>(accessor);
    if (accessorImpl.nonIPON_IID2_Accessor) {
      setNonIPON_IID2(*(accessorImpl.nonIPON_IID2_Accessor));
    } else {
      nonIPON_IID2_Accessor.reset();
    }
    if (accessorImpl.iPON_IID2_Accessor) {
      setIPON_IID2(*(accessorImpl.iPON_IID2_Accessor));
    } else {
      iPON_IID2_Accessor.reset();
    }
  }
}

void IID2_ChoiceType::reset() noexcept {
  nonIPON_IID2_Accessor.reset();
  iPON_IID2_Accessor.reset();
}

uci::type::IID2_ChoiceType::IID2_ChoiceTypeChoice IID2_ChoiceType::getIID2_ChoiceTypeChoiceOrdinal() const noexcept {
  if (nonIPON_IID2_Accessor) {
    return IID2_CHOICETYPE_CHOICE_NONIPON_IID2;
  }
  if (iPON_IID2_Accessor) {
    return IID2_CHOICETYPE_CHOICE_IPON_IID2;
  }
  return IID2_CHOICETYPE_CHOICE_NONE;
}

uci::type::IID2_ChoiceType& IID2_ChoiceType::setIID2_ChoiceTypeChoiceOrdinal(uci::type::IID2_ChoiceType::IID2_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case IID2_CHOICETYPE_CHOICE_NONIPON_IID2:
      chooseNonIPON_IID2("setIID2_ChoiceTypeChoiceOrdinal", type);
      break;
    case IID2_CHOICETYPE_CHOICE_IPON_IID2:
      chooseIPON_IID2("setIID2_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setIID2_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::NonIPON_IID2_Type& IID2_ChoiceType::getNonIPON_IID2_() const {
  if (nonIPON_IID2_Accessor) {
    return *nonIPON_IID2_Accessor;
  }
  throw uci::base::UCIException("Error in getNonIPON_IID2(): An attempt was made to get an optional field that was not enabled, call hasNonIPON_IID2() to determine if it is safe to call getNonIPON_IID2()");
}

const uci::type::NonIPON_IID2_Type& IID2_ChoiceType::getNonIPON_IID2() const {
  return getNonIPON_IID2_();
}

uci::type::NonIPON_IID2_Type& IID2_ChoiceType::getNonIPON_IID2() {
  return getNonIPON_IID2_();
}

uci::type::IID2_ChoiceType& IID2_ChoiceType::setNonIPON_IID2(const uci::type::NonIPON_IID2_Type& value) {
  return setNonIPON_IID2(value.c_str());
}

uci::type::IID2_ChoiceType& IID2_ChoiceType::setNonIPON_IID2(const std::string& value) {
  return setNonIPON_IID2(value.c_str());
}

uci::type::IID2_ChoiceType& IID2_ChoiceType::setNonIPON_IID2(const char * value) {
  chooseNonIPON_IID2().setStringValue(value);
  return *this;
}

bool IID2_ChoiceType::isNonIPON_IID2() const noexcept {
  return static_cast<bool>(nonIPON_IID2_Accessor);
}

uci::type::NonIPON_IID2_Type& IID2_ChoiceType::chooseNonIPON_IID2(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  iPON_IID2_Accessor.reset();
  if (!nonIPON_IID2_Accessor) {
    nonIPON_IID2_Accessor = NonIPON_IID2_Type::create(type);
  }
  return *nonIPON_IID2_Accessor;
}

uci::type::NonIPON_IID2_Type& IID2_ChoiceType::chooseNonIPON_IID2(uci::base::accessorType::AccessorType type) {
  return chooseNonIPON_IID2("chooseNonIPON_IID2", type);
}

uci::type::IPON_IID2_Type& IID2_ChoiceType::getIPON_IID2_() const {
  if (iPON_IID2_Accessor) {
    return *iPON_IID2_Accessor;
  }
  throw uci::base::UCIException("Error in getIPON_IID2(): Unable to get IPON_IID2, field not selected");
}

const uci::type::IPON_IID2_Type& IID2_ChoiceType::getIPON_IID2() const {
  return getIPON_IID2_();
}

uci::type::IPON_IID2_Type& IID2_ChoiceType::getIPON_IID2() {
  return getIPON_IID2_();
}

uci::type::IID2_ChoiceType& IID2_ChoiceType::setIPON_IID2(const uci::type::IPON_IID2_Type& accessor) {
  chooseIPON_IID2();
  if (&accessor != iPON_IID2_Accessor.get()) {
    iPON_IID2_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IID2_ChoiceType::isIPON_IID2() const noexcept {
  return static_cast<bool>(iPON_IID2_Accessor);
}

uci::type::IPON_IID2_Type& IID2_ChoiceType::chooseIPON_IID2(const std::string& method, uci::base::accessorType::AccessorType type) {
  nonIPON_IID2_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPON_IID2_Type : type};
  if ((!iPON_IID2_Accessor) || (iPON_IID2_Accessor->getAccessorType() != requestedType)) {
    iPON_IID2_Accessor = IPON_IID2_Type::create(type);
    if (!iPON_IID2_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iPON_IID2_Accessor;
}

uci::type::IPON_IID2_Type& IID2_ChoiceType::chooseIPON_IID2(uci::base::accessorType::AccessorType type) {
  return chooseIPON_IID2("chooseIPON_IID2", type);
}

std::unique_ptr<IID2_ChoiceType> IID2_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iID2_ChoiceType : type};
  return (requestedType == uci::type::accessorType::iID2_ChoiceType) ? boost::make_unique<IID2_ChoiceType>() : nullptr;
}

/**  */
namespace IID2_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"IID2_ChoiceType"};
constexpr const char* NonIPON_IID2_Name{"NonIPON_IID2"};
constexpr const char* IPON_IID2_Name{"IPON_IID2"};

} // namespace IID2_ChoiceType_Names

void IID2_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IID2_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IID2_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IID2_ChoiceType_Names::NonIPON_IID2_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseNonIPON_IID2().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + IID2_ChoiceType_Names::IPON_IID2_Name) {
      IPON_IID2_Type::deserialize(valueType.second, accessor.chooseIPON_IID2(), nodeName, nsPrefix);
    }
  }
}

std::string IID2_ChoiceType::serialize(const uci::type::IID2_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IID2_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IID2_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isNonIPON_IID2()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getNonIPON_IID2(), node, IID2_ChoiceType_Names::NonIPON_IID2_Name);
  } else if (accessor.isIPON_IID2()) {
    IPON_IID2_Type::serialize(accessor.getIPON_IID2(), node, IID2_ChoiceType_Names::IPON_IID2_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IID2_ChoiceType& IID2_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IID2_ChoiceType>().release());
}

uci::type::IID2_ChoiceType& IID2_ChoiceType::create(const uci::type::IID2_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IID2_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::IID2_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IID2_ChoiceType::destroy(uci::type::IID2_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::IID2_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

