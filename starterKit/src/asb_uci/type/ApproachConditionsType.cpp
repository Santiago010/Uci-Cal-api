/** @file ApproachConditionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ApproachConditionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ApproachAngleType.h"
#include "asb_uci/type/StoreFlightModeEnum.h"
#include "asb_uci/type/TargetFinalApproachType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ApproachAngleType.h"
#include "uci/type/ApproachConditionsType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/StoreFlightModeEnum.h"
#include "uci/type/TargetFinalApproachType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ApproachConditionsType::ApproachConditionsType() = default;

ApproachConditionsType::~ApproachConditionsType() = default;

void ApproachConditionsType::copy(const uci::type::ApproachConditionsType& accessor) {
  copyImpl(accessor, false);
}

void ApproachConditionsType::copyImpl(const uci::type::ApproachConditionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ApproachConditionsType&>(accessor);
    if (accessorImpl.flightMode_Accessor) {
      setFlightMode(*(accessorImpl.flightMode_Accessor));
    } else {
      flightMode_Accessor.reset();
    }
    if (accessorImpl.hasRangeOnHeading()) {
      setRangeOnHeading(accessorImpl.getRangeOnHeading());
    } else {
      clearRangeOnHeading();
    }
    if (accessorImpl.approachAngle_Accessor) {
      setApproachAngle(*(accessorImpl.approachAngle_Accessor));
    } else {
      approachAngle_Accessor.reset();
    }
    if (accessorImpl.targetFinalApproach_Accessor) {
      setTargetFinalApproach(*(accessorImpl.targetFinalApproach_Accessor));
    } else {
      targetFinalApproach_Accessor.reset();
    }
  }
}

void ApproachConditionsType::reset() noexcept {
  flightMode_Accessor.reset();
  clearRangeOnHeading();
  approachAngle_Accessor.reset();
  targetFinalApproach_Accessor.reset();
}

uci::type::StoreFlightModeEnum& ApproachConditionsType::getFlightMode_() const {
  if (flightMode_Accessor) {
    return *flightMode_Accessor;
  }
  throw uci::base::UCIException("Error in getFlightMode(): An attempt was made to get an optional field that was not enabled, call hasFlightMode() to determine if it is safe to call getFlightMode()");
}

const uci::type::StoreFlightModeEnum& ApproachConditionsType::getFlightMode() const {
  return getFlightMode_();
}

uci::type::StoreFlightModeEnum& ApproachConditionsType::getFlightMode() {
  return getFlightMode_();
}

uci::type::ApproachConditionsType& ApproachConditionsType::setFlightMode(const uci::type::StoreFlightModeEnum& accessor) {
  enableFlightMode();
  if (&accessor != flightMode_Accessor.get()) {
    flightMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ApproachConditionsType& ApproachConditionsType::setFlightMode(const uci::type::StoreFlightModeEnum::EnumerationItem value) {
  enableFlightMode().setValue(value);
  return *this;
}

bool ApproachConditionsType::hasFlightMode() const noexcept {
  return static_cast<bool>(flightMode_Accessor);
}

uci::type::StoreFlightModeEnum& ApproachConditionsType::enableFlightMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeFlightModeEnum : type};
  if ((!flightMode_Accessor) || (flightMode_Accessor->getAccessorType() != requestedType)) {
    flightMode_Accessor = StoreFlightModeEnum::create(requestedType);
    if (!flightMode_Accessor) {
      throw uci::base::UCIException("Error in enableFlightMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *flightMode_Accessor;
}

uci::type::ApproachConditionsType& ApproachConditionsType::clearFlightMode() noexcept {
  flightMode_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue ApproachConditionsType::getRangeOnHeading() const {
  if (rangeOnHeading_Accessor) {
    return *rangeOnHeading_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeOnHeading(): An attempt was made to get an optional field that was not enabled, call hasRangeOnHeading() to determine if it is safe to call getRangeOnHeading()");
}

uci::type::ApproachConditionsType& ApproachConditionsType::setRangeOnHeading(uci::type::DistanceTypeValue value) {
  rangeOnHeading_Accessor = value;
  return *this;
}

bool ApproachConditionsType::hasRangeOnHeading() const noexcept {
  return rangeOnHeading_Accessor.has_value();
}

uci::type::ApproachConditionsType& ApproachConditionsType::clearRangeOnHeading() noexcept {
  rangeOnHeading_Accessor.reset();
  return *this;
}

uci::type::ApproachAngleType& ApproachConditionsType::getApproachAngle_() const {
  if (approachAngle_Accessor) {
    return *approachAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getApproachAngle(): An attempt was made to get an optional field that was not enabled, call hasApproachAngle() to determine if it is safe to call getApproachAngle()");
}

const uci::type::ApproachAngleType& ApproachConditionsType::getApproachAngle() const {
  return getApproachAngle_();
}

uci::type::ApproachAngleType& ApproachConditionsType::getApproachAngle() {
  return getApproachAngle_();
}

uci::type::ApproachConditionsType& ApproachConditionsType::setApproachAngle(const uci::type::ApproachAngleType& accessor) {
  enableApproachAngle();
  if (&accessor != approachAngle_Accessor.get()) {
    approachAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApproachConditionsType::hasApproachAngle() const noexcept {
  return static_cast<bool>(approachAngle_Accessor);
}

uci::type::ApproachAngleType& ApproachConditionsType::enableApproachAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approachAngleType : type};
  if ((!approachAngle_Accessor) || (approachAngle_Accessor->getAccessorType() != requestedType)) {
    approachAngle_Accessor = ApproachAngleType::create(requestedType);
    if (!approachAngle_Accessor) {
      throw uci::base::UCIException("Error in enableApproachAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approachAngle_Accessor;
}

uci::type::ApproachConditionsType& ApproachConditionsType::clearApproachAngle() noexcept {
  approachAngle_Accessor.reset();
  return *this;
}

uci::type::TargetFinalApproachType& ApproachConditionsType::getTargetFinalApproach_() const {
  if (targetFinalApproach_Accessor) {
    return *targetFinalApproach_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetFinalApproach(): An attempt was made to get an optional field that was not enabled, call hasTargetFinalApproach() to determine if it is safe to call getTargetFinalApproach()");
}

const uci::type::TargetFinalApproachType& ApproachConditionsType::getTargetFinalApproach() const {
  return getTargetFinalApproach_();
}

uci::type::TargetFinalApproachType& ApproachConditionsType::getTargetFinalApproach() {
  return getTargetFinalApproach_();
}

uci::type::ApproachConditionsType& ApproachConditionsType::setTargetFinalApproach(const uci::type::TargetFinalApproachType& accessor) {
  enableTargetFinalApproach();
  if (&accessor != targetFinalApproach_Accessor.get()) {
    targetFinalApproach_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApproachConditionsType::hasTargetFinalApproach() const noexcept {
  return static_cast<bool>(targetFinalApproach_Accessor);
}

uci::type::TargetFinalApproachType& ApproachConditionsType::enableTargetFinalApproach(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetFinalApproachType : type};
  if ((!targetFinalApproach_Accessor) || (targetFinalApproach_Accessor->getAccessorType() != requestedType)) {
    targetFinalApproach_Accessor = TargetFinalApproachType::create(requestedType);
    if (!targetFinalApproach_Accessor) {
      throw uci::base::UCIException("Error in enableTargetFinalApproach(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetFinalApproach_Accessor;
}

uci::type::ApproachConditionsType& ApproachConditionsType::clearTargetFinalApproach() noexcept {
  targetFinalApproach_Accessor.reset();
  return *this;
}

std::unique_ptr<ApproachConditionsType> ApproachConditionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approachConditionsType : type};
  return (requestedType == uci::type::accessorType::approachConditionsType) ? boost::make_unique<ApproachConditionsType>() : nullptr;
}

/**  */
namespace ApproachConditionsType_Names {

constexpr const char* Extern_Type_Name{"ApproachConditionsType"};
constexpr const char* FlightMode_Name{"FlightMode"};
constexpr const char* RangeOnHeading_Name{"RangeOnHeading"};
constexpr const char* ApproachAngle_Name{"ApproachAngle"};
constexpr const char* TargetFinalApproach_Name{"TargetFinalApproach"};

} // namespace ApproachConditionsType_Names

void ApproachConditionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ApproachConditionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ApproachConditionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ApproachConditionsType_Names::FlightMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFlightMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ApproachConditionsType_Names::RangeOnHeading_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeOnHeading(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ApproachConditionsType_Names::ApproachAngle_Name) {
      ApproachAngleType::deserialize(valueType.second, accessor.enableApproachAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApproachConditionsType_Names::TargetFinalApproach_Name) {
      TargetFinalApproachType::deserialize(valueType.second, accessor.enableTargetFinalApproach(), nodeName, nsPrefix);
    }
  }
}

std::string ApproachConditionsType::serialize(const uci::type::ApproachConditionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ApproachConditionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ApproachConditionsType_Names::Extern_Type_Name);
  }
  if (accessor.hasFlightMode()) {
    StoreFlightModeEnum::serialize(accessor.getFlightMode(), node, ApproachConditionsType_Names::FlightMode_Name, false);
  }
  if (accessor.hasRangeOnHeading()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeOnHeading(), node, ApproachConditionsType_Names::RangeOnHeading_Name);
  }
  if (accessor.hasApproachAngle()) {
    ApproachAngleType::serialize(accessor.getApproachAngle(), node, ApproachConditionsType_Names::ApproachAngle_Name);
  }
  if (accessor.hasTargetFinalApproach()) {
    TargetFinalApproachType::serialize(accessor.getTargetFinalApproach(), node, ApproachConditionsType_Names::TargetFinalApproach_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ApproachConditionsType& ApproachConditionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ApproachConditionsType>().release());
}

uci::type::ApproachConditionsType& ApproachConditionsType::create(const uci::type::ApproachConditionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ApproachConditionsType> newAccessor{boost::make_unique<asb_uci::type::ApproachConditionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ApproachConditionsType::destroy(uci::type::ApproachConditionsType& accessor) {
  delete dynamic_cast<asb_uci::type::ApproachConditionsType*>(&accessor);
}

} // namespace type

} // namespace uci

