/** @file CapabilityCommandTemporalConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CapabilityCommandTemporalConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/SchedulingCriticalityEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SchedulingCriticalityEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityCommandTemporalConstraintsType::CapabilityCommandTemporalConstraintsType() = default;

CapabilityCommandTemporalConstraintsType::~CapabilityCommandTemporalConstraintsType() = default;

void CapabilityCommandTemporalConstraintsType::copy(const uci::type::CapabilityCommandTemporalConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityCommandTemporalConstraintsType::copyImpl(const uci::type::CapabilityCommandTemporalConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityCommandTemporalConstraintsType&>(accessor);
    if (accessorImpl.temporalCriticality_Accessor) {
      setTemporalCriticality(*(accessorImpl.temporalCriticality_Accessor));
    } else {
      temporalCriticality_Accessor.reset();
    }
    if (accessorImpl.startTimeWindow_Accessor) {
      setStartTimeWindow(*(accessorImpl.startTimeWindow_Accessor));
    } else {
      startTimeWindow_Accessor.reset();
    }
    if (accessorImpl.hasWindowOnFirstOnly()) {
      setWindowOnFirstOnly(accessorImpl.getWindowOnFirstOnly());
    } else {
      clearWindowOnFirstOnly();
    }
    if (accessorImpl.endTimeWindow_Accessor) {
      setEndTimeWindow(*(accessorImpl.endTimeWindow_Accessor));
    } else {
      endTimeWindow_Accessor.reset();
    }
  }
}

void CapabilityCommandTemporalConstraintsType::reset() noexcept {
  temporalCriticality_Accessor.reset();
  startTimeWindow_Accessor.reset();
  clearWindowOnFirstOnly();
  endTimeWindow_Accessor.reset();
}

uci::type::SchedulingCriticalityEnum& CapabilityCommandTemporalConstraintsType::getTemporalCriticality_() const {
  if (temporalCriticality_Accessor) {
    return *temporalCriticality_Accessor;
  }
  throw uci::base::UCIException("Error in getTemporalCriticality(): An attempt was made to get an optional field that was not enabled, call hasTemporalCriticality() to determine if it is safe to call getTemporalCriticality()");
}

const uci::type::SchedulingCriticalityEnum& CapabilityCommandTemporalConstraintsType::getTemporalCriticality() const {
  return getTemporalCriticality_();
}

uci::type::SchedulingCriticalityEnum& CapabilityCommandTemporalConstraintsType::getTemporalCriticality() {
  return getTemporalCriticality_();
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::setTemporalCriticality(const uci::type::SchedulingCriticalityEnum& accessor) {
  enableTemporalCriticality();
  if (&accessor != temporalCriticality_Accessor.get()) {
    temporalCriticality_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::setTemporalCriticality(const uci::type::SchedulingCriticalityEnum::EnumerationItem value) {
  enableTemporalCriticality().setValue(value);
  return *this;
}

bool CapabilityCommandTemporalConstraintsType::hasTemporalCriticality() const noexcept {
  return static_cast<bool>(temporalCriticality_Accessor);
}

uci::type::SchedulingCriticalityEnum& CapabilityCommandTemporalConstraintsType::enableTemporalCriticality(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::schedulingCriticalityEnum : type};
  if ((!temporalCriticality_Accessor) || (temporalCriticality_Accessor->getAccessorType() != requestedType)) {
    temporalCriticality_Accessor = SchedulingCriticalityEnum::create(requestedType);
    if (!temporalCriticality_Accessor) {
      throw uci::base::UCIException("Error in enableTemporalCriticality(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *temporalCriticality_Accessor;
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::clearTemporalCriticality() noexcept {
  temporalCriticality_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::getStartTimeWindow_() const {
  if (startTimeWindow_Accessor) {
    return *startTimeWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getStartTimeWindow(): An attempt was made to get an optional field that was not enabled, call hasStartTimeWindow() to determine if it is safe to call getStartTimeWindow()");
}

const uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::getStartTimeWindow() const {
  return getStartTimeWindow_();
}

uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::getStartTimeWindow() {
  return getStartTimeWindow_();
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::setStartTimeWindow(const uci::type::DateTimeRangeType& accessor) {
  enableStartTimeWindow();
  if (&accessor != startTimeWindow_Accessor.get()) {
    startTimeWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityCommandTemporalConstraintsType::hasStartTimeWindow() const noexcept {
  return static_cast<bool>(startTimeWindow_Accessor);
}

uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::enableStartTimeWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!startTimeWindow_Accessor) || (startTimeWindow_Accessor->getAccessorType() != requestedType)) {
    startTimeWindow_Accessor = DateTimeRangeType::create(requestedType);
    if (!startTimeWindow_Accessor) {
      throw uci::base::UCIException("Error in enableStartTimeWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *startTimeWindow_Accessor;
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::clearStartTimeWindow() noexcept {
  startTimeWindow_Accessor.reset();
  return *this;
}

xs::Boolean CapabilityCommandTemporalConstraintsType::getWindowOnFirstOnly() const {
  if (windowOnFirstOnly_Accessor) {
    return *windowOnFirstOnly_Accessor;
  }
  throw uci::base::UCIException("Error in getWindowOnFirstOnly(): An attempt was made to get an optional field that was not enabled, call hasWindowOnFirstOnly() to determine if it is safe to call getWindowOnFirstOnly()");
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::setWindowOnFirstOnly(xs::Boolean value) {
  windowOnFirstOnly_Accessor = value;
  return *this;
}

bool CapabilityCommandTemporalConstraintsType::hasWindowOnFirstOnly() const noexcept {
  return windowOnFirstOnly_Accessor.has_value();
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::clearWindowOnFirstOnly() noexcept {
  windowOnFirstOnly_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::getEndTimeWindow_() const {
  if (endTimeWindow_Accessor) {
    return *endTimeWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getEndTimeWindow(): An attempt was made to get an optional field that was not enabled, call hasEndTimeWindow() to determine if it is safe to call getEndTimeWindow()");
}

const uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::getEndTimeWindow() const {
  return getEndTimeWindow_();
}

uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::getEndTimeWindow() {
  return getEndTimeWindow_();
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::setEndTimeWindow(const uci::type::DateTimeRangeType& accessor) {
  enableEndTimeWindow();
  if (&accessor != endTimeWindow_Accessor.get()) {
    endTimeWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityCommandTemporalConstraintsType::hasEndTimeWindow() const noexcept {
  return static_cast<bool>(endTimeWindow_Accessor);
}

uci::type::DateTimeRangeType& CapabilityCommandTemporalConstraintsType::enableEndTimeWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!endTimeWindow_Accessor) || (endTimeWindow_Accessor->getAccessorType() != requestedType)) {
    endTimeWindow_Accessor = DateTimeRangeType::create(requestedType);
    if (!endTimeWindow_Accessor) {
      throw uci::base::UCIException("Error in enableEndTimeWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *endTimeWindow_Accessor;
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::clearEndTimeWindow() noexcept {
  endTimeWindow_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilityCommandTemporalConstraintsType> CapabilityCommandTemporalConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandTemporalConstraintsType : type};
  return (requestedType == uci::type::accessorType::capabilityCommandTemporalConstraintsType) ? boost::make_unique<CapabilityCommandTemporalConstraintsType>() : nullptr;
}

/**  */
namespace CapabilityCommandTemporalConstraintsType_Names {

constexpr const char* Extern_Type_Name{"CapabilityCommandTemporalConstraintsType"};
constexpr const char* TemporalCriticality_Name{"TemporalCriticality"};
constexpr const char* StartTimeWindow_Name{"StartTimeWindow"};
constexpr const char* WindowOnFirstOnly_Name{"WindowOnFirstOnly"};
constexpr const char* EndTimeWindow_Name{"EndTimeWindow"};

} // namespace CapabilityCommandTemporalConstraintsType_Names

void CapabilityCommandTemporalConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityCommandTemporalConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityCommandTemporalConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityCommandTemporalConstraintsType_Names::TemporalCriticality_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTemporalCriticality().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityCommandTemporalConstraintsType_Names::StartTimeWindow_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableStartTimeWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityCommandTemporalConstraintsType_Names::WindowOnFirstOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindowOnFirstOnly(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CapabilityCommandTemporalConstraintsType_Names::EndTimeWindow_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableEndTimeWindow(), nodeName, nsPrefix);
    }
  }
}

std::string CapabilityCommandTemporalConstraintsType::serialize(const uci::type::CapabilityCommandTemporalConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityCommandTemporalConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityCommandTemporalConstraintsType_Names::Extern_Type_Name);
  }
  if (accessor.hasTemporalCriticality()) {
    SchedulingCriticalityEnum::serialize(accessor.getTemporalCriticality(), node, CapabilityCommandTemporalConstraintsType_Names::TemporalCriticality_Name, false);
  }
  if (accessor.hasStartTimeWindow()) {
    DateTimeRangeType::serialize(accessor.getStartTimeWindow(), node, CapabilityCommandTemporalConstraintsType_Names::StartTimeWindow_Name);
  }
  if (accessor.hasWindowOnFirstOnly()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getWindowOnFirstOnly(), node, CapabilityCommandTemporalConstraintsType_Names::WindowOnFirstOnly_Name);
  }
  if (accessor.hasEndTimeWindow()) {
    DateTimeRangeType::serialize(accessor.getEndTimeWindow(), node, CapabilityCommandTemporalConstraintsType_Names::EndTimeWindow_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityCommandTemporalConstraintsType>().release());
}

uci::type::CapabilityCommandTemporalConstraintsType& CapabilityCommandTemporalConstraintsType::create(const uci::type::CapabilityCommandTemporalConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityCommandTemporalConstraintsType> newAccessor{boost::make_unique<asb_uci::type::CapabilityCommandTemporalConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityCommandTemporalConstraintsType::destroy(uci::type::CapabilityCommandTemporalConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityCommandTemporalConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

