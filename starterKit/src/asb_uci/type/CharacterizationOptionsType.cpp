/** @file CharacterizationOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CharacterizationOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CharacterizationChoiceType.h"
#include "../../../include/asb_uci/type/CharacterizationProductTypeEnum.h"
#include "../../../include/asb_uci/type/LogicalOperatorEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CharacterizationChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CharacterizationOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CharacterizationProductTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LogicalOperatorEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CharacterizationOptionsType::CharacterizationOptionsType()
  : characterizationType_Accessor{boost::make_unique<CharacterizationType>(1, 10)},
    logicalOperator_Accessor{boost::make_unique<LogicalOperatorEnum>()} {
}

CharacterizationOptionsType::~CharacterizationOptionsType() = default;

void CharacterizationOptionsType::copy(const uci::type::CharacterizationOptionsType& accessor) {
  copyImpl(accessor, false);
}

void CharacterizationOptionsType::copyImpl(const uci::type::CharacterizationOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CharacterizationOptionsType&>(accessor);
    setCharacterizationType(*(accessorImpl.characterizationType_Accessor));
    setLogicalOperator(*(accessorImpl.logicalOperator_Accessor));
    if (accessorImpl.characterizationProduct_Accessor) {
      setCharacterizationProduct(*(accessorImpl.characterizationProduct_Accessor));
    } else {
      characterizationProduct_Accessor.reset();
    }
  }
}

void CharacterizationOptionsType::reset() noexcept {
  characterizationType_Accessor->reset();
  logicalOperator_Accessor->reset();
  characterizationProduct_Accessor.reset();
}

const uci::type::CharacterizationOptionsType::CharacterizationType& CharacterizationOptionsType::getCharacterizationType() const {
  return *characterizationType_Accessor;
}

uci::type::CharacterizationOptionsType::CharacterizationType& CharacterizationOptionsType::getCharacterizationType() {
  return *characterizationType_Accessor;
}

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::setCharacterizationType(const uci::type::CharacterizationOptionsType::CharacterizationType& accessor) {
  if (&accessor != characterizationType_Accessor.get()) {
    characterizationType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::LogicalOperatorEnum& CharacterizationOptionsType::getLogicalOperator() const {
  return *logicalOperator_Accessor;
}

uci::type::LogicalOperatorEnum& CharacterizationOptionsType::getLogicalOperator() {
  return *logicalOperator_Accessor;
}

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::setLogicalOperator(const uci::type::LogicalOperatorEnum& accessor) {
  if (&accessor != logicalOperator_Accessor.get()) {
    logicalOperator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::setLogicalOperator(uci::type::LogicalOperatorEnum::EnumerationItem value) {
  logicalOperator_Accessor->setValue(value);
  return *this;
}


uci::type::CharacterizationProductTypeEnum& CharacterizationOptionsType::getCharacterizationProduct_() const {
  if (characterizationProduct_Accessor) {
    return *characterizationProduct_Accessor;
  }
  throw uci::base::UCIException("Error in getCharacterizationProduct(): An attempt was made to get an optional field that was not enabled, call hasCharacterizationProduct() to determine if it is safe to call getCharacterizationProduct()");
}

const uci::type::CharacterizationProductTypeEnum& CharacterizationOptionsType::getCharacterizationProduct() const {
  return getCharacterizationProduct_();
}

uci::type::CharacterizationProductTypeEnum& CharacterizationOptionsType::getCharacterizationProduct() {
  return getCharacterizationProduct_();
}

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::setCharacterizationProduct(const uci::type::CharacterizationProductTypeEnum& accessor) {
  enableCharacterizationProduct();
  if (&accessor != characterizationProduct_Accessor.get()) {
    characterizationProduct_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::setCharacterizationProduct(const uci::type::CharacterizationProductTypeEnum::EnumerationItem value) {
  enableCharacterizationProduct().setValue(value);
  return *this;
}

bool CharacterizationOptionsType::hasCharacterizationProduct() const noexcept {
  return static_cast<bool>(characterizationProduct_Accessor);
}

uci::type::CharacterizationProductTypeEnum& CharacterizationOptionsType::enableCharacterizationProduct(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::characterizationProductTypeEnum : type};
  if ((!characterizationProduct_Accessor) || (characterizationProduct_Accessor->getAccessorType() != requestedType)) {
    characterizationProduct_Accessor = CharacterizationProductTypeEnum::create(requestedType);
    if (!characterizationProduct_Accessor) {
      throw uci::base::UCIException("Error in enableCharacterizationProduct(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *characterizationProduct_Accessor;
}

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::clearCharacterizationProduct() noexcept {
  characterizationProduct_Accessor.reset();
  return *this;
}

std::unique_ptr<CharacterizationOptionsType> CharacterizationOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::characterizationOptionsType : type};
  return (requestedType == uci::type::accessorType::characterizationOptionsType) ? boost::make_unique<CharacterizationOptionsType>() : nullptr;
}

/**  */
namespace CharacterizationOptionsType_Names {

constexpr const char* Extern_Type_Name{"CharacterizationOptionsType"};
constexpr const char* CharacterizationType_Name{"CharacterizationType"};
constexpr const char* LogicalOperator_Name{"LogicalOperator"};
constexpr const char* CharacterizationProduct_Name{"CharacterizationProduct"};

} // namespace CharacterizationOptionsType_Names

void CharacterizationOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CharacterizationOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CharacterizationOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CharacterizationOptionsType_Names::CharacterizationType_Name) {
      uci::type::CharacterizationOptionsType::CharacterizationType& boundedList = accessor.getCharacterizationType();
      const uci::type::CharacterizationOptionsType::CharacterizationType::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::CharacterizationChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationOptionsType_Names::LogicalOperator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLogicalOperator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CharacterizationOptionsType_Names::CharacterizationProduct_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCharacterizationProduct().setValueFromName(*value);
      }
    }
  }
}

std::string CharacterizationOptionsType::serialize(const uci::type::CharacterizationOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CharacterizationOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CharacterizationOptionsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CharacterizationOptionsType::CharacterizationType& boundedList = accessor.getCharacterizationType();
    for (uci::type::CharacterizationOptionsType::CharacterizationType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CharacterizationChoiceType::serialize(boundedList.at(i), node, CharacterizationOptionsType_Names::CharacterizationType_Name);
    }
  }
  LogicalOperatorEnum::serialize(accessor.getLogicalOperator(), node, CharacterizationOptionsType_Names::LogicalOperator_Name, false);
  if (accessor.hasCharacterizationProduct()) {
    CharacterizationProductTypeEnum::serialize(accessor.getCharacterizationProduct(), node, CharacterizationOptionsType_Names::CharacterizationProduct_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CharacterizationOptionsType>().release());
}

uci::type::CharacterizationOptionsType& CharacterizationOptionsType::create(const uci::type::CharacterizationOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CharacterizationOptionsType> newAccessor{boost::make_unique<asb_uci::type::CharacterizationOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CharacterizationOptionsType::destroy(uci::type::CharacterizationOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::CharacterizationOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

