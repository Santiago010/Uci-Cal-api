/** @file OrbitalSurveillanceCollectionRequirementsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalSurveillanceCollectionRequirementsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DeploymentDetectionType.h"
#include "asb_uci/type/ManeuverDetectionType.h"
#include "asb_uci/type/MetricCollectionType.h"
#include "asb_uci/type/MultiObjectType.h"
#include "asb_uci/type/OrbitAccuracyType.h"
#include "asb_uci/type/SensorCharacterizationChoiceType.h"
#include "asb_uci/type/SpeedRangeType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DeploymentDetectionType.h"
#include "uci/type/ManeuverDetectionType.h"
#include "uci/type/MetricCollectionType.h"
#include "uci/type/MultiObjectType.h"
#include "uci/type/OrbitAccuracyType.h"
#include "uci/type/OrbitalSurveillanceCollectionRequirementsType.h"
#include "uci/type/SensorCharacterizationChoiceType.h"
#include "uci/type/SpeedRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceCollectionRequirementsType::OrbitalSurveillanceCollectionRequirementsType() = default;

OrbitalSurveillanceCollectionRequirementsType::~OrbitalSurveillanceCollectionRequirementsType() = default;

void OrbitalSurveillanceCollectionRequirementsType::copy(const uci::type::OrbitalSurveillanceCollectionRequirementsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceCollectionRequirementsType::copyImpl(const uci::type::OrbitalSurveillanceCollectionRequirementsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceCollectionRequirementsType&>(accessor);
    if (accessorImpl.metricCollection_Accessor) {
      setMetricCollection(*(accessorImpl.metricCollection_Accessor));
    } else {
      metricCollection_Accessor.reset();
    }
    if (accessorImpl.search_Accessor) {
      setSearch(*(accessorImpl.search_Accessor));
    } else {
      search_Accessor.reset();
    }
    if (accessorImpl.orbitDetermination_Accessor) {
      setOrbitDetermination(*(accessorImpl.orbitDetermination_Accessor));
    } else {
      orbitDetermination_Accessor.reset();
    }
    if (accessorImpl.characterization_Accessor) {
      setCharacterization(*(accessorImpl.characterization_Accessor));
    } else {
      characterization_Accessor.reset();
    }
    if (accessorImpl.multiObject_Accessor) {
      setMultiObject(*(accessorImpl.multiObject_Accessor));
    } else {
      multiObject_Accessor.reset();
    }
    if (accessorImpl.maneuverDetection_Accessor) {
      setManeuverDetection(*(accessorImpl.maneuverDetection_Accessor));
    } else {
      maneuverDetection_Accessor.reset();
    }
    if (accessorImpl.deploymentDetection_Accessor) {
      setDeploymentDetection(*(accessorImpl.deploymentDetection_Accessor));
    } else {
      deploymentDetection_Accessor.reset();
    }
  }
}

void OrbitalSurveillanceCollectionRequirementsType::reset() noexcept {
  metricCollection_Accessor.reset();
  search_Accessor.reset();
  orbitDetermination_Accessor.reset();
  characterization_Accessor.reset();
  multiObject_Accessor.reset();
  maneuverDetection_Accessor.reset();
  deploymentDetection_Accessor.reset();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType::OrbitalSurveillanceCollectionRequirementsTypeChoice OrbitalSurveillanceCollectionRequirementsType::getOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal() const noexcept {
  if (metricCollection_Accessor) {
    return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_METRICCOLLECTION;
  }
  if (search_Accessor) {
    return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_SEARCH;
  }
  if (orbitDetermination_Accessor) {
    return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_ORBITDETERMINATION;
  }
  if (characterization_Accessor) {
    return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_CHARACTERIZATION;
  }
  if (multiObject_Accessor) {
    return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_MULTIOBJECT;
  }
  if (maneuverDetection_Accessor) {
    return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_MANEUVERDETECTION;
  }
  if (deploymentDetection_Accessor) {
    return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_DEPLOYMENTDETECTION;
  }
  return ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_NONE;
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal(uci::type::OrbitalSurveillanceCollectionRequirementsType::OrbitalSurveillanceCollectionRequirementsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_METRICCOLLECTION:
      chooseMetricCollection("setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_SEARCH:
      chooseSearch("setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_ORBITDETERMINATION:
      chooseOrbitDetermination("setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_CHARACTERIZATION:
      chooseCharacterization("setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_MULTIOBJECT:
      chooseMultiObject("setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_MANEUVERDETECTION:
      chooseManeuverDetection("setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_DEPLOYMENTDETECTION:
      chooseDeploymentDetection("setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MetricCollectionType& OrbitalSurveillanceCollectionRequirementsType::getMetricCollection_() const {
  if (metricCollection_Accessor) {
    return *metricCollection_Accessor;
  }
  throw uci::base::UCIException("Error in getMetricCollection(): Unable to get MetricCollection, field not selected");
}

const uci::type::MetricCollectionType& OrbitalSurveillanceCollectionRequirementsType::getMetricCollection() const {
  return getMetricCollection_();
}

uci::type::MetricCollectionType& OrbitalSurveillanceCollectionRequirementsType::getMetricCollection() {
  return getMetricCollection_();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setMetricCollection(const uci::type::MetricCollectionType& accessor) {
  chooseMetricCollection();
  if (&accessor != metricCollection_Accessor.get()) {
    metricCollection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceCollectionRequirementsType::isMetricCollection() const noexcept {
  return static_cast<bool>(metricCollection_Accessor);
}

uci::type::MetricCollectionType& OrbitalSurveillanceCollectionRequirementsType::chooseMetricCollection(const std::string& method, uci::base::accessorType::AccessorType type) {
  search_Accessor.reset();
  orbitDetermination_Accessor.reset();
  characterization_Accessor.reset();
  multiObject_Accessor.reset();
  maneuverDetection_Accessor.reset();
  deploymentDetection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::metricCollectionType : type};
  if ((!metricCollection_Accessor) || (metricCollection_Accessor->getAccessorType() != requestedType)) {
    metricCollection_Accessor = MetricCollectionType::create(type);
    if (!metricCollection_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metricCollection_Accessor;
}

uci::type::MetricCollectionType& OrbitalSurveillanceCollectionRequirementsType::chooseMetricCollection(uci::base::accessorType::AccessorType type) {
  return chooseMetricCollection("chooseMetricCollection", type);
}

uci::type::SpeedRangeType& OrbitalSurveillanceCollectionRequirementsType::getSearch_() const {
  if (search_Accessor) {
    return *search_Accessor;
  }
  throw uci::base::UCIException("Error in getSearch(): Unable to get Search, field not selected");
}

const uci::type::SpeedRangeType& OrbitalSurveillanceCollectionRequirementsType::getSearch() const {
  return getSearch_();
}

uci::type::SpeedRangeType& OrbitalSurveillanceCollectionRequirementsType::getSearch() {
  return getSearch_();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setSearch(const uci::type::SpeedRangeType& accessor) {
  chooseSearch();
  if (&accessor != search_Accessor.get()) {
    search_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceCollectionRequirementsType::isSearch() const noexcept {
  return static_cast<bool>(search_Accessor);
}

uci::type::SpeedRangeType& OrbitalSurveillanceCollectionRequirementsType::chooseSearch(const std::string& method, uci::base::accessorType::AccessorType type) {
  metricCollection_Accessor.reset();
  orbitDetermination_Accessor.reset();
  characterization_Accessor.reset();
  multiObject_Accessor.reset();
  maneuverDetection_Accessor.reset();
  deploymentDetection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::speedRangeType : type};
  if ((!search_Accessor) || (search_Accessor->getAccessorType() != requestedType)) {
    search_Accessor = SpeedRangeType::create(type);
    if (!search_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *search_Accessor;
}

uci::type::SpeedRangeType& OrbitalSurveillanceCollectionRequirementsType::chooseSearch(uci::base::accessorType::AccessorType type) {
  return chooseSearch("chooseSearch", type);
}

uci::type::OrbitAccuracyType& OrbitalSurveillanceCollectionRequirementsType::getOrbitDetermination_() const {
  if (orbitDetermination_Accessor) {
    return *orbitDetermination_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitDetermination(): Unable to get OrbitDetermination, field not selected");
}

const uci::type::OrbitAccuracyType& OrbitalSurveillanceCollectionRequirementsType::getOrbitDetermination() const {
  return getOrbitDetermination_();
}

uci::type::OrbitAccuracyType& OrbitalSurveillanceCollectionRequirementsType::getOrbitDetermination() {
  return getOrbitDetermination_();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setOrbitDetermination(const uci::type::OrbitAccuracyType& accessor) {
  chooseOrbitDetermination();
  if (&accessor != orbitDetermination_Accessor.get()) {
    orbitDetermination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceCollectionRequirementsType::isOrbitDetermination() const noexcept {
  return static_cast<bool>(orbitDetermination_Accessor);
}

uci::type::OrbitAccuracyType& OrbitalSurveillanceCollectionRequirementsType::chooseOrbitDetermination(const std::string& method, uci::base::accessorType::AccessorType type) {
  metricCollection_Accessor.reset();
  search_Accessor.reset();
  characterization_Accessor.reset();
  multiObject_Accessor.reset();
  maneuverDetection_Accessor.reset();
  deploymentDetection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitAccuracyType : type};
  if ((!orbitDetermination_Accessor) || (orbitDetermination_Accessor->getAccessorType() != requestedType)) {
    orbitDetermination_Accessor = OrbitAccuracyType::create(type);
    if (!orbitDetermination_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitDetermination_Accessor;
}

uci::type::OrbitAccuracyType& OrbitalSurveillanceCollectionRequirementsType::chooseOrbitDetermination(uci::base::accessorType::AccessorType type) {
  return chooseOrbitDetermination("chooseOrbitDetermination", type);
}

uci::type::SensorCharacterizationChoiceType& OrbitalSurveillanceCollectionRequirementsType::getCharacterization_() const {
  if (characterization_Accessor) {
    return *characterization_Accessor;
  }
  throw uci::base::UCIException("Error in getCharacterization(): Unable to get Characterization, field not selected");
}

const uci::type::SensorCharacterizationChoiceType& OrbitalSurveillanceCollectionRequirementsType::getCharacterization() const {
  return getCharacterization_();
}

uci::type::SensorCharacterizationChoiceType& OrbitalSurveillanceCollectionRequirementsType::getCharacterization() {
  return getCharacterization_();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setCharacterization(const uci::type::SensorCharacterizationChoiceType& accessor) {
  chooseCharacterization(accessor.getAccessorType());
  if (&accessor != characterization_Accessor.get()) {
    characterization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceCollectionRequirementsType::isCharacterization() const noexcept {
  return static_cast<bool>(characterization_Accessor);
}

uci::type::SensorCharacterizationChoiceType& OrbitalSurveillanceCollectionRequirementsType::chooseCharacterization(const std::string& method, uci::base::accessorType::AccessorType type) {
  metricCollection_Accessor.reset();
  search_Accessor.reset();
  orbitDetermination_Accessor.reset();
  multiObject_Accessor.reset();
  maneuverDetection_Accessor.reset();
  deploymentDetection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorCharacterizationChoiceType : type};
  if ((!characterization_Accessor) || (characterization_Accessor->getAccessorType() != requestedType)) {
    characterization_Accessor = SensorCharacterizationChoiceType::create(type);
    if (!characterization_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *characterization_Accessor;
}

uci::type::SensorCharacterizationChoiceType& OrbitalSurveillanceCollectionRequirementsType::chooseCharacterization(uci::base::accessorType::AccessorType type) {
  return chooseCharacterization("chooseCharacterization", type);
}

uci::type::MultiObjectType& OrbitalSurveillanceCollectionRequirementsType::getMultiObject_() const {
  if (multiObject_Accessor) {
    return *multiObject_Accessor;
  }
  throw uci::base::UCIException("Error in getMultiObject(): Unable to get MultiObject, field not selected");
}

const uci::type::MultiObjectType& OrbitalSurveillanceCollectionRequirementsType::getMultiObject() const {
  return getMultiObject_();
}

uci::type::MultiObjectType& OrbitalSurveillanceCollectionRequirementsType::getMultiObject() {
  return getMultiObject_();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setMultiObject(const uci::type::MultiObjectType& accessor) {
  chooseMultiObject("setMultiObject", accessor.getAccessorType());
  if (&accessor != multiObject_Accessor.get()) {
    multiObject_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitalSurveillanceCollectionRequirementsType::isMultiObject() const noexcept {
  return static_cast<bool>(multiObject_Accessor);
}

uci::type::MultiObjectType& OrbitalSurveillanceCollectionRequirementsType::chooseMultiObject(const std::string& method, uci::base::accessorType::AccessorType type) {
  metricCollection_Accessor.reset();
  search_Accessor.reset();
  orbitDetermination_Accessor.reset();
  characterization_Accessor.reset();
  maneuverDetection_Accessor.reset();
  deploymentDetection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::multiObjectType : type};
  if ((!multiObject_Accessor) || (multiObject_Accessor->getAccessorType() != requestedType)) {
    multiObject_Accessor = MultiObjectType::create(type);
    if (!multiObject_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *multiObject_Accessor;
}

uci::type::MultiObjectType& OrbitalSurveillanceCollectionRequirementsType::chooseMultiObject(uci::base::accessorType::AccessorType type) {
  return chooseMultiObject("chooseMultiObject", type);
}

uci::type::ManeuverDetectionType& OrbitalSurveillanceCollectionRequirementsType::getManeuverDetection_() const {
  if (maneuverDetection_Accessor) {
    return *maneuverDetection_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuverDetection(): Unable to get ManeuverDetection, field not selected");
}

const uci::type::ManeuverDetectionType& OrbitalSurveillanceCollectionRequirementsType::getManeuverDetection() const {
  return getManeuverDetection_();
}

uci::type::ManeuverDetectionType& OrbitalSurveillanceCollectionRequirementsType::getManeuverDetection() {
  return getManeuverDetection_();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setManeuverDetection(const uci::type::ManeuverDetectionType& accessor) {
  chooseManeuverDetection();
  if (&accessor != maneuverDetection_Accessor.get()) {
    maneuverDetection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceCollectionRequirementsType::isManeuverDetection() const noexcept {
  return static_cast<bool>(maneuverDetection_Accessor);
}

uci::type::ManeuverDetectionType& OrbitalSurveillanceCollectionRequirementsType::chooseManeuverDetection(const std::string& method, uci::base::accessorType::AccessorType type) {
  metricCollection_Accessor.reset();
  search_Accessor.reset();
  orbitDetermination_Accessor.reset();
  characterization_Accessor.reset();
  multiObject_Accessor.reset();
  deploymentDetection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::maneuverDetectionType : type};
  if ((!maneuverDetection_Accessor) || (maneuverDetection_Accessor->getAccessorType() != requestedType)) {
    maneuverDetection_Accessor = ManeuverDetectionType::create(type);
    if (!maneuverDetection_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuverDetection_Accessor;
}

uci::type::ManeuverDetectionType& OrbitalSurveillanceCollectionRequirementsType::chooseManeuverDetection(uci::base::accessorType::AccessorType type) {
  return chooseManeuverDetection("chooseManeuverDetection", type);
}

uci::type::DeploymentDetectionType& OrbitalSurveillanceCollectionRequirementsType::getDeploymentDetection_() const {
  if (deploymentDetection_Accessor) {
    return *deploymentDetection_Accessor;
  }
  throw uci::base::UCIException("Error in getDeploymentDetection(): Unable to get DeploymentDetection, field not selected");
}

const uci::type::DeploymentDetectionType& OrbitalSurveillanceCollectionRequirementsType::getDeploymentDetection() const {
  return getDeploymentDetection_();
}

uci::type::DeploymentDetectionType& OrbitalSurveillanceCollectionRequirementsType::getDeploymentDetection() {
  return getDeploymentDetection_();
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::setDeploymentDetection(const uci::type::DeploymentDetectionType& accessor) {
  chooseDeploymentDetection();
  if (&accessor != deploymentDetection_Accessor.get()) {
    deploymentDetection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceCollectionRequirementsType::isDeploymentDetection() const noexcept {
  return static_cast<bool>(deploymentDetection_Accessor);
}

uci::type::DeploymentDetectionType& OrbitalSurveillanceCollectionRequirementsType::chooseDeploymentDetection(const std::string& method, uci::base::accessorType::AccessorType type) {
  metricCollection_Accessor.reset();
  search_Accessor.reset();
  orbitDetermination_Accessor.reset();
  characterization_Accessor.reset();
  multiObject_Accessor.reset();
  maneuverDetection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::deploymentDetectionType : type};
  if ((!deploymentDetection_Accessor) || (deploymentDetection_Accessor->getAccessorType() != requestedType)) {
    deploymentDetection_Accessor = DeploymentDetectionType::create(type);
    if (!deploymentDetection_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *deploymentDetection_Accessor;
}

uci::type::DeploymentDetectionType& OrbitalSurveillanceCollectionRequirementsType::chooseDeploymentDetection(uci::base::accessorType::AccessorType type) {
  return chooseDeploymentDetection("chooseDeploymentDetection", type);
}

std::unique_ptr<OrbitalSurveillanceCollectionRequirementsType> OrbitalSurveillanceCollectionRequirementsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceCollectionRequirementsType : type};
  return (requestedType == uci::type::accessorType::orbitalSurveillanceCollectionRequirementsType) ? boost::make_unique<OrbitalSurveillanceCollectionRequirementsType>() : nullptr;
}

/**  */
namespace OrbitalSurveillanceCollectionRequirementsType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceCollectionRequirementsType"};
constexpr const char* MetricCollection_Name{"MetricCollection"};
constexpr const char* Search_Name{"Search"};
constexpr const char* OrbitDetermination_Name{"OrbitDetermination"};
constexpr const char* Characterization_Name{"Characterization"};
constexpr const char* MultiObject_Name{"MultiObject"};
constexpr const char* ManeuverDetection_Name{"ManeuverDetection"};
constexpr const char* DeploymentDetection_Name{"DeploymentDetection"};

} // namespace OrbitalSurveillanceCollectionRequirementsType_Names

void OrbitalSurveillanceCollectionRequirementsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceCollectionRequirementsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceCollectionRequirementsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceCollectionRequirementsType_Names::MetricCollection_Name) {
      MetricCollectionType::deserialize(valueType.second, accessor.chooseMetricCollection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceCollectionRequirementsType_Names::Search_Name) {
      SpeedRangeType::deserialize(valueType.second, accessor.chooseSearch(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceCollectionRequirementsType_Names::OrbitDetermination_Name) {
      OrbitAccuracyType::deserialize(valueType.second, accessor.chooseOrbitDetermination(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceCollectionRequirementsType_Names::Characterization_Name) {
      SensorCharacterizationChoiceType::deserialize(valueType.second, accessor.chooseCharacterization(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceCollectionRequirementsType_Names::MultiObject_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseMultiObject(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceCollectionRequirementsType_Names::ManeuverDetection_Name) {
      ManeuverDetectionType::deserialize(valueType.second, accessor.chooseManeuverDetection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceCollectionRequirementsType_Names::DeploymentDetection_Name) {
      DeploymentDetectionType::deserialize(valueType.second, accessor.chooseDeploymentDetection(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalSurveillanceCollectionRequirementsType::serialize(const uci::type::OrbitalSurveillanceCollectionRequirementsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceCollectionRequirementsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceCollectionRequirementsType_Names::Extern_Type_Name);
  }
  if (accessor.isMetricCollection()) {
    MetricCollectionType::serialize(accessor.getMetricCollection(), node, OrbitalSurveillanceCollectionRequirementsType_Names::MetricCollection_Name);
  } else if (accessor.isSearch()) {
    SpeedRangeType::serialize(accessor.getSearch(), node, OrbitalSurveillanceCollectionRequirementsType_Names::Search_Name);
  } else if (accessor.isOrbitDetermination()) {
    OrbitAccuracyType::serialize(accessor.getOrbitDetermination(), node, OrbitalSurveillanceCollectionRequirementsType_Names::OrbitDetermination_Name);
  } else if (accessor.isCharacterization()) {
    SensorCharacterizationChoiceType::serialize(accessor.getCharacterization(), node, OrbitalSurveillanceCollectionRequirementsType_Names::Characterization_Name);
  } else if (accessor.isMultiObject()) {
    MultiObjectType::serialize(accessor.getMultiObject(), node, OrbitalSurveillanceCollectionRequirementsType_Names::MultiObject_Name);
  } else if (accessor.isManeuverDetection()) {
    ManeuverDetectionType::serialize(accessor.getManeuverDetection(), node, OrbitalSurveillanceCollectionRequirementsType_Names::ManeuverDetection_Name);
  } else if (accessor.isDeploymentDetection()) {
    DeploymentDetectionType::serialize(accessor.getDeploymentDetection(), node, OrbitalSurveillanceCollectionRequirementsType_Names::DeploymentDetection_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceCollectionRequirementsType>().release());
}

uci::type::OrbitalSurveillanceCollectionRequirementsType& OrbitalSurveillanceCollectionRequirementsType::create(const uci::type::OrbitalSurveillanceCollectionRequirementsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceCollectionRequirementsType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceCollectionRequirementsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceCollectionRequirementsType::destroy(uci::type::OrbitalSurveillanceCollectionRequirementsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceCollectionRequirementsType*>(&accessor);
}

} // namespace type

} // namespace uci

