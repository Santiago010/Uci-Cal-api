/** @file ResponseActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ResponseActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityBaseType.h"
#include "asb_uci/type/MissionContingencyAlertID_Type.h"
#include "asb_uci/type/PlansReferenceType.h"
#include "asb_uci/type/RequirementTemplateInstantiationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/MissionContingencyAlertID_Type.h"
#include "uci/type/PlansReferenceType.h"
#include "uci/type/RequirementTemplateInstantiationType.h"
#include "uci/type/ResponseActivityType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResponseActivityType::ResponseActivityType()
  : requirementInstantiation_Accessor{boost::make_unique<RequirementInstantiation>(0, SIZE_MAX)} {
}

ResponseActivityType::~ResponseActivityType() = default;

void ResponseActivityType::copy(const uci::type::ResponseActivityType& accessor) {
  copyImpl(accessor, false);
}

void ResponseActivityType::copyImpl(const uci::type::ResponseActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ResponseActivityType&>(accessor);
    setInstantiationTime(accessorImpl.instantiationTime_Accessor);
    if (accessorImpl.hasOptionIndex()) {
      setOptionIndex(accessorImpl.getOptionIndex());
    } else {
      clearOptionIndex();
    }
    setRequirementInstantiation(*(accessorImpl.requirementInstantiation_Accessor));
    if (accessorImpl.activatedPlans_Accessor) {
      setActivatedPlans(*(accessorImpl.activatedPlans_Accessor));
    } else {
      activatedPlans_Accessor.reset();
    }
    if (accessorImpl.alertID_Accessor) {
      setAlertID(*(accessorImpl.alertID_Accessor));
    } else {
      alertID_Accessor.reset();
    }
  }
}

void ResponseActivityType::reset() noexcept {
  ActivityBaseType::reset();
  instantiationTime_Accessor = 0;
  clearOptionIndex();
  requirementInstantiation_Accessor->reset();
  activatedPlans_Accessor.reset();
  alertID_Accessor.reset();
}

uci::type::DateTimeTypeValue ResponseActivityType::getInstantiationTime() const {
  return instantiationTime_Accessor;
}

uci::type::ResponseActivityType& ResponseActivityType::setInstantiationTime(uci::type::DateTimeTypeValue value) {
  instantiationTime_Accessor = value;
  return *this;
}


xs::UnsignedInt ResponseActivityType::getOptionIndex() const {
  if (optionIndex_Accessor) {
    return *optionIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getOptionIndex(): An attempt was made to get an optional field that was not enabled, call hasOptionIndex() to determine if it is safe to call getOptionIndex()");
}

uci::type::ResponseActivityType& ResponseActivityType::setOptionIndex(xs::UnsignedInt value) {
  optionIndex_Accessor = value;
  return *this;
}

bool ResponseActivityType::hasOptionIndex() const noexcept {
  return optionIndex_Accessor.has_value();
}

uci::type::ResponseActivityType& ResponseActivityType::clearOptionIndex() noexcept {
  optionIndex_Accessor.reset();
  return *this;
}

const uci::type::ResponseActivityType::RequirementInstantiation& ResponseActivityType::getRequirementInstantiation() const {
  return *requirementInstantiation_Accessor;
}

uci::type::ResponseActivityType::RequirementInstantiation& ResponseActivityType::getRequirementInstantiation() {
  return *requirementInstantiation_Accessor;
}

uci::type::ResponseActivityType& ResponseActivityType::setRequirementInstantiation(const uci::type::ResponseActivityType::RequirementInstantiation& accessor) {
  if (&accessor != requirementInstantiation_Accessor.get()) {
    requirementInstantiation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlansReferenceType& ResponseActivityType::getActivatedPlans_() const {
  if (activatedPlans_Accessor) {
    return *activatedPlans_Accessor;
  }
  throw uci::base::UCIException("Error in getActivatedPlans(): An attempt was made to get an optional field that was not enabled, call hasActivatedPlans() to determine if it is safe to call getActivatedPlans()");
}

const uci::type::PlansReferenceType& ResponseActivityType::getActivatedPlans() const {
  return getActivatedPlans_();
}

uci::type::PlansReferenceType& ResponseActivityType::getActivatedPlans() {
  return getActivatedPlans_();
}

uci::type::ResponseActivityType& ResponseActivityType::setActivatedPlans(const uci::type::PlansReferenceType& accessor) {
  enableActivatedPlans();
  if (&accessor != activatedPlans_Accessor.get()) {
    activatedPlans_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseActivityType::hasActivatedPlans() const noexcept {
  return static_cast<bool>(activatedPlans_Accessor);
}

uci::type::PlansReferenceType& ResponseActivityType::enableActivatedPlans(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plansReferenceType : type};
  if ((!activatedPlans_Accessor) || (activatedPlans_Accessor->getAccessorType() != requestedType)) {
    activatedPlans_Accessor = PlansReferenceType::create(requestedType);
    if (!activatedPlans_Accessor) {
      throw uci::base::UCIException("Error in enableActivatedPlans(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activatedPlans_Accessor;
}

uci::type::ResponseActivityType& ResponseActivityType::clearActivatedPlans() noexcept {
  activatedPlans_Accessor.reset();
  return *this;
}

uci::type::MissionContingencyAlertID_Type& ResponseActivityType::getAlertID_() const {
  if (alertID_Accessor) {
    return *alertID_Accessor;
  }
  throw uci::base::UCIException("Error in getAlertID(): An attempt was made to get an optional field that was not enabled, call hasAlertID() to determine if it is safe to call getAlertID()");
}

const uci::type::MissionContingencyAlertID_Type& ResponseActivityType::getAlertID() const {
  return getAlertID_();
}

uci::type::MissionContingencyAlertID_Type& ResponseActivityType::getAlertID() {
  return getAlertID_();
}

uci::type::ResponseActivityType& ResponseActivityType::setAlertID(const uci::type::MissionContingencyAlertID_Type& accessor) {
  enableAlertID();
  if (&accessor != alertID_Accessor.get()) {
    alertID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseActivityType::hasAlertID() const noexcept {
  return static_cast<bool>(alertID_Accessor);
}

uci::type::MissionContingencyAlertID_Type& ResponseActivityType::enableAlertID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionContingencyAlertID_Type : type};
  if ((!alertID_Accessor) || (alertID_Accessor->getAccessorType() != requestedType)) {
    alertID_Accessor = MissionContingencyAlertID_Type::create(requestedType);
    if (!alertID_Accessor) {
      throw uci::base::UCIException("Error in enableAlertID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *alertID_Accessor;
}

uci::type::ResponseActivityType& ResponseActivityType::clearAlertID() noexcept {
  alertID_Accessor.reset();
  return *this;
}

std::unique_ptr<ResponseActivityType> ResponseActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responseActivityType : type};
  return (requestedType == uci::type::accessorType::responseActivityType) ? boost::make_unique<ResponseActivityType>() : nullptr;
}

/**  */
namespace ResponseActivityType_Names {

constexpr const char* Extern_Type_Name{"ResponseActivityType"};
constexpr const char* InstantiationTime_Name{"InstantiationTime"};
constexpr const char* OptionIndex_Name{"OptionIndex"};
constexpr const char* RequirementInstantiation_Name{"RequirementInstantiation"};
constexpr const char* ActivatedPlans_Name{"ActivatedPlans"};
constexpr const char* AlertID_Name{"AlertID"};

} // namespace ResponseActivityType_Names

void ResponseActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponseActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResponseActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResponseActivityType_Names::InstantiationTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstantiationTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ResponseActivityType_Names::OptionIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOptionIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResponseActivityType_Names::RequirementInstantiation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResponseActivityType::RequirementInstantiation& boundedList = accessor.getRequirementInstantiation();
        const uci::type::ResponseActivityType::RequirementInstantiation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementTemplateInstantiationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResponseActivityType_Names::ActivatedPlans_Name) {
      PlansReferenceType::deserialize(valueType.second, accessor.enableActivatedPlans(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseActivityType_Names::AlertID_Name) {
      MissionContingencyAlertID_Type::deserialize(valueType.second, accessor.enableAlertID(), nodeName, nsPrefix);
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ResponseActivityType::serialize(const uci::type::ResponseActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResponseActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResponseActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getInstantiationTime(), node, ResponseActivityType_Names::InstantiationTime_Name);
  if (accessor.hasOptionIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getOptionIndex(), node, ResponseActivityType_Names::OptionIndex_Name);
  }
  {
    const uci::type::ResponseActivityType::RequirementInstantiation& boundedList = accessor.getRequirementInstantiation();
    for (uci::type::ResponseActivityType::RequirementInstantiation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementTemplateInstantiationType::serialize(boundedList.at(i), node, ResponseActivityType_Names::RequirementInstantiation_Name);
    }
  }
  if (accessor.hasActivatedPlans()) {
    PlansReferenceType::serialize(accessor.getActivatedPlans(), node, ResponseActivityType_Names::ActivatedPlans_Name);
  }
  if (accessor.hasAlertID()) {
    MissionContingencyAlertID_Type::serialize(accessor.getAlertID(), node, ResponseActivityType_Names::AlertID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResponseActivityType& ResponseActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResponseActivityType>().release());
}

uci::type::ResponseActivityType& ResponseActivityType::create(const uci::type::ResponseActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResponseActivityType> newAccessor{boost::make_unique<asb_uci::type::ResponseActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResponseActivityType::destroy(uci::type::ResponseActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::ResponseActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

