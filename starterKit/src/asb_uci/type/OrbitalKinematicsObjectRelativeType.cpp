/** @file OrbitalKinematicsObjectRelativeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalKinematicsObjectRelativeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AssetType.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsStandardFrameChoiceType.h"
#include "../../../include/asb_uci/type/RTN_KinematicsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsObjectRelativeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsStandardFrameChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RTN_KinematicsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalKinematicsObjectRelativeType::OrbitalKinematicsObjectRelativeType()
  : relativeObjectKinematics_Accessor{boost::make_unique<RTN_KinematicsType>()},
    referenceObjectKinematics_Accessor{boost::make_unique<OrbitalKinematicsStandardFrameChoiceType>()} {
}

OrbitalKinematicsObjectRelativeType::~OrbitalKinematicsObjectRelativeType() = default;

void OrbitalKinematicsObjectRelativeType::copy(const uci::type::OrbitalKinematicsObjectRelativeType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalKinematicsObjectRelativeType::copyImpl(const uci::type::OrbitalKinematicsObjectRelativeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalKinematicsObjectRelativeType&>(accessor);
    setRelativeObjectKinematics(*(accessorImpl.relativeObjectKinematics_Accessor));
    setReferenceObjectKinematics(*(accessorImpl.referenceObjectKinematics_Accessor));
    if (accessorImpl.referenceAsset_Accessor) {
      setReferenceAsset(*(accessorImpl.referenceAsset_Accessor));
    } else {
      referenceAsset_Accessor.reset();
    }
  }
}

void OrbitalKinematicsObjectRelativeType::reset() noexcept {
  relativeObjectKinematics_Accessor->reset();
  referenceObjectKinematics_Accessor->reset();
  referenceAsset_Accessor.reset();
}

const uci::type::RTN_KinematicsType& OrbitalKinematicsObjectRelativeType::getRelativeObjectKinematics() const {
  return *relativeObjectKinematics_Accessor;
}

uci::type::RTN_KinematicsType& OrbitalKinematicsObjectRelativeType::getRelativeObjectKinematics() {
  return *relativeObjectKinematics_Accessor;
}

uci::type::OrbitalKinematicsObjectRelativeType& OrbitalKinematicsObjectRelativeType::setRelativeObjectKinematics(const uci::type::RTN_KinematicsType& accessor) {
  if (&accessor != relativeObjectKinematics_Accessor.get()) {
    relativeObjectKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsObjectRelativeType::getReferenceObjectKinematics() const {
  return *referenceObjectKinematics_Accessor;
}

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsObjectRelativeType::getReferenceObjectKinematics() {
  return *referenceObjectKinematics_Accessor;
}

uci::type::OrbitalKinematicsObjectRelativeType& OrbitalKinematicsObjectRelativeType::setReferenceObjectKinematics(const uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor) {
  if (&accessor != referenceObjectKinematics_Accessor.get()) {
    referenceObjectKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AssetType& OrbitalKinematicsObjectRelativeType::getReferenceAsset_() const {
  if (referenceAsset_Accessor) {
    return *referenceAsset_Accessor;
  }
  throw uci::base::UCIException("Error in getReferenceAsset(): An attempt was made to get an optional field that was not enabled, call hasReferenceAsset() to determine if it is safe to call getReferenceAsset()");
}

const uci::type::AssetType& OrbitalKinematicsObjectRelativeType::getReferenceAsset() const {
  return getReferenceAsset_();
}

uci::type::AssetType& OrbitalKinematicsObjectRelativeType::getReferenceAsset() {
  return getReferenceAsset_();
}

uci::type::OrbitalKinematicsObjectRelativeType& OrbitalKinematicsObjectRelativeType::setReferenceAsset(const uci::type::AssetType& accessor) {
  enableReferenceAsset();
  if (&accessor != referenceAsset_Accessor.get()) {
    referenceAsset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsObjectRelativeType::hasReferenceAsset() const noexcept {
  return static_cast<bool>(referenceAsset_Accessor);
}

uci::type::AssetType& OrbitalKinematicsObjectRelativeType::enableReferenceAsset(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assetType : type};
  if ((!referenceAsset_Accessor) || (referenceAsset_Accessor->getAccessorType() != requestedType)) {
    referenceAsset_Accessor = AssetType::create(requestedType);
    if (!referenceAsset_Accessor) {
      throw uci::base::UCIException("Error in enableReferenceAsset(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *referenceAsset_Accessor;
}

uci::type::OrbitalKinematicsObjectRelativeType& OrbitalKinematicsObjectRelativeType::clearReferenceAsset() noexcept {
  referenceAsset_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalKinematicsObjectRelativeType> OrbitalKinematicsObjectRelativeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsObjectRelativeType : type};
  return (requestedType == uci::type::accessorType::orbitalKinematicsObjectRelativeType) ? boost::make_unique<OrbitalKinematicsObjectRelativeType>() : nullptr;
}

/**  */
namespace OrbitalKinematicsObjectRelativeType_Names {

constexpr const char* Extern_Type_Name{"OrbitalKinematicsObjectRelativeType"};
constexpr const char* RelativeObjectKinematics_Name{"RelativeObjectKinematics"};
constexpr const char* ReferenceObjectKinematics_Name{"ReferenceObjectKinematics"};
constexpr const char* ReferenceAsset_Name{"ReferenceAsset"};

} // namespace OrbitalKinematicsObjectRelativeType_Names

void OrbitalKinematicsObjectRelativeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalKinematicsObjectRelativeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalKinematicsObjectRelativeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalKinematicsObjectRelativeType_Names::RelativeObjectKinematics_Name) {
      RTN_KinematicsType::deserialize(valueType.second, accessor.getRelativeObjectKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalKinematicsObjectRelativeType_Names::ReferenceObjectKinematics_Name) {
      OrbitalKinematicsStandardFrameChoiceType::deserialize(valueType.second, accessor.getReferenceObjectKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalKinematicsObjectRelativeType_Names::ReferenceAsset_Name) {
      AssetType::deserialize(valueType.second, accessor.enableReferenceAsset(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalKinematicsObjectRelativeType::serialize(const uci::type::OrbitalKinematicsObjectRelativeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalKinematicsObjectRelativeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalKinematicsObjectRelativeType_Names::Extern_Type_Name);
  }
  RTN_KinematicsType::serialize(accessor.getRelativeObjectKinematics(), node, OrbitalKinematicsObjectRelativeType_Names::RelativeObjectKinematics_Name);
  OrbitalKinematicsStandardFrameChoiceType::serialize(accessor.getReferenceObjectKinematics(), node, OrbitalKinematicsObjectRelativeType_Names::ReferenceObjectKinematics_Name);
  if (accessor.hasReferenceAsset()) {
    AssetType::serialize(accessor.getReferenceAsset(), node, OrbitalKinematicsObjectRelativeType_Names::ReferenceAsset_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalKinematicsObjectRelativeType& OrbitalKinematicsObjectRelativeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalKinematicsObjectRelativeType>().release());
}

uci::type::OrbitalKinematicsObjectRelativeType& OrbitalKinematicsObjectRelativeType::create(const uci::type::OrbitalKinematicsObjectRelativeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalKinematicsObjectRelativeType> newAccessor{boost::make_unique<asb_uci::type::OrbitalKinematicsObjectRelativeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalKinematicsObjectRelativeType::destroy(uci::type::OrbitalKinematicsObjectRelativeType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalKinematicsObjectRelativeType*>(&accessor);
}

} // namespace type

} // namespace uci

