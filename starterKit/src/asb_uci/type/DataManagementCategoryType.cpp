/** @file DataManagementCategoryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DataManagementCategoryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataManagementImportExportType.h"
#include "../../../include/asb_uci/type/DataManagementSaveAsType.h"
#include "../../../include/asb_uci/type/MissionID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataManagementCategoryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataManagementImportExportType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataManagementSaveAsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataManagementCategoryType::DataManagementCategoryType() = default;

DataManagementCategoryType::~DataManagementCategoryType() = default;

void DataManagementCategoryType::copy(const uci::type::DataManagementCategoryType& accessor) {
  copyImpl(accessor, false);
}

void DataManagementCategoryType::copyImpl(const uci::type::DataManagementCategoryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DataManagementCategoryType&>(accessor);
    if (accessorImpl.saveMissionID_Accessor) {
      setSaveMissionID(*(accessorImpl.saveMissionID_Accessor));
    } else {
      saveMissionID_Accessor.reset();
    }
    if (accessorImpl.saveAs_Accessor) {
      setSaveAs(*(accessorImpl.saveAs_Accessor));
    } else {
      saveAs_Accessor.reset();
    }
    if (accessorImpl.deleteMissionID_Accessor) {
      setDeleteMissionID(*(accessorImpl.deleteMissionID_Accessor));
    } else {
      deleteMissionID_Accessor.reset();
    }
    if (accessorImpl.importData_Accessor) {
      setImportData(*(accessorImpl.importData_Accessor));
    } else {
      importData_Accessor.reset();
    }
    if (accessorImpl.exportData_Accessor) {
      setExportData(*(accessorImpl.exportData_Accessor));
    } else {
      exportData_Accessor.reset();
    }
  }
}

void DataManagementCategoryType::reset() noexcept {
  saveMissionID_Accessor.reset();
  saveAs_Accessor.reset();
  deleteMissionID_Accessor.reset();
  importData_Accessor.reset();
  exportData_Accessor.reset();
}

uci::type::DataManagementCategoryType::DataManagementCategoryTypeChoice DataManagementCategoryType::getDataManagementCategoryTypeChoiceOrdinal() const noexcept {
  if (saveMissionID_Accessor) {
    return DATAMANAGEMENTCATEGORYTYPE_CHOICE_SAVEMISSIONID;
  }
  if (saveAs_Accessor) {
    return DATAMANAGEMENTCATEGORYTYPE_CHOICE_SAVEAS;
  }
  if (deleteMissionID_Accessor) {
    return DATAMANAGEMENTCATEGORYTYPE_CHOICE_DELETEMISSIONID;
  }
  if (importData_Accessor) {
    return DATAMANAGEMENTCATEGORYTYPE_CHOICE_IMPORTDATA;
  }
  if (exportData_Accessor) {
    return DATAMANAGEMENTCATEGORYTYPE_CHOICE_EXPORTDATA;
  }
  return DATAMANAGEMENTCATEGORYTYPE_CHOICE_NONE;
}

uci::type::DataManagementCategoryType& DataManagementCategoryType::setDataManagementCategoryTypeChoiceOrdinal(uci::type::DataManagementCategoryType::DataManagementCategoryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DATAMANAGEMENTCATEGORYTYPE_CHOICE_SAVEMISSIONID:
      chooseSaveMissionID("setDataManagementCategoryTypeChoiceOrdinal", type);
      break;
    case DATAMANAGEMENTCATEGORYTYPE_CHOICE_SAVEAS:
      chooseSaveAs("setDataManagementCategoryTypeChoiceOrdinal", type);
      break;
    case DATAMANAGEMENTCATEGORYTYPE_CHOICE_DELETEMISSIONID:
      chooseDeleteMissionID("setDataManagementCategoryTypeChoiceOrdinal", type);
      break;
    case DATAMANAGEMENTCATEGORYTYPE_CHOICE_IMPORTDATA:
      chooseImportData("setDataManagementCategoryTypeChoiceOrdinal", type);
      break;
    case DATAMANAGEMENTCATEGORYTYPE_CHOICE_EXPORTDATA:
      chooseExportData("setDataManagementCategoryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setDataManagementCategoryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MissionID_Type& DataManagementCategoryType::getSaveMissionID_() const {
  if (saveMissionID_Accessor) {
    return *saveMissionID_Accessor;
  }
  throw uci::base::UCIException("Error in getSaveMissionID(): Unable to get SaveMissionID, field not selected");
}

const uci::type::MissionID_Type& DataManagementCategoryType::getSaveMissionID() const {
  return getSaveMissionID_();
}

uci::type::MissionID_Type& DataManagementCategoryType::getSaveMissionID() {
  return getSaveMissionID_();
}

uci::type::DataManagementCategoryType& DataManagementCategoryType::setSaveMissionID(const uci::type::MissionID_Type& accessor) {
  chooseSaveMissionID();
  if (&accessor != saveMissionID_Accessor.get()) {
    saveMissionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataManagementCategoryType::isSaveMissionID() const noexcept {
  return static_cast<bool>(saveMissionID_Accessor);
}

uci::type::MissionID_Type& DataManagementCategoryType::chooseSaveMissionID(const std::string& method, uci::base::accessorType::AccessorType type) {
  saveAs_Accessor.reset();
  deleteMissionID_Accessor.reset();
  importData_Accessor.reset();
  exportData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionID_Type : type};
  if ((!saveMissionID_Accessor) || (saveMissionID_Accessor->getAccessorType() != requestedType)) {
    saveMissionID_Accessor = MissionID_Type::create(type);
    if (!saveMissionID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *saveMissionID_Accessor;
}

uci::type::MissionID_Type& DataManagementCategoryType::chooseSaveMissionID(uci::base::accessorType::AccessorType type) {
  return chooseSaveMissionID("chooseSaveMissionID", type);
}

uci::type::DataManagementSaveAsType& DataManagementCategoryType::getSaveAs_() const {
  if (saveAs_Accessor) {
    return *saveAs_Accessor;
  }
  throw uci::base::UCIException("Error in getSaveAs(): Unable to get SaveAs, field not selected");
}

const uci::type::DataManagementSaveAsType& DataManagementCategoryType::getSaveAs() const {
  return getSaveAs_();
}

uci::type::DataManagementSaveAsType& DataManagementCategoryType::getSaveAs() {
  return getSaveAs_();
}

uci::type::DataManagementCategoryType& DataManagementCategoryType::setSaveAs(const uci::type::DataManagementSaveAsType& accessor) {
  chooseSaveAs();
  if (&accessor != saveAs_Accessor.get()) {
    saveAs_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataManagementCategoryType::isSaveAs() const noexcept {
  return static_cast<bool>(saveAs_Accessor);
}

uci::type::DataManagementSaveAsType& DataManagementCategoryType::chooseSaveAs(const std::string& method, uci::base::accessorType::AccessorType type) {
  saveMissionID_Accessor.reset();
  deleteMissionID_Accessor.reset();
  importData_Accessor.reset();
  exportData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataManagementSaveAsType : type};
  if ((!saveAs_Accessor) || (saveAs_Accessor->getAccessorType() != requestedType)) {
    saveAs_Accessor = DataManagementSaveAsType::create(type);
    if (!saveAs_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *saveAs_Accessor;
}

uci::type::DataManagementSaveAsType& DataManagementCategoryType::chooseSaveAs(uci::base::accessorType::AccessorType type) {
  return chooseSaveAs("chooseSaveAs", type);
}

uci::type::MissionID_Type& DataManagementCategoryType::getDeleteMissionID_() const {
  if (deleteMissionID_Accessor) {
    return *deleteMissionID_Accessor;
  }
  throw uci::base::UCIException("Error in getDeleteMissionID(): Unable to get DeleteMissionID, field not selected");
}

const uci::type::MissionID_Type& DataManagementCategoryType::getDeleteMissionID() const {
  return getDeleteMissionID_();
}

uci::type::MissionID_Type& DataManagementCategoryType::getDeleteMissionID() {
  return getDeleteMissionID_();
}

uci::type::DataManagementCategoryType& DataManagementCategoryType::setDeleteMissionID(const uci::type::MissionID_Type& accessor) {
  chooseDeleteMissionID();
  if (&accessor != deleteMissionID_Accessor.get()) {
    deleteMissionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataManagementCategoryType::isDeleteMissionID() const noexcept {
  return static_cast<bool>(deleteMissionID_Accessor);
}

uci::type::MissionID_Type& DataManagementCategoryType::chooseDeleteMissionID(const std::string& method, uci::base::accessorType::AccessorType type) {
  saveMissionID_Accessor.reset();
  saveAs_Accessor.reset();
  importData_Accessor.reset();
  exportData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionID_Type : type};
  if ((!deleteMissionID_Accessor) || (deleteMissionID_Accessor->getAccessorType() != requestedType)) {
    deleteMissionID_Accessor = MissionID_Type::create(type);
    if (!deleteMissionID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *deleteMissionID_Accessor;
}

uci::type::MissionID_Type& DataManagementCategoryType::chooseDeleteMissionID(uci::base::accessorType::AccessorType type) {
  return chooseDeleteMissionID("chooseDeleteMissionID", type);
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::getImportData_() const {
  if (importData_Accessor) {
    return *importData_Accessor;
  }
  throw uci::base::UCIException("Error in getImportData(): Unable to get ImportData, field not selected");
}

const uci::type::DataManagementImportExportType& DataManagementCategoryType::getImportData() const {
  return getImportData_();
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::getImportData() {
  return getImportData_();
}

uci::type::DataManagementCategoryType& DataManagementCategoryType::setImportData(const uci::type::DataManagementImportExportType& accessor) {
  chooseImportData();
  if (&accessor != importData_Accessor.get()) {
    importData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataManagementCategoryType::isImportData() const noexcept {
  return static_cast<bool>(importData_Accessor);
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::chooseImportData(const std::string& method, uci::base::accessorType::AccessorType type) {
  saveMissionID_Accessor.reset();
  saveAs_Accessor.reset();
  deleteMissionID_Accessor.reset();
  exportData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataManagementImportExportType : type};
  if ((!importData_Accessor) || (importData_Accessor->getAccessorType() != requestedType)) {
    importData_Accessor = DataManagementImportExportType::create(type);
    if (!importData_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *importData_Accessor;
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::chooseImportData(uci::base::accessorType::AccessorType type) {
  return chooseImportData("chooseImportData", type);
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::getExportData_() const {
  if (exportData_Accessor) {
    return *exportData_Accessor;
  }
  throw uci::base::UCIException("Error in getExportData(): Unable to get ExportData, field not selected");
}

const uci::type::DataManagementImportExportType& DataManagementCategoryType::getExportData() const {
  return getExportData_();
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::getExportData() {
  return getExportData_();
}

uci::type::DataManagementCategoryType& DataManagementCategoryType::setExportData(const uci::type::DataManagementImportExportType& accessor) {
  chooseExportData();
  if (&accessor != exportData_Accessor.get()) {
    exportData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataManagementCategoryType::isExportData() const noexcept {
  return static_cast<bool>(exportData_Accessor);
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::chooseExportData(const std::string& method, uci::base::accessorType::AccessorType type) {
  saveMissionID_Accessor.reset();
  saveAs_Accessor.reset();
  deleteMissionID_Accessor.reset();
  importData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataManagementImportExportType : type};
  if ((!exportData_Accessor) || (exportData_Accessor->getAccessorType() != requestedType)) {
    exportData_Accessor = DataManagementImportExportType::create(type);
    if (!exportData_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *exportData_Accessor;
}

uci::type::DataManagementImportExportType& DataManagementCategoryType::chooseExportData(uci::base::accessorType::AccessorType type) {
  return chooseExportData("chooseExportData", type);
}

std::unique_ptr<DataManagementCategoryType> DataManagementCategoryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataManagementCategoryType : type};
  return (requestedType == uci::type::accessorType::dataManagementCategoryType) ? boost::make_unique<DataManagementCategoryType>() : nullptr;
}

/**  */
namespace DataManagementCategoryType_Names {

constexpr const char* Extern_Type_Name{"DataManagementCategoryType"};
constexpr const char* SaveMissionID_Name{"SaveMissionID"};
constexpr const char* SaveAs_Name{"SaveAs"};
constexpr const char* DeleteMissionID_Name{"DeleteMissionID"};
constexpr const char* ImportData_Name{"ImportData"};
constexpr const char* ExportData_Name{"ExportData"};

} // namespace DataManagementCategoryType_Names

void DataManagementCategoryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataManagementCategoryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataManagementCategoryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataManagementCategoryType_Names::SaveMissionID_Name) {
      MissionID_Type::deserialize(valueType.second, accessor.chooseSaveMissionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataManagementCategoryType_Names::SaveAs_Name) {
      DataManagementSaveAsType::deserialize(valueType.second, accessor.chooseSaveAs(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataManagementCategoryType_Names::DeleteMissionID_Name) {
      MissionID_Type::deserialize(valueType.second, accessor.chooseDeleteMissionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataManagementCategoryType_Names::ImportData_Name) {
      DataManagementImportExportType::deserialize(valueType.second, accessor.chooseImportData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataManagementCategoryType_Names::ExportData_Name) {
      DataManagementImportExportType::deserialize(valueType.second, accessor.chooseExportData(), nodeName, nsPrefix);
    }
  }
}

std::string DataManagementCategoryType::serialize(const uci::type::DataManagementCategoryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataManagementCategoryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataManagementCategoryType_Names::Extern_Type_Name);
  }
  if (accessor.isSaveMissionID()) {
    MissionID_Type::serialize(accessor.getSaveMissionID(), node, DataManagementCategoryType_Names::SaveMissionID_Name);
  } else if (accessor.isSaveAs()) {
    DataManagementSaveAsType::serialize(accessor.getSaveAs(), node, DataManagementCategoryType_Names::SaveAs_Name);
  } else if (accessor.isDeleteMissionID()) {
    MissionID_Type::serialize(accessor.getDeleteMissionID(), node, DataManagementCategoryType_Names::DeleteMissionID_Name);
  } else if (accessor.isImportData()) {
    DataManagementImportExportType::serialize(accessor.getImportData(), node, DataManagementCategoryType_Names::ImportData_Name);
  } else if (accessor.isExportData()) {
    DataManagementImportExportType::serialize(accessor.getExportData(), node, DataManagementCategoryType_Names::ExportData_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataManagementCategoryType& DataManagementCategoryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataManagementCategoryType>().release());
}

uci::type::DataManagementCategoryType& DataManagementCategoryType::create(const uci::type::DataManagementCategoryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataManagementCategoryType> newAccessor{boost::make_unique<asb_uci::type::DataManagementCategoryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataManagementCategoryType::destroy(uci::type::DataManagementCategoryType& accessor) {
  delete dynamic_cast<asb_uci::type::DataManagementCategoryType*>(&accessor);
}

} // namespace type

} // namespace uci

