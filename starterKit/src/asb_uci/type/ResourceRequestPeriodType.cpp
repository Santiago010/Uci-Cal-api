/** @file ResourceRequestPeriodType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ResourceRequestPeriodType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComparableRankingType.h"
#include "asb_uci/type/PercentRangeType.h"
#include "asb_uci/type/RF_TypeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComparableRankingType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PercentRangeType.h"
#include "uci/type/RF_TypeEnum.h"
#include "uci/type/ResourceRequestPeriodType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceRequestPeriodType::ResourceRequestPeriodType()
  : periodRanking_Accessor{boost::make_unique<ComparableRankingType>()},
    percentAccessDuringThePeriod_Accessor{boost::make_unique<PercentRangeType>()} {
}

ResourceRequestPeriodType::~ResourceRequestPeriodType() = default;

void ResourceRequestPeriodType::copy(const uci::type::ResourceRequestPeriodType& accessor) {
  copyImpl(accessor, false);
}

void ResourceRequestPeriodType::copyImpl(const uci::type::ResourceRequestPeriodType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceRequestPeriodType&>(accessor);
    setAccessPeriodIndex(accessorImpl.accessPeriodIndex_Accessor);
    if (accessorImpl.accessPeriodRF_Mode_Accessor) {
      setAccessPeriodRF_Mode(*(accessorImpl.accessPeriodRF_Mode_Accessor));
    } else {
      accessPeriodRF_Mode_Accessor.reset();
    }
    setPeriodRanking(*(accessorImpl.periodRanking_Accessor));
    if (accessorImpl.hasTypicalAccessPeriodDuration()) {
      setTypicalAccessPeriodDuration(accessorImpl.getTypicalAccessPeriodDuration());
    } else {
      clearTypicalAccessPeriodDuration();
    }
    if (accessorImpl.hasMaxAccessWidthRequested()) {
      setMaxAccessWidthRequested(accessorImpl.getMaxAccessWidthRequested());
    } else {
      clearMaxAccessWidthRequested();
    }
    if (accessorImpl.hasTypicalAccessRequestToReleaseDuration()) {
      setTypicalAccessRequestToReleaseDuration(accessorImpl.getTypicalAccessRequestToReleaseDuration());
    } else {
      clearTypicalAccessRequestToReleaseDuration();
    }
    if (accessorImpl.hasTypicalAccessReleaseToRequestDuration()) {
      setTypicalAccessReleaseToRequestDuration(accessorImpl.getTypicalAccessReleaseToRequestDuration());
    } else {
      clearTypicalAccessReleaseToRequestDuration();
    }
    setPercentAccessDuringThePeriod(*(accessorImpl.percentAccessDuringThePeriod_Accessor));
  }
}

void ResourceRequestPeriodType::reset() noexcept {
  accessPeriodIndex_Accessor = 0;
  accessPeriodRF_Mode_Accessor.reset();
  periodRanking_Accessor->reset();
  clearTypicalAccessPeriodDuration();
  clearMaxAccessWidthRequested();
  clearTypicalAccessRequestToReleaseDuration();
  clearTypicalAccessReleaseToRequestDuration();
  percentAccessDuringThePeriod_Accessor->reset();
}

xs::UnsignedInt ResourceRequestPeriodType::getAccessPeriodIndex() const {
  return accessPeriodIndex_Accessor;
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setAccessPeriodIndex(xs::UnsignedInt value) {
  accessPeriodIndex_Accessor = value;
  return *this;
}


uci::type::RF_TypeEnum& ResourceRequestPeriodType::getAccessPeriodRF_Mode_() const {
  if (accessPeriodRF_Mode_Accessor) {
    return *accessPeriodRF_Mode_Accessor;
  }
  throw uci::base::UCIException("Error in getAccessPeriodRF_Mode(): An attempt was made to get an optional field that was not enabled, call hasAccessPeriodRF_Mode() to determine if it is safe to call getAccessPeriodRF_Mode()");
}

const uci::type::RF_TypeEnum& ResourceRequestPeriodType::getAccessPeriodRF_Mode() const {
  return getAccessPeriodRF_Mode_();
}

uci::type::RF_TypeEnum& ResourceRequestPeriodType::getAccessPeriodRF_Mode() {
  return getAccessPeriodRF_Mode_();
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setAccessPeriodRF_Mode(const uci::type::RF_TypeEnum& accessor) {
  enableAccessPeriodRF_Mode();
  if (&accessor != accessPeriodRF_Mode_Accessor.get()) {
    accessPeriodRF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setAccessPeriodRF_Mode(const uci::type::RF_TypeEnum::EnumerationItem value) {
  enableAccessPeriodRF_Mode().setValue(value);
  return *this;
}

bool ResourceRequestPeriodType::hasAccessPeriodRF_Mode() const noexcept {
  return static_cast<bool>(accessPeriodRF_Mode_Accessor);
}

uci::type::RF_TypeEnum& ResourceRequestPeriodType::enableAccessPeriodRF_Mode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_TypeEnum : type};
  if ((!accessPeriodRF_Mode_Accessor) || (accessPeriodRF_Mode_Accessor->getAccessorType() != requestedType)) {
    accessPeriodRF_Mode_Accessor = RF_TypeEnum::create(requestedType);
    if (!accessPeriodRF_Mode_Accessor) {
      throw uci::base::UCIException("Error in enableAccessPeriodRF_Mode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *accessPeriodRF_Mode_Accessor;
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::clearAccessPeriodRF_Mode() noexcept {
  accessPeriodRF_Mode_Accessor.reset();
  return *this;
}

const uci::type::ComparableRankingType& ResourceRequestPeriodType::getPeriodRanking() const {
  return *periodRanking_Accessor;
}

uci::type::ComparableRankingType& ResourceRequestPeriodType::getPeriodRanking() {
  return *periodRanking_Accessor;
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setPeriodRanking(const uci::type::ComparableRankingType& accessor) {
  if (&accessor != periodRanking_Accessor.get()) {
    periodRanking_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue ResourceRequestPeriodType::getTypicalAccessPeriodDuration() const {
  if (typicalAccessPeriodDuration_Accessor) {
    return *typicalAccessPeriodDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getTypicalAccessPeriodDuration(): An attempt was made to get an optional field that was not enabled, call hasTypicalAccessPeriodDuration() to determine if it is safe to call getTypicalAccessPeriodDuration()");
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setTypicalAccessPeriodDuration(uci::type::DurationTypeValue value) {
  typicalAccessPeriodDuration_Accessor = value;
  return *this;
}

bool ResourceRequestPeriodType::hasTypicalAccessPeriodDuration() const noexcept {
  return typicalAccessPeriodDuration_Accessor.has_value();
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::clearTypicalAccessPeriodDuration() noexcept {
  typicalAccessPeriodDuration_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue ResourceRequestPeriodType::getMaxAccessWidthRequested() const {
  if (maxAccessWidthRequested_Accessor) {
    return *maxAccessWidthRequested_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxAccessWidthRequested(): An attempt was made to get an optional field that was not enabled, call hasMaxAccessWidthRequested() to determine if it is safe to call getMaxAccessWidthRequested()");
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setMaxAccessWidthRequested(uci::type::DurationTypeValue value) {
  maxAccessWidthRequested_Accessor = value;
  return *this;
}

bool ResourceRequestPeriodType::hasMaxAccessWidthRequested() const noexcept {
  return maxAccessWidthRequested_Accessor.has_value();
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::clearMaxAccessWidthRequested() noexcept {
  maxAccessWidthRequested_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue ResourceRequestPeriodType::getTypicalAccessRequestToReleaseDuration() const {
  if (typicalAccessRequestToReleaseDuration_Accessor) {
    return *typicalAccessRequestToReleaseDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getTypicalAccessRequestToReleaseDuration(): An attempt was made to get an optional field that was not enabled, call hasTypicalAccessRequestToReleaseDuration() to determine if it is safe to call getTypicalAccessRequestToReleaseDuration()");
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setTypicalAccessRequestToReleaseDuration(uci::type::DurationTypeValue value) {
  typicalAccessRequestToReleaseDuration_Accessor = value;
  return *this;
}

bool ResourceRequestPeriodType::hasTypicalAccessRequestToReleaseDuration() const noexcept {
  return typicalAccessRequestToReleaseDuration_Accessor.has_value();
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::clearTypicalAccessRequestToReleaseDuration() noexcept {
  typicalAccessRequestToReleaseDuration_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue ResourceRequestPeriodType::getTypicalAccessReleaseToRequestDuration() const {
  if (typicalAccessReleaseToRequestDuration_Accessor) {
    return *typicalAccessReleaseToRequestDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getTypicalAccessReleaseToRequestDuration(): An attempt was made to get an optional field that was not enabled, call hasTypicalAccessReleaseToRequestDuration() to determine if it is safe to call getTypicalAccessReleaseToRequestDuration()");
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setTypicalAccessReleaseToRequestDuration(uci::type::DurationTypeValue value) {
  typicalAccessReleaseToRequestDuration_Accessor = value;
  return *this;
}

bool ResourceRequestPeriodType::hasTypicalAccessReleaseToRequestDuration() const noexcept {
  return typicalAccessReleaseToRequestDuration_Accessor.has_value();
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::clearTypicalAccessReleaseToRequestDuration() noexcept {
  typicalAccessReleaseToRequestDuration_Accessor.reset();
  return *this;
}

const uci::type::PercentRangeType& ResourceRequestPeriodType::getPercentAccessDuringThePeriod() const {
  return *percentAccessDuringThePeriod_Accessor;
}

uci::type::PercentRangeType& ResourceRequestPeriodType::getPercentAccessDuringThePeriod() {
  return *percentAccessDuringThePeriod_Accessor;
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::setPercentAccessDuringThePeriod(const uci::type::PercentRangeType& accessor) {
  if (&accessor != percentAccessDuringThePeriod_Accessor.get()) {
    percentAccessDuringThePeriod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ResourceRequestPeriodType> ResourceRequestPeriodType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceRequestPeriodType : type};
  return (requestedType == uci::type::accessorType::resourceRequestPeriodType) ? boost::make_unique<ResourceRequestPeriodType>() : nullptr;
}

/**  */
namespace ResourceRequestPeriodType_Names {

constexpr const char* Extern_Type_Name{"ResourceRequestPeriodType"};
constexpr const char* AccessPeriodIndex_Name{"AccessPeriodIndex"};
constexpr const char* AccessPeriodRF_Mode_Name{"AccessPeriodRF_Mode"};
constexpr const char* PeriodRanking_Name{"PeriodRanking"};
constexpr const char* TypicalAccessPeriodDuration_Name{"TypicalAccessPeriodDuration"};
constexpr const char* MaxAccessWidthRequested_Name{"MaxAccessWidthRequested"};
constexpr const char* TypicalAccessRequestToReleaseDuration_Name{"TypicalAccessRequestToReleaseDuration"};
constexpr const char* TypicalAccessReleaseToRequestDuration_Name{"TypicalAccessReleaseToRequestDuration"};
constexpr const char* PercentAccessDuringThePeriod_Name{"PercentAccessDuringThePeriod"};

} // namespace ResourceRequestPeriodType_Names

void ResourceRequestPeriodType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceRequestPeriodType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceRequestPeriodType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::AccessPeriodIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAccessPeriodIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::AccessPeriodRF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAccessPeriodRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::PeriodRanking_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.getPeriodRanking(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::TypicalAccessPeriodDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTypicalAccessPeriodDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::MaxAccessWidthRequested_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxAccessWidthRequested(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::TypicalAccessRequestToReleaseDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTypicalAccessRequestToReleaseDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::TypicalAccessReleaseToRequestDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTypicalAccessReleaseToRequestDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestPeriodType_Names::PercentAccessDuringThePeriod_Name) {
      PercentRangeType::deserialize(valueType.second, accessor.getPercentAccessDuringThePeriod(), nodeName, nsPrefix);
    }
  }
}

std::string ResourceRequestPeriodType::serialize(const uci::type::ResourceRequestPeriodType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceRequestPeriodType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceRequestPeriodType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAccessPeriodIndex(), node, ResourceRequestPeriodType_Names::AccessPeriodIndex_Name);
  if (accessor.hasAccessPeriodRF_Mode()) {
    RF_TypeEnum::serialize(accessor.getAccessPeriodRF_Mode(), node, ResourceRequestPeriodType_Names::AccessPeriodRF_Mode_Name, false);
  }
  ComparableRankingType::serialize(accessor.getPeriodRanking(), node, ResourceRequestPeriodType_Names::PeriodRanking_Name);
  if (accessor.hasTypicalAccessPeriodDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTypicalAccessPeriodDuration(), node, ResourceRequestPeriodType_Names::TypicalAccessPeriodDuration_Name);
  }
  if (accessor.hasMaxAccessWidthRequested()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getMaxAccessWidthRequested(), node, ResourceRequestPeriodType_Names::MaxAccessWidthRequested_Name);
  }
  if (accessor.hasTypicalAccessRequestToReleaseDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTypicalAccessRequestToReleaseDuration(), node, ResourceRequestPeriodType_Names::TypicalAccessRequestToReleaseDuration_Name);
  }
  if (accessor.hasTypicalAccessReleaseToRequestDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTypicalAccessReleaseToRequestDuration(), node, ResourceRequestPeriodType_Names::TypicalAccessReleaseToRequestDuration_Name);
  }
  PercentRangeType::serialize(accessor.getPercentAccessDuringThePeriod(), node, ResourceRequestPeriodType_Names::PercentAccessDuringThePeriod_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceRequestPeriodType>().release());
}

uci::type::ResourceRequestPeriodType& ResourceRequestPeriodType::create(const uci::type::ResourceRequestPeriodType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceRequestPeriodType> newAccessor{boost::make_unique<asb_uci::type::ResourceRequestPeriodType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceRequestPeriodType::destroy(uci::type::ResourceRequestPeriodType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceRequestPeriodType*>(&accessor);
}

} // namespace type

} // namespace uci

