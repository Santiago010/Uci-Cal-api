/** @file IFF_InterrogatorTransponderModesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IFF_InterrogatorTransponderModesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IFF_InterrogatorModesEnableType.h"
#include "../../../include/asb_uci/type/IFF_TransponderModeControlType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_InterrogatorModesEnableType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_InterrogatorTransponderModesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_TransponderModeControlType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_InterrogatorTransponderModesType::IFF_InterrogatorTransponderModesType() = default;

IFF_InterrogatorTransponderModesType::~IFF_InterrogatorTransponderModesType() = default;

void IFF_InterrogatorTransponderModesType::copy(const uci::type::IFF_InterrogatorTransponderModesType& accessor) {
  copyImpl(accessor, false);
}

void IFF_InterrogatorTransponderModesType::copyImpl(const uci::type::IFF_InterrogatorTransponderModesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_InterrogatorTransponderModesType&>(accessor);
    if (accessorImpl.transponderModesControl_Accessor) {
      setTransponderModesControl(*(accessorImpl.transponderModesControl_Accessor));
    } else {
      transponderModesControl_Accessor.reset();
    }
    if (accessorImpl.interrogatorModesEnable_Accessor) {
      setInterrogatorModesEnable(*(accessorImpl.interrogatorModesEnable_Accessor));
    } else {
      interrogatorModesEnable_Accessor.reset();
    }
  }
}

void IFF_InterrogatorTransponderModesType::reset() noexcept {
  transponderModesControl_Accessor.reset();
  interrogatorModesEnable_Accessor.reset();
}

uci::type::IFF_InterrogatorTransponderModesType::IFF_InterrogatorTransponderModesTypeChoice IFF_InterrogatorTransponderModesType::getIFF_InterrogatorTransponderModesTypeChoiceOrdinal() const noexcept {
  if (transponderModesControl_Accessor) {
    return IFF_INTERROGATORTRANSPONDERMODESTYPE_CHOICE_TRANSPONDERMODESCONTROL;
  }
  if (interrogatorModesEnable_Accessor) {
    return IFF_INTERROGATORTRANSPONDERMODESTYPE_CHOICE_INTERROGATORMODESENABLE;
  }
  return IFF_INTERROGATORTRANSPONDERMODESTYPE_CHOICE_NONE;
}

uci::type::IFF_InterrogatorTransponderModesType& IFF_InterrogatorTransponderModesType::setIFF_InterrogatorTransponderModesTypeChoiceOrdinal(uci::type::IFF_InterrogatorTransponderModesType::IFF_InterrogatorTransponderModesTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case IFF_INTERROGATORTRANSPONDERMODESTYPE_CHOICE_TRANSPONDERMODESCONTROL:
      chooseTransponderModesControl("setIFF_InterrogatorTransponderModesTypeChoiceOrdinal", type);
      break;
    case IFF_INTERROGATORTRANSPONDERMODESTYPE_CHOICE_INTERROGATORMODESENABLE:
      chooseInterrogatorModesEnable("setIFF_InterrogatorTransponderModesTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setIFF_InterrogatorTransponderModesTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::IFF_TransponderModeControlType& IFF_InterrogatorTransponderModesType::getTransponderModesControl_() const {
  if (transponderModesControl_Accessor) {
    return *transponderModesControl_Accessor;
  }
  throw uci::base::UCIException("Error in getTransponderModesControl(): Unable to get TransponderModesControl, field not selected");
}

const uci::type::IFF_TransponderModeControlType& IFF_InterrogatorTransponderModesType::getTransponderModesControl() const {
  return getTransponderModesControl_();
}

uci::type::IFF_TransponderModeControlType& IFF_InterrogatorTransponderModesType::getTransponderModesControl() {
  return getTransponderModesControl_();
}

uci::type::IFF_InterrogatorTransponderModesType& IFF_InterrogatorTransponderModesType::setTransponderModesControl(const uci::type::IFF_TransponderModeControlType& accessor) {
  chooseTransponderModesControl("setTransponderModesControl", accessor.getAccessorType());
  if (&accessor != transponderModesControl_Accessor.get()) {
    transponderModesControl_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool IFF_InterrogatorTransponderModesType::isTransponderModesControl() const noexcept {
  return static_cast<bool>(transponderModesControl_Accessor);
}

uci::type::IFF_TransponderModeControlType& IFF_InterrogatorTransponderModesType::chooseTransponderModesControl(const std::string& method, uci::base::accessorType::AccessorType type) {
  interrogatorModesEnable_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_TransponderModeControlType : type};
  if ((!transponderModesControl_Accessor) || (transponderModesControl_Accessor->getAccessorType() != requestedType)) {
    transponderModesControl_Accessor = IFF_TransponderModeControlType::create(type);
    if (!transponderModesControl_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transponderModesControl_Accessor;
}

uci::type::IFF_TransponderModeControlType& IFF_InterrogatorTransponderModesType::chooseTransponderModesControl(uci::base::accessorType::AccessorType type) {
  return chooseTransponderModesControl("chooseTransponderModesControl", type);
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorTransponderModesType::getInterrogatorModesEnable_() const {
  if (interrogatorModesEnable_Accessor) {
    return *interrogatorModesEnable_Accessor;
  }
  throw uci::base::UCIException("Error in getInterrogatorModesEnable(): Unable to get InterrogatorModesEnable, field not selected");
}

const uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorTransponderModesType::getInterrogatorModesEnable() const {
  return getInterrogatorModesEnable_();
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorTransponderModesType::getInterrogatorModesEnable() {
  return getInterrogatorModesEnable_();
}

uci::type::IFF_InterrogatorTransponderModesType& IFF_InterrogatorTransponderModesType::setInterrogatorModesEnable(const uci::type::IFF_InterrogatorModesEnableType& accessor) {
  chooseInterrogatorModesEnable();
  if (&accessor != interrogatorModesEnable_Accessor.get()) {
    interrogatorModesEnable_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_InterrogatorTransponderModesType::isInterrogatorModesEnable() const noexcept {
  return static_cast<bool>(interrogatorModesEnable_Accessor);
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorTransponderModesType::chooseInterrogatorModesEnable(const std::string& method, uci::base::accessorType::AccessorType type) {
  transponderModesControl_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_InterrogatorModesEnableType : type};
  if ((!interrogatorModesEnable_Accessor) || (interrogatorModesEnable_Accessor->getAccessorType() != requestedType)) {
    interrogatorModesEnable_Accessor = IFF_InterrogatorModesEnableType::create(type);
    if (!interrogatorModesEnable_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *interrogatorModesEnable_Accessor;
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorTransponderModesType::chooseInterrogatorModesEnable(uci::base::accessorType::AccessorType type) {
  return chooseInterrogatorModesEnable("chooseInterrogatorModesEnable", type);
}

std::unique_ptr<IFF_InterrogatorTransponderModesType> IFF_InterrogatorTransponderModesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_InterrogatorTransponderModesType : type};
  return (requestedType == uci::type::accessorType::iFF_InterrogatorTransponderModesType) ? boost::make_unique<IFF_InterrogatorTransponderModesType>() : nullptr;
}

/**  */
namespace IFF_InterrogatorTransponderModesType_Names {

constexpr const char* Extern_Type_Name{"IFF_InterrogatorTransponderModesType"};
constexpr const char* TransponderModesControl_Name{"TransponderModesControl"};
constexpr const char* InterrogatorModesEnable_Name{"InterrogatorModesEnable"};

} // namespace IFF_InterrogatorTransponderModesType_Names

void IFF_InterrogatorTransponderModesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_InterrogatorTransponderModesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_InterrogatorTransponderModesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_InterrogatorTransponderModesType_Names::TransponderModesControl_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseTransponderModesControl(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_InterrogatorTransponderModesType_Names::InterrogatorModesEnable_Name) {
      IFF_InterrogatorModesEnableType::deserialize(valueType.second, accessor.chooseInterrogatorModesEnable(), nodeName, nsPrefix);
    }
  }
}

std::string IFF_InterrogatorTransponderModesType::serialize(const uci::type::IFF_InterrogatorTransponderModesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_InterrogatorTransponderModesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_InterrogatorTransponderModesType_Names::Extern_Type_Name);
  }
  if (accessor.isTransponderModesControl()) {
    IFF_TransponderModeControlType::serialize(accessor.getTransponderModesControl(), node, IFF_InterrogatorTransponderModesType_Names::TransponderModesControl_Name);
  } else if (accessor.isInterrogatorModesEnable()) {
    IFF_InterrogatorModesEnableType::serialize(accessor.getInterrogatorModesEnable(), node, IFF_InterrogatorTransponderModesType_Names::InterrogatorModesEnable_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_InterrogatorTransponderModesType& IFF_InterrogatorTransponderModesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_InterrogatorTransponderModesType>().release());
}

uci::type::IFF_InterrogatorTransponderModesType& IFF_InterrogatorTransponderModesType::create(const uci::type::IFF_InterrogatorTransponderModesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_InterrogatorTransponderModesType> newAccessor{boost::make_unique<asb_uci::type::IFF_InterrogatorTransponderModesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_InterrogatorTransponderModesType::destroy(uci::type::IFF_InterrogatorTransponderModesType& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_InterrogatorTransponderModesType*>(&accessor);
}

} // namespace type

} // namespace uci

