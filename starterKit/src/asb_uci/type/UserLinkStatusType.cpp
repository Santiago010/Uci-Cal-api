/** @file UserLinkStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/UserLinkStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommConnectionStateEnum.h"
#include "asb_uci/type/CommControlType.h"
#include "asb_uci/type/CommLinkPortMapType.h"
#include "asb_uci/type/CommLinkStatisticsType.h"
#include "asb_uci/type/NetworkLinkID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommConnectionStateEnum.h"
#include "uci/type/CommControlType.h"
#include "uci/type/CommLinkPortMapType.h"
#include "uci/type/CommLinkStatisticsType.h"
#include "uci/type/NetworkLinkID_Type.h"
#include "uci/type/UserLinkStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

UserLinkStatusType::UserLinkStatusType()
  : networkLinkID_Accessor{boost::make_unique<NetworkLinkID_Type>()},
    linkPortMap_Accessor{boost::make_unique<LinkPortMap>(0, SIZE_MAX)},
    linkConnectionState_Accessor{boost::make_unique<CommConnectionStateEnum>()} {
}

UserLinkStatusType::~UserLinkStatusType() = default;

void UserLinkStatusType::copy(const uci::type::UserLinkStatusType& accessor) {
  copyImpl(accessor, false);
}

void UserLinkStatusType::copyImpl(const uci::type::UserLinkStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const UserLinkStatusType&>(accessor);
    setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    setLinkPortMap(*(accessorImpl.linkPortMap_Accessor));
    setLinkConnectionState(*(accessorImpl.linkConnectionState_Accessor));
    if (accessorImpl.linkStatistics_Accessor) {
      setLinkStatistics(*(accessorImpl.linkStatistics_Accessor));
    } else {
      linkStatistics_Accessor.reset();
    }
    if (accessorImpl.commonSettingsStatus_Accessor) {
      setCommonSettingsStatus(*(accessorImpl.commonSettingsStatus_Accessor));
    } else {
      commonSettingsStatus_Accessor.reset();
    }
  }
}

void UserLinkStatusType::reset() noexcept {
  networkLinkID_Accessor->reset();
  linkPortMap_Accessor->reset();
  linkConnectionState_Accessor->reset();
  linkStatistics_Accessor.reset();
  commonSettingsStatus_Accessor.reset();
}

const uci::type::NetworkLinkID_Type& UserLinkStatusType::getNetworkLinkID() const {
  return *networkLinkID_Accessor;
}

uci::type::NetworkLinkID_Type& UserLinkStatusType::getNetworkLinkID() {
  return *networkLinkID_Accessor;
}

uci::type::UserLinkStatusType& UserLinkStatusType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::UserLinkStatusType::LinkPortMap& UserLinkStatusType::getLinkPortMap() const {
  return *linkPortMap_Accessor;
}

uci::type::UserLinkStatusType::LinkPortMap& UserLinkStatusType::getLinkPortMap() {
  return *linkPortMap_Accessor;
}

uci::type::UserLinkStatusType& UserLinkStatusType::setLinkPortMap(const uci::type::UserLinkStatusType::LinkPortMap& accessor) {
  if (&accessor != linkPortMap_Accessor.get()) {
    linkPortMap_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommConnectionStateEnum& UserLinkStatusType::getLinkConnectionState() const {
  return *linkConnectionState_Accessor;
}

uci::type::CommConnectionStateEnum& UserLinkStatusType::getLinkConnectionState() {
  return *linkConnectionState_Accessor;
}

uci::type::UserLinkStatusType& UserLinkStatusType::setLinkConnectionState(const uci::type::CommConnectionStateEnum& accessor) {
  if (&accessor != linkConnectionState_Accessor.get()) {
    linkConnectionState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::UserLinkStatusType& UserLinkStatusType::setLinkConnectionState(uci::type::CommConnectionStateEnum::EnumerationItem value) {
  linkConnectionState_Accessor->setValue(value);
  return *this;
}


uci::type::CommLinkStatisticsType& UserLinkStatusType::getLinkStatistics_() const {
  if (linkStatistics_Accessor) {
    return *linkStatistics_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkStatistics(): An attempt was made to get an optional field that was not enabled, call hasLinkStatistics() to determine if it is safe to call getLinkStatistics()");
}

const uci::type::CommLinkStatisticsType& UserLinkStatusType::getLinkStatistics() const {
  return getLinkStatistics_();
}

uci::type::CommLinkStatisticsType& UserLinkStatusType::getLinkStatistics() {
  return getLinkStatistics_();
}

uci::type::UserLinkStatusType& UserLinkStatusType::setLinkStatistics(const uci::type::CommLinkStatisticsType& accessor) {
  enableLinkStatistics();
  if (&accessor != linkStatistics_Accessor.get()) {
    linkStatistics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool UserLinkStatusType::hasLinkStatistics() const noexcept {
  return static_cast<bool>(linkStatistics_Accessor);
}

uci::type::CommLinkStatisticsType& UserLinkStatusType::enableLinkStatistics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkStatisticsType : type};
  if ((!linkStatistics_Accessor) || (linkStatistics_Accessor->getAccessorType() != requestedType)) {
    linkStatistics_Accessor = CommLinkStatisticsType::create(requestedType);
    if (!linkStatistics_Accessor) {
      throw uci::base::UCIException("Error in enableLinkStatistics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *linkStatistics_Accessor;
}

uci::type::UserLinkStatusType& UserLinkStatusType::clearLinkStatistics() noexcept {
  linkStatistics_Accessor.reset();
  return *this;
}

uci::type::CommControlType& UserLinkStatusType::getCommonSettingsStatus_() const {
  if (commonSettingsStatus_Accessor) {
    return *commonSettingsStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCommonSettingsStatus(): An attempt was made to get an optional field that was not enabled, call hasCommonSettingsStatus() to determine if it is safe to call getCommonSettingsStatus()");
}

const uci::type::CommControlType& UserLinkStatusType::getCommonSettingsStatus() const {
  return getCommonSettingsStatus_();
}

uci::type::CommControlType& UserLinkStatusType::getCommonSettingsStatus() {
  return getCommonSettingsStatus_();
}

uci::type::UserLinkStatusType& UserLinkStatusType::setCommonSettingsStatus(const uci::type::CommControlType& accessor) {
  enableCommonSettingsStatus();
  if (&accessor != commonSettingsStatus_Accessor.get()) {
    commonSettingsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool UserLinkStatusType::hasCommonSettingsStatus() const noexcept {
  return static_cast<bool>(commonSettingsStatus_Accessor);
}

uci::type::CommControlType& UserLinkStatusType::enableCommonSettingsStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commControlType : type};
  if ((!commonSettingsStatus_Accessor) || (commonSettingsStatus_Accessor->getAccessorType() != requestedType)) {
    commonSettingsStatus_Accessor = CommControlType::create(requestedType);
    if (!commonSettingsStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCommonSettingsStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commonSettingsStatus_Accessor;
}

uci::type::UserLinkStatusType& UserLinkStatusType::clearCommonSettingsStatus() noexcept {
  commonSettingsStatus_Accessor.reset();
  return *this;
}

std::unique_ptr<UserLinkStatusType> UserLinkStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::userLinkStatusType : type};
  return (requestedType == uci::type::accessorType::userLinkStatusType) ? boost::make_unique<UserLinkStatusType>() : nullptr;
}

/**  */
namespace UserLinkStatusType_Names {

constexpr const char* Extern_Type_Name{"UserLinkStatusType"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* LinkPortMap_Name{"LinkPortMap"};
constexpr const char* LinkConnectionState_Name{"LinkConnectionState"};
constexpr const char* LinkStatistics_Name{"LinkStatistics"};
constexpr const char* CommonSettingsStatus_Name{"CommonSettingsStatus"};

} // namespace UserLinkStatusType_Names

void UserLinkStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::UserLinkStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = UserLinkStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + UserLinkStatusType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.getNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UserLinkStatusType_Names::LinkPortMap_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::UserLinkStatusType::LinkPortMap& boundedList = accessor.getLinkPortMap();
        const uci::type::UserLinkStatusType::LinkPortMap::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommLinkPortMapType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + UserLinkStatusType_Names::LinkConnectionState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLinkConnectionState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + UserLinkStatusType_Names::LinkStatistics_Name) {
      CommLinkStatisticsType::deserialize(valueType.second, accessor.enableLinkStatistics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UserLinkStatusType_Names::CommonSettingsStatus_Name) {
      CommControlType::deserialize(valueType.second, accessor.enableCommonSettingsStatus(), nodeName, nsPrefix);
    }
  }
}

std::string UserLinkStatusType::serialize(const uci::type::UserLinkStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? UserLinkStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, UserLinkStatusType_Names::Extern_Type_Name);
  }
  NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, UserLinkStatusType_Names::NetworkLinkID_Name);
  {
    const uci::type::UserLinkStatusType::LinkPortMap& boundedList = accessor.getLinkPortMap();
    for (uci::type::UserLinkStatusType::LinkPortMap::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommLinkPortMapType::serialize(boundedList.at(i), node, UserLinkStatusType_Names::LinkPortMap_Name);
    }
  }
  CommConnectionStateEnum::serialize(accessor.getLinkConnectionState(), node, UserLinkStatusType_Names::LinkConnectionState_Name, false);
  if (accessor.hasLinkStatistics()) {
    CommLinkStatisticsType::serialize(accessor.getLinkStatistics(), node, UserLinkStatusType_Names::LinkStatistics_Name);
  }
  if (accessor.hasCommonSettingsStatus()) {
    CommControlType::serialize(accessor.getCommonSettingsStatus(), node, UserLinkStatusType_Names::CommonSettingsStatus_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::UserLinkStatusType& UserLinkStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::UserLinkStatusType>().release());
}

uci::type::UserLinkStatusType& UserLinkStatusType::create(const uci::type::UserLinkStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::UserLinkStatusType> newAccessor{boost::make_unique<asb_uci::type::UserLinkStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void UserLinkStatusType::destroy(uci::type::UserLinkStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::UserLinkStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

