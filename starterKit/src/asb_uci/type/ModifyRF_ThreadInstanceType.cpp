/** @file ModifyRF_ThreadInstanceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ModifyRF_ThreadInstanceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RF_GainType.h"
#include "../../../include/asb_uci/type/SetupBeamConfigurationInstanceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ModifyRF_ThreadInstanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_GainType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SetupBeamConfigurationInstanceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ModifyRF_ThreadInstanceType::ModifyRF_ThreadInstanceType()
  : beamInstance_Accessor{boost::make_unique<BeamInstance>(0, SIZE_MAX)},
    rF_Gain_Accessor{boost::make_unique<RF_Gain>(0, 2)} {
}

ModifyRF_ThreadInstanceType::~ModifyRF_ThreadInstanceType() = default;

void ModifyRF_ThreadInstanceType::copy(const uci::type::ModifyRF_ThreadInstanceType& accessor) {
  copyImpl(accessor, false);
}

void ModifyRF_ThreadInstanceType::copyImpl(const uci::type::ModifyRF_ThreadInstanceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ModifyRF_ThreadInstanceType&>(accessor);
    setRF_ThreadInstanceIndex(accessorImpl.rF_ThreadInstanceIndex_Accessor);
    if (accessorImpl.hasActiveBeamInstanceIndex()) {
      setActiveBeamInstanceIndex(accessorImpl.getActiveBeamInstanceIndex());
    } else {
      clearActiveBeamInstanceIndex();
    }
    if (accessorImpl.hasResourceAccessPriority()) {
      setResourceAccessPriority(accessorImpl.getResourceAccessPriority());
    } else {
      clearResourceAccessPriority();
    }
    setBeamInstance(*(accessorImpl.beamInstance_Accessor));
    setRF_Gain(*(accessorImpl.rF_Gain_Accessor));
  }
}

void ModifyRF_ThreadInstanceType::reset() noexcept {
  rF_ThreadInstanceIndex_Accessor = 0;
  clearActiveBeamInstanceIndex();
  clearResourceAccessPriority();
  beamInstance_Accessor->reset();
  rF_Gain_Accessor->reset();
}

xs::UnsignedInt ModifyRF_ThreadInstanceType::getRF_ThreadInstanceIndex() const {
  return rF_ThreadInstanceIndex_Accessor;
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::setRF_ThreadInstanceIndex(xs::UnsignedInt value) {
  rF_ThreadInstanceIndex_Accessor = value;
  return *this;
}


xs::UnsignedInt ModifyRF_ThreadInstanceType::getActiveBeamInstanceIndex() const {
  if (activeBeamInstanceIndex_Accessor) {
    return *activeBeamInstanceIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getActiveBeamInstanceIndex(): An attempt was made to get an optional field that was not enabled, call hasActiveBeamInstanceIndex() to determine if it is safe to call getActiveBeamInstanceIndex()");
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::setActiveBeamInstanceIndex(xs::UnsignedInt value) {
  activeBeamInstanceIndex_Accessor = value;
  return *this;
}

bool ModifyRF_ThreadInstanceType::hasActiveBeamInstanceIndex() const noexcept {
  return activeBeamInstanceIndex_Accessor.has_value();
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::clearActiveBeamInstanceIndex() noexcept {
  activeBeamInstanceIndex_Accessor.reset();
  return *this;
}

xs::UnsignedInt ModifyRF_ThreadInstanceType::getResourceAccessPriority() const {
  if (resourceAccessPriority_Accessor) {
    return *resourceAccessPriority_Accessor;
  }
  throw uci::base::UCIException("Error in getResourceAccessPriority(): An attempt was made to get an optional field that was not enabled, call hasResourceAccessPriority() to determine if it is safe to call getResourceAccessPriority()");
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::setResourceAccessPriority(xs::UnsignedInt value) {
  resourceAccessPriority_Accessor = value;
  return *this;
}

bool ModifyRF_ThreadInstanceType::hasResourceAccessPriority() const noexcept {
  return resourceAccessPriority_Accessor.has_value();
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::clearResourceAccessPriority() noexcept {
  resourceAccessPriority_Accessor.reset();
  return *this;
}

const uci::type::ModifyRF_ThreadInstanceType::BeamInstance& ModifyRF_ThreadInstanceType::getBeamInstance() const {
  return *beamInstance_Accessor;
}

uci::type::ModifyRF_ThreadInstanceType::BeamInstance& ModifyRF_ThreadInstanceType::getBeamInstance() {
  return *beamInstance_Accessor;
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::setBeamInstance(const uci::type::ModifyRF_ThreadInstanceType::BeamInstance& accessor) {
  if (&accessor != beamInstance_Accessor.get()) {
    beamInstance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ModifyRF_ThreadInstanceType::RF_Gain& ModifyRF_ThreadInstanceType::getRF_Gain() const {
  return *rF_Gain_Accessor;
}

uci::type::ModifyRF_ThreadInstanceType::RF_Gain& ModifyRF_ThreadInstanceType::getRF_Gain() {
  return *rF_Gain_Accessor;
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::setRF_Gain(const uci::type::ModifyRF_ThreadInstanceType::RF_Gain& accessor) {
  if (&accessor != rF_Gain_Accessor.get()) {
    rF_Gain_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ModifyRF_ThreadInstanceType> ModifyRF_ThreadInstanceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modifyRF_ThreadInstanceType : type};
  return (requestedType == uci::type::accessorType::modifyRF_ThreadInstanceType) ? boost::make_unique<ModifyRF_ThreadInstanceType>() : nullptr;
}

/**  */
namespace ModifyRF_ThreadInstanceType_Names {

constexpr const char* Extern_Type_Name{"ModifyRF_ThreadInstanceType"};
constexpr const char* RF_ThreadInstanceIndex_Name{"RF_ThreadInstanceIndex"};
constexpr const char* ActiveBeamInstanceIndex_Name{"ActiveBeamInstanceIndex"};
constexpr const char* ResourceAccessPriority_Name{"ResourceAccessPriority"};
constexpr const char* BeamInstance_Name{"BeamInstance"};
constexpr const char* RF_Gain_Name{"RF_Gain"};

} // namespace ModifyRF_ThreadInstanceType_Names

void ModifyRF_ThreadInstanceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ModifyRF_ThreadInstanceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ModifyRF_ThreadInstanceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ModifyRF_ThreadInstanceType_Names::RF_ThreadInstanceIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRF_ThreadInstanceIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ModifyRF_ThreadInstanceType_Names::ActiveBeamInstanceIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActiveBeamInstanceIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ModifyRF_ThreadInstanceType_Names::ResourceAccessPriority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResourceAccessPriority(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ModifyRF_ThreadInstanceType_Names::BeamInstance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ModifyRF_ThreadInstanceType::BeamInstance& boundedList = accessor.getBeamInstance();
        const uci::type::ModifyRF_ThreadInstanceType::BeamInstance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SetupBeamConfigurationInstanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ModifyRF_ThreadInstanceType_Names::RF_Gain_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ModifyRF_ThreadInstanceType::RF_Gain& boundedList = accessor.getRF_Gain();
        const uci::type::ModifyRF_ThreadInstanceType::RF_Gain::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RF_GainType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ModifyRF_ThreadInstanceType::serialize(const uci::type::ModifyRF_ThreadInstanceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ModifyRF_ThreadInstanceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ModifyRF_ThreadInstanceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRF_ThreadInstanceIndex(), node, ModifyRF_ThreadInstanceType_Names::RF_ThreadInstanceIndex_Name);
  if (accessor.hasActiveBeamInstanceIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getActiveBeamInstanceIndex(), node, ModifyRF_ThreadInstanceType_Names::ActiveBeamInstanceIndex_Name);
  }
  if (accessor.hasResourceAccessPriority()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getResourceAccessPriority(), node, ModifyRF_ThreadInstanceType_Names::ResourceAccessPriority_Name);
  }
  {
    const uci::type::ModifyRF_ThreadInstanceType::BeamInstance& boundedList = accessor.getBeamInstance();
    for (uci::type::ModifyRF_ThreadInstanceType::BeamInstance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SetupBeamConfigurationInstanceType::serialize(boundedList.at(i), node, ModifyRF_ThreadInstanceType_Names::BeamInstance_Name);
    }
  }
  {
    const uci::type::ModifyRF_ThreadInstanceType::RF_Gain& boundedList = accessor.getRF_Gain();
    for (uci::type::ModifyRF_ThreadInstanceType::RF_Gain::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RF_GainType::serialize(boundedList.at(i), node, ModifyRF_ThreadInstanceType_Names::RF_Gain_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ModifyRF_ThreadInstanceType>().release());
}

uci::type::ModifyRF_ThreadInstanceType& ModifyRF_ThreadInstanceType::create(const uci::type::ModifyRF_ThreadInstanceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ModifyRF_ThreadInstanceType> newAccessor{boost::make_unique<asb_uci::type::ModifyRF_ThreadInstanceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ModifyRF_ThreadInstanceType::destroy(uci::type::ModifyRF_ThreadInstanceType& accessor) {
  delete dynamic_cast<asb_uci::type::ModifyRF_ThreadInstanceType*>(&accessor);
}

} // namespace type

} // namespace uci

