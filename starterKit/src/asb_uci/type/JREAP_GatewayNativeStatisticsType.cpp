/** @file JREAP_GatewayNativeStatisticsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/JREAP_GatewayNativeStatisticsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/GatewayNativeStatisticsPET.h"
#include "asb_uci/type/JREAP_CommonTimeReferenceType.h"
#include "asb_uci/type/TCP_SessionStatusEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/JREAP_CommonTimeReferenceType.h"
#include "uci/type/JREAP_GatewayNativeStatisticsType.h"
#include "uci/type/TCP_SessionStatusEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

JREAP_GatewayNativeStatisticsType::JREAP_GatewayNativeStatisticsType()
  : commonTimeReference_Accessor{boost::make_unique<JREAP_CommonTimeReferenceType>()} {
}

JREAP_GatewayNativeStatisticsType::~JREAP_GatewayNativeStatisticsType() = default;

void JREAP_GatewayNativeStatisticsType::copy(const uci::type::JREAP_GatewayNativeStatisticsType& accessor) {
  copyImpl(accessor, false);
}

void JREAP_GatewayNativeStatisticsType::copyImpl(const uci::type::JREAP_GatewayNativeStatisticsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    GatewayNativeStatisticsPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const JREAP_GatewayNativeStatisticsType&>(accessor);
    setAvailableTN_Count(accessorImpl.availableTN_Count_Accessor);
    setTotalTN_Count(accessorImpl.totalTN_Count_Accessor);
    if (accessorImpl.hasRetryTime()) {
      setRetryTime(accessorImpl.getRetryTime());
    } else {
      clearRetryTime();
    }
    if (accessorImpl.sessionStatus_Accessor) {
      setSessionStatus(*(accessorImpl.sessionStatus_Accessor));
    } else {
      sessionStatus_Accessor.reset();
    }
    setCommonTimeReference(*(accessorImpl.commonTimeReference_Accessor));
    setAverageReceivedLatency(accessorImpl.averageReceivedLatency_Accessor);
    setLastReceivedActivityTime(accessorImpl.lastReceivedActivityTime_Accessor);
    setKilobytesReceived(accessorImpl.kilobytesReceived_Accessor);
    setKilobytesSent(accessorImpl.kilobytesSent_Accessor);
    setDataMessagesReceived(accessorImpl.dataMessagesReceived_Accessor);
    setDataMessagesSent(accessorImpl.dataMessagesSent_Accessor);
  }
}

void JREAP_GatewayNativeStatisticsType::reset() noexcept {
  GatewayNativeStatisticsPET::reset();
  availableTN_Count_Accessor = 0;
  totalTN_Count_Accessor = 0;
  clearRetryTime();
  sessionStatus_Accessor.reset();
  commonTimeReference_Accessor->reset();
  averageReceivedLatency_Accessor = 0;
  lastReceivedActivityTime_Accessor = 0;
  kilobytesReceived_Accessor = 0;
  kilobytesSent_Accessor = 0;
  dataMessagesReceived_Accessor = 0;
  dataMessagesSent_Accessor = 0;
}

xs::UnsignedInt JREAP_GatewayNativeStatisticsType::getAvailableTN_Count() const {
  return availableTN_Count_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setAvailableTN_Count(xs::UnsignedInt value) {
  availableTN_Count_Accessor = value;
  return *this;
}


xs::UnsignedInt JREAP_GatewayNativeStatisticsType::getTotalTN_Count() const {
  return totalTN_Count_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setTotalTN_Count(xs::UnsignedInt value) {
  totalTN_Count_Accessor = value;
  return *this;
}


uci::type::DurationTypeValue JREAP_GatewayNativeStatisticsType::getRetryTime() const {
  if (retryTime_Accessor) {
    return *retryTime_Accessor;
  }
  throw uci::base::UCIException("Error in getRetryTime(): An attempt was made to get an optional field that was not enabled, call hasRetryTime() to determine if it is safe to call getRetryTime()");
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setRetryTime(uci::type::DurationTypeValue value) {
  retryTime_Accessor = value;
  return *this;
}

bool JREAP_GatewayNativeStatisticsType::hasRetryTime() const noexcept {
  return retryTime_Accessor.has_value();
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::clearRetryTime() noexcept {
  retryTime_Accessor.reset();
  return *this;
}

uci::type::TCP_SessionStatusEnum& JREAP_GatewayNativeStatisticsType::getSessionStatus_() const {
  if (sessionStatus_Accessor) {
    return *sessionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getSessionStatus(): An attempt was made to get an optional field that was not enabled, call hasSessionStatus() to determine if it is safe to call getSessionStatus()");
}

const uci::type::TCP_SessionStatusEnum& JREAP_GatewayNativeStatisticsType::getSessionStatus() const {
  return getSessionStatus_();
}

uci::type::TCP_SessionStatusEnum& JREAP_GatewayNativeStatisticsType::getSessionStatus() {
  return getSessionStatus_();
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setSessionStatus(const uci::type::TCP_SessionStatusEnum& accessor) {
  enableSessionStatus();
  if (&accessor != sessionStatus_Accessor.get()) {
    sessionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setSessionStatus(const uci::type::TCP_SessionStatusEnum::EnumerationItem value) {
  enableSessionStatus().setValue(value);
  return *this;
}

bool JREAP_GatewayNativeStatisticsType::hasSessionStatus() const noexcept {
  return static_cast<bool>(sessionStatus_Accessor);
}

uci::type::TCP_SessionStatusEnum& JREAP_GatewayNativeStatisticsType::enableSessionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tCP_SessionStatusEnum : type};
  if ((!sessionStatus_Accessor) || (sessionStatus_Accessor->getAccessorType() != requestedType)) {
    sessionStatus_Accessor = TCP_SessionStatusEnum::create(requestedType);
    if (!sessionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableSessionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sessionStatus_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::clearSessionStatus() noexcept {
  sessionStatus_Accessor.reset();
  return *this;
}

const uci::type::JREAP_CommonTimeReferenceType& JREAP_GatewayNativeStatisticsType::getCommonTimeReference() const {
  return *commonTimeReference_Accessor;
}

uci::type::JREAP_CommonTimeReferenceType& JREAP_GatewayNativeStatisticsType::getCommonTimeReference() {
  return *commonTimeReference_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setCommonTimeReference(const uci::type::JREAP_CommonTimeReferenceType& accessor) {
  if (&accessor != commonTimeReference_Accessor.get()) {
    commonTimeReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue JREAP_GatewayNativeStatisticsType::getAverageReceivedLatency() const {
  return averageReceivedLatency_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setAverageReceivedLatency(uci::type::DurationTypeValue value) {
  averageReceivedLatency_Accessor = value;
  return *this;
}


uci::type::DateTimeTypeValue JREAP_GatewayNativeStatisticsType::getLastReceivedActivityTime() const {
  return lastReceivedActivityTime_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setLastReceivedActivityTime(uci::type::DateTimeTypeValue value) {
  lastReceivedActivityTime_Accessor = value;
  return *this;
}


xs::UnsignedInt JREAP_GatewayNativeStatisticsType::getKilobytesReceived() const {
  return kilobytesReceived_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setKilobytesReceived(xs::UnsignedInt value) {
  kilobytesReceived_Accessor = value;
  return *this;
}


xs::UnsignedInt JREAP_GatewayNativeStatisticsType::getKilobytesSent() const {
  return kilobytesSent_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setKilobytesSent(xs::UnsignedInt value) {
  kilobytesSent_Accessor = value;
  return *this;
}


xs::UnsignedInt JREAP_GatewayNativeStatisticsType::getDataMessagesReceived() const {
  return dataMessagesReceived_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setDataMessagesReceived(xs::UnsignedInt value) {
  dataMessagesReceived_Accessor = value;
  return *this;
}


xs::UnsignedInt JREAP_GatewayNativeStatisticsType::getDataMessagesSent() const {
  return dataMessagesSent_Accessor;
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::setDataMessagesSent(xs::UnsignedInt value) {
  dataMessagesSent_Accessor = value;
  return *this;
}


std::unique_ptr<JREAP_GatewayNativeStatisticsType> JREAP_GatewayNativeStatisticsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::jREAP_GatewayNativeStatisticsType : type};
  return (requestedType == uci::type::accessorType::jREAP_GatewayNativeStatisticsType) ? boost::make_unique<JREAP_GatewayNativeStatisticsType>() : nullptr;
}

/**  */
namespace JREAP_GatewayNativeStatisticsType_Names {

constexpr const char* Extern_Type_Name{"JREAP_GatewayNativeStatisticsType"};
constexpr const char* AvailableTN_Count_Name{"AvailableTN_Count"};
constexpr const char* TotalTN_Count_Name{"TotalTN_Count"};
constexpr const char* RetryTime_Name{"RetryTime"};
constexpr const char* SessionStatus_Name{"SessionStatus"};
constexpr const char* CommonTimeReference_Name{"CommonTimeReference"};
constexpr const char* AverageReceivedLatency_Name{"AverageReceivedLatency"};
constexpr const char* LastReceivedActivityTime_Name{"LastReceivedActivityTime"};
constexpr const char* KilobytesReceived_Name{"KilobytesReceived"};
constexpr const char* KilobytesSent_Name{"KilobytesSent"};
constexpr const char* DataMessagesReceived_Name{"DataMessagesReceived"};
constexpr const char* DataMessagesSent_Name{"DataMessagesSent"};

} // namespace JREAP_GatewayNativeStatisticsType_Names

void JREAP_GatewayNativeStatisticsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::JREAP_GatewayNativeStatisticsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = JREAP_GatewayNativeStatisticsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::AvailableTN_Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAvailableTN_Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::TotalTN_Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTotalTN_Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::RetryTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRetryTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::SessionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSessionStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::CommonTimeReference_Name) {
      JREAP_CommonTimeReferenceType::deserialize(valueType.second, accessor.getCommonTimeReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::AverageReceivedLatency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAverageReceivedLatency(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::LastReceivedActivityTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLastReceivedActivityTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::KilobytesReceived_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setKilobytesReceived(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::KilobytesSent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setKilobytesSent(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::DataMessagesReceived_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataMessagesReceived(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + JREAP_GatewayNativeStatisticsType_Names::DataMessagesSent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataMessagesSent(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
  GatewayNativeStatisticsPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string JREAP_GatewayNativeStatisticsType::serialize(const uci::type::JREAP_GatewayNativeStatisticsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? JREAP_GatewayNativeStatisticsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, JREAP_GatewayNativeStatisticsType_Names::Extern_Type_Name);
  }
  GatewayNativeStatisticsPET::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAvailableTN_Count(), node, JREAP_GatewayNativeStatisticsType_Names::AvailableTN_Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getTotalTN_Count(), node, JREAP_GatewayNativeStatisticsType_Names::TotalTN_Count_Name);
  if (accessor.hasRetryTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getRetryTime(), node, JREAP_GatewayNativeStatisticsType_Names::RetryTime_Name);
  }
  if (accessor.hasSessionStatus()) {
    TCP_SessionStatusEnum::serialize(accessor.getSessionStatus(), node, JREAP_GatewayNativeStatisticsType_Names::SessionStatus_Name, false);
  }
  JREAP_CommonTimeReferenceType::serialize(accessor.getCommonTimeReference(), node, JREAP_GatewayNativeStatisticsType_Names::CommonTimeReference_Name);
  asb_uci::util::SerializationHelpers::serializeDuration(accessor.getAverageReceivedLatency(), node, JREAP_GatewayNativeStatisticsType_Names::AverageReceivedLatency_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getLastReceivedActivityTime(), node, JREAP_GatewayNativeStatisticsType_Names::LastReceivedActivityTime_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getKilobytesReceived(), node, JREAP_GatewayNativeStatisticsType_Names::KilobytesReceived_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getKilobytesSent(), node, JREAP_GatewayNativeStatisticsType_Names::KilobytesSent_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDataMessagesReceived(), node, JREAP_GatewayNativeStatisticsType_Names::DataMessagesReceived_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDataMessagesSent(), node, JREAP_GatewayNativeStatisticsType_Names::DataMessagesSent_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::JREAP_GatewayNativeStatisticsType>().release());
}

uci::type::JREAP_GatewayNativeStatisticsType& JREAP_GatewayNativeStatisticsType::create(const uci::type::JREAP_GatewayNativeStatisticsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::JREAP_GatewayNativeStatisticsType> newAccessor{boost::make_unique<asb_uci::type::JREAP_GatewayNativeStatisticsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void JREAP_GatewayNativeStatisticsType::destroy(uci::type::JREAP_GatewayNativeStatisticsType& accessor) {
  delete dynamic_cast<asb_uci::type::JREAP_GatewayNativeStatisticsType*>(&accessor);
}

} // namespace type

} // namespace uci

