/** @file VideoEncoderOutputType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/VideoEncoderOutputType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FileNameAndOutputType.h"
#include "../../../include/asb_uci/type/IP_ConnectionChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileNameAndOutputType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IP_ConnectionChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VideoEncoderOutputType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VideoEncoderOutputType::VideoEncoderOutputType() = default;

VideoEncoderOutputType::~VideoEncoderOutputType() = default;

void VideoEncoderOutputType::copy(const uci::type::VideoEncoderOutputType& accessor) {
  copyImpl(accessor, false);
}

void VideoEncoderOutputType::copyImpl(const uci::type::VideoEncoderOutputType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VideoEncoderOutputType&>(accessor);
    if (accessorImpl.socketAddress_Accessor) {
      setSocketAddress(*(accessorImpl.socketAddress_Accessor));
    } else {
      socketAddress_Accessor.reset();
    }
    if (accessorImpl.file_Accessor) {
      setFile(*(accessorImpl.file_Accessor));
    } else {
      file_Accessor.reset();
    }
  }
}

void VideoEncoderOutputType::reset() noexcept {
  socketAddress_Accessor.reset();
  file_Accessor.reset();
}

uci::type::VideoEncoderOutputType::VideoEncoderOutputTypeChoice VideoEncoderOutputType::getVideoEncoderOutputTypeChoiceOrdinal() const noexcept {
  if (socketAddress_Accessor) {
    return VIDEOENCODEROUTPUTTYPE_CHOICE_SOCKETADDRESS;
  }
  if (file_Accessor) {
    return VIDEOENCODEROUTPUTTYPE_CHOICE_FILE;
  }
  return VIDEOENCODEROUTPUTTYPE_CHOICE_NONE;
}

uci::type::VideoEncoderOutputType& VideoEncoderOutputType::setVideoEncoderOutputTypeChoiceOrdinal(uci::type::VideoEncoderOutputType::VideoEncoderOutputTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case VIDEOENCODEROUTPUTTYPE_CHOICE_SOCKETADDRESS:
      chooseSocketAddress("setVideoEncoderOutputTypeChoiceOrdinal", type);
      break;
    case VIDEOENCODEROUTPUTTYPE_CHOICE_FILE:
      chooseFile("setVideoEncoderOutputTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setVideoEncoderOutputTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::IP_ConnectionChoiceType& VideoEncoderOutputType::getSocketAddress_() const {
  if (socketAddress_Accessor) {
    return *socketAddress_Accessor;
  }
  throw uci::base::UCIException("Error in getSocketAddress(): Unable to get SocketAddress, field not selected");
}

const uci::type::IP_ConnectionChoiceType& VideoEncoderOutputType::getSocketAddress() const {
  return getSocketAddress_();
}

uci::type::IP_ConnectionChoiceType& VideoEncoderOutputType::getSocketAddress() {
  return getSocketAddress_();
}

uci::type::VideoEncoderOutputType& VideoEncoderOutputType::setSocketAddress(const uci::type::IP_ConnectionChoiceType& accessor) {
  chooseSocketAddress(accessor.getAccessorType());
  if (&accessor != socketAddress_Accessor.get()) {
    socketAddress_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VideoEncoderOutputType::isSocketAddress() const noexcept {
  return static_cast<bool>(socketAddress_Accessor);
}

uci::type::IP_ConnectionChoiceType& VideoEncoderOutputType::chooseSocketAddress(const std::string& method, uci::base::accessorType::AccessorType type) {
  file_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iP_ConnectionChoiceType : type};
  if ((!socketAddress_Accessor) || (socketAddress_Accessor->getAccessorType() != requestedType)) {
    socketAddress_Accessor = IP_ConnectionChoiceType::create(type);
    if (!socketAddress_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *socketAddress_Accessor;
}

uci::type::IP_ConnectionChoiceType& VideoEncoderOutputType::chooseSocketAddress(uci::base::accessorType::AccessorType type) {
  return chooseSocketAddress("chooseSocketAddress", type);
}

uci::type::FileNameAndOutputType& VideoEncoderOutputType::getFile_() const {
  if (file_Accessor) {
    return *file_Accessor;
  }
  throw uci::base::UCIException("Error in getFile(): Unable to get File, field not selected");
}

const uci::type::FileNameAndOutputType& VideoEncoderOutputType::getFile() const {
  return getFile_();
}

uci::type::FileNameAndOutputType& VideoEncoderOutputType::getFile() {
  return getFile_();
}

uci::type::VideoEncoderOutputType& VideoEncoderOutputType::setFile(const uci::type::FileNameAndOutputType& accessor) {
  chooseFile();
  if (&accessor != file_Accessor.get()) {
    file_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VideoEncoderOutputType::isFile() const noexcept {
  return static_cast<bool>(file_Accessor);
}

uci::type::FileNameAndOutputType& VideoEncoderOutputType::chooseFile(const std::string& method, uci::base::accessorType::AccessorType type) {
  socketAddress_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileNameAndOutputType : type};
  if ((!file_Accessor) || (file_Accessor->getAccessorType() != requestedType)) {
    file_Accessor = FileNameAndOutputType::create(type);
    if (!file_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *file_Accessor;
}

uci::type::FileNameAndOutputType& VideoEncoderOutputType::chooseFile(uci::base::accessorType::AccessorType type) {
  return chooseFile("chooseFile", type);
}

std::unique_ptr<VideoEncoderOutputType> VideoEncoderOutputType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::videoEncoderOutputType : type};
  return (requestedType == uci::type::accessorType::videoEncoderOutputType) ? boost::make_unique<VideoEncoderOutputType>() : nullptr;
}

/**  */
namespace VideoEncoderOutputType_Names {

constexpr const char* Extern_Type_Name{"VideoEncoderOutputType"};
constexpr const char* SocketAddress_Name{"SocketAddress"};
constexpr const char* File_Name{"File"};

} // namespace VideoEncoderOutputType_Names

void VideoEncoderOutputType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VideoEncoderOutputType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VideoEncoderOutputType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VideoEncoderOutputType_Names::SocketAddress_Name) {
      IP_ConnectionChoiceType::deserialize(valueType.second, accessor.chooseSocketAddress(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VideoEncoderOutputType_Names::File_Name) {
      FileNameAndOutputType::deserialize(valueType.second, accessor.chooseFile(), nodeName, nsPrefix);
    }
  }
}

std::string VideoEncoderOutputType::serialize(const uci::type::VideoEncoderOutputType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VideoEncoderOutputType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VideoEncoderOutputType_Names::Extern_Type_Name);
  }
  if (accessor.isSocketAddress()) {
    IP_ConnectionChoiceType::serialize(accessor.getSocketAddress(), node, VideoEncoderOutputType_Names::SocketAddress_Name);
  } else if (accessor.isFile()) {
    FileNameAndOutputType::serialize(accessor.getFile(), node, VideoEncoderOutputType_Names::File_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VideoEncoderOutputType& VideoEncoderOutputType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VideoEncoderOutputType>().release());
}

uci::type::VideoEncoderOutputType& VideoEncoderOutputType::create(const uci::type::VideoEncoderOutputType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VideoEncoderOutputType> newAccessor{boost::make_unique<asb_uci::type::VideoEncoderOutputType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VideoEncoderOutputType::destroy(uci::type::VideoEncoderOutputType& accessor) {
  delete dynamic_cast<asb_uci::type::VideoEncoderOutputType*>(&accessor);
}

} // namespace type

} // namespace uci

