/** @file ApplicabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ApplicabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ConstrainingPlanPartsType.h"
#include "../../../include/asb_uci/type/IdentityType.h"
#include "../../../include/asb_uci/type/RequirementTaxonomyType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApplicabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ConstrainingPlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementTaxonomyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ApplicabilityType::ApplicabilityType()
  : system_Accessor{boost::make_unique<System>(1, SIZE_MAX)} {
}

ApplicabilityType::~ApplicabilityType() = default;

void ApplicabilityType::copy(const uci::type::ApplicabilityType& accessor) {
  copyImpl(accessor, false);
}

void ApplicabilityType::copyImpl(const uci::type::ApplicabilityType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::applicabilityType)) {
      const auto& accessorImpl = dynamic_cast<const ApplicabilityType&>(accessor);
      setSystem(*(accessorImpl.system_Accessor));
      if (accessorImpl.requirementTypes_Accessor) {
        setRequirementTypes(*(accessorImpl.requirementTypes_Accessor));
      } else {
        requirementTypes_Accessor.reset();
      }
      if (accessorImpl.constrainingPlan_Accessor) {
        setConstrainingPlan(*(accessorImpl.constrainingPlan_Accessor));
      } else {
        constrainingPlan_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ApplicabilityType::reset() noexcept {
  system_Accessor->reset();
  requirementTypes_Accessor.reset();
  constrainingPlan_Accessor.reset();
}

const uci::type::ApplicabilityType::System& ApplicabilityType::getSystem() const {
  return *system_Accessor;
}

uci::type::ApplicabilityType::System& ApplicabilityType::getSystem() {
  return *system_Accessor;
}

uci::type::ApplicabilityType& ApplicabilityType::setSystem(const uci::type::ApplicabilityType::System& accessor) {
  if (&accessor != system_Accessor.get()) {
    system_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementTaxonomyType& ApplicabilityType::getRequirementTypes_() const {
  if (requirementTypes_Accessor) {
    return *requirementTypes_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementTypes(): An attempt was made to get an optional field that was not enabled, call hasRequirementTypes() to determine if it is safe to call getRequirementTypes()");
}

const uci::type::RequirementTaxonomyType& ApplicabilityType::getRequirementTypes() const {
  return getRequirementTypes_();
}

uci::type::RequirementTaxonomyType& ApplicabilityType::getRequirementTypes() {
  return getRequirementTypes_();
}

uci::type::ApplicabilityType& ApplicabilityType::setRequirementTypes(const uci::type::RequirementTaxonomyType& accessor) {
  enableRequirementTypes(accessor.getAccessorType());
  if (&accessor != requirementTypes_Accessor.get()) {
    requirementTypes_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ApplicabilityType::hasRequirementTypes() const noexcept {
  return static_cast<bool>(requirementTypes_Accessor);
}

uci::type::RequirementTaxonomyType& ApplicabilityType::enableRequirementTypes(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTaxonomyType : type};
  if ((!requirementTypes_Accessor) || (requirementTypes_Accessor->getAccessorType() != requestedType)) {
    requirementTypes_Accessor = RequirementTaxonomyType::create(requestedType);
    if (!requirementTypes_Accessor) {
      throw uci::base::UCIException("Error in enableRequirementTypes(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementTypes_Accessor;
}

uci::type::ApplicabilityType& ApplicabilityType::clearRequirementTypes() noexcept {
  requirementTypes_Accessor.reset();
  return *this;
}

uci::type::ConstrainingPlanPartsType& ApplicabilityType::getConstrainingPlan_() const {
  if (constrainingPlan_Accessor) {
    return *constrainingPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getConstrainingPlan(): An attempt was made to get an optional field that was not enabled, call hasConstrainingPlan() to determine if it is safe to call getConstrainingPlan()");
}

const uci::type::ConstrainingPlanPartsType& ApplicabilityType::getConstrainingPlan() const {
  return getConstrainingPlan_();
}

uci::type::ConstrainingPlanPartsType& ApplicabilityType::getConstrainingPlan() {
  return getConstrainingPlan_();
}

uci::type::ApplicabilityType& ApplicabilityType::setConstrainingPlan(const uci::type::ConstrainingPlanPartsType& accessor) {
  enableConstrainingPlan();
  if (&accessor != constrainingPlan_Accessor.get()) {
    constrainingPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApplicabilityType::hasConstrainingPlan() const noexcept {
  return static_cast<bool>(constrainingPlan_Accessor);
}

uci::type::ConstrainingPlanPartsType& ApplicabilityType::enableConstrainingPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::constrainingPlanPartsType : type};
  if ((!constrainingPlan_Accessor) || (constrainingPlan_Accessor->getAccessorType() != requestedType)) {
    constrainingPlan_Accessor = ConstrainingPlanPartsType::create(requestedType);
    if (!constrainingPlan_Accessor) {
      throw uci::base::UCIException("Error in enableConstrainingPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *constrainingPlan_Accessor;
}

uci::type::ApplicabilityType& ApplicabilityType::clearConstrainingPlan() noexcept {
  constrainingPlan_Accessor.reset();
  return *this;
}

std::unique_ptr<ApplicabilityType> ApplicabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::applicabilityType : type};
  return std::unique_ptr<ApplicabilityType>(dynamic_cast<ApplicabilityType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ApplicabilityType_Names {

constexpr const char* Extern_Type_Name{"ApplicabilityType"};
constexpr const char* System_Name{"System"};
constexpr const char* RequirementTypes_Name{"RequirementTypes"};
constexpr const char* ConstrainingPlan_Name{"ConstrainingPlan"};

} // namespace ApplicabilityType_Names

void ApplicabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ApplicabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ApplicabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ApplicabilityType_Names::System_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ApplicabilityType::System& boundedList = accessor.getSystem();
        const uci::type::ApplicabilityType::System::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ApplicabilityType_Names::RequirementTypes_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRequirementTypes(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApplicabilityType_Names::ConstrainingPlan_Name) {
      ConstrainingPlanPartsType::deserialize(valueType.second, accessor.enableConstrainingPlan(), nodeName, nsPrefix);
    }
  }
}

std::string ApplicabilityType::serialize(const uci::type::ApplicabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ApplicabilityType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::applicabilityType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ApplicabilityType_Names::Extern_Type_Name);
    }
    {
      const uci::type::ApplicabilityType::System& boundedList = accessor.getSystem();
      for (uci::type::ApplicabilityType::System::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::IdentityType::serialize(boundedList.at(i), node, ApplicabilityType_Names::System_Name);
      }
    }
    if (accessor.hasRequirementTypes()) {
      RequirementTaxonomyType::serialize(accessor.getRequirementTypes(), node, ApplicabilityType_Names::RequirementTypes_Name);
    }
    if (accessor.hasConstrainingPlan()) {
      ConstrainingPlanPartsType::serialize(accessor.getConstrainingPlan(), node, ApplicabilityType_Names::ConstrainingPlan_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ApplicabilityType& ApplicabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ApplicabilityType>().release());
}

uci::type::ApplicabilityType& ApplicabilityType::create(const uci::type::ApplicabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ApplicabilityType> newAccessor{boost::make_unique<asb_uci::type::ApplicabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ApplicabilityType::destroy(uci::type::ApplicabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::ApplicabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

