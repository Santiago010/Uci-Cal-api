/** @file SAR_SubCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SAR_SubCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RadarPointingTargetType.h"
#include "asb_uci/type/SAR_EllipticityPolicyEnum.h"
#include "asb_uci/type/SAR_SubCapabilityClutterParametersType.h"
#include "asb_uci/type/SAR_SubCapabilityNparDetailsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/RadarPointingTargetType.h"
#include "uci/type/SAR_EllipticityPolicyEnum.h"
#include "uci/type/SAR_SubCapabilityClutterParametersType.h"
#include "uci/type/SAR_SubCapabilityNparDetailsType.h"
#include "uci/type/SAR_SubCapabilityType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_SubCapabilityType::SAR_SubCapabilityType()
  : radarPointingTarget_Accessor{boost::make_unique<RadarPointingTargetType>()} {
}

SAR_SubCapabilityType::~SAR_SubCapabilityType() = default;

void SAR_SubCapabilityType::copy(const uci::type::SAR_SubCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void SAR_SubCapabilityType::copyImpl(const uci::type::SAR_SubCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SAR_SubCapabilityType&>(accessor);
    setRadarPointingTarget(*(accessorImpl.radarPointingTarget_Accessor));
    if (accessorImpl.hasMultiLook()) {
      setMultiLook(accessorImpl.getMultiLook());
    } else {
      clearMultiLook();
    }
    if (accessorImpl.ellipticityPolicy_Accessor) {
      setEllipticityPolicy(*(accessorImpl.ellipticityPolicy_Accessor));
    } else {
      ellipticityPolicy_Accessor.reset();
    }
    if (accessorImpl.hasAllowableEllipticityMagnitude()) {
      setAllowableEllipticityMagnitude(accessorImpl.getAllowableEllipticityMagnitude());
    } else {
      clearAllowableEllipticityMagnitude();
    }
    if (accessorImpl.hasMaximumBeamRolloffDB()) {
      setMaximumBeamRolloffDB(accessorImpl.getMaximumBeamRolloffDB());
    } else {
      clearMaximumBeamRolloffDB();
    }
    if (accessorImpl.nPAR_Details_Accessor) {
      setNPAR_Details(*(accessorImpl.nPAR_Details_Accessor));
    } else {
      nPAR_Details_Accessor.reset();
    }
    if (accessorImpl.clutterParameters_Accessor) {
      setClutterParameters(*(accessorImpl.clutterParameters_Accessor));
    } else {
      clutterParameters_Accessor.reset();
    }
  }
}

void SAR_SubCapabilityType::reset() noexcept {
  radarPointingTarget_Accessor->reset();
  clearMultiLook();
  ellipticityPolicy_Accessor.reset();
  clearAllowableEllipticityMagnitude();
  clearMaximumBeamRolloffDB();
  nPAR_Details_Accessor.reset();
  clutterParameters_Accessor.reset();
}

const uci::type::RadarPointingTargetType& SAR_SubCapabilityType::getRadarPointingTarget() const {
  return *radarPointingTarget_Accessor;
}

uci::type::RadarPointingTargetType& SAR_SubCapabilityType::getRadarPointingTarget() {
  return *radarPointingTarget_Accessor;
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setRadarPointingTarget(const uci::type::RadarPointingTargetType& accessor) {
  if (&accessor != radarPointingTarget_Accessor.get()) {
    radarPointingTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean SAR_SubCapabilityType::getMultiLook() const {
  if (multiLook_Accessor) {
    return *multiLook_Accessor;
  }
  throw uci::base::UCIException("Error in getMultiLook(): An attempt was made to get an optional field that was not enabled, call hasMultiLook() to determine if it is safe to call getMultiLook()");
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setMultiLook(xs::Boolean value) {
  multiLook_Accessor = value;
  return *this;
}

bool SAR_SubCapabilityType::hasMultiLook() const noexcept {
  return multiLook_Accessor.has_value();
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::clearMultiLook() noexcept {
  multiLook_Accessor.reset();
  return *this;
}

uci::type::SAR_EllipticityPolicyEnum& SAR_SubCapabilityType::getEllipticityPolicy_() const {
  if (ellipticityPolicy_Accessor) {
    return *ellipticityPolicy_Accessor;
  }
  throw uci::base::UCIException("Error in getEllipticityPolicy(): An attempt was made to get an optional field that was not enabled, call hasEllipticityPolicy() to determine if it is safe to call getEllipticityPolicy()");
}

const uci::type::SAR_EllipticityPolicyEnum& SAR_SubCapabilityType::getEllipticityPolicy() const {
  return getEllipticityPolicy_();
}

uci::type::SAR_EllipticityPolicyEnum& SAR_SubCapabilityType::getEllipticityPolicy() {
  return getEllipticityPolicy_();
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setEllipticityPolicy(const uci::type::SAR_EllipticityPolicyEnum& accessor) {
  enableEllipticityPolicy();
  if (&accessor != ellipticityPolicy_Accessor.get()) {
    ellipticityPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setEllipticityPolicy(const uci::type::SAR_EllipticityPolicyEnum::EnumerationItem value) {
  enableEllipticityPolicy().setValue(value);
  return *this;
}

bool SAR_SubCapabilityType::hasEllipticityPolicy() const noexcept {
  return static_cast<bool>(ellipticityPolicy_Accessor);
}

uci::type::SAR_EllipticityPolicyEnum& SAR_SubCapabilityType::enableEllipticityPolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_EllipticityPolicyEnum : type};
  if ((!ellipticityPolicy_Accessor) || (ellipticityPolicy_Accessor->getAccessorType() != requestedType)) {
    ellipticityPolicy_Accessor = SAR_EllipticityPolicyEnum::create(requestedType);
    if (!ellipticityPolicy_Accessor) {
      throw uci::base::UCIException("Error in enableEllipticityPolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ellipticityPolicy_Accessor;
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::clearEllipticityPolicy() noexcept {
  ellipticityPolicy_Accessor.reset();
  return *this;
}

xs::Float SAR_SubCapabilityType::getAllowableEllipticityMagnitude() const {
  if (allowableEllipticityMagnitude_Accessor) {
    return *allowableEllipticityMagnitude_Accessor;
  }
  throw uci::base::UCIException("Error in getAllowableEllipticityMagnitude(): An attempt was made to get an optional field that was not enabled, call hasAllowableEllipticityMagnitude() to determine if it is safe to call getAllowableEllipticityMagnitude()");
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setAllowableEllipticityMagnitude(xs::Float value) {
  allowableEllipticityMagnitude_Accessor = value;
  return *this;
}

bool SAR_SubCapabilityType::hasAllowableEllipticityMagnitude() const noexcept {
  return allowableEllipticityMagnitude_Accessor.has_value();
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::clearAllowableEllipticityMagnitude() noexcept {
  allowableEllipticityMagnitude_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SAR_SubCapabilityType::getMaximumBeamRolloffDB() const {
  if (maximumBeamRolloffDB_Accessor) {
    return *maximumBeamRolloffDB_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumBeamRolloffDB(): An attempt was made to get an optional field that was not enabled, call hasMaximumBeamRolloffDB() to determine if it is safe to call getMaximumBeamRolloffDB()");
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setMaximumBeamRolloffDB(uci::type::DecibelTypeValue value) {
  maximumBeamRolloffDB_Accessor = value;
  return *this;
}

bool SAR_SubCapabilityType::hasMaximumBeamRolloffDB() const noexcept {
  return maximumBeamRolloffDB_Accessor.has_value();
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::clearMaximumBeamRolloffDB() noexcept {
  maximumBeamRolloffDB_Accessor.reset();
  return *this;
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityType::getNPAR_Details_() const {
  if (nPAR_Details_Accessor) {
    return *nPAR_Details_Accessor;
  }
  throw uci::base::UCIException("Error in getNPAR_Details(): An attempt was made to get an optional field that was not enabled, call hasNPAR_Details() to determine if it is safe to call getNPAR_Details()");
}

const uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityType::getNPAR_Details() const {
  return getNPAR_Details_();
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityType::getNPAR_Details() {
  return getNPAR_Details_();
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setNPAR_Details(const uci::type::SAR_SubCapabilityNparDetailsType& accessor) {
  enableNPAR_Details();
  if (&accessor != nPAR_Details_Accessor.get()) {
    nPAR_Details_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_SubCapabilityType::hasNPAR_Details() const noexcept {
  return static_cast<bool>(nPAR_Details_Accessor);
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityType::enableNPAR_Details(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_SubCapabilityNparDetailsType : type};
  if ((!nPAR_Details_Accessor) || (nPAR_Details_Accessor->getAccessorType() != requestedType)) {
    nPAR_Details_Accessor = SAR_SubCapabilityNparDetailsType::create(requestedType);
    if (!nPAR_Details_Accessor) {
      throw uci::base::UCIException("Error in enableNPAR_Details(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nPAR_Details_Accessor;
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::clearNPAR_Details() noexcept {
  nPAR_Details_Accessor.reset();
  return *this;
}

uci::type::SAR_SubCapabilityClutterParametersType& SAR_SubCapabilityType::getClutterParameters_() const {
  if (clutterParameters_Accessor) {
    return *clutterParameters_Accessor;
  }
  throw uci::base::UCIException("Error in getClutterParameters(): An attempt was made to get an optional field that was not enabled, call hasClutterParameters() to determine if it is safe to call getClutterParameters()");
}

const uci::type::SAR_SubCapabilityClutterParametersType& SAR_SubCapabilityType::getClutterParameters() const {
  return getClutterParameters_();
}

uci::type::SAR_SubCapabilityClutterParametersType& SAR_SubCapabilityType::getClutterParameters() {
  return getClutterParameters_();
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::setClutterParameters(const uci::type::SAR_SubCapabilityClutterParametersType& accessor) {
  enableClutterParameters();
  if (&accessor != clutterParameters_Accessor.get()) {
    clutterParameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_SubCapabilityType::hasClutterParameters() const noexcept {
  return static_cast<bool>(clutterParameters_Accessor);
}

uci::type::SAR_SubCapabilityClutterParametersType& SAR_SubCapabilityType::enableClutterParameters(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_SubCapabilityClutterParametersType : type};
  if ((!clutterParameters_Accessor) || (clutterParameters_Accessor->getAccessorType() != requestedType)) {
    clutterParameters_Accessor = SAR_SubCapabilityClutterParametersType::create(requestedType);
    if (!clutterParameters_Accessor) {
      throw uci::base::UCIException("Error in enableClutterParameters(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *clutterParameters_Accessor;
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::clearClutterParameters() noexcept {
  clutterParameters_Accessor.reset();
  return *this;
}

std::unique_ptr<SAR_SubCapabilityType> SAR_SubCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_SubCapabilityType : type};
  return (requestedType == uci::type::accessorType::sAR_SubCapabilityType) ? boost::make_unique<SAR_SubCapabilityType>() : nullptr;
}

/**  */
namespace SAR_SubCapabilityType_Names {

constexpr const char* Extern_Type_Name{"SAR_SubCapabilityType"};
constexpr const char* RadarPointingTarget_Name{"RadarPointingTarget"};
constexpr const char* MultiLook_Name{"MultiLook"};
constexpr const char* EllipticityPolicy_Name{"EllipticityPolicy"};
constexpr const char* AllowableEllipticityMagnitude_Name{"AllowableEllipticityMagnitude"};
constexpr const char* MaximumBeamRolloffDB_Name{"MaximumBeamRolloffDB"};
constexpr const char* NPAR_Details_Name{"NPAR_Details"};
constexpr const char* ClutterParameters_Name{"ClutterParameters"};

} // namespace SAR_SubCapabilityType_Names

void SAR_SubCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_SubCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_SubCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityType_Names::RadarPointingTarget_Name) {
      RadarPointingTargetType::deserialize(valueType.second, accessor.getRadarPointingTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityType_Names::MultiLook_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMultiLook(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityType_Names::EllipticityPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEllipticityPolicy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityType_Names::AllowableEllipticityMagnitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAllowableEllipticityMagnitude(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityType_Names::MaximumBeamRolloffDB_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumBeamRolloffDB(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityType_Names::NPAR_Details_Name) {
      SAR_SubCapabilityNparDetailsType::deserialize(valueType.second, accessor.enableNPAR_Details(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityType_Names::ClutterParameters_Name) {
      SAR_SubCapabilityClutterParametersType::deserialize(valueType.second, accessor.enableClutterParameters(), nodeName, nsPrefix);
    }
  }
}

std::string SAR_SubCapabilityType::serialize(const uci::type::SAR_SubCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_SubCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_SubCapabilityType_Names::Extern_Type_Name);
  }
  RadarPointingTargetType::serialize(accessor.getRadarPointingTarget(), node, SAR_SubCapabilityType_Names::RadarPointingTarget_Name);
  if (accessor.hasMultiLook()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getMultiLook(), node, SAR_SubCapabilityType_Names::MultiLook_Name);
  }
  if (accessor.hasEllipticityPolicy()) {
    SAR_EllipticityPolicyEnum::serialize(accessor.getEllipticityPolicy(), node, SAR_SubCapabilityType_Names::EllipticityPolicy_Name, false);
  }
  if (accessor.hasAllowableEllipticityMagnitude()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getAllowableEllipticityMagnitude(), node, SAR_SubCapabilityType_Names::AllowableEllipticityMagnitude_Name);
  }
  if (accessor.hasMaximumBeamRolloffDB()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumBeamRolloffDB(), node, SAR_SubCapabilityType_Names::MaximumBeamRolloffDB_Name);
  }
  if (accessor.hasNPAR_Details()) {
    SAR_SubCapabilityNparDetailsType::serialize(accessor.getNPAR_Details(), node, SAR_SubCapabilityType_Names::NPAR_Details_Name);
  }
  if (accessor.hasClutterParameters()) {
    SAR_SubCapabilityClutterParametersType::serialize(accessor.getClutterParameters(), node, SAR_SubCapabilityType_Names::ClutterParameters_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_SubCapabilityType>().release());
}

uci::type::SAR_SubCapabilityType& SAR_SubCapabilityType::create(const uci::type::SAR_SubCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_SubCapabilityType> newAccessor{boost::make_unique<asb_uci::type::SAR_SubCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_SubCapabilityType::destroy(uci::type::SAR_SubCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_SubCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

