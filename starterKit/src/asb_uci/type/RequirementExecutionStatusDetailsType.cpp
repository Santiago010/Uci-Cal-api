/** @file RequirementExecutionStatusDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementExecutionStatusDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CannotComplyType.h"
#include "asb_uci/type/MetricsType.h"
#include "asb_uci/type/RequirementExecutionStateEnum.h"
#include "asb_uci/type/RequirementStatusTraceabilityType.h"
#include "asb_uci/type/RequirementTimingType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/MetricsType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RequirementExecutionStateEnum.h"
#include "uci/type/RequirementExecutionStatusDetailsType.h"
#include "uci/type/RequirementStatusTraceabilityType.h"
#include "uci/type/RequirementTimingType.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementExecutionStatusDetailsType::RequirementExecutionStatusDetailsType()
  : executingSystemID_Accessor{boost::make_unique<SystemID_Type>()},
    executionState_Accessor{boost::make_unique<RequirementExecutionStateEnum>()},
    actualTiming_Accessor{boost::make_unique<ActualTiming>(0, 4)} {
}

RequirementExecutionStatusDetailsType::~RequirementExecutionStatusDetailsType() = default;

void RequirementExecutionStatusDetailsType::copy(const uci::type::RequirementExecutionStatusDetailsType& accessor) {
  copyImpl(accessor, false);
}

void RequirementExecutionStatusDetailsType::copyImpl(const uci::type::RequirementExecutionStatusDetailsType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementExecutionStatusDetailsType)) {
      const auto& accessorImpl = dynamic_cast<const RequirementExecutionStatusDetailsType&>(accessor);
      setExecutingSystemID(*(accessorImpl.executingSystemID_Accessor));
      setExecutionState(*(accessorImpl.executionState_Accessor));
      if (accessorImpl.executionStateReason_Accessor) {
        setExecutionStateReason(*(accessorImpl.executionStateReason_Accessor));
      } else {
        executionStateReason_Accessor.reset();
      }
      setActualTiming(*(accessorImpl.actualTiming_Accessor));
      if (accessorImpl.hasPercentCompleted()) {
        setPercentCompleted(accessorImpl.getPercentCompleted());
      } else {
        clearPercentCompleted();
      }
      if (accessorImpl.traceability_Accessor) {
        setTraceability(*(accessorImpl.traceability_Accessor));
      } else {
        traceability_Accessor.reset();
      }
      if (accessorImpl.metrics_Accessor) {
        setMetrics(*(accessorImpl.metrics_Accessor));
      } else {
        metrics_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RequirementExecutionStatusDetailsType::reset() noexcept {
  executingSystemID_Accessor->reset();
  executionState_Accessor->reset();
  executionStateReason_Accessor.reset();
  actualTiming_Accessor->reset();
  clearPercentCompleted();
  traceability_Accessor.reset();
  metrics_Accessor.reset();
}

const uci::type::SystemID_Type& RequirementExecutionStatusDetailsType::getExecutingSystemID() const {
  return *executingSystemID_Accessor;
}

uci::type::SystemID_Type& RequirementExecutionStatusDetailsType::getExecutingSystemID() {
  return *executingSystemID_Accessor;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setExecutingSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != executingSystemID_Accessor.get()) {
    executingSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementExecutionStateEnum& RequirementExecutionStatusDetailsType::getExecutionState() const {
  return *executionState_Accessor;
}

uci::type::RequirementExecutionStateEnum& RequirementExecutionStatusDetailsType::getExecutionState() {
  return *executionState_Accessor;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setExecutionState(const uci::type::RequirementExecutionStateEnum& accessor) {
  if (&accessor != executionState_Accessor.get()) {
    executionState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setExecutionState(uci::type::RequirementExecutionStateEnum::EnumerationItem value) {
  executionState_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& RequirementExecutionStatusDetailsType::getExecutionStateReason_() const {
  if (executionStateReason_Accessor) {
    return *executionStateReason_Accessor;
  }
  throw uci::base::UCIException("Error in getExecutionStateReason(): An attempt was made to get an optional field that was not enabled, call hasExecutionStateReason() to determine if it is safe to call getExecutionStateReason()");
}

const uci::type::CannotComplyType& RequirementExecutionStatusDetailsType::getExecutionStateReason() const {
  return getExecutionStateReason_();
}

uci::type::CannotComplyType& RequirementExecutionStatusDetailsType::getExecutionStateReason() {
  return getExecutionStateReason_();
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setExecutionStateReason(const uci::type::CannotComplyType& accessor) {
  enableExecutionStateReason(accessor.getAccessorType());
  if (&accessor != executionStateReason_Accessor.get()) {
    executionStateReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RequirementExecutionStatusDetailsType::hasExecutionStateReason() const noexcept {
  return static_cast<bool>(executionStateReason_Accessor);
}

uci::type::CannotComplyType& RequirementExecutionStatusDetailsType::enableExecutionStateReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!executionStateReason_Accessor) || (executionStateReason_Accessor->getAccessorType() != requestedType)) {
    executionStateReason_Accessor = CannotComplyType::create(requestedType);
    if (!executionStateReason_Accessor) {
      throw uci::base::UCIException("Error in enableExecutionStateReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *executionStateReason_Accessor;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::clearExecutionStateReason() noexcept {
  executionStateReason_Accessor.reset();
  return *this;
}

const uci::type::RequirementExecutionStatusDetailsType::ActualTiming& RequirementExecutionStatusDetailsType::getActualTiming() const {
  return *actualTiming_Accessor;
}

uci::type::RequirementExecutionStatusDetailsType::ActualTiming& RequirementExecutionStatusDetailsType::getActualTiming() {
  return *actualTiming_Accessor;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setActualTiming(const uci::type::RequirementExecutionStatusDetailsType::ActualTiming& accessor) {
  if (&accessor != actualTiming_Accessor.get()) {
    actualTiming_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue RequirementExecutionStatusDetailsType::getPercentCompleted() const {
  if (percentCompleted_Accessor) {
    return *percentCompleted_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentCompleted(): An attempt was made to get an optional field that was not enabled, call hasPercentCompleted() to determine if it is safe to call getPercentCompleted()");
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setPercentCompleted(uci::type::PercentTypeValue value) {
  percentCompleted_Accessor = value;
  return *this;
}

bool RequirementExecutionStatusDetailsType::hasPercentCompleted() const noexcept {
  return percentCompleted_Accessor.has_value();
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::clearPercentCompleted() noexcept {
  percentCompleted_Accessor.reset();
  return *this;
}

uci::type::RequirementStatusTraceabilityType& RequirementExecutionStatusDetailsType::getTraceability_() const {
  if (traceability_Accessor) {
    return *traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getTraceability(): An attempt was made to get an optional field that was not enabled, call hasTraceability() to determine if it is safe to call getTraceability()");
}

const uci::type::RequirementStatusTraceabilityType& RequirementExecutionStatusDetailsType::getTraceability() const {
  return getTraceability_();
}

uci::type::RequirementStatusTraceabilityType& RequirementExecutionStatusDetailsType::getTraceability() {
  return getTraceability_();
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setTraceability(const uci::type::RequirementStatusTraceabilityType& accessor) {
  enableTraceability();
  if (&accessor != traceability_Accessor.get()) {
    traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementExecutionStatusDetailsType::hasTraceability() const noexcept {
  return static_cast<bool>(traceability_Accessor);
}

uci::type::RequirementStatusTraceabilityType& RequirementExecutionStatusDetailsType::enableTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementStatusTraceabilityType : type};
  if ((!traceability_Accessor) || (traceability_Accessor->getAccessorType() != requestedType)) {
    traceability_Accessor = RequirementStatusTraceabilityType::create(requestedType);
    if (!traceability_Accessor) {
      throw uci::base::UCIException("Error in enableTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *traceability_Accessor;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::clearTraceability() noexcept {
  traceability_Accessor.reset();
  return *this;
}

uci::type::MetricsType& RequirementExecutionStatusDetailsType::getMetrics_() const {
  if (metrics_Accessor) {
    return *metrics_Accessor;
  }
  throw uci::base::UCIException("Error in getMetrics(): An attempt was made to get an optional field that was not enabled, call hasMetrics() to determine if it is safe to call getMetrics()");
}

const uci::type::MetricsType& RequirementExecutionStatusDetailsType::getMetrics() const {
  return getMetrics_();
}

uci::type::MetricsType& RequirementExecutionStatusDetailsType::getMetrics() {
  return getMetrics_();
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::setMetrics(const uci::type::MetricsType& accessor) {
  enableMetrics();
  if (&accessor != metrics_Accessor.get()) {
    metrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementExecutionStatusDetailsType::hasMetrics() const noexcept {
  return static_cast<bool>(metrics_Accessor);
}

uci::type::MetricsType& RequirementExecutionStatusDetailsType::enableMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::metricsType : type};
  if ((!metrics_Accessor) || (metrics_Accessor->getAccessorType() != requestedType)) {
    metrics_Accessor = MetricsType::create(requestedType);
    if (!metrics_Accessor) {
      throw uci::base::UCIException("Error in enableMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metrics_Accessor;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::clearMetrics() noexcept {
  metrics_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementExecutionStatusDetailsType> RequirementExecutionStatusDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementExecutionStatusDetailsType : type};
  return std::unique_ptr<RequirementExecutionStatusDetailsType>(dynamic_cast<RequirementExecutionStatusDetailsType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RequirementExecutionStatusDetailsType_Names {

constexpr const char* Extern_Type_Name{"RequirementExecutionStatusDetailsType"};
constexpr const char* ExecutingSystemID_Name{"ExecutingSystemID"};
constexpr const char* ExecutionState_Name{"ExecutionState"};
constexpr const char* ExecutionStateReason_Name{"ExecutionStateReason"};
constexpr const char* ActualTiming_Name{"ActualTiming"};
constexpr const char* PercentCompleted_Name{"PercentCompleted"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* Metrics_Name{"Metrics"};

} // namespace RequirementExecutionStatusDetailsType_Names

void RequirementExecutionStatusDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementExecutionStatusDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementExecutionStatusDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ExecutingSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getExecutingSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ExecutionState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getExecutionState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ExecutionStateReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExecutionStateReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ActualTiming_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementExecutionStatusDetailsType::ActualTiming& boundedList = accessor.getActualTiming();
        const uci::type::RequirementExecutionStatusDetailsType::ActualTiming::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementTimingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::PercentCompleted_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentCompleted(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::Traceability_Name) {
      RequirementStatusTraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::Metrics_Name) {
      MetricsType::deserialize(valueType.second, accessor.enableMetrics(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementExecutionStatusDetailsType::serialize(const uci::type::RequirementExecutionStatusDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementExecutionStatusDetailsType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementExecutionStatusDetailsType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementExecutionStatusDetailsType_Names::Extern_Type_Name);
    }
    SystemID_Type::serialize(accessor.getExecutingSystemID(), node, RequirementExecutionStatusDetailsType_Names::ExecutingSystemID_Name);
    RequirementExecutionStateEnum::serialize(accessor.getExecutionState(), node, RequirementExecutionStatusDetailsType_Names::ExecutionState_Name, false);
    if (accessor.hasExecutionStateReason()) {
      CannotComplyType::serialize(accessor.getExecutionStateReason(), node, RequirementExecutionStatusDetailsType_Names::ExecutionStateReason_Name);
    }
    {
      const uci::type::RequirementExecutionStatusDetailsType::ActualTiming& boundedList = accessor.getActualTiming();
      for (uci::type::RequirementExecutionStatusDetailsType::ActualTiming::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::RequirementTimingType::serialize(boundedList.at(i), node, RequirementExecutionStatusDetailsType_Names::ActualTiming_Name);
      }
    }
    if (accessor.hasPercentCompleted()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentCompleted(), node, RequirementExecutionStatusDetailsType_Names::PercentCompleted_Name);
    }
    if (accessor.hasTraceability()) {
      RequirementStatusTraceabilityType::serialize(accessor.getTraceability(), node, RequirementExecutionStatusDetailsType_Names::Traceability_Name);
    }
    if (accessor.hasMetrics()) {
      MetricsType::serialize(accessor.getMetrics(), node, RequirementExecutionStatusDetailsType_Names::Metrics_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementExecutionStatusDetailsType>().release());
}

uci::type::RequirementExecutionStatusDetailsType& RequirementExecutionStatusDetailsType::create(const uci::type::RequirementExecutionStatusDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementExecutionStatusDetailsType> newAccessor{boost::make_unique<asb_uci::type::RequirementExecutionStatusDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementExecutionStatusDetailsType::destroy(uci::type::RequirementExecutionStatusDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementExecutionStatusDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

