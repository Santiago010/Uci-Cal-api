/** @file STANAG_4607_PackingPlanRevA_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/STANAG_4607_PackingPlanRevA_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CharOrSpacePairsType.h"
#include "../../../include/asb_uci/type/STANAG_4607_PackingPlanPET.h"
#include "../../../include/asb_uci/type/STANAG_4607_PlanType.h"
#include "../../../include/asb_uci/type/VisibleString10Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CharOrSpacePairsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/STANAG_4607_PacketSecurityClassificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/STANAG_4607_PackingPlanRevA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/STANAG_4607_PlanType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString10Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

STANAG_4607_PackingPlanRevA_Type::STANAG_4607_PackingPlanRevA_Type()
  : nationality_Accessor{boost::make_unique<CharOrSpacePairsType>()},
    packetSecurityClassification_Accessor{boost::make_unique<STANAG_4607_PacketSecurityClassificationType>()},
    packetSecurityClassificationSystem_Accessor{boost::make_unique<CharOrSpacePairsType>()},
    missionPlan_Accessor{boost::make_unique<STANAG_4607_PlanType>()},
    flightPlan_Accessor{boost::make_unique<STANAG_4607_PlanType>()} {
}

STANAG_4607_PackingPlanRevA_Type::~STANAG_4607_PackingPlanRevA_Type() = default;

void STANAG_4607_PackingPlanRevA_Type::copy(const uci::type::STANAG_4607_PackingPlanRevA_Type& accessor) {
  copyImpl(accessor, false);
}

void STANAG_4607_PackingPlanRevA_Type::copyImpl(const uci::type::STANAG_4607_PackingPlanRevA_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    STANAG_4607_PackingPlanPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const STANAG_4607_PackingPlanRevA_Type&>(accessor);
    setNationality(*(accessorImpl.nationality_Accessor));
    setPacketSecurityClassification(*(accessorImpl.packetSecurityClassification_Accessor));
    setPacketSecurityClassificationSystem(*(accessorImpl.packetSecurityClassificationSystem_Accessor));
    setPacketSecurityCode(accessorImpl.packetSecurityCode_Accessor);
    setExerciseIndicator(accessorImpl.exerciseIndicator_Accessor);
    if (accessorImpl.platformIdentifier_Accessor) {
      setPlatformIdentifier(*(accessorImpl.platformIdentifier_Accessor));
    } else {
      platformIdentifier_Accessor.reset();
    }
    setMissionPlan(*(accessorImpl.missionPlan_Accessor));
    setFlightPlan(*(accessorImpl.flightPlan_Accessor));
  }
}

void STANAG_4607_PackingPlanRevA_Type::reset() noexcept {
  STANAG_4607_PackingPlanPET::reset();
  nationality_Accessor->reset();
  packetSecurityClassification_Accessor->reset();
  packetSecurityClassificationSystem_Accessor->reset();
  packetSecurityCode_Accessor = 0;
  exerciseIndicator_Accessor = 0;
  platformIdentifier_Accessor.reset();
  missionPlan_Accessor->reset();
  flightPlan_Accessor->reset();
}

const uci::type::CharOrSpacePairsType& STANAG_4607_PackingPlanRevA_Type::getNationality() const noexcept {
  return *nationality_Accessor;
}

uci::type::CharOrSpacePairsType& STANAG_4607_PackingPlanRevA_Type::getNationality() noexcept {
  return *nationality_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setNationality(const uci::type::CharOrSpacePairsType& value) {
  return setNationality(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setNationality(const std::string& value) {
  return setNationality(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setNationality(const char* value) {
  nationality_Accessor->setStringValue(value);
  return *this;
}

const uci::type::STANAG_4607_PacketSecurityClassificationType& STANAG_4607_PackingPlanRevA_Type::getPacketSecurityClassification() const noexcept {
  return *packetSecurityClassification_Accessor;
}

uci::type::STANAG_4607_PacketSecurityClassificationType& STANAG_4607_PackingPlanRevA_Type::getPacketSecurityClassification() noexcept {
  return *packetSecurityClassification_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPacketSecurityClassification(const uci::type::STANAG_4607_PacketSecurityClassificationType& value) {
  return setPacketSecurityClassification(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPacketSecurityClassification(const std::string& value) {
  return setPacketSecurityClassification(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPacketSecurityClassification(const char* value) {
  packetSecurityClassification_Accessor->setStringValue(value);
  return *this;
}

const uci::type::CharOrSpacePairsType& STANAG_4607_PackingPlanRevA_Type::getPacketSecurityClassificationSystem() const noexcept {
  return *packetSecurityClassificationSystem_Accessor;
}

uci::type::CharOrSpacePairsType& STANAG_4607_PackingPlanRevA_Type::getPacketSecurityClassificationSystem() noexcept {
  return *packetSecurityClassificationSystem_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPacketSecurityClassificationSystem(const uci::type::CharOrSpacePairsType& value) {
  return setPacketSecurityClassificationSystem(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPacketSecurityClassificationSystem(const std::string& value) {
  return setPacketSecurityClassificationSystem(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPacketSecurityClassificationSystem(const char* value) {
  packetSecurityClassificationSystem_Accessor->setStringValue(value);
  return *this;
}

xs::UnsignedShort STANAG_4607_PackingPlanRevA_Type::getPacketSecurityCode() const {
  return packetSecurityCode_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPacketSecurityCode(xs::UnsignedShort value) {
  packetSecurityCode_Accessor = value;
  return *this;
}


xs::UnsignedByte STANAG_4607_PackingPlanRevA_Type::getExerciseIndicator() const {
  return exerciseIndicator_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setExerciseIndicator(xs::UnsignedByte value) {
  exerciseIndicator_Accessor = value;
  return *this;
}


uci::type::VisibleString10Type& STANAG_4607_PackingPlanRevA_Type::getPlatformIdentifier_() const {
  if (platformIdentifier_Accessor) {
    return *platformIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getPlatformIdentifier(): An attempt was made to get an optional field that was not enabled, call hasPlatformIdentifier() to determine if it is safe to call getPlatformIdentifier()");
}

const uci::type::VisibleString10Type& STANAG_4607_PackingPlanRevA_Type::getPlatformIdentifier() const {
  return getPlatformIdentifier_();
}

uci::type::VisibleString10Type& STANAG_4607_PackingPlanRevA_Type::getPlatformIdentifier() {
  return getPlatformIdentifier_();
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPlatformIdentifier(const uci::type::VisibleString10Type& value) {
  return setPlatformIdentifier(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPlatformIdentifier(const std::string& value) {
  return setPlatformIdentifier(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setPlatformIdentifier(const char* value) {
  enablePlatformIdentifier().setStringValue(value);
  return *this;
}

bool STANAG_4607_PackingPlanRevA_Type::hasPlatformIdentifier() const noexcept {
  return static_cast<bool>(platformIdentifier_Accessor);
}

uci::type::VisibleString10Type& STANAG_4607_PackingPlanRevA_Type::enablePlatformIdentifier(uci::base::accessorType::AccessorType type) {
  if (!platformIdentifier_Accessor) {
    platformIdentifier_Accessor = VisibleString10Type::create(type);
  }
  return *platformIdentifier_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::clearPlatformIdentifier() noexcept {
  platformIdentifier_Accessor.reset();
  return *this;
}

const uci::type::STANAG_4607_PlanType& STANAG_4607_PackingPlanRevA_Type::getMissionPlan() const noexcept {
  return *missionPlan_Accessor;
}

uci::type::STANAG_4607_PlanType& STANAG_4607_PackingPlanRevA_Type::getMissionPlan() noexcept {
  return *missionPlan_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setMissionPlan(const uci::type::STANAG_4607_PlanType& value) {
  return setMissionPlan(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setMissionPlan(const std::string& value) {
  return setMissionPlan(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setMissionPlan(const char* value) {
  missionPlan_Accessor->setStringValue(value);
  return *this;
}

const uci::type::STANAG_4607_PlanType& STANAG_4607_PackingPlanRevA_Type::getFlightPlan() const noexcept {
  return *flightPlan_Accessor;
}

uci::type::STANAG_4607_PlanType& STANAG_4607_PackingPlanRevA_Type::getFlightPlan() noexcept {
  return *flightPlan_Accessor;
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setFlightPlan(const uci::type::STANAG_4607_PlanType& value) {
  return setFlightPlan(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setFlightPlan(const std::string& value) {
  return setFlightPlan(value.c_str());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::setFlightPlan(const char* value) {
  flightPlan_Accessor->setStringValue(value);
  return *this;
}

std::unique_ptr<STANAG_4607_PackingPlanRevA_Type> STANAG_4607_PackingPlanRevA_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sTANAG_4607_PackingPlanRevA_Type : type};
  return (requestedType == uci::type::accessorType::sTANAG_4607_PackingPlanRevA_Type) ? boost::make_unique<STANAG_4607_PackingPlanRevA_Type>() : nullptr;
}

/**  */
namespace STANAG_4607_PackingPlanRevA_Type_Names {

constexpr const char* Extern_Type_Name{"STANAG_4607_PackingPlanRevA_Type"};
constexpr const char* Nationality_Name{"Nationality"};
constexpr const char* PacketSecurityClassification_Name{"PacketSecurityClassification"};
constexpr const char* PacketSecurityClassificationSystem_Name{"PacketSecurityClassificationSystem"};
constexpr const char* PacketSecurityCode_Name{"PacketSecurityCode"};
constexpr const char* ExerciseIndicator_Name{"ExerciseIndicator"};
constexpr const char* PlatformIdentifier_Name{"PlatformIdentifier"};
constexpr const char* MissionPlan_Name{"MissionPlan"};
constexpr const char* FlightPlan_Name{"FlightPlan"};

} // namespace STANAG_4607_PackingPlanRevA_Type_Names

void STANAG_4607_PackingPlanRevA_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::STANAG_4607_PackingPlanRevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = STANAG_4607_PackingPlanRevA_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::Nationality_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNationality(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::PacketSecurityClassification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPacketSecurityClassification(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::PacketSecurityClassificationSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPacketSecurityClassificationSystem(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::PacketSecurityCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPacketSecurityCode(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::ExerciseIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExerciseIndicator(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::PlatformIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPlatformIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::MissionPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionPlan(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanRevA_Type_Names::FlightPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlightPlan(*value);
      }
    }
  }
  STANAG_4607_PackingPlanPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string STANAG_4607_PackingPlanRevA_Type::serialize(const uci::type::STANAG_4607_PackingPlanRevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? STANAG_4607_PackingPlanRevA_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, STANAG_4607_PackingPlanRevA_Type_Names::Extern_Type_Name);
  }
  STANAG_4607_PackingPlanPET::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getNationality(), node, STANAG_4607_PackingPlanRevA_Type_Names::Nationality_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getPacketSecurityClassification(), node, STANAG_4607_PackingPlanRevA_Type_Names::PacketSecurityClassification_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getPacketSecurityClassificationSystem(), node, STANAG_4607_PackingPlanRevA_Type_Names::PacketSecurityClassificationSystem_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getPacketSecurityCode(), node, STANAG_4607_PackingPlanRevA_Type_Names::PacketSecurityCode_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getExerciseIndicator(), node, STANAG_4607_PackingPlanRevA_Type_Names::ExerciseIndicator_Name);
  if (accessor.hasPlatformIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getPlatformIdentifier(), node, STANAG_4607_PackingPlanRevA_Type_Names::PlatformIdentifier_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getMissionPlan(), node, STANAG_4607_PackingPlanRevA_Type_Names::MissionPlan_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getFlightPlan(), node, STANAG_4607_PackingPlanRevA_Type_Names::FlightPlan_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::STANAG_4607_PackingPlanRevA_Type>().release());
}

uci::type::STANAG_4607_PackingPlanRevA_Type& STANAG_4607_PackingPlanRevA_Type::create(const uci::type::STANAG_4607_PackingPlanRevA_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::STANAG_4607_PackingPlanRevA_Type> newAccessor{boost::make_unique<asb_uci::type::STANAG_4607_PackingPlanRevA_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void STANAG_4607_PackingPlanRevA_Type::destroy(uci::type::STANAG_4607_PackingPlanRevA_Type& accessor) {
  delete dynamic_cast<asb_uci::type::STANAG_4607_PackingPlanRevA_Type*>(&accessor);
}

} // namespace type

} // namespace uci

