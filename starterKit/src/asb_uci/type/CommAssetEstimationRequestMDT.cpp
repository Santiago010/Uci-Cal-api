/** @file CommAssetEstimationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommAssetEstimationRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommAssetEstimationMessageEnum.h"
#include "../../../include/asb_uci/type/CommAssetID_Type.h"
#include "../../../include/asb_uci/type/RepeatEnum.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommAssetEstimationMessageEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommAssetEstimationRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommAssetID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepeatEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommAssetEstimationRequestMDT::CommAssetEstimationRequestMDT()
  : commAssetID_Accessor{boost::make_unique<CommAssetID_Type>()},
    requestType_Accessor{boost::make_unique<RequestType>(1, 2)},
    requestFrequencyType_Accessor{boost::make_unique<RepeatEnum>()} {
}

CommAssetEstimationRequestMDT::~CommAssetEstimationRequestMDT() = default;

void CommAssetEstimationRequestMDT::copy(const uci::type::CommAssetEstimationRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void CommAssetEstimationRequestMDT::copyImpl(const uci::type::CommAssetEstimationRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommAssetEstimationRequestMDT&>(accessor);
    setCommAssetID(*(accessorImpl.commAssetID_Accessor));
    setRequestType(*(accessorImpl.requestType_Accessor));
    setRequestFrequencyType(*(accessorImpl.requestFrequencyType_Accessor));
    setResultsInNativeMessage(accessorImpl.resultsInNativeMessage_Accessor);
    if (accessorImpl.hasTimeStep()) {
      setTimeStep(accessorImpl.getTimeStep());
    } else {
      clearTimeStep();
    }
    if (accessorImpl.hasEstimationStart()) {
      setEstimationStart(accessorImpl.getEstimationStart());
    } else {
      clearEstimationStart();
    }
    if (accessorImpl.hasEstimationEnd()) {
      setEstimationEnd(accessorImpl.getEstimationEnd());
    } else {
      clearEstimationEnd();
    }
  }
}

void CommAssetEstimationRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  commAssetID_Accessor->reset();
  requestType_Accessor->reset();
  requestFrequencyType_Accessor->reset();
  resultsInNativeMessage_Accessor = false;
  clearTimeStep();
  clearEstimationStart();
  clearEstimationEnd();
}

const uci::type::CommAssetID_Type& CommAssetEstimationRequestMDT::getCommAssetID() const {
  return *commAssetID_Accessor;
}

uci::type::CommAssetID_Type& CommAssetEstimationRequestMDT::getCommAssetID() {
  return *commAssetID_Accessor;
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setCommAssetID(const uci::type::CommAssetID_Type& accessor) {
  if (&accessor != commAssetID_Accessor.get()) {
    commAssetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommAssetEstimationRequestMDT::RequestType& CommAssetEstimationRequestMDT::getRequestType() const {
  return *requestType_Accessor;
}

uci::type::CommAssetEstimationRequestMDT::RequestType& CommAssetEstimationRequestMDT::getRequestType() {
  return *requestType_Accessor;
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setRequestType(const uci::type::CommAssetEstimationRequestMDT::RequestType& accessor) {
  if (&accessor != requestType_Accessor.get()) {
    requestType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RepeatEnum& CommAssetEstimationRequestMDT::getRequestFrequencyType() const {
  return *requestFrequencyType_Accessor;
}

uci::type::RepeatEnum& CommAssetEstimationRequestMDT::getRequestFrequencyType() {
  return *requestFrequencyType_Accessor;
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setRequestFrequencyType(const uci::type::RepeatEnum& accessor) {
  if (&accessor != requestFrequencyType_Accessor.get()) {
    requestFrequencyType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setRequestFrequencyType(uci::type::RepeatEnum::EnumerationItem value) {
  requestFrequencyType_Accessor->setValue(value);
  return *this;
}


xs::Boolean CommAssetEstimationRequestMDT::getResultsInNativeMessage() const {
  return resultsInNativeMessage_Accessor;
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setResultsInNativeMessage(xs::Boolean value) {
  resultsInNativeMessage_Accessor = value;
  return *this;
}


uci::type::DurationTypeValue CommAssetEstimationRequestMDT::getTimeStep() const {
  if (timeStep_Accessor) {
    return *timeStep_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeStep(): An attempt was made to get an optional field that was not enabled, call hasTimeStep() to determine if it is safe to call getTimeStep()");
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setTimeStep(uci::type::DurationTypeValue value) {
  timeStep_Accessor = value;
  return *this;
}

bool CommAssetEstimationRequestMDT::hasTimeStep() const noexcept {
  return timeStep_Accessor.has_value();
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::clearTimeStep() noexcept {
  timeStep_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CommAssetEstimationRequestMDT::getEstimationStart() const {
  if (estimationStart_Accessor) {
    return *estimationStart_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimationStart(): An attempt was made to get an optional field that was not enabled, call hasEstimationStart() to determine if it is safe to call getEstimationStart()");
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setEstimationStart(uci::type::DateTimeTypeValue value) {
  estimationStart_Accessor = value;
  return *this;
}

bool CommAssetEstimationRequestMDT::hasEstimationStart() const noexcept {
  return estimationStart_Accessor.has_value();
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::clearEstimationStart() noexcept {
  estimationStart_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CommAssetEstimationRequestMDT::getEstimationEnd() const {
  if (estimationEnd_Accessor) {
    return *estimationEnd_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimationEnd(): An attempt was made to get an optional field that was not enabled, call hasEstimationEnd() to determine if it is safe to call getEstimationEnd()");
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::setEstimationEnd(uci::type::DateTimeTypeValue value) {
  estimationEnd_Accessor = value;
  return *this;
}

bool CommAssetEstimationRequestMDT::hasEstimationEnd() const noexcept {
  return estimationEnd_Accessor.has_value();
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::clearEstimationEnd() noexcept {
  estimationEnd_Accessor.reset();
  return *this;
}

std::unique_ptr<CommAssetEstimationRequestMDT> CommAssetEstimationRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAssetEstimationRequestMDT : type};
  return (requestedType == uci::type::accessorType::commAssetEstimationRequestMDT) ? boost::make_unique<CommAssetEstimationRequestMDT>() : nullptr;
}

/**  */
namespace CommAssetEstimationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"CommAssetEstimationRequestMDT"};
constexpr const char* CommAssetID_Name{"CommAssetID"};
constexpr const char* RequestType_Name{"RequestType"};
constexpr const char* RequestFrequencyType_Name{"RequestFrequencyType"};
constexpr const char* ResultsInNativeMessage_Name{"ResultsInNativeMessage"};
constexpr const char* TimeStep_Name{"TimeStep"};
constexpr const char* EstimationStart_Name{"EstimationStart"};
constexpr const char* EstimationEnd_Name{"EstimationEnd"};

} // namespace CommAssetEstimationRequestMDT_Names

void CommAssetEstimationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommAssetEstimationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommAssetEstimationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommAssetEstimationRequestMDT_Names::CommAssetID_Name) {
      CommAssetID_Type::deserialize(valueType.second, accessor.getCommAssetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommAssetEstimationRequestMDT_Names::RequestType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommAssetEstimationRequestMDT::RequestType& boundedList = accessor.getRequestType();
        const uci::type::CommAssetEstimationRequestMDT::RequestType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommAssetEstimationRequestMDT_Names::RequestFrequencyType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRequestFrequencyType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommAssetEstimationRequestMDT_Names::ResultsInNativeMessage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResultsInNativeMessage(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommAssetEstimationRequestMDT_Names::TimeStep_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeStep(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + CommAssetEstimationRequestMDT_Names::EstimationStart_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimationStart(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + CommAssetEstimationRequestMDT_Names::EstimationEnd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimationEnd(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommAssetEstimationRequestMDT::serialize(const uci::type::CommAssetEstimationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommAssetEstimationRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommAssetEstimationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  CommAssetID_Type::serialize(accessor.getCommAssetID(), node, CommAssetEstimationRequestMDT_Names::CommAssetID_Name);
  {
    const uci::type::CommAssetEstimationRequestMDT::RequestType& boundedList = accessor.getRequestType();
    for (uci::type::CommAssetEstimationRequestMDT::RequestType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommAssetEstimationMessageEnum::serialize(boundedList.at(i), node, CommAssetEstimationRequestMDT_Names::RequestType_Name, false);
    }
  }
  RepeatEnum::serialize(accessor.getRequestFrequencyType(), node, CommAssetEstimationRequestMDT_Names::RequestFrequencyType_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResultsInNativeMessage(), node, CommAssetEstimationRequestMDT_Names::ResultsInNativeMessage_Name);
  if (accessor.hasTimeStep()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeStep(), node, CommAssetEstimationRequestMDT_Names::TimeStep_Name);
  }
  if (accessor.hasEstimationStart()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimationStart(), node, CommAssetEstimationRequestMDT_Names::EstimationStart_Name);
  }
  if (accessor.hasEstimationEnd()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimationEnd(), node, CommAssetEstimationRequestMDT_Names::EstimationEnd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommAssetEstimationRequestMDT>().release());
}

uci::type::CommAssetEstimationRequestMDT& CommAssetEstimationRequestMDT::create(const uci::type::CommAssetEstimationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommAssetEstimationRequestMDT> newAccessor{boost::make_unique<asb_uci::type::CommAssetEstimationRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommAssetEstimationRequestMDT::destroy(uci::type::CommAssetEstimationRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CommAssetEstimationRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

