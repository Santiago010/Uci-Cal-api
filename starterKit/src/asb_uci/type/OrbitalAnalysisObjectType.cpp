/** @file OrbitalAnalysisObjectType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalAnalysisObjectType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitalDebrisCloudID_Type.h"
#include "asb_uci/type/OrbitalObjectKinematicsSourceType.h"
#include "asb_uci/type/WorkingSOB_ID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitalAnalysisObjectType.h"
#include "uci/type/OrbitalDebrisCloudID_Type.h"
#include "uci/type/OrbitalObjectKinematicsSourceType.h"
#include "uci/type/WorkingSOB_ID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalAnalysisObjectType::OrbitalAnalysisObjectType() = default;

OrbitalAnalysisObjectType::~OrbitalAnalysisObjectType() = default;

void OrbitalAnalysisObjectType::copy(const uci::type::OrbitalAnalysisObjectType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalAnalysisObjectType::copyImpl(const uci::type::OrbitalAnalysisObjectType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalAnalysisObjectType&>(accessor);
    if (accessorImpl.specificObject_Accessor) {
      setSpecificObject(*(accessorImpl.specificObject_Accessor));
    } else {
      specificObject_Accessor.reset();
    }
    if (accessorImpl.workingSOB_ID_Accessor) {
      setWorkingSOB_ID(*(accessorImpl.workingSOB_ID_Accessor));
    } else {
      workingSOB_ID_Accessor.reset();
    }
    if (accessorImpl.debrisCloudID_Accessor) {
      setDebrisCloudID(*(accessorImpl.debrisCloudID_Accessor));
    } else {
      debrisCloudID_Accessor.reset();
    }
  }
}

void OrbitalAnalysisObjectType::reset() noexcept {
  specificObject_Accessor.reset();
  workingSOB_ID_Accessor.reset();
  debrisCloudID_Accessor.reset();
}

uci::type::OrbitalAnalysisObjectType::OrbitalAnalysisObjectTypeChoice OrbitalAnalysisObjectType::getOrbitalAnalysisObjectTypeChoiceOrdinal() const noexcept {
  if (specificObject_Accessor) {
    return ORBITALANALYSISOBJECTTYPE_CHOICE_SPECIFICOBJECT;
  }
  if (workingSOB_ID_Accessor) {
    return ORBITALANALYSISOBJECTTYPE_CHOICE_WORKINGSOB_ID;
  }
  if (debrisCloudID_Accessor) {
    return ORBITALANALYSISOBJECTTYPE_CHOICE_DEBRISCLOUDID;
  }
  return ORBITALANALYSISOBJECTTYPE_CHOICE_NONE;
}

uci::type::OrbitalAnalysisObjectType& OrbitalAnalysisObjectType::setOrbitalAnalysisObjectTypeChoiceOrdinal(uci::type::OrbitalAnalysisObjectType::OrbitalAnalysisObjectTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALANALYSISOBJECTTYPE_CHOICE_SPECIFICOBJECT:
      chooseSpecificObject("setOrbitalAnalysisObjectTypeChoiceOrdinal", type);
      break;
    case ORBITALANALYSISOBJECTTYPE_CHOICE_WORKINGSOB_ID:
      chooseWorkingSOB_ID("setOrbitalAnalysisObjectTypeChoiceOrdinal", type);
      break;
    case ORBITALANALYSISOBJECTTYPE_CHOICE_DEBRISCLOUDID:
      chooseDebrisCloudID("setOrbitalAnalysisObjectTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalAnalysisObjectTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitalObjectKinematicsSourceType& OrbitalAnalysisObjectType::getSpecificObject_() const {
  if (specificObject_Accessor) {
    return *specificObject_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecificObject(): Unable to get SpecificObject, field not selected");
}

const uci::type::OrbitalObjectKinematicsSourceType& OrbitalAnalysisObjectType::getSpecificObject() const {
  return getSpecificObject_();
}

uci::type::OrbitalObjectKinematicsSourceType& OrbitalAnalysisObjectType::getSpecificObject() {
  return getSpecificObject_();
}

uci::type::OrbitalAnalysisObjectType& OrbitalAnalysisObjectType::setSpecificObject(const uci::type::OrbitalObjectKinematicsSourceType& accessor) {
  chooseSpecificObject();
  if (&accessor != specificObject_Accessor.get()) {
    specificObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalAnalysisObjectType::isSpecificObject() const noexcept {
  return static_cast<bool>(specificObject_Accessor);
}

uci::type::OrbitalObjectKinematicsSourceType& OrbitalAnalysisObjectType::chooseSpecificObject(const std::string& method, uci::base::accessorType::AccessorType type) {
  workingSOB_ID_Accessor.reset();
  debrisCloudID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalObjectKinematicsSourceType : type};
  if ((!specificObject_Accessor) || (specificObject_Accessor->getAccessorType() != requestedType)) {
    specificObject_Accessor = OrbitalObjectKinematicsSourceType::create(type);
    if (!specificObject_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *specificObject_Accessor;
}

uci::type::OrbitalObjectKinematicsSourceType& OrbitalAnalysisObjectType::chooseSpecificObject(uci::base::accessorType::AccessorType type) {
  return chooseSpecificObject("chooseSpecificObject", type);
}

uci::type::WorkingSOB_ID_Type& OrbitalAnalysisObjectType::getWorkingSOB_ID_() const {
  if (workingSOB_ID_Accessor) {
    return *workingSOB_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getWorkingSOB_ID(): Unable to get WorkingSOB_ID, field not selected");
}

const uci::type::WorkingSOB_ID_Type& OrbitalAnalysisObjectType::getWorkingSOB_ID() const {
  return getWorkingSOB_ID_();
}

uci::type::WorkingSOB_ID_Type& OrbitalAnalysisObjectType::getWorkingSOB_ID() {
  return getWorkingSOB_ID_();
}

uci::type::OrbitalAnalysisObjectType& OrbitalAnalysisObjectType::setWorkingSOB_ID(const uci::type::WorkingSOB_ID_Type& accessor) {
  chooseWorkingSOB_ID();
  if (&accessor != workingSOB_ID_Accessor.get()) {
    workingSOB_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalAnalysisObjectType::isWorkingSOB_ID() const noexcept {
  return static_cast<bool>(workingSOB_ID_Accessor);
}

uci::type::WorkingSOB_ID_Type& OrbitalAnalysisObjectType::chooseWorkingSOB_ID(const std::string& method, uci::base::accessorType::AccessorType type) {
  specificObject_Accessor.reset();
  debrisCloudID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::workingSOB_ID_Type : type};
  if ((!workingSOB_ID_Accessor) || (workingSOB_ID_Accessor->getAccessorType() != requestedType)) {
    workingSOB_ID_Accessor = WorkingSOB_ID_Type::create(type);
    if (!workingSOB_ID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *workingSOB_ID_Accessor;
}

uci::type::WorkingSOB_ID_Type& OrbitalAnalysisObjectType::chooseWorkingSOB_ID(uci::base::accessorType::AccessorType type) {
  return chooseWorkingSOB_ID("chooseWorkingSOB_ID", type);
}

uci::type::OrbitalDebrisCloudID_Type& OrbitalAnalysisObjectType::getDebrisCloudID_() const {
  if (debrisCloudID_Accessor) {
    return *debrisCloudID_Accessor;
  }
  throw uci::base::UCIException("Error in getDebrisCloudID(): Unable to get DebrisCloudID, field not selected");
}

const uci::type::OrbitalDebrisCloudID_Type& OrbitalAnalysisObjectType::getDebrisCloudID() const {
  return getDebrisCloudID_();
}

uci::type::OrbitalDebrisCloudID_Type& OrbitalAnalysisObjectType::getDebrisCloudID() {
  return getDebrisCloudID_();
}

uci::type::OrbitalAnalysisObjectType& OrbitalAnalysisObjectType::setDebrisCloudID(const uci::type::OrbitalDebrisCloudID_Type& accessor) {
  chooseDebrisCloudID();
  if (&accessor != debrisCloudID_Accessor.get()) {
    debrisCloudID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalAnalysisObjectType::isDebrisCloudID() const noexcept {
  return static_cast<bool>(debrisCloudID_Accessor);
}

uci::type::OrbitalDebrisCloudID_Type& OrbitalAnalysisObjectType::chooseDebrisCloudID(const std::string& method, uci::base::accessorType::AccessorType type) {
  specificObject_Accessor.reset();
  workingSOB_ID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalDebrisCloudID_Type : type};
  if ((!debrisCloudID_Accessor) || (debrisCloudID_Accessor->getAccessorType() != requestedType)) {
    debrisCloudID_Accessor = OrbitalDebrisCloudID_Type::create(type);
    if (!debrisCloudID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *debrisCloudID_Accessor;
}

uci::type::OrbitalDebrisCloudID_Type& OrbitalAnalysisObjectType::chooseDebrisCloudID(uci::base::accessorType::AccessorType type) {
  return chooseDebrisCloudID("chooseDebrisCloudID", type);
}

std::unique_ptr<OrbitalAnalysisObjectType> OrbitalAnalysisObjectType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalAnalysisObjectType : type};
  return (requestedType == uci::type::accessorType::orbitalAnalysisObjectType) ? boost::make_unique<OrbitalAnalysisObjectType>() : nullptr;
}

/**  */
namespace OrbitalAnalysisObjectType_Names {

constexpr const char* Extern_Type_Name{"OrbitalAnalysisObjectType"};
constexpr const char* SpecificObject_Name{"SpecificObject"};
constexpr const char* WorkingSOB_ID_Name{"WorkingSOB_ID"};
constexpr const char* DebrisCloudID_Name{"DebrisCloudID"};

} // namespace OrbitalAnalysisObjectType_Names

void OrbitalAnalysisObjectType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalAnalysisObjectType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalAnalysisObjectType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalAnalysisObjectType_Names::SpecificObject_Name) {
      OrbitalObjectKinematicsSourceType::deserialize(valueType.second, accessor.chooseSpecificObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalAnalysisObjectType_Names::WorkingSOB_ID_Name) {
      WorkingSOB_ID_Type::deserialize(valueType.second, accessor.chooseWorkingSOB_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalAnalysisObjectType_Names::DebrisCloudID_Name) {
      OrbitalDebrisCloudID_Type::deserialize(valueType.second, accessor.chooseDebrisCloudID(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalAnalysisObjectType::serialize(const uci::type::OrbitalAnalysisObjectType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalAnalysisObjectType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalAnalysisObjectType_Names::Extern_Type_Name);
  }
  if (accessor.isSpecificObject()) {
    OrbitalObjectKinematicsSourceType::serialize(accessor.getSpecificObject(), node, OrbitalAnalysisObjectType_Names::SpecificObject_Name);
  } else if (accessor.isWorkingSOB_ID()) {
    WorkingSOB_ID_Type::serialize(accessor.getWorkingSOB_ID(), node, OrbitalAnalysisObjectType_Names::WorkingSOB_ID_Name);
  } else if (accessor.isDebrisCloudID()) {
    OrbitalDebrisCloudID_Type::serialize(accessor.getDebrisCloudID(), node, OrbitalAnalysisObjectType_Names::DebrisCloudID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalAnalysisObjectType& OrbitalAnalysisObjectType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalAnalysisObjectType>().release());
}

uci::type::OrbitalAnalysisObjectType& OrbitalAnalysisObjectType::create(const uci::type::OrbitalAnalysisObjectType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalAnalysisObjectType> newAccessor{boost::make_unique<asb_uci::type::OrbitalAnalysisObjectType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalAnalysisObjectType::destroy(uci::type::OrbitalAnalysisObjectType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalAnalysisObjectType*>(&accessor);
}

} // namespace type

} // namespace uci

