/** @file OrbitalKinematicsStandardFrameChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalKinematicsStandardFrameChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BCRS_KinematicsType.h"
#include "../../../include/asb_uci/type/GCRS_KinematicsType.h"
#include "../../../include/asb_uci/type/J2K_KinematicsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BCRS_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GCRS_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/J2K_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsStandardFrameChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalKinematicsStandardFrameChoiceType::OrbitalKinematicsStandardFrameChoiceType() = default;

OrbitalKinematicsStandardFrameChoiceType::~OrbitalKinematicsStandardFrameChoiceType() = default;

void OrbitalKinematicsStandardFrameChoiceType::copy(const uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalKinematicsStandardFrameChoiceType::copyImpl(const uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalKinematicsStandardFrameChoiceType&>(accessor);
    if (accessorImpl.j2K_Accessor) {
      setJ2K(*(accessorImpl.j2K_Accessor));
    } else {
      j2K_Accessor.reset();
    }
    if (accessorImpl.gCRS_Accessor) {
      setGCRS(*(accessorImpl.gCRS_Accessor));
    } else {
      gCRS_Accessor.reset();
    }
    if (accessorImpl.bCRS_Accessor) {
      setBCRS(*(accessorImpl.bCRS_Accessor));
    } else {
      bCRS_Accessor.reset();
    }
  }
}

void OrbitalKinematicsStandardFrameChoiceType::reset() noexcept {
  j2K_Accessor.reset();
  gCRS_Accessor.reset();
  bCRS_Accessor.reset();
}

uci::type::OrbitalKinematicsStandardFrameChoiceType::OrbitalKinematicsStandardFrameChoiceTypeChoice OrbitalKinematicsStandardFrameChoiceType::getOrbitalKinematicsStandardFrameChoiceTypeChoiceOrdinal() const noexcept {
  if (j2K_Accessor) {
    return ORBITALKINEMATICSSTANDARDFRAMECHOICETYPE_CHOICE_J2K;
  }
  if (gCRS_Accessor) {
    return ORBITALKINEMATICSSTANDARDFRAMECHOICETYPE_CHOICE_GCRS;
  }
  if (bCRS_Accessor) {
    return ORBITALKINEMATICSSTANDARDFRAMECHOICETYPE_CHOICE_BCRS;
  }
  return ORBITALKINEMATICSSTANDARDFRAMECHOICETYPE_CHOICE_NONE;
}

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsStandardFrameChoiceType::setOrbitalKinematicsStandardFrameChoiceTypeChoiceOrdinal(uci::type::OrbitalKinematicsStandardFrameChoiceType::OrbitalKinematicsStandardFrameChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALKINEMATICSSTANDARDFRAMECHOICETYPE_CHOICE_J2K:
      chooseJ2K("setOrbitalKinematicsStandardFrameChoiceTypeChoiceOrdinal", type);
      break;
    case ORBITALKINEMATICSSTANDARDFRAMECHOICETYPE_CHOICE_GCRS:
      chooseGCRS("setOrbitalKinematicsStandardFrameChoiceTypeChoiceOrdinal", type);
      break;
    case ORBITALKINEMATICSSTANDARDFRAMECHOICETYPE_CHOICE_BCRS:
      chooseBCRS("setOrbitalKinematicsStandardFrameChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalKinematicsStandardFrameChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::J2K_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getJ2K_() const {
  if (j2K_Accessor) {
    return *j2K_Accessor;
  }
  throw uci::base::UCIException("Error in getJ2K(): Unable to get J2K, field not selected");
}

const uci::type::J2K_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getJ2K() const {
  return getJ2K_();
}

uci::type::J2K_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getJ2K() {
  return getJ2K_();
}

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsStandardFrameChoiceType::setJ2K(const uci::type::J2K_KinematicsType& accessor) {
  chooseJ2K();
  if (&accessor != j2K_Accessor.get()) {
    j2K_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsStandardFrameChoiceType::isJ2K() const noexcept {
  return static_cast<bool>(j2K_Accessor);
}

uci::type::J2K_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::chooseJ2K(const std::string& method, uci::base::accessorType::AccessorType type) {
  gCRS_Accessor.reset();
  bCRS_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::j2K_KinematicsType : type};
  if ((!j2K_Accessor) || (j2K_Accessor->getAccessorType() != requestedType)) {
    j2K_Accessor = J2K_KinematicsType::create(type);
    if (!j2K_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *j2K_Accessor;
}

uci::type::J2K_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::chooseJ2K(uci::base::accessorType::AccessorType type) {
  return chooseJ2K("chooseJ2K", type);
}

uci::type::GCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getGCRS_() const {
  if (gCRS_Accessor) {
    return *gCRS_Accessor;
  }
  throw uci::base::UCIException("Error in getGCRS(): Unable to get GCRS, field not selected");
}

const uci::type::GCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getGCRS() const {
  return getGCRS_();
}

uci::type::GCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getGCRS() {
  return getGCRS_();
}

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsStandardFrameChoiceType::setGCRS(const uci::type::GCRS_KinematicsType& accessor) {
  chooseGCRS();
  if (&accessor != gCRS_Accessor.get()) {
    gCRS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsStandardFrameChoiceType::isGCRS() const noexcept {
  return static_cast<bool>(gCRS_Accessor);
}

uci::type::GCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::chooseGCRS(const std::string& method, uci::base::accessorType::AccessorType type) {
  j2K_Accessor.reset();
  bCRS_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gCRS_KinematicsType : type};
  if ((!gCRS_Accessor) || (gCRS_Accessor->getAccessorType() != requestedType)) {
    gCRS_Accessor = GCRS_KinematicsType::create(type);
    if (!gCRS_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gCRS_Accessor;
}

uci::type::GCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::chooseGCRS(uci::base::accessorType::AccessorType type) {
  return chooseGCRS("chooseGCRS", type);
}

uci::type::BCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getBCRS_() const {
  if (bCRS_Accessor) {
    return *bCRS_Accessor;
  }
  throw uci::base::UCIException("Error in getBCRS(): Unable to get BCRS, field not selected");
}

const uci::type::BCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getBCRS() const {
  return getBCRS_();
}

uci::type::BCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::getBCRS() {
  return getBCRS_();
}

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsStandardFrameChoiceType::setBCRS(const uci::type::BCRS_KinematicsType& accessor) {
  chooseBCRS();
  if (&accessor != bCRS_Accessor.get()) {
    bCRS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsStandardFrameChoiceType::isBCRS() const noexcept {
  return static_cast<bool>(bCRS_Accessor);
}

uci::type::BCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::chooseBCRS(const std::string& method, uci::base::accessorType::AccessorType type) {
  j2K_Accessor.reset();
  gCRS_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::bCRS_KinematicsType : type};
  if ((!bCRS_Accessor) || (bCRS_Accessor->getAccessorType() != requestedType)) {
    bCRS_Accessor = BCRS_KinematicsType::create(type);
    if (!bCRS_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bCRS_Accessor;
}

uci::type::BCRS_KinematicsType& OrbitalKinematicsStandardFrameChoiceType::chooseBCRS(uci::base::accessorType::AccessorType type) {
  return chooseBCRS("chooseBCRS", type);
}

std::unique_ptr<OrbitalKinematicsStandardFrameChoiceType> OrbitalKinematicsStandardFrameChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsStandardFrameChoiceType : type};
  return (requestedType == uci::type::accessorType::orbitalKinematicsStandardFrameChoiceType) ? boost::make_unique<OrbitalKinematicsStandardFrameChoiceType>() : nullptr;
}

/**  */
namespace OrbitalKinematicsStandardFrameChoiceType_Names {

constexpr const char* Extern_Type_Name{"OrbitalKinematicsStandardFrameChoiceType"};
constexpr const char* J2K_Name{"J2K"};
constexpr const char* GCRS_Name{"GCRS"};
constexpr const char* BCRS_Name{"BCRS"};

} // namespace OrbitalKinematicsStandardFrameChoiceType_Names

void OrbitalKinematicsStandardFrameChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalKinematicsStandardFrameChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalKinematicsStandardFrameChoiceType_Names::J2K_Name) {
      J2K_KinematicsType::deserialize(valueType.second, accessor.chooseJ2K(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalKinematicsStandardFrameChoiceType_Names::GCRS_Name) {
      GCRS_KinematicsType::deserialize(valueType.second, accessor.chooseGCRS(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalKinematicsStandardFrameChoiceType_Names::BCRS_Name) {
      BCRS_KinematicsType::deserialize(valueType.second, accessor.chooseBCRS(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalKinematicsStandardFrameChoiceType::serialize(const uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalKinematicsStandardFrameChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalKinematicsStandardFrameChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isJ2K()) {
    J2K_KinematicsType::serialize(accessor.getJ2K(), node, OrbitalKinematicsStandardFrameChoiceType_Names::J2K_Name);
  } else if (accessor.isGCRS()) {
    GCRS_KinematicsType::serialize(accessor.getGCRS(), node, OrbitalKinematicsStandardFrameChoiceType_Names::GCRS_Name);
  } else if (accessor.isBCRS()) {
    BCRS_KinematicsType::serialize(accessor.getBCRS(), node, OrbitalKinematicsStandardFrameChoiceType_Names::BCRS_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsStandardFrameChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalKinematicsStandardFrameChoiceType>().release());
}

uci::type::OrbitalKinematicsStandardFrameChoiceType& OrbitalKinematicsStandardFrameChoiceType::create(const uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalKinematicsStandardFrameChoiceType> newAccessor{boost::make_unique<asb_uci::type::OrbitalKinematicsStandardFrameChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalKinematicsStandardFrameChoiceType::destroy(uci::type::OrbitalKinematicsStandardFrameChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalKinematicsStandardFrameChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

