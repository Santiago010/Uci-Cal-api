/** @file DragCoefficientChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DragCoefficientChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/VCM_DragParametersType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DragCoefficientChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VCM_DragParametersType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DragCoefficientChoiceType::DragCoefficientChoiceType() = default;

DragCoefficientChoiceType::~DragCoefficientChoiceType() = default;

void DragCoefficientChoiceType::copy(const uci::type::DragCoefficientChoiceType& accessor) {
  copyImpl(accessor, false);
}

void DragCoefficientChoiceType::copyImpl(const uci::type::DragCoefficientChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DragCoefficientChoiceType&>(accessor);
    if (accessorImpl.vCM_DragParameters_Accessor) {
      setVCM_DragParameters(*(accessorImpl.vCM_DragParameters_Accessor));
    } else {
      vCM_DragParameters_Accessor.reset();
    }
    dragCoefficientValue_Accessor = (accessorImpl.dragCoefficientValue_Accessor ? accessorImpl.dragCoefficientValue_Accessor : boost::none);
  }
}

void DragCoefficientChoiceType::reset() noexcept {
  vCM_DragParameters_Accessor.reset();
  dragCoefficientValue_Accessor.reset();
}

uci::type::DragCoefficientChoiceType::DragCoefficientChoiceTypeChoice DragCoefficientChoiceType::getDragCoefficientChoiceTypeChoiceOrdinal() const noexcept {
  if (vCM_DragParameters_Accessor) {
    return DRAGCOEFFICIENTCHOICETYPE_CHOICE_VCM_DRAGPARAMETERS;
  }
  if (dragCoefficientValue_Accessor) {
    return DRAGCOEFFICIENTCHOICETYPE_CHOICE_DRAGCOEFFICIENTVALUE;
  }
  return DRAGCOEFFICIENTCHOICETYPE_CHOICE_NONE;
}

uci::type::DragCoefficientChoiceType& DragCoefficientChoiceType::setDragCoefficientChoiceTypeChoiceOrdinal(uci::type::DragCoefficientChoiceType::DragCoefficientChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DRAGCOEFFICIENTCHOICETYPE_CHOICE_VCM_DRAGPARAMETERS:
      chooseVCM_DragParameters("setDragCoefficientChoiceTypeChoiceOrdinal", type);
      break;
    case DRAGCOEFFICIENTCHOICETYPE_CHOICE_DRAGCOEFFICIENTVALUE:
      chooseDragCoefficientValue();
      break;
    default:
      throw uci::base::UCIException("Error in setDragCoefficientChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::VCM_DragParametersType& DragCoefficientChoiceType::getVCM_DragParameters_() const {
  if (vCM_DragParameters_Accessor) {
    return *vCM_DragParameters_Accessor;
  }
  throw uci::base::UCIException("Error in getVCM_DragParameters(): Unable to get VCM_DragParameters, field not selected");
}

const uci::type::VCM_DragParametersType& DragCoefficientChoiceType::getVCM_DragParameters() const {
  return getVCM_DragParameters_();
}

uci::type::VCM_DragParametersType& DragCoefficientChoiceType::getVCM_DragParameters() {
  return getVCM_DragParameters_();
}

uci::type::DragCoefficientChoiceType& DragCoefficientChoiceType::setVCM_DragParameters(const uci::type::VCM_DragParametersType& accessor) {
  chooseVCM_DragParameters();
  if (&accessor != vCM_DragParameters_Accessor.get()) {
    vCM_DragParameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DragCoefficientChoiceType::isVCM_DragParameters() const noexcept {
  return static_cast<bool>(vCM_DragParameters_Accessor);
}

uci::type::VCM_DragParametersType& DragCoefficientChoiceType::chooseVCM_DragParameters(const std::string& method, uci::base::accessorType::AccessorType type) {
  dragCoefficientValue_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vCM_DragParametersType : type};
  if ((!vCM_DragParameters_Accessor) || (vCM_DragParameters_Accessor->getAccessorType() != requestedType)) {
    vCM_DragParameters_Accessor = VCM_DragParametersType::create(type);
    if (!vCM_DragParameters_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vCM_DragParameters_Accessor;
}

uci::type::VCM_DragParametersType& DragCoefficientChoiceType::chooseVCM_DragParameters(uci::base::accessorType::AccessorType type) {
  return chooseVCM_DragParameters("chooseVCM_DragParameters", type);
}

xs::Double DragCoefficientChoiceType::getDragCoefficientValue() const {
  if (dragCoefficientValue_Accessor) {
    return *dragCoefficientValue_Accessor;
  }
  throw uci::base::UCIException("Error in getDragCoefficientValue(): Unable to get DragCoefficientValue, field not selected");
}

uci::type::DragCoefficientChoiceType& DragCoefficientChoiceType::setDragCoefficientValue(xs::Double value) {
  chooseDragCoefficientValue();
  dragCoefficientValue_Accessor = value;
  return *this;
}

bool DragCoefficientChoiceType::isDragCoefficientValue() const noexcept {
  return static_cast<bool>(dragCoefficientValue_Accessor);
}

void DragCoefficientChoiceType::chooseDragCoefficientValue() {
  vCM_DragParameters_Accessor.reset();
  if (!dragCoefficientValue_Accessor) {
    dragCoefficientValue_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<DragCoefficientChoiceType> DragCoefficientChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dragCoefficientChoiceType : type};
  return (requestedType == uci::type::accessorType::dragCoefficientChoiceType) ? boost::make_unique<DragCoefficientChoiceType>() : nullptr;
}

/**  */
namespace DragCoefficientChoiceType_Names {

constexpr const char* Extern_Type_Name{"DragCoefficientChoiceType"};
constexpr const char* VCM_DragParameters_Name{"VCM_DragParameters"};
constexpr const char* DragCoefficientValue_Name{"DragCoefficientValue"};

} // namespace DragCoefficientChoiceType_Names

void DragCoefficientChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DragCoefficientChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DragCoefficientChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DragCoefficientChoiceType_Names::VCM_DragParameters_Name) {
      VCM_DragParametersType::deserialize(valueType.second, accessor.chooseVCM_DragParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DragCoefficientChoiceType_Names::DragCoefficientValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDragCoefficientValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string DragCoefficientChoiceType::serialize(const uci::type::DragCoefficientChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DragCoefficientChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DragCoefficientChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isVCM_DragParameters()) {
    VCM_DragParametersType::serialize(accessor.getVCM_DragParameters(), node, DragCoefficientChoiceType_Names::VCM_DragParameters_Name);
  } else if (accessor.isDragCoefficientValue()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDragCoefficientValue(), node, DragCoefficientChoiceType_Names::DragCoefficientValue_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DragCoefficientChoiceType& DragCoefficientChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DragCoefficientChoiceType>().release());
}

uci::type::DragCoefficientChoiceType& DragCoefficientChoiceType::create(const uci::type::DragCoefficientChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DragCoefficientChoiceType> newAccessor{boost::make_unique<asb_uci::type::DragCoefficientChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DragCoefficientChoiceType::destroy(uci::type::DragCoefficientChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::DragCoefficientChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

