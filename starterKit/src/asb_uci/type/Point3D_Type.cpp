/** @file Point3D_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/Point3D_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeReferenceEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeReferenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleHalfType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Point3D_Type::Point3D_Type() = default;

Point3D_Type::~Point3D_Type() = default;

void Point3D_Type::copy(const uci::type::Point3D_Type& accessor) {
  copyImpl(accessor, false);
}

void Point3D_Type::copyImpl(const uci::type::Point3D_Type& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::point3D_Type)) {
      const auto& accessorImpl = dynamic_cast<const Point3D_Type&>(accessor);
      setLatitude(accessorImpl.latitude_Accessor);
      setLongitude(accessorImpl.longitude_Accessor);
      setAltitude(accessorImpl.altitude_Accessor);
      if (accessorImpl.altitudeReference_Accessor) {
        setAltitudeReference(*(accessorImpl.altitudeReference_Accessor));
      } else {
        altitudeReference_Accessor.reset();
      }
      if (accessorImpl.hasTimestamp()) {
        setTimestamp(accessorImpl.getTimestamp());
      } else {
        clearTimestamp();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void Point3D_Type::reset() noexcept {
  latitude_Accessor = 0.0;
  longitude_Accessor = 0.0;
  altitude_Accessor = 0.0;
  altitudeReference_Accessor.reset();
  clearTimestamp();
}

uci::type::AngleHalfTypeValue Point3D_Type::getLatitude() const {
  return latitude_Accessor;
}

uci::type::Point3D_Type& Point3D_Type::setLatitude(uci::type::AngleHalfTypeValue value) {
  latitude_Accessor = value;
  return *this;
}


uci::type::AngleTypeValue Point3D_Type::getLongitude() const {
  return longitude_Accessor;
}

uci::type::Point3D_Type& Point3D_Type::setLongitude(uci::type::AngleTypeValue value) {
  longitude_Accessor = value;
  return *this;
}


uci::type::AltitudeTypeValue Point3D_Type::getAltitude() const {
  return altitude_Accessor;
}

uci::type::Point3D_Type& Point3D_Type::setAltitude(uci::type::AltitudeTypeValue value) {
  altitude_Accessor = value;
  return *this;
}


uci::type::AltitudeReferenceEnum& Point3D_Type::getAltitudeReference_() const {
  if (altitudeReference_Accessor) {
    return *altitudeReference_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeReference(): An attempt was made to get an optional field that was not enabled, call hasAltitudeReference() to determine if it is safe to call getAltitudeReference()");
}

const uci::type::AltitudeReferenceEnum& Point3D_Type::getAltitudeReference() const {
  return getAltitudeReference_();
}

uci::type::AltitudeReferenceEnum& Point3D_Type::getAltitudeReference() {
  return getAltitudeReference_();
}

uci::type::Point3D_Type& Point3D_Type::setAltitudeReference(const uci::type::AltitudeReferenceEnum& accessor) {
  enableAltitudeReference();
  if (&accessor != altitudeReference_Accessor.get()) {
    altitudeReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Point3D_Type& Point3D_Type::setAltitudeReference(const uci::type::AltitudeReferenceEnum::EnumerationItem value) {
  enableAltitudeReference().setValue(value);
  return *this;
}

bool Point3D_Type::hasAltitudeReference() const noexcept {
  return static_cast<bool>(altitudeReference_Accessor);
}

uci::type::AltitudeReferenceEnum& Point3D_Type::enableAltitudeReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeReferenceEnum : type};
  if ((!altitudeReference_Accessor) || (altitudeReference_Accessor->getAccessorType() != requestedType)) {
    altitudeReference_Accessor = AltitudeReferenceEnum::create(requestedType);
    if (!altitudeReference_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeReference_Accessor;
}

uci::type::Point3D_Type& Point3D_Type::clearAltitudeReference() noexcept {
  altitudeReference_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue Point3D_Type::getTimestamp() const {
  if (timestamp_Accessor) {
    return *timestamp_Accessor;
  }
  throw uci::base::UCIException("Error in getTimestamp(): An attempt was made to get an optional field that was not enabled, call hasTimestamp() to determine if it is safe to call getTimestamp()");
}

uci::type::Point3D_Type& Point3D_Type::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}

bool Point3D_Type::hasTimestamp() const noexcept {
  return timestamp_Accessor.has_value();
}

uci::type::Point3D_Type& Point3D_Type::clearTimestamp() noexcept {
  timestamp_Accessor.reset();
  return *this;
}

std::unique_ptr<Point3D_Type> Point3D_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  return std::unique_ptr<Point3D_Type>(dynamic_cast<Point3D_Type*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace Point3D_Type_Names {

constexpr const char* Extern_Type_Name{"Point3D_Type"};
constexpr const char* Latitude_Name{"Latitude"};
constexpr const char* Longitude_Name{"Longitude"};
constexpr const char* Altitude_Name{"Altitude"};
constexpr const char* AltitudeReference_Name{"AltitudeReference"};
constexpr const char* Timestamp_Name{"Timestamp"};

} // namespace Point3D_Type_Names

void Point3D_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::Point3D_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Point3D_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Point3D_Type_Names::Latitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLatitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + Point3D_Type_Names::Longitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + Point3D_Type_Names::Altitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + Point3D_Type_Names::AltitudeReference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAltitudeReference().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Point3D_Type_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
}

std::string Point3D_Type::serialize(const uci::type::Point3D_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Point3D_Type_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::point3D_Type)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, Point3D_Type_Names::Extern_Type_Name);
    }
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLatitude(), node, Point3D_Type_Names::Latitude_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLongitude(), node, Point3D_Type_Names::Longitude_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitude(), node, Point3D_Type_Names::Altitude_Name);
    if (accessor.hasAltitudeReference()) {
      AltitudeReferenceEnum::serialize(accessor.getAltitudeReference(), node, Point3D_Type_Names::AltitudeReference_Name, false);
    }
    if (accessor.hasTimestamp()) {
      asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, Point3D_Type_Names::Timestamp_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Point3D_Type& Point3D_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Point3D_Type>().release());
}

uci::type::Point3D_Type& Point3D_Type::create(const uci::type::Point3D_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Point3D_Type> newAccessor{boost::make_unique<asb_uci::type::Point3D_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Point3D_Type::destroy(uci::type::Point3D_Type& accessor) {
  delete dynamic_cast<asb_uci::type::Point3D_Type*>(&accessor);
}

} // namespace type

} // namespace uci

