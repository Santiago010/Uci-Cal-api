/** @file ESM_BinType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ESM_BinType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ESM_BinPrecedenceType.h"
#include "../../../include/asb_uci/type/NotationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_BinPrecedenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_BinType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NotationType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_BinType::ESM_BinType()
  : subCapabilityData_Accessor{boost::make_unique<SubCapabilityData>(1, 12)},
    emitterELNOT_Identifier_Accessor{boost::make_unique<EmitterELNOT_Identifier>(0, SIZE_MAX)} {
}

ESM_BinType::~ESM_BinType() = default;

void ESM_BinType::copy(const uci::type::ESM_BinType& accessor) {
  copyImpl(accessor, false);
}

void ESM_BinType::copyImpl(const uci::type::ESM_BinType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_BinType&>(accessor);
    setEmitterPriorityBin(accessorImpl.emitterPriorityBin_Accessor);
    setSubCapabilityData(*(accessorImpl.subCapabilityData_Accessor));
    setEmitterELNOT_Identifier(*(accessorImpl.emitterELNOT_Identifier_Accessor));
  }
}

void ESM_BinType::reset() noexcept {
  emitterPriorityBin_Accessor = 0;
  subCapabilityData_Accessor->reset();
  emitterELNOT_Identifier_Accessor->reset();
}

xs::UnsignedInt ESM_BinType::getEmitterPriorityBin() const {
  return emitterPriorityBin_Accessor;
}

uci::type::ESM_BinType& ESM_BinType::setEmitterPriorityBin(xs::UnsignedInt value) {
  emitterPriorityBin_Accessor = value;
  return *this;
}


const uci::type::ESM_BinType::SubCapabilityData& ESM_BinType::getSubCapabilityData() const {
  return *subCapabilityData_Accessor;
}

uci::type::ESM_BinType::SubCapabilityData& ESM_BinType::getSubCapabilityData() {
  return *subCapabilityData_Accessor;
}

uci::type::ESM_BinType& ESM_BinType::setSubCapabilityData(const uci::type::ESM_BinType::SubCapabilityData& accessor) {
  if (&accessor != subCapabilityData_Accessor.get()) {
    subCapabilityData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ESM_BinType::EmitterELNOT_Identifier& ESM_BinType::getEmitterELNOT_Identifier() const {
  return *emitterELNOT_Identifier_Accessor;
}

uci::type::ESM_BinType::EmitterELNOT_Identifier& ESM_BinType::getEmitterELNOT_Identifier() {
  return *emitterELNOT_Identifier_Accessor;
}

uci::type::ESM_BinType& ESM_BinType::setEmitterELNOT_Identifier(const uci::type::ESM_BinType::EmitterELNOT_Identifier& accessor) {
  if (&accessor != emitterELNOT_Identifier_Accessor.get()) {
    emitterELNOT_Identifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ESM_BinType> ESM_BinType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_BinType : type};
  return (requestedType == uci::type::accessorType::eSM_BinType) ? boost::make_unique<ESM_BinType>() : nullptr;
}

/**  */
namespace ESM_BinType_Names {

constexpr const char* Extern_Type_Name{"ESM_BinType"};
constexpr const char* EmitterPriorityBin_Name{"EmitterPriorityBin"};
constexpr const char* SubCapabilityData_Name{"SubCapabilityData"};
constexpr const char* EmitterELNOT_Identifier_Name{"EmitterELNOT_Identifier"};

} // namespace ESM_BinType_Names

void ESM_BinType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_BinType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_BinType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_BinType_Names::EmitterPriorityBin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmitterPriorityBin(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_BinType_Names::SubCapabilityData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_BinType::SubCapabilityData& boundedList = accessor.getSubCapabilityData();
        const uci::type::ESM_BinType::SubCapabilityData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ESM_BinPrecedenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ESM_BinType_Names::EmitterELNOT_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_BinType::EmitterELNOT_Identifier& boundedList = accessor.getEmitterELNOT_Identifier();
        const uci::type::ESM_BinType::EmitterELNOT_Identifier::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    }
  }
}

std::string ESM_BinType::serialize(const uci::type::ESM_BinType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_BinType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_BinType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEmitterPriorityBin(), node, ESM_BinType_Names::EmitterPriorityBin_Name);
  {
    const uci::type::ESM_BinType::SubCapabilityData& boundedList = accessor.getSubCapabilityData();
    for (uci::type::ESM_BinType::SubCapabilityData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ESM_BinPrecedenceType::serialize(boundedList.at(i), node, ESM_BinType_Names::SubCapabilityData_Name);
    }
  }
  {
    const uci::type::ESM_BinType::EmitterELNOT_Identifier& boundedList = accessor.getEmitterELNOT_Identifier();
    for (uci::type::ESM_BinType::EmitterELNOT_Identifier::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, ESM_BinType_Names::EmitterELNOT_Identifier_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_BinType& ESM_BinType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_BinType>().release());
}

uci::type::ESM_BinType& ESM_BinType::create(const uci::type::ESM_BinType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_BinType> newAccessor{boost::make_unique<asb_uci::type::ESM_BinType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_BinType::destroy(uci::type::ESM_BinType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_BinType*>(&accessor);
}

} // namespace type

} // namespace uci

