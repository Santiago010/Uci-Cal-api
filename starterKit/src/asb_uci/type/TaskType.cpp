/** @file TaskType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TaskType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AMTI_TaskType.h"
#include "../../../include/asb_uci/type/AO_TaskType.h"
#include "../../../include/asb_uci/type/AirSampleTaskType.h"
#include "../../../include/asb_uci/type/COMINT_TaskType.h"
#include "../../../include/asb_uci/type/CargoDeliveryTaskType.h"
#include "../../../include/asb_uci/type/CommRelayTaskType.h"
#include "../../../include/asb_uci/type/CounterSpaceTaskType.h"
#include "../../../include/asb_uci/type/EA_TaskType.h"
#include "../../../include/asb_uci/type/ESM_TaskType.h"
#include "../../../include/asb_uci/type/FlightTaskType.h"
#include "../../../include/asb_uci/type/OrbitChangeTaskType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceTaskType.h"
#include "../../../include/asb_uci/type/PO_TaskType.h"
#include "../../../include/asb_uci/type/RefuelTaskType.h"
#include "../../../include/asb_uci/type/SAR_TaskType.h"
#include "../../../include/asb_uci/type/SMTI_TaskType.h"
#include "../../../include/asb_uci/type/StrikeTaskType.h"
#include "../../../include/asb_uci/type/SystemDeploymentTaskType.h"
#include "../../../include/asb_uci/type/TacticalOrderTaskType.h"
#include "../../../include/asb_uci/type/WeatherRadarTaskType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AMTI_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirSampleTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CargoDeliveryTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommRelayTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CounterSpaceTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FlightTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitChangeTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RefuelTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SMTI_TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemDeploymentTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TacticalOrderTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarTaskType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TaskType::TaskType() = default;

TaskType::~TaskType() = default;

void TaskType::copy(const uci::type::TaskType& accessor) {
  copyImpl(accessor, false);
}

void TaskType::copyImpl(const uci::type::TaskType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TaskType&>(accessor);
    if (accessorImpl.airSample_Accessor) {
      setAirSample(*(accessorImpl.airSample_Accessor));
    } else {
      airSample_Accessor.reset();
    }
    if (accessorImpl.aMTI_Accessor) {
      setAMTI(*(accessorImpl.aMTI_Accessor));
    } else {
      aMTI_Accessor.reset();
    }
    if (accessorImpl.aO_Accessor) {
      setAO(*(accessorImpl.aO_Accessor));
    } else {
      aO_Accessor.reset();
    }
    if (accessorImpl.cargoDelivery_Accessor) {
      setCargoDelivery(*(accessorImpl.cargoDelivery_Accessor));
    } else {
      cargoDelivery_Accessor.reset();
    }
    if (accessorImpl.cOMINT_Accessor) {
      setCOMINT(*(accessorImpl.cOMINT_Accessor));
    } else {
      cOMINT_Accessor.reset();
    }
    if (accessorImpl.commRelay_Accessor) {
      setCommRelay(*(accessorImpl.commRelay_Accessor));
    } else {
      commRelay_Accessor.reset();
    }
    if (accessorImpl.counterSpace_Accessor) {
      setCounterSpace(*(accessorImpl.counterSpace_Accessor));
    } else {
      counterSpace_Accessor.reset();
    }
    if (accessorImpl.eA_Accessor) {
      setEA(*(accessorImpl.eA_Accessor));
    } else {
      eA_Accessor.reset();
    }
    if (accessorImpl.eSM_Accessor) {
      setESM(*(accessorImpl.eSM_Accessor));
    } else {
      eSM_Accessor.reset();
    }
    if (accessorImpl.flight_Accessor) {
      setFlight(*(accessorImpl.flight_Accessor));
    } else {
      flight_Accessor.reset();
    }
    if (accessorImpl.orbitChange_Accessor) {
      setOrbitChange(*(accessorImpl.orbitChange_Accessor));
    } else {
      orbitChange_Accessor.reset();
    }
    if (accessorImpl.orbitalSurveillance_Accessor) {
      setOrbitalSurveillance(*(accessorImpl.orbitalSurveillance_Accessor));
    } else {
      orbitalSurveillance_Accessor.reset();
    }
    if (accessorImpl.orbitalSurveillanceSensor_Accessor) {
      setOrbitalSurveillanceSensor(*(accessorImpl.orbitalSurveillanceSensor_Accessor));
    } else {
      orbitalSurveillanceSensor_Accessor.reset();
    }
    if (accessorImpl.pO_Accessor) {
      setPO(*(accessorImpl.pO_Accessor));
    } else {
      pO_Accessor.reset();
    }
    if (accessorImpl.refuel_Accessor) {
      setRefuel(*(accessorImpl.refuel_Accessor));
    } else {
      refuel_Accessor.reset();
    }
    if (accessorImpl.sAR_Accessor) {
      setSAR(*(accessorImpl.sAR_Accessor));
    } else {
      sAR_Accessor.reset();
    }
    if (accessorImpl.sMTI_Accessor) {
      setSMTI(*(accessorImpl.sMTI_Accessor));
    } else {
      sMTI_Accessor.reset();
    }
    if (accessorImpl.strike_Accessor) {
      setStrike(*(accessorImpl.strike_Accessor));
    } else {
      strike_Accessor.reset();
    }
    if (accessorImpl.systemDeployment_Accessor) {
      setSystemDeployment(*(accessorImpl.systemDeployment_Accessor));
    } else {
      systemDeployment_Accessor.reset();
    }
    if (accessorImpl.tacticalOrder_Accessor) {
      setTacticalOrder(*(accessorImpl.tacticalOrder_Accessor));
    } else {
      tacticalOrder_Accessor.reset();
    }
    if (accessorImpl.weatherRadar_Accessor) {
      setWeatherRadar(*(accessorImpl.weatherRadar_Accessor));
    } else {
      weatherRadar_Accessor.reset();
    }
  }
}

void TaskType::reset() noexcept {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
}

uci::type::TaskType::TaskTypeChoice TaskType::getTaskTypeChoiceOrdinal() const noexcept {
  if (airSample_Accessor) {
    return TASKTYPE_CHOICE_AIRSAMPLE;
  }
  if (aMTI_Accessor) {
    return TASKTYPE_CHOICE_AMTI;
  }
  if (aO_Accessor) {
    return TASKTYPE_CHOICE_AO;
  }
  if (cargoDelivery_Accessor) {
    return TASKTYPE_CHOICE_CARGODELIVERY;
  }
  if (cOMINT_Accessor) {
    return TASKTYPE_CHOICE_COMINT;
  }
  if (commRelay_Accessor) {
    return TASKTYPE_CHOICE_COMMRELAY;
  }
  if (counterSpace_Accessor) {
    return TASKTYPE_CHOICE_COUNTERSPACE;
  }
  if (eA_Accessor) {
    return TASKTYPE_CHOICE_EA;
  }
  if (eSM_Accessor) {
    return TASKTYPE_CHOICE_ESM;
  }
  if (flight_Accessor) {
    return TASKTYPE_CHOICE_FLIGHT;
  }
  if (orbitChange_Accessor) {
    return TASKTYPE_CHOICE_ORBITCHANGE;
  }
  if (orbitalSurveillance_Accessor) {
    return TASKTYPE_CHOICE_ORBITALSURVEILLANCE;
  }
  if (orbitalSurveillanceSensor_Accessor) {
    return TASKTYPE_CHOICE_ORBITALSURVEILLANCESENSOR;
  }
  if (pO_Accessor) {
    return TASKTYPE_CHOICE_PO;
  }
  if (refuel_Accessor) {
    return TASKTYPE_CHOICE_REFUEL;
  }
  if (sAR_Accessor) {
    return TASKTYPE_CHOICE_SAR;
  }
  if (sMTI_Accessor) {
    return TASKTYPE_CHOICE_SMTI;
  }
  if (strike_Accessor) {
    return TASKTYPE_CHOICE_STRIKE;
  }
  if (systemDeployment_Accessor) {
    return TASKTYPE_CHOICE_SYSTEMDEPLOYMENT;
  }
  if (tacticalOrder_Accessor) {
    return TASKTYPE_CHOICE_TACTICALORDER;
  }
  if (weatherRadar_Accessor) {
    return TASKTYPE_CHOICE_WEATHERRADAR;
  }
  return TASKTYPE_CHOICE_NONE;
}

uci::type::TaskType& TaskType::setTaskTypeChoiceOrdinal(uci::type::TaskType::TaskTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case TASKTYPE_CHOICE_AIRSAMPLE:
      chooseAirSample("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_AMTI:
      chooseAMTI("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_AO:
      chooseAO("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_CARGODELIVERY:
      chooseCargoDelivery("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_COMINT:
      chooseCOMINT("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_COMMRELAY:
      chooseCommRelay("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_COUNTERSPACE:
      chooseCounterSpace("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_EA:
      chooseEA("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_ESM:
      chooseESM("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_FLIGHT:
      chooseFlight("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_ORBITCHANGE:
      chooseOrbitChange("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_ORBITALSURVEILLANCE:
      chooseOrbitalSurveillance("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_ORBITALSURVEILLANCESENSOR:
      chooseOrbitalSurveillanceSensor("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_PO:
      choosePO("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_REFUEL:
      chooseRefuel("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_SAR:
      chooseSAR("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_SMTI:
      chooseSMTI("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_STRIKE:
      chooseStrike("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_SYSTEMDEPLOYMENT:
      chooseSystemDeployment("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_TACTICALORDER:
      chooseTacticalOrder("setTaskTypeChoiceOrdinal", type);
      break;
    case TASKTYPE_CHOICE_WEATHERRADAR:
      chooseWeatherRadar("setTaskTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setTaskTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AirSampleTaskType& TaskType::getAirSample_() const {
  if (airSample_Accessor) {
    return *airSample_Accessor;
  }
  throw uci::base::UCIException("Error in getAirSample(): Unable to get AirSample, field not selected");
}

const uci::type::AirSampleTaskType& TaskType::getAirSample() const {
  return getAirSample_();
}

uci::type::AirSampleTaskType& TaskType::getAirSample() {
  return getAirSample_();
}

uci::type::TaskType& TaskType::setAirSample(const uci::type::AirSampleTaskType& accessor) {
  chooseAirSample();
  if (&accessor != airSample_Accessor.get()) {
    airSample_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isAirSample() const noexcept {
  return static_cast<bool>(airSample_Accessor);
}

uci::type::AirSampleTaskType& TaskType::chooseAirSample(const std::string& method, uci::base::accessorType::AccessorType type) {
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airSampleTaskType : type};
  if ((!airSample_Accessor) || (airSample_Accessor->getAccessorType() != requestedType)) {
    airSample_Accessor = AirSampleTaskType::create(type);
    if (!airSample_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airSample_Accessor;
}

uci::type::AirSampleTaskType& TaskType::chooseAirSample(uci::base::accessorType::AccessorType type) {
  return chooseAirSample("chooseAirSample", type);
}

uci::type::AMTI_TaskType& TaskType::getAMTI_() const {
  if (aMTI_Accessor) {
    return *aMTI_Accessor;
  }
  throw uci::base::UCIException("Error in getAMTI(): Unable to get AMTI, field not selected");
}

const uci::type::AMTI_TaskType& TaskType::getAMTI() const {
  return getAMTI_();
}

uci::type::AMTI_TaskType& TaskType::getAMTI() {
  return getAMTI_();
}

uci::type::TaskType& TaskType::setAMTI(const uci::type::AMTI_TaskType& accessor) {
  chooseAMTI();
  if (&accessor != aMTI_Accessor.get()) {
    aMTI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isAMTI() const noexcept {
  return static_cast<bool>(aMTI_Accessor);
}

uci::type::AMTI_TaskType& TaskType::chooseAMTI(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aMTI_TaskType : type};
  if ((!aMTI_Accessor) || (aMTI_Accessor->getAccessorType() != requestedType)) {
    aMTI_Accessor = AMTI_TaskType::create(type);
    if (!aMTI_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aMTI_Accessor;
}

uci::type::AMTI_TaskType& TaskType::chooseAMTI(uci::base::accessorType::AccessorType type) {
  return chooseAMTI("chooseAMTI", type);
}

uci::type::AO_TaskType& TaskType::getAO_() const {
  if (aO_Accessor) {
    return *aO_Accessor;
  }
  throw uci::base::UCIException("Error in getAO(): Unable to get AO, field not selected");
}

const uci::type::AO_TaskType& TaskType::getAO() const {
  return getAO_();
}

uci::type::AO_TaskType& TaskType::getAO() {
  return getAO_();
}

uci::type::TaskType& TaskType::setAO(const uci::type::AO_TaskType& accessor) {
  chooseAO();
  if (&accessor != aO_Accessor.get()) {
    aO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isAO() const noexcept {
  return static_cast<bool>(aO_Accessor);
}

uci::type::AO_TaskType& TaskType::chooseAO(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_TaskType : type};
  if ((!aO_Accessor) || (aO_Accessor->getAccessorType() != requestedType)) {
    aO_Accessor = AO_TaskType::create(type);
    if (!aO_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aO_Accessor;
}

uci::type::AO_TaskType& TaskType::chooseAO(uci::base::accessorType::AccessorType type) {
  return chooseAO("chooseAO", type);
}

uci::type::CargoDeliveryTaskType& TaskType::getCargoDelivery_() const {
  if (cargoDelivery_Accessor) {
    return *cargoDelivery_Accessor;
  }
  throw uci::base::UCIException("Error in getCargoDelivery(): Unable to get CargoDelivery, field not selected");
}

const uci::type::CargoDeliveryTaskType& TaskType::getCargoDelivery() const {
  return getCargoDelivery_();
}

uci::type::CargoDeliveryTaskType& TaskType::getCargoDelivery() {
  return getCargoDelivery_();
}

uci::type::TaskType& TaskType::setCargoDelivery(const uci::type::CargoDeliveryTaskType& accessor) {
  chooseCargoDelivery(accessor.getAccessorType());
  if (&accessor != cargoDelivery_Accessor.get()) {
    cargoDelivery_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isCargoDelivery() const noexcept {
  return static_cast<bool>(cargoDelivery_Accessor);
}

uci::type::CargoDeliveryTaskType& TaskType::chooseCargoDelivery(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cargoDeliveryTaskType : type};
  if ((!cargoDelivery_Accessor) || (cargoDelivery_Accessor->getAccessorType() != requestedType)) {
    cargoDelivery_Accessor = CargoDeliveryTaskType::create(type);
    if (!cargoDelivery_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cargoDelivery_Accessor;
}

uci::type::CargoDeliveryTaskType& TaskType::chooseCargoDelivery(uci::base::accessorType::AccessorType type) {
  return chooseCargoDelivery("chooseCargoDelivery", type);
}

uci::type::COMINT_TaskType& TaskType::getCOMINT_() const {
  if (cOMINT_Accessor) {
    return *cOMINT_Accessor;
  }
  throw uci::base::UCIException("Error in getCOMINT(): Unable to get COMINT, field not selected");
}

const uci::type::COMINT_TaskType& TaskType::getCOMINT() const {
  return getCOMINT_();
}

uci::type::COMINT_TaskType& TaskType::getCOMINT() {
  return getCOMINT_();
}

uci::type::TaskType& TaskType::setCOMINT(const uci::type::COMINT_TaskType& accessor) {
  chooseCOMINT();
  if (&accessor != cOMINT_Accessor.get()) {
    cOMINT_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isCOMINT() const noexcept {
  return static_cast<bool>(cOMINT_Accessor);
}

uci::type::COMINT_TaskType& TaskType::chooseCOMINT(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_TaskType : type};
  if ((!cOMINT_Accessor) || (cOMINT_Accessor->getAccessorType() != requestedType)) {
    cOMINT_Accessor = COMINT_TaskType::create(type);
    if (!cOMINT_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cOMINT_Accessor;
}

uci::type::COMINT_TaskType& TaskType::chooseCOMINT(uci::base::accessorType::AccessorType type) {
  return chooseCOMINT("chooseCOMINT", type);
}

uci::type::CommRelayTaskType& TaskType::getCommRelay_() const {
  if (commRelay_Accessor) {
    return *commRelay_Accessor;
  }
  throw uci::base::UCIException("Error in getCommRelay(): Unable to get CommRelay, field not selected");
}

const uci::type::CommRelayTaskType& TaskType::getCommRelay() const {
  return getCommRelay_();
}

uci::type::CommRelayTaskType& TaskType::getCommRelay() {
  return getCommRelay_();
}

uci::type::TaskType& TaskType::setCommRelay(const uci::type::CommRelayTaskType& accessor) {
  chooseCommRelay();
  if (&accessor != commRelay_Accessor.get()) {
    commRelay_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isCommRelay() const noexcept {
  return static_cast<bool>(commRelay_Accessor);
}

uci::type::CommRelayTaskType& TaskType::chooseCommRelay(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commRelayTaskType : type};
  if ((!commRelay_Accessor) || (commRelay_Accessor->getAccessorType() != requestedType)) {
    commRelay_Accessor = CommRelayTaskType::create(type);
    if (!commRelay_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commRelay_Accessor;
}

uci::type::CommRelayTaskType& TaskType::chooseCommRelay(uci::base::accessorType::AccessorType type) {
  return chooseCommRelay("chooseCommRelay", type);
}

uci::type::CounterSpaceTaskType& TaskType::getCounterSpace_() const {
  if (counterSpace_Accessor) {
    return *counterSpace_Accessor;
  }
  throw uci::base::UCIException("Error in getCounterSpace(): Unable to get CounterSpace, field not selected");
}

const uci::type::CounterSpaceTaskType& TaskType::getCounterSpace() const {
  return getCounterSpace_();
}

uci::type::CounterSpaceTaskType& TaskType::getCounterSpace() {
  return getCounterSpace_();
}

uci::type::TaskType& TaskType::setCounterSpace(const uci::type::CounterSpaceTaskType& accessor) {
  chooseCounterSpace();
  if (&accessor != counterSpace_Accessor.get()) {
    counterSpace_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isCounterSpace() const noexcept {
  return static_cast<bool>(counterSpace_Accessor);
}

uci::type::CounterSpaceTaskType& TaskType::chooseCounterSpace(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::counterSpaceTaskType : type};
  if ((!counterSpace_Accessor) || (counterSpace_Accessor->getAccessorType() != requestedType)) {
    counterSpace_Accessor = CounterSpaceTaskType::create(type);
    if (!counterSpace_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *counterSpace_Accessor;
}

uci::type::CounterSpaceTaskType& TaskType::chooseCounterSpace(uci::base::accessorType::AccessorType type) {
  return chooseCounterSpace("chooseCounterSpace", type);
}

uci::type::EA_TaskType& TaskType::getEA_() const {
  if (eA_Accessor) {
    return *eA_Accessor;
  }
  throw uci::base::UCIException("Error in getEA(): Unable to get EA, field not selected");
}

const uci::type::EA_TaskType& TaskType::getEA() const {
  return getEA_();
}

uci::type::EA_TaskType& TaskType::getEA() {
  return getEA_();
}

uci::type::TaskType& TaskType::setEA(const uci::type::EA_TaskType& accessor) {
  chooseEA();
  if (&accessor != eA_Accessor.get()) {
    eA_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isEA() const noexcept {
  return static_cast<bool>(eA_Accessor);
}

uci::type::EA_TaskType& TaskType::chooseEA(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TaskType : type};
  if ((!eA_Accessor) || (eA_Accessor->getAccessorType() != requestedType)) {
    eA_Accessor = EA_TaskType::create(type);
    if (!eA_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eA_Accessor;
}

uci::type::EA_TaskType& TaskType::chooseEA(uci::base::accessorType::AccessorType type) {
  return chooseEA("chooseEA", type);
}

uci::type::ESM_TaskType& TaskType::getESM_() const {
  if (eSM_Accessor) {
    return *eSM_Accessor;
  }
  throw uci::base::UCIException("Error in getESM(): Unable to get ESM, field not selected");
}

const uci::type::ESM_TaskType& TaskType::getESM() const {
  return getESM_();
}

uci::type::ESM_TaskType& TaskType::getESM() {
  return getESM_();
}

uci::type::TaskType& TaskType::setESM(const uci::type::ESM_TaskType& accessor) {
  chooseESM();
  if (&accessor != eSM_Accessor.get()) {
    eSM_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isESM() const noexcept {
  return static_cast<bool>(eSM_Accessor);
}

uci::type::ESM_TaskType& TaskType::chooseESM(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_TaskType : type};
  if ((!eSM_Accessor) || (eSM_Accessor->getAccessorType() != requestedType)) {
    eSM_Accessor = ESM_TaskType::create(type);
    if (!eSM_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eSM_Accessor;
}

uci::type::ESM_TaskType& TaskType::chooseESM(uci::base::accessorType::AccessorType type) {
  return chooseESM("chooseESM", type);
}

uci::type::FlightTaskType& TaskType::getFlight_() const {
  if (flight_Accessor) {
    return *flight_Accessor;
  }
  throw uci::base::UCIException("Error in getFlight(): Unable to get Flight, field not selected");
}

const uci::type::FlightTaskType& TaskType::getFlight() const {
  return getFlight_();
}

uci::type::FlightTaskType& TaskType::getFlight() {
  return getFlight_();
}

uci::type::TaskType& TaskType::setFlight(const uci::type::FlightTaskType& accessor) {
  chooseFlight();
  if (&accessor != flight_Accessor.get()) {
    flight_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isFlight() const noexcept {
  return static_cast<bool>(flight_Accessor);
}

uci::type::FlightTaskType& TaskType::chooseFlight(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::flightTaskType : type};
  if ((!flight_Accessor) || (flight_Accessor->getAccessorType() != requestedType)) {
    flight_Accessor = FlightTaskType::create(type);
    if (!flight_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *flight_Accessor;
}

uci::type::FlightTaskType& TaskType::chooseFlight(uci::base::accessorType::AccessorType type) {
  return chooseFlight("chooseFlight", type);
}

uci::type::OrbitChangeTaskType& TaskType::getOrbitChange_() const {
  if (orbitChange_Accessor) {
    return *orbitChange_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitChange(): Unable to get OrbitChange, field not selected");
}

const uci::type::OrbitChangeTaskType& TaskType::getOrbitChange() const {
  return getOrbitChange_();
}

uci::type::OrbitChangeTaskType& TaskType::getOrbitChange() {
  return getOrbitChange_();
}

uci::type::TaskType& TaskType::setOrbitChange(const uci::type::OrbitChangeTaskType& accessor) {
  chooseOrbitChange();
  if (&accessor != orbitChange_Accessor.get()) {
    orbitChange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isOrbitChange() const noexcept {
  return static_cast<bool>(orbitChange_Accessor);
}

uci::type::OrbitChangeTaskType& TaskType::chooseOrbitChange(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitChangeTaskType : type};
  if ((!orbitChange_Accessor) || (orbitChange_Accessor->getAccessorType() != requestedType)) {
    orbitChange_Accessor = OrbitChangeTaskType::create(type);
    if (!orbitChange_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitChange_Accessor;
}

uci::type::OrbitChangeTaskType& TaskType::chooseOrbitChange(uci::base::accessorType::AccessorType type) {
  return chooseOrbitChange("chooseOrbitChange", type);
}

uci::type::OrbitalSurveillanceTaskType& TaskType::getOrbitalSurveillance_() const {
  if (orbitalSurveillance_Accessor) {
    return *orbitalSurveillance_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalSurveillance(): Unable to get OrbitalSurveillance, field not selected");
}

const uci::type::OrbitalSurveillanceTaskType& TaskType::getOrbitalSurveillance() const {
  return getOrbitalSurveillance_();
}

uci::type::OrbitalSurveillanceTaskType& TaskType::getOrbitalSurveillance() {
  return getOrbitalSurveillance_();
}

uci::type::TaskType& TaskType::setOrbitalSurveillance(const uci::type::OrbitalSurveillanceTaskType& accessor) {
  chooseOrbitalSurveillance();
  if (&accessor != orbitalSurveillance_Accessor.get()) {
    orbitalSurveillance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isOrbitalSurveillance() const noexcept {
  return static_cast<bool>(orbitalSurveillance_Accessor);
}

uci::type::OrbitalSurveillanceTaskType& TaskType::chooseOrbitalSurveillance(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceTaskType : type};
  if ((!orbitalSurveillance_Accessor) || (orbitalSurveillance_Accessor->getAccessorType() != requestedType)) {
    orbitalSurveillance_Accessor = OrbitalSurveillanceTaskType::create(type);
    if (!orbitalSurveillance_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalSurveillance_Accessor;
}

uci::type::OrbitalSurveillanceTaskType& TaskType::chooseOrbitalSurveillance(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalSurveillance("chooseOrbitalSurveillance", type);
}

uci::type::OrbitalSurveillanceSensorTaskType& TaskType::getOrbitalSurveillanceSensor_() const {
  if (orbitalSurveillanceSensor_Accessor) {
    return *orbitalSurveillanceSensor_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalSurveillanceSensor(): Unable to get OrbitalSurveillanceSensor, field not selected");
}

const uci::type::OrbitalSurveillanceSensorTaskType& TaskType::getOrbitalSurveillanceSensor() const {
  return getOrbitalSurveillanceSensor_();
}

uci::type::OrbitalSurveillanceSensorTaskType& TaskType::getOrbitalSurveillanceSensor() {
  return getOrbitalSurveillanceSensor_();
}

uci::type::TaskType& TaskType::setOrbitalSurveillanceSensor(const uci::type::OrbitalSurveillanceSensorTaskType& accessor) {
  chooseOrbitalSurveillanceSensor();
  if (&accessor != orbitalSurveillanceSensor_Accessor.get()) {
    orbitalSurveillanceSensor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isOrbitalSurveillanceSensor() const noexcept {
  return static_cast<bool>(orbitalSurveillanceSensor_Accessor);
}

uci::type::OrbitalSurveillanceSensorTaskType& TaskType::chooseOrbitalSurveillanceSensor(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceSensorTaskType : type};
  if ((!orbitalSurveillanceSensor_Accessor) || (orbitalSurveillanceSensor_Accessor->getAccessorType() != requestedType)) {
    orbitalSurveillanceSensor_Accessor = OrbitalSurveillanceSensorTaskType::create(type);
    if (!orbitalSurveillanceSensor_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalSurveillanceSensor_Accessor;
}

uci::type::OrbitalSurveillanceSensorTaskType& TaskType::chooseOrbitalSurveillanceSensor(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalSurveillanceSensor("chooseOrbitalSurveillanceSensor", type);
}

uci::type::PO_TaskType& TaskType::getPO_() const {
  if (pO_Accessor) {
    return *pO_Accessor;
  }
  throw uci::base::UCIException("Error in getPO(): Unable to get PO, field not selected");
}

const uci::type::PO_TaskType& TaskType::getPO() const {
  return getPO_();
}

uci::type::PO_TaskType& TaskType::getPO() {
  return getPO_();
}

uci::type::TaskType& TaskType::setPO(const uci::type::PO_TaskType& accessor) {
  choosePO();
  if (&accessor != pO_Accessor.get()) {
    pO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isPO() const noexcept {
  return static_cast<bool>(pO_Accessor);
}

uci::type::PO_TaskType& TaskType::choosePO(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TaskType : type};
  if ((!pO_Accessor) || (pO_Accessor->getAccessorType() != requestedType)) {
    pO_Accessor = PO_TaskType::create(type);
    if (!pO_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pO_Accessor;
}

uci::type::PO_TaskType& TaskType::choosePO(uci::base::accessorType::AccessorType type) {
  return choosePO("choosePO", type);
}

uci::type::RefuelTaskType& TaskType::getRefuel_() const {
  if (refuel_Accessor) {
    return *refuel_Accessor;
  }
  throw uci::base::UCIException("Error in getRefuel(): Unable to get Refuel, field not selected");
}

const uci::type::RefuelTaskType& TaskType::getRefuel() const {
  return getRefuel_();
}

uci::type::RefuelTaskType& TaskType::getRefuel() {
  return getRefuel_();
}

uci::type::TaskType& TaskType::setRefuel(const uci::type::RefuelTaskType& accessor) {
  chooseRefuel();
  if (&accessor != refuel_Accessor.get()) {
    refuel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isRefuel() const noexcept {
  return static_cast<bool>(refuel_Accessor);
}

uci::type::RefuelTaskType& TaskType::chooseRefuel(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelTaskType : type};
  if ((!refuel_Accessor) || (refuel_Accessor->getAccessorType() != requestedType)) {
    refuel_Accessor = RefuelTaskType::create(type);
    if (!refuel_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *refuel_Accessor;
}

uci::type::RefuelTaskType& TaskType::chooseRefuel(uci::base::accessorType::AccessorType type) {
  return chooseRefuel("chooseRefuel", type);
}

uci::type::SAR_TaskType& TaskType::getSAR_() const {
  if (sAR_Accessor) {
    return *sAR_Accessor;
  }
  throw uci::base::UCIException("Error in getSAR(): Unable to get SAR, field not selected");
}

const uci::type::SAR_TaskType& TaskType::getSAR() const {
  return getSAR_();
}

uci::type::SAR_TaskType& TaskType::getSAR() {
  return getSAR_();
}

uci::type::TaskType& TaskType::setSAR(const uci::type::SAR_TaskType& accessor) {
  chooseSAR();
  if (&accessor != sAR_Accessor.get()) {
    sAR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isSAR() const noexcept {
  return static_cast<bool>(sAR_Accessor);
}

uci::type::SAR_TaskType& TaskType::chooseSAR(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_TaskType : type};
  if ((!sAR_Accessor) || (sAR_Accessor->getAccessorType() != requestedType)) {
    sAR_Accessor = SAR_TaskType::create(type);
    if (!sAR_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sAR_Accessor;
}

uci::type::SAR_TaskType& TaskType::chooseSAR(uci::base::accessorType::AccessorType type) {
  return chooseSAR("chooseSAR", type);
}

uci::type::SMTI_TaskType& TaskType::getSMTI_() const {
  if (sMTI_Accessor) {
    return *sMTI_Accessor;
  }
  throw uci::base::UCIException("Error in getSMTI(): Unable to get SMTI, field not selected");
}

const uci::type::SMTI_TaskType& TaskType::getSMTI() const {
  return getSMTI_();
}

uci::type::SMTI_TaskType& TaskType::getSMTI() {
  return getSMTI_();
}

uci::type::TaskType& TaskType::setSMTI(const uci::type::SMTI_TaskType& accessor) {
  chooseSMTI();
  if (&accessor != sMTI_Accessor.get()) {
    sMTI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isSMTI() const noexcept {
  return static_cast<bool>(sMTI_Accessor);
}

uci::type::SMTI_TaskType& TaskType::chooseSMTI(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_TaskType : type};
  if ((!sMTI_Accessor) || (sMTI_Accessor->getAccessorType() != requestedType)) {
    sMTI_Accessor = SMTI_TaskType::create(type);
    if (!sMTI_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sMTI_Accessor;
}

uci::type::SMTI_TaskType& TaskType::chooseSMTI(uci::base::accessorType::AccessorType type) {
  return chooseSMTI("chooseSMTI", type);
}

uci::type::StrikeTaskType& TaskType::getStrike_() const {
  if (strike_Accessor) {
    return *strike_Accessor;
  }
  throw uci::base::UCIException("Error in getStrike(): Unable to get Strike, field not selected");
}

const uci::type::StrikeTaskType& TaskType::getStrike() const {
  return getStrike_();
}

uci::type::StrikeTaskType& TaskType::getStrike() {
  return getStrike_();
}

uci::type::TaskType& TaskType::setStrike(const uci::type::StrikeTaskType& accessor) {
  chooseStrike();
  if (&accessor != strike_Accessor.get()) {
    strike_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isStrike() const noexcept {
  return static_cast<bool>(strike_Accessor);
}

uci::type::StrikeTaskType& TaskType::chooseStrike(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskType : type};
  if ((!strike_Accessor) || (strike_Accessor->getAccessorType() != requestedType)) {
    strike_Accessor = StrikeTaskType::create(type);
    if (!strike_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *strike_Accessor;
}

uci::type::StrikeTaskType& TaskType::chooseStrike(uci::base::accessorType::AccessorType type) {
  return chooseStrike("chooseStrike", type);
}

uci::type::SystemDeploymentTaskType& TaskType::getSystemDeployment_() const {
  if (systemDeployment_Accessor) {
    return *systemDeployment_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemDeployment(): Unable to get SystemDeployment, field not selected");
}

const uci::type::SystemDeploymentTaskType& TaskType::getSystemDeployment() const {
  return getSystemDeployment_();
}

uci::type::SystemDeploymentTaskType& TaskType::getSystemDeployment() {
  return getSystemDeployment_();
}

uci::type::TaskType& TaskType::setSystemDeployment(const uci::type::SystemDeploymentTaskType& accessor) {
  chooseSystemDeployment();
  if (&accessor != systemDeployment_Accessor.get()) {
    systemDeployment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isSystemDeployment() const noexcept {
  return static_cast<bool>(systemDeployment_Accessor);
}

uci::type::SystemDeploymentTaskType& TaskType::chooseSystemDeployment(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  tacticalOrder_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemDeploymentTaskType : type};
  if ((!systemDeployment_Accessor) || (systemDeployment_Accessor->getAccessorType() != requestedType)) {
    systemDeployment_Accessor = SystemDeploymentTaskType::create(type);
    if (!systemDeployment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemDeployment_Accessor;
}

uci::type::SystemDeploymentTaskType& TaskType::chooseSystemDeployment(uci::base::accessorType::AccessorType type) {
  return chooseSystemDeployment("chooseSystemDeployment", type);
}

uci::type::TacticalOrderTaskType& TaskType::getTacticalOrder_() const {
  if (tacticalOrder_Accessor) {
    return *tacticalOrder_Accessor;
  }
  throw uci::base::UCIException("Error in getTacticalOrder(): Unable to get TacticalOrder, field not selected");
}

const uci::type::TacticalOrderTaskType& TaskType::getTacticalOrder() const {
  return getTacticalOrder_();
}

uci::type::TacticalOrderTaskType& TaskType::getTacticalOrder() {
  return getTacticalOrder_();
}

uci::type::TaskType& TaskType::setTacticalOrder(const uci::type::TacticalOrderTaskType& accessor) {
  chooseTacticalOrder();
  if (&accessor != tacticalOrder_Accessor.get()) {
    tacticalOrder_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isTacticalOrder() const noexcept {
  return static_cast<bool>(tacticalOrder_Accessor);
}

uci::type::TacticalOrderTaskType& TaskType::chooseTacticalOrder(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tacticalOrderTaskType : type};
  if ((!tacticalOrder_Accessor) || (tacticalOrder_Accessor->getAccessorType() != requestedType)) {
    tacticalOrder_Accessor = TacticalOrderTaskType::create(type);
    if (!tacticalOrder_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *tacticalOrder_Accessor;
}

uci::type::TacticalOrderTaskType& TaskType::chooseTacticalOrder(uci::base::accessorType::AccessorType type) {
  return chooseTacticalOrder("chooseTacticalOrder", type);
}

uci::type::WeatherRadarTaskType& TaskType::getWeatherRadar_() const {
  if (weatherRadar_Accessor) {
    return *weatherRadar_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherRadar(): Unable to get WeatherRadar, field not selected");
}

const uci::type::WeatherRadarTaskType& TaskType::getWeatherRadar() const {
  return getWeatherRadar_();
}

uci::type::WeatherRadarTaskType& TaskType::getWeatherRadar() {
  return getWeatherRadar_();
}

uci::type::TaskType& TaskType::setWeatherRadar(const uci::type::WeatherRadarTaskType& accessor) {
  chooseWeatherRadar();
  if (&accessor != weatherRadar_Accessor.get()) {
    weatherRadar_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskType::isWeatherRadar() const noexcept {
  return static_cast<bool>(weatherRadar_Accessor);
}

uci::type::WeatherRadarTaskType& TaskType::chooseWeatherRadar(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cargoDelivery_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  counterSpace_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  flight_Accessor.reset();
  orbitChange_Accessor.reset();
  orbitalSurveillance_Accessor.reset();
  orbitalSurveillanceSensor_Accessor.reset();
  pO_Accessor.reset();
  refuel_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  systemDeployment_Accessor.reset();
  tacticalOrder_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarTaskType : type};
  if ((!weatherRadar_Accessor) || (weatherRadar_Accessor->getAccessorType() != requestedType)) {
    weatherRadar_Accessor = WeatherRadarTaskType::create(type);
    if (!weatherRadar_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherRadar_Accessor;
}

uci::type::WeatherRadarTaskType& TaskType::chooseWeatherRadar(uci::base::accessorType::AccessorType type) {
  return chooseWeatherRadar("chooseWeatherRadar", type);
}

std::unique_ptr<TaskType> TaskType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskType : type};
  return (requestedType == uci::type::accessorType::taskType) ? boost::make_unique<TaskType>() : nullptr;
}

/**  */
namespace TaskType_Names {

constexpr const char* Extern_Type_Name{"TaskType"};
constexpr const char* AirSample_Name{"AirSample"};
constexpr const char* AMTI_Name{"AMTI"};
constexpr const char* AO_Name{"AO"};
constexpr const char* CargoDelivery_Name{"CargoDelivery"};
constexpr const char* COMINT_Name{"COMINT"};
constexpr const char* CommRelay_Name{"CommRelay"};
constexpr const char* CounterSpace_Name{"CounterSpace"};
constexpr const char* EA_Name{"EA"};
constexpr const char* ESM_Name{"ESM"};
constexpr const char* Flight_Name{"Flight"};
constexpr const char* OrbitChange_Name{"OrbitChange"};
constexpr const char* OrbitalSurveillance_Name{"OrbitalSurveillance"};
constexpr const char* OrbitalSurveillanceSensor_Name{"OrbitalSurveillanceSensor"};
constexpr const char* PO_Name{"PO"};
constexpr const char* Refuel_Name{"Refuel"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* SMTI_Name{"SMTI"};
constexpr const char* Strike_Name{"Strike"};
constexpr const char* SystemDeployment_Name{"SystemDeployment"};
constexpr const char* TacticalOrder_Name{"TacticalOrder"};
constexpr const char* WeatherRadar_Name{"WeatherRadar"};

} // namespace TaskType_Names

void TaskType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TaskType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TaskType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TaskType_Names::AirSample_Name) {
      AirSampleTaskType::deserialize(valueType.second, accessor.chooseAirSample(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::AMTI_Name) {
      AMTI_TaskType::deserialize(valueType.second, accessor.chooseAMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::AO_Name) {
      AO_TaskType::deserialize(valueType.second, accessor.chooseAO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::CargoDelivery_Name) {
      CargoDeliveryTaskType::deserialize(valueType.second, accessor.chooseCargoDelivery(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::COMINT_Name) {
      COMINT_TaskType::deserialize(valueType.second, accessor.chooseCOMINT(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::CommRelay_Name) {
      CommRelayTaskType::deserialize(valueType.second, accessor.chooseCommRelay(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::CounterSpace_Name) {
      CounterSpaceTaskType::deserialize(valueType.second, accessor.chooseCounterSpace(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::EA_Name) {
      EA_TaskType::deserialize(valueType.second, accessor.chooseEA(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::ESM_Name) {
      ESM_TaskType::deserialize(valueType.second, accessor.chooseESM(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::Flight_Name) {
      FlightTaskType::deserialize(valueType.second, accessor.chooseFlight(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::OrbitChange_Name) {
      OrbitChangeTaskType::deserialize(valueType.second, accessor.chooseOrbitChange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::OrbitalSurveillance_Name) {
      OrbitalSurveillanceTaskType::deserialize(valueType.second, accessor.chooseOrbitalSurveillance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::OrbitalSurveillanceSensor_Name) {
      OrbitalSurveillanceSensorTaskType::deserialize(valueType.second, accessor.chooseOrbitalSurveillanceSensor(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::PO_Name) {
      PO_TaskType::deserialize(valueType.second, accessor.choosePO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::Refuel_Name) {
      RefuelTaskType::deserialize(valueType.second, accessor.chooseRefuel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::SAR_Name) {
      SAR_TaskType::deserialize(valueType.second, accessor.chooseSAR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::SMTI_Name) {
      SMTI_TaskType::deserialize(valueType.second, accessor.chooseSMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::Strike_Name) {
      StrikeTaskType::deserialize(valueType.second, accessor.chooseStrike(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::SystemDeployment_Name) {
      SystemDeploymentTaskType::deserialize(valueType.second, accessor.chooseSystemDeployment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::TacticalOrder_Name) {
      TacticalOrderTaskType::deserialize(valueType.second, accessor.chooseTacticalOrder(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::WeatherRadar_Name) {
      WeatherRadarTaskType::deserialize(valueType.second, accessor.chooseWeatherRadar(), nodeName, nsPrefix);
    }
  }
}

std::string TaskType::serialize(const uci::type::TaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TaskType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TaskType_Names::Extern_Type_Name);
  }
  if (accessor.isAirSample()) {
    AirSampleTaskType::serialize(accessor.getAirSample(), node, TaskType_Names::AirSample_Name);
  } else if (accessor.isAMTI()) {
    AMTI_TaskType::serialize(accessor.getAMTI(), node, TaskType_Names::AMTI_Name);
  } else if (accessor.isAO()) {
    AO_TaskType::serialize(accessor.getAO(), node, TaskType_Names::AO_Name);
  } else if (accessor.isCargoDelivery()) {
    CargoDeliveryTaskType::serialize(accessor.getCargoDelivery(), node, TaskType_Names::CargoDelivery_Name);
  } else if (accessor.isCOMINT()) {
    COMINT_TaskType::serialize(accessor.getCOMINT(), node, TaskType_Names::COMINT_Name);
  } else if (accessor.isCommRelay()) {
    CommRelayTaskType::serialize(accessor.getCommRelay(), node, TaskType_Names::CommRelay_Name);
  } else if (accessor.isCounterSpace()) {
    CounterSpaceTaskType::serialize(accessor.getCounterSpace(), node, TaskType_Names::CounterSpace_Name);
  } else if (accessor.isEA()) {
    EA_TaskType::serialize(accessor.getEA(), node, TaskType_Names::EA_Name);
  } else if (accessor.isESM()) {
    ESM_TaskType::serialize(accessor.getESM(), node, TaskType_Names::ESM_Name);
  } else if (accessor.isFlight()) {
    FlightTaskType::serialize(accessor.getFlight(), node, TaskType_Names::Flight_Name);
  } else if (accessor.isOrbitChange()) {
    OrbitChangeTaskType::serialize(accessor.getOrbitChange(), node, TaskType_Names::OrbitChange_Name);
  } else if (accessor.isOrbitalSurveillance()) {
    OrbitalSurveillanceTaskType::serialize(accessor.getOrbitalSurveillance(), node, TaskType_Names::OrbitalSurveillance_Name);
  } else if (accessor.isOrbitalSurveillanceSensor()) {
    OrbitalSurveillanceSensorTaskType::serialize(accessor.getOrbitalSurveillanceSensor(), node, TaskType_Names::OrbitalSurveillanceSensor_Name);
  } else if (accessor.isPO()) {
    PO_TaskType::serialize(accessor.getPO(), node, TaskType_Names::PO_Name);
  } else if (accessor.isRefuel()) {
    RefuelTaskType::serialize(accessor.getRefuel(), node, TaskType_Names::Refuel_Name);
  } else if (accessor.isSAR()) {
    SAR_TaskType::serialize(accessor.getSAR(), node, TaskType_Names::SAR_Name);
  } else if (accessor.isSMTI()) {
    SMTI_TaskType::serialize(accessor.getSMTI(), node, TaskType_Names::SMTI_Name);
  } else if (accessor.isStrike()) {
    StrikeTaskType::serialize(accessor.getStrike(), node, TaskType_Names::Strike_Name);
  } else if (accessor.isSystemDeployment()) {
    SystemDeploymentTaskType::serialize(accessor.getSystemDeployment(), node, TaskType_Names::SystemDeployment_Name);
  } else if (accessor.isTacticalOrder()) {
    TacticalOrderTaskType::serialize(accessor.getTacticalOrder(), node, TaskType_Names::TacticalOrder_Name);
  } else if (accessor.isWeatherRadar()) {
    WeatherRadarTaskType::serialize(accessor.getWeatherRadar(), node, TaskType_Names::WeatherRadar_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TaskType& TaskType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TaskType>().release());
}

uci::type::TaskType& TaskType::create(const uci::type::TaskType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TaskType> newAccessor{boost::make_unique<asb_uci::type::TaskType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TaskType::destroy(uci::type::TaskType& accessor) {
  delete dynamic_cast<asb_uci::type::TaskType*>(&accessor);
}

} // namespace type

} // namespace uci

