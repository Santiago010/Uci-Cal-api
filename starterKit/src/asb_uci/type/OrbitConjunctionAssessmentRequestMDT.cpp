/** @file OrbitConjunctionAssessmentRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitConjunctionAssessmentRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/OrbitConjunctionAssessmentEnum.h"
#include "../../../include/asb_uci/type/OrbitalAnalysisObjectType.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitConjunctionAssessmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitConjunctionAssessmentRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalAnalysisObjectType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitConjunctionAssessmentRequestMDT::OrbitConjunctionAssessmentRequestMDT()
  : assessmentType_Accessor{boost::make_unique<OrbitConjunctionAssessmentEnum>()},
    assessmentObject_Accessor{boost::make_unique<AssessmentObject>(0, SIZE_MAX)},
    analysisPeriod_Accessor{boost::make_unique<DateTimeRangeType>()} {
}

OrbitConjunctionAssessmentRequestMDT::~OrbitConjunctionAssessmentRequestMDT() = default;

void OrbitConjunctionAssessmentRequestMDT::copy(const uci::type::OrbitConjunctionAssessmentRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void OrbitConjunctionAssessmentRequestMDT::copyImpl(const uci::type::OrbitConjunctionAssessmentRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OrbitConjunctionAssessmentRequestMDT&>(accessor);
    setAssessmentType(*(accessorImpl.assessmentType_Accessor));
    if (accessorImpl.hasRangeThreshold()) {
      setRangeThreshold(accessorImpl.getRangeThreshold());
    } else {
      clearRangeThreshold();
    }
    setAssessmentObject(*(accessorImpl.assessmentObject_Accessor));
    setAnalysisPeriod(*(accessorImpl.analysisPeriod_Accessor));
    if (accessorImpl.hasRespondBy()) {
      setRespondBy(accessorImpl.getRespondBy());
    } else {
      clearRespondBy();
    }
  }
}

void OrbitConjunctionAssessmentRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  assessmentType_Accessor->reset();
  clearRangeThreshold();
  assessmentObject_Accessor->reset();
  analysisPeriod_Accessor->reset();
  clearRespondBy();
}

const uci::type::OrbitConjunctionAssessmentEnum& OrbitConjunctionAssessmentRequestMDT::getAssessmentType() const {
  return *assessmentType_Accessor;
}

uci::type::OrbitConjunctionAssessmentEnum& OrbitConjunctionAssessmentRequestMDT::getAssessmentType() {
  return *assessmentType_Accessor;
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::setAssessmentType(const uci::type::OrbitConjunctionAssessmentEnum& accessor) {
  if (&accessor != assessmentType_Accessor.get()) {
    assessmentType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::setAssessmentType(uci::type::OrbitConjunctionAssessmentEnum::EnumerationItem value) {
  assessmentType_Accessor->setValue(value);
  return *this;
}


uci::type::DistanceTypeValue OrbitConjunctionAssessmentRequestMDT::getRangeThreshold() const {
  if (rangeThreshold_Accessor) {
    return *rangeThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeThreshold(): An attempt was made to get an optional field that was not enabled, call hasRangeThreshold() to determine if it is safe to call getRangeThreshold()");
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::setRangeThreshold(uci::type::DistanceTypeValue value) {
  rangeThreshold_Accessor = value;
  return *this;
}

bool OrbitConjunctionAssessmentRequestMDT::hasRangeThreshold() const noexcept {
  return rangeThreshold_Accessor.has_value();
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::clearRangeThreshold() noexcept {
  rangeThreshold_Accessor.reset();
  return *this;
}

const uci::type::OrbitConjunctionAssessmentRequestMDT::AssessmentObject& OrbitConjunctionAssessmentRequestMDT::getAssessmentObject() const {
  return *assessmentObject_Accessor;
}

uci::type::OrbitConjunctionAssessmentRequestMDT::AssessmentObject& OrbitConjunctionAssessmentRequestMDT::getAssessmentObject() {
  return *assessmentObject_Accessor;
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::setAssessmentObject(const uci::type::OrbitConjunctionAssessmentRequestMDT::AssessmentObject& accessor) {
  if (&accessor != assessmentObject_Accessor.get()) {
    assessmentObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DateTimeRangeType& OrbitConjunctionAssessmentRequestMDT::getAnalysisPeriod() const {
  return *analysisPeriod_Accessor;
}

uci::type::DateTimeRangeType& OrbitConjunctionAssessmentRequestMDT::getAnalysisPeriod() {
  return *analysisPeriod_Accessor;
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::setAnalysisPeriod(const uci::type::DateTimeRangeType& accessor) {
  if (&accessor != analysisPeriod_Accessor.get()) {
    analysisPeriod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue OrbitConjunctionAssessmentRequestMDT::getRespondBy() const {
  if (respondBy_Accessor) {
    return *respondBy_Accessor;
  }
  throw uci::base::UCIException("Error in getRespondBy(): An attempt was made to get an optional field that was not enabled, call hasRespondBy() to determine if it is safe to call getRespondBy()");
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::setRespondBy(uci::type::DateTimeTypeValue value) {
  respondBy_Accessor = value;
  return *this;
}

bool OrbitConjunctionAssessmentRequestMDT::hasRespondBy() const noexcept {
  return respondBy_Accessor.has_value();
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::clearRespondBy() noexcept {
  respondBy_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitConjunctionAssessmentRequestMDT> OrbitConjunctionAssessmentRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitConjunctionAssessmentRequestMDT : type};
  return (requestedType == uci::type::accessorType::orbitConjunctionAssessmentRequestMDT) ? boost::make_unique<OrbitConjunctionAssessmentRequestMDT>() : nullptr;
}

/**  */
namespace OrbitConjunctionAssessmentRequestMDT_Names {

constexpr const char* Extern_Type_Name{"OrbitConjunctionAssessmentRequestMDT"};
constexpr const char* AssessmentType_Name{"AssessmentType"};
constexpr const char* RangeThreshold_Name{"RangeThreshold"};
constexpr const char* AssessmentObject_Name{"AssessmentObject"};
constexpr const char* AnalysisPeriod_Name{"AnalysisPeriod"};
constexpr const char* RespondBy_Name{"RespondBy"};

} // namespace OrbitConjunctionAssessmentRequestMDT_Names

void OrbitConjunctionAssessmentRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitConjunctionAssessmentRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitConjunctionAssessmentRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentRequestMDT_Names::AssessmentType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAssessmentType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentRequestMDT_Names::RangeThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeThreshold(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentRequestMDT_Names::AssessmentObject_Name) {
      uci::type::OrbitConjunctionAssessmentRequestMDT::AssessmentObject& boundedList = accessor.getAssessmentObject();
      const uci::type::OrbitConjunctionAssessmentRequestMDT::AssessmentObject::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::OrbitalAnalysisObjectType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentRequestMDT_Names::AnalysisPeriod_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.getAnalysisPeriod(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitConjunctionAssessmentRequestMDT_Names::RespondBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRespondBy(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OrbitConjunctionAssessmentRequestMDT::serialize(const uci::type::OrbitConjunctionAssessmentRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitConjunctionAssessmentRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitConjunctionAssessmentRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  OrbitConjunctionAssessmentEnum::serialize(accessor.getAssessmentType(), node, OrbitConjunctionAssessmentRequestMDT_Names::AssessmentType_Name, false);
  if (accessor.hasRangeThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeThreshold(), node, OrbitConjunctionAssessmentRequestMDT_Names::RangeThreshold_Name);
  }
  {
    const uci::type::OrbitConjunctionAssessmentRequestMDT::AssessmentObject& boundedList = accessor.getAssessmentObject();
    for (uci::type::OrbitConjunctionAssessmentRequestMDT::AssessmentObject::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalAnalysisObjectType::serialize(boundedList.at(i), node, OrbitConjunctionAssessmentRequestMDT_Names::AssessmentObject_Name);
    }
  }
  DateTimeRangeType::serialize(accessor.getAnalysisPeriod(), node, OrbitConjunctionAssessmentRequestMDT_Names::AnalysisPeriod_Name);
  if (accessor.hasRespondBy()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getRespondBy(), node, OrbitConjunctionAssessmentRequestMDT_Names::RespondBy_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitConjunctionAssessmentRequestMDT>().release());
}

uci::type::OrbitConjunctionAssessmentRequestMDT& OrbitConjunctionAssessmentRequestMDT::create(const uci::type::OrbitConjunctionAssessmentRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitConjunctionAssessmentRequestMDT> newAccessor{boost::make_unique<asb_uci::type::OrbitConjunctionAssessmentRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitConjunctionAssessmentRequestMDT::destroy(uci::type::OrbitConjunctionAssessmentRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitConjunctionAssessmentRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

