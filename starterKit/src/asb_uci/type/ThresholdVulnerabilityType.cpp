/** @file ThresholdVulnerabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ThresholdVulnerabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/VulnerabilityLevelsCombinedType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PercentType.h"
#include "uci/type/ThresholdVulnerabilityType.h"
#include "uci/type/VulnerabilityLevelsCombinedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThresholdVulnerabilityType::ThresholdVulnerabilityType() = default;

ThresholdVulnerabilityType::~ThresholdVulnerabilityType() = default;

void ThresholdVulnerabilityType::copy(const uci::type::ThresholdVulnerabilityType& accessor) {
  copyImpl(accessor, false);
}

void ThresholdVulnerabilityType::copyImpl(const uci::type::ThresholdVulnerabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThresholdVulnerabilityType&>(accessor);
    if (accessorImpl.vulnerabilityWithoutSuppression_Accessor) {
      setVulnerabilityWithoutSuppression(*(accessorImpl.vulnerabilityWithoutSuppression_Accessor));
    } else {
      vulnerabilityWithoutSuppression_Accessor.reset();
    }
    if (accessorImpl.vulnerabilityWithSuppression_Accessor) {
      setVulnerabilityWithSuppression(*(accessorImpl.vulnerabilityWithSuppression_Accessor));
    } else {
      vulnerabilityWithSuppression_Accessor.reset();
    }
    if (accessorImpl.hasExposureEventProbabilityThreshold()) {
      setExposureEventProbabilityThreshold(accessorImpl.getExposureEventProbabilityThreshold());
    } else {
      clearExposureEventProbabilityThreshold();
    }
  }
}

void ThresholdVulnerabilityType::reset() noexcept {
  vulnerabilityWithoutSuppression_Accessor.reset();
  vulnerabilityWithSuppression_Accessor.reset();
  clearExposureEventProbabilityThreshold();
}

uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::getVulnerabilityWithoutSuppression_() const {
  if (vulnerabilityWithoutSuppression_Accessor) {
    return *vulnerabilityWithoutSuppression_Accessor;
  }
  throw uci::base::UCIException("Error in getVulnerabilityWithoutSuppression(): An attempt was made to get an optional field that was not enabled, call hasVulnerabilityWithoutSuppression() to determine if it is safe to call getVulnerabilityWithoutSuppression()");
}

const uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::getVulnerabilityWithoutSuppression() const {
  return getVulnerabilityWithoutSuppression_();
}

uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::getVulnerabilityWithoutSuppression() {
  return getVulnerabilityWithoutSuppression_();
}

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::setVulnerabilityWithoutSuppression(const uci::type::VulnerabilityLevelsCombinedType& accessor) {
  enableVulnerabilityWithoutSuppression();
  if (&accessor != vulnerabilityWithoutSuppression_Accessor.get()) {
    vulnerabilityWithoutSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThresholdVulnerabilityType::hasVulnerabilityWithoutSuppression() const noexcept {
  return static_cast<bool>(vulnerabilityWithoutSuppression_Accessor);
}

uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::enableVulnerabilityWithoutSuppression(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityLevelsCombinedType : type};
  if ((!vulnerabilityWithoutSuppression_Accessor) || (vulnerabilityWithoutSuppression_Accessor->getAccessorType() != requestedType)) {
    vulnerabilityWithoutSuppression_Accessor = VulnerabilityLevelsCombinedType::create(requestedType);
    if (!vulnerabilityWithoutSuppression_Accessor) {
      throw uci::base::UCIException("Error in enableVulnerabilityWithoutSuppression(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vulnerabilityWithoutSuppression_Accessor;
}

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::clearVulnerabilityWithoutSuppression() noexcept {
  vulnerabilityWithoutSuppression_Accessor.reset();
  return *this;
}

uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::getVulnerabilityWithSuppression_() const {
  if (vulnerabilityWithSuppression_Accessor) {
    return *vulnerabilityWithSuppression_Accessor;
  }
  throw uci::base::UCIException("Error in getVulnerabilityWithSuppression(): An attempt was made to get an optional field that was not enabled, call hasVulnerabilityWithSuppression() to determine if it is safe to call getVulnerabilityWithSuppression()");
}

const uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::getVulnerabilityWithSuppression() const {
  return getVulnerabilityWithSuppression_();
}

uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::getVulnerabilityWithSuppression() {
  return getVulnerabilityWithSuppression_();
}

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::setVulnerabilityWithSuppression(const uci::type::VulnerabilityLevelsCombinedType& accessor) {
  enableVulnerabilityWithSuppression();
  if (&accessor != vulnerabilityWithSuppression_Accessor.get()) {
    vulnerabilityWithSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThresholdVulnerabilityType::hasVulnerabilityWithSuppression() const noexcept {
  return static_cast<bool>(vulnerabilityWithSuppression_Accessor);
}

uci::type::VulnerabilityLevelsCombinedType& ThresholdVulnerabilityType::enableVulnerabilityWithSuppression(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityLevelsCombinedType : type};
  if ((!vulnerabilityWithSuppression_Accessor) || (vulnerabilityWithSuppression_Accessor->getAccessorType() != requestedType)) {
    vulnerabilityWithSuppression_Accessor = VulnerabilityLevelsCombinedType::create(requestedType);
    if (!vulnerabilityWithSuppression_Accessor) {
      throw uci::base::UCIException("Error in enableVulnerabilityWithSuppression(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vulnerabilityWithSuppression_Accessor;
}

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::clearVulnerabilityWithSuppression() noexcept {
  vulnerabilityWithSuppression_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue ThresholdVulnerabilityType::getExposureEventProbabilityThreshold() const {
  if (exposureEventProbabilityThreshold_Accessor) {
    return *exposureEventProbabilityThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getExposureEventProbabilityThreshold(): An attempt was made to get an optional field that was not enabled, call hasExposureEventProbabilityThreshold() to determine if it is safe to call getExposureEventProbabilityThreshold()");
}

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::setExposureEventProbabilityThreshold(uci::type::PercentTypeValue value) {
  exposureEventProbabilityThreshold_Accessor = value;
  return *this;
}

bool ThresholdVulnerabilityType::hasExposureEventProbabilityThreshold() const noexcept {
  return exposureEventProbabilityThreshold_Accessor.has_value();
}

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::clearExposureEventProbabilityThreshold() noexcept {
  exposureEventProbabilityThreshold_Accessor.reset();
  return *this;
}

std::unique_ptr<ThresholdVulnerabilityType> ThresholdVulnerabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::thresholdVulnerabilityType : type};
  return (requestedType == uci::type::accessorType::thresholdVulnerabilityType) ? boost::make_unique<ThresholdVulnerabilityType>() : nullptr;
}

/**  */
namespace ThresholdVulnerabilityType_Names {

constexpr const char* Extern_Type_Name{"ThresholdVulnerabilityType"};
constexpr const char* VulnerabilityWithoutSuppression_Name{"VulnerabilityWithoutSuppression"};
constexpr const char* VulnerabilityWithSuppression_Name{"VulnerabilityWithSuppression"};
constexpr const char* ExposureEventProbabilityThreshold_Name{"ExposureEventProbabilityThreshold"};

} // namespace ThresholdVulnerabilityType_Names

void ThresholdVulnerabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThresholdVulnerabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThresholdVulnerabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThresholdVulnerabilityType_Names::VulnerabilityWithoutSuppression_Name) {
      VulnerabilityLevelsCombinedType::deserialize(valueType.second, accessor.enableVulnerabilityWithoutSuppression(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThresholdVulnerabilityType_Names::VulnerabilityWithSuppression_Name) {
      VulnerabilityLevelsCombinedType::deserialize(valueType.second, accessor.enableVulnerabilityWithSuppression(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThresholdVulnerabilityType_Names::ExposureEventProbabilityThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExposureEventProbabilityThreshold(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ThresholdVulnerabilityType::serialize(const uci::type::ThresholdVulnerabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThresholdVulnerabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThresholdVulnerabilityType_Names::Extern_Type_Name);
  }
  if (accessor.hasVulnerabilityWithoutSuppression()) {
    VulnerabilityLevelsCombinedType::serialize(accessor.getVulnerabilityWithoutSuppression(), node, ThresholdVulnerabilityType_Names::VulnerabilityWithoutSuppression_Name);
  }
  if (accessor.hasVulnerabilityWithSuppression()) {
    VulnerabilityLevelsCombinedType::serialize(accessor.getVulnerabilityWithSuppression(), node, ThresholdVulnerabilityType_Names::VulnerabilityWithSuppression_Name);
  }
  if (accessor.hasExposureEventProbabilityThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getExposureEventProbabilityThreshold(), node, ThresholdVulnerabilityType_Names::ExposureEventProbabilityThreshold_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThresholdVulnerabilityType>().release());
}

uci::type::ThresholdVulnerabilityType& ThresholdVulnerabilityType::create(const uci::type::ThresholdVulnerabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThresholdVulnerabilityType> newAccessor{boost::make_unique<asb_uci::type::ThresholdVulnerabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThresholdVulnerabilityType::destroy(uci::type::ThresholdVulnerabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::ThresholdVulnerabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

