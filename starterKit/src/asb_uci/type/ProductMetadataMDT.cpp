/** @file ProductMetadataMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ProductMetadataMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BasicEncyclopediaNumberType.h"
#include "../../../include/asb_uci/type/CreationSourceEnum.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/DemodulationParameterType.h"
#include "../../../include/asb_uci/type/EntityMetadataType.h"
#include "../../../include/asb_uci/type/FileNameType.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/ProductCollectionLocationType.h"
#include "../../../include/asb_uci/type/ProductGeospatialLocationType.h"
#include "../../../include/asb_uci/type/ProductMetadataID_Type.h"
#include "../../../include/asb_uci/type/ProductOutputType.h"
#include "../../../include/asb_uci/type/RequirementProductMetadataType.h"
#include "../../../include/asb_uci/type/SecurityInformationType.h"
#include "../../../include/asb_uci/type/SourceFiltersType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/ThumbnailType.h"
#include "../../../include/asb_uci/type/TraceabilityType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BasicEncyclopediaNumberType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CreationSourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DemodulationParameterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityMetadataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileNameType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductCollectionLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductGeospatialLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductMetadataMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductOutputType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementProductMetadataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SourceFiltersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThumbnailType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductMetadataMDT::ProductMetadataMDT()
  : productMetadataID_Accessor{boost::make_unique<ProductMetadataID_Type>()},
    productDescription_Accessor{boost::make_unique<ProductOutputType>()},
    geospatialLocation_Accessor{boost::make_unique<GeospatialLocation>(0, SIZE_MAX)},
    systemID_Accessor{boost::make_unique<SystemID_Type>()},
    productSource_Accessor{boost::make_unique<SourceFiltersType>()},
    creationSource_Accessor{boost::make_unique<CreationSourceEnum>()},
    securityInformation_Accessor{boost::make_unique<SecurityInformationType>()},
    derivedFromID_Accessor{boost::make_unique<DerivedFromID>(0, SIZE_MAX)},
    traceability_Accessor{boost::make_unique<Traceability>(0, SIZE_MAX)},
    requirementMetadata_Accessor{boost::make_unique<RequirementMetadata>(0, SIZE_MAX)},
    entityMetadata_Accessor{boost::make_unique<EntityMetadata>(0, SIZE_MAX)},
    associatedID_Accessor{boost::make_unique<AssociatedID>(0, SIZE_MAX)} {
}

ProductMetadataMDT::~ProductMetadataMDT() = default;

void ProductMetadataMDT::copy(const uci::type::ProductMetadataMDT& accessor) {
  copyImpl(accessor, false);
}

void ProductMetadataMDT::copyImpl(const uci::type::ProductMetadataMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ProductMetadataMDT&>(accessor);
    setProductMetadataID(*(accessorImpl.productMetadataID_Accessor));
    setProductDescription(*(accessorImpl.productDescription_Accessor));
    if (accessorImpl.fileName_Accessor) {
      setFileName(*(accessorImpl.fileName_Accessor));
    } else {
      fileName_Accessor.reset();
    }
    if (accessorImpl.bE_Number_Accessor) {
      setBE_Number(*(accessorImpl.bE_Number_Accessor));
    } else {
      bE_Number_Accessor.reset();
    }
    if (accessorImpl.sceneKey_Accessor) {
      setSceneKey(*(accessorImpl.sceneKey_Accessor));
    } else {
      sceneKey_Accessor.reset();
    }
    setGeospatialLocation(*(accessorImpl.geospatialLocation_Accessor));
    if (accessorImpl.collectionLocation_Accessor) {
      setCollectionLocation(*(accessorImpl.collectionLocation_Accessor));
    } else {
      collectionLocation_Accessor.reset();
    }
    setSystemID(*(accessorImpl.systemID_Accessor));
    setProductSource(*(accessorImpl.productSource_Accessor));
    setCreationSource(*(accessorImpl.creationSource_Accessor));
    setUntrustedModification(accessorImpl.untrustedModification_Accessor);
    setTimestamp(accessorImpl.timestamp_Accessor);
    setSecurityInformation(*(accessorImpl.securityInformation_Accessor));
    if (accessorImpl.thumbnail_Accessor) {
      setThumbnail(*(accessorImpl.thumbnail_Accessor));
    } else {
      thumbnail_Accessor.reset();
    }
    setDerivedFromID(*(accessorImpl.derivedFromID_Accessor));
    setTraceability(*(accessorImpl.traceability_Accessor));
    setRequirementMetadata(*(accessorImpl.requirementMetadata_Accessor));
    setEntityMetadata(*(accessorImpl.entityMetadata_Accessor));
    sHA_2_Hash_Accessor = (accessorImpl.sHA_2_Hash_Accessor ? boost::make_unique<SHA_2_256_HashType>(*(accessorImpl.sHA_2_Hash_Accessor)) : nullptr);
    if (accessorImpl.demodulationParameters_Accessor) {
      setDemodulationParameters(*(accessorImpl.demodulationParameters_Accessor));
    } else {
      demodulationParameters_Accessor.reset();
    }
    setAssociatedID(*(accessorImpl.associatedID_Accessor));
  }
}

void ProductMetadataMDT::reset() noexcept {
  DataRecordBaseType::reset();
  productMetadataID_Accessor->reset();
  if (productDescription_Accessor->getAccessorType() != uci::type::accessorType::productOutputType) {
    productDescription_Accessor = boost::make_unique<ProductOutputType>();
  } else {
    productDescription_Accessor->reset();
  }
  fileName_Accessor.reset();
  bE_Number_Accessor.reset();
  sceneKey_Accessor.reset();
  geospatialLocation_Accessor->reset();
  collectionLocation_Accessor.reset();
  systemID_Accessor->reset();
  productSource_Accessor->reset();
  creationSource_Accessor->reset();
  untrustedModification_Accessor = false;
  timestamp_Accessor = 0;
  securityInformation_Accessor->reset();
  thumbnail_Accessor.reset();
  derivedFromID_Accessor->reset();
  traceability_Accessor->reset();
  requirementMetadata_Accessor->reset();
  entityMetadata_Accessor->reset();
  sHA_2_Hash_Accessor.reset();
  demodulationParameters_Accessor.reset();
  associatedID_Accessor->reset();
}

const uci::type::ProductMetadataID_Type& ProductMetadataMDT::getProductMetadataID() const {
  return *productMetadataID_Accessor;
}

uci::type::ProductMetadataID_Type& ProductMetadataMDT::getProductMetadataID() {
  return *productMetadataID_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setProductMetadataID(const uci::type::ProductMetadataID_Type& accessor) {
  if (&accessor != productMetadataID_Accessor.get()) {
    productMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductOutputType& ProductMetadataMDT::getProductDescription() const {
  return *productDescription_Accessor;
}

uci::type::ProductOutputType& ProductMetadataMDT::getProductDescription() {
  return *productDescription_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setProductDescription(const uci::type::ProductOutputType& accessor) {
  enableProductDescription(accessor.getAccessorType());
  if (&accessor != productDescription_Accessor.get()) {
    productDescription_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ProductOutputType& ProductMetadataMDT::enableProductDescription(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productOutputType : type};
  if ((!productDescription_Accessor) || (productDescription_Accessor->getAccessorType() != requestedType)) {
    productDescription_Accessor = ProductOutputType::create(requestedType);
    if (!productDescription_Accessor) {
      throw uci::base::UCIException("Error in enableProductDescription(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productDescription_Accessor;
}

uci::type::FileNameType& ProductMetadataMDT::getFileName_() const {
  if (fileName_Accessor) {
    return *fileName_Accessor;
  }
  throw uci::base::UCIException("Error in getFileName(): An attempt was made to get an optional field that was not enabled, call hasFileName() to determine if it is safe to call getFileName()");
}

const uci::type::FileNameType& ProductMetadataMDT::getFileName() const {
  return getFileName_();
}

uci::type::FileNameType& ProductMetadataMDT::getFileName() {
  return getFileName_();
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setFileName(const uci::type::FileNameType& value) {
  return setFileName(value.c_str());
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setFileName(const std::string& value) {
  return setFileName(value.c_str());
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setFileName(const char* value) {
  enableFileName().setStringValue(value);
  return *this;
}

bool ProductMetadataMDT::hasFileName() const noexcept {
  return static_cast<bool>(fileName_Accessor);
}

uci::type::FileNameType& ProductMetadataMDT::enableFileName(uci::base::accessorType::AccessorType type) {
  if (!fileName_Accessor) {
    fileName_Accessor = FileNameType::create(type);
  }
  return *fileName_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::clearFileName() noexcept {
  fileName_Accessor.reset();
  return *this;
}

uci::type::BasicEncyclopediaNumberType& ProductMetadataMDT::getBE_Number_() const {
  if (bE_Number_Accessor) {
    return *bE_Number_Accessor;
  }
  throw uci::base::UCIException("Error in getBE_Number(): An attempt was made to get an optional field that was not enabled, call hasBE_Number() to determine if it is safe to call getBE_Number()");
}

const uci::type::BasicEncyclopediaNumberType& ProductMetadataMDT::getBE_Number() const {
  return getBE_Number_();
}

uci::type::BasicEncyclopediaNumberType& ProductMetadataMDT::getBE_Number() {
  return getBE_Number_();
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setBE_Number(const uci::type::BasicEncyclopediaNumberType& accessor) {
  enableBE_Number();
  if (&accessor != bE_Number_Accessor.get()) {
    bE_Number_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductMetadataMDT::hasBE_Number() const noexcept {
  return static_cast<bool>(bE_Number_Accessor);
}

uci::type::BasicEncyclopediaNumberType& ProductMetadataMDT::enableBE_Number(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::basicEncyclopediaNumberType : type};
  if ((!bE_Number_Accessor) || (bE_Number_Accessor->getAccessorType() != requestedType)) {
    bE_Number_Accessor = BasicEncyclopediaNumberType::create(requestedType);
    if (!bE_Number_Accessor) {
      throw uci::base::UCIException("Error in enableBE_Number(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bE_Number_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::clearBE_Number() noexcept {
  bE_Number_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& ProductMetadataMDT::getSceneKey_() const {
  if (sceneKey_Accessor) {
    return *sceneKey_Accessor;
  }
  throw uci::base::UCIException("Error in getSceneKey(): An attempt was made to get an optional field that was not enabled, call hasSceneKey() to determine if it is safe to call getSceneKey()");
}

const uci::type::ForeignKeyType& ProductMetadataMDT::getSceneKey() const {
  return getSceneKey_();
}

uci::type::ForeignKeyType& ProductMetadataMDT::getSceneKey() {
  return getSceneKey_();
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setSceneKey(const uci::type::ForeignKeyType& accessor) {
  enableSceneKey(accessor.getAccessorType());
  if (&accessor != sceneKey_Accessor.get()) {
    sceneKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ProductMetadataMDT::hasSceneKey() const noexcept {
  return static_cast<bool>(sceneKey_Accessor);
}

uci::type::ForeignKeyType& ProductMetadataMDT::enableSceneKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!sceneKey_Accessor) || (sceneKey_Accessor->getAccessorType() != requestedType)) {
    sceneKey_Accessor = ForeignKeyType::create(requestedType);
    if (!sceneKey_Accessor) {
      throw uci::base::UCIException("Error in enableSceneKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sceneKey_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::clearSceneKey() noexcept {
  sceneKey_Accessor.reset();
  return *this;
}

const uci::type::ProductMetadataMDT::GeospatialLocation& ProductMetadataMDT::getGeospatialLocation() const {
  return *geospatialLocation_Accessor;
}

uci::type::ProductMetadataMDT::GeospatialLocation& ProductMetadataMDT::getGeospatialLocation() {
  return *geospatialLocation_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setGeospatialLocation(const uci::type::ProductMetadataMDT::GeospatialLocation& accessor) {
  if (&accessor != geospatialLocation_Accessor.get()) {
    geospatialLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductCollectionLocationType& ProductMetadataMDT::getCollectionLocation_() const {
  if (collectionLocation_Accessor) {
    return *collectionLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionLocation(): An attempt was made to get an optional field that was not enabled, call hasCollectionLocation() to determine if it is safe to call getCollectionLocation()");
}

const uci::type::ProductCollectionLocationType& ProductMetadataMDT::getCollectionLocation() const {
  return getCollectionLocation_();
}

uci::type::ProductCollectionLocationType& ProductMetadataMDT::getCollectionLocation() {
  return getCollectionLocation_();
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setCollectionLocation(const uci::type::ProductCollectionLocationType& accessor) {
  enableCollectionLocation();
  if (&accessor != collectionLocation_Accessor.get()) {
    collectionLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductMetadataMDT::hasCollectionLocation() const noexcept {
  return static_cast<bool>(collectionLocation_Accessor);
}

uci::type::ProductCollectionLocationType& ProductMetadataMDT::enableCollectionLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productCollectionLocationType : type};
  if ((!collectionLocation_Accessor) || (collectionLocation_Accessor->getAccessorType() != requestedType)) {
    collectionLocation_Accessor = ProductCollectionLocationType::create(requestedType);
    if (!collectionLocation_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionLocation_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::clearCollectionLocation() noexcept {
  collectionLocation_Accessor.reset();
  return *this;
}

const uci::type::SystemID_Type& ProductMetadataMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& ProductMetadataMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SourceFiltersType& ProductMetadataMDT::getProductSource() const {
  return *productSource_Accessor;
}

uci::type::SourceFiltersType& ProductMetadataMDT::getProductSource() {
  return *productSource_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setProductSource(const uci::type::SourceFiltersType& accessor) {
  if (&accessor != productSource_Accessor.get()) {
    productSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CreationSourceEnum& ProductMetadataMDT::getCreationSource() const {
  return *creationSource_Accessor;
}

uci::type::CreationSourceEnum& ProductMetadataMDT::getCreationSource() {
  return *creationSource_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setCreationSource(const uci::type::CreationSourceEnum& accessor) {
  if (&accessor != creationSource_Accessor.get()) {
    creationSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setCreationSource(uci::type::CreationSourceEnum::EnumerationItem value) {
  creationSource_Accessor->setValue(value);
  return *this;
}


xs::Boolean ProductMetadataMDT::getUntrustedModification() const {
  return untrustedModification_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setUntrustedModification(xs::Boolean value) {
  untrustedModification_Accessor = value;
  return *this;
}


uci::type::DateTimeTypeValue ProductMetadataMDT::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


const uci::type::SecurityInformationType& ProductMetadataMDT::getSecurityInformation() const {
  return *securityInformation_Accessor;
}

uci::type::SecurityInformationType& ProductMetadataMDT::getSecurityInformation() {
  return *securityInformation_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setSecurityInformation(const uci::type::SecurityInformationType& accessor) {
  if (&accessor != securityInformation_Accessor.get()) {
    securityInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ThumbnailType& ProductMetadataMDT::getThumbnail_() const {
  if (thumbnail_Accessor) {
    return *thumbnail_Accessor;
  }
  throw uci::base::UCIException("Error in getThumbnail(): An attempt was made to get an optional field that was not enabled, call hasThumbnail() to determine if it is safe to call getThumbnail()");
}

const uci::type::ThumbnailType& ProductMetadataMDT::getThumbnail() const {
  return getThumbnail_();
}

uci::type::ThumbnailType& ProductMetadataMDT::getThumbnail() {
  return getThumbnail_();
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setThumbnail(const uci::type::ThumbnailType& accessor) {
  enableThumbnail();
  if (&accessor != thumbnail_Accessor.get()) {
    thumbnail_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductMetadataMDT::hasThumbnail() const noexcept {
  return static_cast<bool>(thumbnail_Accessor);
}

uci::type::ThumbnailType& ProductMetadataMDT::enableThumbnail(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::thumbnailType : type};
  if ((!thumbnail_Accessor) || (thumbnail_Accessor->getAccessorType() != requestedType)) {
    thumbnail_Accessor = ThumbnailType::create(requestedType);
    if (!thumbnail_Accessor) {
      throw uci::base::UCIException("Error in enableThumbnail(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *thumbnail_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::clearThumbnail() noexcept {
  thumbnail_Accessor.reset();
  return *this;
}

const uci::type::ProductMetadataMDT::DerivedFromID& ProductMetadataMDT::getDerivedFromID() const {
  return *derivedFromID_Accessor;
}

uci::type::ProductMetadataMDT::DerivedFromID& ProductMetadataMDT::getDerivedFromID() {
  return *derivedFromID_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setDerivedFromID(const uci::type::ProductMetadataMDT::DerivedFromID& accessor) {
  if (&accessor != derivedFromID_Accessor.get()) {
    derivedFromID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductMetadataMDT::Traceability& ProductMetadataMDT::getTraceability() const {
  return *traceability_Accessor;
}

uci::type::ProductMetadataMDT::Traceability& ProductMetadataMDT::getTraceability() {
  return *traceability_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setTraceability(const uci::type::ProductMetadataMDT::Traceability& accessor) {
  if (&accessor != traceability_Accessor.get()) {
    traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductMetadataMDT::RequirementMetadata& ProductMetadataMDT::getRequirementMetadata() const {
  return *requirementMetadata_Accessor;
}

uci::type::ProductMetadataMDT::RequirementMetadata& ProductMetadataMDT::getRequirementMetadata() {
  return *requirementMetadata_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setRequirementMetadata(const uci::type::ProductMetadataMDT::RequirementMetadata& accessor) {
  if (&accessor != requirementMetadata_Accessor.get()) {
    requirementMetadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductMetadataMDT::EntityMetadata& ProductMetadataMDT::getEntityMetadata() const {
  return *entityMetadata_Accessor;
}

uci::type::ProductMetadataMDT::EntityMetadata& ProductMetadataMDT::getEntityMetadata() {
  return *entityMetadata_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setEntityMetadata(const uci::type::ProductMetadataMDT::EntityMetadata& accessor) {
  if (&accessor != entityMetadata_Accessor.get()) {
    entityMetadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SHA_2_256_HashType& ProductMetadataMDT::getSHA_2_Hash_() const {
  if (sHA_2_Hash_Accessor) {
    return *sHA_2_Hash_Accessor;
  }
  throw uci::base::UCIException("Error in getSHA_2_Hash(): An attempt was made to get an optional field that was not enabled, call hasSHA_2_Hash() to determine if it is safe to call getSHA_2_Hash()");
}

const uci::type::SHA_2_256_HashType& ProductMetadataMDT::getSHA_2_Hash() const {
  return getSHA_2_Hash_();
}

uci::type::SHA_2_256_HashType& ProductMetadataMDT::getSHA_2_Hash() {
  return getSHA_2_Hash_();
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setSHA_2_Hash(const uci::type::SHA_2_256_HashType& value) {
  sHA_2_Hash_Accessor = boost::make_unique<SHA_2_256_HashType>(dynamic_cast<const SHA_2_256_HashType&>(value));
  return *this;
}

bool ProductMetadataMDT::hasSHA_2_Hash() const noexcept {
  return static_cast<bool>(sHA_2_Hash_Accessor);
}

uci::type::SHA_2_256_HashType& ProductMetadataMDT::enableSHA_2_Hash() {
  if (!sHA_2_Hash_Accessor) {
    sHA_2_Hash_Accessor = boost::make_unique<SHA_2_256_HashType>();
  }
  return *sHA_2_Hash_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::clearSHA_2_Hash() noexcept {
  sHA_2_Hash_Accessor.reset();
  return *this;
}

uci::type::DemodulationParameterType& ProductMetadataMDT::getDemodulationParameters_() const {
  if (demodulationParameters_Accessor) {
    return *demodulationParameters_Accessor;
  }
  throw uci::base::UCIException("Error in getDemodulationParameters(): An attempt was made to get an optional field that was not enabled, call hasDemodulationParameters() to determine if it is safe to call getDemodulationParameters()");
}

const uci::type::DemodulationParameterType& ProductMetadataMDT::getDemodulationParameters() const {
  return getDemodulationParameters_();
}

uci::type::DemodulationParameterType& ProductMetadataMDT::getDemodulationParameters() {
  return getDemodulationParameters_();
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setDemodulationParameters(const uci::type::DemodulationParameterType& accessor) {
  enableDemodulationParameters();
  if (&accessor != demodulationParameters_Accessor.get()) {
    demodulationParameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductMetadataMDT::hasDemodulationParameters() const noexcept {
  return static_cast<bool>(demodulationParameters_Accessor);
}

uci::type::DemodulationParameterType& ProductMetadataMDT::enableDemodulationParameters(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::demodulationParameterType : type};
  if ((!demodulationParameters_Accessor) || (demodulationParameters_Accessor->getAccessorType() != requestedType)) {
    demodulationParameters_Accessor = DemodulationParameterType::create(requestedType);
    if (!demodulationParameters_Accessor) {
      throw uci::base::UCIException("Error in enableDemodulationParameters(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *demodulationParameters_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::clearDemodulationParameters() noexcept {
  demodulationParameters_Accessor.reset();
  return *this;
}

const uci::type::ProductMetadataMDT::AssociatedID& ProductMetadataMDT::getAssociatedID() const {
  return *associatedID_Accessor;
}

uci::type::ProductMetadataMDT::AssociatedID& ProductMetadataMDT::getAssociatedID() {
  return *associatedID_Accessor;
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::setAssociatedID(const uci::type::ProductMetadataMDT::AssociatedID& accessor) {
  if (&accessor != associatedID_Accessor.get()) {
    associatedID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ProductMetadataMDT> ProductMetadataMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productMetadataMDT : type};
  return (requestedType == uci::type::accessorType::productMetadataMDT) ? boost::make_unique<ProductMetadataMDT>() : nullptr;
}

/**  */
namespace ProductMetadataMDT_Names {

constexpr const char* Extern_Type_Name{"ProductMetadataMDT"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* ProductDescription_Name{"ProductDescription"};
constexpr const char* FileName_Name{"FileName"};
constexpr const char* BE_Number_Name{"BE_Number"};
constexpr const char* SceneKey_Name{"SceneKey"};
constexpr const char* GeospatialLocation_Name{"GeospatialLocation"};
constexpr const char* CollectionLocation_Name{"CollectionLocation"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ProductSource_Name{"ProductSource"};
constexpr const char* CreationSource_Name{"CreationSource"};
constexpr const char* UntrustedModification_Name{"UntrustedModification"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* Thumbnail_Name{"Thumbnail"};
constexpr const char* DerivedFromID_Name{"DerivedFromID"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* RequirementMetadata_Name{"RequirementMetadata"};
constexpr const char* EntityMetadata_Name{"EntityMetadata"};
constexpr const char* SHA_2_Hash_Name{"SHA_2_Hash"};
constexpr const char* DemodulationParameters_Name{"DemodulationParameters"};
constexpr const char* AssociatedID_Name{"AssociatedID"};

} // namespace ProductMetadataMDT_Names

void ProductMetadataMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductMetadataMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductMetadataMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::ProductMetadataID_Name) {
      ProductMetadataID_Type::deserialize(valueType.second, accessor.getProductMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::ProductDescription_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableProductDescription(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::FileName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::BE_Number_Name) {
      BasicEncyclopediaNumberType::deserialize(valueType.second, accessor.enableBE_Number(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SceneKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSceneKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::GeospatialLocation_Name) {
      uci::type::ProductMetadataMDT::GeospatialLocation& boundedList = accessor.getGeospatialLocation();
      const uci::type::ProductMetadataMDT::GeospatialLocation::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::ProductGeospatialLocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::CollectionLocation_Name) {
      ProductCollectionLocationType::deserialize(valueType.second, accessor.enableCollectionLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::ProductSource_Name) {
      SourceFiltersType::deserialize(valueType.second, accessor.getProductSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::CreationSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCreationSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::UntrustedModification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUntrustedModification(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::Thumbnail_Name) {
      ThumbnailType::deserialize(valueType.second, accessor.enableThumbnail(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::DerivedFromID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::DerivedFromID& boundedList = accessor.getDerivedFromID();
        const uci::type::ProductMetadataMDT::DerivedFromID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::Traceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::Traceability& boundedList = accessor.getTraceability();
        const uci::type::ProductMetadataMDT::Traceability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::TraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::RequirementMetadata_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::RequirementMetadata& boundedList = accessor.getRequirementMetadata();
        const uci::type::ProductMetadataMDT::RequirementMetadata::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementProductMetadataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::EntityMetadata_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::EntityMetadata& boundedList = accessor.getEntityMetadata();
        const uci::type::ProductMetadataMDT::EntityMetadata::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EntityMetadataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SHA_2_Hash_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        asb_uci::util::SerializationHelpers::deserializeHexBinary(*value, accessor.enableSHA_2_Hash());
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::DemodulationParameters_Name) {
      DemodulationParameterType::deserialize(valueType.second, accessor.enableDemodulationParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::AssociatedID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
        const uci::type::ProductMetadataMDT::AssociatedID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ProductMetadataMDT::serialize(const uci::type::ProductMetadataMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductMetadataMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductMetadataMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  ProductMetadataID_Type::serialize(accessor.getProductMetadataID(), node, ProductMetadataMDT_Names::ProductMetadataID_Name);
  ProductOutputType::serialize(accessor.getProductDescription(), node, ProductMetadataMDT_Names::ProductDescription_Name);
  if (accessor.hasFileName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getFileName(), node, ProductMetadataMDT_Names::FileName_Name);
  }
  if (accessor.hasBE_Number()) {
    BasicEncyclopediaNumberType::serialize(accessor.getBE_Number(), node, ProductMetadataMDT_Names::BE_Number_Name);
  }
  if (accessor.hasSceneKey()) {
    ForeignKeyType::serialize(accessor.getSceneKey(), node, ProductMetadataMDT_Names::SceneKey_Name);
  }
  {
    const uci::type::ProductMetadataMDT::GeospatialLocation& boundedList = accessor.getGeospatialLocation();
    for (uci::type::ProductMetadataMDT::GeospatialLocation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductGeospatialLocationType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::GeospatialLocation_Name);
    }
  }
  if (accessor.hasCollectionLocation()) {
    ProductCollectionLocationType::serialize(accessor.getCollectionLocation(), node, ProductMetadataMDT_Names::CollectionLocation_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, ProductMetadataMDT_Names::SystemID_Name);
  SourceFiltersType::serialize(accessor.getProductSource(), node, ProductMetadataMDT_Names::ProductSource_Name);
  CreationSourceEnum::serialize(accessor.getCreationSource(), node, ProductMetadataMDT_Names::CreationSource_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUntrustedModification(), node, ProductMetadataMDT_Names::UntrustedModification_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, ProductMetadataMDT_Names::Timestamp_Name);
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, ProductMetadataMDT_Names::SecurityInformation_Name);
  if (accessor.hasThumbnail()) {
    ThumbnailType::serialize(accessor.getThumbnail(), node, ProductMetadataMDT_Names::Thumbnail_Name);
  }
  {
    const uci::type::ProductMetadataMDT::DerivedFromID& boundedList = accessor.getDerivedFromID();
    for (uci::type::ProductMetadataMDT::DerivedFromID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::DerivedFromID_Name);
    }
  }
  {
    const uci::type::ProductMetadataMDT::Traceability& boundedList = accessor.getTraceability();
    for (uci::type::ProductMetadataMDT::Traceability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::TraceabilityType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::Traceability_Name);
    }
  }
  {
    const uci::type::ProductMetadataMDT::RequirementMetadata& boundedList = accessor.getRequirementMetadata();
    for (uci::type::ProductMetadataMDT::RequirementMetadata::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementProductMetadataType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::RequirementMetadata_Name);
    }
  }
  {
    const uci::type::ProductMetadataMDT::EntityMetadata& boundedList = accessor.getEntityMetadata();
    for (uci::type::ProductMetadataMDT::EntityMetadata::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityMetadataType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::EntityMetadata_Name);
    }
  }
  if (accessor.hasSHA_2_Hash()) {
    asb_uci::util::SerializationHelpers::serializeHexBinary(accessor.getSHA_2_Hash(), node, ProductMetadataMDT_Names::SHA_2_Hash_Name);
  }
  if (accessor.hasDemodulationParameters()) {
    DemodulationParameterType::serialize(accessor.getDemodulationParameters(), node, ProductMetadataMDT_Names::DemodulationParameters_Name);
  }
  {
    const uci::type::ProductMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
    for (uci::type::ProductMetadataMDT::AssociatedID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::AssociatedID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductMetadataMDT& ProductMetadataMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductMetadataMDT>().release());
}

uci::type::ProductMetadataMDT& ProductMetadataMDT::create(const uci::type::ProductMetadataMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductMetadataMDT> newAccessor{boost::make_unique<asb_uci::type::ProductMetadataMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductMetadataMDT::destroy(uci::type::ProductMetadataMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ProductMetadataMDT*>(&accessor);
}

} // namespace type

} // namespace uci

