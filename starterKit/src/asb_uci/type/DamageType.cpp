/** @file DamageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DamageType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DamagedFunctionType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamagedFunctionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageType::DamageType() = default;

DamageType::~DamageType() = default;

void DamageType::copy(const uci::type::DamageType& accessor) {
  copyImpl(accessor, false);
}

void DamageType::copyImpl(const uci::type::DamageType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageType&>(accessor);
    if (accessorImpl.functionalDamage_Accessor) {
      setFunctionalDamage(*(accessorImpl.functionalDamage_Accessor));
    } else {
      functionalDamage_Accessor.reset();
    }
    if (accessorImpl.humanCasualty_Accessor) {
      setHumanCasualty(*(accessorImpl.humanCasualty_Accessor));
    } else {
      humanCasualty_Accessor.reset();
    }
    if (accessorImpl.humanInjury_Accessor) {
      setHumanInjury(*(accessorImpl.humanInjury_Accessor));
    } else {
      humanInjury_Accessor.reset();
    }
  }
}

void DamageType::reset() noexcept {
  functionalDamage_Accessor.reset();
  humanCasualty_Accessor.reset();
  humanInjury_Accessor.reset();
}

uci::type::DamageType::DamageTypeChoice DamageType::getDamageTypeChoiceOrdinal() const noexcept {
  if (functionalDamage_Accessor) {
    return DAMAGETYPE_CHOICE_FUNCTIONALDAMAGE;
  }
  if (humanCasualty_Accessor) {
    return DAMAGETYPE_CHOICE_HUMANCASUALTY;
  }
  if (humanInjury_Accessor) {
    return DAMAGETYPE_CHOICE_HUMANINJURY;
  }
  return DAMAGETYPE_CHOICE_NONE;
}

uci::type::DamageType& DamageType::setDamageTypeChoiceOrdinal(uci::type::DamageType::DamageTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DAMAGETYPE_CHOICE_FUNCTIONALDAMAGE:
      chooseFunctionalDamage("setDamageTypeChoiceOrdinal", type);
      break;
    case DAMAGETYPE_CHOICE_HUMANCASUALTY:
      chooseHumanCasualty("setDamageTypeChoiceOrdinal", type);
      break;
    case DAMAGETYPE_CHOICE_HUMANINJURY:
      chooseHumanInjury("setDamageTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setDamageTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DamagedFunctionType& DamageType::getFunctionalDamage_() const {
  if (functionalDamage_Accessor) {
    return *functionalDamage_Accessor;
  }
  throw uci::base::UCIException("Error in getFunctionalDamage(): Unable to get FunctionalDamage, field not selected");
}

const uci::type::DamagedFunctionType& DamageType::getFunctionalDamage() const {
  return getFunctionalDamage_();
}

uci::type::DamagedFunctionType& DamageType::getFunctionalDamage() {
  return getFunctionalDamage_();
}

uci::type::DamageType& DamageType::setFunctionalDamage(const uci::type::DamagedFunctionType& accessor) {
  chooseFunctionalDamage("setFunctionalDamage", accessor.getAccessorType());
  if (&accessor != functionalDamage_Accessor.get()) {
    functionalDamage_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageType::isFunctionalDamage() const noexcept {
  return static_cast<bool>(functionalDamage_Accessor);
}

uci::type::DamagedFunctionType& DamageType::chooseFunctionalDamage(const std::string& method, uci::base::accessorType::AccessorType type) {
  humanCasualty_Accessor.reset();
  humanInjury_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damagedFunctionType : type};
  if ((!functionalDamage_Accessor) || (functionalDamage_Accessor->getAccessorType() != requestedType)) {
    functionalDamage_Accessor = DamagedFunctionType::create(type);
    if (!functionalDamage_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *functionalDamage_Accessor;
}

uci::type::DamagedFunctionType& DamageType::chooseFunctionalDamage(uci::base::accessorType::AccessorType type) {
  return chooseFunctionalDamage("chooseFunctionalDamage", type);
}

uci::type::EmptyType& DamageType::getHumanCasualty_() const {
  if (humanCasualty_Accessor) {
    return *humanCasualty_Accessor;
  }
  throw uci::base::UCIException("Error in getHumanCasualty(): An attempt was made to get an optional field that was not enabled, call hasHumanCasualty() to determine if it is safe to call getHumanCasualty()");
}

const uci::type::EmptyType& DamageType::getHumanCasualty() const {
  return getHumanCasualty_();
}

uci::type::EmptyType& DamageType::getHumanCasualty() {
  return getHumanCasualty_();
}

uci::type::DamageType& DamageType::setHumanCasualty(const uci::type::EmptyType& value) {
  return setHumanCasualty(value.c_str());
}

uci::type::DamageType& DamageType::setHumanCasualty(const std::string& value) {
  return setHumanCasualty(value.c_str());
}

uci::type::DamageType& DamageType::setHumanCasualty(const char * value) {
  chooseHumanCasualty().setStringValue(value);
  return *this;
}

bool DamageType::isHumanCasualty() const noexcept {
  return static_cast<bool>(humanCasualty_Accessor);
}

uci::type::EmptyType& DamageType::chooseHumanCasualty(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  functionalDamage_Accessor.reset();
  humanInjury_Accessor.reset();
  if (!humanCasualty_Accessor) {
    humanCasualty_Accessor = EmptyType::create(type);
  }
  return *humanCasualty_Accessor;
}

uci::type::EmptyType& DamageType::chooseHumanCasualty(uci::base::accessorType::AccessorType type) {
  return chooseHumanCasualty("chooseHumanCasualty", type);
}

uci::type::EmptyType& DamageType::getHumanInjury_() const {
  if (humanInjury_Accessor) {
    return *humanInjury_Accessor;
  }
  throw uci::base::UCIException("Error in getHumanInjury(): An attempt was made to get an optional field that was not enabled, call hasHumanInjury() to determine if it is safe to call getHumanInjury()");
}

const uci::type::EmptyType& DamageType::getHumanInjury() const {
  return getHumanInjury_();
}

uci::type::EmptyType& DamageType::getHumanInjury() {
  return getHumanInjury_();
}

uci::type::DamageType& DamageType::setHumanInjury(const uci::type::EmptyType& value) {
  return setHumanInjury(value.c_str());
}

uci::type::DamageType& DamageType::setHumanInjury(const std::string& value) {
  return setHumanInjury(value.c_str());
}

uci::type::DamageType& DamageType::setHumanInjury(const char * value) {
  chooseHumanInjury().setStringValue(value);
  return *this;
}

bool DamageType::isHumanInjury() const noexcept {
  return static_cast<bool>(humanInjury_Accessor);
}

uci::type::EmptyType& DamageType::chooseHumanInjury(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  functionalDamage_Accessor.reset();
  humanCasualty_Accessor.reset();
  if (!humanInjury_Accessor) {
    humanInjury_Accessor = EmptyType::create(type);
  }
  return *humanInjury_Accessor;
}

uci::type::EmptyType& DamageType::chooseHumanInjury(uci::base::accessorType::AccessorType type) {
  return chooseHumanInjury("chooseHumanInjury", type);
}

std::unique_ptr<DamageType> DamageType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageType : type};
  return (requestedType == uci::type::accessorType::damageType) ? boost::make_unique<DamageType>() : nullptr;
}

/**  */
namespace DamageType_Names {

constexpr const char* Extern_Type_Name{"DamageType"};
constexpr const char* FunctionalDamage_Name{"FunctionalDamage"};
constexpr const char* HumanCasualty_Name{"HumanCasualty"};
constexpr const char* HumanInjury_Name{"HumanInjury"};

} // namespace DamageType_Names

void DamageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageType_Names::FunctionalDamage_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseFunctionalDamage(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageType_Names::HumanCasualty_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseHumanCasualty().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + DamageType_Names::HumanInjury_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseHumanInjury().setStringValue(*value);
      }
    }
  }
}

std::string DamageType::serialize(const uci::type::DamageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageType_Names::Extern_Type_Name);
  }
  if (accessor.isFunctionalDamage()) {
    DamagedFunctionType::serialize(accessor.getFunctionalDamage(), node, DamageType_Names::FunctionalDamage_Name);
  } else if (accessor.isHumanCasualty()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getHumanCasualty(), node, DamageType_Names::HumanCasualty_Name);
  } else if (accessor.isHumanInjury()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getHumanInjury(), node, DamageType_Names::HumanInjury_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageType& DamageType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageType>().release());
}

uci::type::DamageType& DamageType::create(const uci::type::DamageType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageType> newAccessor{boost::make_unique<asb_uci::type::DamageType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageType::destroy(uci::type::DamageType& accessor) {
  delete dynamic_cast<asb_uci::type::DamageType*>(&accessor);
}

} // namespace type

} // namespace uci

