/** @file PO_AirTargetVolumeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_AirTargetVolumeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PO_AirVolumeSensorReferencedType.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_AirTargetVolumeType.h"
#include "uci/type/PO_AirVolumeSensorReferencedType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_AirTargetVolumeType::PO_AirTargetVolumeType() = default;

PO_AirTargetVolumeType::~PO_AirTargetVolumeType() = default;

void PO_AirTargetVolumeType::copy(const uci::type::PO_AirTargetVolumeType& accessor) {
  copyImpl(accessor, false);
}

void PO_AirTargetVolumeType::copyImpl(const uci::type::PO_AirTargetVolumeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_AirTargetVolumeType&>(accessor);
    if (accessorImpl.airVolumeSensorReferenced_Accessor) {
      setAirVolumeSensorReferenced(*(accessorImpl.airVolumeSensorReferenced_Accessor));
    } else {
      airVolumeSensorReferenced_Accessor.reset();
    }
    if (accessorImpl.airVolumeLocation_Accessor) {
      setAirVolumeLocation(*(accessorImpl.airVolumeLocation_Accessor));
    } else {
      airVolumeLocation_Accessor.reset();
    }
  }
}

void PO_AirTargetVolumeType::reset() noexcept {
  airVolumeSensorReferenced_Accessor.reset();
  airVolumeLocation_Accessor.reset();
}

uci::type::PO_AirTargetVolumeType::PO_AirTargetVolumeTypeChoice PO_AirTargetVolumeType::getPO_AirTargetVolumeTypeChoiceOrdinal() const noexcept {
  if (airVolumeSensorReferenced_Accessor) {
    return PO_AIRTARGETVOLUMETYPE_CHOICE_AIRVOLUMESENSORREFERENCED;
  }
  if (airVolumeLocation_Accessor) {
    return PO_AIRTARGETVOLUMETYPE_CHOICE_AIRVOLUMELOCATION;
  }
  return PO_AIRTARGETVOLUMETYPE_CHOICE_NONE;
}

uci::type::PO_AirTargetVolumeType& PO_AirTargetVolumeType::setPO_AirTargetVolumeTypeChoiceOrdinal(uci::type::PO_AirTargetVolumeType::PO_AirTargetVolumeTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_AIRTARGETVOLUMETYPE_CHOICE_AIRVOLUMESENSORREFERENCED:
      chooseAirVolumeSensorReferenced("setPO_AirTargetVolumeTypeChoiceOrdinal", type);
      break;
    case PO_AIRTARGETVOLUMETYPE_CHOICE_AIRVOLUMELOCATION:
      chooseAirVolumeLocation("setPO_AirTargetVolumeTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_AirTargetVolumeTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirTargetVolumeType::getAirVolumeSensorReferenced_() const {
  if (airVolumeSensorReferenced_Accessor) {
    return *airVolumeSensorReferenced_Accessor;
  }
  throw uci::base::UCIException("Error in getAirVolumeSensorReferenced(): Unable to get AirVolumeSensorReferenced, field not selected");
}

const uci::type::PO_AirVolumeSensorReferencedType& PO_AirTargetVolumeType::getAirVolumeSensorReferenced() const {
  return getAirVolumeSensorReferenced_();
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirTargetVolumeType::getAirVolumeSensorReferenced() {
  return getAirVolumeSensorReferenced_();
}

uci::type::PO_AirTargetVolumeType& PO_AirTargetVolumeType::setAirVolumeSensorReferenced(const uci::type::PO_AirVolumeSensorReferencedType& accessor) {
  chooseAirVolumeSensorReferenced();
  if (&accessor != airVolumeSensorReferenced_Accessor.get()) {
    airVolumeSensorReferenced_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_AirTargetVolumeType::isAirVolumeSensorReferenced() const noexcept {
  return static_cast<bool>(airVolumeSensorReferenced_Accessor);
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirTargetVolumeType::chooseAirVolumeSensorReferenced(const std::string& method, uci::base::accessorType::AccessorType type) {
  airVolumeLocation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AirVolumeSensorReferencedType : type};
  if ((!airVolumeSensorReferenced_Accessor) || (airVolumeSensorReferenced_Accessor->getAccessorType() != requestedType)) {
    airVolumeSensorReferenced_Accessor = PO_AirVolumeSensorReferencedType::create(type);
    if (!airVolumeSensorReferenced_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airVolumeSensorReferenced_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirTargetVolumeType::chooseAirVolumeSensorReferenced(uci::base::accessorType::AccessorType type) {
  return chooseAirVolumeSensorReferenced("chooseAirVolumeSensorReferenced", type);
}

uci::type::ZoneType& PO_AirTargetVolumeType::getAirVolumeLocation_() const {
  if (airVolumeLocation_Accessor) {
    return *airVolumeLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getAirVolumeLocation(): Unable to get AirVolumeLocation, field not selected");
}

const uci::type::ZoneType& PO_AirTargetVolumeType::getAirVolumeLocation() const {
  return getAirVolumeLocation_();
}

uci::type::ZoneType& PO_AirTargetVolumeType::getAirVolumeLocation() {
  return getAirVolumeLocation_();
}

uci::type::PO_AirTargetVolumeType& PO_AirTargetVolumeType::setAirVolumeLocation(const uci::type::ZoneType& accessor) {
  chooseAirVolumeLocation("setAirVolumeLocation", accessor.getAccessorType());
  if (&accessor != airVolumeLocation_Accessor.get()) {
    airVolumeLocation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_AirTargetVolumeType::isAirVolumeLocation() const noexcept {
  return static_cast<bool>(airVolumeLocation_Accessor);
}

uci::type::ZoneType& PO_AirTargetVolumeType::chooseAirVolumeLocation(const std::string& method, uci::base::accessorType::AccessorType type) {
  airVolumeSensorReferenced_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!airVolumeLocation_Accessor) || (airVolumeLocation_Accessor->getAccessorType() != requestedType)) {
    airVolumeLocation_Accessor = ZoneType::create(type);
    if (!airVolumeLocation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airVolumeLocation_Accessor;
}

uci::type::ZoneType& PO_AirTargetVolumeType::chooseAirVolumeLocation(uci::base::accessorType::AccessorType type) {
  return chooseAirVolumeLocation("chooseAirVolumeLocation", type);
}

std::unique_ptr<PO_AirTargetVolumeType> PO_AirTargetVolumeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AirTargetVolumeType : type};
  return (requestedType == uci::type::accessorType::pO_AirTargetVolumeType) ? boost::make_unique<PO_AirTargetVolumeType>() : nullptr;
}

/**  */
namespace PO_AirTargetVolumeType_Names {

constexpr const char* Extern_Type_Name{"PO_AirTargetVolumeType"};
constexpr const char* AirVolumeSensorReferenced_Name{"AirVolumeSensorReferenced"};
constexpr const char* AirVolumeLocation_Name{"AirVolumeLocation"};

} // namespace PO_AirTargetVolumeType_Names

void PO_AirTargetVolumeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_AirTargetVolumeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_AirTargetVolumeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_AirTargetVolumeType_Names::AirVolumeSensorReferenced_Name) {
      PO_AirVolumeSensorReferencedType::deserialize(valueType.second, accessor.chooseAirVolumeSensorReferenced(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_AirTargetVolumeType_Names::AirVolumeLocation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAirVolumeLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string PO_AirTargetVolumeType::serialize(const uci::type::PO_AirTargetVolumeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_AirTargetVolumeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_AirTargetVolumeType_Names::Extern_Type_Name);
  }
  if (accessor.isAirVolumeSensorReferenced()) {
    PO_AirVolumeSensorReferencedType::serialize(accessor.getAirVolumeSensorReferenced(), node, PO_AirTargetVolumeType_Names::AirVolumeSensorReferenced_Name);
  } else if (accessor.isAirVolumeLocation()) {
    ZoneType::serialize(accessor.getAirVolumeLocation(), node, PO_AirTargetVolumeType_Names::AirVolumeLocation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_AirTargetVolumeType& PO_AirTargetVolumeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_AirTargetVolumeType>().release());
}

uci::type::PO_AirTargetVolumeType& PO_AirTargetVolumeType::create(const uci::type::PO_AirTargetVolumeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_AirTargetVolumeType> newAccessor{boost::make_unique<asb_uci::type::PO_AirTargetVolumeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_AirTargetVolumeType::destroy(uci::type::PO_AirTargetVolumeType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_AirTargetVolumeType*>(&accessor);
}

} // namespace type

} // namespace uci

