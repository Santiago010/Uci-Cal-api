/** @file OperatorAnnotationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OperatorAnnotationMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/ID_Type.h"
#include "asb_uci/type/OperatorAnnotationID_Type.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/ID_Type.h"
#include "uci/type/OperatorAnnotationID_Type.h"
#include "uci/type/OperatorAnnotationMDT.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorAnnotationMDT::OperatorAnnotationMDT()
  : operatorAnnotationID_Accessor{boost::make_unique<OperatorAnnotationID_Type>()},
    serviceID_Accessor{boost::make_unique<ServiceID_Type>()},
    objectID_Accessor{boost::make_unique<ObjectID>(1, SIZE_MAX)},
    annotationText_Accessor{boost::make_unique<AnnotationText>(1, SIZE_MAX)} {
}

OperatorAnnotationMDT::~OperatorAnnotationMDT() = default;

void OperatorAnnotationMDT::copy(const uci::type::OperatorAnnotationMDT& accessor) {
  copyImpl(accessor, false);
}

void OperatorAnnotationMDT::copyImpl(const uci::type::OperatorAnnotationMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OperatorAnnotationMDT&>(accessor);
    setOperatorAnnotationID(*(accessorImpl.operatorAnnotationID_Accessor));
    setServiceID(*(accessorImpl.serviceID_Accessor));
    if (accessorImpl.hasTimestampForAnnotation()) {
      setTimestampForAnnotation(accessorImpl.getTimestampForAnnotation());
    } else {
      clearTimestampForAnnotation();
    }
    setObjectID(*(accessorImpl.objectID_Accessor));
    setAnnotationText(*(accessorImpl.annotationText_Accessor));
  }
}

void OperatorAnnotationMDT::reset() noexcept {
  DataRecordBaseType::reset();
  operatorAnnotationID_Accessor->reset();
  serviceID_Accessor->reset();
  clearTimestampForAnnotation();
  objectID_Accessor->reset();
  annotationText_Accessor->reset();
}

const uci::type::OperatorAnnotationID_Type& OperatorAnnotationMDT::getOperatorAnnotationID() const {
  return *operatorAnnotationID_Accessor;
}

uci::type::OperatorAnnotationID_Type& OperatorAnnotationMDT::getOperatorAnnotationID() {
  return *operatorAnnotationID_Accessor;
}

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::setOperatorAnnotationID(const uci::type::OperatorAnnotationID_Type& accessor) {
  if (&accessor != operatorAnnotationID_Accessor.get()) {
    operatorAnnotationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ServiceID_Type& OperatorAnnotationMDT::getServiceID() const {
  return *serviceID_Accessor;
}

uci::type::ServiceID_Type& OperatorAnnotationMDT::getServiceID() {
  return *serviceID_Accessor;
}

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue OperatorAnnotationMDT::getTimestampForAnnotation() const {
  if (timestampForAnnotation_Accessor) {
    return *timestampForAnnotation_Accessor;
  }
  throw uci::base::UCIException("Error in getTimestampForAnnotation(): An attempt was made to get an optional field that was not enabled, call hasTimestampForAnnotation() to determine if it is safe to call getTimestampForAnnotation()");
}

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::setTimestampForAnnotation(uci::type::DateTimeTypeValue value) {
  timestampForAnnotation_Accessor = value;
  return *this;
}

bool OperatorAnnotationMDT::hasTimestampForAnnotation() const noexcept {
  return timestampForAnnotation_Accessor.has_value();
}

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::clearTimestampForAnnotation() noexcept {
  timestampForAnnotation_Accessor.reset();
  return *this;
}

const uci::type::OperatorAnnotationMDT::ObjectID& OperatorAnnotationMDT::getObjectID() const {
  return *objectID_Accessor;
}

uci::type::OperatorAnnotationMDT::ObjectID& OperatorAnnotationMDT::getObjectID() {
  return *objectID_Accessor;
}

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::setObjectID(const uci::type::OperatorAnnotationMDT::ObjectID& accessor) {
  if (&accessor != objectID_Accessor.get()) {
    objectID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OperatorAnnotationMDT::AnnotationText& OperatorAnnotationMDT::getAnnotationText() const {
  return *annotationText_Accessor;
}

uci::type::OperatorAnnotationMDT::AnnotationText& OperatorAnnotationMDT::getAnnotationText() {
  return *annotationText_Accessor;
}

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::setAnnotationText(const uci::type::OperatorAnnotationMDT::AnnotationText& accessor) {
  if (&accessor != annotationText_Accessor.get()) {
    annotationText_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<OperatorAnnotationMDT> OperatorAnnotationMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorAnnotationMDT : type};
  return (requestedType == uci::type::accessorType::operatorAnnotationMDT) ? boost::make_unique<OperatorAnnotationMDT>() : nullptr;
}

/**  */
namespace OperatorAnnotationMDT_Names {

constexpr const char* Extern_Type_Name{"OperatorAnnotationMDT"};
constexpr const char* OperatorAnnotationID_Name{"OperatorAnnotationID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* TimestampForAnnotation_Name{"TimestampForAnnotation"};
constexpr const char* ObjectID_Name{"ObjectID"};
constexpr const char* AnnotationText_Name{"AnnotationText"};

} // namespace OperatorAnnotationMDT_Names

void OperatorAnnotationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorAnnotationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorAnnotationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorAnnotationMDT_Names::OperatorAnnotationID_Name) {
      OperatorAnnotationID_Type::deserialize(valueType.second, accessor.getOperatorAnnotationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorAnnotationMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.getServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorAnnotationMDT_Names::TimestampForAnnotation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestampForAnnotation(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OperatorAnnotationMDT_Names::ObjectID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorAnnotationMDT::ObjectID& boundedList = accessor.getObjectID();
        const uci::type::OperatorAnnotationMDT::ObjectID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OperatorAnnotationMDT_Names::AnnotationText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorAnnotationMDT::AnnotationText& boundedList = accessor.getAnnotationText();
        const uci::type::OperatorAnnotationMDT::AnnotationText::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OperatorAnnotationMDT::serialize(const uci::type::OperatorAnnotationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorAnnotationMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorAnnotationMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  OperatorAnnotationID_Type::serialize(accessor.getOperatorAnnotationID(), node, OperatorAnnotationMDT_Names::OperatorAnnotationID_Name);
  ServiceID_Type::serialize(accessor.getServiceID(), node, OperatorAnnotationMDT_Names::ServiceID_Name);
  if (accessor.hasTimestampForAnnotation()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestampForAnnotation(), node, OperatorAnnotationMDT_Names::TimestampForAnnotation_Name);
  }
  {
    const uci::type::OperatorAnnotationMDT::ObjectID& boundedList = accessor.getObjectID();
    for (uci::type::OperatorAnnotationMDT::ObjectID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ID_Type::serialize(boundedList.at(i), node, OperatorAnnotationMDT_Names::ObjectID_Name);
    }
  }
  {
    const uci::type::OperatorAnnotationMDT::AnnotationText& boundedList = accessor.getAnnotationText();
    for (uci::type::OperatorAnnotationMDT::AnnotationText::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, OperatorAnnotationMDT_Names::AnnotationText_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorAnnotationMDT>().release());
}

uci::type::OperatorAnnotationMDT& OperatorAnnotationMDT::create(const uci::type::OperatorAnnotationMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorAnnotationMDT> newAccessor{boost::make_unique<asb_uci::type::OperatorAnnotationMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorAnnotationMDT::destroy(uci::type::OperatorAnnotationMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorAnnotationMDT*>(&accessor);
}

} // namespace type

} // namespace uci

