/** @file DMPI_StoreStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DMPI_StoreStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/DMPI_StoreStateEnum.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/DMPI_StoreStateEnum.h"
#include "uci/type/DMPI_StoreStatusType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_StoreStatusType::DMPI_StoreStatusType()
  : storeState_Accessor{boost::make_unique<DMPI_StoreStateEnum>()} {
}

DMPI_StoreStatusType::~DMPI_StoreStatusType() = default;

void DMPI_StoreStatusType::copy(const uci::type::DMPI_StoreStatusType& accessor) {
  copyImpl(accessor, false);
}

void DMPI_StoreStatusType::copyImpl(const uci::type::DMPI_StoreStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DMPI_StoreStatusType&>(accessor);
    setStoreState(*(accessorImpl.storeState_Accessor));
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    if (accessorImpl.reason_Accessor) {
      setReason(*(accessorImpl.reason_Accessor));
    } else {
      reason_Accessor.reset();
    }
    if (accessorImpl.hasTimeOfImpact()) {
      setTimeOfImpact(accessorImpl.getTimeOfImpact());
    } else {
      clearTimeOfImpact();
    }
  }
}

void DMPI_StoreStatusType::reset() noexcept {
  storeState_Accessor->reset();
  capabilityID_Accessor.reset();
  reason_Accessor.reset();
  clearTimeOfImpact();
}

const uci::type::DMPI_StoreStateEnum& DMPI_StoreStatusType::getStoreState() const {
  return *storeState_Accessor;
}

uci::type::DMPI_StoreStateEnum& DMPI_StoreStatusType::getStoreState() {
  return *storeState_Accessor;
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::setStoreState(const uci::type::DMPI_StoreStateEnum& accessor) {
  if (&accessor != storeState_Accessor.get()) {
    storeState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::setStoreState(uci::type::DMPI_StoreStateEnum::EnumerationItem value) {
  storeState_Accessor->setValue(value);
  return *this;
}


uci::type::CapabilityID_Type& DMPI_StoreStatusType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& DMPI_StoreStatusType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& DMPI_StoreStatusType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_StoreStatusType::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& DMPI_StoreStatusType::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& DMPI_StoreStatusType::getReason_() const {
  if (reason_Accessor) {
    return *reason_Accessor;
  }
  throw uci::base::UCIException("Error in getReason(): An attempt was made to get an optional field that was not enabled, call hasReason() to determine if it is safe to call getReason()");
}

const uci::type::VisibleString1024Type& DMPI_StoreStatusType::getReason() const {
  return getReason_();
}

uci::type::VisibleString1024Type& DMPI_StoreStatusType::getReason() {
  return getReason_();
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::setReason(const uci::type::VisibleString1024Type& value) {
  return setReason(value.c_str());
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::setReason(const std::string& value) {
  return setReason(value.c_str());
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::setReason(const char* value) {
  enableReason().setStringValue(value);
  return *this;
}

bool DMPI_StoreStatusType::hasReason() const noexcept {
  return static_cast<bool>(reason_Accessor);
}

uci::type::VisibleString1024Type& DMPI_StoreStatusType::enableReason(uci::base::accessorType::AccessorType type) {
  if (!reason_Accessor) {
    reason_Accessor = VisibleString1024Type::create(type);
  }
  return *reason_Accessor;
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::clearReason() noexcept {
  reason_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue DMPI_StoreStatusType::getTimeOfImpact() const {
  if (timeOfImpact_Accessor) {
    return *timeOfImpact_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeOfImpact(): An attempt was made to get an optional field that was not enabled, call hasTimeOfImpact() to determine if it is safe to call getTimeOfImpact()");
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::setTimeOfImpact(uci::type::DateTimeTypeValue value) {
  timeOfImpact_Accessor = value;
  return *this;
}

bool DMPI_StoreStatusType::hasTimeOfImpact() const noexcept {
  return timeOfImpact_Accessor.has_value();
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::clearTimeOfImpact() noexcept {
  timeOfImpact_Accessor.reset();
  return *this;
}

std::unique_ptr<DMPI_StoreStatusType> DMPI_StoreStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_StoreStatusType : type};
  return (requestedType == uci::type::accessorType::dMPI_StoreStatusType) ? boost::make_unique<DMPI_StoreStatusType>() : nullptr;
}

/**  */
namespace DMPI_StoreStatusType_Names {

constexpr const char* Extern_Type_Name{"DMPI_StoreStatusType"};
constexpr const char* StoreState_Name{"StoreState"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* Reason_Name{"Reason"};
constexpr const char* TimeOfImpact_Name{"TimeOfImpact"};

} // namespace DMPI_StoreStatusType_Names

void DMPI_StoreStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_StoreStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_StoreStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_StoreStatusType_Names::StoreState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getStoreState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DMPI_StoreStatusType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StoreStatusType_Names::Reason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReason(*value);
      }
    } else if (valueType.first == nsPrefix + DMPI_StoreStatusType_Names::TimeOfImpact_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeOfImpact(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
}

std::string DMPI_StoreStatusType::serialize(const uci::type::DMPI_StoreStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_StoreStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_StoreStatusType_Names::Extern_Type_Name);
  }
  DMPI_StoreStateEnum::serialize(accessor.getStoreState(), node, DMPI_StoreStatusType_Names::StoreState_Name, false);
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, DMPI_StoreStatusType_Names::CapabilityID_Name);
  }
  if (accessor.hasReason()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getReason(), node, DMPI_StoreStatusType_Names::Reason_Name);
  }
  if (accessor.hasTimeOfImpact()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeOfImpact(), node, DMPI_StoreStatusType_Names::TimeOfImpact_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_StoreStatusType>().release());
}

uci::type::DMPI_StoreStatusType& DMPI_StoreStatusType::create(const uci::type::DMPI_StoreStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_StoreStatusType> newAccessor{boost::make_unique<asb_uci::type::DMPI_StoreStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_StoreStatusType::destroy(uci::type::DMPI_StoreStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_StoreStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

