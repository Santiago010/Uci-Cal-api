/** @file EntityPositionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityPositionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FixedPositionType.h"
#include "asb_uci/type/RelativePositionType.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityPositionType.h"
#include "uci/type/FixedPositionType.h"
#include "uci/type/RelativePositionType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityPositionType::EntityPositionType() = default;

EntityPositionType::~EntityPositionType() = default;

void EntityPositionType::copy(const uci::type::EntityPositionType& accessor) {
  copyImpl(accessor, false);
}

void EntityPositionType::copyImpl(const uci::type::EntityPositionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityPositionType&>(accessor);
    if (accessorImpl.fixedPositionType_Accessor) {
      setFixedPositionType(*(accessorImpl.fixedPositionType_Accessor));
    } else {
      fixedPositionType_Accessor.reset();
    }
    if (accessorImpl.relativePosition_Accessor) {
      setRelativePosition(*(accessorImpl.relativePosition_Accessor));
    } else {
      relativePosition_Accessor.reset();
    }
    if (accessorImpl.zone_Accessor) {
      setZone(*(accessorImpl.zone_Accessor));
    } else {
      zone_Accessor.reset();
    }
  }
}

void EntityPositionType::reset() noexcept {
  fixedPositionType_Accessor.reset();
  relativePosition_Accessor.reset();
  zone_Accessor.reset();
}

uci::type::FixedPositionType& EntityPositionType::getFixedPositionType_() const {
  if (fixedPositionType_Accessor) {
    return *fixedPositionType_Accessor;
  }
  throw uci::base::UCIException("Error in getFixedPositionType(): An attempt was made to get an optional field that was not enabled, call hasFixedPositionType() to determine if it is safe to call getFixedPositionType()");
}

const uci::type::FixedPositionType& EntityPositionType::getFixedPositionType() const {
  return getFixedPositionType_();
}

uci::type::FixedPositionType& EntityPositionType::getFixedPositionType() {
  return getFixedPositionType_();
}

uci::type::EntityPositionType& EntityPositionType::setFixedPositionType(const uci::type::FixedPositionType& accessor) {
  enableFixedPositionType(accessor.getAccessorType());
  if (&accessor != fixedPositionType_Accessor.get()) {
    fixedPositionType_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityPositionType::hasFixedPositionType() const noexcept {
  return static_cast<bool>(fixedPositionType_Accessor);
}

uci::type::FixedPositionType& EntityPositionType::enableFixedPositionType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fixedPositionType : type};
  if ((!fixedPositionType_Accessor) || (fixedPositionType_Accessor->getAccessorType() != requestedType)) {
    fixedPositionType_Accessor = FixedPositionType::create(requestedType);
    if (!fixedPositionType_Accessor) {
      throw uci::base::UCIException("Error in enableFixedPositionType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fixedPositionType_Accessor;
}

uci::type::EntityPositionType& EntityPositionType::clearFixedPositionType() noexcept {
  fixedPositionType_Accessor.reset();
  return *this;
}

uci::type::RelativePositionType& EntityPositionType::getRelativePosition_() const {
  if (relativePosition_Accessor) {
    return *relativePosition_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativePosition(): An attempt was made to get an optional field that was not enabled, call hasRelativePosition() to determine if it is safe to call getRelativePosition()");
}

const uci::type::RelativePositionType& EntityPositionType::getRelativePosition() const {
  return getRelativePosition_();
}

uci::type::RelativePositionType& EntityPositionType::getRelativePosition() {
  return getRelativePosition_();
}

uci::type::EntityPositionType& EntityPositionType::setRelativePosition(const uci::type::RelativePositionType& accessor) {
  enableRelativePosition();
  if (&accessor != relativePosition_Accessor.get()) {
    relativePosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityPositionType::hasRelativePosition() const noexcept {
  return static_cast<bool>(relativePosition_Accessor);
}

uci::type::RelativePositionType& EntityPositionType::enableRelativePosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativePositionType : type};
  if ((!relativePosition_Accessor) || (relativePosition_Accessor->getAccessorType() != requestedType)) {
    relativePosition_Accessor = RelativePositionType::create(requestedType);
    if (!relativePosition_Accessor) {
      throw uci::base::UCIException("Error in enableRelativePosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativePosition_Accessor;
}

uci::type::EntityPositionType& EntityPositionType::clearRelativePosition() noexcept {
  relativePosition_Accessor.reset();
  return *this;
}

uci::type::ZoneType& EntityPositionType::getZone_() const {
  if (zone_Accessor) {
    return *zone_Accessor;
  }
  throw uci::base::UCIException("Error in getZone(): An attempt was made to get an optional field that was not enabled, call hasZone() to determine if it is safe to call getZone()");
}

const uci::type::ZoneType& EntityPositionType::getZone() const {
  return getZone_();
}

uci::type::ZoneType& EntityPositionType::getZone() {
  return getZone_();
}

uci::type::EntityPositionType& EntityPositionType::setZone(const uci::type::ZoneType& accessor) {
  enableZone(accessor.getAccessorType());
  if (&accessor != zone_Accessor.get()) {
    zone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityPositionType::hasZone() const noexcept {
  return static_cast<bool>(zone_Accessor);
}

uci::type::ZoneType& EntityPositionType::enableZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!zone_Accessor) || (zone_Accessor->getAccessorType() != requestedType)) {
    zone_Accessor = ZoneType::create(requestedType);
    if (!zone_Accessor) {
      throw uci::base::UCIException("Error in enableZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *zone_Accessor;
}

uci::type::EntityPositionType& EntityPositionType::clearZone() noexcept {
  zone_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityPositionType> EntityPositionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityPositionType : type};
  return (requestedType == uci::type::accessorType::entityPositionType) ? boost::make_unique<EntityPositionType>() : nullptr;
}

/**  */
namespace EntityPositionType_Names {

constexpr const char* Extern_Type_Name{"EntityPositionType"};
constexpr const char* FixedPositionType_Name{"FixedPositionType"};
constexpr const char* RelativePosition_Name{"RelativePosition"};
constexpr const char* Zone_Name{"Zone"};

} // namespace EntityPositionType_Names

void EntityPositionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityPositionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityPositionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityPositionType_Names::FixedPositionType_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableFixedPositionType(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityPositionType_Names::RelativePosition_Name) {
      RelativePositionType::deserialize(valueType.second, accessor.enableRelativePosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityPositionType_Names::Zone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string EntityPositionType::serialize(const uci::type::EntityPositionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityPositionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityPositionType_Names::Extern_Type_Name);
  }
  if (accessor.hasFixedPositionType()) {
    FixedPositionType::serialize(accessor.getFixedPositionType(), node, EntityPositionType_Names::FixedPositionType_Name);
  }
  if (accessor.hasRelativePosition()) {
    RelativePositionType::serialize(accessor.getRelativePosition(), node, EntityPositionType_Names::RelativePosition_Name);
  }
  if (accessor.hasZone()) {
    ZoneType::serialize(accessor.getZone(), node, EntityPositionType_Names::Zone_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityPositionType& EntityPositionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityPositionType>().release());
}

uci::type::EntityPositionType& EntityPositionType::create(const uci::type::EntityPositionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityPositionType> newAccessor{boost::make_unique<asb_uci::type::EntityPositionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityPositionType::destroy(uci::type::EntityPositionType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityPositionType*>(&accessor);
}

} // namespace type

} // namespace uci

