/** @file COMINT_SubcapabilityAcquisitionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/COMINT_SubcapabilityAcquisitionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/COMINT_AcquisitionTargetType.h"
#include "asb_uci/type/COMINT_SubcapabilityTargetLocationDataType.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/COMINT_AcquisitionTargetType.h"
#include "uci/type/COMINT_SubcapabilityAcquisitionType.h"
#include "uci/type/COMINT_SubcapabilityTargetLocationDataType.h"
#include "uci/type/FrequencyRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_SubcapabilityAcquisitionType::COMINT_SubcapabilityAcquisitionType()
  : frequencyRestriction_Accessor{boost::make_unique<FrequencyRestriction>(0, SIZE_MAX)} {
}

COMINT_SubcapabilityAcquisitionType::~COMINT_SubcapabilityAcquisitionType() = default;

void COMINT_SubcapabilityAcquisitionType::copy(const uci::type::COMINT_SubcapabilityAcquisitionType& accessor) {
  copyImpl(accessor, false);
}

void COMINT_SubcapabilityAcquisitionType::copyImpl(const uci::type::COMINT_SubcapabilityAcquisitionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const COMINT_SubcapabilityAcquisitionType&>(accessor);
    if (accessorImpl.targetEmitterData_Accessor) {
      setTargetEmitterData(*(accessorImpl.targetEmitterData_Accessor));
    } else {
      targetEmitterData_Accessor.reset();
    }
    if (accessorImpl.targetLocationData_Accessor) {
      setTargetLocationData(*(accessorImpl.targetLocationData_Accessor));
    } else {
      targetLocationData_Accessor.reset();
    }
    setFrequencyRestriction(*(accessorImpl.frequencyRestriction_Accessor));
  }
}

void COMINT_SubcapabilityAcquisitionType::reset() noexcept {
  targetEmitterData_Accessor.reset();
  targetLocationData_Accessor.reset();
  frequencyRestriction_Accessor->reset();
}

uci::type::COMINT_AcquisitionTargetType& COMINT_SubcapabilityAcquisitionType::getTargetEmitterData_() const {
  if (targetEmitterData_Accessor) {
    return *targetEmitterData_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetEmitterData(): An attempt was made to get an optional field that was not enabled, call hasTargetEmitterData() to determine if it is safe to call getTargetEmitterData()");
}

const uci::type::COMINT_AcquisitionTargetType& COMINT_SubcapabilityAcquisitionType::getTargetEmitterData() const {
  return getTargetEmitterData_();
}

uci::type::COMINT_AcquisitionTargetType& COMINT_SubcapabilityAcquisitionType::getTargetEmitterData() {
  return getTargetEmitterData_();
}

uci::type::COMINT_SubcapabilityAcquisitionType& COMINT_SubcapabilityAcquisitionType::setTargetEmitterData(const uci::type::COMINT_AcquisitionTargetType& accessor) {
  enableTargetEmitterData();
  if (&accessor != targetEmitterData_Accessor.get()) {
    targetEmitterData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_SubcapabilityAcquisitionType::hasTargetEmitterData() const noexcept {
  return static_cast<bool>(targetEmitterData_Accessor);
}

uci::type::COMINT_AcquisitionTargetType& COMINT_SubcapabilityAcquisitionType::enableTargetEmitterData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_AcquisitionTargetType : type};
  if ((!targetEmitterData_Accessor) || (targetEmitterData_Accessor->getAccessorType() != requestedType)) {
    targetEmitterData_Accessor = COMINT_AcquisitionTargetType::create(requestedType);
    if (!targetEmitterData_Accessor) {
      throw uci::base::UCIException("Error in enableTargetEmitterData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetEmitterData_Accessor;
}

uci::type::COMINT_SubcapabilityAcquisitionType& COMINT_SubcapabilityAcquisitionType::clearTargetEmitterData() noexcept {
  targetEmitterData_Accessor.reset();
  return *this;
}

uci::type::COMINT_SubcapabilityTargetLocationDataType& COMINT_SubcapabilityAcquisitionType::getTargetLocationData_() const {
  if (targetLocationData_Accessor) {
    return *targetLocationData_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetLocationData(): An attempt was made to get an optional field that was not enabled, call hasTargetLocationData() to determine if it is safe to call getTargetLocationData()");
}

const uci::type::COMINT_SubcapabilityTargetLocationDataType& COMINT_SubcapabilityAcquisitionType::getTargetLocationData() const {
  return getTargetLocationData_();
}

uci::type::COMINT_SubcapabilityTargetLocationDataType& COMINT_SubcapabilityAcquisitionType::getTargetLocationData() {
  return getTargetLocationData_();
}

uci::type::COMINT_SubcapabilityAcquisitionType& COMINT_SubcapabilityAcquisitionType::setTargetLocationData(const uci::type::COMINT_SubcapabilityTargetLocationDataType& accessor) {
  enableTargetLocationData();
  if (&accessor != targetLocationData_Accessor.get()) {
    targetLocationData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_SubcapabilityAcquisitionType::hasTargetLocationData() const noexcept {
  return static_cast<bool>(targetLocationData_Accessor);
}

uci::type::COMINT_SubcapabilityTargetLocationDataType& COMINT_SubcapabilityAcquisitionType::enableTargetLocationData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_SubcapabilityTargetLocationDataType : type};
  if ((!targetLocationData_Accessor) || (targetLocationData_Accessor->getAccessorType() != requestedType)) {
    targetLocationData_Accessor = COMINT_SubcapabilityTargetLocationDataType::create(requestedType);
    if (!targetLocationData_Accessor) {
      throw uci::base::UCIException("Error in enableTargetLocationData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetLocationData_Accessor;
}

uci::type::COMINT_SubcapabilityAcquisitionType& COMINT_SubcapabilityAcquisitionType::clearTargetLocationData() noexcept {
  targetLocationData_Accessor.reset();
  return *this;
}

const uci::type::COMINT_SubcapabilityAcquisitionType::FrequencyRestriction& COMINT_SubcapabilityAcquisitionType::getFrequencyRestriction() const {
  return *frequencyRestriction_Accessor;
}

uci::type::COMINT_SubcapabilityAcquisitionType::FrequencyRestriction& COMINT_SubcapabilityAcquisitionType::getFrequencyRestriction() {
  return *frequencyRestriction_Accessor;
}

uci::type::COMINT_SubcapabilityAcquisitionType& COMINT_SubcapabilityAcquisitionType::setFrequencyRestriction(const uci::type::COMINT_SubcapabilityAcquisitionType::FrequencyRestriction& accessor) {
  if (&accessor != frequencyRestriction_Accessor.get()) {
    frequencyRestriction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<COMINT_SubcapabilityAcquisitionType> COMINT_SubcapabilityAcquisitionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_SubcapabilityAcquisitionType : type};
  return (requestedType == uci::type::accessorType::cOMINT_SubcapabilityAcquisitionType) ? boost::make_unique<COMINT_SubcapabilityAcquisitionType>() : nullptr;
}

/**  */
namespace COMINT_SubcapabilityAcquisitionType_Names {

constexpr const char* Extern_Type_Name{"COMINT_SubcapabilityAcquisitionType"};
constexpr const char* TargetEmitterData_Name{"TargetEmitterData"};
constexpr const char* TargetLocationData_Name{"TargetLocationData"};
constexpr const char* FrequencyRestriction_Name{"FrequencyRestriction"};

} // namespace COMINT_SubcapabilityAcquisitionType_Names

void COMINT_SubcapabilityAcquisitionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_SubcapabilityAcquisitionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_SubcapabilityAcquisitionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_SubcapabilityAcquisitionType_Names::TargetEmitterData_Name) {
      COMINT_AcquisitionTargetType::deserialize(valueType.second, accessor.enableTargetEmitterData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubcapabilityAcquisitionType_Names::TargetLocationData_Name) {
      COMINT_SubcapabilityTargetLocationDataType::deserialize(valueType.second, accessor.enableTargetLocationData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubcapabilityAcquisitionType_Names::FrequencyRestriction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_SubcapabilityAcquisitionType::FrequencyRestriction& boundedList = accessor.getFrequencyRestriction();
        const uci::type::COMINT_SubcapabilityAcquisitionType::FrequencyRestriction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string COMINT_SubcapabilityAcquisitionType::serialize(const uci::type::COMINT_SubcapabilityAcquisitionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_SubcapabilityAcquisitionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_SubcapabilityAcquisitionType_Names::Extern_Type_Name);
  }
  if (accessor.hasTargetEmitterData()) {
    COMINT_AcquisitionTargetType::serialize(accessor.getTargetEmitterData(), node, COMINT_SubcapabilityAcquisitionType_Names::TargetEmitterData_Name);
  }
  if (accessor.hasTargetLocationData()) {
    COMINT_SubcapabilityTargetLocationDataType::serialize(accessor.getTargetLocationData(), node, COMINT_SubcapabilityAcquisitionType_Names::TargetLocationData_Name);
  }
  {
    const uci::type::COMINT_SubcapabilityAcquisitionType::FrequencyRestriction& boundedList = accessor.getFrequencyRestriction();
    for (uci::type::COMINT_SubcapabilityAcquisitionType::FrequencyRestriction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, COMINT_SubcapabilityAcquisitionType_Names::FrequencyRestriction_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_SubcapabilityAcquisitionType& COMINT_SubcapabilityAcquisitionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_SubcapabilityAcquisitionType>().release());
}

uci::type::COMINT_SubcapabilityAcquisitionType& COMINT_SubcapabilityAcquisitionType::create(const uci::type::COMINT_SubcapabilityAcquisitionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_SubcapabilityAcquisitionType> newAccessor{boost::make_unique<asb_uci::type::COMINT_SubcapabilityAcquisitionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_SubcapabilityAcquisitionType::destroy(uci::type::COMINT_SubcapabilityAcquisitionType& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_SubcapabilityAcquisitionType*>(&accessor);
}

} // namespace type

} // namespace uci

