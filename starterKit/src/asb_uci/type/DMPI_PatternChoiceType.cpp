/** @file DMPI_PatternChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DMPI_PatternChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DMPI_ID_Type.h"
#include "../../../include/asb_uci/type/DMPI_RadialPatternType.h"
#include "../../../include/asb_uci/type/DMPI_XbyY_PatternType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_PatternChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_RadialPatternType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_XbyY_PatternType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_PatternChoiceType::DMPI_PatternChoiceType() = default;

DMPI_PatternChoiceType::~DMPI_PatternChoiceType() = default;

void DMPI_PatternChoiceType::copy(const uci::type::DMPI_PatternChoiceType& accessor) {
  copyImpl(accessor, false);
}

void DMPI_PatternChoiceType::copyImpl(const uci::type::DMPI_PatternChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DMPI_PatternChoiceType&>(accessor);
    if (accessorImpl.xbyY_Pattern_Accessor) {
      setXbyY_Pattern(*(accessorImpl.xbyY_Pattern_Accessor));
    } else {
      xbyY_Pattern_Accessor.reset();
    }
    if (accessorImpl.radialPattern_Accessor) {
      setRadialPattern(*(accessorImpl.radialPattern_Accessor));
    } else {
      radialPattern_Accessor.reset();
    }
    if (accessorImpl.freePatternDMPI_ID_Accessor) {
      setFreePatternDMPI_ID(*(accessorImpl.freePatternDMPI_ID_Accessor));
    } else {
      freePatternDMPI_ID_Accessor.reset();
    }
  }
}

void DMPI_PatternChoiceType::reset() noexcept {
  xbyY_Pattern_Accessor.reset();
  radialPattern_Accessor.reset();
  freePatternDMPI_ID_Accessor.reset();
}

uci::type::DMPI_PatternChoiceType::DMPI_PatternChoiceTypeChoice DMPI_PatternChoiceType::getDMPI_PatternChoiceTypeChoiceOrdinal() const noexcept {
  if (xbyY_Pattern_Accessor) {
    return DMPI_PATTERNCHOICETYPE_CHOICE_XBYY_PATTERN;
  }
  if (radialPattern_Accessor) {
    return DMPI_PATTERNCHOICETYPE_CHOICE_RADIALPATTERN;
  }
  if (freePatternDMPI_ID_Accessor) {
    return DMPI_PATTERNCHOICETYPE_CHOICE_FREEPATTERNDMPI_ID;
  }
  return DMPI_PATTERNCHOICETYPE_CHOICE_NONE;
}

uci::type::DMPI_PatternChoiceType& DMPI_PatternChoiceType::setDMPI_PatternChoiceTypeChoiceOrdinal(uci::type::DMPI_PatternChoiceType::DMPI_PatternChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DMPI_PATTERNCHOICETYPE_CHOICE_XBYY_PATTERN:
      chooseXbyY_Pattern("setDMPI_PatternChoiceTypeChoiceOrdinal", type);
      break;
    case DMPI_PATTERNCHOICETYPE_CHOICE_RADIALPATTERN:
      chooseRadialPattern("setDMPI_PatternChoiceTypeChoiceOrdinal", type);
      break;
    case DMPI_PATTERNCHOICETYPE_CHOICE_FREEPATTERNDMPI_ID:
      chooseFreePatternDMPI_ID();
      break;
    default:
      throw uci::base::UCIException("Error in setDMPI_PatternChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DMPI_XbyY_PatternType& DMPI_PatternChoiceType::getXbyY_Pattern_() const {
  if (xbyY_Pattern_Accessor) {
    return *xbyY_Pattern_Accessor;
  }
  throw uci::base::UCIException("Error in getXbyY_Pattern(): Unable to get XbyY_Pattern, field not selected");
}

const uci::type::DMPI_XbyY_PatternType& DMPI_PatternChoiceType::getXbyY_Pattern() const {
  return getXbyY_Pattern_();
}

uci::type::DMPI_XbyY_PatternType& DMPI_PatternChoiceType::getXbyY_Pattern() {
  return getXbyY_Pattern_();
}

uci::type::DMPI_PatternChoiceType& DMPI_PatternChoiceType::setXbyY_Pattern(const uci::type::DMPI_XbyY_PatternType& accessor) {
  chooseXbyY_Pattern();
  if (&accessor != xbyY_Pattern_Accessor.get()) {
    xbyY_Pattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_PatternChoiceType::isXbyY_Pattern() const noexcept {
  return static_cast<bool>(xbyY_Pattern_Accessor);
}

uci::type::DMPI_XbyY_PatternType& DMPI_PatternChoiceType::chooseXbyY_Pattern(const std::string& method, uci::base::accessorType::AccessorType type) {
  radialPattern_Accessor.reset();
  freePatternDMPI_ID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_XbyY_PatternType : type};
  if ((!xbyY_Pattern_Accessor) || (xbyY_Pattern_Accessor->getAccessorType() != requestedType)) {
    xbyY_Pattern_Accessor = DMPI_XbyY_PatternType::create(type);
    if (!xbyY_Pattern_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *xbyY_Pattern_Accessor;
}

uci::type::DMPI_XbyY_PatternType& DMPI_PatternChoiceType::chooseXbyY_Pattern(uci::base::accessorType::AccessorType type) {
  return chooseXbyY_Pattern("chooseXbyY_Pattern", type);
}

uci::type::DMPI_RadialPatternType& DMPI_PatternChoiceType::getRadialPattern_() const {
  if (radialPattern_Accessor) {
    return *radialPattern_Accessor;
  }
  throw uci::base::UCIException("Error in getRadialPattern(): Unable to get RadialPattern, field not selected");
}

const uci::type::DMPI_RadialPatternType& DMPI_PatternChoiceType::getRadialPattern() const {
  return getRadialPattern_();
}

uci::type::DMPI_RadialPatternType& DMPI_PatternChoiceType::getRadialPattern() {
  return getRadialPattern_();
}

uci::type::DMPI_PatternChoiceType& DMPI_PatternChoiceType::setRadialPattern(const uci::type::DMPI_RadialPatternType& accessor) {
  chooseRadialPattern();
  if (&accessor != radialPattern_Accessor.get()) {
    radialPattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_PatternChoiceType::isRadialPattern() const noexcept {
  return static_cast<bool>(radialPattern_Accessor);
}

uci::type::DMPI_RadialPatternType& DMPI_PatternChoiceType::chooseRadialPattern(const std::string& method, uci::base::accessorType::AccessorType type) {
  xbyY_Pattern_Accessor.reset();
  freePatternDMPI_ID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_RadialPatternType : type};
  if ((!radialPattern_Accessor) || (radialPattern_Accessor->getAccessorType() != requestedType)) {
    radialPattern_Accessor = DMPI_RadialPatternType::create(type);
    if (!radialPattern_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *radialPattern_Accessor;
}

uci::type::DMPI_RadialPatternType& DMPI_PatternChoiceType::chooseRadialPattern(uci::base::accessorType::AccessorType type) {
  return chooseRadialPattern("chooseRadialPattern", type);
}

uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID& DMPI_PatternChoiceType::getFreePatternDMPI_ID_() const {
  if (freePatternDMPI_ID_Accessor) {
    return *freePatternDMPI_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getFreePatternDMPI_ID(): Unable to get FreePatternDMPI_ID, field not selected");
}

const uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID& DMPI_PatternChoiceType::getFreePatternDMPI_ID() const {
  return getFreePatternDMPI_ID_();
}

uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID& DMPI_PatternChoiceType::getFreePatternDMPI_ID() {
  return getFreePatternDMPI_ID_();
}

uci::type::DMPI_PatternChoiceType& DMPI_PatternChoiceType::setFreePatternDMPI_ID(const uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID& accessor) {
  chooseFreePatternDMPI_ID();
  if (&accessor != freePatternDMPI_ID_Accessor.get()) {
    freePatternDMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_PatternChoiceType::isFreePatternDMPI_ID() const noexcept {
  return static_cast<bool>(freePatternDMPI_ID_Accessor);
}

uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID& DMPI_PatternChoiceType::chooseFreePatternDMPI_ID() {
  xbyY_Pattern_Accessor.reset();
  radialPattern_Accessor.reset();
  if (!freePatternDMPI_ID_Accessor) {
    freePatternDMPI_ID_Accessor = boost::make_unique<FreePatternDMPI_ID>(1, SIZE_MAX);
  }
  return *freePatternDMPI_ID_Accessor;
}

std::unique_ptr<DMPI_PatternChoiceType> DMPI_PatternChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_PatternChoiceType : type};
  return (requestedType == uci::type::accessorType::dMPI_PatternChoiceType) ? boost::make_unique<DMPI_PatternChoiceType>() : nullptr;
}

/**  */
namespace DMPI_PatternChoiceType_Names {

constexpr const char* Extern_Type_Name{"DMPI_PatternChoiceType"};
constexpr const char* XbyY_Pattern_Name{"XbyY_Pattern"};
constexpr const char* RadialPattern_Name{"RadialPattern"};
constexpr const char* FreePatternDMPI_ID_Name{"FreePatternDMPI_ID"};

} // namespace DMPI_PatternChoiceType_Names

void DMPI_PatternChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_PatternChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_PatternChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_PatternChoiceType_Names::XbyY_Pattern_Name) {
      DMPI_XbyY_PatternType::deserialize(valueType.second, accessor.chooseXbyY_Pattern(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_PatternChoiceType_Names::RadialPattern_Name) {
      DMPI_RadialPatternType::deserialize(valueType.second, accessor.chooseRadialPattern(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_PatternChoiceType_Names::FreePatternDMPI_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID& boundedList = accessor.chooseFreePatternDMPI_ID();
        const uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string DMPI_PatternChoiceType::serialize(const uci::type::DMPI_PatternChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_PatternChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_PatternChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isXbyY_Pattern()) {
    DMPI_XbyY_PatternType::serialize(accessor.getXbyY_Pattern(), node, DMPI_PatternChoiceType_Names::XbyY_Pattern_Name);
  } else if (accessor.isRadialPattern()) {
    DMPI_RadialPatternType::serialize(accessor.getRadialPattern(), node, DMPI_PatternChoiceType_Names::RadialPattern_Name);
  } else if (accessor.isFreePatternDMPI_ID()) {
    {
      const uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID& boundedList = accessor.getFreePatternDMPI_ID();
      for (uci::type::DMPI_PatternChoiceType::FreePatternDMPI_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::DMPI_ID_Type::serialize(boundedList.at(i), node, DMPI_PatternChoiceType_Names::FreePatternDMPI_ID_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_PatternChoiceType& DMPI_PatternChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_PatternChoiceType>().release());
}

uci::type::DMPI_PatternChoiceType& DMPI_PatternChoiceType::create(const uci::type::DMPI_PatternChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_PatternChoiceType> newAccessor{boost::make_unique<asb_uci::type::DMPI_PatternChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_PatternChoiceType::destroy(uci::type::DMPI_PatternChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_PatternChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

