/** @file SolarWindRecordType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SolarWindRecordType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/ParticleDensityType.h"
#include "uci/type/SolarWindRecordType.h"
#include "uci/type/SpeedType.h"
#include "uci/type/TemperatureType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SolarWindRecordType::SolarWindRecordType() = default;

SolarWindRecordType::~SolarWindRecordType() = default;

void SolarWindRecordType::copy(const uci::type::SolarWindRecordType& accessor) {
  copyImpl(accessor, false);
}

void SolarWindRecordType::copyImpl(const uci::type::SolarWindRecordType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SolarWindRecordType&>(accessor);
    setObservationTime(accessorImpl.observationTime_Accessor);
    if (accessorImpl.hasProtonDensity()) {
      setProtonDensity(accessorImpl.getProtonDensity());
    } else {
      clearProtonDensity();
    }
    if (accessorImpl.hasProtonTemperature()) {
      setProtonTemperature(accessorImpl.getProtonTemperature());
    } else {
      clearProtonTemperature();
    }
    if (accessorImpl.hasSolarWindSpeed()) {
      setSolarWindSpeed(accessorImpl.getSolarWindSpeed());
    } else {
      clearSolarWindSpeed();
    }
    if (accessorImpl.hasStatus()) {
      setStatus(accessorImpl.getStatus());
    } else {
      clearStatus();
    }
  }
}

void SolarWindRecordType::reset() noexcept {
  observationTime_Accessor = 0;
  clearProtonDensity();
  clearProtonTemperature();
  clearSolarWindSpeed();
  clearStatus();
}

uci::type::DateTimeTypeValue SolarWindRecordType::getObservationTime() const {
  return observationTime_Accessor;
}

uci::type::SolarWindRecordType& SolarWindRecordType::setObservationTime(uci::type::DateTimeTypeValue value) {
  observationTime_Accessor = value;
  return *this;
}


uci::type::ParticleDensityTypeValue SolarWindRecordType::getProtonDensity() const {
  if (protonDensity_Accessor) {
    return *protonDensity_Accessor;
  }
  throw uci::base::UCIException("Error in getProtonDensity(): An attempt was made to get an optional field that was not enabled, call hasProtonDensity() to determine if it is safe to call getProtonDensity()");
}

uci::type::SolarWindRecordType& SolarWindRecordType::setProtonDensity(uci::type::ParticleDensityTypeValue value) {
  protonDensity_Accessor = value;
  return *this;
}

bool SolarWindRecordType::hasProtonDensity() const noexcept {
  return protonDensity_Accessor.has_value();
}

uci::type::SolarWindRecordType& SolarWindRecordType::clearProtonDensity() noexcept {
  protonDensity_Accessor.reset();
  return *this;
}

uci::type::TemperatureTypeValue SolarWindRecordType::getProtonTemperature() const {
  if (protonTemperature_Accessor) {
    return *protonTemperature_Accessor;
  }
  throw uci::base::UCIException("Error in getProtonTemperature(): An attempt was made to get an optional field that was not enabled, call hasProtonTemperature() to determine if it is safe to call getProtonTemperature()");
}

uci::type::SolarWindRecordType& SolarWindRecordType::setProtonTemperature(uci::type::TemperatureTypeValue value) {
  protonTemperature_Accessor = value;
  return *this;
}

bool SolarWindRecordType::hasProtonTemperature() const noexcept {
  return protonTemperature_Accessor.has_value();
}

uci::type::SolarWindRecordType& SolarWindRecordType::clearProtonTemperature() noexcept {
  protonTemperature_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue SolarWindRecordType::getSolarWindSpeed() const {
  if (solarWindSpeed_Accessor) {
    return *solarWindSpeed_Accessor;
  }
  throw uci::base::UCIException("Error in getSolarWindSpeed(): An attempt was made to get an optional field that was not enabled, call hasSolarWindSpeed() to determine if it is safe to call getSolarWindSpeed()");
}

uci::type::SolarWindRecordType& SolarWindRecordType::setSolarWindSpeed(uci::type::SpeedTypeValue value) {
  solarWindSpeed_Accessor = value;
  return *this;
}

bool SolarWindRecordType::hasSolarWindSpeed() const noexcept {
  return solarWindSpeed_Accessor.has_value();
}

uci::type::SolarWindRecordType& SolarWindRecordType::clearSolarWindSpeed() noexcept {
  solarWindSpeed_Accessor.reset();
  return *this;
}

xs::UnsignedByte SolarWindRecordType::getStatus() const {
  if (status_Accessor) {
    return *status_Accessor;
  }
  throw uci::base::UCIException("Error in getStatus(): An attempt was made to get an optional field that was not enabled, call hasStatus() to determine if it is safe to call getStatus()");
}

uci::type::SolarWindRecordType& SolarWindRecordType::setStatus(xs::UnsignedByte value) {
  status_Accessor = value;
  return *this;
}

bool SolarWindRecordType::hasStatus() const noexcept {
  return status_Accessor.has_value();
}

uci::type::SolarWindRecordType& SolarWindRecordType::clearStatus() noexcept {
  status_Accessor.reset();
  return *this;
}

std::unique_ptr<SolarWindRecordType> SolarWindRecordType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::solarWindRecordType : type};
  return (requestedType == uci::type::accessorType::solarWindRecordType) ? boost::make_unique<SolarWindRecordType>() : nullptr;
}

/**  */
namespace SolarWindRecordType_Names {

constexpr const char* Extern_Type_Name{"SolarWindRecordType"};
constexpr const char* ObservationTime_Name{"ObservationTime"};
constexpr const char* ProtonDensity_Name{"ProtonDensity"};
constexpr const char* ProtonTemperature_Name{"ProtonTemperature"};
constexpr const char* SolarWindSpeed_Name{"SolarWindSpeed"};
constexpr const char* Status_Name{"Status"};

} // namespace SolarWindRecordType_Names

void SolarWindRecordType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SolarWindRecordType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SolarWindRecordType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SolarWindRecordType_Names::ObservationTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setObservationTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SolarWindRecordType_Names::ProtonDensity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProtonDensity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SolarWindRecordType_Names::ProtonTemperature_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProtonTemperature(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SolarWindRecordType_Names::SolarWindSpeed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSolarWindSpeed(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SolarWindRecordType_Names::Status_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStatus(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    }
  }
}

std::string SolarWindRecordType::serialize(const uci::type::SolarWindRecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SolarWindRecordType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SolarWindRecordType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getObservationTime(), node, SolarWindRecordType_Names::ObservationTime_Name);
  if (accessor.hasProtonDensity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProtonDensity(), node, SolarWindRecordType_Names::ProtonDensity_Name);
  }
  if (accessor.hasProtonTemperature()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProtonTemperature(), node, SolarWindRecordType_Names::ProtonTemperature_Name);
  }
  if (accessor.hasSolarWindSpeed()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSolarWindSpeed(), node, SolarWindRecordType_Names::SolarWindSpeed_Name);
  }
  if (accessor.hasStatus()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getStatus(), node, SolarWindRecordType_Names::Status_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SolarWindRecordType& SolarWindRecordType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SolarWindRecordType>().release());
}

uci::type::SolarWindRecordType& SolarWindRecordType::create(const uci::type::SolarWindRecordType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SolarWindRecordType> newAccessor{boost::make_unique<asb_uci::type::SolarWindRecordType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SolarWindRecordType::destroy(uci::type::SolarWindRecordType& accessor) {
  delete dynamic_cast<asb_uci::type::SolarWindRecordType*>(&accessor);
}

} // namespace type

} // namespace uci

