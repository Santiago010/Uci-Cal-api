/** @file ECEF_VelocityVelocityCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ECEF_VelocityVelocityCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ECEF_VelocityVelocityCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_VelocityVelocityCovarianceType::ECEF_VelocityVelocityCovarianceType() = default;

ECEF_VelocityVelocityCovarianceType::~ECEF_VelocityVelocityCovarianceType() = default;

void ECEF_VelocityVelocityCovarianceType::copy(const uci::type::ECEF_VelocityVelocityCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_VelocityVelocityCovarianceType::copyImpl(const uci::type::ECEF_VelocityVelocityCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_VelocityVelocityCovarianceType&>(accessor);
    setVxVx(accessorImpl.vxVx_Accessor);
    setVxVy(accessorImpl.vxVy_Accessor);
    setVxVz(accessorImpl.vxVz_Accessor);
    setVyVy(accessorImpl.vyVy_Accessor);
    setVyVz(accessorImpl.vyVz_Accessor);
    setVzVz(accessorImpl.vzVz_Accessor);
  }
}

void ECEF_VelocityVelocityCovarianceType::reset() noexcept {
  vxVx_Accessor = 0.0;
  vxVy_Accessor = 0.0;
  vxVz_Accessor = 0.0;
  vyVy_Accessor = 0.0;
  vyVz_Accessor = 0.0;
  vzVz_Accessor = 0.0;
}

xs::Double ECEF_VelocityVelocityCovarianceType::getVxVx() const {
  return vxVx_Accessor;
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::setVxVx(xs::Double value) {
  vxVx_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityVelocityCovarianceType::getVxVy() const {
  return vxVy_Accessor;
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::setVxVy(xs::Double value) {
  vxVy_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityVelocityCovarianceType::getVxVz() const {
  return vxVz_Accessor;
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::setVxVz(xs::Double value) {
  vxVz_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityVelocityCovarianceType::getVyVy() const {
  return vyVy_Accessor;
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::setVyVy(xs::Double value) {
  vyVy_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityVelocityCovarianceType::getVyVz() const {
  return vyVz_Accessor;
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::setVyVz(xs::Double value) {
  vyVz_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityVelocityCovarianceType::getVzVz() const {
  return vzVz_Accessor;
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::setVzVz(xs::Double value) {
  vzVz_Accessor = value;
  return *this;
}


std::unique_ptr<ECEF_VelocityVelocityCovarianceType> ECEF_VelocityVelocityCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_VelocityVelocityCovarianceType : type};
  return (requestedType == uci::type::accessorType::eCEF_VelocityVelocityCovarianceType) ? boost::make_unique<ECEF_VelocityVelocityCovarianceType>() : nullptr;
}

/**  */
namespace ECEF_VelocityVelocityCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_VelocityVelocityCovarianceType"};
constexpr const char* VxVx_Name{"VxVx"};
constexpr const char* VxVy_Name{"VxVy"};
constexpr const char* VxVz_Name{"VxVz"};
constexpr const char* VyVy_Name{"VyVy"};
constexpr const char* VyVz_Name{"VyVz"};
constexpr const char* VzVz_Name{"VzVz"};

} // namespace ECEF_VelocityVelocityCovarianceType_Names

void ECEF_VelocityVelocityCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_VelocityVelocityCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_VelocityVelocityCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_VelocityVelocityCovarianceType_Names::VxVx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxVx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityVelocityCovarianceType_Names::VxVy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxVy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityVelocityCovarianceType_Names::VxVz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxVz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityVelocityCovarianceType_Names::VyVy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyVy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityVelocityCovarianceType_Names::VyVz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyVz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityVelocityCovarianceType_Names::VzVz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVzVz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ECEF_VelocityVelocityCovarianceType::serialize(const uci::type::ECEF_VelocityVelocityCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_VelocityVelocityCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_VelocityVelocityCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxVx(), node, ECEF_VelocityVelocityCovarianceType_Names::VxVx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxVy(), node, ECEF_VelocityVelocityCovarianceType_Names::VxVy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxVz(), node, ECEF_VelocityVelocityCovarianceType_Names::VxVz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyVy(), node, ECEF_VelocityVelocityCovarianceType_Names::VyVy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyVz(), node, ECEF_VelocityVelocityCovarianceType_Names::VyVz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVzVz(), node, ECEF_VelocityVelocityCovarianceType_Names::VzVz_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_VelocityVelocityCovarianceType>().release());
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_VelocityVelocityCovarianceType::create(const uci::type::ECEF_VelocityVelocityCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_VelocityVelocityCovarianceType> newAccessor{boost::make_unique<asb_uci::type::ECEF_VelocityVelocityCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_VelocityVelocityCovarianceType::destroy(uci::type::ECEF_VelocityVelocityCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_VelocityVelocityCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

