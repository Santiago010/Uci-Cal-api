/** @file EphemerisOrbitalModelType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EphemerisOrbitalModelType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitalModelType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EphemerisOrbitalModelType.h"
#include "uci/type/OrbitalModelType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EphemerisOrbitalModelType::EphemerisOrbitalModelType() = default;

EphemerisOrbitalModelType::~EphemerisOrbitalModelType() = default;

void EphemerisOrbitalModelType::copy(const uci::type::EphemerisOrbitalModelType& accessor) {
  copyImpl(accessor, false);
}

void EphemerisOrbitalModelType::copyImpl(const uci::type::EphemerisOrbitalModelType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EphemerisOrbitalModelType&>(accessor);
    if (accessorImpl.orbitalModel_Accessor) {
      setOrbitalModel(*(accessorImpl.orbitalModel_Accessor));
    } else {
      orbitalModel_Accessor.reset();
    }
    if (accessorImpl.hasStepSize()) {
      setStepSize(accessorImpl.getStepSize());
    } else {
      clearStepSize();
    }
    if (accessorImpl.hasSolarRadiationPressureCoefficient()) {
      setSolarRadiationPressureCoefficient(accessorImpl.getSolarRadiationPressureCoefficient());
    } else {
      clearSolarRadiationPressureCoefficient();
    }
    if (accessorImpl.hasBallisticCoefficient()) {
      setBallisticCoefficient(accessorImpl.getBallisticCoefficient());
    } else {
      clearBallisticCoefficient();
    }
  }
}

void EphemerisOrbitalModelType::reset() noexcept {
  orbitalModel_Accessor.reset();
  clearStepSize();
  clearSolarRadiationPressureCoefficient();
  clearBallisticCoefficient();
}

uci::type::OrbitalModelType& EphemerisOrbitalModelType::getOrbitalModel_() const {
  if (orbitalModel_Accessor) {
    return *orbitalModel_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalModel(): An attempt was made to get an optional field that was not enabled, call hasOrbitalModel() to determine if it is safe to call getOrbitalModel()");
}

const uci::type::OrbitalModelType& EphemerisOrbitalModelType::getOrbitalModel() const {
  return getOrbitalModel_();
}

uci::type::OrbitalModelType& EphemerisOrbitalModelType::getOrbitalModel() {
  return getOrbitalModel_();
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::setOrbitalModel(const uci::type::OrbitalModelType& accessor) {
  enableOrbitalModel();
  if (&accessor != orbitalModel_Accessor.get()) {
    orbitalModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EphemerisOrbitalModelType::hasOrbitalModel() const noexcept {
  return static_cast<bool>(orbitalModel_Accessor);
}

uci::type::OrbitalModelType& EphemerisOrbitalModelType::enableOrbitalModel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalModelType : type};
  if ((!orbitalModel_Accessor) || (orbitalModel_Accessor->getAccessorType() != requestedType)) {
    orbitalModel_Accessor = OrbitalModelType::create(requestedType);
    if (!orbitalModel_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitalModel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalModel_Accessor;
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::clearOrbitalModel() noexcept {
  orbitalModel_Accessor.reset();
  return *this;
}

xs::Duration EphemerisOrbitalModelType::getStepSize() const {
  if (stepSize_Accessor) {
    return *stepSize_Accessor;
  }
  throw uci::base::UCIException("Error in getStepSize(): An attempt was made to get an optional field that was not enabled, call hasStepSize() to determine if it is safe to call getStepSize()");
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::setStepSize(xs::Duration value) {
  stepSize_Accessor = value;
  return *this;
}

bool EphemerisOrbitalModelType::hasStepSize() const noexcept {
  return stepSize_Accessor.has_value();
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::clearStepSize() noexcept {
  stepSize_Accessor.reset();
  return *this;
}

xs::Double EphemerisOrbitalModelType::getSolarRadiationPressureCoefficient() const {
  if (solarRadiationPressureCoefficient_Accessor) {
    return *solarRadiationPressureCoefficient_Accessor;
  }
  throw uci::base::UCIException("Error in getSolarRadiationPressureCoefficient(): An attempt was made to get an optional field that was not enabled, call hasSolarRadiationPressureCoefficient() to determine if it is safe to call getSolarRadiationPressureCoefficient()");
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::setSolarRadiationPressureCoefficient(xs::Double value) {
  solarRadiationPressureCoefficient_Accessor = value;
  return *this;
}

bool EphemerisOrbitalModelType::hasSolarRadiationPressureCoefficient() const noexcept {
  return solarRadiationPressureCoefficient_Accessor.has_value();
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::clearSolarRadiationPressureCoefficient() noexcept {
  solarRadiationPressureCoefficient_Accessor.reset();
  return *this;
}

xs::Double EphemerisOrbitalModelType::getBallisticCoefficient() const {
  if (ballisticCoefficient_Accessor) {
    return *ballisticCoefficient_Accessor;
  }
  throw uci::base::UCIException("Error in getBallisticCoefficient(): An attempt was made to get an optional field that was not enabled, call hasBallisticCoefficient() to determine if it is safe to call getBallisticCoefficient()");
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::setBallisticCoefficient(xs::Double value) {
  ballisticCoefficient_Accessor = value;
  return *this;
}

bool EphemerisOrbitalModelType::hasBallisticCoefficient() const noexcept {
  return ballisticCoefficient_Accessor.has_value();
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::clearBallisticCoefficient() noexcept {
  ballisticCoefficient_Accessor.reset();
  return *this;
}

std::unique_ptr<EphemerisOrbitalModelType> EphemerisOrbitalModelType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ephemerisOrbitalModelType : type};
  return (requestedType == uci::type::accessorType::ephemerisOrbitalModelType) ? boost::make_unique<EphemerisOrbitalModelType>() : nullptr;
}

/**  */
namespace EphemerisOrbitalModelType_Names {

constexpr const char* Extern_Type_Name{"EphemerisOrbitalModelType"};
constexpr const char* OrbitalModel_Name{"OrbitalModel"};
constexpr const char* StepSize_Name{"StepSize"};
constexpr const char* SolarRadiationPressureCoefficient_Name{"SolarRadiationPressureCoefficient"};
constexpr const char* BallisticCoefficient_Name{"BallisticCoefficient"};

} // namespace EphemerisOrbitalModelType_Names

void EphemerisOrbitalModelType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EphemerisOrbitalModelType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EphemerisOrbitalModelType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EphemerisOrbitalModelType_Names::OrbitalModel_Name) {
      OrbitalModelType::deserialize(valueType.second, accessor.enableOrbitalModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EphemerisOrbitalModelType_Names::StepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStepSize(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EphemerisOrbitalModelType_Names::SolarRadiationPressureCoefficient_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSolarRadiationPressureCoefficient(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EphemerisOrbitalModelType_Names::BallisticCoefficient_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBallisticCoefficient(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EphemerisOrbitalModelType::serialize(const uci::type::EphemerisOrbitalModelType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EphemerisOrbitalModelType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EphemerisOrbitalModelType_Names::Extern_Type_Name);
  }
  if (accessor.hasOrbitalModel()) {
    OrbitalModelType::serialize(accessor.getOrbitalModel(), node, EphemerisOrbitalModelType_Names::OrbitalModel_Name);
  }
  if (accessor.hasStepSize()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getStepSize(), node, EphemerisOrbitalModelType_Names::StepSize_Name);
  }
  if (accessor.hasSolarRadiationPressureCoefficient()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSolarRadiationPressureCoefficient(), node, EphemerisOrbitalModelType_Names::SolarRadiationPressureCoefficient_Name);
  }
  if (accessor.hasBallisticCoefficient()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getBallisticCoefficient(), node, EphemerisOrbitalModelType_Names::BallisticCoefficient_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EphemerisOrbitalModelType>().release());
}

uci::type::EphemerisOrbitalModelType& EphemerisOrbitalModelType::create(const uci::type::EphemerisOrbitalModelType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EphemerisOrbitalModelType> newAccessor{boost::make_unique<asb_uci::type::EphemerisOrbitalModelType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EphemerisOrbitalModelType::destroy(uci::type::EphemerisOrbitalModelType& accessor) {
  delete dynamic_cast<asb_uci::type::EphemerisOrbitalModelType*>(&accessor);
}

} // namespace type

} // namespace uci

