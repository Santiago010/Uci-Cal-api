/** @file ResponseOptionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResponseOptionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActionID_Type.h"
#include "../../../include/asb_uci/type/ActionTypeEnum.h"
#include "../../../include/asb_uci/type/CommandID_Type.h"
#include "../../../include/asb_uci/type/CommandResponseType.h"
#include "../../../include/asb_uci/type/EffectID_Type.h"
#include "../../../include/asb_uci/type/EffectTypeEnum.h"
#include "../../../include/asb_uci/type/TaskID_Type.h"
#include "../../../include/asb_uci/type/TaskResponseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActionID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActionTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseOptionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskResponseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResponseOptionType::ResponseOptionType() = default;

ResponseOptionType::~ResponseOptionType() = default;

void ResponseOptionType::copy(const uci::type::ResponseOptionType& accessor) {
  copyImpl(accessor, false);
}

void ResponseOptionType::copyImpl(const uci::type::ResponseOptionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResponseOptionType&>(accessor);
    if (accessorImpl.effect_Accessor) {
      setEffect(*(accessorImpl.effect_Accessor));
    } else {
      effect_Accessor.reset();
    }
    if (accessorImpl.effectID_Accessor) {
      setEffectID(*(accessorImpl.effectID_Accessor));
    } else {
      effectID_Accessor.reset();
    }
    if (accessorImpl.action_Accessor) {
      setAction(*(accessorImpl.action_Accessor));
    } else {
      action_Accessor.reset();
    }
    if (accessorImpl.actionID_Accessor) {
      setActionID(*(accessorImpl.actionID_Accessor));
    } else {
      actionID_Accessor.reset();
    }
    if (accessorImpl.task_Accessor) {
      setTask(*(accessorImpl.task_Accessor));
    } else {
      task_Accessor.reset();
    }
    if (accessorImpl.taskID_Accessor) {
      setTaskID(*(accessorImpl.taskID_Accessor));
    } else {
      taskID_Accessor.reset();
    }
    if (accessorImpl.capabilityCommand_Accessor) {
      setCapabilityCommand(*(accessorImpl.capabilityCommand_Accessor));
    } else {
      capabilityCommand_Accessor.reset();
    }
    if (accessorImpl.capabilityCommandID_Accessor) {
      setCapabilityCommandID(*(accessorImpl.capabilityCommandID_Accessor));
    } else {
      capabilityCommandID_Accessor.reset();
    }
  }
}

void ResponseOptionType::reset() noexcept {
  effect_Accessor.reset();
  effectID_Accessor.reset();
  action_Accessor.reset();
  actionID_Accessor.reset();
  task_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  capabilityCommandID_Accessor.reset();
}

uci::type::ResponseOptionType::ResponseOptionTypeChoice ResponseOptionType::getResponseOptionTypeChoiceOrdinal() const noexcept {
  if (effect_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_EFFECT;
  }
  if (effectID_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_EFFECTID;
  }
  if (action_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_ACTION;
  }
  if (actionID_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_ACTIONID;
  }
  if (task_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_TASK;
  }
  if (taskID_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_TASKID;
  }
  if (capabilityCommand_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_CAPABILITYCOMMAND;
  }
  if (capabilityCommandID_Accessor) {
    return RESPONSEOPTIONTYPE_CHOICE_CAPABILITYCOMMANDID;
  }
  return RESPONSEOPTIONTYPE_CHOICE_NONE;
}

uci::type::ResponseOptionType& ResponseOptionType::setResponseOptionTypeChoiceOrdinal(uci::type::ResponseOptionType::ResponseOptionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case RESPONSEOPTIONTYPE_CHOICE_EFFECT:
      chooseEffect("setResponseOptionTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTYPE_CHOICE_EFFECTID:
      chooseEffectID("setResponseOptionTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTYPE_CHOICE_ACTION:
      chooseAction("setResponseOptionTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTYPE_CHOICE_ACTIONID:
      chooseActionID("setResponseOptionTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTYPE_CHOICE_TASK:
      chooseTask("setResponseOptionTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTYPE_CHOICE_TASKID:
      chooseTaskID("setResponseOptionTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTYPE_CHOICE_CAPABILITYCOMMAND:
      chooseCapabilityCommand("setResponseOptionTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTYPE_CHOICE_CAPABILITYCOMMANDID:
      chooseCapabilityCommandID("setResponseOptionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setResponseOptionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EffectTypeEnum& ResponseOptionType::getEffect_() const {
  if (effect_Accessor) {
    return *effect_Accessor;
  }
  throw uci::base::UCIException("Error in getEffect(): Unable to get Effect, field not selected");
}

const uci::type::EffectTypeEnum& ResponseOptionType::getEffect() const {
  return getEffect_();
}

uci::type::EffectTypeEnum& ResponseOptionType::getEffect() {
  return getEffect_();
}

uci::type::ResponseOptionType& ResponseOptionType::setEffect(const uci::type::EffectTypeEnum& accessor) {
  chooseEffect();
  if (&accessor != effect_Accessor.get()) {
    effect_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResponseOptionType& ResponseOptionType::setEffect(uci::type::EffectTypeEnum::EnumerationItem value) {
  chooseEffect().setValue(value);
  return *this;
}

bool ResponseOptionType::isEffect() const noexcept {
  return static_cast<bool>(effect_Accessor);
}

uci::type::EffectTypeEnum& ResponseOptionType::chooseEffect(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  action_Accessor.reset();
  actionID_Accessor.reset();
  task_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  capabilityCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectTypeEnum : type};
  if ((!effect_Accessor) || (effect_Accessor->getAccessorType() != requestedType)) {
    effect_Accessor = EffectTypeEnum::create(type);
    if (!effect_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effect_Accessor;
}

uci::type::EffectTypeEnum& ResponseOptionType::chooseEffect(uci::base::accessorType::AccessorType type) {
  return chooseEffect("chooseEffect", type);
}

uci::type::EffectID_Type& ResponseOptionType::getEffectID_() const {
  if (effectID_Accessor) {
    return *effectID_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectID(): Unable to get EffectID, field not selected");
}

const uci::type::EffectID_Type& ResponseOptionType::getEffectID() const {
  return getEffectID_();
}

uci::type::EffectID_Type& ResponseOptionType::getEffectID() {
  return getEffectID_();
}

uci::type::ResponseOptionType& ResponseOptionType::setEffectID(const uci::type::EffectID_Type& accessor) {
  chooseEffectID();
  if (&accessor != effectID_Accessor.get()) {
    effectID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionType::isEffectID() const noexcept {
  return static_cast<bool>(effectID_Accessor);
}

uci::type::EffectID_Type& ResponseOptionType::chooseEffectID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  action_Accessor.reset();
  actionID_Accessor.reset();
  task_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  capabilityCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectID_Type : type};
  if ((!effectID_Accessor) || (effectID_Accessor->getAccessorType() != requestedType)) {
    effectID_Accessor = EffectID_Type::create(type);
    if (!effectID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectID_Accessor;
}

uci::type::EffectID_Type& ResponseOptionType::chooseEffectID(uci::base::accessorType::AccessorType type) {
  return chooseEffectID("chooseEffectID", type);
}

uci::type::ActionTypeEnum& ResponseOptionType::getAction_() const {
  if (action_Accessor) {
    return *action_Accessor;
  }
  throw uci::base::UCIException("Error in getAction(): Unable to get Action, field not selected");
}

const uci::type::ActionTypeEnum& ResponseOptionType::getAction() const {
  return getAction_();
}

uci::type::ActionTypeEnum& ResponseOptionType::getAction() {
  return getAction_();
}

uci::type::ResponseOptionType& ResponseOptionType::setAction(const uci::type::ActionTypeEnum& accessor) {
  chooseAction();
  if (&accessor != action_Accessor.get()) {
    action_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResponseOptionType& ResponseOptionType::setAction(uci::type::ActionTypeEnum::EnumerationItem value) {
  chooseAction().setValue(value);
  return *this;
}

bool ResponseOptionType::isAction() const noexcept {
  return static_cast<bool>(action_Accessor);
}

uci::type::ActionTypeEnum& ResponseOptionType::chooseAction(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  task_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  capabilityCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionTypeEnum : type};
  if ((!action_Accessor) || (action_Accessor->getAccessorType() != requestedType)) {
    action_Accessor = ActionTypeEnum::create(type);
    if (!action_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *action_Accessor;
}

uci::type::ActionTypeEnum& ResponseOptionType::chooseAction(uci::base::accessorType::AccessorType type) {
  return chooseAction("chooseAction", type);
}

uci::type::ActionID_Type& ResponseOptionType::getActionID_() const {
  if (actionID_Accessor) {
    return *actionID_Accessor;
  }
  throw uci::base::UCIException("Error in getActionID(): Unable to get ActionID, field not selected");
}

const uci::type::ActionID_Type& ResponseOptionType::getActionID() const {
  return getActionID_();
}

uci::type::ActionID_Type& ResponseOptionType::getActionID() {
  return getActionID_();
}

uci::type::ResponseOptionType& ResponseOptionType::setActionID(const uci::type::ActionID_Type& accessor) {
  chooseActionID();
  if (&accessor != actionID_Accessor.get()) {
    actionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionType::isActionID() const noexcept {
  return static_cast<bool>(actionID_Accessor);
}

uci::type::ActionID_Type& ResponseOptionType::chooseActionID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  effectID_Accessor.reset();
  action_Accessor.reset();
  task_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  capabilityCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionID_Type : type};
  if ((!actionID_Accessor) || (actionID_Accessor->getAccessorType() != requestedType)) {
    actionID_Accessor = ActionID_Type::create(type);
    if (!actionID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionID_Accessor;
}

uci::type::ActionID_Type& ResponseOptionType::chooseActionID(uci::base::accessorType::AccessorType type) {
  return chooseActionID("chooseActionID", type);
}

uci::type::TaskResponseType& ResponseOptionType::getTask_() const {
  if (task_Accessor) {
    return *task_Accessor;
  }
  throw uci::base::UCIException("Error in getTask(): Unable to get Task, field not selected");
}

const uci::type::TaskResponseType& ResponseOptionType::getTask() const {
  return getTask_();
}

uci::type::TaskResponseType& ResponseOptionType::getTask() {
  return getTask_();
}

uci::type::ResponseOptionType& ResponseOptionType::setTask(const uci::type::TaskResponseType& accessor) {
  chooseTask(accessor.getAccessorType());
  if (&accessor != task_Accessor.get()) {
    task_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionType::isTask() const noexcept {
  return static_cast<bool>(task_Accessor);
}

uci::type::TaskResponseType& ResponseOptionType::chooseTask(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  effectID_Accessor.reset();
  action_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  capabilityCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskResponseType : type};
  if ((!task_Accessor) || (task_Accessor->getAccessorType() != requestedType)) {
    task_Accessor = TaskResponseType::create(type);
    if (!task_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *task_Accessor;
}

uci::type::TaskResponseType& ResponseOptionType::chooseTask(uci::base::accessorType::AccessorType type) {
  return chooseTask("chooseTask", type);
}

uci::type::TaskID_Type& ResponseOptionType::getTaskID_() const {
  if (taskID_Accessor) {
    return *taskID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskID(): Unable to get TaskID, field not selected");
}

const uci::type::TaskID_Type& ResponseOptionType::getTaskID() const {
  return getTaskID_();
}

uci::type::TaskID_Type& ResponseOptionType::getTaskID() {
  return getTaskID_();
}

uci::type::ResponseOptionType& ResponseOptionType::setTaskID(const uci::type::TaskID_Type& accessor) {
  chooseTaskID();
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionType::isTaskID() const noexcept {
  return static_cast<bool>(taskID_Accessor);
}

uci::type::TaskID_Type& ResponseOptionType::chooseTaskID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  effectID_Accessor.reset();
  action_Accessor.reset();
  actionID_Accessor.reset();
  task_Accessor.reset();
  capabilityCommand_Accessor.reset();
  capabilityCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!taskID_Accessor) || (taskID_Accessor->getAccessorType() != requestedType)) {
    taskID_Accessor = TaskID_Type::create(type);
    if (!taskID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskID_Accessor;
}

uci::type::TaskID_Type& ResponseOptionType::chooseTaskID(uci::base::accessorType::AccessorType type) {
  return chooseTaskID("chooseTaskID", type);
}

uci::type::CommandResponseType& ResponseOptionType::getCapabilityCommand_() const {
  if (capabilityCommand_Accessor) {
    return *capabilityCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityCommand(): Unable to get CapabilityCommand, field not selected");
}

const uci::type::CommandResponseType& ResponseOptionType::getCapabilityCommand() const {
  return getCapabilityCommand_();
}

uci::type::CommandResponseType& ResponseOptionType::getCapabilityCommand() {
  return getCapabilityCommand_();
}

uci::type::ResponseOptionType& ResponseOptionType::setCapabilityCommand(const uci::type::CommandResponseType& accessor) {
  chooseCapabilityCommand(accessor.getAccessorType());
  if (&accessor != capabilityCommand_Accessor.get()) {
    capabilityCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionType::isCapabilityCommand() const noexcept {
  return static_cast<bool>(capabilityCommand_Accessor);
}

uci::type::CommandResponseType& ResponseOptionType::chooseCapabilityCommand(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  effectID_Accessor.reset();
  action_Accessor.reset();
  actionID_Accessor.reset();
  task_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandResponseType : type};
  if ((!capabilityCommand_Accessor) || (capabilityCommand_Accessor->getAccessorType() != requestedType)) {
    capabilityCommand_Accessor = CommandResponseType::create(type);
    if (!capabilityCommand_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityCommand_Accessor;
}

uci::type::CommandResponseType& ResponseOptionType::chooseCapabilityCommand(uci::base::accessorType::AccessorType type) {
  return chooseCapabilityCommand("chooseCapabilityCommand", type);
}

uci::type::CommandID_Type& ResponseOptionType::getCapabilityCommandID_() const {
  if (capabilityCommandID_Accessor) {
    return *capabilityCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityCommandID(): Unable to get CapabilityCommandID, field not selected");
}

const uci::type::CommandID_Type& ResponseOptionType::getCapabilityCommandID() const {
  return getCapabilityCommandID_();
}

uci::type::CommandID_Type& ResponseOptionType::getCapabilityCommandID() {
  return getCapabilityCommandID_();
}

uci::type::ResponseOptionType& ResponseOptionType::setCapabilityCommandID(const uci::type::CommandID_Type& accessor) {
  chooseCapabilityCommandID();
  if (&accessor != capabilityCommandID_Accessor.get()) {
    capabilityCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionType::isCapabilityCommandID() const noexcept {
  return static_cast<bool>(capabilityCommandID_Accessor);
}

uci::type::CommandID_Type& ResponseOptionType::chooseCapabilityCommandID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  effectID_Accessor.reset();
  action_Accessor.reset();
  actionID_Accessor.reset();
  task_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandID_Type : type};
  if ((!capabilityCommandID_Accessor) || (capabilityCommandID_Accessor->getAccessorType() != requestedType)) {
    capabilityCommandID_Accessor = CommandID_Type::create(type);
    if (!capabilityCommandID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityCommandID_Accessor;
}

uci::type::CommandID_Type& ResponseOptionType::chooseCapabilityCommandID(uci::base::accessorType::AccessorType type) {
  return chooseCapabilityCommandID("chooseCapabilityCommandID", type);
}

std::unique_ptr<ResponseOptionType> ResponseOptionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responseOptionType : type};
  return (requestedType == uci::type::accessorType::responseOptionType) ? boost::make_unique<ResponseOptionType>() : nullptr;
}

/**  */
namespace ResponseOptionType_Names {

constexpr const char* Extern_Type_Name{"ResponseOptionType"};
constexpr const char* Effect_Name{"Effect"};
constexpr const char* EffectID_Name{"EffectID"};
constexpr const char* Action_Name{"Action"};
constexpr const char* ActionID_Name{"ActionID"};
constexpr const char* Task_Name{"Task"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* CapabilityCommand_Name{"CapabilityCommand"};
constexpr const char* CapabilityCommandID_Name{"CapabilityCommandID"};

} // namespace ResponseOptionType_Names

void ResponseOptionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponseOptionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResponseOptionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::Effect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseEffect().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::EffectID_Name) {
      EffectID_Type::deserialize(valueType.second, accessor.chooseEffectID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::Action_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::ActionID_Name) {
      ActionID_Type::deserialize(valueType.second, accessor.chooseActionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::Task_Name) {
      TaskResponseType::deserialize(valueType.second, accessor.chooseTask(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.chooseTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::CapabilityCommand_Name) {
      CommandResponseType::deserialize(valueType.second, accessor.chooseCapabilityCommand(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionType_Names::CapabilityCommandID_Name) {
      CommandID_Type::deserialize(valueType.second, accessor.chooseCapabilityCommandID(), nodeName, nsPrefix);
    }
  }
}

std::string ResponseOptionType::serialize(const uci::type::ResponseOptionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResponseOptionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResponseOptionType_Names::Extern_Type_Name);
  }
  if (accessor.isEffect()) {
    EffectTypeEnum::serialize(accessor.getEffect(), node, ResponseOptionType_Names::Effect_Name, false);
  } else if (accessor.isEffectID()) {
    EffectID_Type::serialize(accessor.getEffectID(), node, ResponseOptionType_Names::EffectID_Name);
  } else if (accessor.isAction()) {
    ActionTypeEnum::serialize(accessor.getAction(), node, ResponseOptionType_Names::Action_Name, false);
  } else if (accessor.isActionID()) {
    ActionID_Type::serialize(accessor.getActionID(), node, ResponseOptionType_Names::ActionID_Name);
  } else if (accessor.isTask()) {
    TaskResponseType::serialize(accessor.getTask(), node, ResponseOptionType_Names::Task_Name);
  } else if (accessor.isTaskID()) {
    TaskID_Type::serialize(accessor.getTaskID(), node, ResponseOptionType_Names::TaskID_Name);
  } else if (accessor.isCapabilityCommand()) {
    CommandResponseType::serialize(accessor.getCapabilityCommand(), node, ResponseOptionType_Names::CapabilityCommand_Name);
  } else if (accessor.isCapabilityCommandID()) {
    CommandID_Type::serialize(accessor.getCapabilityCommandID(), node, ResponseOptionType_Names::CapabilityCommandID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResponseOptionType& ResponseOptionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResponseOptionType>().release());
}

uci::type::ResponseOptionType& ResponseOptionType::create(const uci::type::ResponseOptionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResponseOptionType> newAccessor{boost::make_unique<asb_uci::type::ResponseOptionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResponseOptionType::destroy(uci::type::ResponseOptionType& accessor) {
  delete dynamic_cast<asb_uci::type::ResponseOptionType*>(&accessor);
}

} // namespace type

} // namespace uci

