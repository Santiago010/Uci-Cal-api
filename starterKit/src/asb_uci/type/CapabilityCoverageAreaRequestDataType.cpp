/** @file CapabilityCoverageAreaRequestDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CapabilityCoverageAreaRequestDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityCoverageAreaFactorEnum.h"
#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/OrientationType.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCoverageAreaFactorEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCoverageAreaRequestDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrientationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaRequestDataType()
  : capabilityID_Accessor{boost::make_unique<CapabilityID>(1, SIZE_MAX)},
    capabilityCoverageAreaFactor_Accessor{boost::make_unique<CapabilityCoverageAreaFactor>(0, 5)} {
}

CapabilityCoverageAreaRequestDataType::~CapabilityCoverageAreaRequestDataType() = default;

void CapabilityCoverageAreaRequestDataType::copy(const uci::type::CapabilityCoverageAreaRequestDataType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityCoverageAreaRequestDataType::copyImpl(const uci::type::CapabilityCoverageAreaRequestDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityCoverageAreaRequestDataType&>(accessor);
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    setCapabilityCoverageAreaFactor(*(accessorImpl.capabilityCoverageAreaFactor_Accessor));
    if (accessorImpl.sensorPosition_Accessor) {
      setSensorPosition(*(accessorImpl.sensorPosition_Accessor));
    } else {
      sensorPosition_Accessor.reset();
    }
    if (accessorImpl.sensorOrientation_Accessor) {
      setSensorOrientation(*(accessorImpl.sensorOrientation_Accessor));
    } else {
      sensorOrientation_Accessor.reset();
    }
  }
}

void CapabilityCoverageAreaRequestDataType::reset() noexcept {
  capabilityID_Accessor->reset();
  capabilityCoverageAreaFactor_Accessor->reset();
  sensorPosition_Accessor.reset();
  sensorOrientation_Accessor.reset();
}

const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityID& CapabilityCoverageAreaRequestDataType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::CapabilityCoverageAreaRequestDataType::CapabilityID& CapabilityCoverageAreaRequestDataType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::setCapabilityID(const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaFactor& CapabilityCoverageAreaRequestDataType::getCapabilityCoverageAreaFactor() const {
  return *capabilityCoverageAreaFactor_Accessor;
}

uci::type::CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaFactor& CapabilityCoverageAreaRequestDataType::getCapabilityCoverageAreaFactor() {
  return *capabilityCoverageAreaFactor_Accessor;
}

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::setCapabilityCoverageAreaFactor(const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaFactor& accessor) {
  if (&accessor != capabilityCoverageAreaFactor_Accessor.get()) {
    capabilityCoverageAreaFactor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Point3D_Type& CapabilityCoverageAreaRequestDataType::getSensorPosition_() const {
  if (sensorPosition_Accessor) {
    return *sensorPosition_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorPosition(): An attempt was made to get an optional field that was not enabled, call hasSensorPosition() to determine if it is safe to call getSensorPosition()");
}

const uci::type::Point3D_Type& CapabilityCoverageAreaRequestDataType::getSensorPosition() const {
  return getSensorPosition_();
}

uci::type::Point3D_Type& CapabilityCoverageAreaRequestDataType::getSensorPosition() {
  return getSensorPosition_();
}

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::setSensorPosition(const uci::type::Point3D_Type& accessor) {
  enableSensorPosition(accessor.getAccessorType());
  if (&accessor != sensorPosition_Accessor.get()) {
    sensorPosition_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilityCoverageAreaRequestDataType::hasSensorPosition() const noexcept {
  return static_cast<bool>(sensorPosition_Accessor);
}

uci::type::Point3D_Type& CapabilityCoverageAreaRequestDataType::enableSensorPosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!sensorPosition_Accessor) || (sensorPosition_Accessor->getAccessorType() != requestedType)) {
    sensorPosition_Accessor = Point3D_Type::create(requestedType);
    if (!sensorPosition_Accessor) {
      throw uci::base::UCIException("Error in enableSensorPosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorPosition_Accessor;
}

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::clearSensorPosition() noexcept {
  sensorPosition_Accessor.reset();
  return *this;
}

uci::type::OrientationType& CapabilityCoverageAreaRequestDataType::getSensorOrientation_() const {
  if (sensorOrientation_Accessor) {
    return *sensorOrientation_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorOrientation(): An attempt was made to get an optional field that was not enabled, call hasSensorOrientation() to determine if it is safe to call getSensorOrientation()");
}

const uci::type::OrientationType& CapabilityCoverageAreaRequestDataType::getSensorOrientation() const {
  return getSensorOrientation_();
}

uci::type::OrientationType& CapabilityCoverageAreaRequestDataType::getSensorOrientation() {
  return getSensorOrientation_();
}

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::setSensorOrientation(const uci::type::OrientationType& accessor) {
  enableSensorOrientation();
  if (&accessor != sensorOrientation_Accessor.get()) {
    sensorOrientation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityCoverageAreaRequestDataType::hasSensorOrientation() const noexcept {
  return static_cast<bool>(sensorOrientation_Accessor);
}

uci::type::OrientationType& CapabilityCoverageAreaRequestDataType::enableSensorOrientation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationType : type};
  if ((!sensorOrientation_Accessor) || (sensorOrientation_Accessor->getAccessorType() != requestedType)) {
    sensorOrientation_Accessor = OrientationType::create(requestedType);
    if (!sensorOrientation_Accessor) {
      throw uci::base::UCIException("Error in enableSensorOrientation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorOrientation_Accessor;
}

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::clearSensorOrientation() noexcept {
  sensorOrientation_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilityCoverageAreaRequestDataType> CapabilityCoverageAreaRequestDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCoverageAreaRequestDataType : type};
  return (requestedType == uci::type::accessorType::capabilityCoverageAreaRequestDataType) ? boost::make_unique<CapabilityCoverageAreaRequestDataType>() : nullptr;
}

/**  */
namespace CapabilityCoverageAreaRequestDataType_Names {

constexpr const char* Extern_Type_Name{"CapabilityCoverageAreaRequestDataType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* CapabilityCoverageAreaFactor_Name{"CapabilityCoverageAreaFactor"};
constexpr const char* SensorPosition_Name{"SensorPosition"};
constexpr const char* SensorOrientation_Name{"SensorOrientation"};

} // namespace CapabilityCoverageAreaRequestDataType_Names

void CapabilityCoverageAreaRequestDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityCoverageAreaRequestDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityCoverageAreaRequestDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityCoverageAreaRequestDataType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityCoverageAreaRequestDataType::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityCoverageAreaRequestDataType_Names::CapabilityCoverageAreaFactor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaFactor& boundedList = accessor.getCapabilityCoverageAreaFactor();
        const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaFactor::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityCoverageAreaRequestDataType_Names::SensorPosition_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSensorPosition(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityCoverageAreaRequestDataType_Names::SensorOrientation_Name) {
      OrientationType::deserialize(valueType.second, accessor.enableSensorOrientation(), nodeName, nsPrefix);
    }
  }
}

std::string CapabilityCoverageAreaRequestDataType::serialize(const uci::type::CapabilityCoverageAreaRequestDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityCoverageAreaRequestDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityCoverageAreaRequestDataType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::CapabilityCoverageAreaRequestDataType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, CapabilityCoverageAreaRequestDataType_Names::CapabilityID_Name);
    }
  }
  {
    const uci::type::CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaFactor& boundedList = accessor.getCapabilityCoverageAreaFactor();
    for (uci::type::CapabilityCoverageAreaRequestDataType::CapabilityCoverageAreaFactor::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CapabilityCoverageAreaFactorEnum::serialize(boundedList.at(i), node, CapabilityCoverageAreaRequestDataType_Names::CapabilityCoverageAreaFactor_Name, false);
    }
  }
  if (accessor.hasSensorPosition()) {
    Point3D_Type::serialize(accessor.getSensorPosition(), node, CapabilityCoverageAreaRequestDataType_Names::SensorPosition_Name);
  }
  if (accessor.hasSensorOrientation()) {
    OrientationType::serialize(accessor.getSensorOrientation(), node, CapabilityCoverageAreaRequestDataType_Names::SensorOrientation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityCoverageAreaRequestDataType>().release());
}

uci::type::CapabilityCoverageAreaRequestDataType& CapabilityCoverageAreaRequestDataType::create(const uci::type::CapabilityCoverageAreaRequestDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityCoverageAreaRequestDataType> newAccessor{boost::make_unique<asb_uci::type::CapabilityCoverageAreaRequestDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityCoverageAreaRequestDataType::destroy(uci::type::CapabilityCoverageAreaRequestDataType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityCoverageAreaRequestDataType*>(&accessor);
}

} // namespace type

} // namespace uci

