/** @file AirfieldReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AirfieldReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AirfieldID_Type.h"
#include "../../../include/asb_uci/type/AirfieldInformationType.h"
#include "../../../include/asb_uci/type/AirfieldReferenceID_ChoiceType.h"
#include "../../../include/asb_uci/type/AirfieldReportID_Type.h"
#include "../../../include/asb_uci/type/AirfieldStoresPET.h"
#include "../../../include/asb_uci/type/WeatherAreaDataType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldReferenceID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldReportID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldStoresPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherAreaDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AirfieldReportMDT::AirfieldReportMDT()
  : airfieldReportID_Accessor{boost::make_unique<AirfieldReportID_Type>()},
    airfieldID_Accessor{boost::make_unique<AirfieldID_Type>()},
    identityReferenceID_Accessor{boost::make_unique<AirfieldReferenceID_ChoiceType>()},
    airfieldStores_Accessor{boost::make_unique<AirfieldStores>(0, SIZE_MAX)} {
}

AirfieldReportMDT::~AirfieldReportMDT() = default;

void AirfieldReportMDT::copy(const uci::type::AirfieldReportMDT& accessor) {
  copyImpl(accessor, false);
}

void AirfieldReportMDT::copyImpl(const uci::type::AirfieldReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AirfieldReportMDT&>(accessor);
    setAirfieldReportID(*(accessorImpl.airfieldReportID_Accessor));
    setAirfieldID(*(accessorImpl.airfieldID_Accessor));
    setIdentityReferenceID(*(accessorImpl.identityReferenceID_Accessor));
    setObservationTime(accessorImpl.observationTime_Accessor);
    if (accessorImpl.information_Accessor) {
      setInformation(*(accessorImpl.information_Accessor));
    } else {
      information_Accessor.reset();
    }
    if (accessorImpl.weather_Accessor) {
      setWeather(*(accessorImpl.weather_Accessor));
    } else {
      weather_Accessor.reset();
    }
    setAirfieldStores(*(accessorImpl.airfieldStores_Accessor));
  }
}

void AirfieldReportMDT::reset() noexcept {
  airfieldReportID_Accessor->reset();
  airfieldID_Accessor->reset();
  identityReferenceID_Accessor->reset();
  observationTime_Accessor = 0;
  information_Accessor.reset();
  weather_Accessor.reset();
  airfieldStores_Accessor->reset();
}

const uci::type::AirfieldReportID_Type& AirfieldReportMDT::getAirfieldReportID() const {
  return *airfieldReportID_Accessor;
}

uci::type::AirfieldReportID_Type& AirfieldReportMDT::getAirfieldReportID() {
  return *airfieldReportID_Accessor;
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::setAirfieldReportID(const uci::type::AirfieldReportID_Type& accessor) {
  if (&accessor != airfieldReportID_Accessor.get()) {
    airfieldReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AirfieldID_Type& AirfieldReportMDT::getAirfieldID() const {
  return *airfieldID_Accessor;
}

uci::type::AirfieldID_Type& AirfieldReportMDT::getAirfieldID() {
  return *airfieldID_Accessor;
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::setAirfieldID(const uci::type::AirfieldID_Type& accessor) {
  if (&accessor != airfieldID_Accessor.get()) {
    airfieldID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AirfieldReferenceID_ChoiceType& AirfieldReportMDT::getIdentityReferenceID() const {
  return *identityReferenceID_Accessor;
}

uci::type::AirfieldReferenceID_ChoiceType& AirfieldReportMDT::getIdentityReferenceID() {
  return *identityReferenceID_Accessor;
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::setIdentityReferenceID(const uci::type::AirfieldReferenceID_ChoiceType& accessor) {
  if (&accessor != identityReferenceID_Accessor.get()) {
    identityReferenceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue AirfieldReportMDT::getObservationTime() const {
  return observationTime_Accessor;
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::setObservationTime(uci::type::DateTimeTypeValue value) {
  observationTime_Accessor = value;
  return *this;
}


uci::type::AirfieldInformationType& AirfieldReportMDT::getInformation_() const {
  if (information_Accessor) {
    return *information_Accessor;
  }
  throw uci::base::UCIException("Error in getInformation(): An attempt was made to get an optional field that was not enabled, call hasInformation() to determine if it is safe to call getInformation()");
}

const uci::type::AirfieldInformationType& AirfieldReportMDT::getInformation() const {
  return getInformation_();
}

uci::type::AirfieldInformationType& AirfieldReportMDT::getInformation() {
  return getInformation_();
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::setInformation(const uci::type::AirfieldInformationType& accessor) {
  enableInformation();
  if (&accessor != information_Accessor.get()) {
    information_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirfieldReportMDT::hasInformation() const noexcept {
  return static_cast<bool>(information_Accessor);
}

uci::type::AirfieldInformationType& AirfieldReportMDT::enableInformation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airfieldInformationType : type};
  if ((!information_Accessor) || (information_Accessor->getAccessorType() != requestedType)) {
    information_Accessor = AirfieldInformationType::create(requestedType);
    if (!information_Accessor) {
      throw uci::base::UCIException("Error in enableInformation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *information_Accessor;
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::clearInformation() noexcept {
  information_Accessor.reset();
  return *this;
}

uci::type::WeatherAreaDataType& AirfieldReportMDT::getWeather_() const {
  if (weather_Accessor) {
    return *weather_Accessor;
  }
  throw uci::base::UCIException("Error in getWeather(): An attempt was made to get an optional field that was not enabled, call hasWeather() to determine if it is safe to call getWeather()");
}

const uci::type::WeatherAreaDataType& AirfieldReportMDT::getWeather() const {
  return getWeather_();
}

uci::type::WeatherAreaDataType& AirfieldReportMDT::getWeather() {
  return getWeather_();
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::setWeather(const uci::type::WeatherAreaDataType& accessor) {
  enableWeather();
  if (&accessor != weather_Accessor.get()) {
    weather_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirfieldReportMDT::hasWeather() const noexcept {
  return static_cast<bool>(weather_Accessor);
}

uci::type::WeatherAreaDataType& AirfieldReportMDT::enableWeather(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherAreaDataType : type};
  if ((!weather_Accessor) || (weather_Accessor->getAccessorType() != requestedType)) {
    weather_Accessor = WeatherAreaDataType::create(requestedType);
    if (!weather_Accessor) {
      throw uci::base::UCIException("Error in enableWeather(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weather_Accessor;
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::clearWeather() noexcept {
  weather_Accessor.reset();
  return *this;
}

const uci::type::AirfieldReportMDT::AirfieldStores& AirfieldReportMDT::getAirfieldStores() const {
  return *airfieldStores_Accessor;
}

uci::type::AirfieldReportMDT::AirfieldStores& AirfieldReportMDT::getAirfieldStores() {
  return *airfieldStores_Accessor;
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::setAirfieldStores(const uci::type::AirfieldReportMDT::AirfieldStores& accessor) {
  if (&accessor != airfieldStores_Accessor.get()) {
    airfieldStores_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AirfieldReportMDT> AirfieldReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airfieldReportMDT : type};
  return (requestedType == uci::type::accessorType::airfieldReportMDT) ? boost::make_unique<AirfieldReportMDT>() : nullptr;
}

/**  */
namespace AirfieldReportMDT_Names {

constexpr const char* Extern_Type_Name{"AirfieldReportMDT"};
constexpr const char* AirfieldReportID_Name{"AirfieldReportID"};
constexpr const char* AirfieldID_Name{"AirfieldID"};
constexpr const char* IdentityReferenceID_Name{"IdentityReferenceID"};
constexpr const char* ObservationTime_Name{"ObservationTime"};
constexpr const char* Information_Name{"Information"};
constexpr const char* Weather_Name{"Weather"};
constexpr const char* AirfieldStores_Name{"AirfieldStores"};

} // namespace AirfieldReportMDT_Names

void AirfieldReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::AirfieldReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AirfieldReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AirfieldReportMDT_Names::AirfieldReportID_Name) {
      AirfieldReportID_Type::deserialize(valueType.second, accessor.getAirfieldReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldReportMDT_Names::AirfieldID_Name) {
      AirfieldID_Type::deserialize(valueType.second, accessor.getAirfieldID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldReportMDT_Names::IdentityReferenceID_Name) {
      AirfieldReferenceID_ChoiceType::deserialize(valueType.second, accessor.getIdentityReferenceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldReportMDT_Names::ObservationTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setObservationTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + AirfieldReportMDT_Names::Information_Name) {
      AirfieldInformationType::deserialize(valueType.second, accessor.enableInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldReportMDT_Names::Weather_Name) {
      WeatherAreaDataType::deserialize(valueType.second, accessor.enableWeather(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldReportMDT_Names::AirfieldStores_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AirfieldReportMDT::AirfieldStores& boundedList = accessor.getAirfieldStores();
        const uci::type::AirfieldReportMDT::AirfieldStores::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string AirfieldReportMDT::serialize(const uci::type::AirfieldReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AirfieldReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AirfieldReportMDT_Names::Extern_Type_Name);
  }
  AirfieldReportID_Type::serialize(accessor.getAirfieldReportID(), node, AirfieldReportMDT_Names::AirfieldReportID_Name);
  AirfieldID_Type::serialize(accessor.getAirfieldID(), node, AirfieldReportMDT_Names::AirfieldID_Name);
  AirfieldReferenceID_ChoiceType::serialize(accessor.getIdentityReferenceID(), node, AirfieldReportMDT_Names::IdentityReferenceID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getObservationTime(), node, AirfieldReportMDT_Names::ObservationTime_Name);
  if (accessor.hasInformation()) {
    AirfieldInformationType::serialize(accessor.getInformation(), node, AirfieldReportMDT_Names::Information_Name);
  }
  if (accessor.hasWeather()) {
    WeatherAreaDataType::serialize(accessor.getWeather(), node, AirfieldReportMDT_Names::Weather_Name);
  }
  {
    const uci::type::AirfieldReportMDT::AirfieldStores& boundedList = accessor.getAirfieldStores();
    for (uci::type::AirfieldReportMDT::AirfieldStores::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AirfieldStoresPET::serialize(boundedList.at(i), node, AirfieldReportMDT_Names::AirfieldStores_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AirfieldReportMDT& AirfieldReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AirfieldReportMDT>().release());
}

uci::type::AirfieldReportMDT& AirfieldReportMDT::create(const uci::type::AirfieldReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AirfieldReportMDT> newAccessor{boost::make_unique<asb_uci::type::AirfieldReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AirfieldReportMDT::destroy(uci::type::AirfieldReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::AirfieldReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

