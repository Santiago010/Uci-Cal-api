/** @file IFF_InterrogatorModesEnableType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IFF_InterrogatorModesEnableType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IFF_ActivePassiveEnum.h"
#include "../../../include/asb_uci/type/IFF_CivilMilitaryEnum.h"
#include "../../../include/asb_uci/type/IFF_LethalNonLethalEnum.h"
#include "../../../include/asb_uci/type/IFF_ModeControlType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_ActivePassiveEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_CivilMilitaryEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_InterrogatorModesEnableType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_LethalNonLethalEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_ModeControlType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_InterrogatorModesEnableType::IFF_InterrogatorModesEnableType()
  : activePassive_Accessor{boost::make_unique<IFF_ActivePassiveEnum>()},
    civilMilitary_Accessor{boost::make_unique<CivilMilitary>(0, 2)},
    lethalNonLethal_Accessor{boost::make_unique<LethalNonLethal>(0, 2)} {
}

IFF_InterrogatorModesEnableType::~IFF_InterrogatorModesEnableType() = default;

void IFF_InterrogatorModesEnableType::copy(const uci::type::IFF_InterrogatorModesEnableType& accessor) {
  copyImpl(accessor, false);
}

void IFF_InterrogatorModesEnableType::copyImpl(const uci::type::IFF_InterrogatorModesEnableType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_InterrogatorModesEnableType&>(accessor);
    setActivePassive(*(accessorImpl.activePassive_Accessor));
    setCivilMilitary(*(accessorImpl.civilMilitary_Accessor));
    setLethalNonLethal(*(accessorImpl.lethalNonLethal_Accessor));
    if (accessorImpl.directedModeEnableAndSequencing_Accessor) {
      setDirectedModeEnableAndSequencing(*(accessorImpl.directedModeEnableAndSequencing_Accessor));
    } else {
      directedModeEnableAndSequencing_Accessor.reset();
    }
  }
}

void IFF_InterrogatorModesEnableType::reset() noexcept {
  activePassive_Accessor->reset();
  civilMilitary_Accessor->reset();
  lethalNonLethal_Accessor->reset();
  directedModeEnableAndSequencing_Accessor.reset();
}

const uci::type::IFF_ActivePassiveEnum& IFF_InterrogatorModesEnableType::getActivePassive() const {
  return *activePassive_Accessor;
}

uci::type::IFF_ActivePassiveEnum& IFF_InterrogatorModesEnableType::getActivePassive() {
  return *activePassive_Accessor;
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::setActivePassive(const uci::type::IFF_ActivePassiveEnum& accessor) {
  if (&accessor != activePassive_Accessor.get()) {
    activePassive_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::setActivePassive(uci::type::IFF_ActivePassiveEnum::EnumerationItem value) {
  activePassive_Accessor->setValue(value);
  return *this;
}


const uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& IFF_InterrogatorModesEnableType::getCivilMilitary() const {
  return *civilMilitary_Accessor;
}

uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& IFF_InterrogatorModesEnableType::getCivilMilitary() {
  return *civilMilitary_Accessor;
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::setCivilMilitary(const uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& accessor) {
  if (&accessor != civilMilitary_Accessor.get()) {
    civilMilitary_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& IFF_InterrogatorModesEnableType::getLethalNonLethal() const {
  return *lethalNonLethal_Accessor;
}

uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& IFF_InterrogatorModesEnableType::getLethalNonLethal() {
  return *lethalNonLethal_Accessor;
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::setLethalNonLethal(const uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& accessor) {
  if (&accessor != lethalNonLethal_Accessor.get()) {
    lethalNonLethal_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_ModeControlType& IFF_InterrogatorModesEnableType::getDirectedModeEnableAndSequencing_() const {
  if (directedModeEnableAndSequencing_Accessor) {
    return *directedModeEnableAndSequencing_Accessor;
  }
  throw uci::base::UCIException("Error in getDirectedModeEnableAndSequencing(): An attempt was made to get an optional field that was not enabled, call hasDirectedModeEnableAndSequencing() to determine if it is safe to call getDirectedModeEnableAndSequencing()");
}

const uci::type::IFF_ModeControlType& IFF_InterrogatorModesEnableType::getDirectedModeEnableAndSequencing() const {
  return getDirectedModeEnableAndSequencing_();
}

uci::type::IFF_ModeControlType& IFF_InterrogatorModesEnableType::getDirectedModeEnableAndSequencing() {
  return getDirectedModeEnableAndSequencing_();
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::setDirectedModeEnableAndSequencing(const uci::type::IFF_ModeControlType& accessor) {
  enableDirectedModeEnableAndSequencing();
  if (&accessor != directedModeEnableAndSequencing_Accessor.get()) {
    directedModeEnableAndSequencing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_InterrogatorModesEnableType::hasDirectedModeEnableAndSequencing() const noexcept {
  return static_cast<bool>(directedModeEnableAndSequencing_Accessor);
}

uci::type::IFF_ModeControlType& IFF_InterrogatorModesEnableType::enableDirectedModeEnableAndSequencing(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_ModeControlType : type};
  if ((!directedModeEnableAndSequencing_Accessor) || (directedModeEnableAndSequencing_Accessor->getAccessorType() != requestedType)) {
    directedModeEnableAndSequencing_Accessor = IFF_ModeControlType::create(requestedType);
    if (!directedModeEnableAndSequencing_Accessor) {
      throw uci::base::UCIException("Error in enableDirectedModeEnableAndSequencing(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *directedModeEnableAndSequencing_Accessor;
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::clearDirectedModeEnableAndSequencing() noexcept {
  directedModeEnableAndSequencing_Accessor.reset();
  return *this;
}

std::unique_ptr<IFF_InterrogatorModesEnableType> IFF_InterrogatorModesEnableType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_InterrogatorModesEnableType : type};
  return (requestedType == uci::type::accessorType::iFF_InterrogatorModesEnableType) ? boost::make_unique<IFF_InterrogatorModesEnableType>() : nullptr;
}

/**  */
namespace IFF_InterrogatorModesEnableType_Names {

constexpr const char* Extern_Type_Name{"IFF_InterrogatorModesEnableType"};
constexpr const char* ActivePassive_Name{"ActivePassive"};
constexpr const char* CivilMilitary_Name{"CivilMilitary"};
constexpr const char* LethalNonLethal_Name{"LethalNonLethal"};
constexpr const char* DirectedModeEnableAndSequencing_Name{"DirectedModeEnableAndSequencing"};

} // namespace IFF_InterrogatorModesEnableType_Names

void IFF_InterrogatorModesEnableType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_InterrogatorModesEnableType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_InterrogatorModesEnableType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_InterrogatorModesEnableType_Names::ActivePassive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getActivePassive().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_InterrogatorModesEnableType_Names::CivilMilitary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& boundedList = accessor.getCivilMilitary();
        const uci::type::IFF_InterrogatorModesEnableType::CivilMilitary::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_InterrogatorModesEnableType_Names::LethalNonLethal_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& boundedList = accessor.getLethalNonLethal();
        const uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_InterrogatorModesEnableType_Names::DirectedModeEnableAndSequencing_Name) {
      IFF_ModeControlType::deserialize(valueType.second, accessor.enableDirectedModeEnableAndSequencing(), nodeName, nsPrefix);
    }
  }
}

std::string IFF_InterrogatorModesEnableType::serialize(const uci::type::IFF_InterrogatorModesEnableType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_InterrogatorModesEnableType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_InterrogatorModesEnableType_Names::Extern_Type_Name);
  }
  IFF_ActivePassiveEnum::serialize(accessor.getActivePassive(), node, IFF_InterrogatorModesEnableType_Names::ActivePassive_Name, false);
  {
    const uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& boundedList = accessor.getCivilMilitary();
    for (uci::type::IFF_InterrogatorModesEnableType::CivilMilitary::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      IFF_CivilMilitaryEnum::serialize(boundedList.at(i), node, IFF_InterrogatorModesEnableType_Names::CivilMilitary_Name, false);
    }
  }
  {
    const uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& boundedList = accessor.getLethalNonLethal();
    for (uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      IFF_LethalNonLethalEnum::serialize(boundedList.at(i), node, IFF_InterrogatorModesEnableType_Names::LethalNonLethal_Name, false);
    }
  }
  if (accessor.hasDirectedModeEnableAndSequencing()) {
    IFF_ModeControlType::serialize(accessor.getDirectedModeEnableAndSequencing(), node, IFF_InterrogatorModesEnableType_Names::DirectedModeEnableAndSequencing_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_InterrogatorModesEnableType>().release());
}

uci::type::IFF_InterrogatorModesEnableType& IFF_InterrogatorModesEnableType::create(const uci::type::IFF_InterrogatorModesEnableType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_InterrogatorModesEnableType> newAccessor{boost::make_unique<asb_uci::type::IFF_InterrogatorModesEnableType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_InterrogatorModesEnableType::destroy(uci::type::IFF_InterrogatorModesEnableType& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_InterrogatorModesEnableType*>(&accessor);
}

} // namespace type

} // namespace uci

