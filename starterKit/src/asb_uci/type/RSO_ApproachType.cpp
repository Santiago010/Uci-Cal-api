/** @file RSO_ApproachType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RSO_ApproachType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AssetType.h"
#include "asb_uci/type/DistanceConstraintsType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AssetType.h"
#include "uci/type/DistanceConstraintsType.h"
#include "uci/type/RSO_ApproachType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RSO_ApproachType::RSO_ApproachType()
  : rSO_Accessor{boost::make_unique<AssetType>()} {
}

RSO_ApproachType::~RSO_ApproachType() = default;

void RSO_ApproachType::copy(const uci::type::RSO_ApproachType& accessor) {
  copyImpl(accessor, false);
}

void RSO_ApproachType::copyImpl(const uci::type::RSO_ApproachType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::rSO_ApproachType)) {
      const auto& accessorImpl = dynamic_cast<const RSO_ApproachType&>(accessor);
      setRSO(*(accessorImpl.rSO_Accessor));
      if (accessorImpl.range_Accessor) {
        setRange(*(accessorImpl.range_Accessor));
      } else {
        range_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RSO_ApproachType::reset() noexcept {
  rSO_Accessor->reset();
  range_Accessor.reset();
}

const uci::type::AssetType& RSO_ApproachType::getRSO() const {
  return *rSO_Accessor;
}

uci::type::AssetType& RSO_ApproachType::getRSO() {
  return *rSO_Accessor;
}

uci::type::RSO_ApproachType& RSO_ApproachType::setRSO(const uci::type::AssetType& accessor) {
  if (&accessor != rSO_Accessor.get()) {
    rSO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DistanceConstraintsType& RSO_ApproachType::getRange_() const {
  if (range_Accessor) {
    return *range_Accessor;
  }
  throw uci::base::UCIException("Error in getRange(): An attempt was made to get an optional field that was not enabled, call hasRange() to determine if it is safe to call getRange()");
}

const uci::type::DistanceConstraintsType& RSO_ApproachType::getRange() const {
  return getRange_();
}

uci::type::DistanceConstraintsType& RSO_ApproachType::getRange() {
  return getRange_();
}

uci::type::RSO_ApproachType& RSO_ApproachType::setRange(const uci::type::DistanceConstraintsType& accessor) {
  enableRange();
  if (&accessor != range_Accessor.get()) {
    range_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RSO_ApproachType::hasRange() const noexcept {
  return static_cast<bool>(range_Accessor);
}

uci::type::DistanceConstraintsType& RSO_ApproachType::enableRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::distanceConstraintsType : type};
  if ((!range_Accessor) || (range_Accessor->getAccessorType() != requestedType)) {
    range_Accessor = DistanceConstraintsType::create(requestedType);
    if (!range_Accessor) {
      throw uci::base::UCIException("Error in enableRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *range_Accessor;
}

uci::type::RSO_ApproachType& RSO_ApproachType::clearRange() noexcept {
  range_Accessor.reset();
  return *this;
}

std::unique_ptr<RSO_ApproachType> RSO_ApproachType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rSO_ApproachType : type};
  return std::unique_ptr<RSO_ApproachType>(dynamic_cast<RSO_ApproachType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RSO_ApproachType_Names {

constexpr const char* Extern_Type_Name{"RSO_ApproachType"};
constexpr const char* RSO_Name{"RSO"};
constexpr const char* Range_Name{"Range"};

} // namespace RSO_ApproachType_Names

void RSO_ApproachType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RSO_ApproachType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RSO_ApproachType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RSO_ApproachType_Names::RSO_Name) {
      AssetType::deserialize(valueType.second, accessor.getRSO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RSO_ApproachType_Names::Range_Name) {
      DistanceConstraintsType::deserialize(valueType.second, accessor.enableRange(), nodeName, nsPrefix);
    }
  }
}

std::string RSO_ApproachType::serialize(const uci::type::RSO_ApproachType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RSO_ApproachType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::rSO_ApproachType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RSO_ApproachType_Names::Extern_Type_Name);
    }
    AssetType::serialize(accessor.getRSO(), node, RSO_ApproachType_Names::RSO_Name);
    if (accessor.hasRange()) {
      DistanceConstraintsType::serialize(accessor.getRange(), node, RSO_ApproachType_Names::Range_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RSO_ApproachType& RSO_ApproachType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RSO_ApproachType>().release());
}

uci::type::RSO_ApproachType& RSO_ApproachType::create(const uci::type::RSO_ApproachType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RSO_ApproachType> newAccessor{boost::make_unique<asb_uci::type::RSO_ApproachType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RSO_ApproachType::destroy(uci::type::RSO_ApproachType& accessor) {
  delete dynamic_cast<asb_uci::type::RSO_ApproachType*>(&accessor);
}

} // namespace type

} // namespace uci

