/** @file PackageMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PackageMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/PackageID_Type.h"
#include "../../../include/asb_uci/type/PackagePartnerBaseType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PackageID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PackageMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PackagePartnerBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PackageMDT::PackageMDT()
  : packageID_Accessor{boost::make_unique<PackageID_Type>()},
    packagePartner_Accessor{boost::make_unique<PackagePartner>(1, SIZE_MAX)} {
}

PackageMDT::~PackageMDT() = default;

void PackageMDT::copy(const uci::type::PackageMDT& accessor) {
  copyImpl(accessor, false);
}

void PackageMDT::copyImpl(const uci::type::PackageMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PackageMDT&>(accessor);
    setPackageID(*(accessorImpl.packageID_Accessor));
    if (accessorImpl.packageName_Accessor) {
      setPackageName(*(accessorImpl.packageName_Accessor));
    } else {
      packageName_Accessor.reset();
    }
    if (accessorImpl.leadSystemID_Accessor) {
      setLeadSystemID(*(accessorImpl.leadSystemID_Accessor));
    } else {
      leadSystemID_Accessor.reset();
    }
    setPackagePartner(*(accessorImpl.packagePartner_Accessor));
  }
}

void PackageMDT::reset() noexcept {
  DataRecordBaseType::reset();
  packageID_Accessor->reset();
  packageName_Accessor.reset();
  leadSystemID_Accessor.reset();
  packagePartner_Accessor->reset();
}

const uci::type::PackageID_Type& PackageMDT::getPackageID() const {
  return *packageID_Accessor;
}

uci::type::PackageID_Type& PackageMDT::getPackageID() {
  return *packageID_Accessor;
}

uci::type::PackageMDT& PackageMDT::setPackageID(const uci::type::PackageID_Type& accessor) {
  if (&accessor != packageID_Accessor.get()) {
    packageID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString256Type& PackageMDT::getPackageName_() const {
  if (packageName_Accessor) {
    return *packageName_Accessor;
  }
  throw uci::base::UCIException("Error in getPackageName(): An attempt was made to get an optional field that was not enabled, call hasPackageName() to determine if it is safe to call getPackageName()");
}

const uci::type::VisibleString256Type& PackageMDT::getPackageName() const {
  return getPackageName_();
}

uci::type::VisibleString256Type& PackageMDT::getPackageName() {
  return getPackageName_();
}

uci::type::PackageMDT& PackageMDT::setPackageName(const uci::type::VisibleString256Type& value) {
  return setPackageName(value.c_str());
}

uci::type::PackageMDT& PackageMDT::setPackageName(const std::string& value) {
  return setPackageName(value.c_str());
}

uci::type::PackageMDT& PackageMDT::setPackageName(const char* value) {
  enablePackageName().setStringValue(value);
  return *this;
}

bool PackageMDT::hasPackageName() const noexcept {
  return static_cast<bool>(packageName_Accessor);
}

uci::type::VisibleString256Type& PackageMDT::enablePackageName(uci::base::accessorType::AccessorType type) {
  if (!packageName_Accessor) {
    packageName_Accessor = boost::make_unique<std::string>("");
  }
  return *packageName_Accessor;
}

uci::type::PackageMDT& PackageMDT::clearPackageName() noexcept {
  packageName_Accessor.reset();
  return *this;
}

uci::type::SystemID_Type& PackageMDT::getLeadSystemID_() const {
  if (leadSystemID_Accessor) {
    return *leadSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getLeadSystemID(): An attempt was made to get an optional field that was not enabled, call hasLeadSystemID() to determine if it is safe to call getLeadSystemID()");
}

const uci::type::SystemID_Type& PackageMDT::getLeadSystemID() const {
  return getLeadSystemID_();
}

uci::type::SystemID_Type& PackageMDT::getLeadSystemID() {
  return getLeadSystemID_();
}

uci::type::PackageMDT& PackageMDT::setLeadSystemID(const uci::type::SystemID_Type& accessor) {
  enableLeadSystemID();
  if (&accessor != leadSystemID_Accessor.get()) {
    leadSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PackageMDT::hasLeadSystemID() const noexcept {
  return static_cast<bool>(leadSystemID_Accessor);
}

uci::type::SystemID_Type& PackageMDT::enableLeadSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!leadSystemID_Accessor) || (leadSystemID_Accessor->getAccessorType() != requestedType)) {
    leadSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!leadSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableLeadSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *leadSystemID_Accessor;
}

uci::type::PackageMDT& PackageMDT::clearLeadSystemID() noexcept {
  leadSystemID_Accessor.reset();
  return *this;
}

const uci::type::PackageMDT::PackagePartner& PackageMDT::getPackagePartner() const {
  return *packagePartner_Accessor;
}

uci::type::PackageMDT::PackagePartner& PackageMDT::getPackagePartner() {
  return *packagePartner_Accessor;
}

uci::type::PackageMDT& PackageMDT::setPackagePartner(const uci::type::PackageMDT::PackagePartner& accessor) {
  if (&accessor != packagePartner_Accessor.get()) {
    packagePartner_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PackageMDT> PackageMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::packageMDT : type};
  return (requestedType == uci::type::accessorType::packageMDT) ? boost::make_unique<PackageMDT>() : nullptr;
}

/**  */
namespace PackageMDT_Names {

constexpr const char* Extern_Type_Name{"PackageMDT"};
constexpr const char* PackageID_Name{"PackageID"};
constexpr const char* PackageName_Name{"PackageName"};
constexpr const char* LeadSystemID_Name{"LeadSystemID"};
constexpr const char* PackagePartner_Name{"PackagePartner"};

} // namespace PackageMDT_Names

void PackageMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PackageMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PackageMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PackageMDT_Names::PackageID_Name) {
      PackageID_Type::deserialize(valueType.second, accessor.getPackageID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PackageMDT_Names::PackageName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPackageName(*value);
      }
    } else if (valueType.first == nsPrefix + PackageMDT_Names::LeadSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableLeadSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PackageMDT_Names::PackagePartner_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PackageMDT::PackagePartner& boundedList = accessor.getPackagePartner();
        const uci::type::PackageMDT::PackagePartner::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PackagePartnerBaseType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PackageMDT::serialize(const uci::type::PackageMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PackageMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PackageMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  PackageID_Type::serialize(accessor.getPackageID(), node, PackageMDT_Names::PackageID_Name);
  if (accessor.hasPackageName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getPackageName(), node, PackageMDT_Names::PackageName_Name);
  }
  if (accessor.hasLeadSystemID()) {
    SystemID_Type::serialize(accessor.getLeadSystemID(), node, PackageMDT_Names::LeadSystemID_Name);
  }
  {
    const uci::type::PackageMDT::PackagePartner& boundedList = accessor.getPackagePartner();
    for (uci::type::PackageMDT::PackagePartner::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PackagePartnerBaseType::serialize(boundedList.at(i), node, PackageMDT_Names::PackagePartner_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PackageMDT& PackageMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PackageMDT>().release());
}

uci::type::PackageMDT& PackageMDT::create(const uci::type::PackageMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PackageMDT> newAccessor{boost::make_unique<asb_uci::type::PackageMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PackageMDT::destroy(uci::type::PackageMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PackageMDT*>(&accessor);
}

} // namespace type

} // namespace uci

