/** @file RF_ResourceAllocationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RF_ResourceAllocationRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AperturePointingOptionsType.h"
#include "../../../include/asb_uci/type/ComparableRankingType.h"
#include "../../../include/asb_uci/type/RF_ResourceAllocationRequestRemovalType.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/RequestingFunctionID_ChoiceType.h"
#include "../../../include/asb_uci/type/ResourceRequestOptionType.h"
#include "../../../include/asb_uci/type/SupportCapabilityID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AperturePointingOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComparableRankingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ResourceAllocationRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ResourceAllocationRequestRemovalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestingFunctionID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceRequestOptionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportCapabilityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_ResourceAllocationRequestMDT::RF_ResourceAllocationRequestMDT()
  : terminatedResources_Accessor{boost::make_unique<TerminatedResources>(0, SIZE_MAX)},
    requestingFunction_Accessor{boost::make_unique<RequestingFunctionID_ChoiceType>()},
    ranking_Accessor{boost::make_unique<ComparableRankingType>()},
    pointingVectorParameters_Accessor{boost::make_unique<PointingVectorParameters>(0, SIZE_MAX)},
    resourceRequestOptions_Accessor{boost::make_unique<ResourceRequestOptions>(0, SIZE_MAX)} {
}

RF_ResourceAllocationRequestMDT::~RF_ResourceAllocationRequestMDT() = default;

void RF_ResourceAllocationRequestMDT::copy(const uci::type::RF_ResourceAllocationRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void RF_ResourceAllocationRequestMDT::copyImpl(const uci::type::RF_ResourceAllocationRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RF_ResourceAllocationRequestMDT&>(accessor);
    if (accessorImpl.resourceAllocator_SupportCapabilityID_Accessor) {
      setResourceAllocator_SupportCapabilityID(*(accessorImpl.resourceAllocator_SupportCapabilityID_Accessor));
    } else {
      resourceAllocator_SupportCapabilityID_Accessor.reset();
    }
    setTerminatedResources(*(accessorImpl.terminatedResources_Accessor));
    setRequestingFunction(*(accessorImpl.requestingFunction_Accessor));
    setRanking(*(accessorImpl.ranking_Accessor));
    setPointingVectorParameters(*(accessorImpl.pointingVectorParameters_Accessor));
    setResourceRequestOptions(*(accessorImpl.resourceRequestOptions_Accessor));
  }
}

void RF_ResourceAllocationRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  resourceAllocator_SupportCapabilityID_Accessor.reset();
  terminatedResources_Accessor->reset();
  requestingFunction_Accessor->reset();
  ranking_Accessor->reset();
  pointingVectorParameters_Accessor->reset();
  resourceRequestOptions_Accessor->reset();
}

uci::type::SupportCapabilityID_Type& RF_ResourceAllocationRequestMDT::getResourceAllocator_SupportCapabilityID_() const {
  if (resourceAllocator_SupportCapabilityID_Accessor) {
    return *resourceAllocator_SupportCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getResourceAllocator_SupportCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasResourceAllocator_SupportCapabilityID() to determine if it is safe to call getResourceAllocator_SupportCapabilityID()");
}

const uci::type::SupportCapabilityID_Type& RF_ResourceAllocationRequestMDT::getResourceAllocator_SupportCapabilityID() const {
  return getResourceAllocator_SupportCapabilityID_();
}

uci::type::SupportCapabilityID_Type& RF_ResourceAllocationRequestMDT::getResourceAllocator_SupportCapabilityID() {
  return getResourceAllocator_SupportCapabilityID_();
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::setResourceAllocator_SupportCapabilityID(const uci::type::SupportCapabilityID_Type& accessor) {
  enableResourceAllocator_SupportCapabilityID();
  if (&accessor != resourceAllocator_SupportCapabilityID_Accessor.get()) {
    resourceAllocator_SupportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_ResourceAllocationRequestMDT::hasResourceAllocator_SupportCapabilityID() const noexcept {
  return static_cast<bool>(resourceAllocator_SupportCapabilityID_Accessor);
}

uci::type::SupportCapabilityID_Type& RF_ResourceAllocationRequestMDT::enableResourceAllocator_SupportCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportCapabilityID_Type : type};
  if ((!resourceAllocator_SupportCapabilityID_Accessor) || (resourceAllocator_SupportCapabilityID_Accessor->getAccessorType() != requestedType)) {
    resourceAllocator_SupportCapabilityID_Accessor = SupportCapabilityID_Type::create(requestedType);
    if (!resourceAllocator_SupportCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableResourceAllocator_SupportCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resourceAllocator_SupportCapabilityID_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::clearResourceAllocator_SupportCapabilityID() noexcept {
  resourceAllocator_SupportCapabilityID_Accessor.reset();
  return *this;
}

const uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& RF_ResourceAllocationRequestMDT::getTerminatedResources() const {
  return *terminatedResources_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& RF_ResourceAllocationRequestMDT::getTerminatedResources() {
  return *terminatedResources_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::setTerminatedResources(const uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& accessor) {
  if (&accessor != terminatedResources_Accessor.get()) {
    terminatedResources_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequestingFunctionID_ChoiceType& RF_ResourceAllocationRequestMDT::getRequestingFunction() const {
  return *requestingFunction_Accessor;
}

uci::type::RequestingFunctionID_ChoiceType& RF_ResourceAllocationRequestMDT::getRequestingFunction() {
  return *requestingFunction_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::setRequestingFunction(const uci::type::RequestingFunctionID_ChoiceType& accessor) {
  if (&accessor != requestingFunction_Accessor.get()) {
    requestingFunction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComparableRankingType& RF_ResourceAllocationRequestMDT::getRanking() const {
  return *ranking_Accessor;
}

uci::type::ComparableRankingType& RF_ResourceAllocationRequestMDT::getRanking() {
  return *ranking_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::setRanking(const uci::type::ComparableRankingType& accessor) {
  if (&accessor != ranking_Accessor.get()) {
    ranking_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& RF_ResourceAllocationRequestMDT::getPointingVectorParameters() const {
  return *pointingVectorParameters_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& RF_ResourceAllocationRequestMDT::getPointingVectorParameters() {
  return *pointingVectorParameters_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::setPointingVectorParameters(const uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& accessor) {
  if (&accessor != pointingVectorParameters_Accessor.get()) {
    pointingVectorParameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& RF_ResourceAllocationRequestMDT::getResourceRequestOptions() const {
  return *resourceRequestOptions_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& RF_ResourceAllocationRequestMDT::getResourceRequestOptions() {
  return *resourceRequestOptions_Accessor;
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::setResourceRequestOptions(const uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& accessor) {
  if (&accessor != resourceRequestOptions_Accessor.get()) {
    resourceRequestOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RF_ResourceAllocationRequestMDT> RF_ResourceAllocationRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_ResourceAllocationRequestMDT : type};
  return (requestedType == uci::type::accessorType::rF_ResourceAllocationRequestMDT) ? boost::make_unique<RF_ResourceAllocationRequestMDT>() : nullptr;
}

/**  */
namespace RF_ResourceAllocationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"RF_ResourceAllocationRequestMDT"};
constexpr const char* ResourceAllocator_SupportCapabilityID_Name{"ResourceAllocator_SupportCapabilityID"};
constexpr const char* TerminatedResources_Name{"TerminatedResources"};
constexpr const char* RequestingFunction_Name{"RequestingFunction"};
constexpr const char* Ranking_Name{"Ranking"};
constexpr const char* PointingVectorParameters_Name{"PointingVectorParameters"};
constexpr const char* ResourceRequestOptions_Name{"ResourceRequestOptions"};

} // namespace RF_ResourceAllocationRequestMDT_Names

void RF_ResourceAllocationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_ResourceAllocationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_ResourceAllocationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestMDT_Names::ResourceAllocator_SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.enableResourceAllocator_SupportCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestMDT_Names::TerminatedResources_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& boundedList = accessor.getTerminatedResources();
        const uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RF_ResourceAllocationRequestRemovalType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestMDT_Names::RequestingFunction_Name) {
      RequestingFunctionID_ChoiceType::deserialize(valueType.second, accessor.getRequestingFunction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestMDT_Names::Ranking_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.getRanking(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestMDT_Names::PointingVectorParameters_Name) {
      uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& boundedList = accessor.getPointingVectorParameters();
      const uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::AperturePointingOptionsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestMDT_Names::ResourceRequestOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& boundedList = accessor.getResourceRequestOptions();
        const uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceRequestOptionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RF_ResourceAllocationRequestMDT::serialize(const uci::type::RF_ResourceAllocationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_ResourceAllocationRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_ResourceAllocationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasResourceAllocator_SupportCapabilityID()) {
    SupportCapabilityID_Type::serialize(accessor.getResourceAllocator_SupportCapabilityID(), node, RF_ResourceAllocationRequestMDT_Names::ResourceAllocator_SupportCapabilityID_Name);
  }
  {
    const uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& boundedList = accessor.getTerminatedResources();
    for (uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RF_ResourceAllocationRequestRemovalType::serialize(boundedList.at(i), node, RF_ResourceAllocationRequestMDT_Names::TerminatedResources_Name);
    }
  }
  RequestingFunctionID_ChoiceType::serialize(accessor.getRequestingFunction(), node, RF_ResourceAllocationRequestMDT_Names::RequestingFunction_Name);
  ComparableRankingType::serialize(accessor.getRanking(), node, RF_ResourceAllocationRequestMDT_Names::Ranking_Name);
  {
    const uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& boundedList = accessor.getPointingVectorParameters();
    for (uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AperturePointingOptionsType::serialize(boundedList.at(i), node, RF_ResourceAllocationRequestMDT_Names::PointingVectorParameters_Name);
    }
  }
  {
    const uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& boundedList = accessor.getResourceRequestOptions();
    for (uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResourceRequestOptionType::serialize(boundedList.at(i), node, RF_ResourceAllocationRequestMDT_Names::ResourceRequestOptions_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_ResourceAllocationRequestMDT>().release());
}

uci::type::RF_ResourceAllocationRequestMDT& RF_ResourceAllocationRequestMDT::create(const uci::type::RF_ResourceAllocationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_ResourceAllocationRequestMDT> newAccessor{boost::make_unique<asb_uci::type::RF_ResourceAllocationRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_ResourceAllocationRequestMDT::destroy(uci::type::RF_ResourceAllocationRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RF_ResourceAllocationRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

