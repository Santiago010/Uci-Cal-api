/** @file OrbitalSurveillanceTargetType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalSurveillanceTargetType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitalSurveillanceLocationTargetType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceObjectsType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceZoneTargetType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceLocationTargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceObjectsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceTargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceZoneTargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceTargetType::OrbitalSurveillanceTargetType() = default;

OrbitalSurveillanceTargetType::~OrbitalSurveillanceTargetType() = default;

void OrbitalSurveillanceTargetType::copy(const uci::type::OrbitalSurveillanceTargetType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceTargetType::copyImpl(const uci::type::OrbitalSurveillanceTargetType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceTargetType&>(accessor);
    if (accessorImpl.objectBased_Accessor) {
      setObjectBased(*(accessorImpl.objectBased_Accessor));
    } else {
      objectBased_Accessor.reset();
    }
    if (accessorImpl.locationBased_Accessor) {
      setLocationBased(*(accessorImpl.locationBased_Accessor));
    } else {
      locationBased_Accessor.reset();
    }
    if (accessorImpl.zoneBased_Accessor) {
      setZoneBased(*(accessorImpl.zoneBased_Accessor));
    } else {
      zoneBased_Accessor.reset();
    }
  }
}

void OrbitalSurveillanceTargetType::reset() noexcept {
  objectBased_Accessor.reset();
  locationBased_Accessor.reset();
  zoneBased_Accessor.reset();
}

uci::type::OrbitalSurveillanceTargetType::OrbitalSurveillanceTargetTypeChoice OrbitalSurveillanceTargetType::getOrbitalSurveillanceTargetTypeChoiceOrdinal() const noexcept {
  if (objectBased_Accessor) {
    return ORBITALSURVEILLANCETARGETTYPE_CHOICE_OBJECTBASED;
  }
  if (locationBased_Accessor) {
    return ORBITALSURVEILLANCETARGETTYPE_CHOICE_LOCATIONBASED;
  }
  if (zoneBased_Accessor) {
    return ORBITALSURVEILLANCETARGETTYPE_CHOICE_ZONEBASED;
  }
  return ORBITALSURVEILLANCETARGETTYPE_CHOICE_NONE;
}

uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceTargetType::setOrbitalSurveillanceTargetTypeChoiceOrdinal(uci::type::OrbitalSurveillanceTargetType::OrbitalSurveillanceTargetTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALSURVEILLANCETARGETTYPE_CHOICE_OBJECTBASED:
      chooseObjectBased("setOrbitalSurveillanceTargetTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCETARGETTYPE_CHOICE_LOCATIONBASED:
      chooseLocationBased("setOrbitalSurveillanceTargetTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCETARGETTYPE_CHOICE_ZONEBASED:
      chooseZoneBased("setOrbitalSurveillanceTargetTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalSurveillanceTargetTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceTargetType::getObjectBased_() const {
  if (objectBased_Accessor) {
    return *objectBased_Accessor;
  }
  throw uci::base::UCIException("Error in getObjectBased(): Unable to get ObjectBased, field not selected");
}

const uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceTargetType::getObjectBased() const {
  return getObjectBased_();
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceTargetType::getObjectBased() {
  return getObjectBased_();
}

uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceTargetType::setObjectBased(const uci::type::OrbitalSurveillanceObjectsType& accessor) {
  chooseObjectBased();
  if (&accessor != objectBased_Accessor.get()) {
    objectBased_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceTargetType::isObjectBased() const noexcept {
  return static_cast<bool>(objectBased_Accessor);
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceTargetType::chooseObjectBased(const std::string& method, uci::base::accessorType::AccessorType type) {
  locationBased_Accessor.reset();
  zoneBased_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceObjectsType : type};
  if ((!objectBased_Accessor) || (objectBased_Accessor->getAccessorType() != requestedType)) {
    objectBased_Accessor = OrbitalSurveillanceObjectsType::create(type);
    if (!objectBased_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *objectBased_Accessor;
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceTargetType::chooseObjectBased(uci::base::accessorType::AccessorType type) {
  return chooseObjectBased("chooseObjectBased", type);
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceTargetType::getLocationBased_() const {
  if (locationBased_Accessor) {
    return *locationBased_Accessor;
  }
  throw uci::base::UCIException("Error in getLocationBased(): Unable to get LocationBased, field not selected");
}

const uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceTargetType::getLocationBased() const {
  return getLocationBased_();
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceTargetType::getLocationBased() {
  return getLocationBased_();
}

uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceTargetType::setLocationBased(const uci::type::OrbitalSurveillanceLocationTargetType& accessor) {
  chooseLocationBased();
  if (&accessor != locationBased_Accessor.get()) {
    locationBased_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceTargetType::isLocationBased() const noexcept {
  return static_cast<bool>(locationBased_Accessor);
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceTargetType::chooseLocationBased(const std::string& method, uci::base::accessorType::AccessorType type) {
  objectBased_Accessor.reset();
  zoneBased_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceLocationTargetType : type};
  if ((!locationBased_Accessor) || (locationBased_Accessor->getAccessorType() != requestedType)) {
    locationBased_Accessor = OrbitalSurveillanceLocationTargetType::create(type);
    if (!locationBased_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *locationBased_Accessor;
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceTargetType::chooseLocationBased(uci::base::accessorType::AccessorType type) {
  return chooseLocationBased("chooseLocationBased", type);
}

uci::type::OrbitalSurveillanceZoneTargetType& OrbitalSurveillanceTargetType::getZoneBased_() const {
  if (zoneBased_Accessor) {
    return *zoneBased_Accessor;
  }
  throw uci::base::UCIException("Error in getZoneBased(): Unable to get ZoneBased, field not selected");
}

const uci::type::OrbitalSurveillanceZoneTargetType& OrbitalSurveillanceTargetType::getZoneBased() const {
  return getZoneBased_();
}

uci::type::OrbitalSurveillanceZoneTargetType& OrbitalSurveillanceTargetType::getZoneBased() {
  return getZoneBased_();
}

uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceTargetType::setZoneBased(const uci::type::OrbitalSurveillanceZoneTargetType& accessor) {
  chooseZoneBased();
  if (&accessor != zoneBased_Accessor.get()) {
    zoneBased_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceTargetType::isZoneBased() const noexcept {
  return static_cast<bool>(zoneBased_Accessor);
}

uci::type::OrbitalSurveillanceZoneTargetType& OrbitalSurveillanceTargetType::chooseZoneBased(const std::string& method, uci::base::accessorType::AccessorType type) {
  objectBased_Accessor.reset();
  locationBased_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceZoneTargetType : type};
  if ((!zoneBased_Accessor) || (zoneBased_Accessor->getAccessorType() != requestedType)) {
    zoneBased_Accessor = OrbitalSurveillanceZoneTargetType::create(type);
    if (!zoneBased_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *zoneBased_Accessor;
}

uci::type::OrbitalSurveillanceZoneTargetType& OrbitalSurveillanceTargetType::chooseZoneBased(uci::base::accessorType::AccessorType type) {
  return chooseZoneBased("chooseZoneBased", type);
}

std::unique_ptr<OrbitalSurveillanceTargetType> OrbitalSurveillanceTargetType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceTargetType : type};
  return (requestedType == uci::type::accessorType::orbitalSurveillanceTargetType) ? boost::make_unique<OrbitalSurveillanceTargetType>() : nullptr;
}

/**  */
namespace OrbitalSurveillanceTargetType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceTargetType"};
constexpr const char* ObjectBased_Name{"ObjectBased"};
constexpr const char* LocationBased_Name{"LocationBased"};
constexpr const char* ZoneBased_Name{"ZoneBased"};

} // namespace OrbitalSurveillanceTargetType_Names

void OrbitalSurveillanceTargetType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceTargetType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceTargetType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTargetType_Names::ObjectBased_Name) {
      OrbitalSurveillanceObjectsType::deserialize(valueType.second, accessor.chooseObjectBased(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTargetType_Names::LocationBased_Name) {
      OrbitalSurveillanceLocationTargetType::deserialize(valueType.second, accessor.chooseLocationBased(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTargetType_Names::ZoneBased_Name) {
      OrbitalSurveillanceZoneTargetType::deserialize(valueType.second, accessor.chooseZoneBased(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalSurveillanceTargetType::serialize(const uci::type::OrbitalSurveillanceTargetType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceTargetType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceTargetType_Names::Extern_Type_Name);
  }
  if (accessor.isObjectBased()) {
    OrbitalSurveillanceObjectsType::serialize(accessor.getObjectBased(), node, OrbitalSurveillanceTargetType_Names::ObjectBased_Name);
  } else if (accessor.isLocationBased()) {
    OrbitalSurveillanceLocationTargetType::serialize(accessor.getLocationBased(), node, OrbitalSurveillanceTargetType_Names::LocationBased_Name);
  } else if (accessor.isZoneBased()) {
    OrbitalSurveillanceZoneTargetType::serialize(accessor.getZoneBased(), node, OrbitalSurveillanceTargetType_Names::ZoneBased_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceTargetType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceTargetType>().release());
}

uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceTargetType::create(const uci::type::OrbitalSurveillanceTargetType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceTargetType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceTargetType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceTargetType::destroy(uci::type::OrbitalSurveillanceTargetType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceTargetType*>(&accessor);
}

} // namespace type

} // namespace uci

