/** @file StrikeTaskMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StrikeTaskMetricsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BDI_CollectionType.h"
#include "../../../include/asb_uci/type/StrikeTaskMetricsTargetingType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BDI_CollectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeTaskMetricsTargetingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeTaskMetricsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrikeTaskMetricsType::StrikeTaskMetricsType() = default;

StrikeTaskMetricsType::~StrikeTaskMetricsType() = default;

void StrikeTaskMetricsType::copy(const uci::type::StrikeTaskMetricsType& accessor) {
  copyImpl(accessor, false);
}

void StrikeTaskMetricsType::copyImpl(const uci::type::StrikeTaskMetricsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StrikeTaskMetricsType&>(accessor);
    setNumWeaponsReleased(accessorImpl.numWeaponsReleased_Accessor);
    if (accessorImpl.targeting_Accessor) {
      setTargeting(*(accessorImpl.targeting_Accessor));
    } else {
      targeting_Accessor.reset();
    }
    if (accessorImpl.bDI_Collection_Accessor) {
      setBDI_Collection(*(accessorImpl.bDI_Collection_Accessor));
    } else {
      bDI_Collection_Accessor.reset();
    }
  }
}

void StrikeTaskMetricsType::reset() noexcept {
  numWeaponsReleased_Accessor = 0;
  targeting_Accessor.reset();
  bDI_Collection_Accessor.reset();
}

xs::UnsignedInt StrikeTaskMetricsType::getNumWeaponsReleased() const {
  return numWeaponsReleased_Accessor;
}

uci::type::StrikeTaskMetricsType& StrikeTaskMetricsType::setNumWeaponsReleased(xs::UnsignedInt value) {
  numWeaponsReleased_Accessor = value;
  return *this;
}


uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsType::getTargeting_() const {
  if (targeting_Accessor) {
    return *targeting_Accessor;
  }
  throw uci::base::UCIException("Error in getTargeting(): An attempt was made to get an optional field that was not enabled, call hasTargeting() to determine if it is safe to call getTargeting()");
}

const uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsType::getTargeting() const {
  return getTargeting_();
}

uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsType::getTargeting() {
  return getTargeting_();
}

uci::type::StrikeTaskMetricsType& StrikeTaskMetricsType::setTargeting(const uci::type::StrikeTaskMetricsTargetingType& accessor) {
  enableTargeting();
  if (&accessor != targeting_Accessor.get()) {
    targeting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeTaskMetricsType::hasTargeting() const noexcept {
  return static_cast<bool>(targeting_Accessor);
}

uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsType::enableTargeting(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskMetricsTargetingType : type};
  if ((!targeting_Accessor) || (targeting_Accessor->getAccessorType() != requestedType)) {
    targeting_Accessor = StrikeTaskMetricsTargetingType::create(requestedType);
    if (!targeting_Accessor) {
      throw uci::base::UCIException("Error in enableTargeting(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targeting_Accessor;
}

uci::type::StrikeTaskMetricsType& StrikeTaskMetricsType::clearTargeting() noexcept {
  targeting_Accessor.reset();
  return *this;
}

uci::type::BDI_CollectionType& StrikeTaskMetricsType::getBDI_Collection_() const {
  if (bDI_Collection_Accessor) {
    return *bDI_Collection_Accessor;
  }
  throw uci::base::UCIException("Error in getBDI_Collection(): An attempt was made to get an optional field that was not enabled, call hasBDI_Collection() to determine if it is safe to call getBDI_Collection()");
}

const uci::type::BDI_CollectionType& StrikeTaskMetricsType::getBDI_Collection() const {
  return getBDI_Collection_();
}

uci::type::BDI_CollectionType& StrikeTaskMetricsType::getBDI_Collection() {
  return getBDI_Collection_();
}

uci::type::StrikeTaskMetricsType& StrikeTaskMetricsType::setBDI_Collection(const uci::type::BDI_CollectionType& accessor) {
  enableBDI_Collection();
  if (&accessor != bDI_Collection_Accessor.get()) {
    bDI_Collection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeTaskMetricsType::hasBDI_Collection() const noexcept {
  return static_cast<bool>(bDI_Collection_Accessor);
}

uci::type::BDI_CollectionType& StrikeTaskMetricsType::enableBDI_Collection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::bDI_CollectionType : type};
  if ((!bDI_Collection_Accessor) || (bDI_Collection_Accessor->getAccessorType() != requestedType)) {
    bDI_Collection_Accessor = BDI_CollectionType::create(requestedType);
    if (!bDI_Collection_Accessor) {
      throw uci::base::UCIException("Error in enableBDI_Collection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bDI_Collection_Accessor;
}

uci::type::StrikeTaskMetricsType& StrikeTaskMetricsType::clearBDI_Collection() noexcept {
  bDI_Collection_Accessor.reset();
  return *this;
}

std::unique_ptr<StrikeTaskMetricsType> StrikeTaskMetricsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskMetricsType : type};
  return (requestedType == uci::type::accessorType::strikeTaskMetricsType) ? boost::make_unique<StrikeTaskMetricsType>() : nullptr;
}

/**  */
namespace StrikeTaskMetricsType_Names {

constexpr const char* Extern_Type_Name{"StrikeTaskMetricsType"};
constexpr const char* NumWeaponsReleased_Name{"NumWeaponsReleased"};
constexpr const char* Targeting_Name{"Targeting"};
constexpr const char* BDI_Collection_Name{"BDI_Collection"};

} // namespace StrikeTaskMetricsType_Names

void StrikeTaskMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeTaskMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeTaskMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsType_Names::NumWeaponsReleased_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumWeaponsReleased(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsType_Names::Targeting_Name) {
      StrikeTaskMetricsTargetingType::deserialize(valueType.second, accessor.enableTargeting(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsType_Names::BDI_Collection_Name) {
      BDI_CollectionType::deserialize(valueType.second, accessor.enableBDI_Collection(), nodeName, nsPrefix);
    }
  }
}

std::string StrikeTaskMetricsType::serialize(const uci::type::StrikeTaskMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrikeTaskMetricsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeTaskMetricsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumWeaponsReleased(), node, StrikeTaskMetricsType_Names::NumWeaponsReleased_Name);
  if (accessor.hasTargeting()) {
    StrikeTaskMetricsTargetingType::serialize(accessor.getTargeting(), node, StrikeTaskMetricsType_Names::Targeting_Name);
  }
  if (accessor.hasBDI_Collection()) {
    BDI_CollectionType::serialize(accessor.getBDI_Collection(), node, StrikeTaskMetricsType_Names::BDI_Collection_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrikeTaskMetricsType& StrikeTaskMetricsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrikeTaskMetricsType>().release());
}

uci::type::StrikeTaskMetricsType& StrikeTaskMetricsType::create(const uci::type::StrikeTaskMetricsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrikeTaskMetricsType> newAccessor{boost::make_unique<asb_uci::type::StrikeTaskMetricsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrikeTaskMetricsType::destroy(uci::type::StrikeTaskMetricsType& accessor) {
  delete dynamic_cast<asb_uci::type::StrikeTaskMetricsType*>(&accessor);
}

} // namespace type

} // namespace uci

