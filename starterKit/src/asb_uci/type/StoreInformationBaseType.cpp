/** @file StoreInformationBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StoreInformationBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/StoreJettisonOptionsEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreInformationBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreJettisonOptionsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StoreInformationBaseType::StoreInformationBaseType()
  : storeLocation_Accessor{boost::make_unique<StoreLocation>(1, SIZE_MAX)},
    jettisonableOption_Accessor{boost::make_unique<JettisonableOption>(0, 4)} {
}

StoreInformationBaseType::~StoreInformationBaseType() = default;

void StoreInformationBaseType::copy(const uci::type::StoreInformationBaseType& accessor) {
  copyImpl(accessor, false);
}

void StoreInformationBaseType::copyImpl(const uci::type::StoreInformationBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::storeInformationBaseType)) {
      const auto& accessorImpl = dynamic_cast<const StoreInformationBaseType&>(accessor);
      if (accessorImpl.mnemonic_Accessor) {
        setMnemonic(*(accessorImpl.mnemonic_Accessor));
      } else {
        mnemonic_Accessor.reset();
      }
      setSimulated(accessorImpl.simulated_Accessor);
      setStoreLocation(*(accessorImpl.storeLocation_Accessor));
      setJettisonableOption(*(accessorImpl.jettisonableOption_Accessor));
      if (accessorImpl.hasPowerable()) {
        setPowerable(accessorImpl.getPowerable());
      } else {
        clearPowerable();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void StoreInformationBaseType::reset() noexcept {
  mnemonic_Accessor.reset();
  simulated_Accessor = false;
  storeLocation_Accessor->reset();
  jettisonableOption_Accessor->reset();
  clearPowerable();
}

uci::type::VisibleString256Type& StoreInformationBaseType::getMnemonic_() const {
  if (mnemonic_Accessor) {
    return *mnemonic_Accessor;
  }
  throw uci::base::UCIException("Error in getMnemonic(): An attempt was made to get an optional field that was not enabled, call hasMnemonic() to determine if it is safe to call getMnemonic()");
}

const uci::type::VisibleString256Type& StoreInformationBaseType::getMnemonic() const {
  return getMnemonic_();
}

uci::type::VisibleString256Type& StoreInformationBaseType::getMnemonic() {
  return getMnemonic_();
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::setMnemonic(const uci::type::VisibleString256Type& value) {
  return setMnemonic(value.c_str());
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::setMnemonic(const std::string& value) {
  return setMnemonic(value.c_str());
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::setMnemonic(const char* value) {
  enableMnemonic().setStringValue(value);
  return *this;
}

bool StoreInformationBaseType::hasMnemonic() const noexcept {
  return static_cast<bool>(mnemonic_Accessor);
}

uci::type::VisibleString256Type& StoreInformationBaseType::enableMnemonic(uci::base::accessorType::AccessorType type) {
  if (!mnemonic_Accessor) {
    mnemonic_Accessor = boost::make_unique<std::string>("");
  }
  return *mnemonic_Accessor;
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::clearMnemonic() noexcept {
  mnemonic_Accessor.reset();
  return *this;
}

xs::Boolean StoreInformationBaseType::getSimulated() const {
  return simulated_Accessor;
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::setSimulated(xs::Boolean value) {
  simulated_Accessor = value;
  return *this;
}


const uci::type::StoreInformationBaseType::StoreLocation& StoreInformationBaseType::getStoreLocation() const {
  return *storeLocation_Accessor;
}

uci::type::StoreInformationBaseType::StoreLocation& StoreInformationBaseType::getStoreLocation() {
  return *storeLocation_Accessor;
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::setStoreLocation(const uci::type::StoreInformationBaseType::StoreLocation& accessor) {
  if (&accessor != storeLocation_Accessor.get()) {
    storeLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::StoreInformationBaseType::JettisonableOption& StoreInformationBaseType::getJettisonableOption() const {
  return *jettisonableOption_Accessor;
}

uci::type::StoreInformationBaseType::JettisonableOption& StoreInformationBaseType::getJettisonableOption() {
  return *jettisonableOption_Accessor;
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::setJettisonableOption(const uci::type::StoreInformationBaseType::JettisonableOption& accessor) {
  if (&accessor != jettisonableOption_Accessor.get()) {
    jettisonableOption_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean StoreInformationBaseType::getPowerable() const {
  if (powerable_Accessor) {
    return *powerable_Accessor;
  }
  throw uci::base::UCIException("Error in getPowerable(): An attempt was made to get an optional field that was not enabled, call hasPowerable() to determine if it is safe to call getPowerable()");
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::setPowerable(xs::Boolean value) {
  powerable_Accessor = value;
  return *this;
}

bool StoreInformationBaseType::hasPowerable() const noexcept {
  return powerable_Accessor.has_value();
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::clearPowerable() noexcept {
  powerable_Accessor.reset();
  return *this;
}

std::unique_ptr<StoreInformationBaseType> StoreInformationBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeInformationBaseType : type};
  return std::unique_ptr<StoreInformationBaseType>(dynamic_cast<StoreInformationBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace StoreInformationBaseType_Names {

constexpr const char* Extern_Type_Name{"StoreInformationBaseType"};
constexpr const char* Mnemonic_Name{"Mnemonic"};
constexpr const char* Simulated_Name{"Simulated"};
constexpr const char* StoreLocation_Name{"StoreLocation"};
constexpr const char* JettisonableOption_Name{"JettisonableOption"};
constexpr const char* Powerable_Name{"Powerable"};

} // namespace StoreInformationBaseType_Names

void StoreInformationBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StoreInformationBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StoreInformationBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StoreInformationBaseType_Names::Mnemonic_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMnemonic(*value);
      }
    } else if (valueType.first == nsPrefix + StoreInformationBaseType_Names::Simulated_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSimulated(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreInformationBaseType_Names::StoreLocation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::StoreInformationBaseType::StoreLocation& boundedList = accessor.getStoreLocation();
        const uci::type::StoreInformationBaseType::StoreLocation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setIntValue(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + StoreInformationBaseType_Names::JettisonableOption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::StoreInformationBaseType::JettisonableOption& boundedList = accessor.getJettisonableOption();
        const uci::type::StoreInformationBaseType::JettisonableOption::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + StoreInformationBaseType_Names::Powerable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPowerable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string StoreInformationBaseType::serialize(const uci::type::StoreInformationBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StoreInformationBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::storeInformationBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, StoreInformationBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasMnemonic()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getMnemonic(), node, StoreInformationBaseType_Names::Mnemonic_Name);
    }
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSimulated(), node, StoreInformationBaseType_Names::Simulated_Name);
    {
      const uci::type::StoreInformationBaseType::StoreLocation& boundedList = accessor.getStoreLocation();
      for (uci::type::StoreInformationBaseType::StoreLocation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::util::SerializationHelpers::serializeInt(boundedList.at(i), node, StoreInformationBaseType_Names::StoreLocation_Name);
      }
    }
    {
      const uci::type::StoreInformationBaseType::JettisonableOption& boundedList = accessor.getJettisonableOption();
      for (uci::type::StoreInformationBaseType::JettisonableOption::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        StoreJettisonOptionsEnum::serialize(boundedList.at(i), node, StoreInformationBaseType_Names::JettisonableOption_Name, false);
      }
    }
    if (accessor.hasPowerable()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPowerable(), node, StoreInformationBaseType_Names::Powerable_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StoreInformationBaseType& StoreInformationBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StoreInformationBaseType>().release());
}

uci::type::StoreInformationBaseType& StoreInformationBaseType::create(const uci::type::StoreInformationBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StoreInformationBaseType> newAccessor{boost::make_unique<asb_uci::type::StoreInformationBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StoreInformationBaseType::destroy(uci::type::StoreInformationBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::StoreInformationBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

