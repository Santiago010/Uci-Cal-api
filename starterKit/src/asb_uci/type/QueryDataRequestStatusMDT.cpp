/** @file QueryDataRequestStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/QueryDataRequestStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CompletionStatusType.h"
#include "../../../include/asb_uci/type/QueryPaginationType.h"
#include "../../../include/asb_uci/type/QueryResultType.h"
#include "../../../include/asb_uci/type/RequestStatusBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CompletionStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryDataRequestStatusMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryPaginationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryResultType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

QueryDataRequestStatusMDT::QueryDataRequestStatusMDT() = default;

QueryDataRequestStatusMDT::~QueryDataRequestStatusMDT() = default;

void QueryDataRequestStatusMDT::copy(const uci::type::QueryDataRequestStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void QueryDataRequestStatusMDT::copyImpl(const uci::type::QueryDataRequestStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const QueryDataRequestStatusMDT&>(accessor);
    if (accessorImpl.completionStatus_Accessor) {
      setCompletionStatus(*(accessorImpl.completionStatus_Accessor));
    } else {
      completionStatus_Accessor.reset();
    }
    if (accessorImpl.result_Accessor) {
      setResult(*(accessorImpl.result_Accessor));
    } else {
      result_Accessor.reset();
    }
    if (accessorImpl.queryPagination_Accessor) {
      setQueryPagination(*(accessorImpl.queryPagination_Accessor));
    } else {
      queryPagination_Accessor.reset();
    }
  }
}

void QueryDataRequestStatusMDT::reset() noexcept {
  RequestStatusBaseType::reset();
  completionStatus_Accessor.reset();
  result_Accessor.reset();
  queryPagination_Accessor.reset();
}

uci::type::CompletionStatusType& QueryDataRequestStatusMDT::getCompletionStatus_() const {
  if (completionStatus_Accessor) {
    return *completionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCompletionStatus(): An attempt was made to get an optional field that was not enabled, call hasCompletionStatus() to determine if it is safe to call getCompletionStatus()");
}

const uci::type::CompletionStatusType& QueryDataRequestStatusMDT::getCompletionStatus() const {
  return getCompletionStatus_();
}

uci::type::CompletionStatusType& QueryDataRequestStatusMDT::getCompletionStatus() {
  return getCompletionStatus_();
}

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::setCompletionStatus(const uci::type::CompletionStatusType& accessor) {
  enableCompletionStatus();
  if (&accessor != completionStatus_Accessor.get()) {
    completionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryDataRequestStatusMDT::hasCompletionStatus() const noexcept {
  return static_cast<bool>(completionStatus_Accessor);
}

uci::type::CompletionStatusType& QueryDataRequestStatusMDT::enableCompletionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  if ((!completionStatus_Accessor) || (completionStatus_Accessor->getAccessorType() != requestedType)) {
    completionStatus_Accessor = CompletionStatusType::create(requestedType);
    if (!completionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCompletionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *completionStatus_Accessor;
}

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::clearCompletionStatus() noexcept {
  completionStatus_Accessor.reset();
  return *this;
}

uci::type::QueryResultType& QueryDataRequestStatusMDT::getResult_() const {
  if (result_Accessor) {
    return *result_Accessor;
  }
  throw uci::base::UCIException("Error in getResult(): An attempt was made to get an optional field that was not enabled, call hasResult() to determine if it is safe to call getResult()");
}

const uci::type::QueryResultType& QueryDataRequestStatusMDT::getResult() const {
  return getResult_();
}

uci::type::QueryResultType& QueryDataRequestStatusMDT::getResult() {
  return getResult_();
}

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::setResult(const uci::type::QueryResultType& accessor) {
  enableResult();
  if (&accessor != result_Accessor.get()) {
    result_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryDataRequestStatusMDT::hasResult() const noexcept {
  return static_cast<bool>(result_Accessor);
}

uci::type::QueryResultType& QueryDataRequestStatusMDT::enableResult(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryResultType : type};
  if ((!result_Accessor) || (result_Accessor->getAccessorType() != requestedType)) {
    result_Accessor = QueryResultType::create(requestedType);
    if (!result_Accessor) {
      throw uci::base::UCIException("Error in enableResult(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *result_Accessor;
}

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::clearResult() noexcept {
  result_Accessor.reset();
  return *this;
}

uci::type::QueryPaginationType& QueryDataRequestStatusMDT::getQueryPagination_() const {
  if (queryPagination_Accessor) {
    return *queryPagination_Accessor;
  }
  throw uci::base::UCIException("Error in getQueryPagination(): An attempt was made to get an optional field that was not enabled, call hasQueryPagination() to determine if it is safe to call getQueryPagination()");
}

const uci::type::QueryPaginationType& QueryDataRequestStatusMDT::getQueryPagination() const {
  return getQueryPagination_();
}

uci::type::QueryPaginationType& QueryDataRequestStatusMDT::getQueryPagination() {
  return getQueryPagination_();
}

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::setQueryPagination(const uci::type::QueryPaginationType& accessor) {
  enableQueryPagination();
  if (&accessor != queryPagination_Accessor.get()) {
    queryPagination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryDataRequestStatusMDT::hasQueryPagination() const noexcept {
  return static_cast<bool>(queryPagination_Accessor);
}

uci::type::QueryPaginationType& QueryDataRequestStatusMDT::enableQueryPagination(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryPaginationType : type};
  if ((!queryPagination_Accessor) || (queryPagination_Accessor->getAccessorType() != requestedType)) {
    queryPagination_Accessor = QueryPaginationType::create(requestedType);
    if (!queryPagination_Accessor) {
      throw uci::base::UCIException("Error in enableQueryPagination(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *queryPagination_Accessor;
}

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::clearQueryPagination() noexcept {
  queryPagination_Accessor.reset();
  return *this;
}

std::unique_ptr<QueryDataRequestStatusMDT> QueryDataRequestStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryDataRequestStatusMDT : type};
  return (requestedType == uci::type::accessorType::queryDataRequestStatusMDT) ? boost::make_unique<QueryDataRequestStatusMDT>() : nullptr;
}

/**  */
namespace QueryDataRequestStatusMDT_Names {

constexpr const char* Extern_Type_Name{"QueryDataRequestStatusMDT"};
constexpr const char* CompletionStatus_Name{"CompletionStatus"};
constexpr const char* Result_Name{"Result"};
constexpr const char* QueryPagination_Name{"QueryPagination"};

} // namespace QueryDataRequestStatusMDT_Names

void QueryDataRequestStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryDataRequestStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = QueryDataRequestStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + QueryDataRequestStatusMDT_Names::CompletionStatus_Name) {
      CompletionStatusType::deserialize(valueType.second, accessor.enableCompletionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryDataRequestStatusMDT_Names::Result_Name) {
      QueryResultType::deserialize(valueType.second, accessor.enableResult(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryDataRequestStatusMDT_Names::QueryPagination_Name) {
      QueryPaginationType::deserialize(valueType.second, accessor.enableQueryPagination(), nodeName, nsPrefix);
    }
  }
  RequestStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string QueryDataRequestStatusMDT::serialize(const uci::type::QueryDataRequestStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? QueryDataRequestStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, QueryDataRequestStatusMDT_Names::Extern_Type_Name);
  }
  RequestStatusBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasCompletionStatus()) {
    CompletionStatusType::serialize(accessor.getCompletionStatus(), node, QueryDataRequestStatusMDT_Names::CompletionStatus_Name);
  }
  if (accessor.hasResult()) {
    QueryResultType::serialize(accessor.getResult(), node, QueryDataRequestStatusMDT_Names::Result_Name);
  }
  if (accessor.hasQueryPagination()) {
    QueryPaginationType::serialize(accessor.getQueryPagination(), node, QueryDataRequestStatusMDT_Names::QueryPagination_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::QueryDataRequestStatusMDT>().release());
}

uci::type::QueryDataRequestStatusMDT& QueryDataRequestStatusMDT::create(const uci::type::QueryDataRequestStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::QueryDataRequestStatusMDT> newAccessor{boost::make_unique<asb_uci::type::QueryDataRequestStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void QueryDataRequestStatusMDT::destroy(uci::type::QueryDataRequestStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::QueryDataRequestStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

