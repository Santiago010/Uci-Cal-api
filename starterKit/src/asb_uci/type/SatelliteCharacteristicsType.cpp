/** @file SatelliteCharacteristicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SatelliteCharacteristicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommFrequencyType.h"
#include "../../../include/asb_uci/type/FileMetadataID_Type.h"
#include "../../../include/asb_uci/type/ProductMetadataID_Type.h"
#include "../../../include/asb_uci/type/SOB_MissionTypeEnum.h"
#include "../../../include/asb_uci/type/SatellitePhysicalConfigurationType.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_MissionTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteCharacteristicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatellitePhysicalConfigurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SatelliteCharacteristicsType::SatelliteCharacteristicsType()
  : missionType_Accessor{boost::make_unique<MissionType>(0, 24)},
    physicalConfiguration_Accessor{boost::make_unique<PhysicalConfiguration>(0, SIZE_MAX)},
    characteristicsProductID_Accessor{boost::make_unique<CharacteristicsProductID>(0, SIZE_MAX)},
    characteristicsFileID_Accessor{boost::make_unique<CharacteristicsFileID>(0, SIZE_MAX)},
    commLink_Accessor{boost::make_unique<CommLink>(0, SIZE_MAX)} {
}

SatelliteCharacteristicsType::~SatelliteCharacteristicsType() = default;

void SatelliteCharacteristicsType::copy(const uci::type::SatelliteCharacteristicsType& accessor) {
  copyImpl(accessor, false);
}

void SatelliteCharacteristicsType::copyImpl(const uci::type::SatelliteCharacteristicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SatelliteCharacteristicsType&>(accessor);
    if (accessorImpl.busType_Accessor) {
      setBusType(*(accessorImpl.busType_Accessor));
    } else {
      busType_Accessor.reset();
    }
    setMissionType(*(accessorImpl.missionType_Accessor));
    if (accessorImpl.hasMass()) {
      setMass(accessorImpl.getMass());
    } else {
      clearMass();
    }
    setPhysicalConfiguration(*(accessorImpl.physicalConfiguration_Accessor));
    setCharacteristicsProductID(*(accessorImpl.characteristicsProductID_Accessor));
    setCharacteristicsFileID(*(accessorImpl.characteristicsFileID_Accessor));
    setCommLink(*(accessorImpl.commLink_Accessor));
  }
}

void SatelliteCharacteristicsType::reset() noexcept {
  busType_Accessor.reset();
  missionType_Accessor->reset();
  clearMass();
  physicalConfiguration_Accessor->reset();
  characteristicsProductID_Accessor->reset();
  characteristicsFileID_Accessor->reset();
  commLink_Accessor->reset();
}

uci::type::VisibleString256Type& SatelliteCharacteristicsType::getBusType_() const {
  if (busType_Accessor) {
    return *busType_Accessor;
  }
  throw uci::base::UCIException("Error in getBusType(): An attempt was made to get an optional field that was not enabled, call hasBusType() to determine if it is safe to call getBusType()");
}

const uci::type::VisibleString256Type& SatelliteCharacteristicsType::getBusType() const {
  return getBusType_();
}

uci::type::VisibleString256Type& SatelliteCharacteristicsType::getBusType() {
  return getBusType_();
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setBusType(const uci::type::VisibleString256Type& value) {
  return setBusType(value.c_str());
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setBusType(const std::string& value) {
  return setBusType(value.c_str());
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setBusType(const char* value) {
  enableBusType().setStringValue(value);
  return *this;
}

bool SatelliteCharacteristicsType::hasBusType() const noexcept {
  return static_cast<bool>(busType_Accessor);
}

uci::type::VisibleString256Type& SatelliteCharacteristicsType::enableBusType(uci::base::accessorType::AccessorType type) {
  if (!busType_Accessor) {
    busType_Accessor = boost::make_unique<std::string>("");
  }
  return *busType_Accessor;
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::clearBusType() noexcept {
  busType_Accessor.reset();
  return *this;
}

const uci::type::SatelliteCharacteristicsType::MissionType& SatelliteCharacteristicsType::getMissionType() const {
  return *missionType_Accessor;
}

uci::type::SatelliteCharacteristicsType::MissionType& SatelliteCharacteristicsType::getMissionType() {
  return *missionType_Accessor;
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setMissionType(const uci::type::SatelliteCharacteristicsType::MissionType& accessor) {
  if (&accessor != missionType_Accessor.get()) {
    missionType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MassTypeValue SatelliteCharacteristicsType::getMass() const {
  if (mass_Accessor) {
    return *mass_Accessor;
  }
  throw uci::base::UCIException("Error in getMass(): An attempt was made to get an optional field that was not enabled, call hasMass() to determine if it is safe to call getMass()");
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setMass(uci::type::MassTypeValue value) {
  mass_Accessor = value;
  return *this;
}

bool SatelliteCharacteristicsType::hasMass() const noexcept {
  return mass_Accessor.has_value();
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::clearMass() noexcept {
  mass_Accessor.reset();
  return *this;
}

const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& SatelliteCharacteristicsType::getPhysicalConfiguration() const {
  return *physicalConfiguration_Accessor;
}

uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& SatelliteCharacteristicsType::getPhysicalConfiguration() {
  return *physicalConfiguration_Accessor;
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setPhysicalConfiguration(const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& accessor) {
  if (&accessor != physicalConfiguration_Accessor.get()) {
    physicalConfiguration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& SatelliteCharacteristicsType::getCharacteristicsProductID() const {
  return *characteristicsProductID_Accessor;
}

uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& SatelliteCharacteristicsType::getCharacteristicsProductID() {
  return *characteristicsProductID_Accessor;
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setCharacteristicsProductID(const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& accessor) {
  if (&accessor != characteristicsProductID_Accessor.get()) {
    characteristicsProductID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& SatelliteCharacteristicsType::getCharacteristicsFileID() const {
  return *characteristicsFileID_Accessor;
}

uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& SatelliteCharacteristicsType::getCharacteristicsFileID() {
  return *characteristicsFileID_Accessor;
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setCharacteristicsFileID(const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& accessor) {
  if (&accessor != characteristicsFileID_Accessor.get()) {
    characteristicsFileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SatelliteCharacteristicsType::CommLink& SatelliteCharacteristicsType::getCommLink() const {
  return *commLink_Accessor;
}

uci::type::SatelliteCharacteristicsType::CommLink& SatelliteCharacteristicsType::getCommLink() {
  return *commLink_Accessor;
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::setCommLink(const uci::type::SatelliteCharacteristicsType::CommLink& accessor) {
  if (&accessor != commLink_Accessor.get()) {
    commLink_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SatelliteCharacteristicsType> SatelliteCharacteristicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteCharacteristicsType : type};
  return (requestedType == uci::type::accessorType::satelliteCharacteristicsType) ? boost::make_unique<SatelliteCharacteristicsType>() : nullptr;
}

/**  */
namespace SatelliteCharacteristicsType_Names {

constexpr const char* Extern_Type_Name{"SatelliteCharacteristicsType"};
constexpr const char* BusType_Name{"BusType"};
constexpr const char* MissionType_Name{"MissionType"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* PhysicalConfiguration_Name{"PhysicalConfiguration"};
constexpr const char* CharacteristicsProductID_Name{"CharacteristicsProductID"};
constexpr const char* CharacteristicsFileID_Name{"CharacteristicsFileID"};
constexpr const char* CommLink_Name{"CommLink"};

} // namespace SatelliteCharacteristicsType_Names

void SatelliteCharacteristicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SatelliteCharacteristicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SatelliteCharacteristicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsType_Names::BusType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBusType(*value);
      }
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsType_Names::MissionType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SatelliteCharacteristicsType::MissionType& boundedList = accessor.getMissionType();
        const uci::type::SatelliteCharacteristicsType::MissionType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsType_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsType_Names::PhysicalConfiguration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& boundedList = accessor.getPhysicalConfiguration();
        const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SatellitePhysicalConfigurationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsType_Names::CharacteristicsProductID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& boundedList = accessor.getCharacteristicsProductID();
        const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsType_Names::CharacteristicsFileID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& boundedList = accessor.getCharacteristicsFileID();
        const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsType_Names::CommLink_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SatelliteCharacteristicsType::CommLink& boundedList = accessor.getCommLink();
        const uci::type::SatelliteCharacteristicsType::CommLink::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommFrequencyType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SatelliteCharacteristicsType::serialize(const uci::type::SatelliteCharacteristicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SatelliteCharacteristicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SatelliteCharacteristicsType_Names::Extern_Type_Name);
  }
  if (accessor.hasBusType()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getBusType(), node, SatelliteCharacteristicsType_Names::BusType_Name);
  }
  {
    const uci::type::SatelliteCharacteristicsType::MissionType& boundedList = accessor.getMissionType();
    for (uci::type::SatelliteCharacteristicsType::MissionType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SOB_MissionTypeEnum::serialize(boundedList.at(i), node, SatelliteCharacteristicsType_Names::MissionType_Name, false);
    }
  }
  if (accessor.hasMass()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, SatelliteCharacteristicsType_Names::Mass_Name);
  }
  {
    const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& boundedList = accessor.getPhysicalConfiguration();
    for (uci::type::SatelliteCharacteristicsType::PhysicalConfiguration::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SatellitePhysicalConfigurationType::serialize(boundedList.at(i), node, SatelliteCharacteristicsType_Names::PhysicalConfiguration_Name);
    }
  }
  {
    const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& boundedList = accessor.getCharacteristicsProductID();
    for (uci::type::SatelliteCharacteristicsType::CharacteristicsProductID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, SatelliteCharacteristicsType_Names::CharacteristicsProductID_Name);
    }
  }
  {
    const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& boundedList = accessor.getCharacteristicsFileID();
    for (uci::type::SatelliteCharacteristicsType::CharacteristicsFileID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, SatelliteCharacteristicsType_Names::CharacteristicsFileID_Name);
    }
  }
  {
    const uci::type::SatelliteCharacteristicsType::CommLink& boundedList = accessor.getCommLink();
    for (uci::type::SatelliteCharacteristicsType::CommLink::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommFrequencyType::serialize(boundedList.at(i), node, SatelliteCharacteristicsType_Names::CommLink_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SatelliteCharacteristicsType>().release());
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsType::create(const uci::type::SatelliteCharacteristicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SatelliteCharacteristicsType> newAccessor{boost::make_unique<asb_uci::type::SatelliteCharacteristicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SatelliteCharacteristicsType::destroy(uci::type::SatelliteCharacteristicsType& accessor) {
  delete dynamic_cast<asb_uci::type::SatelliteCharacteristicsType*>(&accessor);
}

} // namespace type

} // namespace uci

