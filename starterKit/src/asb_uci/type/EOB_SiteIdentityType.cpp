/** @file EOB_SiteIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EOB_SiteIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AlphanumericString6Type.h"
#include "asb_uci/type/BasicEncyclopediaNumberType.h"
#include "asb_uci/type/EOB_IdentityBaseType.h"
#include "asb_uci/type/EOB_O_SuffixType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AlphanumericString6Type.h"
#include "uci/type/BasicEncyclopediaNumberType.h"
#include "uci/type/EOB_O_SuffixType.h"
#include "uci/type/EOB_SiteIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EOB_SiteIdentityType::EOB_SiteIdentityType() = default;

EOB_SiteIdentityType::~EOB_SiteIdentityType() = default;

void EOB_SiteIdentityType::copy(const uci::type::EOB_SiteIdentityType& accessor) {
  copyImpl(accessor, false);
}

void EOB_SiteIdentityType::copyImpl(const uci::type::EOB_SiteIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    EOB_IdentityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EOB_SiteIdentityType&>(accessor);
    if (accessorImpl.bE_Number_Accessor) {
      setBE_Number(*(accessorImpl.bE_Number_Accessor));
    } else {
      bE_Number_Accessor.reset();
    }
    if (accessorImpl.o_Suffix_Accessor) {
      setO_Suffix(*(accessorImpl.o_Suffix_Accessor));
    } else {
      o_Suffix_Accessor.reset();
    }
    if (accessorImpl.category_Accessor) {
      setCategory(*(accessorImpl.category_Accessor));
    } else {
      category_Accessor.reset();
    }
  }
}

void EOB_SiteIdentityType::reset() noexcept {
  EOB_IdentityBaseType::reset();
  bE_Number_Accessor.reset();
  o_Suffix_Accessor.reset();
  category_Accessor.reset();
}

uci::type::BasicEncyclopediaNumberType& EOB_SiteIdentityType::getBE_Number_() const {
  if (bE_Number_Accessor) {
    return *bE_Number_Accessor;
  }
  throw uci::base::UCIException("Error in getBE_Number(): An attempt was made to get an optional field that was not enabled, call hasBE_Number() to determine if it is safe to call getBE_Number()");
}

const uci::type::BasicEncyclopediaNumberType& EOB_SiteIdentityType::getBE_Number() const {
  return getBE_Number_();
}

uci::type::BasicEncyclopediaNumberType& EOB_SiteIdentityType::getBE_Number() {
  return getBE_Number_();
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::setBE_Number(const uci::type::BasicEncyclopediaNumberType& accessor) {
  enableBE_Number();
  if (&accessor != bE_Number_Accessor.get()) {
    bE_Number_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_SiteIdentityType::hasBE_Number() const noexcept {
  return static_cast<bool>(bE_Number_Accessor);
}

uci::type::BasicEncyclopediaNumberType& EOB_SiteIdentityType::enableBE_Number(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::basicEncyclopediaNumberType : type};
  if ((!bE_Number_Accessor) || (bE_Number_Accessor->getAccessorType() != requestedType)) {
    bE_Number_Accessor = BasicEncyclopediaNumberType::create(requestedType);
    if (!bE_Number_Accessor) {
      throw uci::base::UCIException("Error in enableBE_Number(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bE_Number_Accessor;
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::clearBE_Number() noexcept {
  bE_Number_Accessor.reset();
  return *this;
}

uci::type::EOB_O_SuffixType& EOB_SiteIdentityType::getO_Suffix_() const {
  if (o_Suffix_Accessor) {
    return *o_Suffix_Accessor;
  }
  throw uci::base::UCIException("Error in getO_Suffix(): An attempt was made to get an optional field that was not enabled, call hasO_Suffix() to determine if it is safe to call getO_Suffix()");
}

const uci::type::EOB_O_SuffixType& EOB_SiteIdentityType::getO_Suffix() const {
  return getO_Suffix_();
}

uci::type::EOB_O_SuffixType& EOB_SiteIdentityType::getO_Suffix() {
  return getO_Suffix_();
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::setO_Suffix(const uci::type::EOB_O_SuffixType& value) {
  return setO_Suffix(value.c_str());
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::setO_Suffix(const std::string& value) {
  return setO_Suffix(value.c_str());
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::setO_Suffix(const char* value) {
  enableO_Suffix().setStringValue(value);
  return *this;
}

bool EOB_SiteIdentityType::hasO_Suffix() const noexcept {
  return static_cast<bool>(o_Suffix_Accessor);
}

uci::type::EOB_O_SuffixType& EOB_SiteIdentityType::enableO_Suffix(uci::base::accessorType::AccessorType type) {
  if (!o_Suffix_Accessor) {
    o_Suffix_Accessor = EOB_O_SuffixType::create(type);
  }
  return *o_Suffix_Accessor;
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::clearO_Suffix() noexcept {
  o_Suffix_Accessor.reset();
  return *this;
}

uci::type::AlphanumericString6Type& EOB_SiteIdentityType::getCategory_() const {
  if (category_Accessor) {
    return *category_Accessor;
  }
  throw uci::base::UCIException("Error in getCategory(): An attempt was made to get an optional field that was not enabled, call hasCategory() to determine if it is safe to call getCategory()");
}

const uci::type::AlphanumericString6Type& EOB_SiteIdentityType::getCategory() const {
  return getCategory_();
}

uci::type::AlphanumericString6Type& EOB_SiteIdentityType::getCategory() {
  return getCategory_();
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::setCategory(const uci::type::AlphanumericString6Type& value) {
  return setCategory(value.c_str());
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::setCategory(const std::string& value) {
  return setCategory(value.c_str());
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::setCategory(const char* value) {
  enableCategory().setStringValue(value);
  return *this;
}

bool EOB_SiteIdentityType::hasCategory() const noexcept {
  return static_cast<bool>(category_Accessor);
}

uci::type::AlphanumericString6Type& EOB_SiteIdentityType::enableCategory(uci::base::accessorType::AccessorType type) {
  if (!category_Accessor) {
    category_Accessor = AlphanumericString6Type::create(type);
  }
  return *category_Accessor;
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::clearCategory() noexcept {
  category_Accessor.reset();
  return *this;
}

std::unique_ptr<EOB_SiteIdentityType> EOB_SiteIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_SiteIdentityType : type};
  return (requestedType == uci::type::accessorType::eOB_SiteIdentityType) ? boost::make_unique<EOB_SiteIdentityType>() : nullptr;
}

/**  */
namespace EOB_SiteIdentityType_Names {

constexpr const char* Extern_Type_Name{"EOB_SiteIdentityType"};
constexpr const char* BE_Number_Name{"BE_Number"};
constexpr const char* O_Suffix_Name{"O_Suffix"};
constexpr const char* Category_Name{"Category"};

} // namespace EOB_SiteIdentityType_Names

void EOB_SiteIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_SiteIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_SiteIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_SiteIdentityType_Names::BE_Number_Name) {
      BasicEncyclopediaNumberType::deserialize(valueType.second, accessor.enableBE_Number(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SiteIdentityType_Names::O_Suffix_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setO_Suffix(*value);
      }
    } else if (valueType.first == nsPrefix + EOB_SiteIdentityType_Names::Category_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCategory(*value);
      }
    }
  }
  EOB_IdentityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EOB_SiteIdentityType::serialize(const uci::type::EOB_SiteIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EOB_SiteIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_SiteIdentityType_Names::Extern_Type_Name);
  }
  EOB_IdentityBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasBE_Number()) {
    BasicEncyclopediaNumberType::serialize(accessor.getBE_Number(), node, EOB_SiteIdentityType_Names::BE_Number_Name);
  }
  if (accessor.hasO_Suffix()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getO_Suffix(), node, EOB_SiteIdentityType_Names::O_Suffix_Name);
  }
  if (accessor.hasCategory()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getCategory(), node, EOB_SiteIdentityType_Names::Category_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EOB_SiteIdentityType>().release());
}

uci::type::EOB_SiteIdentityType& EOB_SiteIdentityType::create(const uci::type::EOB_SiteIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EOB_SiteIdentityType> newAccessor{boost::make_unique<asb_uci::type::EOB_SiteIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EOB_SiteIdentityType::destroy(uci::type::EOB_SiteIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::EOB_SiteIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

