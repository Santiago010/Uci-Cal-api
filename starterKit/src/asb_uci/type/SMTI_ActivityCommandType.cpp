/** @file SMTI_ActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SMTI_ActivityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AtmosphericPropagationLossType.h"
#include "asb_uci/type/CapabilityCommandFrequencyType.h"
#include "asb_uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "asb_uci/type/ProductOutputCommandSMTI_Type.h"
#include "asb_uci/type/RadarPointingTargetType.h"
#include "asb_uci/type/RepetitionType.h"
#include "asb_uci/type/SMTI_CollectionConstraintsType.h"
#include "asb_uci/type/SMTI_CollectionOptionsType.h"
#include "asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "asb_uci/type/SurfaceTypeEnum.h"
#include "asb_uci/type/WeatherSeaStateEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AtmosphericPropagationLossType.h"
#include "uci/type/CapabilityCommandFrequencyType.h"
#include "uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "uci/type/ProductOutputCommandSMTI_Type.h"
#include "uci/type/RadarPointingTargetType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/SMTI_ActivityCommandType.h"
#include "uci/type/SMTI_CollectionConstraintsType.h"
#include "uci/type/SMTI_CollectionOptionsType.h"
#include "uci/type/SurfaceTypeEnum.h"
#include "uci/type/WeatherSeaStateEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SMTI_ActivityCommandType::SMTI_ActivityCommandType()
  : atmosphericPropagation_Accessor{boost::make_unique<AtmosphericPropagation>(0, SIZE_MAX)},
    productOutput_Accessor{boost::make_unique<ProductOutput>(0, SIZE_MAX)} {
}

SMTI_ActivityCommandType::~SMTI_ActivityCommandType() = default;

void SMTI_ActivityCommandType::copy(const uci::type::SMTI_ActivityCommandType& accessor) {
  copyImpl(accessor, false);
}

void SMTI_ActivityCommandType::copyImpl(const uci::type::SMTI_ActivityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureActivityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SMTI_ActivityCommandType&>(accessor);
    if (accessorImpl.hasAttempt()) {
      setAttempt(accessorImpl.getAttempt());
    } else {
      clearAttempt();
    }
    if (accessorImpl.temporalConstraints_Accessor) {
      setTemporalConstraints(*(accessorImpl.temporalConstraints_Accessor));
    } else {
      temporalConstraints_Accessor.reset();
    }
    if (accessorImpl.hasOverrideRejection()) {
      setOverrideRejection(accessorImpl.getOverrideRejection());
    } else {
      clearOverrideRejection();
    }
    if (accessorImpl.radarPointingTarget_Accessor) {
      setRadarPointingTarget(*(accessorImpl.radarPointingTarget_Accessor));
    } else {
      radarPointingTarget_Accessor.reset();
    }
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
    if (accessorImpl.collectionOptions_Accessor) {
      setCollectionOptions(*(accessorImpl.collectionOptions_Accessor));
    } else {
      collectionOptions_Accessor.reset();
    }
    if (accessorImpl.collectionConstraints_Accessor) {
      setCollectionConstraints(*(accessorImpl.collectionConstraints_Accessor));
    } else {
      collectionConstraints_Accessor.reset();
    }
    if (accessorImpl.hasCoefficientOfTroposphericRefraction()) {
      setCoefficientOfTroposphericRefraction(accessorImpl.getCoefficientOfTroposphericRefraction());
    } else {
      clearCoefficientOfTroposphericRefraction();
    }
    setAtmosphericPropagation(*(accessorImpl.atmosphericPropagation_Accessor));
    if (accessorImpl.seaState_Accessor) {
      setSeaState(*(accessorImpl.seaState_Accessor));
    } else {
      seaState_Accessor.reset();
    }
    if (accessorImpl.surfaceType_Accessor) {
      setSurfaceType(*(accessorImpl.surfaceType_Accessor));
    } else {
      surfaceType_Accessor.reset();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
    setProductOutput(*(accessorImpl.productOutput_Accessor));
  }
}

void SMTI_ActivityCommandType::reset() noexcept {
  SharedRF_ApertureActivityCommandBaseType::reset();
  clearAttempt();
  temporalConstraints_Accessor.reset();
  clearOverrideRejection();
  radarPointingTarget_Accessor.reset();
  frequency_Accessor.reset();
  collectionOptions_Accessor.reset();
  collectionConstraints_Accessor.reset();
  clearCoefficientOfTroposphericRefraction();
  atmosphericPropagation_Accessor->reset();
  seaState_Accessor.reset();
  surfaceType_Accessor.reset();
  repetition_Accessor.reset();
  productOutput_Accessor->reset();
}

xs::UnsignedInt SMTI_ActivityCommandType::getAttempt() const {
  if (attempt_Accessor) {
    return *attempt_Accessor;
  }
  throw uci::base::UCIException("Error in getAttempt(): An attempt was made to get an optional field that was not enabled, call hasAttempt() to determine if it is safe to call getAttempt()");
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setAttempt(xs::UnsignedInt value) {
  attempt_Accessor = value;
  return *this;
}

bool SMTI_ActivityCommandType::hasAttempt() const noexcept {
  return attempt_Accessor.has_value();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearAttempt() noexcept {
  attempt_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandTemporalConstraintsType& SMTI_ActivityCommandType::getTemporalConstraints_() const {
  if (temporalConstraints_Accessor) {
    return *temporalConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getTemporalConstraints(): An attempt was made to get an optional field that was not enabled, call hasTemporalConstraints() to determine if it is safe to call getTemporalConstraints()");
}

const uci::type::CapabilityCommandTemporalConstraintsType& SMTI_ActivityCommandType::getTemporalConstraints() const {
  return getTemporalConstraints_();
}

uci::type::CapabilityCommandTemporalConstraintsType& SMTI_ActivityCommandType::getTemporalConstraints() {
  return getTemporalConstraints_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setTemporalConstraints(const uci::type::CapabilityCommandTemporalConstraintsType& accessor) {
  enableTemporalConstraints();
  if (&accessor != temporalConstraints_Accessor.get()) {
    temporalConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityCommandType::hasTemporalConstraints() const noexcept {
  return static_cast<bool>(temporalConstraints_Accessor);
}

uci::type::CapabilityCommandTemporalConstraintsType& SMTI_ActivityCommandType::enableTemporalConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandTemporalConstraintsType : type};
  if ((!temporalConstraints_Accessor) || (temporalConstraints_Accessor->getAccessorType() != requestedType)) {
    temporalConstraints_Accessor = CapabilityCommandTemporalConstraintsType::create(requestedType);
    if (!temporalConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableTemporalConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *temporalConstraints_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearTemporalConstraints() noexcept {
  temporalConstraints_Accessor.reset();
  return *this;
}

xs::Boolean SMTI_ActivityCommandType::getOverrideRejection() const {
  if (overrideRejection_Accessor) {
    return *overrideRejection_Accessor;
  }
  throw uci::base::UCIException("Error in getOverrideRejection(): An attempt was made to get an optional field that was not enabled, call hasOverrideRejection() to determine if it is safe to call getOverrideRejection()");
}
 //  TODO:AtencionSetOverrideRejection
uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setOverrideRejection(xs::Boolean value) {
  overrideRejection_Accessor = value;
  return *this;
}

bool SMTI_ActivityCommandType::hasOverrideRejection() const noexcept {
  return overrideRejection_Accessor.has_value();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearOverrideRejection() noexcept {
  overrideRejection_Accessor.reset();
  return *this;
}

uci::type::RadarPointingTargetType& SMTI_ActivityCommandType::getRadarPointingTarget_() const {
  if (radarPointingTarget_Accessor) {
    return *radarPointingTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getRadarPointingTarget(): An attempt was made to get an optional field that was not enabled, call hasRadarPointingTarget() to determine if it is safe to call getRadarPointingTarget()");
}

const uci::type::RadarPointingTargetType& SMTI_ActivityCommandType::getRadarPointingTarget() const {
  return getRadarPointingTarget_();
}

uci::type::RadarPointingTargetType& SMTI_ActivityCommandType::getRadarPointingTarget() {
  return getRadarPointingTarget_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setRadarPointingTarget(const uci::type::RadarPointingTargetType& accessor) {
  enableRadarPointingTarget();
  if (&accessor != radarPointingTarget_Accessor.get()) {
    radarPointingTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityCommandType::hasRadarPointingTarget() const noexcept {
  return static_cast<bool>(radarPointingTarget_Accessor);
}

uci::type::RadarPointingTargetType& SMTI_ActivityCommandType::enableRadarPointingTarget(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarPointingTargetType : type};
  if ((!radarPointingTarget_Accessor) || (radarPointingTarget_Accessor->getAccessorType() != requestedType)) {
    radarPointingTarget_Accessor = RadarPointingTargetType::create(requestedType);
    if (!radarPointingTarget_Accessor) {
      throw uci::base::UCIException("Error in enableRadarPointingTarget(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *radarPointingTarget_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearRadarPointingTarget() noexcept {
  radarPointingTarget_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandFrequencyType& SMTI_ActivityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& SMTI_ActivityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& SMTI_ActivityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& SMTI_ActivityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

uci::type::SMTI_CollectionOptionsType& SMTI_ActivityCommandType::getCollectionOptions_() const {
  if (collectionOptions_Accessor) {
    return *collectionOptions_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionOptions(): An attempt was made to get an optional field that was not enabled, call hasCollectionOptions() to determine if it is safe to call getCollectionOptions()");
}

const uci::type::SMTI_CollectionOptionsType& SMTI_ActivityCommandType::getCollectionOptions() const {
  return getCollectionOptions_();
}

uci::type::SMTI_CollectionOptionsType& SMTI_ActivityCommandType::getCollectionOptions() {
  return getCollectionOptions_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setCollectionOptions(const uci::type::SMTI_CollectionOptionsType& accessor) {
  enableCollectionOptions();
  if (&accessor != collectionOptions_Accessor.get()) {
    collectionOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityCommandType::hasCollectionOptions() const noexcept {
  return static_cast<bool>(collectionOptions_Accessor);
}

uci::type::SMTI_CollectionOptionsType& SMTI_ActivityCommandType::enableCollectionOptions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_CollectionOptionsType : type};
  if ((!collectionOptions_Accessor) || (collectionOptions_Accessor->getAccessorType() != requestedType)) {
    collectionOptions_Accessor = SMTI_CollectionOptionsType::create(requestedType);
    if (!collectionOptions_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionOptions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionOptions_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearCollectionOptions() noexcept {
  collectionOptions_Accessor.reset();
  return *this;
}

uci::type::SMTI_CollectionConstraintsType& SMTI_ActivityCommandType::getCollectionConstraints_() const {
  if (collectionConstraints_Accessor) {
    return *collectionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionConstraints(): An attempt was made to get an optional field that was not enabled, call hasCollectionConstraints() to determine if it is safe to call getCollectionConstraints()");
}

const uci::type::SMTI_CollectionConstraintsType& SMTI_ActivityCommandType::getCollectionConstraints() const {
  return getCollectionConstraints_();
}

uci::type::SMTI_CollectionConstraintsType& SMTI_ActivityCommandType::getCollectionConstraints() {
  return getCollectionConstraints_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setCollectionConstraints(const uci::type::SMTI_CollectionConstraintsType& accessor) {
  enableCollectionConstraints();
  if (&accessor != collectionConstraints_Accessor.get()) {
    collectionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityCommandType::hasCollectionConstraints() const noexcept {
  return static_cast<bool>(collectionConstraints_Accessor);
}

uci::type::SMTI_CollectionConstraintsType& SMTI_ActivityCommandType::enableCollectionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_CollectionConstraintsType : type};
  if ((!collectionConstraints_Accessor) || (collectionConstraints_Accessor->getAccessorType() != requestedType)) {
    collectionConstraints_Accessor = SMTI_CollectionConstraintsType::create(requestedType);
    if (!collectionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionConstraints_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearCollectionConstraints() noexcept {
  collectionConstraints_Accessor.reset();
  return *this;
}

xs::Double SMTI_ActivityCommandType::getCoefficientOfTroposphericRefraction() const {
  if (coefficientOfTroposphericRefraction_Accessor) {
    return *coefficientOfTroposphericRefraction_Accessor;
  }
  throw uci::base::UCIException("Error in getCoefficientOfTroposphericRefraction(): An attempt was made to get an optional field that was not enabled, call hasCoefficientOfTroposphericRefraction() to determine if it is safe to call getCoefficientOfTroposphericRefraction()");
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setCoefficientOfTroposphericRefraction(xs::Double value) {
  coefficientOfTroposphericRefraction_Accessor = value;
  return *this;
}

bool SMTI_ActivityCommandType::hasCoefficientOfTroposphericRefraction() const noexcept {
  return coefficientOfTroposphericRefraction_Accessor.has_value();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearCoefficientOfTroposphericRefraction() noexcept {
  coefficientOfTroposphericRefraction_Accessor.reset();
  return *this;
}

const uci::type::SMTI_ActivityCommandType::AtmosphericPropagation& SMTI_ActivityCommandType::getAtmosphericPropagation() const {
  return *atmosphericPropagation_Accessor;
}

uci::type::SMTI_ActivityCommandType::AtmosphericPropagation& SMTI_ActivityCommandType::getAtmosphericPropagation() {
  return *atmosphericPropagation_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setAtmosphericPropagation(const uci::type::SMTI_ActivityCommandType::AtmosphericPropagation& accessor) {
  if (&accessor != atmosphericPropagation_Accessor.get()) {
    atmosphericPropagation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherSeaStateEnum& SMTI_ActivityCommandType::getSeaState_() const {
  if (seaState_Accessor) {
    return *seaState_Accessor;
  }
  throw uci::base::UCIException("Error in getSeaState(): An attempt was made to get an optional field that was not enabled, call hasSeaState() to determine if it is safe to call getSeaState()");
}

const uci::type::WeatherSeaStateEnum& SMTI_ActivityCommandType::getSeaState() const {
  return getSeaState_();
}

uci::type::WeatherSeaStateEnum& SMTI_ActivityCommandType::getSeaState() {
  return getSeaState_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setSeaState(const uci::type::WeatherSeaStateEnum& accessor) {
  enableSeaState();
  if (&accessor != seaState_Accessor.get()) {
    seaState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setSeaState(const uci::type::WeatherSeaStateEnum::EnumerationItem value) {
  enableSeaState().setValue(value);
  return *this;
}

bool SMTI_ActivityCommandType::hasSeaState() const noexcept {
  return static_cast<bool>(seaState_Accessor);
}

uci::type::WeatherSeaStateEnum& SMTI_ActivityCommandType::enableSeaState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherSeaStateEnum : type};
  if ((!seaState_Accessor) || (seaState_Accessor->getAccessorType() != requestedType)) {
    seaState_Accessor = WeatherSeaStateEnum::create(requestedType);
    if (!seaState_Accessor) {
      throw uci::base::UCIException("Error in enableSeaState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *seaState_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearSeaState() noexcept {
  seaState_Accessor.reset();
  return *this;
}

uci::type::SurfaceTypeEnum& SMTI_ActivityCommandType::getSurfaceType_() const {
  if (surfaceType_Accessor) {
    return *surfaceType_Accessor;
  }
  throw uci::base::UCIException("Error in getSurfaceType(): An attempt was made to get an optional field that was not enabled, call hasSurfaceType() to determine if it is safe to call getSurfaceType()");
}

const uci::type::SurfaceTypeEnum& SMTI_ActivityCommandType::getSurfaceType() const {
  return getSurfaceType_();
}

uci::type::SurfaceTypeEnum& SMTI_ActivityCommandType::getSurfaceType() {
  return getSurfaceType_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setSurfaceType(const uci::type::SurfaceTypeEnum& accessor) {
  enableSurfaceType();
  if (&accessor != surfaceType_Accessor.get()) {
    surfaceType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setSurfaceType(const uci::type::SurfaceTypeEnum::EnumerationItem value) {
  enableSurfaceType().setValue(value);
  return *this;
}

bool SMTI_ActivityCommandType::hasSurfaceType() const noexcept {
  return static_cast<bool>(surfaceType_Accessor);
}

uci::type::SurfaceTypeEnum& SMTI_ActivityCommandType::enableSurfaceType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::surfaceTypeEnum : type};
  if ((!surfaceType_Accessor) || (surfaceType_Accessor->getAccessorType() != requestedType)) {
    surfaceType_Accessor = SurfaceTypeEnum::create(requestedType);
    if (!surfaceType_Accessor) {
      throw uci::base::UCIException("Error in enableSurfaceType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *surfaceType_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearSurfaceType() noexcept {
  surfaceType_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& SMTI_ActivityCommandType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& SMTI_ActivityCommandType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& SMTI_ActivityCommandType::getRepetition() {
  return getRepetition_();
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_ActivityCommandType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& SMTI_ActivityCommandType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

const uci::type::SMTI_ActivityCommandType::ProductOutput& SMTI_ActivityCommandType::getProductOutput() const {
  return *productOutput_Accessor;
}

uci::type::SMTI_ActivityCommandType::ProductOutput& SMTI_ActivityCommandType::getProductOutput() {
  return *productOutput_Accessor;
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::setProductOutput(const uci::type::SMTI_ActivityCommandType::ProductOutput& accessor) {
  if (&accessor != productOutput_Accessor.get()) {
    productOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SMTI_ActivityCommandType> SMTI_ActivityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_ActivityCommandType : type};
  return (requestedType == uci::type::accessorType::sMTI_ActivityCommandType) ? boost::make_unique<SMTI_ActivityCommandType>() : nullptr;
}

/**  */
namespace SMTI_ActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"SMTI_ActivityCommandType"};
constexpr const char* Attempt_Name{"Attempt"};
constexpr const char* TemporalConstraints_Name{"TemporalConstraints"};
constexpr const char* OverrideRejection_Name{"OverrideRejection"};
constexpr const char* RadarPointingTarget_Name{"RadarPointingTarget"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* CollectionOptions_Name{"CollectionOptions"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* CoefficientOfTroposphericRefraction_Name{"CoefficientOfTroposphericRefraction"};
constexpr const char* AtmosphericPropagation_Name{"AtmosphericPropagation"};
constexpr const char* SeaState_Name{"SeaState"};
constexpr const char* SurfaceType_Name{"SurfaceType"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};

} // namespace SMTI_ActivityCommandType_Names

void SMTI_ActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SMTI_ActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::Attempt_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempt(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::TemporalConstraints_Name) {
      CapabilityCommandTemporalConstraintsType::deserialize(valueType.second, accessor.enableTemporalConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::OverrideRejection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
         //  TODO:AtencionSetOverrideRejection
        accessor.setOverrideRejection(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::RadarPointingTarget_Name) {
      RadarPointingTargetType::deserialize(valueType.second, accessor.enableRadarPointingTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::CollectionOptions_Name) {
      SMTI_CollectionOptionsType::deserialize(valueType.second, accessor.enableCollectionOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::CollectionConstraints_Name) {
      SMTI_CollectionConstraintsType::deserialize(valueType.second, accessor.enableCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::CoefficientOfTroposphericRefraction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCoefficientOfTroposphericRefraction(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::AtmosphericPropagation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_ActivityCommandType::AtmosphericPropagation& boundedList = accessor.getAtmosphericPropagation();
        const uci::type::SMTI_ActivityCommandType::AtmosphericPropagation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AtmosphericPropagationLossType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::SeaState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSeaState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::SurfaceType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSurfaceType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_ActivityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_ActivityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::SMTI_ActivityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductOutputCommandSMTI_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  SharedRF_ApertureActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SMTI_ActivityCommandType::serialize(const uci::type::SMTI_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SMTI_ActivityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SMTI_ActivityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasAttempt()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempt(), node, SMTI_ActivityCommandType_Names::Attempt_Name);
  }
  if (accessor.hasTemporalConstraints()) {
    CapabilityCommandTemporalConstraintsType::serialize(accessor.getTemporalConstraints(), node, SMTI_ActivityCommandType_Names::TemporalConstraints_Name);
  }
  if (accessor.hasOverrideRejection()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getOverrideRejection(), node, SMTI_ActivityCommandType_Names::OverrideRejection_Name);
  }
  if (accessor.hasRadarPointingTarget()) {
    RadarPointingTargetType::serialize(accessor.getRadarPointingTarget(), node, SMTI_ActivityCommandType_Names::RadarPointingTarget_Name);
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, SMTI_ActivityCommandType_Names::Frequency_Name);
  }
  if (accessor.hasCollectionOptions()) {
    SMTI_CollectionOptionsType::serialize(accessor.getCollectionOptions(), node, SMTI_ActivityCommandType_Names::CollectionOptions_Name);
  }
  if (accessor.hasCollectionConstraints()) {
    SMTI_CollectionConstraintsType::serialize(accessor.getCollectionConstraints(), node, SMTI_ActivityCommandType_Names::CollectionConstraints_Name);
  }
  if (accessor.hasCoefficientOfTroposphericRefraction()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCoefficientOfTroposphericRefraction(), node, SMTI_ActivityCommandType_Names::CoefficientOfTroposphericRefraction_Name);
  }
  {
    const uci::type::SMTI_ActivityCommandType::AtmosphericPropagation& boundedList = accessor.getAtmosphericPropagation();
    for (uci::type::SMTI_ActivityCommandType::AtmosphericPropagation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AtmosphericPropagationLossType::serialize(boundedList.at(i), node, SMTI_ActivityCommandType_Names::AtmosphericPropagation_Name);
    }
  }
  if (accessor.hasSeaState()) {
    WeatherSeaStateEnum::serialize(accessor.getSeaState(), node, SMTI_ActivityCommandType_Names::SeaState_Name, false);
  }
  if (accessor.hasSurfaceType()) {
    SurfaceTypeEnum::serialize(accessor.getSurfaceType(), node, SMTI_ActivityCommandType_Names::SurfaceType_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, SMTI_ActivityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::SMTI_ActivityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::SMTI_ActivityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputCommandSMTI_Type::serialize(boundedList.at(i), node, SMTI_ActivityCommandType_Names::ProductOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SMTI_ActivityCommandType>().release());
}

uci::type::SMTI_ActivityCommandType& SMTI_ActivityCommandType::create(const uci::type::SMTI_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SMTI_ActivityCommandType> newAccessor{boost::make_unique<asb_uci::type::SMTI_ActivityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SMTI_ActivityCommandType::destroy(uci::type::SMTI_ActivityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::SMTI_ActivityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

