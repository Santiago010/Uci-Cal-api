/** @file WeatherRadarActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WeatherRadarActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/AirVolumeSensorReferencedType.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/WeatherRadarActivityStatusDetailType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirVolumeSensorReferencedType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarActivityStatusDetailType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarActivityType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherRadarActivityType::WeatherRadarActivityType()
  : airVolume_Accessor{boost::make_unique<AirVolumeSensorReferencedType>()},
    electronicProtectionOptionsEmployed_Accessor{boost::make_unique<ElectronicProtectionOptionsEmployed>(0, SIZE_MAX)} {
}

WeatherRadarActivityType::~WeatherRadarActivityType() = default;

void WeatherRadarActivityType::copy(const uci::type::WeatherRadarActivityType& accessor) {
  copyImpl(accessor, false);
}

void WeatherRadarActivityType::copyImpl(const uci::type::WeatherRadarActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const WeatherRadarActivityType&>(accessor);
    if (accessorImpl.metrics_Accessor) {
      setMetrics(*(accessorImpl.metrics_Accessor));
    } else {
      metrics_Accessor.reset();
    }
    setAirVolume(*(accessorImpl.airVolume_Accessor));
    if (accessorImpl.hasPolicyApplied()) {
      setPolicyApplied(accessorImpl.getPolicyApplied());
    } else {
      clearPolicyApplied();
    }
    setAllProductsAndMessagesProduced(accessorImpl.allProductsAndMessagesProduced_Accessor);
    setElectronicProtectionOptionsEmployed(*(accessorImpl.electronicProtectionOptionsEmployed_Accessor));
  }
}

void WeatherRadarActivityType::reset() noexcept {
  ActivityBaseType::reset();
  metrics_Accessor.reset();
  airVolume_Accessor->reset();
  clearPolicyApplied();
  allProductsAndMessagesProduced_Accessor = false;
  electronicProtectionOptionsEmployed_Accessor->reset();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityType::getMetrics_() const {
  if (metrics_Accessor) {
    return *metrics_Accessor;
  }
  throw uci::base::UCIException("Error in getMetrics(): An attempt was made to get an optional field that was not enabled, call hasMetrics() to determine if it is safe to call getMetrics()");
}

const uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityType::getMetrics() const {
  return getMetrics_();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityType::getMetrics() {
  return getMetrics_();
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::setMetrics(const uci::type::WeatherRadarActivityStatusDetailType& accessor) {
  enableMetrics();
  if (&accessor != metrics_Accessor.get()) {
    metrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherRadarActivityType::hasMetrics() const noexcept {
  return static_cast<bool>(metrics_Accessor);
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityType::enableMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarActivityStatusDetailType : type};
  if ((!metrics_Accessor) || (metrics_Accessor->getAccessorType() != requestedType)) {
    metrics_Accessor = WeatherRadarActivityStatusDetailType::create(requestedType);
    if (!metrics_Accessor) {
      throw uci::base::UCIException("Error in enableMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metrics_Accessor;
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::clearMetrics() noexcept {
  metrics_Accessor.reset();
  return *this;
}

const uci::type::AirVolumeSensorReferencedType& WeatherRadarActivityType::getAirVolume() const {
  return *airVolume_Accessor;
}

uci::type::AirVolumeSensorReferencedType& WeatherRadarActivityType::getAirVolume() {
  return *airVolume_Accessor;
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::setAirVolume(const uci::type::AirVolumeSensorReferencedType& accessor) {
  if (&accessor != airVolume_Accessor.get()) {
    airVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean WeatherRadarActivityType::getPolicyApplied() const {
  if (policyApplied_Accessor) {
    return *policyApplied_Accessor;
  }
  throw uci::base::UCIException("Error in getPolicyApplied(): An attempt was made to get an optional field that was not enabled, call hasPolicyApplied() to determine if it is safe to call getPolicyApplied()");
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::setPolicyApplied(xs::Boolean value) {
  policyApplied_Accessor = value;
  return *this;
}

bool WeatherRadarActivityType::hasPolicyApplied() const noexcept {
  return policyApplied_Accessor.has_value();
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::clearPolicyApplied() noexcept {
  policyApplied_Accessor.reset();
  return *this;
}

xs::Boolean WeatherRadarActivityType::getAllProductsAndMessagesProduced() const {
  return allProductsAndMessagesProduced_Accessor;
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::setAllProductsAndMessagesProduced(xs::Boolean value) {
  allProductsAndMessagesProduced_Accessor = value;
  return *this;
}


const uci::type::WeatherRadarActivityType::ElectronicProtectionOptionsEmployed& WeatherRadarActivityType::getElectronicProtectionOptionsEmployed() const {
  return *electronicProtectionOptionsEmployed_Accessor;
}

uci::type::WeatherRadarActivityType::ElectronicProtectionOptionsEmployed& WeatherRadarActivityType::getElectronicProtectionOptionsEmployed() {
  return *electronicProtectionOptionsEmployed_Accessor;
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::setElectronicProtectionOptionsEmployed(const uci::type::WeatherRadarActivityType::ElectronicProtectionOptionsEmployed& accessor) {
  if (&accessor != electronicProtectionOptionsEmployed_Accessor.get()) {
    electronicProtectionOptionsEmployed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<WeatherRadarActivityType> WeatherRadarActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarActivityType : type};
  return (requestedType == uci::type::accessorType::weatherRadarActivityType) ? boost::make_unique<WeatherRadarActivityType>() : nullptr;
}

/**  */
namespace WeatherRadarActivityType_Names {

constexpr const char* Extern_Type_Name{"WeatherRadarActivityType"};
constexpr const char* Metrics_Name{"Metrics"};
constexpr const char* AirVolume_Name{"AirVolume"};
constexpr const char* PolicyApplied_Name{"PolicyApplied"};
constexpr const char* AllProductsAndMessagesProduced_Name{"AllProductsAndMessagesProduced"};
constexpr const char* ElectronicProtectionOptionsEmployed_Name{"ElectronicProtectionOptionsEmployed"};

} // namespace WeatherRadarActivityType_Names

void WeatherRadarActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherRadarActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherRadarActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherRadarActivityType_Names::Metrics_Name) {
      WeatherRadarActivityStatusDetailType::deserialize(valueType.second, accessor.enableMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarActivityType_Names::AirVolume_Name) {
      AirVolumeSensorReferencedType::deserialize(valueType.second, accessor.getAirVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarActivityType_Names::PolicyApplied_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPolicyApplied(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityType_Names::AllProductsAndMessagesProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAllProductsAndMessagesProduced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityType_Names::ElectronicProtectionOptionsEmployed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherRadarActivityType::ElectronicProtectionOptionsEmployed& boundedList = accessor.getElectronicProtectionOptionsEmployed();
        const uci::type::WeatherRadarActivityType::ElectronicProtectionOptionsEmployed::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string WeatherRadarActivityType::serialize(const uci::type::WeatherRadarActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherRadarActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherRadarActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasMetrics()) {
    WeatherRadarActivityStatusDetailType::serialize(accessor.getMetrics(), node, WeatherRadarActivityType_Names::Metrics_Name);
  }
  AirVolumeSensorReferencedType::serialize(accessor.getAirVolume(), node, WeatherRadarActivityType_Names::AirVolume_Name);
  if (accessor.hasPolicyApplied()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPolicyApplied(), node, WeatherRadarActivityType_Names::PolicyApplied_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAllProductsAndMessagesProduced(), node, WeatherRadarActivityType_Names::AllProductsAndMessagesProduced_Name);
  {
    const uci::type::WeatherRadarActivityType::ElectronicProtectionOptionsEmployed& boundedList = accessor.getElectronicProtectionOptionsEmployed();
    for (uci::type::WeatherRadarActivityType::ElectronicProtectionOptionsEmployed::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, WeatherRadarActivityType_Names::ElectronicProtectionOptionsEmployed_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherRadarActivityType>().release());
}

uci::type::WeatherRadarActivityType& WeatherRadarActivityType::create(const uci::type::WeatherRadarActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherRadarActivityType> newAccessor{boost::make_unique<asb_uci::type::WeatherRadarActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherRadarActivityType::destroy(uci::type::WeatherRadarActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherRadarActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

