/** @file TurretCommandChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TurretCommandChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FixedPointingEnum.h"
#include "../../../include/asb_uci/type/LOS_D_Type.h"
#include "../../../include/asb_uci/type/PO_AirTargetVolumeCommandType.h"
#include "../../../include/asb_uci/type/TargetType.h"
#include "../../../include/asb_uci/type/TurretCommandPositionType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FixedPointingEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS_D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_AirTargetVolumeCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TurretCommandChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TurretCommandPositionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TurretCommandChoiceType::TurretCommandChoiceType() = default;

TurretCommandChoiceType::~TurretCommandChoiceType() = default;

void TurretCommandChoiceType::copy(const uci::type::TurretCommandChoiceType& accessor) {
  copyImpl(accessor, false);
}

void TurretCommandChoiceType::copyImpl(const uci::type::TurretCommandChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TurretCommandChoiceType&>(accessor);
    if (accessorImpl.fixedMode_Accessor) {
      setFixedMode(*(accessorImpl.fixedMode_Accessor));
    } else {
      fixedMode_Accessor.reset();
    }
    if (accessorImpl.position_Accessor) {
      setPosition(*(accessorImpl.position_Accessor));
    } else {
      position_Accessor.reset();
    }
    if (accessorImpl.lOS_Position_Accessor) {
      setLOS_Position(*(accessorImpl.lOS_Position_Accessor));
    } else {
      lOS_Position_Accessor.reset();
    }
    if (accessorImpl.volume_Accessor) {
      setVolume(*(accessorImpl.volume_Accessor));
    } else {
      volume_Accessor.reset();
    }
    if (accessorImpl.geospatial_Accessor) {
      setGeospatial(*(accessorImpl.geospatial_Accessor));
    } else {
      geospatial_Accessor.reset();
    }
  }
}

void TurretCommandChoiceType::reset() noexcept {
  fixedMode_Accessor.reset();
  position_Accessor.reset();
  lOS_Position_Accessor.reset();
  volume_Accessor.reset();
  geospatial_Accessor.reset();
}

uci::type::TurretCommandChoiceType::TurretCommandChoiceTypeChoice TurretCommandChoiceType::getTurretCommandChoiceTypeChoiceOrdinal() const noexcept {
  if (fixedMode_Accessor) {
    return TURRETCOMMANDCHOICETYPE_CHOICE_FIXEDMODE;
  }
  if (position_Accessor) {
    return TURRETCOMMANDCHOICETYPE_CHOICE_POSITION;
  }
  if (lOS_Position_Accessor) {
    return TURRETCOMMANDCHOICETYPE_CHOICE_LOS_POSITION;
  }
  if (volume_Accessor) {
    return TURRETCOMMANDCHOICETYPE_CHOICE_VOLUME;
  }
  if (geospatial_Accessor) {
    return TURRETCOMMANDCHOICETYPE_CHOICE_GEOSPATIAL;
  }
  return TURRETCOMMANDCHOICETYPE_CHOICE_NONE;
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::setTurretCommandChoiceTypeChoiceOrdinal(uci::type::TurretCommandChoiceType::TurretCommandChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case TURRETCOMMANDCHOICETYPE_CHOICE_FIXEDMODE:
      chooseFixedMode("setTurretCommandChoiceTypeChoiceOrdinal", type);
      break;
    case TURRETCOMMANDCHOICETYPE_CHOICE_POSITION:
      choosePosition("setTurretCommandChoiceTypeChoiceOrdinal", type);
      break;
    case TURRETCOMMANDCHOICETYPE_CHOICE_LOS_POSITION:
      chooseLOS_Position("setTurretCommandChoiceTypeChoiceOrdinal", type);
      break;
    case TURRETCOMMANDCHOICETYPE_CHOICE_VOLUME:
      chooseVolume("setTurretCommandChoiceTypeChoiceOrdinal", type);
      break;
    case TURRETCOMMANDCHOICETYPE_CHOICE_GEOSPATIAL:
      chooseGeospatial("setTurretCommandChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setTurretCommandChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FixedPointingEnum& TurretCommandChoiceType::getFixedMode_() const {
  if (fixedMode_Accessor) {
    return *fixedMode_Accessor;
  }
  throw uci::base::UCIException("Error in getFixedMode(): Unable to get FixedMode, field not selected");
}

const uci::type::FixedPointingEnum& TurretCommandChoiceType::getFixedMode() const {
  return getFixedMode_();
}

uci::type::FixedPointingEnum& TurretCommandChoiceType::getFixedMode() {
  return getFixedMode_();
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::setFixedMode(const uci::type::FixedPointingEnum& accessor) {
  chooseFixedMode();
  if (&accessor != fixedMode_Accessor.get()) {
    fixedMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::setFixedMode(uci::type::FixedPointingEnum::EnumerationItem value) {
  chooseFixedMode().setValue(value);
  return *this;
}

bool TurretCommandChoiceType::isFixedMode() const noexcept {
  return static_cast<bool>(fixedMode_Accessor);
}

uci::type::FixedPointingEnum& TurretCommandChoiceType::chooseFixedMode(const std::string& method, uci::base::accessorType::AccessorType type) {
  position_Accessor.reset();
  lOS_Position_Accessor.reset();
  volume_Accessor.reset();
  geospatial_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fixedPointingEnum : type};
  if ((!fixedMode_Accessor) || (fixedMode_Accessor->getAccessorType() != requestedType)) {
    fixedMode_Accessor = FixedPointingEnum::create(type);
    if (!fixedMode_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fixedMode_Accessor;
}

uci::type::FixedPointingEnum& TurretCommandChoiceType::chooseFixedMode(uci::base::accessorType::AccessorType type) {
  return chooseFixedMode("chooseFixedMode", type);
}

uci::type::TurretCommandPositionType& TurretCommandChoiceType::getPosition_() const {
  if (position_Accessor) {
    return *position_Accessor;
  }
  throw uci::base::UCIException("Error in getPosition(): Unable to get Position, field not selected");
}

const uci::type::TurretCommandPositionType& TurretCommandChoiceType::getPosition() const {
  return getPosition_();
}

uci::type::TurretCommandPositionType& TurretCommandChoiceType::getPosition() {
  return getPosition_();
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::setPosition(const uci::type::TurretCommandPositionType& accessor) {
  choosePosition();
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TurretCommandChoiceType::isPosition() const noexcept {
  return static_cast<bool>(position_Accessor);
}

uci::type::TurretCommandPositionType& TurretCommandChoiceType::choosePosition(const std::string& method, uci::base::accessorType::AccessorType type) {
  fixedMode_Accessor.reset();
  lOS_Position_Accessor.reset();
  volume_Accessor.reset();
  geospatial_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turretCommandPositionType : type};
  if ((!position_Accessor) || (position_Accessor->getAccessorType() != requestedType)) {
    position_Accessor = TurretCommandPositionType::create(type);
    if (!position_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *position_Accessor;
}

uci::type::TurretCommandPositionType& TurretCommandChoiceType::choosePosition(uci::base::accessorType::AccessorType type) {
  return choosePosition("choosePosition", type);
}

uci::type::LOS_D_Type& TurretCommandChoiceType::getLOS_Position_() const {
  if (lOS_Position_Accessor) {
    return *lOS_Position_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_Position(): Unable to get LOS_Position, field not selected");
}

const uci::type::LOS_D_Type& TurretCommandChoiceType::getLOS_Position() const {
  return getLOS_Position_();
}

uci::type::LOS_D_Type& TurretCommandChoiceType::getLOS_Position() {
  return getLOS_Position_();
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::setLOS_Position(const uci::type::LOS_D_Type& accessor) {
  chooseLOS_Position(accessor.getAccessorType());
  if (&accessor != lOS_Position_Accessor.get()) {
    lOS_Position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TurretCommandChoiceType::isLOS_Position() const noexcept {
  return static_cast<bool>(lOS_Position_Accessor);
}

uci::type::LOS_D_Type& TurretCommandChoiceType::chooseLOS_Position(const std::string& method, uci::base::accessorType::AccessorType type) {
  fixedMode_Accessor.reset();
  position_Accessor.reset();
  volume_Accessor.reset();
  geospatial_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_D_Type : type};
  if ((!lOS_Position_Accessor) || (lOS_Position_Accessor->getAccessorType() != requestedType)) {
    lOS_Position_Accessor = LOS_D_Type::create(type);
    if (!lOS_Position_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_Position_Accessor;
}

uci::type::LOS_D_Type& TurretCommandChoiceType::chooseLOS_Position(uci::base::accessorType::AccessorType type) {
  return chooseLOS_Position("chooseLOS_Position", type);
}

uci::type::PO_AirTargetVolumeCommandType& TurretCommandChoiceType::getVolume_() const {
  if (volume_Accessor) {
    return *volume_Accessor;
  }
  throw uci::base::UCIException("Error in getVolume(): Unable to get Volume, field not selected");
}

const uci::type::PO_AirTargetVolumeCommandType& TurretCommandChoiceType::getVolume() const {
  return getVolume_();
}

uci::type::PO_AirTargetVolumeCommandType& TurretCommandChoiceType::getVolume() {
  return getVolume_();
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::setVolume(const uci::type::PO_AirTargetVolumeCommandType& accessor) {
  chooseVolume(accessor.getAccessorType());
  if (&accessor != volume_Accessor.get()) {
    volume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TurretCommandChoiceType::isVolume() const noexcept {
  return static_cast<bool>(volume_Accessor);
}

uci::type::PO_AirTargetVolumeCommandType& TurretCommandChoiceType::chooseVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  fixedMode_Accessor.reset();
  position_Accessor.reset();
  lOS_Position_Accessor.reset();
  geospatial_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AirTargetVolumeCommandType : type};
  if ((!volume_Accessor) || (volume_Accessor->getAccessorType() != requestedType)) {
    volume_Accessor = PO_AirTargetVolumeCommandType::create(type);
    if (!volume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *volume_Accessor;
}

uci::type::PO_AirTargetVolumeCommandType& TurretCommandChoiceType::chooseVolume(uci::base::accessorType::AccessorType type) {
  return chooseVolume("chooseVolume", type);
}

uci::type::TargetType& TurretCommandChoiceType::getGeospatial_() const {
  if (geospatial_Accessor) {
    return *geospatial_Accessor;
  }
  throw uci::base::UCIException("Error in getGeospatial(): Unable to get Geospatial, field not selected");
}

const uci::type::TargetType& TurretCommandChoiceType::getGeospatial() const {
  return getGeospatial_();
}

uci::type::TargetType& TurretCommandChoiceType::getGeospatial() {
  return getGeospatial_();
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::setGeospatial(const uci::type::TargetType& accessor) {
  chooseGeospatial(accessor.getAccessorType());
  if (&accessor != geospatial_Accessor.get()) {
    geospatial_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TurretCommandChoiceType::isGeospatial() const noexcept {
  return static_cast<bool>(geospatial_Accessor);
}

uci::type::TargetType& TurretCommandChoiceType::chooseGeospatial(const std::string& method, uci::base::accessorType::AccessorType type) {
  fixedMode_Accessor.reset();
  position_Accessor.reset();
  lOS_Position_Accessor.reset();
  volume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetType : type};
  if ((!geospatial_Accessor) || (geospatial_Accessor->getAccessorType() != requestedType)) {
    geospatial_Accessor = TargetType::create(type);
    if (!geospatial_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geospatial_Accessor;
}

uci::type::TargetType& TurretCommandChoiceType::chooseGeospatial(uci::base::accessorType::AccessorType type) {
  return chooseGeospatial("chooseGeospatial", type);
}

std::unique_ptr<TurretCommandChoiceType> TurretCommandChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turretCommandChoiceType : type};
  return (requestedType == uci::type::accessorType::turretCommandChoiceType) ? boost::make_unique<TurretCommandChoiceType>() : nullptr;
}

/**  */
namespace TurretCommandChoiceType_Names {

constexpr const char* Extern_Type_Name{"TurretCommandChoiceType"};
constexpr const char* FixedMode_Name{"FixedMode"};
constexpr const char* Position_Name{"Position"};
constexpr const char* LOS_Position_Name{"LOS_Position"};
constexpr const char* Volume_Name{"Volume"};
constexpr const char* Geospatial_Name{"Geospatial"};

} // namespace TurretCommandChoiceType_Names

void TurretCommandChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TurretCommandChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TurretCommandChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TurretCommandChoiceType_Names::FixedMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseFixedMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + TurretCommandChoiceType_Names::Position_Name) {
      TurretCommandPositionType::deserialize(valueType.second, accessor.choosePosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurretCommandChoiceType_Names::LOS_Position_Name) {
      LOS_D_Type::deserialize(valueType.second, accessor.chooseLOS_Position(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurretCommandChoiceType_Names::Volume_Name) {
      PO_AirTargetVolumeCommandType::deserialize(valueType.second, accessor.chooseVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurretCommandChoiceType_Names::Geospatial_Name) {
      TargetType::deserialize(valueType.second, accessor.chooseGeospatial(), nodeName, nsPrefix);
    }
  }
}

std::string TurretCommandChoiceType::serialize(const uci::type::TurretCommandChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TurretCommandChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TurretCommandChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isFixedMode()) {
    FixedPointingEnum::serialize(accessor.getFixedMode(), node, TurretCommandChoiceType_Names::FixedMode_Name, false);
  } else if (accessor.isPosition()) {
    TurretCommandPositionType::serialize(accessor.getPosition(), node, TurretCommandChoiceType_Names::Position_Name);
  } else if (accessor.isLOS_Position()) {
    LOS_D_Type::serialize(accessor.getLOS_Position(), node, TurretCommandChoiceType_Names::LOS_Position_Name);
  } else if (accessor.isVolume()) {
    PO_AirTargetVolumeCommandType::serialize(accessor.getVolume(), node, TurretCommandChoiceType_Names::Volume_Name);
  } else if (accessor.isGeospatial()) {
    TargetType::serialize(accessor.getGeospatial(), node, TurretCommandChoiceType_Names::Geospatial_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TurretCommandChoiceType>().release());
}

uci::type::TurretCommandChoiceType& TurretCommandChoiceType::create(const uci::type::TurretCommandChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TurretCommandChoiceType> newAccessor{boost::make_unique<asb_uci::type::TurretCommandChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TurretCommandChoiceType::destroy(uci::type::TurretCommandChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::TurretCommandChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

