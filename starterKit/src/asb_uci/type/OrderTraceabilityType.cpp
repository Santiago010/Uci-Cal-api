/** @file OrderTraceabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrderTraceabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ACO_FileTraceabilityType.h"
#include "../../../include/asb_uci/type/ACTDF_FileTraceabilityType.h"
#include "../../../include/asb_uci/type/AOCO_TraceabilityType.h"
#include "../../../include/asb_uci/type/ATO_FileTraceabilityType.h"
#include "../../../include/asb_uci/type/CollectionDeckTraceabilityType.h"
#include "../../../include/asb_uci/type/FileMetadataID_Type.h"
#include "../../../include/asb_uci/type/ROME_IdentityType.h"
#include "../../../include/asb_uci/type/RSTA_FileTraceabilityType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ACO_FileTraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ACTDF_FileTraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AOCO_TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ATO_FileTraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CollectionDeckTraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrderTraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ROME_IdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RSTA_FileTraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrderTraceabilityType::OrderTraceabilityType()
  : orderSourceID_Accessor{boost::make_unique<SystemID_Type>()},
    aTO_Accessor{boost::make_unique<ATO>(0, SIZE_MAX)},
    aCO_Accessor{boost::make_unique<ACO>(0, SIZE_MAX)},
    aCTDF_Accessor{boost::make_unique<ACTDF>(0, SIZE_MAX)},
    rSTA_Accessor{boost::make_unique<RSTA>(0, SIZE_MAX)},
    rOME_Identifier_Accessor{boost::make_unique<ROME_Identifier>(0, SIZE_MAX)},
    collectionDeck_Accessor{boost::make_unique<CollectionDeck>(0, SIZE_MAX)},
    aOCO_Accessor{boost::make_unique<AOCO>(0, SIZE_MAX)},
    sOD_ID_Accessor{boost::make_unique<SOD_ID>(0, SIZE_MAX)},
    mSP_ID_Accessor{boost::make_unique<MSP_ID>(0, SIZE_MAX)},
    iSSP_ID_Accessor{boost::make_unique<ISSP_ID>(0, SIZE_MAX)},
    jIPTL_ID_Accessor{boost::make_unique<JIPTL_ID>(0, SIZE_MAX)},
    jSTO_ID_Accessor{boost::make_unique<JSTO_ID>(0, SIZE_MAX)},
    pLANORD_ID_Accessor{boost::make_unique<PLANORD_ID>(0, SIZE_MAX)},
    oPORD_ID_Accessor{boost::make_unique<OPORD_ID>(0, SIZE_MAX)},
    wARNORD_ID_Accessor{boost::make_unique<WARNORD_ID>(0, SIZE_MAX)},
    dEPORD_ID_Accessor{boost::make_unique<DEPORD_ID>(0, SIZE_MAX)},
    aLERTORD_ID_Accessor{boost::make_unique<ALERTORD_ID>(0, SIZE_MAX)},
    fRAGORD_ID_Accessor{boost::make_unique<FRAGORD_ID>(0, SIZE_MAX)},
    eXORD_ID_Accessor{boost::make_unique<EXORD_ID>(0, SIZE_MAX)},
    sPINS_ID_Accessor{boost::make_unique<SPINS_ID>(0, SIZE_MAX)},
    cOMMANDERS_INTENT_ID_Accessor{boost::make_unique<COMMANDERS_INTENT_ID>(0, SIZE_MAX)},
    oTHER_FILE_ID_Accessor{boost::make_unique<OTHER_FILE_ID>(0, SIZE_MAX)} {
}

OrderTraceabilityType::~OrderTraceabilityType() = default;

void OrderTraceabilityType::copy(const uci::type::OrderTraceabilityType& accessor) {
  copyImpl(accessor, false);
}

void OrderTraceabilityType::copyImpl(const uci::type::OrderTraceabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrderTraceabilityType&>(accessor);
    setOrderSourceID(*(accessorImpl.orderSourceID_Accessor));
    setATO(*(accessorImpl.aTO_Accessor));
    setACO(*(accessorImpl.aCO_Accessor));
    setACTDF(*(accessorImpl.aCTDF_Accessor));
    setRSTA(*(accessorImpl.rSTA_Accessor));
    setROME_Identifier(*(accessorImpl.rOME_Identifier_Accessor));
    setCollectionDeck(*(accessorImpl.collectionDeck_Accessor));
    setAOCO(*(accessorImpl.aOCO_Accessor));
    setSOD_ID(*(accessorImpl.sOD_ID_Accessor));
    setMSP_ID(*(accessorImpl.mSP_ID_Accessor));
    setISSP_ID(*(accessorImpl.iSSP_ID_Accessor));
    setJIPTL_ID(*(accessorImpl.jIPTL_ID_Accessor));
    setJSTO_ID(*(accessorImpl.jSTO_ID_Accessor));
    setPLANORD_ID(*(accessorImpl.pLANORD_ID_Accessor));
    setOPORD_ID(*(accessorImpl.oPORD_ID_Accessor));
    setWARNORD_ID(*(accessorImpl.wARNORD_ID_Accessor));
    setDEPORD_ID(*(accessorImpl.dEPORD_ID_Accessor));
    setALERTORD_ID(*(accessorImpl.aLERTORD_ID_Accessor));
    setFRAGORD_ID(*(accessorImpl.fRAGORD_ID_Accessor));
    setEXORD_ID(*(accessorImpl.eXORD_ID_Accessor));
    setSPINS_ID(*(accessorImpl.sPINS_ID_Accessor));
    setCOMMANDERS_INTENT_ID(*(accessorImpl.cOMMANDERS_INTENT_ID_Accessor));
    setOTHER_FILE_ID(*(accessorImpl.oTHER_FILE_ID_Accessor));
  }
}

void OrderTraceabilityType::reset() noexcept {
  orderSourceID_Accessor->reset();
  aTO_Accessor->reset();
  aCO_Accessor->reset();
  aCTDF_Accessor->reset();
  rSTA_Accessor->reset();
  rOME_Identifier_Accessor->reset();
  collectionDeck_Accessor->reset();
  aOCO_Accessor->reset();
  sOD_ID_Accessor->reset();
  mSP_ID_Accessor->reset();
  iSSP_ID_Accessor->reset();
  jIPTL_ID_Accessor->reset();
  jSTO_ID_Accessor->reset();
  pLANORD_ID_Accessor->reset();
  oPORD_ID_Accessor->reset();
  wARNORD_ID_Accessor->reset();
  dEPORD_ID_Accessor->reset();
  aLERTORD_ID_Accessor->reset();
  fRAGORD_ID_Accessor->reset();
  eXORD_ID_Accessor->reset();
  sPINS_ID_Accessor->reset();
  cOMMANDERS_INTENT_ID_Accessor->reset();
  oTHER_FILE_ID_Accessor->reset();
}

const uci::type::SystemID_Type& OrderTraceabilityType::getOrderSourceID() const {
  return *orderSourceID_Accessor;
}

uci::type::SystemID_Type& OrderTraceabilityType::getOrderSourceID() {
  return *orderSourceID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setOrderSourceID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != orderSourceID_Accessor.get()) {
    orderSourceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::ATO& OrderTraceabilityType::getATO() const {
  return *aTO_Accessor;
}

uci::type::OrderTraceabilityType::ATO& OrderTraceabilityType::getATO() {
  return *aTO_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setATO(const uci::type::OrderTraceabilityType::ATO& accessor) {
  if (&accessor != aTO_Accessor.get()) {
    aTO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::ACO& OrderTraceabilityType::getACO() const {
  return *aCO_Accessor;
}

uci::type::OrderTraceabilityType::ACO& OrderTraceabilityType::getACO() {
  return *aCO_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setACO(const uci::type::OrderTraceabilityType::ACO& accessor) {
  if (&accessor != aCO_Accessor.get()) {
    aCO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::ACTDF& OrderTraceabilityType::getACTDF() const {
  return *aCTDF_Accessor;
}

uci::type::OrderTraceabilityType::ACTDF& OrderTraceabilityType::getACTDF() {
  return *aCTDF_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setACTDF(const uci::type::OrderTraceabilityType::ACTDF& accessor) {
  if (&accessor != aCTDF_Accessor.get()) {
    aCTDF_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::RSTA& OrderTraceabilityType::getRSTA() const {
  return *rSTA_Accessor;
}

uci::type::OrderTraceabilityType::RSTA& OrderTraceabilityType::getRSTA() {
  return *rSTA_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setRSTA(const uci::type::OrderTraceabilityType::RSTA& accessor) {
  if (&accessor != rSTA_Accessor.get()) {
    rSTA_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::ROME_Identifier& OrderTraceabilityType::getROME_Identifier() const {
  return *rOME_Identifier_Accessor;
}

uci::type::OrderTraceabilityType::ROME_Identifier& OrderTraceabilityType::getROME_Identifier() {
  return *rOME_Identifier_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setROME_Identifier(const uci::type::OrderTraceabilityType::ROME_Identifier& accessor) {
  if (&accessor != rOME_Identifier_Accessor.get()) {
    rOME_Identifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::CollectionDeck& OrderTraceabilityType::getCollectionDeck() const {
  return *collectionDeck_Accessor;
}

uci::type::OrderTraceabilityType::CollectionDeck& OrderTraceabilityType::getCollectionDeck() {
  return *collectionDeck_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setCollectionDeck(const uci::type::OrderTraceabilityType::CollectionDeck& accessor) {
  if (&accessor != collectionDeck_Accessor.get()) {
    collectionDeck_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::AOCO& OrderTraceabilityType::getAOCO() const {
  return *aOCO_Accessor;
}

uci::type::OrderTraceabilityType::AOCO& OrderTraceabilityType::getAOCO() {
  return *aOCO_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setAOCO(const uci::type::OrderTraceabilityType::AOCO& accessor) {
  if (&accessor != aOCO_Accessor.get()) {
    aOCO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::SOD_ID& OrderTraceabilityType::getSOD_ID() const {
  return *sOD_ID_Accessor;
}

uci::type::OrderTraceabilityType::SOD_ID& OrderTraceabilityType::getSOD_ID() {
  return *sOD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setSOD_ID(const uci::type::OrderTraceabilityType::SOD_ID& accessor) {
  if (&accessor != sOD_ID_Accessor.get()) {
    sOD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::MSP_ID& OrderTraceabilityType::getMSP_ID() const {
  return *mSP_ID_Accessor;
}

uci::type::OrderTraceabilityType::MSP_ID& OrderTraceabilityType::getMSP_ID() {
  return *mSP_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setMSP_ID(const uci::type::OrderTraceabilityType::MSP_ID& accessor) {
  if (&accessor != mSP_ID_Accessor.get()) {
    mSP_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::ISSP_ID& OrderTraceabilityType::getISSP_ID() const {
  return *iSSP_ID_Accessor;
}

uci::type::OrderTraceabilityType::ISSP_ID& OrderTraceabilityType::getISSP_ID() {
  return *iSSP_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setISSP_ID(const uci::type::OrderTraceabilityType::ISSP_ID& accessor) {
  if (&accessor != iSSP_ID_Accessor.get()) {
    iSSP_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::JIPTL_ID& OrderTraceabilityType::getJIPTL_ID() const {
  return *jIPTL_ID_Accessor;
}

uci::type::OrderTraceabilityType::JIPTL_ID& OrderTraceabilityType::getJIPTL_ID() {
  return *jIPTL_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setJIPTL_ID(const uci::type::OrderTraceabilityType::JIPTL_ID& accessor) {
  if (&accessor != jIPTL_ID_Accessor.get()) {
    jIPTL_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::JSTO_ID& OrderTraceabilityType::getJSTO_ID() const {
  return *jSTO_ID_Accessor;
}

uci::type::OrderTraceabilityType::JSTO_ID& OrderTraceabilityType::getJSTO_ID() {
  return *jSTO_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setJSTO_ID(const uci::type::OrderTraceabilityType::JSTO_ID& accessor) {
  if (&accessor != jSTO_ID_Accessor.get()) {
    jSTO_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::PLANORD_ID& OrderTraceabilityType::getPLANORD_ID() const {
  return *pLANORD_ID_Accessor;
}

uci::type::OrderTraceabilityType::PLANORD_ID& OrderTraceabilityType::getPLANORD_ID() {
  return *pLANORD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setPLANORD_ID(const uci::type::OrderTraceabilityType::PLANORD_ID& accessor) {
  if (&accessor != pLANORD_ID_Accessor.get()) {
    pLANORD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::OPORD_ID& OrderTraceabilityType::getOPORD_ID() const {
  return *oPORD_ID_Accessor;
}

uci::type::OrderTraceabilityType::OPORD_ID& OrderTraceabilityType::getOPORD_ID() {
  return *oPORD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setOPORD_ID(const uci::type::OrderTraceabilityType::OPORD_ID& accessor) {
  if (&accessor != oPORD_ID_Accessor.get()) {
    oPORD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::WARNORD_ID& OrderTraceabilityType::getWARNORD_ID() const {
  return *wARNORD_ID_Accessor;
}

uci::type::OrderTraceabilityType::WARNORD_ID& OrderTraceabilityType::getWARNORD_ID() {
  return *wARNORD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setWARNORD_ID(const uci::type::OrderTraceabilityType::WARNORD_ID& accessor) {
  if (&accessor != wARNORD_ID_Accessor.get()) {
    wARNORD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::DEPORD_ID& OrderTraceabilityType::getDEPORD_ID() const {
  return *dEPORD_ID_Accessor;
}

uci::type::OrderTraceabilityType::DEPORD_ID& OrderTraceabilityType::getDEPORD_ID() {
  return *dEPORD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setDEPORD_ID(const uci::type::OrderTraceabilityType::DEPORD_ID& accessor) {
  if (&accessor != dEPORD_ID_Accessor.get()) {
    dEPORD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::ALERTORD_ID& OrderTraceabilityType::getALERTORD_ID() const {
  return *aLERTORD_ID_Accessor;
}

uci::type::OrderTraceabilityType::ALERTORD_ID& OrderTraceabilityType::getALERTORD_ID() {
  return *aLERTORD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setALERTORD_ID(const uci::type::OrderTraceabilityType::ALERTORD_ID& accessor) {
  if (&accessor != aLERTORD_ID_Accessor.get()) {
    aLERTORD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::FRAGORD_ID& OrderTraceabilityType::getFRAGORD_ID() const {
  return *fRAGORD_ID_Accessor;
}

uci::type::OrderTraceabilityType::FRAGORD_ID& OrderTraceabilityType::getFRAGORD_ID() {
  return *fRAGORD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setFRAGORD_ID(const uci::type::OrderTraceabilityType::FRAGORD_ID& accessor) {
  if (&accessor != fRAGORD_ID_Accessor.get()) {
    fRAGORD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::EXORD_ID& OrderTraceabilityType::getEXORD_ID() const {
  return *eXORD_ID_Accessor;
}

uci::type::OrderTraceabilityType::EXORD_ID& OrderTraceabilityType::getEXORD_ID() {
  return *eXORD_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setEXORD_ID(const uci::type::OrderTraceabilityType::EXORD_ID& accessor) {
  if (&accessor != eXORD_ID_Accessor.get()) {
    eXORD_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::SPINS_ID& OrderTraceabilityType::getSPINS_ID() const {
  return *sPINS_ID_Accessor;
}

uci::type::OrderTraceabilityType::SPINS_ID& OrderTraceabilityType::getSPINS_ID() {
  return *sPINS_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setSPINS_ID(const uci::type::OrderTraceabilityType::SPINS_ID& accessor) {
  if (&accessor != sPINS_ID_Accessor.get()) {
    sPINS_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& OrderTraceabilityType::getCOMMANDERS_INTENT_ID() const {
  return *cOMMANDERS_INTENT_ID_Accessor;
}

uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& OrderTraceabilityType::getCOMMANDERS_INTENT_ID() {
  return *cOMMANDERS_INTENT_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setCOMMANDERS_INTENT_ID(const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& accessor) {
  if (&accessor != cOMMANDERS_INTENT_ID_Accessor.get()) {
    cOMMANDERS_INTENT_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderTraceabilityType::OTHER_FILE_ID& OrderTraceabilityType::getOTHER_FILE_ID() const {
  return *oTHER_FILE_ID_Accessor;
}

uci::type::OrderTraceabilityType::OTHER_FILE_ID& OrderTraceabilityType::getOTHER_FILE_ID() {
  return *oTHER_FILE_ID_Accessor;
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::setOTHER_FILE_ID(const uci::type::OrderTraceabilityType::OTHER_FILE_ID& accessor) {
  if (&accessor != oTHER_FILE_ID_Accessor.get()) {
    oTHER_FILE_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<OrderTraceabilityType> OrderTraceabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orderTraceabilityType : type};
  return (requestedType == uci::type::accessorType::orderTraceabilityType) ? boost::make_unique<OrderTraceabilityType>() : nullptr;
}

/**  */
namespace OrderTraceabilityType_Names {

constexpr const char* Extern_Type_Name{"OrderTraceabilityType"};
constexpr const char* OrderSourceID_Name{"OrderSourceID"};
constexpr const char* ATO_Name{"ATO"};
constexpr const char* ACO_Name{"ACO"};
constexpr const char* ACTDF_Name{"ACTDF"};
constexpr const char* RSTA_Name{"RSTA"};
constexpr const char* ROME_Identifier_Name{"ROME_Identifier"};
constexpr const char* CollectionDeck_Name{"CollectionDeck"};
constexpr const char* AOCO_Name{"AOCO"};
constexpr const char* SOD_ID_Name{"SOD_ID"};
constexpr const char* MSP_ID_Name{"MSP_ID"};
constexpr const char* ISSP_ID_Name{"ISSP_ID"};
constexpr const char* JIPTL_ID_Name{"JIPTL_ID"};
constexpr const char* JSTO_ID_Name{"JSTO_ID"};
constexpr const char* PLANORD_ID_Name{"PLANORD_ID"};
constexpr const char* OPORD_ID_Name{"OPORD_ID"};
constexpr const char* WARNORD_ID_Name{"WARNORD_ID"};
constexpr const char* DEPORD_ID_Name{"DEPORD_ID"};
constexpr const char* ALERTORD_ID_Name{"ALERTORD_ID"};
constexpr const char* FRAGORD_ID_Name{"FRAGORD_ID"};
constexpr const char* EXORD_ID_Name{"EXORD_ID"};
constexpr const char* SPINS_ID_Name{"SPINS_ID"};
constexpr const char* COMMANDERS_INTENT_ID_Name{"COMMANDERS_INTENT_ID"};
constexpr const char* OTHER_FILE_ID_Name{"OTHER_FILE_ID"};

} // namespace OrderTraceabilityType_Names

void OrderTraceabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrderTraceabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrderTraceabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::OrderSourceID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getOrderSourceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ATO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ATO& boundedList = accessor.getATO();
        const uci::type::OrderTraceabilityType::ATO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ATO_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ACO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ACO& boundedList = accessor.getACO();
        const uci::type::OrderTraceabilityType::ACO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ACO_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ACTDF_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ACTDF& boundedList = accessor.getACTDF();
        const uci::type::OrderTraceabilityType::ACTDF::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ACTDF_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::RSTA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::RSTA& boundedList = accessor.getRSTA();
        const uci::type::OrderTraceabilityType::RSTA::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RSTA_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ROME_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ROME_Identifier& boundedList = accessor.getROME_Identifier();
        const uci::type::OrderTraceabilityType::ROME_Identifier::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::CollectionDeck_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::CollectionDeck& boundedList = accessor.getCollectionDeck();
        const uci::type::OrderTraceabilityType::CollectionDeck::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CollectionDeckTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::AOCO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::AOCO& boundedList = accessor.getAOCO();
        const uci::type::OrderTraceabilityType::AOCO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AOCO_TraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::SOD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::SOD_ID& boundedList = accessor.getSOD_ID();
        const uci::type::OrderTraceabilityType::SOD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::MSP_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::MSP_ID& boundedList = accessor.getMSP_ID();
        const uci::type::OrderTraceabilityType::MSP_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ISSP_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ISSP_ID& boundedList = accessor.getISSP_ID();
        const uci::type::OrderTraceabilityType::ISSP_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::JIPTL_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::JIPTL_ID& boundedList = accessor.getJIPTL_ID();
        const uci::type::OrderTraceabilityType::JIPTL_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::JSTO_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::JSTO_ID& boundedList = accessor.getJSTO_ID();
        const uci::type::OrderTraceabilityType::JSTO_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::PLANORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::PLANORD_ID& boundedList = accessor.getPLANORD_ID();
        const uci::type::OrderTraceabilityType::PLANORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::OPORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::OPORD_ID& boundedList = accessor.getOPORD_ID();
        const uci::type::OrderTraceabilityType::OPORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::WARNORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::WARNORD_ID& boundedList = accessor.getWARNORD_ID();
        const uci::type::OrderTraceabilityType::WARNORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::DEPORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::DEPORD_ID& boundedList = accessor.getDEPORD_ID();
        const uci::type::OrderTraceabilityType::DEPORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ALERTORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ALERTORD_ID& boundedList = accessor.getALERTORD_ID();
        const uci::type::OrderTraceabilityType::ALERTORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::FRAGORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::FRAGORD_ID& boundedList = accessor.getFRAGORD_ID();
        const uci::type::OrderTraceabilityType::FRAGORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::EXORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::EXORD_ID& boundedList = accessor.getEXORD_ID();
        const uci::type::OrderTraceabilityType::EXORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::SPINS_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::SPINS_ID& boundedList = accessor.getSPINS_ID();
        const uci::type::OrderTraceabilityType::SPINS_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::COMMANDERS_INTENT_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& boundedList = accessor.getCOMMANDERS_INTENT_ID();
        const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::OTHER_FILE_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::OTHER_FILE_ID& boundedList = accessor.getOTHER_FILE_ID();
        const uci::type::OrderTraceabilityType::OTHER_FILE_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string OrderTraceabilityType::serialize(const uci::type::OrderTraceabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrderTraceabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrderTraceabilityType_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getOrderSourceID(), node, OrderTraceabilityType_Names::OrderSourceID_Name);
  {
    const uci::type::OrderTraceabilityType::ATO& boundedList = accessor.getATO();
    for (uci::type::OrderTraceabilityType::ATO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ATO_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ATO_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ACO& boundedList = accessor.getACO();
    for (uci::type::OrderTraceabilityType::ACO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ACO_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ACO_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ACTDF& boundedList = accessor.getACTDF();
    for (uci::type::OrderTraceabilityType::ACTDF::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ACTDF_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ACTDF_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::RSTA& boundedList = accessor.getRSTA();
    for (uci::type::OrderTraceabilityType::RSTA::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RSTA_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::RSTA_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ROME_Identifier& boundedList = accessor.getROME_Identifier();
    for (uci::type::OrderTraceabilityType::ROME_Identifier::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, OrderTraceabilityType_Names::ROME_Identifier_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::CollectionDeck& boundedList = accessor.getCollectionDeck();
    for (uci::type::OrderTraceabilityType::CollectionDeck::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CollectionDeckTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::CollectionDeck_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::AOCO& boundedList = accessor.getAOCO();
    for (uci::type::OrderTraceabilityType::AOCO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AOCO_TraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::AOCO_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::SOD_ID& boundedList = accessor.getSOD_ID();
    for (uci::type::OrderTraceabilityType::SOD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::SOD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::MSP_ID& boundedList = accessor.getMSP_ID();
    for (uci::type::OrderTraceabilityType::MSP_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::MSP_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ISSP_ID& boundedList = accessor.getISSP_ID();
    for (uci::type::OrderTraceabilityType::ISSP_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ISSP_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::JIPTL_ID& boundedList = accessor.getJIPTL_ID();
    for (uci::type::OrderTraceabilityType::JIPTL_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::JIPTL_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::JSTO_ID& boundedList = accessor.getJSTO_ID();
    for (uci::type::OrderTraceabilityType::JSTO_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::JSTO_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::PLANORD_ID& boundedList = accessor.getPLANORD_ID();
    for (uci::type::OrderTraceabilityType::PLANORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::PLANORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::OPORD_ID& boundedList = accessor.getOPORD_ID();
    for (uci::type::OrderTraceabilityType::OPORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::OPORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::WARNORD_ID& boundedList = accessor.getWARNORD_ID();
    for (uci::type::OrderTraceabilityType::WARNORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::WARNORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::DEPORD_ID& boundedList = accessor.getDEPORD_ID();
    for (uci::type::OrderTraceabilityType::DEPORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::DEPORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ALERTORD_ID& boundedList = accessor.getALERTORD_ID();
    for (uci::type::OrderTraceabilityType::ALERTORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ALERTORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::FRAGORD_ID& boundedList = accessor.getFRAGORD_ID();
    for (uci::type::OrderTraceabilityType::FRAGORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::FRAGORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::EXORD_ID& boundedList = accessor.getEXORD_ID();
    for (uci::type::OrderTraceabilityType::EXORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::EXORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::SPINS_ID& boundedList = accessor.getSPINS_ID();
    for (uci::type::OrderTraceabilityType::SPINS_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::SPINS_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& boundedList = accessor.getCOMMANDERS_INTENT_ID();
    for (uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::COMMANDERS_INTENT_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::OTHER_FILE_ID& boundedList = accessor.getOTHER_FILE_ID();
    for (uci::type::OrderTraceabilityType::OTHER_FILE_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::OTHER_FILE_ID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrderTraceabilityType& OrderTraceabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrderTraceabilityType>().release());
}

uci::type::OrderTraceabilityType& OrderTraceabilityType::create(const uci::type::OrderTraceabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrderTraceabilityType> newAccessor{boost::make_unique<asb_uci::type::OrderTraceabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrderTraceabilityType::destroy(uci::type::OrderTraceabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::OrderTraceabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

