/** @file OrbitalElementSetSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalElementSetSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityOrbitalElementSetID_Type.h"
#include "asb_uci/type/SystemOrbitalElementSetID_Type.h"
#include "asb_uci/type/TLE_BaseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityOrbitalElementSetID_Type.h"
#include "uci/type/OrbitalElementSetSourceType.h"
#include "uci/type/SystemOrbitalElementSetID_Type.h"
#include "uci/type/TLE_BaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalElementSetSourceType::OrbitalElementSetSourceType() = default;

OrbitalElementSetSourceType::~OrbitalElementSetSourceType() = default;

void OrbitalElementSetSourceType::copy(const uci::type::OrbitalElementSetSourceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalElementSetSourceType::copyImpl(const uci::type::OrbitalElementSetSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalElementSetSourceType&>(accessor);
    if (accessorImpl.systemElementSetID_Accessor) {
      setSystemElementSetID(*(accessorImpl.systemElementSetID_Accessor));
    } else {
      systemElementSetID_Accessor.reset();
    }
    if (accessorImpl.entityElementSetID_Accessor) {
      setEntityElementSetID(*(accessorImpl.entityElementSetID_Accessor));
    } else {
      entityElementSetID_Accessor.reset();
    }
    if (accessorImpl.explicitElementSet_Accessor) {
      setExplicitElementSet(*(accessorImpl.explicitElementSet_Accessor));
    } else {
      explicitElementSet_Accessor.reset();
    }
  }
}

void OrbitalElementSetSourceType::reset() noexcept {
  systemElementSetID_Accessor.reset();
  entityElementSetID_Accessor.reset();
  explicitElementSet_Accessor.reset();
}

uci::type::OrbitalElementSetSourceType::OrbitalElementSetSourceTypeChoice OrbitalElementSetSourceType::getOrbitalElementSetSourceTypeChoiceOrdinal() const noexcept {
  if (systemElementSetID_Accessor) {
    return ORBITALELEMENTSETSOURCETYPE_CHOICE_SYSTEMELEMENTSETID;
  }
  if (entityElementSetID_Accessor) {
    return ORBITALELEMENTSETSOURCETYPE_CHOICE_ENTITYELEMENTSETID;
  }
  if (explicitElementSet_Accessor) {
    return ORBITALELEMENTSETSOURCETYPE_CHOICE_EXPLICITELEMENTSET;
  }
  return ORBITALELEMENTSETSOURCETYPE_CHOICE_NONE;
}

uci::type::OrbitalElementSetSourceType& OrbitalElementSetSourceType::setOrbitalElementSetSourceTypeChoiceOrdinal(uci::type::OrbitalElementSetSourceType::OrbitalElementSetSourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALELEMENTSETSOURCETYPE_CHOICE_SYSTEMELEMENTSETID:
      chooseSystemElementSetID("setOrbitalElementSetSourceTypeChoiceOrdinal", type);
      break;
    case ORBITALELEMENTSETSOURCETYPE_CHOICE_ENTITYELEMENTSETID:
      chooseEntityElementSetID("setOrbitalElementSetSourceTypeChoiceOrdinal", type);
      break;
    case ORBITALELEMENTSETSOURCETYPE_CHOICE_EXPLICITELEMENTSET:
      chooseExplicitElementSet("setOrbitalElementSetSourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalElementSetSourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SystemOrbitalElementSetID_Type& OrbitalElementSetSourceType::getSystemElementSetID_() const {
  if (systemElementSetID_Accessor) {
    return *systemElementSetID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemElementSetID(): Unable to get SystemElementSetID, field not selected");
}

const uci::type::SystemOrbitalElementSetID_Type& OrbitalElementSetSourceType::getSystemElementSetID() const {
  return getSystemElementSetID_();
}

uci::type::SystemOrbitalElementSetID_Type& OrbitalElementSetSourceType::getSystemElementSetID() {
  return getSystemElementSetID_();
}

uci::type::OrbitalElementSetSourceType& OrbitalElementSetSourceType::setSystemElementSetID(const uci::type::SystemOrbitalElementSetID_Type& accessor) {
  chooseSystemElementSetID();
  if (&accessor != systemElementSetID_Accessor.get()) {
    systemElementSetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalElementSetSourceType::isSystemElementSetID() const noexcept {
  return static_cast<bool>(systemElementSetID_Accessor);
}

uci::type::SystemOrbitalElementSetID_Type& OrbitalElementSetSourceType::chooseSystemElementSetID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityElementSetID_Accessor.reset();
  explicitElementSet_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitalElementSetID_Type : type};
  if ((!systemElementSetID_Accessor) || (systemElementSetID_Accessor->getAccessorType() != requestedType)) {
    systemElementSetID_Accessor = SystemOrbitalElementSetID_Type::create(type);
    if (!systemElementSetID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemElementSetID_Accessor;
}

uci::type::SystemOrbitalElementSetID_Type& OrbitalElementSetSourceType::chooseSystemElementSetID(uci::base::accessorType::AccessorType type) {
  return chooseSystemElementSetID("chooseSystemElementSetID", type);
}

uci::type::EntityOrbitalElementSetID_Type& OrbitalElementSetSourceType::getEntityElementSetID_() const {
  if (entityElementSetID_Accessor) {
    return *entityElementSetID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityElementSetID(): Unable to get EntityElementSetID, field not selected");
}

const uci::type::EntityOrbitalElementSetID_Type& OrbitalElementSetSourceType::getEntityElementSetID() const {
  return getEntityElementSetID_();
}

uci::type::EntityOrbitalElementSetID_Type& OrbitalElementSetSourceType::getEntityElementSetID() {
  return getEntityElementSetID_();
}

uci::type::OrbitalElementSetSourceType& OrbitalElementSetSourceType::setEntityElementSetID(const uci::type::EntityOrbitalElementSetID_Type& accessor) {
  chooseEntityElementSetID();
  if (&accessor != entityElementSetID_Accessor.get()) {
    entityElementSetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalElementSetSourceType::isEntityElementSetID() const noexcept {
  return static_cast<bool>(entityElementSetID_Accessor);
}

uci::type::EntityOrbitalElementSetID_Type& OrbitalElementSetSourceType::chooseEntityElementSetID(const std::string& method, uci::base::accessorType::AccessorType type) {
  systemElementSetID_Accessor.reset();
  explicitElementSet_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalElementSetID_Type : type};
  if ((!entityElementSetID_Accessor) || (entityElementSetID_Accessor->getAccessorType() != requestedType)) {
    entityElementSetID_Accessor = EntityOrbitalElementSetID_Type::create(type);
    if (!entityElementSetID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityElementSetID_Accessor;
}

uci::type::EntityOrbitalElementSetID_Type& OrbitalElementSetSourceType::chooseEntityElementSetID(uci::base::accessorType::AccessorType type) {
  return chooseEntityElementSetID("chooseEntityElementSetID", type);
}

uci::type::TLE_BaseType& OrbitalElementSetSourceType::getExplicitElementSet_() const {
  if (explicitElementSet_Accessor) {
    return *explicitElementSet_Accessor;
  }
  throw uci::base::UCIException("Error in getExplicitElementSet(): Unable to get ExplicitElementSet, field not selected");
}

const uci::type::TLE_BaseType& OrbitalElementSetSourceType::getExplicitElementSet() const {
  return getExplicitElementSet_();
}

uci::type::TLE_BaseType& OrbitalElementSetSourceType::getExplicitElementSet() {
  return getExplicitElementSet_();
}

uci::type::OrbitalElementSetSourceType& OrbitalElementSetSourceType::setExplicitElementSet(const uci::type::TLE_BaseType& accessor) {
  chooseExplicitElementSet("setExplicitElementSet", accessor.getAccessorType());
  if (&accessor != explicitElementSet_Accessor.get()) {
    explicitElementSet_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitalElementSetSourceType::isExplicitElementSet() const noexcept {
  return static_cast<bool>(explicitElementSet_Accessor);
}

uci::type::TLE_BaseType& OrbitalElementSetSourceType::chooseExplicitElementSet(const std::string& method, uci::base::accessorType::AccessorType type) {
  systemElementSetID_Accessor.reset();
  entityElementSetID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tLE_BaseType : type};
  if ((!explicitElementSet_Accessor) || (explicitElementSet_Accessor->getAccessorType() != requestedType)) {
    explicitElementSet_Accessor = TLE_BaseType::create(type);
    if (!explicitElementSet_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *explicitElementSet_Accessor;
}

uci::type::TLE_BaseType& OrbitalElementSetSourceType::chooseExplicitElementSet(uci::base::accessorType::AccessorType type) {
  return chooseExplicitElementSet("chooseExplicitElementSet", type);
}

std::unique_ptr<OrbitalElementSetSourceType> OrbitalElementSetSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalElementSetSourceType : type};
  return (requestedType == uci::type::accessorType::orbitalElementSetSourceType) ? boost::make_unique<OrbitalElementSetSourceType>() : nullptr;
}

/**  */
namespace OrbitalElementSetSourceType_Names {

constexpr const char* Extern_Type_Name{"OrbitalElementSetSourceType"};
constexpr const char* SystemElementSetID_Name{"SystemElementSetID"};
constexpr const char* EntityElementSetID_Name{"EntityElementSetID"};
constexpr const char* ExplicitElementSet_Name{"ExplicitElementSet"};

} // namespace OrbitalElementSetSourceType_Names

void OrbitalElementSetSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalElementSetSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalElementSetSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalElementSetSourceType_Names::SystemElementSetID_Name) {
      SystemOrbitalElementSetID_Type::deserialize(valueType.second, accessor.chooseSystemElementSetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalElementSetSourceType_Names::EntityElementSetID_Name) {
      EntityOrbitalElementSetID_Type::deserialize(valueType.second, accessor.chooseEntityElementSetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalElementSetSourceType_Names::ExplicitElementSet_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseExplicitElementSet(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalElementSetSourceType::serialize(const uci::type::OrbitalElementSetSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalElementSetSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalElementSetSourceType_Names::Extern_Type_Name);
  }
  if (accessor.isSystemElementSetID()) {
    SystemOrbitalElementSetID_Type::serialize(accessor.getSystemElementSetID(), node, OrbitalElementSetSourceType_Names::SystemElementSetID_Name);
  } else if (accessor.isEntityElementSetID()) {
    EntityOrbitalElementSetID_Type::serialize(accessor.getEntityElementSetID(), node, OrbitalElementSetSourceType_Names::EntityElementSetID_Name);
  } else if (accessor.isExplicitElementSet()) {
    TLE_BaseType::serialize(accessor.getExplicitElementSet(), node, OrbitalElementSetSourceType_Names::ExplicitElementSet_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalElementSetSourceType& OrbitalElementSetSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalElementSetSourceType>().release());
}

uci::type::OrbitalElementSetSourceType& OrbitalElementSetSourceType::create(const uci::type::OrbitalElementSetSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalElementSetSourceType> newAccessor{boost::make_unique<asb_uci::type::OrbitalElementSetSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalElementSetSourceType::destroy(uci::type::OrbitalElementSetSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalElementSetSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

