/** @file DesignationDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DesignationDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DesignationEnum.h"
#include "../../../include/asb_uci/type/DesignationID_Type.h"
#include "../../../include/asb_uci/type/RequirementTaxonomyType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/TargetType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DesignationDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DesignationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DesignationID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementTaxonomyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DesignationDataType::DesignationDataType()
  : designationID_Accessor{boost::make_unique<DesignationID_Type>()},
    target_Accessor{boost::make_unique<TargetType>()},
    typeOfDesignation_Accessor{boost::make_unique<DesignationEnum>()},
    applicableSystemID_Accessor{boost::make_unique<ApplicableSystemID>(0, SIZE_MAX)} {
}

DesignationDataType::~DesignationDataType() = default;

void DesignationDataType::copy(const uci::type::DesignationDataType& accessor) {
  copyImpl(accessor, false);
}

void DesignationDataType::copyImpl(const uci::type::DesignationDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DesignationDataType&>(accessor);
    setDesignationID(*(accessorImpl.designationID_Accessor));
    setTarget(*(accessorImpl.target_Accessor));
    setTypeOfDesignation(*(accessorImpl.typeOfDesignation_Accessor));
    if (accessorImpl.designationObjective_Accessor) {
      setDesignationObjective(*(accessorImpl.designationObjective_Accessor));
    } else {
      designationObjective_Accessor.reset();
    }
    setApplicableSystemID(*(accessorImpl.applicableSystemID_Accessor));
  }
}

void DesignationDataType::reset() noexcept {
  designationID_Accessor->reset();
  target_Accessor->reset();
  typeOfDesignation_Accessor->reset();
  designationObjective_Accessor.reset();
  applicableSystemID_Accessor->reset();
}

const uci::type::DesignationID_Type& DesignationDataType::getDesignationID() const {
  return *designationID_Accessor;
}

uci::type::DesignationID_Type& DesignationDataType::getDesignationID() {
  return *designationID_Accessor;
}

uci::type::DesignationDataType& DesignationDataType::setDesignationID(const uci::type::DesignationID_Type& accessor) {
  if (&accessor != designationID_Accessor.get()) {
    designationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TargetType& DesignationDataType::getTarget() const {
  return *target_Accessor;
}

uci::type::TargetType& DesignationDataType::getTarget() {
  return *target_Accessor;
}

uci::type::DesignationDataType& DesignationDataType::setTarget(const uci::type::TargetType& accessor) {
  if (&accessor != target_Accessor.get()) {
    target_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DesignationEnum& DesignationDataType::getTypeOfDesignation() const {
  return *typeOfDesignation_Accessor;
}

uci::type::DesignationEnum& DesignationDataType::getTypeOfDesignation() {
  return *typeOfDesignation_Accessor;
}

uci::type::DesignationDataType& DesignationDataType::setTypeOfDesignation(const uci::type::DesignationEnum& accessor) {
  if (&accessor != typeOfDesignation_Accessor.get()) {
    typeOfDesignation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DesignationDataType& DesignationDataType::setTypeOfDesignation(uci::type::DesignationEnum::EnumerationItem value) {
  typeOfDesignation_Accessor->setValue(value);
  return *this;
}


uci::type::RequirementTaxonomyType& DesignationDataType::getDesignationObjective_() const {
  if (designationObjective_Accessor) {
    return *designationObjective_Accessor;
  }
  throw uci::base::UCIException("Error in getDesignationObjective(): An attempt was made to get an optional field that was not enabled, call hasDesignationObjective() to determine if it is safe to call getDesignationObjective()");
}

const uci::type::RequirementTaxonomyType& DesignationDataType::getDesignationObjective() const {
  return getDesignationObjective_();
}

uci::type::RequirementTaxonomyType& DesignationDataType::getDesignationObjective() {
  return getDesignationObjective_();
}

uci::type::DesignationDataType& DesignationDataType::setDesignationObjective(const uci::type::RequirementTaxonomyType& accessor) {
  enableDesignationObjective(accessor.getAccessorType());
  if (&accessor != designationObjective_Accessor.get()) {
    designationObjective_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DesignationDataType::hasDesignationObjective() const noexcept {
  return static_cast<bool>(designationObjective_Accessor);
}

uci::type::RequirementTaxonomyType& DesignationDataType::enableDesignationObjective(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTaxonomyType : type};
  if ((!designationObjective_Accessor) || (designationObjective_Accessor->getAccessorType() != requestedType)) {
    designationObjective_Accessor = RequirementTaxonomyType::create(requestedType);
    if (!designationObjective_Accessor) {
      throw uci::base::UCIException("Error in enableDesignationObjective(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *designationObjective_Accessor;
}

uci::type::DesignationDataType& DesignationDataType::clearDesignationObjective() noexcept {
  designationObjective_Accessor.reset();
  return *this;
}

const uci::type::DesignationDataType::ApplicableSystemID& DesignationDataType::getApplicableSystemID() const {
  return *applicableSystemID_Accessor;
}

uci::type::DesignationDataType::ApplicableSystemID& DesignationDataType::getApplicableSystemID() {
  return *applicableSystemID_Accessor;
}

uci::type::DesignationDataType& DesignationDataType::setApplicableSystemID(const uci::type::DesignationDataType::ApplicableSystemID& accessor) {
  if (&accessor != applicableSystemID_Accessor.get()) {
    applicableSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<DesignationDataType> DesignationDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::designationDataType : type};
  return (requestedType == uci::type::accessorType::designationDataType) ? boost::make_unique<DesignationDataType>() : nullptr;
}

/**  */
namespace DesignationDataType_Names {

constexpr const char* Extern_Type_Name{"DesignationDataType"};
constexpr const char* DesignationID_Name{"DesignationID"};
constexpr const char* Target_Name{"Target"};
constexpr const char* TypeOfDesignation_Name{"TypeOfDesignation"};
constexpr const char* DesignationObjective_Name{"DesignationObjective"};
constexpr const char* ApplicableSystemID_Name{"ApplicableSystemID"};

} // namespace DesignationDataType_Names

void DesignationDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DesignationDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DesignationDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DesignationDataType_Names::DesignationID_Name) {
      DesignationID_Type::deserialize(valueType.second, accessor.getDesignationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DesignationDataType_Names::Target_Name) {
      TargetType::deserialize(valueType.second, accessor.getTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DesignationDataType_Names::TypeOfDesignation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTypeOfDesignation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DesignationDataType_Names::DesignationObjective_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDesignationObjective(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DesignationDataType_Names::ApplicableSystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DesignationDataType::ApplicableSystemID& boundedList = accessor.getApplicableSystemID();
        const uci::type::DesignationDataType::ApplicableSystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string DesignationDataType::serialize(const uci::type::DesignationDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DesignationDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DesignationDataType_Names::Extern_Type_Name);
  }
  DesignationID_Type::serialize(accessor.getDesignationID(), node, DesignationDataType_Names::DesignationID_Name);
  TargetType::serialize(accessor.getTarget(), node, DesignationDataType_Names::Target_Name);
  DesignationEnum::serialize(accessor.getTypeOfDesignation(), node, DesignationDataType_Names::TypeOfDesignation_Name, false);
  if (accessor.hasDesignationObjective()) {
    RequirementTaxonomyType::serialize(accessor.getDesignationObjective(), node, DesignationDataType_Names::DesignationObjective_Name);
  }
  {
    const uci::type::DesignationDataType::ApplicableSystemID& boundedList = accessor.getApplicableSystemID();
    for (uci::type::DesignationDataType::ApplicableSystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, DesignationDataType_Names::ApplicableSystemID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DesignationDataType& DesignationDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DesignationDataType>().release());
}

uci::type::DesignationDataType& DesignationDataType::create(const uci::type::DesignationDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DesignationDataType> newAccessor{boost::make_unique<asb_uci::type::DesignationDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DesignationDataType::destroy(uci::type::DesignationDataType& accessor) {
  delete dynamic_cast<asb_uci::type::DesignationDataType*>(&accessor);
}

} // namespace type

} // namespace uci

