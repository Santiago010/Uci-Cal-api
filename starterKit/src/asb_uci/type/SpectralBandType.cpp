/** @file SpectralBandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SpectralBandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityID_Type.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "uci/type/SpectralBandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SpectralBandType::SpectralBandType()
  : frequency_Accessor{boost::make_unique<FrequencyRangeType>()},
    spectralDensity_Accessor{boost::make_unique<SpectralDensity>(0, SIZE_MAX)} {
}

SpectralBandType::~SpectralBandType() = default;

void SpectralBandType::copy(const uci::type::SpectralBandType& accessor) {
  copyImpl(accessor, false);
}

void SpectralBandType::copyImpl(const uci::type::SpectralBandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SpectralBandType&>(accessor);
    if (accessorImpl.activityID_Accessor) {
      setActivityID(*(accessorImpl.activityID_Accessor));
    } else {
      activityID_Accessor.reset();
    }
    setFrequency(*(accessorImpl.frequency_Accessor));
    setSpectralDensity(*(accessorImpl.spectralDensity_Accessor));
    spectralImage_Accessor = (accessorImpl.spectralImage_Accessor ? boost::make_unique<asb_xs::HexBinary>(*(accessorImpl.spectralImage_Accessor)) : nullptr);
  }
}

void SpectralBandType::reset() noexcept {
  activityID_Accessor.reset();
  frequency_Accessor->reset();
  spectralDensity_Accessor->reset();
  spectralImage_Accessor.reset();
}

uci::type::ActivityID_Type& SpectralBandType::getActivityID_() const {
  if (activityID_Accessor) {
    return *activityID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityID(): An attempt was made to get an optional field that was not enabled, call hasActivityID() to determine if it is safe to call getActivityID()");
}

const uci::type::ActivityID_Type& SpectralBandType::getActivityID() const {
  return getActivityID_();
}

uci::type::ActivityID_Type& SpectralBandType::getActivityID() {
  return getActivityID_();
}

uci::type::SpectralBandType& SpectralBandType::setActivityID(const uci::type::ActivityID_Type& accessor) {
  enableActivityID();
  if (&accessor != activityID_Accessor.get()) {
    activityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SpectralBandType::hasActivityID() const noexcept {
  return static_cast<bool>(activityID_Accessor);
}

uci::type::ActivityID_Type& SpectralBandType::enableActivityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityID_Type : type};
  if ((!activityID_Accessor) || (activityID_Accessor->getAccessorType() != requestedType)) {
    activityID_Accessor = ActivityID_Type::create(requestedType);
    if (!activityID_Accessor) {
      throw uci::base::UCIException("Error in enableActivityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityID_Accessor;
}

uci::type::SpectralBandType& SpectralBandType::clearActivityID() noexcept {
  activityID_Accessor.reset();
  return *this;
}

const uci::type::FrequencyRangeType& SpectralBandType::getFrequency() const {
  return *frequency_Accessor;
}

uci::type::FrequencyRangeType& SpectralBandType::getFrequency() {
  return *frequency_Accessor;
}

uci::type::SpectralBandType& SpectralBandType::setFrequency(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SpectralBandType::SpectralDensity& SpectralBandType::getSpectralDensity() const {
  return *spectralDensity_Accessor;
}

uci::type::SpectralBandType::SpectralDensity& SpectralBandType::getSpectralDensity() {
  return *spectralDensity_Accessor;
}

uci::type::SpectralBandType& SpectralBandType::setSpectralDensity(const uci::type::SpectralBandType::SpectralDensity& accessor) {
  if (&accessor != spectralDensity_Accessor.get()) {
    spectralDensity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::HexBinary& SpectralBandType::getSpectralImage_() const {
  if (spectralImage_Accessor) {
    return *spectralImage_Accessor;
  }
  throw uci::base::UCIException("Error in getSpectralImage(): An attempt was made to get an optional field that was not enabled, call hasSpectralImage() to determine if it is safe to call getSpectralImage()");
}

const xs::HexBinary& SpectralBandType::getSpectralImage() const {
  return getSpectralImage_();
}

xs::HexBinary& SpectralBandType::getSpectralImage() {
  return getSpectralImage_();
}

uci::type::SpectralBandType& SpectralBandType::setSpectralImage(const xs::HexBinary& value) {
  spectralImage_Accessor = boost::make_unique<asb_xs::HexBinary>(dynamic_cast<const asb_xs::HexBinary&>(value));
  return *this;
}

bool SpectralBandType::hasSpectralImage() const noexcept {
  return static_cast<bool>(spectralImage_Accessor);
}

xs::HexBinary& SpectralBandType::enableSpectralImage() {
  if (!spectralImage_Accessor) {
    spectralImage_Accessor = boost::make_unique<asb_xs::HexBinary>();
  }
  return *spectralImage_Accessor;
}

uci::type::SpectralBandType& SpectralBandType::clearSpectralImage() noexcept {
  spectralImage_Accessor.reset();
  return *this;
}

std::unique_ptr<SpectralBandType> SpectralBandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::spectralBandType : type};
  return (requestedType == uci::type::accessorType::spectralBandType) ? boost::make_unique<SpectralBandType>() : nullptr;
}

/**  */
namespace SpectralBandType_Names {

constexpr const char* Extern_Type_Name{"SpectralBandType"};
constexpr const char* ActivityID_Name{"ActivityID"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* SpectralDensity_Name{"SpectralDensity"};
constexpr const char* SpectralImage_Name{"SpectralImage"};

} // namespace SpectralBandType_Names

void SpectralBandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SpectralBandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SpectralBandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SpectralBandType_Names::ActivityID_Name) {
      ActivityID_Type::deserialize(valueType.second, accessor.enableActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SpectralBandType_Names::Frequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SpectralBandType_Names::SpectralDensity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SpectralBandType::SpectralDensity& boundedList = accessor.getSpectralDensity();
        const uci::type::SpectralBandType::SpectralDensity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setDoubleValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpectralBandType_Names::SpectralImage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        asb_uci::util::SerializationHelpers::deserializeHexBinary(*value, accessor.enableSpectralImage());
      }
    }
  }
}

std::string SpectralBandType::serialize(const uci::type::SpectralBandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SpectralBandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SpectralBandType_Names::Extern_Type_Name);
  }
  if (accessor.hasActivityID()) {
    ActivityID_Type::serialize(accessor.getActivityID(), node, SpectralBandType_Names::ActivityID_Name);
  }
  FrequencyRangeType::serialize(accessor.getFrequency(), node, SpectralBandType_Names::Frequency_Name);
  {
    const uci::type::SpectralBandType::SpectralDensity& boundedList = accessor.getSpectralDensity();
    for (uci::type::SpectralBandType::SpectralDensity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeDouble(boundedList.at(i), node, SpectralBandType_Names::SpectralDensity_Name);
    }
  }
  if (accessor.hasSpectralImage()) {
    asb_uci::util::SerializationHelpers::serializeHexBinary(accessor.getSpectralImage(), node, SpectralBandType_Names::SpectralImage_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SpectralBandType& SpectralBandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SpectralBandType>().release());
}

uci::type::SpectralBandType& SpectralBandType::create(const uci::type::SpectralBandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SpectralBandType> newAccessor{boost::make_unique<asb_uci::type::SpectralBandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SpectralBandType::destroy(uci::type::SpectralBandType& accessor) {
  delete dynamic_cast<asb_uci::type::SpectralBandType*>(&accessor);
}

} // namespace type

} // namespace uci

