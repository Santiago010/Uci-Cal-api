/** @file CryptoCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CryptoCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityID_Type.h"
#include "../../../include/asb_uci/type/CryptoLoadCommandType.h"
#include "../../../include/asb_uci/type/CryptoLocationType.h"
#include "../../../include/asb_uci/type/CryptoRolloverCommandType.h"
#include "../../../include/asb_uci/type/SupportCapabilityCommandBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CryptoCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CryptoLoadCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CryptoLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CryptoRolloverCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CryptoCommandType::CryptoCommandType()
  : supportActivityID_Accessor{boost::make_unique<SupportActivityID>(0, SIZE_MAX)},
    zeroize_Accessor{boost::make_unique<Zeroize>(0, SIZE_MAX)},
    load_Accessor{boost::make_unique<Load>(0, SIZE_MAX)} {
}

CryptoCommandType::~CryptoCommandType() = default;

void CryptoCommandType::copy(const uci::type::CryptoCommandType& accessor) {
  copyImpl(accessor, false);
}

void CryptoCommandType::copyImpl(const uci::type::CryptoCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SupportCapabilityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CryptoCommandType&>(accessor);
    setSupportActivityID(*(accessorImpl.supportActivityID_Accessor));
    setZeroize(*(accessorImpl.zeroize_Accessor));
    if (accessorImpl.rollover_Accessor) {
      setRollover(*(accessorImpl.rollover_Accessor));
    } else {
      rollover_Accessor.reset();
    }
    setLoad(*(accessorImpl.load_Accessor));
  }
}

void CryptoCommandType::reset() noexcept {
  SupportCapabilityCommandBaseType::reset();
  supportActivityID_Accessor->reset();
  zeroize_Accessor->reset();
  rollover_Accessor.reset();
  load_Accessor->reset();
}

const uci::type::CryptoCommandType::SupportActivityID& CryptoCommandType::getSupportActivityID() const {
  return *supportActivityID_Accessor;
}

uci::type::CryptoCommandType::SupportActivityID& CryptoCommandType::getSupportActivityID() {
  return *supportActivityID_Accessor;
}

uci::type::CryptoCommandType& CryptoCommandType::setSupportActivityID(const uci::type::CryptoCommandType::SupportActivityID& accessor) {
  if (&accessor != supportActivityID_Accessor.get()) {
    supportActivityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CryptoCommandType::Zeroize& CryptoCommandType::getZeroize() const {
  return *zeroize_Accessor;
}

uci::type::CryptoCommandType::Zeroize& CryptoCommandType::getZeroize() {
  return *zeroize_Accessor;
}

uci::type::CryptoCommandType& CryptoCommandType::setZeroize(const uci::type::CryptoCommandType::Zeroize& accessor) {
  if (&accessor != zeroize_Accessor.get()) {
    zeroize_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoRolloverCommandType& CryptoCommandType::getRollover_() const {
  if (rollover_Accessor) {
    return *rollover_Accessor;
  }
  throw uci::base::UCIException("Error in getRollover(): An attempt was made to get an optional field that was not enabled, call hasRollover() to determine if it is safe to call getRollover()");
}

const uci::type::CryptoRolloverCommandType& CryptoCommandType::getRollover() const {
  return getRollover_();
}

uci::type::CryptoRolloverCommandType& CryptoCommandType::getRollover() {
  return getRollover_();
}

uci::type::CryptoCommandType& CryptoCommandType::setRollover(const uci::type::CryptoRolloverCommandType& accessor) {
  enableRollover();
  if (&accessor != rollover_Accessor.get()) {
    rollover_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CryptoCommandType::hasRollover() const noexcept {
  return static_cast<bool>(rollover_Accessor);
}

uci::type::CryptoRolloverCommandType& CryptoCommandType::enableRollover(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoRolloverCommandType : type};
  if ((!rollover_Accessor) || (rollover_Accessor->getAccessorType() != requestedType)) {
    rollover_Accessor = CryptoRolloverCommandType::create(requestedType);
    if (!rollover_Accessor) {
      throw uci::base::UCIException("Error in enableRollover(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rollover_Accessor;
}

uci::type::CryptoCommandType& CryptoCommandType::clearRollover() noexcept {
  rollover_Accessor.reset();
  return *this;
}

const uci::type::CryptoCommandType::Load& CryptoCommandType::getLoad() const {
  return *load_Accessor;
}

uci::type::CryptoCommandType::Load& CryptoCommandType::getLoad() {
  return *load_Accessor;
}

uci::type::CryptoCommandType& CryptoCommandType::setLoad(const uci::type::CryptoCommandType::Load& accessor) {
  if (&accessor != load_Accessor.get()) {
    load_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CryptoCommandType> CryptoCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoCommandType : type};
  return (requestedType == uci::type::accessorType::cryptoCommandType) ? boost::make_unique<CryptoCommandType>() : nullptr;
}

/**  */
namespace CryptoCommandType_Names {

constexpr const char* Extern_Type_Name{"CryptoCommandType"};
constexpr const char* SupportActivityID_Name{"SupportActivityID"};
constexpr const char* Zeroize_Name{"Zeroize"};
constexpr const char* Rollover_Name{"Rollover"};
constexpr const char* Load_Name{"Load"};

} // namespace CryptoCommandType_Names

void CryptoCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CryptoCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CryptoCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CryptoCommandType_Names::SupportActivityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoCommandType::SupportActivityID& boundedList = accessor.getSupportActivityID();
        const uci::type::CryptoCommandType::SupportActivityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CryptoCommandType_Names::Zeroize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoCommandType::Zeroize& boundedList = accessor.getZeroize();
        const uci::type::CryptoCommandType::Zeroize::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CryptoLocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CryptoCommandType_Names::Rollover_Name) {
      CryptoRolloverCommandType::deserialize(valueType.second, accessor.enableRollover(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoCommandType_Names::Load_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoCommandType::Load& boundedList = accessor.getLoad();
        const uci::type::CryptoCommandType::Load::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CryptoLoadCommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  SupportCapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CryptoCommandType::serialize(const uci::type::CryptoCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CryptoCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CryptoCommandType_Names::Extern_Type_Name);
  }
  SupportCapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::CryptoCommandType::SupportActivityID& boundedList = accessor.getSupportActivityID();
    for (uci::type::CryptoCommandType::SupportActivityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityID_Type::serialize(boundedList.at(i), node, CryptoCommandType_Names::SupportActivityID_Name);
    }
  }
  {
    const uci::type::CryptoCommandType::Zeroize& boundedList = accessor.getZeroize();
    for (uci::type::CryptoCommandType::Zeroize::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CryptoLocationType::serialize(boundedList.at(i), node, CryptoCommandType_Names::Zeroize_Name);
    }
  }
  if (accessor.hasRollover()) {
    CryptoRolloverCommandType::serialize(accessor.getRollover(), node, CryptoCommandType_Names::Rollover_Name);
  }
  {
    const uci::type::CryptoCommandType::Load& boundedList = accessor.getLoad();
    for (uci::type::CryptoCommandType::Load::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CryptoLoadCommandType::serialize(boundedList.at(i), node, CryptoCommandType_Names::Load_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CryptoCommandType& CryptoCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CryptoCommandType>().release());
}

uci::type::CryptoCommandType& CryptoCommandType::create(const uci::type::CryptoCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CryptoCommandType> newAccessor{boost::make_unique<asb_uci::type::CryptoCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CryptoCommandType::destroy(uci::type::CryptoCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::CryptoCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

