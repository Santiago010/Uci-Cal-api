/** @file GatewayLink16ConfigurationMotionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GatewayLink16ConfigurationMotionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/GatewayLink16ConfigurationMovementVectorType.h"
#include "../../../include/asb_uci/type/GatewayLink16ConfigurationSlaveType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationMotionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationMovementVectorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationSlaveType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayLink16ConfigurationMotionType::GatewayLink16ConfigurationMotionType() = default;

GatewayLink16ConfigurationMotionType::~GatewayLink16ConfigurationMotionType() = default;

void GatewayLink16ConfigurationMotionType::copy(const uci::type::GatewayLink16ConfigurationMotionType& accessor) {
  copyImpl(accessor, false);
}

void GatewayLink16ConfigurationMotionType::copyImpl(const uci::type::GatewayLink16ConfigurationMotionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GatewayLink16ConfigurationMotionType&>(accessor);
    if (accessorImpl.moving_Accessor) {
      setMoving(*(accessorImpl.moving_Accessor));
    } else {
      moving_Accessor.reset();
    }
    if (accessorImpl.slaved_Accessor) {
      setSlaved(*(accessorImpl.slaved_Accessor));
    } else {
      slaved_Accessor.reset();
    }
  }
}

void GatewayLink16ConfigurationMotionType::reset() noexcept {
  moving_Accessor.reset();
  slaved_Accessor.reset();
}

uci::type::GatewayLink16ConfigurationMotionType::GatewayLink16ConfigurationMotionTypeChoice GatewayLink16ConfigurationMotionType::getGatewayLink16ConfigurationMotionTypeChoiceOrdinal() const noexcept {
  if (moving_Accessor) {
    return GATEWAYLINK16CONFIGURATIONMOTIONTYPE_CHOICE_MOVING;
  }
  if (slaved_Accessor) {
    return GATEWAYLINK16CONFIGURATIONMOTIONTYPE_CHOICE_SLAVED;
  }
  return GATEWAYLINK16CONFIGURATIONMOTIONTYPE_CHOICE_NONE;
}

uci::type::GatewayLink16ConfigurationMotionType& GatewayLink16ConfigurationMotionType::setGatewayLink16ConfigurationMotionTypeChoiceOrdinal(uci::type::GatewayLink16ConfigurationMotionType::GatewayLink16ConfigurationMotionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case GATEWAYLINK16CONFIGURATIONMOTIONTYPE_CHOICE_MOVING:
      chooseMoving("setGatewayLink16ConfigurationMotionTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONMOTIONTYPE_CHOICE_SLAVED:
      chooseSlaved("setGatewayLink16ConfigurationMotionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setGatewayLink16ConfigurationMotionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::GatewayLink16ConfigurationMovementVectorType& GatewayLink16ConfigurationMotionType::getMoving_() const {
  if (moving_Accessor) {
    return *moving_Accessor;
  }
  throw uci::base::UCIException("Error in getMoving(): Unable to get Moving, field not selected");
}

const uci::type::GatewayLink16ConfigurationMovementVectorType& GatewayLink16ConfigurationMotionType::getMoving() const {
  return getMoving_();
}

uci::type::GatewayLink16ConfigurationMovementVectorType& GatewayLink16ConfigurationMotionType::getMoving() {
  return getMoving_();
}

uci::type::GatewayLink16ConfigurationMotionType& GatewayLink16ConfigurationMotionType::setMoving(const uci::type::GatewayLink16ConfigurationMovementVectorType& accessor) {
  chooseMoving();
  if (&accessor != moving_Accessor.get()) {
    moving_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationMotionType::isMoving() const noexcept {
  return static_cast<bool>(moving_Accessor);
}

uci::type::GatewayLink16ConfigurationMovementVectorType& GatewayLink16ConfigurationMotionType::chooseMoving(const std::string& method, uci::base::accessorType::AccessorType type) {
  slaved_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationMovementVectorType : type};
  if ((!moving_Accessor) || (moving_Accessor->getAccessorType() != requestedType)) {
    moving_Accessor = GatewayLink16ConfigurationMovementVectorType::create(type);
    if (!moving_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *moving_Accessor;
}

uci::type::GatewayLink16ConfigurationMovementVectorType& GatewayLink16ConfigurationMotionType::chooseMoving(uci::base::accessorType::AccessorType type) {
  return chooseMoving("chooseMoving", type);
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationMotionType::getSlaved_() const {
  if (slaved_Accessor) {
    return *slaved_Accessor;
  }
  throw uci::base::UCIException("Error in getSlaved(): Unable to get Slaved, field not selected");
}

const uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationMotionType::getSlaved() const {
  return getSlaved_();
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationMotionType::getSlaved() {
  return getSlaved_();
}

uci::type::GatewayLink16ConfigurationMotionType& GatewayLink16ConfigurationMotionType::setSlaved(const uci::type::GatewayLink16ConfigurationSlaveType& accessor) {
  chooseSlaved(accessor.getAccessorType());
  if (&accessor != slaved_Accessor.get()) {
    slaved_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationMotionType::isSlaved() const noexcept {
  return static_cast<bool>(slaved_Accessor);
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationMotionType::chooseSlaved(const std::string& method, uci::base::accessorType::AccessorType type) {
  moving_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationSlaveType : type};
  if ((!slaved_Accessor) || (slaved_Accessor->getAccessorType() != requestedType)) {
    slaved_Accessor = GatewayLink16ConfigurationSlaveType::create(type);
    if (!slaved_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slaved_Accessor;
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationMotionType::chooseSlaved(uci::base::accessorType::AccessorType type) {
  return chooseSlaved("chooseSlaved", type);
}

std::unique_ptr<GatewayLink16ConfigurationMotionType> GatewayLink16ConfigurationMotionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationMotionType : type};
  return (requestedType == uci::type::accessorType::gatewayLink16ConfigurationMotionType) ? boost::make_unique<GatewayLink16ConfigurationMotionType>() : nullptr;
}

/**  */
namespace GatewayLink16ConfigurationMotionType_Names {

constexpr const char* Extern_Type_Name{"GatewayLink16ConfigurationMotionType"};
constexpr const char* Moving_Name{"Moving"};
constexpr const char* Slaved_Name{"Slaved"};

} // namespace GatewayLink16ConfigurationMotionType_Names

void GatewayLink16ConfigurationMotionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayLink16ConfigurationMotionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayLink16ConfigurationMotionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationMotionType_Names::Moving_Name) {
      GatewayLink16ConfigurationMovementVectorType::deserialize(valueType.second, accessor.chooseMoving(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationMotionType_Names::Slaved_Name) {
      GatewayLink16ConfigurationSlaveType::deserialize(valueType.second, accessor.chooseSlaved(), nodeName, nsPrefix);
    }
  }
}

std::string GatewayLink16ConfigurationMotionType::serialize(const uci::type::GatewayLink16ConfigurationMotionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayLink16ConfigurationMotionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayLink16ConfigurationMotionType_Names::Extern_Type_Name);
  }
  if (accessor.isMoving()) {
    GatewayLink16ConfigurationMovementVectorType::serialize(accessor.getMoving(), node, GatewayLink16ConfigurationMotionType_Names::Moving_Name);
  } else if (accessor.isSlaved()) {
    GatewayLink16ConfigurationSlaveType::serialize(accessor.getSlaved(), node, GatewayLink16ConfigurationMotionType_Names::Slaved_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayLink16ConfigurationMotionType& GatewayLink16ConfigurationMotionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayLink16ConfigurationMotionType>().release());
}

uci::type::GatewayLink16ConfigurationMotionType& GatewayLink16ConfigurationMotionType::create(const uci::type::GatewayLink16ConfigurationMotionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayLink16ConfigurationMotionType> newAccessor{boost::make_unique<asb_uci::type::GatewayLink16ConfigurationMotionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayLink16ConfigurationMotionType::destroy(uci::type::GatewayLink16ConfigurationMotionType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayLink16ConfigurationMotionType*>(&accessor);
}

} // namespace type

} // namespace uci

