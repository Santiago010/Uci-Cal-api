/** @file SubsystemCompletedBIT_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SubsystemCompletedBIT_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BIT_ID_Type.h"
#include "../../../include/asb_uci/type/SubsystemBIT_ResultEnum.h"
#include "../../../include/asb_uci/type/SubsystemCompletedBIT_ItemType.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BIT_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemBIT_ResultEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemCompletedBIT_ItemType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemCompletedBIT_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemCompletedBIT_Type::SubsystemCompletedBIT_Type()
  : bIT_ID_Accessor{boost::make_unique<BIT_ID_Type>()},
    result_Accessor{boost::make_unique<SubsystemBIT_ResultEnum>()},
    bIT_Item_Accessor{boost::make_unique<BIT_Item>(0, SIZE_MAX)} {
}

SubsystemCompletedBIT_Type::~SubsystemCompletedBIT_Type() = default;

void SubsystemCompletedBIT_Type::copy(const uci::type::SubsystemCompletedBIT_Type& accessor) {
  copyImpl(accessor, false);
}

void SubsystemCompletedBIT_Type::copyImpl(const uci::type::SubsystemCompletedBIT_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemCompletedBIT_Type&>(accessor);
    setBIT_ID(*(accessorImpl.bIT_ID_Accessor));
    setTimetag(accessorImpl.timetag_Accessor);
    setResult(*(accessorImpl.result_Accessor));
    if (accessorImpl.failReason_Accessor) {
      setFailReason(*(accessorImpl.failReason_Accessor));
    } else {
      failReason_Accessor.reset();
    }
    setBIT_Item(*(accessorImpl.bIT_Item_Accessor));
  }
}

void SubsystemCompletedBIT_Type::reset() noexcept {
  bIT_ID_Accessor->reset();
  timetag_Accessor = 0;
  result_Accessor->reset();
  failReason_Accessor.reset();
  bIT_Item_Accessor->reset();
}

const uci::type::BIT_ID_Type& SubsystemCompletedBIT_Type::getBIT_ID() const {
  return *bIT_ID_Accessor;
}

uci::type::BIT_ID_Type& SubsystemCompletedBIT_Type::getBIT_ID() {
  return *bIT_ID_Accessor;
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setBIT_ID(const uci::type::BIT_ID_Type& accessor) {
  if (&accessor != bIT_ID_Accessor.get()) {
    bIT_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue SubsystemCompletedBIT_Type::getTimetag() const {
  return timetag_Accessor;
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setTimetag(uci::type::DateTimeTypeValue value) {
  timetag_Accessor = value;
  return *this;
}


const uci::type::SubsystemBIT_ResultEnum& SubsystemCompletedBIT_Type::getResult() const {
  return *result_Accessor;
}

uci::type::SubsystemBIT_ResultEnum& SubsystemCompletedBIT_Type::getResult() {
  return *result_Accessor;
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setResult(const uci::type::SubsystemBIT_ResultEnum& accessor) {
  if (&accessor != result_Accessor.get()) {
    result_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setResult(uci::type::SubsystemBIT_ResultEnum::EnumerationItem value) {
  result_Accessor->setValue(value);
  return *this;
}


std::string& SubsystemCompletedBIT_Type::getFailReason_() const {
  if (failReason_Accessor) {
    return *failReason_Accessor;
  }
  throw uci::base::UCIException("Error in getFailReason(): An attempt was made to get an optional field that was not enabled, call hasFailReason() to determine if it is safe to call getFailReason()");
}

const std::string& SubsystemCompletedBIT_Type::getFailReason() const {
  return getFailReason_();
}

std::string& SubsystemCompletedBIT_Type::getFailReason() {
  return getFailReason_();
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setFailReason(const uci::type::VisibleString256Type& value) {
  return setFailReason(value.c_str());
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setFailReason(const std::string& value) {
  return setFailReason(value.c_str());
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setFailReason(const char* value) {
 failReason_Accessor = boost::make_unique<std::string>(value);
  return *this;
}

bool SubsystemCompletedBIT_Type::hasFailReason() const noexcept {
  return static_cast<bool>(failReason_Accessor);
}

std::string& SubsystemCompletedBIT_Type::enableFailReason(uci::base::accessorType::AccessorType type) {
  if (!failReason_Accessor) {
    failReason_Accessor = boost::make_unique<std::string>("");
  }
  return *failReason_Accessor;
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::clearFailReason() noexcept {
  failReason_Accessor.reset();
  return *this;
}

const uci::type::SubsystemCompletedBIT_Type::BIT_Item& SubsystemCompletedBIT_Type::getBIT_Item() const {
  return *bIT_Item_Accessor;
}

uci::type::SubsystemCompletedBIT_Type::BIT_Item& SubsystemCompletedBIT_Type::getBIT_Item() {
  return *bIT_Item_Accessor;
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::setBIT_Item(const uci::type::SubsystemCompletedBIT_Type::BIT_Item& accessor) {
  if (&accessor != bIT_Item_Accessor.get()) {
    bIT_Item_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SubsystemCompletedBIT_Type> SubsystemCompletedBIT_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemCompletedBIT_Type : type};
  return (requestedType == uci::type::accessorType::subsystemCompletedBIT_Type) ? boost::make_unique<SubsystemCompletedBIT_Type>() : nullptr;
}

/**  */
namespace SubsystemCompletedBIT_Type_Names {

constexpr const char* Extern_Type_Name{"SubsystemCompletedBIT_Type"};
constexpr const char* BIT_ID_Name{"BIT_ID"};
constexpr const char* Timetag_Name{"Timetag"};
constexpr const char* Result_Name{"Result"};
constexpr const char* FailReason_Name{"FailReason"};
constexpr const char* BIT_Item_Name{"BIT_Item"};

} // namespace SubsystemCompletedBIT_Type_Names

void SubsystemCompletedBIT_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemCompletedBIT_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemCompletedBIT_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_Type_Names::BIT_ID_Name) {
      BIT_ID_Type::deserialize(valueType.second, accessor.getBIT_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_Type_Names::Timetag_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimetag(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_Type_Names::Result_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getResult().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_Type_Names::FailReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFailReason(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemCompletedBIT_Type_Names::BIT_Item_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemCompletedBIT_Type::BIT_Item& boundedList = accessor.getBIT_Item();
        const uci::type::SubsystemCompletedBIT_Type::BIT_Item::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemCompletedBIT_ItemType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SubsystemCompletedBIT_Type::serialize(const uci::type::SubsystemCompletedBIT_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemCompletedBIT_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemCompletedBIT_Type_Names::Extern_Type_Name);
  }
  BIT_ID_Type::serialize(accessor.getBIT_ID(), node, SubsystemCompletedBIT_Type_Names::BIT_ID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimetag(), node, SubsystemCompletedBIT_Type_Names::Timetag_Name);
  SubsystemBIT_ResultEnum::serialize(accessor.getResult(), node, SubsystemCompletedBIT_Type_Names::Result_Name, false);
  if (accessor.hasFailReason()) {
    // TODO:COMENTO ESTA LINEA PORUQE ACESSOR DEVUELVE UN STD::STRING Y ESO NO ES LO QUE NECESITA
    // asb_uci::util::SerializationHelpers::serializeString(accessor.getFailReason(), node, SubsystemCompletedBIT_Type_Names::FailReason_Name);
  }
  {
    const uci::type::SubsystemCompletedBIT_Type::BIT_Item& boundedList = accessor.getBIT_Item();
    for (uci::type::SubsystemCompletedBIT_Type::BIT_Item::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubsystemCompletedBIT_ItemType::serialize(boundedList.at(i), node, SubsystemCompletedBIT_Type_Names::BIT_Item_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemCompletedBIT_Type>().release());
}

uci::type::SubsystemCompletedBIT_Type& SubsystemCompletedBIT_Type::create(const uci::type::SubsystemCompletedBIT_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemCompletedBIT_Type> newAccessor{boost::make_unique<asb_uci::type::SubsystemCompletedBIT_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemCompletedBIT_Type::destroy(uci::type::SubsystemCompletedBIT_Type& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemCompletedBIT_Type*>(&accessor);
}

} // namespace type

} // namespace uci

